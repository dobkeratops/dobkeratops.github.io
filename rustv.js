// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function shell_read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.responseType = 'arraybuffer';
      xhr.send(null);
      return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function shell_print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function shell_printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}
if (!Module['quit']) {
  Module['quit'] = function(status, toThrow) {
    throw toThrow;
  }
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
    return value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    if (!func) return; // on null pointer, return undefined
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { assert(DYNAMICTOP_PTR);var ret = HEAP32[DYNAMICTOP_PTR>>2];var end = (((ret + size + 15)|0) & -16);HEAP32[DYNAMICTOP_PTR>>2] = end;if (end >= TOTAL_MEMORY) {var success = enlargeMemory();if (!success) {HEAP32[DYNAMICTOP_PTR>>2] = ret;return 0;}}return ret;},
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = Runtime.stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (!runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var __cxa_demangle_func = Module['___cxa_demangle'] || Module['__cxa_demangle'];
  if (__cxa_demangle_func) {
    try {
      var s =
        func.substr(1);
      var len = lengthBytesUTF8(s)+1;
      var buf = _malloc(len);
      stringToUTF8(s, buf, len);
      var status = _malloc(4);
      var ret = __cxa_demangle_func(buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - Module['asm'].stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime.warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = Runtime.GLOBAL_BASE;

STATICTOP = STATIC_BASE + 40496;
/* global initializers */  __ATINIT__.push();


/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:[],currentContext:null,offscreenCanvases:{},timerQueriesEXT:[],queries:[],samplers:[],transformFeedbacks:[],syncs:[],currArrayBuffer:0,currElementArrayBuffer:0,byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},stringiCache:{},tempFixedLengthArray:[],packAlignment:4,unpackAlignment:4,init:function () {
        GL.createLog2ceilLookup(GL.MAX_TEMP_BUFFER_SIZE);
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
  
        // For functions such as glDrawBuffers, glInvalidateFramebuffer and glInvalidateSubFramebuffer that need to pass a short array to the WebGL API,
        // create a set of short fixed-length arrays to avoid having to generate any garbage when calling those functions.
        for (var i = 0; i < 32; i++) {
          GL.tempFixedLengthArray.push(new Array(i));
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:256,miniTempBuffer:null,miniTempBufferViews:[0],MAX_TEMP_BUFFER_SIZE:2097152,numTempVertexBuffersPerSize:64,log2ceilLookup:null,createLog2ceilLookup:function (maxValue) {
        GL.log2ceilLookup = new Uint8Array(maxValue+1);
        var log2 = 0;
        var pow2 = 1;
        GL.log2ceilLookup[0] = 0;
        for (var i = 1; i <= maxValue; ++i) {
          if (i > pow2) {
            pow2 <<= 1;
            ++log2;
          }
          GL.log2ceilLookup[i] = log2;
        }
      },generateTempBuffers:function (quads, context) {
        var largestIndex = GL.log2ceilLookup[GL.MAX_TEMP_BUFFER_SIZE];
        context.tempVertexBufferCounters1 = [];
        context.tempVertexBufferCounters2 = [];
        context.tempVertexBufferCounters1.length = context.tempVertexBufferCounters2.length = largestIndex+1;
        context.tempVertexBuffers1 = [];
        context.tempVertexBuffers2 = [];
        context.tempVertexBuffers1.length = context.tempVertexBuffers2.length = largestIndex+1;
        context.tempIndexBuffers = [];
        context.tempIndexBuffers.length = largestIndex+1;
        for (var i = 0; i <= largestIndex; ++i) {
          context.tempIndexBuffers[i] = null; // Created on-demand
          context.tempVertexBufferCounters1[i] = context.tempVertexBufferCounters2[i] = 0;
          var ringbufferLength = GL.numTempVertexBuffersPerSize;
          context.tempVertexBuffers1[i] = [];
          context.tempVertexBuffers2[i] = [];
          var ringbuffer1 = context.tempVertexBuffers1[i];
          var ringbuffer2 = context.tempVertexBuffers2[i];
          ringbuffer1.length = ringbuffer2.length = ringbufferLength;
          for (var j = 0; j < ringbufferLength; ++j) {
            ringbuffer1[j] = ringbuffer2[j] = null; // Created on-demand
          }
        }
  
        if (quads) {
          // GL_QUAD indexes can be precalculated
          context.tempQuadIndexBuffer = GLctx.createBuffer();
          context.GLctx.bindBuffer(context.GLctx.ELEMENT_ARRAY_BUFFER, context.tempQuadIndexBuffer);
          var numIndexes = GL.MAX_TEMP_BUFFER_SIZE >> 1;
          var quadIndexes = new Uint16Array(numIndexes);
          var i = 0, v = 0;
          while (1) {
            quadIndexes[i++] = v;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+1;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+2;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+2;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+3;
            if (i >= numIndexes) break;
            v += 4;
          }
          context.GLctx.bufferData(context.GLctx.ELEMENT_ARRAY_BUFFER, quadIndexes, context.GLctx.STATIC_DRAW);
          context.GLctx.bindBuffer(context.GLctx.ELEMENT_ARRAY_BUFFER, null);
        }
      },getTempVertexBuffer:function getTempVertexBuffer(sizeBytes) {
        var idx = GL.log2ceilLookup[sizeBytes];
        var ringbuffer = GL.currentContext.tempVertexBuffers1[idx];
        var nextFreeBufferIndex = GL.currentContext.tempVertexBufferCounters1[idx];
        GL.currentContext.tempVertexBufferCounters1[idx] = (GL.currentContext.tempVertexBufferCounters1[idx]+1) & (GL.numTempVertexBuffersPerSize-1);
        var vbo = ringbuffer[nextFreeBufferIndex];
        if (vbo) {
          return vbo;
        }
        var prevVBO = GLctx.getParameter(GLctx.ARRAY_BUFFER_BINDING);
        ringbuffer[nextFreeBufferIndex] = GLctx.createBuffer();
        GLctx.bindBuffer(GLctx.ARRAY_BUFFER, ringbuffer[nextFreeBufferIndex]);
        GLctx.bufferData(GLctx.ARRAY_BUFFER, 1 << idx, GLctx.DYNAMIC_DRAW);
        GLctx.bindBuffer(GLctx.ARRAY_BUFFER, prevVBO);
        return ringbuffer[nextFreeBufferIndex];
      },getTempIndexBuffer:function getTempIndexBuffer(sizeBytes) {
        var idx = GL.log2ceilLookup[sizeBytes];
        var ibo = GL.currentContext.tempIndexBuffers[idx];
        if (ibo) {
          return ibo;
        }
        var prevIBO = GLctx.getParameter(GLctx.ELEMENT_ARRAY_BUFFER_BINDING);
        GL.currentContext.tempIndexBuffers[idx] = GLctx.createBuffer();
        GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, GL.currentContext.tempIndexBuffers[idx]);
        GLctx.bufferData(GLctx.ELEMENT_ARRAY_BUFFER, 1 << idx, GLctx.DYNAMIC_DRAW);
        GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, prevIBO);
        return GL.currentContext.tempIndexBuffers[idx];
      },newRenderingFrameStarted:function newRenderingFrameStarted() {
        if (!GL.currentContext) {
          return;
        }
        var vb = GL.currentContext.tempVertexBuffers1;
        GL.currentContext.tempVertexBuffers1 = GL.currentContext.tempVertexBuffers2;
        GL.currentContext.tempVertexBuffers2 = vb;
        vb = GL.currentContext.tempVertexBufferCounters1;
        GL.currentContext.tempVertexBufferCounters1 = GL.currentContext.tempVertexBufferCounters2;
        GL.currentContext.tempVertexBufferCounters2 = vb;
        var largestIndex = GL.log2ceilLookup[GL.MAX_TEMP_BUFFER_SIZE];
        for (var i = 0; i <= largestIndex; ++i) {
          GL.currentContext.tempVertexBufferCounters1[i] = 0;
        }
      },findToken:function (source, token) {
        function isIdentChar(ch) {
          if (ch >= 48 && ch <= 57) // 0-9
            return true;
          if (ch >= 65 && ch <= 90) // A-Z
            return true;
          if (ch >= 97 && ch <= 122) // a-z
            return true;
          return false;
        }
        var i = -1;
        do {
          i = source.indexOf(token, i + 1);
          if (i < 0) {
            break;
          }
          if (i > 0 && isIdentChar(source[i - 1])) {
            continue;
          }
          i += token.length;
          if (i < source.length - 1 && isIdentChar(source[i + 1])) {
            continue;
          }
          return true;
        } while (true);
        return false;
      },getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var frag;
          if (length) {
            var len = HEAP32[(((length)+(i*4))>>2)];
            if (len < 0) {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
            } else {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len);
            }
          } else {
            frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
          }
          source += frag;
        }
        // Let's see if we need to enable the standard derivatives extension
        type = GLctx.getShaderParameter(GL.shaders[shader], 0x8B4F /* GL_SHADER_TYPE */);
        if (type == 0x8B30 /* GL_FRAGMENT_SHADER */) {
          if (GL.findToken(source, "dFdx") ||
              GL.findToken(source, "dFdy") ||
              GL.findToken(source, "fwidth")) {
            source = "#extension GL_OES_standard_derivatives : enable\n" + source;
            var extension = GLctx.getExtension("OES_standard_derivatives");
          }
        }
        return source;
      },createContext:function (canvas, webGLContextAttributes) {
        if (typeof webGLContextAttributes['majorVersion'] === 'undefined' && typeof webGLContextAttributes['minorVersion'] === 'undefined') {
          // If caller did not specify a context, initialize the best one that is possibly available.
          // To explicitly create a WebGL 1 or a WebGL 2 context, call this function with a specific
          // majorVersion set.
          if (typeof WebGL2RenderingContext !== 'undefined') webGLContextAttributes['majorVersion'] = 2;
          else webGLContextAttributes['majorVersion'] = 1;
          webGLContextAttributes['minorVersion'] = 0;
        }
  
  
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
          try {
            if (webGLContextAttributes['majorVersion'] == 1 && webGLContextAttributes['minorVersion'] == 0) {
              ctx = canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes);
            } else if (webGLContextAttributes['majorVersion'] == 2 && webGLContextAttributes['minorVersion'] == 0) {
              ctx = canvas.getContext("webgl2", webGLContextAttributes);
            } else {
              throw 'Unsupported WebGL context version ' + majorVersion + '.' + minorVersion + '!'
            }
          } finally {
            canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e, JSON.stringify(webGLContextAttributes)]);
          return 0;
        }
  
        if (!ctx) return 0;
        var context = GL.registerContext(ctx, webGLContextAttributes);
        return context;
      },registerContext:function (ctx, webGLContextAttributes) {
        var handle = GL.getNewId(GL.contexts);
        var context = {
          handle: handle,
          attributes: webGLContextAttributes,
          version: webGLContextAttributes['majorVersion'],
          GLctx: ctx
        };
  
        // BUG: Workaround Chrome WebGL 2 issue: the first shipped versions of WebGL 2 in Chrome did not actually implement the new WebGL 2 functions.
        //      Those are supported only in Chrome 58 and newer.
        function getChromeVersion() {
          var raw = navigator.userAgent.match(/Chrom(e|ium)\/([0-9]+)\./);
          return raw ? parseInt(raw[2], 10) : false;
        }
        context.supportsWebGL2EntryPoints = (context.version >= 2) && (getChromeVersion() === false || getChromeVersion() >= 58);
  
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes['enableExtensionsByDefault'] === 'undefined' || webGLContextAttributes['enableExtensionsByDefault']) {
          GL.initExtensions(context);
        }
        return handle;
      },makeContextCurrent:function (contextHandle) {
        var context = GL.contexts[contextHandle];
        if (!context) return false;
        GLctx = Module.ctx = context.GLctx; // Active WebGL context object.
        GL.currentContext = context; // Active Emscripten GL layer context object.
        return true;
      },getContext:function (contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function (contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        GL.contexts[contextHandle] = null;
      },initExtensions:function (context) {
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        context.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist. 
        context.compressionExt = GLctx.getExtension('WEBGL_compressed_texture_s3tc');
        context.anisotropicExt = GLctx.getExtension('EXT_texture_filter_anisotropic');
  
        if (context.version < 2) {
          // Extension available from Firefox 26 and Google Chrome 30
          var instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
          if (instancedArraysExt) {
            GLctx['vertexAttribDivisor'] = function(index, divisor) { instancedArraysExt['vertexAttribDivisorANGLE'](index, divisor); };
            GLctx['drawArraysInstanced'] = function(mode, first, count, primcount) { instancedArraysExt['drawArraysInstancedANGLE'](mode, first, count, primcount); };
            GLctx['drawElementsInstanced'] = function(mode, count, type, indices, primcount) { instancedArraysExt['drawElementsInstancedANGLE'](mode, count, type, indices, primcount); };
          }
  
          // Extension available from Firefox 25 and WebKit
          var vaoExt = GLctx.getExtension('OES_vertex_array_object');
          if (vaoExt) {
            GLctx['createVertexArray'] = function() { return vaoExt['createVertexArrayOES'](); };
            GLctx['deleteVertexArray'] = function(vao) { vaoExt['deleteVertexArrayOES'](vao); };
            GLctx['bindVertexArray'] = function(vao) { vaoExt['bindVertexArrayOES'](vao); };
            GLctx['isVertexArray'] = function(vao) { return vaoExt['isVertexArrayOES'](vao); };
          }
  
          var drawBuffersExt = GLctx.getExtension('WEBGL_draw_buffers');
          if (drawBuffersExt) {
            GLctx['drawBuffers'] = function(n, bufs) { drawBuffersExt['drawBuffersWEBGL'](n, bufs); };
          }
        }
  
        GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query");
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays",
                                               "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc",
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_frag_depth", "EXT_sRGB", "WEBGL_draw_buffers", "WEBGL_shared_resources",
                                               "EXT_shader_texture_lod", "EXT_color_buffer_float"];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (ext.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
        var exts = GLctx.getSupportedExtensions();
        if (exts && exts.length > 0) {
          GLctx.getSupportedExtensions().forEach(function(ext) {
            if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
              GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
            }
          });
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1, // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
          maxUniformBlockNameLength: -1 // Lazily computed as well
        };
  
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then 
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          if (loc != null)
          {
            var id = GL.getNewId(GL.uniforms);
            utable[name] = [u.size, id];
            GL.uniforms[id] = loc;
  
            for (var j = 1; j < u.size; ++j) {
              var n = name + '['+j+']';
              loc = GLctx.getUniformLocation(p, n);
              id = GL.getNewId(GL.uniforms);
  
              GL.uniforms[id] = loc;
            }
          }
        }
      }};function _glFlush() { GLctx['flush']() }

   

  function _glClearColor(x0, x1, x2, x3) { GLctx['clearColor'](x0, x1, x2, x3) }

   

  
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              window.postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else window.postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  function _emscripten_get_now() { abort() }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
        GL.newRenderingFrameStarted();
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) Browser.setFullscreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          Module.printErr('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};var GLUT={initTime:null,idleFunc:null,displayFunc:null,keyboardFunc:null,keyboardUpFunc:null,specialFunc:null,specialUpFunc:null,reshapeFunc:null,motionFunc:null,passiveMotionFunc:null,mouseFunc:null,buttons:0,modifiers:0,initWindowWidth:256,initWindowHeight:256,initDisplayMode:18,windowX:0,windowY:0,windowWidth:0,windowHeight:0,requestedAnimationFrame:false,saveModifiers:function (event) {
        GLUT.modifiers = 0;
        if (event['shiftKey'])
          GLUT.modifiers += 1; /* GLUT_ACTIVE_SHIFT */
        if (event['ctrlKey'])
          GLUT.modifiers += 2; /* GLUT_ACTIVE_CTRL */
        if (event['altKey'])
          GLUT.modifiers += 4; /* GLUT_ACTIVE_ALT */
      },onMousemove:function (event) {
        /* Send motion event only if the motion changed, prevents
         * spamming our app with uncessary callback call. It does happen in
         * Chrome on Windows.
         */
        var lastX = Browser.mouseX;
        var lastY = Browser.mouseY;
        Browser.calculateMouseEvent(event);
        var newX = Browser.mouseX;
        var newY = Browser.mouseY;
        if (newX == lastX && newY == lastY) return;
  
        if (GLUT.buttons == 0 && event.target == Module["canvas"] && GLUT.passiveMotionFunc) {
          event.preventDefault();
          GLUT.saveModifiers(event);
          Module['dynCall_vii'](GLUT.passiveMotionFunc, lastX, lastY);
        } else if (GLUT.buttons != 0 && GLUT.motionFunc) {
          event.preventDefault();
          GLUT.saveModifiers(event);
          Module['dynCall_vii'](GLUT.motionFunc, lastX, lastY);
        }
      },getSpecialKey:function (keycode) {
          var key = null;
          switch (keycode) {
            case 8:  key = 120 /* backspace */; break;
            case 46: key = 111 /* delete */; break;
  
            case 0x70 /*DOM_VK_F1*/: key = 1 /* GLUT_KEY_F1 */; break;
            case 0x71 /*DOM_VK_F2*/: key = 2 /* GLUT_KEY_F2 */; break;
            case 0x72 /*DOM_VK_F3*/: key = 3 /* GLUT_KEY_F3 */; break;
            case 0x73 /*DOM_VK_F4*/: key = 4 /* GLUT_KEY_F4 */; break;
            case 0x74 /*DOM_VK_F5*/: key = 5 /* GLUT_KEY_F5 */; break;
            case 0x75 /*DOM_VK_F6*/: key = 6 /* GLUT_KEY_F6 */; break;
            case 0x76 /*DOM_VK_F7*/: key = 7 /* GLUT_KEY_F7 */; break;
            case 0x77 /*DOM_VK_F8*/: key = 8 /* GLUT_KEY_F8 */; break;
            case 0x78 /*DOM_VK_F9*/: key = 9 /* GLUT_KEY_F9 */; break;
            case 0x79 /*DOM_VK_F10*/: key = 10 /* GLUT_KEY_F10 */; break;
            case 0x7a /*DOM_VK_F11*/: key = 11 /* GLUT_KEY_F11 */; break;
            case 0x7b /*DOM_VK_F12*/: key = 12 /* GLUT_KEY_F12 */; break;
            case 0x25 /*DOM_VK_LEFT*/: key = 100 /* GLUT_KEY_LEFT */; break;
            case 0x26 /*DOM_VK_UP*/: key = 101 /* GLUT_KEY_UP */; break;
            case 0x27 /*DOM_VK_RIGHT*/: key = 102 /* GLUT_KEY_RIGHT */; break;
            case 0x28 /*DOM_VK_DOWN*/: key = 103 /* GLUT_KEY_DOWN */; break;
            case 0x21 /*DOM_VK_PAGE_UP*/: key = 104 /* GLUT_KEY_PAGE_UP */; break;
            case 0x22 /*DOM_VK_PAGE_DOWN*/: key = 105 /* GLUT_KEY_PAGE_DOWN */; break;
            case 0x24 /*DOM_VK_HOME*/: key = 106 /* GLUT_KEY_HOME */; break;
            case 0x23 /*DOM_VK_END*/: key = 107 /* GLUT_KEY_END */; break;
            case 0x2d /*DOM_VK_INSERT*/: key = 108 /* GLUT_KEY_INSERT */; break;
  
            case 16   /*DOM_VK_SHIFT*/:
            case 0x05 /*DOM_VK_LEFT_SHIFT*/:
              key = 112 /* GLUT_KEY_SHIFT_L */;
              break;
            case 0x06 /*DOM_VK_RIGHT_SHIFT*/:
              key = 113 /* GLUT_KEY_SHIFT_R */;
              break;
  
            case 17   /*DOM_VK_CONTROL*/:
            case 0x03 /*DOM_VK_LEFT_CONTROL*/:
              key = 114 /* GLUT_KEY_CONTROL_L */;
              break;
            case 0x04 /*DOM_VK_RIGHT_CONTROL*/:
              key = 115 /* GLUT_KEY_CONTROL_R */;
              break;
  
            case 18   /*DOM_VK_ALT*/:
            case 0x02 /*DOM_VK_LEFT_ALT*/:
              key = 116 /* GLUT_KEY_ALT_L */;
              break;
            case 0x01 /*DOM_VK_RIGHT_ALT*/:
              key = 117 /* GLUT_KEY_ALT_R */;
              break;
          };
          return key;
      },getASCIIKey:function (event) {
        if (event['ctrlKey'] || event['altKey'] || event['metaKey']) return null;
  
        var keycode = event['keyCode'];
  
        /* The exact list is soooo hard to find in a canonical place! */
  
        if (48 <= keycode && keycode <= 57)
          return keycode; // numeric  TODO handle shift?
        if (65 <= keycode && keycode <= 90)
          return event['shiftKey'] ? keycode : keycode + 32;
        if (96 <= keycode && keycode <= 105)
          return keycode - 48; // numpad numbers    
        if (106 <= keycode && keycode <= 111)
          return keycode - 106 + 42; // *,+-./  TODO handle shift?
  
        switch (keycode) {
          case 9:  // tab key
          case 13: // return key
          case 27: // escape
          case 32: // space
          case 61: // equal
            return keycode;
        }
  
        var s = event['shiftKey'];
        switch (keycode) {
          case 186: return s ? 58 : 59; // colon / semi-colon
          case 187: return s ? 43 : 61; // add / equal (these two may be wrong)
          case 188: return s ? 60 : 44; // less-than / comma
          case 189: return s ? 95 : 45; // dash
          case 190: return s ? 62 : 46; // greater-than / period
          case 191: return s ? 63 : 47; // forward slash
          case 219: return s ? 123 : 91; // open bracket
          case 220: return s ? 124 : 47; // back slash
          case 221: return s ? 125 : 93; // close braket
          case 222: return s ? 34 : 39; // single quote
        }
  
        return null;
      },onKeydown:function (event) {
        if (GLUT.specialFunc || GLUT.keyboardFunc) {
          var key = GLUT.getSpecialKey(event['keyCode']);
          if (key !== null) {
            if( GLUT.specialFunc ) {
              event.preventDefault();
              GLUT.saveModifiers(event);
              Module['dynCall_viii'](GLUT.specialFunc, key, Browser.mouseX, Browser.mouseY);
            }
          }
          else
          {
            key = GLUT.getASCIIKey(event);
            if( key !== null && GLUT.keyboardFunc ) {
              event.preventDefault();
              GLUT.saveModifiers(event);
              Module['dynCall_viii'](GLUT.keyboardFunc, key, Browser.mouseX, Browser.mouseY);
            }
          }
        }
      },onKeyup:function (event) {
        if (GLUT.specialUpFunc || GLUT.keyboardUpFunc) {
          var key = GLUT.getSpecialKey(event['keyCode']);
          if (key !== null) {
            if(GLUT.specialUpFunc) {
              event.preventDefault ();
              GLUT.saveModifiers(event);
              Module['dynCall_viii'](GLUT.specialUpFunc, key, Browser.mouseX, Browser.mouseY);
            }
          }
          else
          {
            key = GLUT.getASCIIKey(event);
            if( key !== null && GLUT.keyboardUpFunc ) {
              event.preventDefault ();
              GLUT.saveModifiers(event);
              Module['dynCall_viii'](GLUT.keyboardUpFunc, key, Browser.mouseX, Browser.mouseY);
            }
          }
        }
      },touchHandler:function (event) {
        if (event.target != Module['canvas']) {
          return;
        }
  
        var touches = event.changedTouches,
            main = touches[0],
            type = "";
  
        switch(event.type) {
          case "touchstart": type = "mousedown"; break;
          case "touchmove": type = "mousemove"; break;
          case "touchend": type = "mouseup"; break;
          default: return;
        }
  
        var simulatedEvent = document.createEvent("MouseEvent");
        simulatedEvent.initMouseEvent(type, true, true, window, 1, 
                                      main.screenX, main.screenY, 
                                      main.clientX, main.clientY, false, 
                                      false, false, false, 0/*main*/, null);
  
        main.target.dispatchEvent(simulatedEvent);
        event.preventDefault();
      },onMouseButtonDown:function (event) {
        Browser.calculateMouseEvent(event);
  
        GLUT.buttons |= (1 << event['button']);
  
        if (event.target == Module["canvas"] && GLUT.mouseFunc) {
          try {
            event.target.setCapture();
          } catch (e) {}
          event.preventDefault();
          GLUT.saveModifiers(event);
          Module['dynCall_viiii'](GLUT.mouseFunc, event['button'], 0/*GLUT_DOWN*/, Browser.mouseX, Browser.mouseY);
        }
      },onMouseButtonUp:function (event) {
        Browser.calculateMouseEvent(event);
  
        GLUT.buttons &= ~(1 << event['button']);
  
        if (GLUT.mouseFunc) {
          event.preventDefault();
          GLUT.saveModifiers(event);
          Module['dynCall_viiii'](GLUT.mouseFunc, event['button'], 1/*GLUT_UP*/, Browser.mouseX, Browser.mouseY);
        }
      },onMouseWheel:function (event) {
        Browser.calculateMouseEvent(event);
  
        // cross-browser wheel delta
        var e = window.event || event; // old IE support
        // Note the minus sign that flips browser wheel direction (positive direction scrolls page down) to native wheel direction (positive direction is mouse wheel up)
        var delta = -Browser.getMouseWheelDelta(event);
        delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
  
        var button = 3; // wheel up
        if (delta < 0) {
          button = 4; // wheel down
        }
  
        if (GLUT.mouseFunc) {
          event.preventDefault();
          GLUT.saveModifiers(event);
          Module['dynCall_viiii'](GLUT.mouseFunc, button, 0/*GLUT_DOWN*/, Browser.mouseX, Browser.mouseY);
        }
      },onFullscreenEventChange:function (event) {
        var width;
        var height;
        if (document["fullscreen"] || document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
          width = screen["width"];
          height = screen["height"];
        } else {
          width = GLUT.windowWidth;
          height = GLUT.windowHeight;
          // TODO set position
          document.removeEventListener('fullscreenchange', GLUT.onFullscreenEventChange, true);
          document.removeEventListener('mozfullscreenchange', GLUT.onFullscreenEventChange, true);
          document.removeEventListener('webkitfullscreenchange', GLUT.onFullscreenEventChange, true);
        }
        Browser.setCanvasSize(width, height);
        /* Can't call _glutReshapeWindow as that requests cancelling fullscreen. */
        if (GLUT.reshapeFunc) {
          // console.log("GLUT.reshapeFunc (from FS): " + width + ", " + height);
          Module['dynCall_vii'](GLUT.reshapeFunc, width, height);
        }
        _glutPostRedisplay();
      },requestFullscreen:function () {
        Browser.requestFullscreen(/*lockPointer=*/false, /*resieCanvas=*/false);
      },requestFullScreen:function () {
        Module.printErr('GLUT.requestFullScreen() is deprecated. Please call GLUT.requestFullscreen instead.');
        GLUT.requestFullScreen = function() {
          return GLUT.requestFullscreen();
        }
        return GLUT.requestFullscreen();
      },exitFullscreen:function () {
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['webkitCancelFullScreen'] ||
            (function() {});
        CFS.apply(document, []);
      },cancelFullScreen:function () {
        Module.printErr('GLUT.cancelFullScreen() is deprecated. Please call GLUT.exitFullscreen instead.');
        GLUT.cancelFullScreen = function() {
          return GLUT.exitFullscreen();
        }
        return GLUT.exitFullscreen();
      }};function _glutPassiveMotionFunc(func) {
      GLUT.passiveMotionFunc = func;
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((Runtime.setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((Runtime.setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((Runtime.setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((Runtime.setTempRet0(throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  function __Unwind_FindEnclosingFunction() {
      return 0; // we cannot succeed
    }

   

  var _llvm_sin_f32=Math_sin;

  function _pthread_condattr_destroy() { return 0; }

  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }

  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
  
  
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }

  var _llvm_nacl_atomic_cmpxchg_i8=undefined;

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  var _environ=STATICTOP; STATICTOP += 16;;var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }
  
  function _putenv(string) {
      // int putenv(char *string);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/putenv.html
      // WARNING: According to the standard (and the glibc implementation), the
      //          string is taken by reference so future changes are reflected.
      //          We copy it instead, possibly breaking some uses.
      if (string === 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      string = Pointer_stringify(string);
      var splitPoint = string.indexOf('=')
      if (string === '' || string.indexOf('=') === -1) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      var name = string.slice(0, splitPoint);
      var value = string.slice(splitPoint + 1);
      if (!(name in ENV) || ENV[name] !== value) {
        ENV[name] = value;
        ___buildEnvironment(ENV);
      }
      return 0;
    }
  
  function _SDL_RWFromConstMem(mem, size) {
      var id = SDL.rwops.length; // TODO: recycle ids when they are null
      SDL.rwops.push({ bytes: mem, count: size });
      return id;
    }function _TTF_FontHeight(font) {
      var fontData = SDL.fonts[font];
      return fontData.size;
    }function _TTF_SizeText(font, text, w, h) {
      var fontData = SDL.fonts[font];
      if (w) {
        HEAP32[((w)>>2)]=SDL.estimateTextWidth(fontData, Pointer_stringify(text));
      }
      if (h) {
        HEAP32[((h)>>2)]=fontData.size;
      }
      return 0;
    }function _TTF_RenderText_Solid(font, text, color) {
      // XXX the font and color are ignored
      text = Pointer_stringify(text) || ' '; // if given an empty string, still return a valid surface
      var fontData = SDL.fonts[font];
      var w = SDL.estimateTextWidth(fontData, text);
      var h = fontData.size;
      var color = SDL.loadColorToCSSRGB(color); // XXX alpha breaks fonts?
      var fontString = SDL.makeFontString(h, fontData.name);
      var surf = SDL.makeSurface(w, h, 0, false, 'text:' + text); // bogus numbers..
      var surfData = SDL.surfaces[surf];
      surfData.ctx.save();
      surfData.ctx.fillStyle = color;
      surfData.ctx.font = fontString;
      // use bottom alligment, because it works 
      // same in all browsers, more info here:
      // https://bugzilla.mozilla.org/show_bug.cgi?id=737852
      surfData.ctx.textBaseline = 'bottom';
      surfData.ctx.fillText(text, 0, h|0);
      surfData.ctx.restore();
      return surf;
    }function _Mix_HaltMusic() {
      var audio = SDL.music.audio;
      if (audio) {
        audio.src = audio.src; // rewind <media> element
        audio.currentPosition = 0; // rewind Web Audio graph playback.
        audio.pause();
      }
      SDL.music.audio = null;
      if (SDL.hookMusicFinished) {
        Module['dynCall_v'](SDL.hookMusicFinished);
      }
      return 0;
    }function _Mix_PlayMusic(id, loops) {
      // Pause old music if it exists.
      if (SDL.music.audio) {
        if (!SDL.music.audio.paused) Module.printErr('Music is already playing. ' + SDL.music.source);
        SDL.music.audio.pause();
      }
      var info = SDL.audios[id];
      var audio;
      if (info.webAudio) { // Play via Web Audio API
        // Create an instance of the WebAudio object.
        audio = {};
        audio.resource = info; // This new webAudio object is an instance that refers to this existing resource.
        audio.paused = false;
        audio.currentPosition = 0;
        audio.play = function() { SDL.playWebAudio(this); }
        audio.pause = function() { SDL.pauseWebAudio(this); }
      } else if (info.audio) { // Play via the <audio> element
        audio = info.audio;
      }
      audio['onended'] = function() { if (SDL.music.audio == this) _Mix_HaltMusic(); } // will send callback
      audio.loop = loops != 0; // TODO: handle N loops for finite N
      audio.volume = SDL.music.volume;
      SDL.music.audio = audio;
      audio.play();
      return 0;
    }function _Mix_FreeChunk(id) {
      SDL.audios[id] = null;
    }function _Mix_LoadWAV_RW(rwopsID, freesrc) {
      var rwops = SDL.rwops[rwopsID];
  
  
      if (rwops === undefined)
        return 0;
  
      var filename = '';
      var audio;
      var webAudio;
      var bytes;
  
      if (rwops.filename !== undefined) {
        filename = PATH.resolve(rwops.filename);
        var raw = Module["preloadedAudios"][filename];
        if (!raw) {
          if (raw === null) Module.printErr('Trying to reuse preloaded audio, but freePreloadedMediaOnUse is set!');
          if (!Module.noAudioDecoding) Runtime.warnOnce('Cannot find preloaded audio ' + filename);
  
          // see if we can read the file-contents from the in-memory FS
          try {
            bytes = FS.readFile(filename);
          } catch (e) {
            Module.printErr('Couldn\'t find file for: ' + filename);
            return 0;
          }
        }
        if (Module['freePreloadedMediaOnUse']) {
          Module["preloadedAudios"][filename] = null;
        }
        audio = raw;
      }
      else if (rwops.bytes !== undefined) {
        // For Web Audio context buffer decoding, we must make a clone of the audio data, but for <media> element,
        // a view to existing data is sufficient.
        if (SDL.webAudioAvailable()) bytes = HEAPU8.buffer.slice(rwops.bytes, rwops.bytes + rwops.count);
        else bytes = HEAPU8.subarray(rwops.bytes, rwops.bytes + rwops.count);
      }
      else {
        return 0;
      }
  
      var arrayBuffer = bytes ? bytes.buffer || bytes : bytes;
  
      // To allow user code to work around browser bugs with audio playback on <audio> elements an Web Audio, enable
      // the user code to hook in a callback to decide on a file basis whether each file should use Web Audio or <audio> for decoding and playback.
      // In particular, see https://bugzilla.mozilla.org/show_bug.cgi?id=654787 and ?id=1012801 for tradeoffs.
      var canPlayWithWebAudio = Module['SDL_canPlayWithWebAudio'] === undefined || Module['SDL_canPlayWithWebAudio'](filename, arrayBuffer);
  
      if (bytes !== undefined && SDL.webAudioAvailable() && canPlayWithWebAudio) {
        audio = undefined;
        webAudio = {};
        // The audio decoding process is asynchronous, which gives trouble if user code plays the audio data back immediately
        // after loading. Therefore prepare an array of callback handlers to run when this audio decoding is complete, which
        // will then start the playback (with some delay).
        webAudio.onDecodeComplete = []; // While this member array exists, decoding hasn't finished yet.
        function onDecodeComplete(data) {
          webAudio.decodedBuffer = data;
          // Call all handlers that were waiting for this decode to finish, and clear the handler list.
          webAudio.onDecodeComplete.forEach(function(e) { e(); });
          webAudio.onDecodeComplete = undefined; // Don't allow more callback handlers since audio has finished decoding.
        }
  
        SDL.audioContext['decodeAudioData'](arrayBuffer, onDecodeComplete);
      } else if (audio === undefined && bytes) {
        // Here, we didn't find a preloaded audio but we either were passed a filepath for
        // which we loaded bytes, or we were passed some bytes
        var blob = new Blob([bytes], {type: rwops.mimetype});
        var url = URL.createObjectURL(blob);
        audio = new Audio();
        audio.src = url;
        audio.mozAudioChannelType = 'content'; // bugzilla 910340
      }
  
      var id = SDL.audios.length;
      // Keep the loaded audio in the audio arrays, ready for playback
      SDL.audios.push({
        source: filename,
        audio: audio, // Points to the <audio> element, if loaded
        webAudio: webAudio // Points to a Web Audio -specific resource object, if loaded
      });
      return id;
    }function _Mix_PlayChannel(channel, id, loops) {
      // TODO: handle fixed amount of N loops. Currently loops either 0 or infinite times.
  
      // Get the audio element associated with the ID
      var info = SDL.audios[id];
      if (!info) return -1;
      if (!info.audio && !info.webAudio) return -1;
  
      // If the user asks us to allocate a channel automatically, get the first
      // free one.
      if (channel == -1) {
        for (var i = SDL.channelMinimumNumber; i < SDL.numChannels; i++) {
          if (!SDL.channels[i].audio) {
            channel = i;
            break;
          }
        }
        if (channel == -1) {
          Module.printErr('All ' + SDL.numChannels + ' channels in use!');
          return -1;
        }
      }
      var channelInfo = SDL.channels[channel];
      var audio;
      if (info.webAudio) {
        // Create an instance of the WebAudio object.
        audio = {};
        audio.resource = info; // This new object is an instance that refers to this existing resource.
        audio.paused = false;
        audio.currentPosition = 0;
        // Make our instance look similar to the instance of a <media> to make api simple.
        audio.play = function() { SDL.playWebAudio(this); }
        audio.pause = function() { SDL.pauseWebAudio(this); }
      } else {
        // We clone the audio node to utilize the preloaded audio buffer, since
        // the browser has already preloaded the audio file.
        audio = info.audio.cloneNode(true);
        audio.numChannels = info.audio.numChannels;
        audio.frequency = info.audio.frequency;
      }
      audio['onended'] = function SDL_audio_onended() { // TODO: cache these
        if (channelInfo.audio == this) { channelInfo.audio.paused = true; channelInfo.audio = null; }
        if (SDL.channelFinished) Runtime.getFuncWrapper(SDL.channelFinished, 'vi')(channel);
      }
      channelInfo.audio = audio;
      // TODO: handle N loops. Behavior matches Mix_PlayMusic
      audio.loop = loops != 0;
      audio.volume = channelInfo.volume;
      audio.play();
      return channel;
    }function _SDL_PauseAudio(pauseOn) {
      if (!SDL.audio) {
        return;
      }
      if (pauseOn) {
        if (SDL.audio.timer !== undefined) {
          clearTimeout(SDL.audio.timer);
          SDL.audio.numAudioTimersPending = 0;
          SDL.audio.timer = undefined;
        }
      } else if (!SDL.audio.timer) {
        // Start the audio playback timer callback loop.
        SDL.audio.numAudioTimersPending = 1;
        SDL.audio.timer = Browser.safeSetTimeout(SDL.audio.caller, 1);
      }
      SDL.audio.paused = pauseOn;
    }function _SDL_CloseAudio() {
      if (SDL.audio) {
        _SDL_PauseAudio(1);
        _free(SDL.audio.buffer);
        SDL.audio = null;
        SDL.allocateChannels(0);
      }
    }function _SDL_LockSurface(surf) {
      var surfData = SDL.surfaces[surf];
  
      surfData.locked++;
      if (surfData.locked > 1) return 0;
  
      if (!surfData.buffer) {
        surfData.buffer = _malloc(surfData.width * surfData.height * 4);
        HEAP32[(((surf)+(20))>>2)]=surfData.buffer;
      }
  
      // Mark in C/C++-accessible SDL structure
      // SDL_Surface has the following fields: Uint32 flags, SDL_PixelFormat *format; int w, h; Uint16 pitch; void *pixels; ...
      // So we have fields all of the same size, and 5 of them before us.
      // TODO: Use macros like in library.js
      HEAP32[(((surf)+(20))>>2)]=surfData.buffer;
  
      if (surf == SDL.screen && Module.screenIsReadOnly && surfData.image) return 0;
  
      if (SDL.defaults.discardOnLock) {
        if (!surfData.image) {
          surfData.image = surfData.ctx.createImageData(surfData.width, surfData.height);
        }
        if (!SDL.defaults.opaqueFrontBuffer) return;
      } else {
        surfData.image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
      }
  
      // Emulate desktop behavior and kill alpha values on the locked surface. (very costly!) Set SDL.defaults.opaqueFrontBuffer = false
      // if you don't want this.
      if (surf == SDL.screen && SDL.defaults.opaqueFrontBuffer) {
        var data = surfData.image.data;
        var num = data.length;
        for (var i = 0; i < num/4; i++) {
          data[i*4+3] = 255; // opacity, as canvases blend alpha
        }
      }
  
      if (SDL.defaults.copyOnLock && !SDL.defaults.discardOnLock) {
        // Copy pixel data to somewhere accessible to 'C/C++'
        if (surfData.isFlagSet(0x00200000 /* SDL_HWPALETTE */)) {
          // If this is neaded then
          // we should compact the data from 32bpp to 8bpp index.
          // I think best way to implement this is use
          // additional colorMap hash (color->index).
          // Something like this:
          //
          // var size = surfData.width * surfData.height;
          // var data = '';
          // for (var i = 0; i<size; i++) {
          //   var color = SDL.translateRGBAToColor(
          //     surfData.image.data[i*4   ], 
          //     surfData.image.data[i*4 +1], 
          //     surfData.image.data[i*4 +2], 
          //     255);
          //   var index = surfData.colorMap[color];
          //   HEAP8[(((surfData.buffer)+(i))>>0)]=index;
          // }
          throw 'CopyOnLock is not supported for SDL_LockSurface with SDL_HWPALETTE flag set' + new Error().stack;
        } else {
          HEAPU8.set(surfData.image.data, surfData.buffer);
        }
      }
  
      return 0;
    }
  
  function _SDL_FreeRW(rwopsID) {
      SDL.rwops[rwopsID] = null;
      while (SDL.rwops.length > 0 && SDL.rwops[SDL.rwops.length-1] === null) {
        SDL.rwops.pop();
      }
    }function _IMG_Load_RW(rwopsID, freeSrc) {
      try {
        // stb_image integration support
        var cleanup = function() {
          if (rwops && freeSrc) _SDL_FreeRW(rwopsID);
        }
        var addCleanup = function(func) {
          var old = cleanup;
          cleanup = function added_cleanup() {
            old();
            func();
          }
        }
        var callStbImage = function(func, params) {
          var x = Module['_malloc'](4);
          var y = Module['_malloc'](4);
          var comp = Module['_malloc'](4);
          addCleanup(function() {
            Module['_free'](x);
            Module['_free'](y);
            Module['_free'](comp);
            if (data) Module['_stbi_image_free'](data);
          });
          var data = Module['_' + func].apply(null, params.concat([x, y, comp, 0]));
          if (!data) return null;
          return {
            rawData: true,
            data: data,
            width: HEAP32[((x)>>2)],
            height: HEAP32[((y)>>2)],
            size: HEAP32[((x)>>2)] * HEAP32[((y)>>2)] * HEAP32[((comp)>>2)],
            bpp: HEAP32[((comp)>>2)]
          };
        }
  
        var rwops = SDL.rwops[rwopsID];
        if (rwops === undefined) {
          return 0;
        }
  
        var filename = rwops.filename;
        if (filename === undefined) {
          Runtime.warnOnce('Only file names that have been preloaded are supported for IMG_Load_RW. Consider using STB_IMAGE=1 if you want synchronous image decoding (see settings.js), or package files with --use-preload-plugins');
          return 0;
        }
  
        if (!raw) {
          filename = PATH.resolve(filename);
          var raw = Module["preloadedImages"][filename];
          if (!raw) {
            if (raw === null) Module.printErr('Trying to reuse preloaded image, but freePreloadedMediaOnUse is set!');
            Runtime.warnOnce('Cannot find preloaded image ' + filename);
            Runtime.warnOnce('Cannot find preloaded image ' + filename + '. Consider using STB_IMAGE=1 if you want synchronous image decoding (see settings.js), or package files with --use-preload-plugins');
            return 0;
          } else if (Module['freePreloadedMediaOnUse']) {
            Module["preloadedImages"][filename] = null;
          }
        }
  
        var surf = SDL.makeSurface(raw.width, raw.height, 0, false, 'load:' + filename);
        var surfData = SDL.surfaces[surf];
        surfData.ctx.globalCompositeOperation = "copy";
        if (!raw.rawData) {
          surfData.ctx.drawImage(raw, 0, 0, raw.width, raw.height, 0, 0, raw.width, raw.height);
        } else {
          var imageData = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
          if (raw.bpp == 4) {
            // rgba
            imageData.data.set(HEAPU8.subarray((raw.data),(raw.data+raw.size)));
          } else if (raw.bpp == 3) {
            // rgb
            var pixels = raw.size/3;
            var data = imageData.data;
            var sourcePtr = raw.data;
            var destPtr = 0;
            for (var i = 0; i < pixels; i++) {
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = 255;
            }
          } else if (raw.bpp == 2) {
            // grayscale + alpha
            var pixels = raw.size;
            var data = imageData.data;
            var sourcePtr = raw.data;
            var destPtr = 0;
            for (var i = 0; i < pixels; i++) {
              var gray = HEAPU8[((sourcePtr++)>>0)];
              var alpha = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = gray;
              data[destPtr++] = gray;
              data[destPtr++] = gray;
              data[destPtr++] = alpha;
            }
          } else if (raw.bpp == 1) {
            // grayscale
            var pixels = raw.size;
            var data = imageData.data;
            var sourcePtr = raw.data;
            var destPtr = 0;
            for (var i = 0; i < pixels; i++) {
              var value = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = value;
              data[destPtr++] = value;
              data[destPtr++] = value;
              data[destPtr++] = 255;
            }
          } else {
            Module.printErr('cannot handle bpp ' + raw.bpp);
            return 0;
          }
          surfData.ctx.putImageData(imageData, 0, 0);
        }
        surfData.ctx.globalCompositeOperation = "source-over";
        // XXX SDL does not specify that loaded images must have available pixel data, in fact
        //     there are cases where you just want to blit them, so you just need the hardware
        //     accelerated version. However, code everywhere seems to assume that the pixels
        //     are in fact available, so we retrieve it here. This does add overhead though.
        _SDL_LockSurface(surf);
        surfData.locked--; // The surface is not actually locked in this hack
        if (SDL.GL) {
          // After getting the pixel data, we can free the canvas and context if we do not need to do 2D canvas blitting
          surfData.canvas = surfData.ctx = null;
        }
        return surf;
      } finally {
        cleanup();
      }
    }
  
  function _SDL_RWFromFile(_name, mode) {
      var id = SDL.rwops.length; // TODO: recycle ids when they are null
      var name = Pointer_stringify(_name)
      SDL.rwops.push({ filename: name, mimetype: Browser.getMimetype(name) });
      return id;
    }function _IMG_Load(filename){
      var rwops = _SDL_RWFromFile(filename);
      var result = _IMG_Load_RW(rwops, 1);
      return result;
    }function _SDL_UpperBlitScaled(src, srcrect, dst, dstrect) {
      return SDL.blitSurface(src, srcrect, dst, dstrect, true);
    }function _SDL_UpperBlit(src, srcrect, dst, dstrect) {
      return SDL.blitSurface(src, srcrect, dst, dstrect, false);
    }function _SDL_GetTicks() {
      return (Date.now() - SDL.startTime)|0;
    }var SDL={defaults:{width:320,height:200,copyOnLock:true,discardOnLock:false,opaqueFrontBuffer:true},version:null,surfaces:{},canvasPool:[],events:[],fonts:[null],audios:[null],rwops:[null],music:{audio:null,volume:1},mixerFrequency:22050,mixerFormat:32784,mixerNumChannels:2,mixerChunkSize:1024,channelMinimumNumber:0,GL:false,glAttributes:{0:3,1:3,2:2,3:0,4:0,5:1,6:16,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:1,16:0,17:0,18:0},keyboardState:null,keyboardMap:{},canRequestFullscreen:false,isRequestingFullscreen:false,textInput:false,startTime:null,initFlags:0,buttonState:0,modState:0,DOMButtons:[0,0,0],DOMEventToSDLEvent:{},TOUCH_DEFAULT_ID:0,eventHandler:null,eventHandlerContext:null,eventHandlerTemp:0,keyCodes:{16:1249,17:1248,18:1250,20:1081,33:1099,34:1102,35:1101,36:1098,37:1104,38:1106,39:1103,40:1105,44:316,45:1097,46:127,91:1251,93:1125,96:1122,97:1113,98:1114,99:1115,100:1116,101:1117,102:1118,103:1119,104:1120,105:1121,106:1109,107:1111,109:1110,110:1123,111:1108,112:1082,113:1083,114:1084,115:1085,116:1086,117:1087,118:1088,119:1089,120:1090,121:1091,122:1092,123:1093,124:1128,125:1129,126:1130,127:1131,128:1132,129:1133,130:1134,131:1135,132:1136,133:1137,134:1138,135:1139,144:1107,160:94,161:33,162:34,163:35,164:36,165:37,166:38,167:95,168:40,169:41,170:42,171:43,172:124,173:45,174:123,175:125,176:126,181:127,182:129,183:128,188:44,190:46,191:47,192:96,219:91,220:92,221:93,222:39,224:1251},scanCodes:{8:42,9:43,13:40,27:41,32:44,35:204,39:53,44:54,46:55,47:56,48:39,49:30,50:31,51:32,52:33,53:34,54:35,55:36,56:37,57:38,58:203,59:51,61:46,91:47,92:49,93:48,96:52,97:4,98:5,99:6,100:7,101:8,102:9,103:10,104:11,105:12,106:13,107:14,108:15,109:16,110:17,111:18,112:19,113:20,114:21,115:22,116:23,117:24,118:25,119:26,120:27,121:28,122:29,127:76,305:224,308:226,316:70},loadRect:function (rect) {
        return {
          x: HEAP32[((rect + 0)>>2)],
          y: HEAP32[((rect + 4)>>2)],
          w: HEAP32[((rect + 8)>>2)],
          h: HEAP32[((rect + 12)>>2)]
        };
      },updateRect:function (rect, r) {
        HEAP32[((rect)>>2)]=r.x;
        HEAP32[(((rect)+(4))>>2)]=r.y;
        HEAP32[(((rect)+(8))>>2)]=r.w;
        HEAP32[(((rect)+(12))>>2)]=r.h;
      },intersectionOfRects:function (first, second) {
        var leftX = Math.max(first.x, second.x);
        var leftY = Math.max(first.y, second.y);
        var rightX = Math.min(first.x + first.w, second.x + second.w);
        var rightY = Math.min(first.y + first.h, second.y + second.h);
  
        return {
          x: leftX,
          y: leftY,
          w: Math.max(leftX, rightX) - leftX,
          h: Math.max(leftY, rightY) - leftY
        }
      },checkPixelFormat:function (fmt) {
        // Canvas screens are always RGBA.
        var format = HEAP32[((fmt)>>2)];
        if (format != -2042224636) {
          Runtime.warnOnce('Unsupported pixel format!');
        }
      },loadColorToCSSRGB:function (color) {
        var rgba = HEAP32[((color)>>2)];
        return 'rgb(' + (rgba&255) + ',' + ((rgba >> 8)&255) + ',' + ((rgba >> 16)&255) + ')';
      },loadColorToCSSRGBA:function (color) {
        var rgba = HEAP32[((color)>>2)];
        return 'rgba(' + (rgba&255) + ',' + ((rgba >> 8)&255) + ',' + ((rgba >> 16)&255) + ',' + (((rgba >> 24)&255)/255) + ')';
      },translateColorToCSSRGBA:function (rgba) {
        return 'rgba(' + (rgba&0xff) + ',' + (rgba>>8 & 0xff) + ',' + (rgba>>16 & 0xff) + ',' + (rgba>>>24)/0xff + ')';
      },translateRGBAToCSSRGBA:function (r, g, b, a) {
        return 'rgba(' + (r&0xff) + ',' + (g&0xff) + ',' + (b&0xff) + ',' + (a&0xff)/255 + ')';
      },translateRGBAToColor:function (r, g, b, a) {
        return r | g << 8 | b << 16 | a << 24;
      },makeSurface:function (width, height, flags, usePageCanvas, source, rmask, gmask, bmask, amask) {
        flags = flags || 0;
        var is_SDL_HWSURFACE = flags & 0x00000001;
        var is_SDL_HWPALETTE = flags & 0x00200000;
        var is_SDL_OPENGL = flags & 0x04000000;
  
        var surf = _malloc(60);
        var pixelFormat = _malloc(44);
        //surface with SDL_HWPALETTE flag is 8bpp surface (1 byte)
        var bpp = is_SDL_HWPALETTE ? 1 : 4;
        var buffer = 0;
  
        // preemptively initialize this for software surfaces,
        // otherwise it will be lazily initialized inside of SDL_LockSurface
        if (!is_SDL_HWSURFACE && !is_SDL_OPENGL) {
          buffer = _malloc(width * height * 4);
        }
  
        HEAP32[((surf)>>2)]=flags;
        HEAP32[(((surf)+(4))>>2)]=pixelFormat;
        HEAP32[(((surf)+(8))>>2)]=width;
        HEAP32[(((surf)+(12))>>2)]=height;
        HEAP32[(((surf)+(16))>>2)]=width * bpp;  // assuming RGBA or indexed for now,
                                                                                          // since that is what ImageData gives us in browsers
        HEAP32[(((surf)+(20))>>2)]=buffer;
  
        HEAP32[(((surf)+(36))>>2)]=0;
        HEAP32[(((surf)+(40))>>2)]=0;
        HEAP32[(((surf)+(44))>>2)]=Module["canvas"].width;
        HEAP32[(((surf)+(48))>>2)]=Module["canvas"].height;
  
        HEAP32[(((surf)+(56))>>2)]=1;
  
        HEAP32[((pixelFormat)>>2)]=-2042224636;
        HEAP32[(((pixelFormat)+(4))>>2)]=0;// TODO
        HEAP8[(((pixelFormat)+(8))>>0)]=bpp * 8;
        HEAP8[(((pixelFormat)+(9))>>0)]=bpp;
  
        HEAP32[(((pixelFormat)+(12))>>2)]=rmask || 0x000000ff;
        HEAP32[(((pixelFormat)+(16))>>2)]=gmask || 0x0000ff00;
        HEAP32[(((pixelFormat)+(20))>>2)]=bmask || 0x00ff0000;
        HEAP32[(((pixelFormat)+(24))>>2)]=amask || 0xff000000;
  
        // Decide if we want to use WebGL or not
        SDL.GL = SDL.GL || is_SDL_OPENGL;
        var canvas;
        if (!usePageCanvas) {
          if (SDL.canvasPool.length > 0) {
            canvas = SDL.canvasPool.pop();
          } else {
            canvas = document.createElement('canvas');
          }
          canvas.width = width;
          canvas.height = height;
        } else {
          canvas = Module['canvas'];
        }
  
        var webGLContextAttributes = {
          antialias: ((SDL.glAttributes[13 /*SDL_GL_MULTISAMPLEBUFFERS*/] != 0) && (SDL.glAttributes[14 /*SDL_GL_MULTISAMPLESAMPLES*/] > 1)),
          depth: (SDL.glAttributes[6 /*SDL_GL_DEPTH_SIZE*/] > 0),
          stencil: (SDL.glAttributes[7 /*SDL_GL_STENCIL_SIZE*/] > 0),
          alpha: (SDL.glAttributes[3 /*SDL_GL_ALPHA_SIZE*/] > 0)
        };
        
        var ctx = Browser.createContext(canvas, is_SDL_OPENGL, usePageCanvas, webGLContextAttributes);
              
        SDL.surfaces[surf] = {
          width: width,
          height: height,
          canvas: canvas,
          ctx: ctx,
          surf: surf,
          buffer: buffer,
          pixelFormat: pixelFormat,
          alpha: 255,
          flags: flags,
          locked: 0,
          usePageCanvas: usePageCanvas,
          source: source,
  
          isFlagSet: function(flag) {
            return flags & flag;
          }
        };
  
        return surf;
      },copyIndexedColorData:function (surfData, rX, rY, rW, rH) {
        // HWPALETTE works with palette
        // setted by SDL_SetColors
        if (!surfData.colors) {
          return;
        }
        
        var fullWidth  = Module['canvas'].width;
        var fullHeight = Module['canvas'].height;
  
        var startX  = rX || 0;
        var startY  = rY || 0;
        var endX    = (rW || (fullWidth - startX)) + startX;
        var endY    = (rH || (fullHeight - startY)) + startY;
        
        var buffer  = surfData.buffer;
  
        if (!surfData.image.data32) {
          surfData.image.data32 = new Uint32Array(surfData.image.data.buffer);
        }
        var data32   = surfData.image.data32;
  
        var colors32 = surfData.colors32;
  
        for (var y = startY; y < endY; ++y) {
          var base = y * fullWidth;
          for (var x = startX; x < endX; ++x) {
            data32[base + x] = colors32[HEAPU8[((buffer + base + x)>>0)]];
          }
        }
      },freeSurface:function (surf) {
        var refcountPointer = surf + 56;
        var refcount = HEAP32[((refcountPointer)>>2)];
        if (refcount > 1) {
          HEAP32[((refcountPointer)>>2)]=refcount - 1;
          return;
        }
  
        var info = SDL.surfaces[surf];
        if (!info.usePageCanvas && info.canvas) SDL.canvasPool.push(info.canvas);
        if (info.buffer) _free(info.buffer);
        _free(info.pixelFormat);
        _free(surf);
        SDL.surfaces[surf] = null;
  
        if (surf === SDL.screen) {
          SDL.screen = null;
        }
      },blitSurface__deps:["SDL_LockSurface"],blitSurface:function (src, srcrect, dst, dstrect, scale) {
        var srcData = SDL.surfaces[src];
        var dstData = SDL.surfaces[dst];
        var sr, dr;
        if (srcrect) {
          sr = SDL.loadRect(srcrect);
        } else {
          sr = { x: 0, y: 0, w: srcData.width, h: srcData.height };
        }
        if (dstrect) {
          dr = SDL.loadRect(dstrect);
        } else {
          dr = { x: 0, y: 0, w: srcData.width, h: srcData.height };
        }
        if (dstData.clipRect) {
          var widthScale = (!scale || sr.w === 0) ? 1 : sr.w / dr.w;
          var heightScale = (!scale || sr.h === 0) ? 1 : sr.h / dr.h;
          
          dr = SDL.intersectionOfRects(dstData.clipRect, dr);
          
          sr.w = dr.w * widthScale;
          sr.h = dr.h * heightScale;
          
          if (dstrect) {
            SDL.updateRect(dstrect, dr);
          }
        }
        var blitw, blith;
        if (scale) {
          blitw = dr.w; blith = dr.h;
        } else {
          blitw = sr.w; blith = sr.h;
        }
        if (sr.w === 0 || sr.h === 0 || blitw === 0 || blith === 0) {
          return 0;
        }
        var oldAlpha = dstData.ctx.globalAlpha;
        dstData.ctx.globalAlpha = srcData.alpha/255;
        dstData.ctx.drawImage(srcData.canvas, sr.x, sr.y, sr.w, sr.h, dr.x, dr.y, blitw, blith);
        dstData.ctx.globalAlpha = oldAlpha;
        if (dst != SDL.screen) {
          // XXX As in IMG_Load, for compatibility we write out |pixels|
          Runtime.warnOnce('WARNING: copying canvas data to memory for compatibility');
          _SDL_LockSurface(dst);
          dstData.locked--; // The surface is not actually locked in this hack
        }
        return 0;
      },downFingers:{},savedKeydown:null,receiveEvent:function (event) {
        function unpressAllPressedKeys() {
          // Un-press all pressed keys: TODO
          for (var code in SDL.keyboardMap) {
            SDL.events.push({
              type: 'keyup',
              keyCode: SDL.keyboardMap[code]
            });
          }
        };
        switch(event.type) {
          case 'touchstart': case 'touchmove': {
            event.preventDefault();
  
            var touches = [];
            
            // Clear out any touchstart events that we've already processed
            if (event.type === 'touchstart') {
              for (var i = 0; i < event.touches.length; i++) {
                var touch = event.touches[i];
                if (SDL.downFingers[touch.identifier] != true) {
                  SDL.downFingers[touch.identifier] = true;
                  touches.push(touch);
                }
              }
            } else {
              touches = event.touches;
            }
            
            var firstTouch = touches[0];
            if (firstTouch) {
              if (event.type == 'touchstart') {
                SDL.DOMButtons[0] = 1;
              }
              var mouseEventType;
              switch(event.type) {
                case 'touchstart': mouseEventType = 'mousedown'; break;
                case 'touchmove': mouseEventType = 'mousemove'; break;
              }
              var mouseEvent = {
                type: mouseEventType,
                button: 0,
                pageX: firstTouch.clientX,
                pageY: firstTouch.clientY
              };
              SDL.events.push(mouseEvent);
            }
  
            for (var i = 0; i < touches.length; i++) {
              var touch = touches[i];
              SDL.events.push({
                type: event.type,
                touch: touch
              });
            };
            break;
          }
          case 'touchend': {
            event.preventDefault();
            
            // Remove the entry in the SDL.downFingers hash
            // because the finger is no longer down.
            for(var i = 0; i < event.changedTouches.length; i++) {
              var touch = event.changedTouches[i];
              if (SDL.downFingers[touch.identifier] === true) {
                delete SDL.downFingers[touch.identifier];
              }
            }
  
            var mouseEvent = {
              type: 'mouseup',
              button: 0,
              pageX: event.changedTouches[0].clientX,
              pageY: event.changedTouches[0].clientY
            };
            SDL.DOMButtons[0] = 0;
            SDL.events.push(mouseEvent);
            
            for (var i = 0; i < event.changedTouches.length; i++) {
              var touch = event.changedTouches[i];
              SDL.events.push({
                type: 'touchend',
                touch: touch
              });
            };
            break;
          }
          case 'DOMMouseScroll': case 'mousewheel': case 'wheel':
            var delta = -Browser.getMouseWheelDelta(event); // Flip the wheel direction to translate from browser wheel direction (+:down) to SDL direction (+:up)
            delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
  
            // Simulate old-style SDL events representing mouse wheel input as buttons
            var button = delta > 0 ? 3 /*SDL_BUTTON_WHEELUP-1*/ : 4 /*SDL_BUTTON_WHEELDOWN-1*/; // Subtract one since JS->C marshalling is defined to add one back.
            SDL.events.push({ type: 'mousedown', button: button, pageX: event.pageX, pageY: event.pageY });
            SDL.events.push({ type: 'mouseup', button: button, pageX: event.pageX, pageY: event.pageY });
  
            // Pass a delta motion event.
            SDL.events.push({ type: 'wheel', deltaX: 0, deltaY: delta });
            event.preventDefault(); // If we don't prevent this, then 'wheel' event will be sent again by the browser as 'DOMMouseScroll' and we will receive this same event the second time.
            break;
          case 'mousemove':
            if (SDL.DOMButtons[0] === 1) {
              SDL.events.push({
                type: 'touchmove',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
            }
            if (Browser.pointerLock) {
              // workaround for firefox bug 750111
              if ('mozMovementX' in event) {
                event['movementX'] = event['mozMovementX'];
                event['movementY'] = event['mozMovementY'];
              }
              // workaround for Firefox bug 782777
              if (event['movementX'] == 0 && event['movementY'] == 0) {
                // ignore a mousemove event if it doesn't contain any movement info
                // (without pointer lock, we infer movement from pageX/pageY, so this check is unnecessary)
                event.preventDefault();
                return;
              }
            }
            // fall through
          case 'keydown': case 'keyup': case 'keypress': case 'mousedown': case 'mouseup':
            // If we preventDefault on keydown events, the subsequent keypress events
            // won't fire. However, it's fine (and in some cases necessary) to
            // preventDefault for keys that don't generate a character. Otherwise,
            // preventDefault is the right thing to do in general.
            if (event.type !== 'keydown' || (!SDL.unicode && !SDL.textInput) || (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */)) {
              event.preventDefault();
            }
  
            if (event.type == 'mousedown') {
              SDL.DOMButtons[event.button] = 1;
              SDL.events.push({
                type: 'touchstart',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
            } else if (event.type == 'mouseup') {
              // ignore extra ups, can happen if we leave the canvas while pressing down, then return,
              // since we add a mouseup in that case
              if (!SDL.DOMButtons[event.button]) {
                return;
              }
  
              SDL.events.push({
                type: 'touchend',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
              SDL.DOMButtons[event.button] = 0;
            }
  
            // We can only request fullscreen as the result of user input.
            // Due to this limitation, we toggle a boolean on keydown which
            // SDL_WM_ToggleFullScreen will check and subsequently set another
            // flag indicating for us to request fullscreen on the following
            // keyup. This isn't perfect, but it enables SDL_WM_ToggleFullScreen
            // to work as the result of a keypress (which is an extremely
            // common use case).
            if (event.type === 'keydown' || event.type === 'mousedown') {
              SDL.canRequestFullscreen = true;
            } else if (event.type === 'keyup' || event.type === 'mouseup') {
              if (SDL.isRequestingFullscreen) {
                Module['requestFullscreen'](/*lockPointer=*/true, /*resizeCanvas=*/true);
                SDL.isRequestingFullscreen = false;
              }
              SDL.canRequestFullscreen = false;
            }
  
            // SDL expects a unicode character to be passed to its keydown events.
            // Unfortunately, the browser APIs only provide a charCode property on
            // keypress events, so we must backfill in keydown events with their
            // subsequent keypress event's charCode.
            if (event.type === 'keypress' && SDL.savedKeydown) {
              // charCode is read-only
              SDL.savedKeydown.keypressCharCode = event.charCode;
              SDL.savedKeydown = null;
            } else if (event.type === 'keydown') {
              SDL.savedKeydown = event;
            }
  
            // Don't push keypress events unless SDL_StartTextInput has been called.
            if (event.type !== 'keypress' || SDL.textInput) {
              SDL.events.push(event);
            }
            break;
          case 'mouseout':
            // Un-press all pressed mouse buttons, because we might miss the release outside of the canvas
            for (var i = 0; i < 3; i++) {
              if (SDL.DOMButtons[i]) {
                SDL.events.push({
                  type: 'mouseup',
                  button: i,
                  pageX: event.pageX,
                  pageY: event.pageY
                });
                SDL.DOMButtons[i] = 0;
              }
            }
            event.preventDefault();
            break;
          case 'focus':
            SDL.events.push(event);
            event.preventDefault();
            break;
          case 'blur':
            SDL.events.push(event);
            unpressAllPressedKeys();
            event.preventDefault();
            break;
          case 'visibilitychange':
            SDL.events.push({
              type: 'visibilitychange',
              visible: !document.hidden
            });
            unpressAllPressedKeys();
            event.preventDefault();
            break;
          case 'unload':
            if (Browser.mainLoop.runner) {
              SDL.events.push(event);
              // Force-run a main event loop, since otherwise this event will never be caught!
              Browser.mainLoop.runner();
            }
            return;
          case 'resize':
            SDL.events.push(event);
            // manually triggered resize event doesn't have a preventDefault member
            if (event.preventDefault) {
              event.preventDefault();
            }
            break;
        }
        if (SDL.events.length >= 10000) {
          Module.printErr('SDL event queue full, dropping events');
          SDL.events = SDL.events.slice(0, 10000);
        }
        // If we have a handler installed, this will push the events to the app
        // instead of the app polling for them.
        SDL.flushEventsToHandler();
        return;
      },lookupKeyCodeForEvent:function (event) {
          var code = event.keyCode;
          if (code >= 65 && code <= 90) {
            code += 32; // make lowercase for SDL
          } else {
            code = SDL.keyCodes[event.keyCode] || event.keyCode;
            // If this is one of the modifier keys (224 | 1<<10 - 227 | 1<<10), and the event specifies that it is
            // a right key, add 4 to get the right key SDL key code.
            if (event.location === KeyboardEvent.DOM_KEY_LOCATION_RIGHT && code >= (224 | 1<<10) && code <= (227 | 1<<10)) {
              code += 4;
            }
          }
          return code;
      },handleEvent:function (event) {
        if (event.handled) return;
        event.handled = true;
  
        switch (event.type) {
          case 'touchstart': case 'touchend': case 'touchmove': {
            Browser.calculateMouseEvent(event);
            break;
          }
          case 'keydown': case 'keyup': {
            var down = event.type === 'keydown';
            var code = SDL.lookupKeyCodeForEvent(event);
            HEAP8[(((SDL.keyboardState)+(code))>>0)]=down;
            // TODO: lmeta, rmeta, numlock, capslock, KMOD_MODE, KMOD_RESERVED
            SDL.modState = (HEAP8[(((SDL.keyboardState)+(1248))>>0)] ? 0x0040 : 0) | // KMOD_LCTRL
              (HEAP8[(((SDL.keyboardState)+(1249))>>0)] ? 0x0001 : 0) | // KMOD_LSHIFT
              (HEAP8[(((SDL.keyboardState)+(1250))>>0)] ? 0x0100 : 0) | // KMOD_LALT
              (HEAP8[(((SDL.keyboardState)+(1252))>>0)] ? 0x0080 : 0) | // KMOD_RCTRL
              (HEAP8[(((SDL.keyboardState)+(1253))>>0)] ? 0x0002 : 0) | // KMOD_RSHIFT
              (HEAP8[(((SDL.keyboardState)+(1254))>>0)] ? 0x0200 : 0); //  KMOD_RALT
            if (down) {
              SDL.keyboardMap[code] = event.keyCode; // save the DOM input, which we can use to unpress it during blur
            } else {
              delete SDL.keyboardMap[code];
            }
  
            break;
          }
          case 'mousedown': case 'mouseup':
            if (event.type == 'mousedown') {
              // SDL_BUTTON(x) is defined as (1 << ((x)-1)).  SDL buttons are 1-3,
              // and DOM buttons are 0-2, so this means that the below formula is
              // correct.
              SDL.buttonState |= 1 << event.button;
            } else if (event.type == 'mouseup') {
              SDL.buttonState &= ~(1 << event.button);
            }
            // fall through
          case 'mousemove': {
            Browser.calculateMouseEvent(event);
            break;
          }
        }
      },flushEventsToHandler:function () {
        if (!SDL.eventHandler) return;
  
        while (SDL.pollEvent(SDL.eventHandlerTemp)) {
          Module['dynCall_iii'](SDL.eventHandler, SDL.eventHandlerContext, SDL.eventHandlerTemp);
        }
      },pollEvent:function (ptr) {
        if (SDL.initFlags & 0x200 && SDL.joystickEventState) {
          // If SDL_INIT_JOYSTICK was supplied AND the joystick system is configured
          // to automatically query for events, query for joystick events.
          SDL.queryJoysticks();
        }
        if (ptr) {
          while (SDL.events.length > 0) {
            if (SDL.makeCEvent(SDL.events.shift(), ptr) !== false) return 1;
          }
          return 0;
        } else {
          // XXX: somewhat risky in that we do not check if the event is real or not (makeCEvent returns false) if no pointer supplied
          return SDL.events.length > 0;
        }
      },makeCEvent:function (event, ptr) {
        if (typeof event === 'number') {
          // This is a pointer to a copy of a native C event that was SDL_PushEvent'ed
          _memcpy(ptr, event, 28);
          _free(event); // the copy is no longer needed
          return;
        }
  
        SDL.handleEvent(event);
  
        switch (event.type) {
          case 'keydown': case 'keyup': {
            var down = event.type === 'keydown';
            //Module.print('Received key event: ' + event.keyCode);
            var key = SDL.lookupKeyCodeForEvent(event);
            var scan;
            if (key >= 1024) {
              scan = key - 1024;
            } else {
              scan = SDL.scanCodes[key] || key;
            }
  
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(8))>>0)]=down ? 1 : 0;
            HEAP8[(((ptr)+(9))>>0)]=0; // TODO
            HEAP32[(((ptr)+(12))>>2)]=scan;
            HEAP32[(((ptr)+(16))>>2)]=key;
            HEAP16[(((ptr)+(20))>>1)]=SDL.modState;
            // some non-character keys (e.g. backspace and tab) won't have keypressCharCode set, fill in with the keyCode.
            HEAP32[(((ptr)+(24))>>2)]=event.keypressCharCode || key;
  
            break;
          }
          case 'keypress': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            // Not filling in windowID for now
            var cStr = intArrayFromString(String.fromCharCode(event.charCode));
            for (var i = 0; i < cStr.length; ++i) {
              HEAP8[(((ptr)+(8 + i))>>0)]=cStr[i];
            }
            break;
          }
          case 'mousedown': case 'mouseup': case 'mousemove': {
            if (event.type != 'mousemove') {
              var down = event.type === 'mousedown';
              HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
              HEAP32[(((ptr)+(4))>>2)]=0;
              HEAP32[(((ptr)+(8))>>2)]=0;
              HEAP32[(((ptr)+(12))>>2)]=0;
              HEAP8[(((ptr)+(16))>>0)]=event.button+1; // DOM buttons are 0-2, SDL 1-3
              HEAP8[(((ptr)+(17))>>0)]=down ? 1 : 0;
              HEAP32[(((ptr)+(20))>>2)]=Browser.mouseX;
              HEAP32[(((ptr)+(24))>>2)]=Browser.mouseY;
            } else {
              HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
              HEAP32[(((ptr)+(4))>>2)]=0;
              HEAP32[(((ptr)+(8))>>2)]=0;
              HEAP32[(((ptr)+(12))>>2)]=0;
              HEAP32[(((ptr)+(16))>>2)]=SDL.buttonState;
              HEAP32[(((ptr)+(20))>>2)]=Browser.mouseX;
              HEAP32[(((ptr)+(24))>>2)]=Browser.mouseY;
              HEAP32[(((ptr)+(28))>>2)]=Browser.mouseMovementX;
              HEAP32[(((ptr)+(32))>>2)]=Browser.mouseMovementY;
            }
            break;
          }
          case 'wheel': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(16))>>2)]=event.deltaX;
            HEAP32[(((ptr)+(20))>>2)]=event.deltaY; 
            break;       
          }
          case 'touchstart': case 'touchend': case 'touchmove': {
            var touch = event.touch;
            if (!Browser.touches[touch.identifier]) break;
            var w = Module['canvas'].width;
            var h = Module['canvas'].height;
            var x = Browser.touches[touch.identifier].x / w;
            var y = Browser.touches[touch.identifier].y / h;
            var lx = Browser.lastTouches[touch.identifier].x / w;
            var ly = Browser.lastTouches[touch.identifier].y / h;
            var dx = x - lx;
            var dy = y - ly;
            if (touch['deviceID'] === undefined) touch.deviceID = SDL.TOUCH_DEFAULT_ID;
            if (dx === 0 && dy === 0 && event.type === 'touchmove') return false; // don't send these if nothing happened
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=_SDL_GetTicks();
            (tempI64 = [touch.deviceID>>>0,(tempDouble=touch.deviceID,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((ptr)+(8))>>2)]=tempI64[0],HEAP32[(((ptr)+(12))>>2)]=tempI64[1]);
            (tempI64 = [touch.identifier>>>0,(tempDouble=touch.identifier,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((ptr)+(16))>>2)]=tempI64[0],HEAP32[(((ptr)+(20))>>2)]=tempI64[1]);
            HEAPF32[(((ptr)+(24))>>2)]=x;
            HEAPF32[(((ptr)+(28))>>2)]=y;
            HEAPF32[(((ptr)+(32))>>2)]=dx;
            HEAPF32[(((ptr)+(36))>>2)]=dy;
            if (touch.force !== undefined) {
              HEAPF32[(((ptr)+(40))>>2)]=touch.force;
            } else { // No pressure data, send a digital 0/1 pressure.
              HEAPF32[(((ptr)+(40))>>2)]=event.type == "touchend" ? 0 : 1;
            }
            break;
          }
          case 'unload': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            break;
          }
          case 'resize': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=event.w;
            HEAP32[(((ptr)+(8))>>2)]=event.h;
            break;
          }
          case 'joystick_button_up': case 'joystick_button_down': {
            var state = event.type === 'joystick_button_up' ? 0 : 1;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(4))>>0)]=event.index;
            HEAP8[(((ptr)+(5))>>0)]=event.button;
            HEAP8[(((ptr)+(6))>>0)]=state;
            break;
          }
          case 'joystick_axis_motion': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(4))>>0)]=event.index;
            HEAP8[(((ptr)+(5))>>0)]=event.axis;
            HEAP32[(((ptr)+(8))>>2)]=SDL.joystickAxisValueConversion(event.value);
            break;
          }
          case 'focus': {
            var SDL_WINDOWEVENT_FOCUS_GAINED = 12 /* SDL_WINDOWEVENT_FOCUS_GAINED */;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=SDL_WINDOWEVENT_FOCUS_GAINED;
            break;
          }
          case 'blur': {
            var SDL_WINDOWEVENT_FOCUS_LOST = 13 /* SDL_WINDOWEVENT_FOCUS_LOST */;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=SDL_WINDOWEVENT_FOCUS_LOST;
            break;
          }
          case 'visibilitychange': {
            var SDL_WINDOWEVENT_SHOWN  = 1 /* SDL_WINDOWEVENT_SHOWN */;
            var SDL_WINDOWEVENT_HIDDEN = 2 /* SDL_WINDOWEVENT_HIDDEN */;
            var visibilityEventID = event.visible ? SDL_WINDOWEVENT_SHOWN : SDL_WINDOWEVENT_HIDDEN;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=visibilityEventID;
            break;
          }
          default: throw 'Unhandled SDL event: ' + event.type;
        }
      },makeFontString:function (height, fontName) {
        if (fontName.charAt(0) != "'" && fontName.charAt(0) != '"') {
          // https://developer.mozilla.org/ru/docs/Web/CSS/font-family
          // Font family names containing whitespace should be quoted.
          // BTW, quote all font names is easier than searching spaces
          fontName = '"' + fontName + '"';
        }
        return height + 'px ' + fontName + ', serif';
      },estimateTextWidth:function (fontData, text) {
        var h = fontData.size;
        var fontString = SDL.makeFontString(h, fontData.name);
        var tempCtx = SDL.ttfContext;
        assert(tempCtx, 'TTF_Init must have been called');
        tempCtx.save();
        tempCtx.font = fontString;
        var ret = tempCtx.measureText(text).width | 0;
        tempCtx.restore();
        return ret;
      },allocateChannels:function (num) { // called from Mix_AllocateChannels and init
        if (SDL.numChannels && SDL.numChannels >= num && num != 0) return;
        SDL.numChannels = num;
        SDL.channels = [];
        for (var i = 0; i < num; i++) {
          SDL.channels[i] = {
            audio: null,
            volume: 1.0
          };
        }
      },setGetVolume:function (info, volume) {
        if (!info) return 0;
        var ret = info.volume * 128; // MIX_MAX_VOLUME
        if (volume != -1) {
          info.volume = Math.min(Math.max(volume, 0), 128) / 128;
          if (info.audio) {
            try {
              info.audio.volume = info.volume; // For <audio> element
              if (info.audio.webAudioGainNode) info.audio.webAudioGainNode['gain']['value'] = info.volume; // For WebAudio playback
            } catch(e) {
              Module.printErr('setGetVolume failed to set audio volume: ' + e);
            }
          }
        }
        return ret;
      },setPannerPosition:function (info, x, y, z) {
        if (!info) return;
        if (info.audio) {
          if (info.audio.webAudioPannerNode) {
            info.audio.webAudioPannerNode['setPosition'](x, y, z);
          }
        }
      },playWebAudio:function (audio) {
        if (!audio) return;
        if (audio.webAudioNode) return; // This instance is already playing, don't start again.
        if (!SDL.webAudioAvailable()) return;
        try {
          var webAudio = audio.resource.webAudio;
          audio.paused = false;
          if (!webAudio.decodedBuffer) {
            if (webAudio.onDecodeComplete === undefined) abort("Cannot play back audio object that was not loaded");
            webAudio.onDecodeComplete.push(function() { if (!audio.paused) SDL.playWebAudio(audio); });
            return;
          }
          audio.webAudioNode = SDL.audioContext['createBufferSource']();
          audio.webAudioNode['buffer'] = webAudio.decodedBuffer;
          audio.webAudioNode['loop'] = audio.loop;
          audio.webAudioNode['onended'] = function() { audio['onended'](); } // For <media> element compatibility, route the onended signal to the instance.
  
          audio.webAudioPannerNode = SDL.audioContext['createPanner']();
          // avoid Chrome bug
          // If posz = 0, the sound will come from only the right.
          // By posz = -0.5 (slightly ahead), the sound will come from right and left correctly.
          audio.webAudioPannerNode["setPosition"](0, 0, -.5);
          audio.webAudioPannerNode['panningModel'] = 'equalpower';
  
          // Add an intermediate gain node to control volume.
          audio.webAudioGainNode = SDL.audioContext['createGain']();
          audio.webAudioGainNode['gain']['value'] = audio.volume;
  
          audio.webAudioNode['connect'](audio.webAudioPannerNode);
          audio.webAudioPannerNode['connect'](audio.webAudioGainNode);
          audio.webAudioGainNode['connect'](SDL.audioContext['destination']);
  
          audio.webAudioNode['start'](0, audio.currentPosition);
          audio.startTime = SDL.audioContext['currentTime'] - audio.currentPosition;
        } catch(e) {
          Module.printErr('playWebAudio failed: ' + e);
        }
      },pauseWebAudio:function (audio) {
        if (!audio) return;
        if (audio.webAudioNode) {
          try {
            // Remember where we left off, so that if/when we resume, we can restart the playback at a proper place.
            audio.currentPosition = (SDL.audioContext['currentTime'] - audio.startTime) % audio.resource.webAudio.decodedBuffer.duration;
            // Important: When we reach here, the audio playback is stopped by the user. But when calling .stop() below, the Web Audio
            // graph will send the onended signal, but we don't want to process that, since pausing should not clear/destroy the audio
            // channel.
            audio.webAudioNode['onended'] = undefined;
            audio.webAudioNode.stop(0); // 0 is a default parameter, but WebKit is confused by it #3861
            audio.webAudioNode = undefined;
          } catch(e) {
            Module.printErr('pauseWebAudio failed: ' + e);
          }
        }
        audio.paused = true;
      },openAudioContext:function () {
        // Initialize Web Audio API if we haven't done so yet. Note: Only initialize Web Audio context ever once on the web page,
        // since initializing multiple times fails on Chrome saying 'audio resources have been exhausted'.
        if (!SDL.audioContext) {
          if (typeof(AudioContext) !== 'undefined') SDL.audioContext = new AudioContext();
          else if (typeof(webkitAudioContext) !== 'undefined') SDL.audioContext = new webkitAudioContext();
        }
      },webAudioAvailable:function () { return !!SDL.audioContext; },fillWebAudioBufferFromHeap:function (heapPtr, sizeSamplesPerChannel, dstAudioBuffer) {
        // The input audio data is interleaved across the channels, i.e. [L, R, L, R, L, R, ...] and is either 8-bit or 16-bit as
        // supported by the SDL API. The output audio wave data for Web Audio API must be in planar buffers of [-1,1]-normalized Float32 data,
        // so perform a buffer conversion for the data.
        var numChannels = SDL.audio.channels;
        for(var c = 0; c < numChannels; ++c) {
          var channelData = dstAudioBuffer['getChannelData'](c);
          if (channelData.length != sizeSamplesPerChannel) {
            throw 'Web Audio output buffer length mismatch! Destination size: ' + channelData.length + ' samples vs expected ' + sizeSamplesPerChannel + ' samples!';
          }
          if (SDL.audio.format == 0x8010 /*AUDIO_S16LSB*/) {
            for(var j = 0; j < sizeSamplesPerChannel; ++j) {
              channelData[j] = (HEAP16[(((heapPtr)+((j*numChannels + c)*2))>>1)]) / 0x8000;
            }
          } else if (SDL.audio.format == 0x0008 /*AUDIO_U8*/) {
            for(var j = 0; j < sizeSamplesPerChannel; ++j) {
              var v = (HEAP8[(((heapPtr)+(j*numChannels + c))>>0)]);
              channelData[j] = ((v >= 0) ? v-128 : v+128) /128;
            }
          }
        }
      },debugSurface:function (surfData) {
        console.log('dumping surface ' + [surfData.surf, surfData.source, surfData.width, surfData.height]);
        var image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
        var data = image.data;
        var num = Math.min(surfData.width, surfData.height);
        for (var i = 0; i < num; i++) {
          console.log('   diagonal ' + i + ':' + [data[i*surfData.width*4 + i*4 + 0], data[i*surfData.width*4 + i*4 + 1], data[i*surfData.width*4 + i*4 + 2], data[i*surfData.width*4 + i*4 + 3]]);
        }
      },joystickEventState:1,lastJoystickState:{},joystickNamePool:{},recordJoystickState:function (joystick, state) {
        // Standardize button state.
        var buttons = new Array(state.buttons.length);
        for (var i = 0; i < state.buttons.length; i++) {
          buttons[i] = SDL.getJoystickButtonState(state.buttons[i]);
        }
  
        SDL.lastJoystickState[joystick] = {
          buttons: buttons,
          axes: state.axes.slice(0),
          timestamp: state.timestamp,
          index: state.index,
          id: state.id
        };
      },getJoystickButtonState:function (button) {
        if (typeof button === 'object') {
          // Current gamepad API editor's draft (Firefox Nightly)
          // https://dvcs.w3.org/hg/gamepad/raw-file/default/gamepad.html#idl-def-GamepadButton
          return button['pressed'];
        } else {
          // Current gamepad API working draft (Firefox / Chrome Stable)
          // http://www.w3.org/TR/2012/WD-gamepad-20120529/#gamepad-interface
          return button > 0;
        }
      },queryJoysticks:function () {
        for (var joystick in SDL.lastJoystickState) {
          var state = SDL.getGamepad(joystick - 1);
          var prevState = SDL.lastJoystickState[joystick];
          // If joystick was removed, state returns null.
          if (typeof state === 'undefined') return;
          // Check only if the timestamp has differed.
          // NOTE: Timestamp is not available in Firefox.
          if (typeof state.timestamp !== 'number' || state.timestamp !== prevState.timestamp) {
            var i;
            for (i = 0; i < state.buttons.length; i++) {
              var buttonState = SDL.getJoystickButtonState(state.buttons[i]);
              // NOTE: The previous state already has a boolean representation of
              //       its button, so no need to standardize its button state here.
              if (buttonState !== prevState.buttons[i]) {
                // Insert button-press event.
                SDL.events.push({
                  type: buttonState ? 'joystick_button_down' : 'joystick_button_up',
                  joystick: joystick,
                  index: joystick - 1,
                  button: i
                });
              }
            }
            for (i = 0; i < state.axes.length; i++) {
              if (state.axes[i] !== prevState.axes[i]) {
                // Insert axes-change event.
                SDL.events.push({
                  type: 'joystick_axis_motion',
                  joystick: joystick,
                  index: joystick - 1,
                  axis: i,
                  value: state.axes[i]
                });
              }
            }
  
            SDL.recordJoystickState(joystick, state);
          }
        }
      },joystickAxisValueConversion:function (value) {
        // Make sure value is properly clamped
        value = Math.min(1, Math.max(value, -1));
        // Ensures that 0 is 0, 1 is 32767, and -1 is 32768.
        return Math.ceil(((value+1) * 32767.5) - 32768);
      },getGamepads:function () {
        var fcn = navigator.getGamepads || navigator.webkitGamepads || navigator.mozGamepads || navigator.gamepads || navigator.webkitGetGamepads;
        if (fcn !== undefined) {
          // The function must be applied on the navigator object.
          return fcn.apply(navigator);
        } else {
          return [];
        }
      },getGamepad:function (deviceIndex) {
        var gamepads = SDL.getGamepads();
        if (gamepads.length > deviceIndex && deviceIndex >= 0) {
          return gamepads[deviceIndex];
        }
        return null;
      }};function _SDL_SetVideoMode(width, height, depth, flags) {
      ['touchstart', 'touchend', 'touchmove', 'mousedown', 'mouseup', 'mousemove', 'DOMMouseScroll', 'mousewheel', 'wheel', 'mouseout'].forEach(function(event) {
        Module['canvas'].addEventListener(event, SDL.receiveEvent, true);
      });
  
      var canvas = Module['canvas'];
  
      // (0,0) means 'use fullscreen' in native; in Emscripten, use the current canvas size.
      if (width == 0 && height == 0) {
        width = canvas.width;
        height = canvas.height;
      }
  
      if (!SDL.addedResizeListener) {
        SDL.addedResizeListener = true;
        Browser.resizeListeners.push(function(w, h) {
          if (!SDL.settingVideoMode) {
            SDL.receiveEvent({
              type: 'resize',
              w: w,
              h: h
            });
          }
        });
      }
  
      if (width !== canvas.width || height !== canvas.height) {
        SDL.settingVideoMode = true; // SetVideoMode itself should not trigger resize events
        Browser.setCanvasSize(width, height);
        SDL.settingVideoMode = false;
      }
  
      // Free the old surface first if there is one
      if (SDL.screen) {
        SDL.freeSurface(SDL.screen);
        assert(!SDL.screen);
      }
  
      if (SDL.GL) flags = flags | 0x04000000; // SDL_OPENGL - if we are using GL, then later calls to SetVideoMode may not mention GL, but we do need it. Once in GL mode, we never leave it.
  
      SDL.screen = SDL.makeSurface(width, height, flags, true, 'screen');
  
      return SDL.screen;
    }

  function _glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

  function _SDL_GL_SetAttribute(attr, value) {
      if (!(attr in SDL.glAttributes)) {
        abort('Unknown SDL GL attribute (' + attr + '). Please check if your SDL version is supported.');
      }
  
      SDL.glAttributes[attr] = value;
    }

  function _glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
  
      if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _glutGetModifiers() { return GLUT.modifiers; }

  
  var PTHREAD_SPECIFIC={};
  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _glClear(x0) { GLctx['clear'](x0) }

  function _pthread_mutex_init() {}

  function _glActiveTexture(x0) { GLctx['activeTexture'](x0) }

  function _glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

  
  function _glutPostRedisplay() {
      if (GLUT.displayFunc && !GLUT.requestedAnimationFrame) {
        GLUT.requestedAnimationFrame = true;
        Browser.requestAnimationFrame(function() {
          GLUT.requestedAnimationFrame = false;
          Browser.mainLoop.runIter(function() {
            Module['dynCall_v'](GLUT.displayFunc);
          });
        });
      }
    }function _glutReshapeWindow(width, height) {
      GLUT.exitFullscreen();
      Browser.setCanvasSize(width, height);
      if (GLUT.reshapeFunc) {
        Module['dynCall_vii'](GLUT.reshapeFunc, width, height);
      }
      _glutPostRedisplay();
    }

  function _glutSpecialFunc(func) {
      GLUT.specialFunc = func;
    }

  function _pthread_mutexattr_destroy() {}

  function _glutMotionFunc(func) {
      GLUT.motionFunc = func;
    }

  
  var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   

   

  function __Unwind_GetIPInfo() {
      abort('Unwind_GetIPInfo');
    }

  function _glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
      if (target == GLctx.ARRAY_BUFFER) {
        GL.currArrayBuffer = buffer;
        GLImmediate.lastArrayBuffer = buffer;
      } else if (target == GLctx.ELEMENT_ARRAY_BUFFER) {
        GL.currElementArrayBuffer = buffer;
      }
  
      if (target == 0x88EB /*GL_PIXEL_PACK_BUFFER*/) {
        // In WebGL 2 glReadPixels entry point, we need to use a different WebGL 2 API function call when a buffer is bound to
        // GL_PIXEL_PACK_BUFFER_BINDING point, so must keep track whether that binding point is non-null to know what is
        // the proper API function to call.
        GLctx.currentPixelPackBufferBinding = buffer;
      } else if (target == 0x88EC /*GL_PIXEL_UNPACK_BUFFER*/) {
        // In WebGL 2 glTexImage2D, glTexSubImage2D, glTexImage3D and glTexSubImage3D entry points, we need to use a different WebGL 2 API function
        // call when a buffer is bound to GL_PIXEL_UNPACK_BUFFER_BINDING point, so must keep track whether that binding point is non-null to know what
        // is the proper API function to call.
        GLctx.currentPixelUnpackBufferBinding = buffer;
      }
      GLctx.bindBuffer(target, bufferObj);
    }

  function _glutCreateWindow(name) {
      var contextAttributes = {
        antialias: ((GLUT.initDisplayMode & 0x0080 /*GLUT_MULTISAMPLE*/) != 0),
        depth: ((GLUT.initDisplayMode & 0x0010 /*GLUT_DEPTH*/) != 0),
        stencil: ((GLUT.initDisplayMode & 0x0020 /*GLUT_STENCIL*/) != 0),
        alpha: ((GLUT.initDisplayMode & 0x0008 /*GLUT_ALPHA*/) != 0)
      };
      Module.ctx = Browser.createContext(Module['canvas'], true, true, contextAttributes);
      return Module.ctx ? 1 /* a new GLUT window ID for the created context */ : 0 /* failure */;
    }

  function _glBufferData(target, size, data, usage) {
      switch (usage) { // fix usages, WebGL 1 only has *_DRAW
        case 0x88E1: // GL_STREAM_READ
        case 0x88E2: // GL_STREAM_COPY
          usage = 0x88E0; // GL_STREAM_DRAW
          break;
        case 0x88E5: // GL_STATIC_READ
        case 0x88E6: // GL_STATIC_COPY
          usage = 0x88E4; // GL_STATIC_DRAW
          break;
        case 0x88E9: // GL_DYNAMIC_READ
        case 0x88EA: // GL_DYNAMIC_COPY
          usage = 0x88E8; // GL_DYNAMIC_DRAW
          break;
      }
      if (!data) {
        GLctx.bufferData(target, size, usage);
      } else {
        if (GL.currentContext.supportsWebGL2EntryPoints) { // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
          GLctx.bufferData(target, HEAPU8, usage, data, size);
          return;
        }
        GLctx.bufferData(target, HEAPU8.subarray(data, data+size), usage);
      }
    }

  function _glutInit(argcp, argv) {
      // Ignore arguments
      GLUT.initTime = Date.now();
  
      var isTouchDevice = 'ontouchstart' in document.documentElement;
      if (isTouchDevice) {
        // onMouseButtonDown, onMouseButtonUp and onMousemove handlers
        // depend on Browser.mouseX / Browser.mouseY fields. Those fields
        // don't get updated by touch events. So register a touchHandler
        // function that translates the touch events to mouse events.
  
        // GLUT doesn't support touch, mouse only, so from touch events we
        // are only looking at single finger touches to emulate left click,
        // so we can use workaround and convert all touch events in mouse
        // events. See touchHandler.
        window.addEventListener("touchmove", GLUT.touchHandler, true);
        window.addEventListener("touchstart", GLUT.touchHandler, true);
        window.addEventListener("touchend", GLUT.touchHandler, true);
      }
  
      window.addEventListener("keydown", GLUT.onKeydown, true);
      window.addEventListener("keyup", GLUT.onKeyup, true);
      window.addEventListener("mousemove", GLUT.onMousemove, true);
      window.addEventListener("mousedown", GLUT.onMouseButtonDown, true);
      window.addEventListener("mouseup", GLUT.onMouseButtonUp, true);
      // IE9, Chrome, Safari, Opera
      window.addEventListener("mousewheel", GLUT.onMouseWheel, true);
      // Firefox
      window.addEventListener("DOMMouseScroll", GLUT.onMouseWheel, true);
  
      Browser.resizeListeners.push(function(width, height) {
        if (GLUT.reshapeFunc) {
          Module['dynCall_vii'](GLUT.reshapeFunc, width, height);
        }
      });
  
      __ATEXIT__.push(function() {
        if (isTouchDevice) {
          window.removeEventListener("touchmove", GLUT.touchHandler, true);
          window.removeEventListener("touchstart", GLUT.touchHandler, true);
          window.removeEventListener("touchend", GLUT.touchHandler, true);
        }
  
        window.removeEventListener("keydown", GLUT.onKeydown, true);
        window.removeEventListener("keyup", GLUT.onKeyup, true);
        window.removeEventListener("mousemove", GLUT.onMousemove, true);
        window.removeEventListener("mousedown", GLUT.onMouseButtonDown, true);
        window.removeEventListener("mouseup", GLUT.onMouseButtonUp, true);
        // IE9, Chrome, Safari, Opera
        window.removeEventListener("mousewheel", GLUT.onMouseWheel, true);
        // Firefox
        window.removeEventListener("DOMMouseScroll", GLUT.onMouseWheel, true);
  
        Module["canvas"].width = Module["canvas"].height = 1;
      });
    }

  function _pthread_cond_init() { return 0; }


  function _glGetError() {
      // First return any GL error generated by the emscripten library_gl.js interop layer.
      if (GL.lastError) {
        var error = GL.lastError;
        GL.lastError = 0/*GL_NO_ERROR*/;
        return error;
      } else { // If there were none, return the GL error from the browser GL context.
        return GLctx.getError();
      }
    }

  function ___cxa_find_matching_catch_2() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }

  function ___cxa_find_matching_catch_3() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }

   

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

  
  
  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    }
  
  function _glEnableClientState(cap) {
      var attrib = GLEmulation.getAttributeFromCapability(cap);
      if (attrib === null) {
        Module.printErr('WARNING: unhandled clientstate: ' + cap);
        return;
      }
      if (!GLImmediate.enabledClientAttributes[attrib]) {
        GLImmediate.enabledClientAttributes[attrib] = true;
        GLImmediate.totalEnabledClientAttributes++;
        GLImmediate.currentRenderer = null; // Will need to change current renderer, since the set of active vertex pointers changed.
        if (GLEmulation.currentVao) GLEmulation.currentVao.enabledClientStates[cap] = 1;
        GLImmediate.modifiedClientAttributes = true;
      }
    }function _emulGlBindVertexArray(vao) {
      // undo vao-related things, wipe the slate clean, both for vao of 0 or an actual vao
      GLEmulation.currentVao = null; // make sure the commands we run here are not recorded
      if (GLImmediate.lastRenderer) GLImmediate.lastRenderer.cleanup();
      _glBindBuffer(GLctx.ARRAY_BUFFER, 0); // XXX if one was there before we were bound?
      _glBindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, 0);
      for (var vaa in GLEmulation.enabledVertexAttribArrays) {
        GLctx.disableVertexAttribArray(vaa);
      }
      GLEmulation.enabledVertexAttribArrays = {};
      GLImmediate.enabledClientAttributes = [0, 0];
      GLImmediate.totalEnabledClientAttributes = 0;
      GLImmediate.modifiedClientAttributes = true;
      if (vao) {
        // replay vao
        var info = GLEmulation.vaos[vao];
        _glBindBuffer(GLctx.ARRAY_BUFFER, info.arrayBuffer); // XXX overwrite current binding?
        _glBindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, info.elementArrayBuffer);
        for (var vaa in info.enabledVertexAttribArrays) {
          _glEnableVertexAttribArray(vaa);
        }
        for (var vaa in info.vertexAttribPointers) {
          _glVertexAttribPointer.apply(null, info.vertexAttribPointers[vaa]);
        }
        for (var attrib in info.enabledClientStates) {
          _glEnableClientState(attrib|0);
        }
        GLEmulation.currentVao = info; // set currentVao last, so the commands we ran here were not recorded
      }
    }function _glBindVertexArray(vao) {
      _emulGlBindVertexArray(vao);
      var ibo = GLctx.getParameter(GLctx.ELEMENT_ARRAY_BUFFER_BINDING);
      GL.currElementArrayBuffer = ibo ? (ibo.name | 0) : 0;
    }

   

   

  function _glGenTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var texture = GLctx.createTexture();
        if (!texture) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */); // GLES + EGL specs don't specify what should happen here, so best to issue an error and create IDs with 0.
          while(i < n) HEAP32[(((textures)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.textures);
        texture.name = id;
        GL.textures[id] = texture;
        HEAP32[(((textures)+(i*4))>>2)]=id;
      }
    }

  function _glutMouseFunc(func) {
      GLUT.mouseFunc = func;
    }

  function _dladdr(addr, info) {
      // report all function pointers as coming from this program itself XXX not really correct in any way
      var fname = allocate(intArrayFromString(Module['thisProgram'] || './this.program'), 'i8', ALLOC_NORMAL); // XXX leak
      HEAP32[((addr)>>2)]=fname;
      HEAP32[(((addr)+(4))>>2)]=0;
      HEAP32[(((addr)+(8))>>2)]=0;
      HEAP32[(((addr)+(12))>>2)]=0;
      return 1;
    }

  function ___gxx_personality_v0() {
    }

  
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

  function _pthread_mutexattr_init() {}

   


  function _emscripten_run_script(ptr) {
      eval(Pointer_stringify(ptr));
    }

  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

   

  function _pthread_rwlock_unlock() { return 0; }

  function _pthread_mutexattr_settype() {}

  function _glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }

  
  
  function emscriptenWebGLComputeImageSize(width, height, sizePerPixel, alignment) {
      function roundedToNextMultipleOf(x, y) {
        return Math.floor((x + y - 1) / y) * y
      }
      var plainRowSize = width * sizePerPixel;
      var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
      return (height <= 0) ? 0 :
               ((height - 1) * alignedRowSize + plainRowSize);
    }function emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) {
      var sizePerPixel;
      var numChannels;
      switch(format) {
        case 0x1906 /* GL_ALPHA */:
        case 0x1909 /* GL_LUMINANCE */:
        case 0x1902 /* GL_DEPTH_COMPONENT */:
        case 0x1903 /* GL_RED */:
        case 0x8D94 /* GL_RED_INTEGER */:
          numChannels = 1;
          break;
        case 0x190A /* GL_LUMINANCE_ALPHA */:
        case 0x8227 /* GL_RG */:
        case 0x8228 /* GL_RG_INTEGER*/:
          numChannels = 2;
          break;
        case 0x1907 /* GL_RGB */:
        case 0x8C40 /* GL_SRGB_EXT */:
        case 0x8D98 /* GL_RGB_INTEGER */:
          numChannels = 3;
          break;
        case 0x1908 /* GL_RGBA */:
        case 0x8C42 /* GL_SRGB_ALPHA_EXT */:
        case 0x8D99 /* GL_RGBA_INTEGER */:
          numChannels = 4;
          break;
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return null;
      }
      switch (type) {
        case 0x1401 /* GL_UNSIGNED_BYTE */:
        case 0x1400 /* GL_BYTE */:
          sizePerPixel = numChannels*1;
          break;
        case 0x1403 /* GL_UNSIGNED_SHORT */:
        case 0x8D61 /* GL_HALF_FLOAT_OES */:
        case 0x140B /* GL_HALF_FLOAT */:
        case 0x1402 /* GL_SHORT */:
          sizePerPixel = numChannels*2;
          break;
        case 0x1405 /* GL_UNSIGNED_INT */:
        case 0x1406 /* GL_FLOAT */:
        case 0x1404 /* GL_INT */:
          sizePerPixel = numChannels*4;
          break;
        case 0x84FA /* GL_UNSIGNED_INT_24_8_WEBGL/GL_UNSIGNED_INT_24_8 */:
        case 0x8C3E /* GL_UNSIGNED_INT_5_9_9_9_REV */:
        case 0x8368 /* GL_UNSIGNED_INT_2_10_10_10_REV */:
        case 0x8C3B /* GL_UNSIGNED_INT_10F_11F_11F_REV */:
        case 0x84FA /* GL_UNSIGNED_INT_24_8 */:
          sizePerPixel = 4;
          break;
        case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
        case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
        case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
          sizePerPixel = 2;
          break;
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return null;
      }
      var bytes = emscriptenWebGLComputeImageSize(width, height, sizePerPixel, GL.unpackAlignment);
      switch(type) {
        case 0x1400 /* GL_BYTE */:
          return HEAP8.subarray((pixels),(pixels+bytes));
        case 0x1401 /* GL_UNSIGNED_BYTE */:
          return HEAPU8.subarray((pixels),(pixels+bytes));
        case 0x1402 /* GL_SHORT */:
          return HEAP16.subarray((pixels)>>1,(pixels+bytes)>>1);
        case 0x1404 /* GL_INT */:
          return HEAP32.subarray((pixels)>>2,(pixels+bytes)>>2);
        case 0x1406 /* GL_FLOAT */:
          return HEAPF32.subarray((pixels)>>2,(pixels+bytes)>>2);
        case 0x1405 /* GL_UNSIGNED_INT */:
        case 0x84FA /* GL_UNSIGNED_INT_24_8_WEBGL/GL_UNSIGNED_INT_24_8 */:
        case 0x8C3E /* GL_UNSIGNED_INT_5_9_9_9_REV */:
        case 0x8368 /* GL_UNSIGNED_INT_2_10_10_10_REV */:
        case 0x8C3B /* GL_UNSIGNED_INT_10F_11F_11F_REV */:
        case 0x84FA /* GL_UNSIGNED_INT_24_8 */:
          return HEAPU32.subarray((pixels)>>2,(pixels+bytes)>>2);
        case 0x1403 /* GL_UNSIGNED_SHORT */:
        case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
        case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
        case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
        case 0x8D61 /* GL_HALF_FLOAT_OES */:
        case 0x140B /* GL_HALF_FLOAT */:
          return HEAPU16.subarray((pixels)>>1,(pixels+bytes)>>1);
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return null;
      }
    }
  
  function emscriptenWebGLGetHeapForType(type) {
      switch(type) {
        case 0x1400 /* GL_BYTE */:
          return HEAP8;
        case 0x1401 /* GL_UNSIGNED_BYTE */:
          return HEAPU8;
        case 0x1402 /* GL_SHORT */:
          return HEAP16;
        case 0x1403 /* GL_UNSIGNED_SHORT */:
        case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
        case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
        case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
        case 0x8D61 /* GL_HALF_FLOAT_OES */:
        case 0x140B /* GL_HALF_FLOAT */:
          return HEAPU16;
        case 0x1404 /* GL_INT */:
          return HEAP32;
        case 0x1405 /* GL_UNSIGNED_INT */:
        case 0x84FA /* GL_UNSIGNED_INT_24_8_WEBGL/GL_UNSIGNED_INT_24_8 */:
        case 0x8C3E /* GL_UNSIGNED_INT_5_9_9_9_REV */:
        case 0x8368 /* GL_UNSIGNED_INT_2_10_10_10_REV */:
        case 0x8C3B /* GL_UNSIGNED_INT_10F_11F_11F_REV */:
        case 0x84FA /* GL_UNSIGNED_INT_24_8 */:
          return HEAPU32;
        case 0x1406 /* GL_FLOAT */:
          return HEAPF32;
        default:
          return null;
      }
    }
  
  function emscriptenWebGLGetShiftForType(type) {
      switch(type) {
        case 0x1400 /* GL_BYTE */:
        case 0x1401 /* GL_UNSIGNED_BYTE */:
          return 0;
        case 0x1402 /* GL_SHORT */:
        case 0x1403 /* GL_UNSIGNED_SHORT */:
        case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
        case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
        case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
        case 0x8D61 /* GL_HALF_FLOAT_OES */:
        case 0x140B /* GL_HALF_FLOAT */:
          return 1;
        case 0x1404 /* GL_INT */:
        case 0x1406 /* GL_FLOAT */:
        case 0x1405 /* GL_UNSIGNED_INT */:
        case 0x84FA /* GL_UNSIGNED_INT_24_8_WEBGL/GL_UNSIGNED_INT_24_8 */:
        case 0x8C3E /* GL_UNSIGNED_INT_5_9_9_9_REV */:
        case 0x8368 /* GL_UNSIGNED_INT_2_10_10_10_REV */:
        case 0x8C3B /* GL_UNSIGNED_INT_10F_11F_11F_REV */:
        case 0x84FA /* GL_UNSIGNED_INT_24_8 */:
          return 2;
        default:
          return 0;
      }
    }function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      if (GL.currentContext.supportsWebGL2EntryPoints) {
        // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        if (GLctx.currentPixelUnpackBufferBinding) {
          GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels);
        } else if (pixels != 0) {
          GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, emscriptenWebGLGetHeapForType(type), pixels >> emscriptenWebGLGetShiftForType(type));
        } else {
          GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, null);
        }
        return;
      }
  
      var pixelData = null;
      if (pixels) pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat);
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixelData);
    }

  function _glDisable(x0) { GLctx['disable'](x0) }

  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

   

  function _glGetProgramiv(program, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      if (program >= GL.counter) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        return;
      }
  
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        HEAP32[((p)>>2)]=ptable.maxUniformLength;
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        if (ptable.maxAttributeLength == -1) {
          var program = GL.programs[program];
          var numAttribs = GLctx.getProgramParameter(program, GLctx.ACTIVE_ATTRIBUTES);
          ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
          for (var i = 0; i < numAttribs; ++i) {
            var activeAttrib = GLctx.getActiveAttrib(program, i);
            ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxAttributeLength;
      } else if (pname == 0x8A35 /* GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */) {
        if (ptable.maxUniformBlockNameLength == -1) {
          var program = GL.programs[program];
          var numBlocks = GLctx.getProgramParameter(program, GLctx.ACTIVE_UNIFORM_BLOCKS);
          ptable.maxUniformBlockNameLength = 0;
          for (var i = 0; i < numBlocks; ++i) {
            var activeBlockName = GLctx.getActiveUniformBlockName(program, i);
            ptable.maxUniformBlockNameLength = Math.max(ptable.maxUniformBlockNameLength, activeBlockName.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxUniformBlockNameLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }


  function _glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _pthread_cond_signal() { return 0; }

  function _abort() {
      Module['abort']();
    }

  function _pthread_cond_destroy() { return 0; }

  function _pthread_mutex_destroy() {}

  function _glutKeyboardUpFunc(func) {
      GLUT.keyboardUpFunc = func;
    }

  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }

  function _glGetUniformLocation(program, name) {
      name = Pointer_stringify(name);
  
      var arrayOffset = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name.indexOf(']', name.length-1) !== -1) {
        var ls = name.lastIndexOf('[');
        var arrayIndex = name.slice(ls+1, -1);
        if (arrayIndex.length > 0) {
          arrayOffset = parseInt(arrayIndex);
          if (arrayOffset < 0) {
            return -1;
          }
        }
        name = name.slice(0, ls);
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        return -1;
      }
      var utable = ptable.uniforms;
      var uniformInfo = utable[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayOffset < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1]+arrayOffset;
      } else {
        return -1;
      }
    }

  var _llvm_cos_f32=Math_cos;

  function ___lock() {}

  function ___unlock() {}

  function _pthread_cond_wait() { return 0; }

  function _glutIdleFunc(func) {
      function callback() {
        if (GLUT.idleFunc) {
          Module['dynCall_v'](GLUT.idleFunc);
          Browser.safeSetTimeout(callback, 4); // HTML spec specifies a 4ms minimum delay on the main thread; workers might get more, but we standardize here
        }
      }
      if (!GLUT.idleFunc) {
        Browser.safeSetTimeout(callback, 0);
      }
      GLUT.idleFunc = func;
    }

  function _glEnable(x0) { GLctx['enable'](x0) }

  function _glUniform4fv(location, count, value) {
  
      if (GL.currentContext.supportsWebGL2EntryPoints) { // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        GLctx.uniform4fv(GL.uniforms[location], HEAPF32, value>>2, count*4);
        return;
      }
  
      var view;
      if (4*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[4*count-1];
        for (var i = 0; i < 4*count; i += 4) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniform4fv(GL.uniforms[location], view);
    }

  var _llvm_nacl_atomic_cmpxchg_i32=undefined;

  function _glutSpecialUpFunc(func) {
      GLUT.specialUpFunc = func;
    }

  function _glutDisplayFunc(func) {
      GLUT.displayFunc = func;
    }


  function _pthread_key_delete(key) {
      if (key in PTHREAD_SPECIFIC) {
        delete PTHREAD_SPECIFIC[key];
        return 0;
      }
      return ERRNO_CODES.EINVAL;
    }

  function _glGenBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx.createBuffer();
        if (!buffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((buffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.buffers);
        buffer.name = id;
        GL.buffers[id] = buffer;
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }

  function _glutInitDisplayMode(mode) {
      GLUT.initDisplayMode = mode;
    }

  function _glGetAttribLocation(program, name) {
      program = GL.programs[program];
      name = Pointer_stringify(name);
      return GLctx.getAttribLocation(program, name);
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  function _glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

   

  var _llvm_ctlz_i32=true;

  function _glViewport(x0, x1, x2, x3) { GLctx['viewport'](x0, x1, x2, x3) }


  
  
  function __emscripten_traverse_stack(args) {
      if (!args || !args.callee || !args.callee.name) {
        return [null, '', ''];
      }
  
      var funstr = args.callee.toString();
      var funcname = args.callee.name;
      var str = '(';
      var first = true;
      for(i in args) {
        var a = args[i];
        if (!first) {
          str += ", ";
        }
        first = false;
        if (typeof a === 'number' || typeof a === 'string') {
          str += a;
        } else {
          str += '(' + typeof a + ')';
        }
      }
      str += ')';
      var caller = args.callee.caller;
      args = caller ? caller.arguments : [];
      if (first)
        str = '';
      return [args, funcname, str];
    }function _emscripten_get_callstack_js(flags) {
      var callstack = jsStackTrace();
  
      // Find the symbols in the callstack that corresponds to the functions that report callstack information, and remove everyhing up to these from the output.
      var iThisFunc = callstack.lastIndexOf('_emscripten_log');
      var iThisFunc2 = callstack.lastIndexOf('_emscripten_get_callstack');
      var iNextLine = callstack.indexOf('\n', Math.max(iThisFunc, iThisFunc2))+1;
      callstack = callstack.slice(iNextLine);
  
      // If user requested to see the original source stack, but no source map information is available, just fall back to showing the JS stack.
      if (flags & 8/*EM_LOG_C_STACK*/ && typeof emscripten_source_map === 'undefined') {
        Runtime.warnOnce('Source map information is not available, emscripten_log with EM_LOG_C_STACK will be ignored. Build with "--pre-js $EMSCRIPTEN/src/emscripten-source-map.min.js" linker flag to add source map loading to code.');
        flags ^= 8/*EM_LOG_C_STACK*/;
        flags |= 16/*EM_LOG_JS_STACK*/;
      }
  
      var stack_args = null;
      if (flags & 128 /*EM_LOG_FUNC_PARAMS*/) {
        // To get the actual parameters to the functions, traverse the stack via the unfortunately deprecated 'arguments.callee' method, if it works:
        var stack_args = __emscripten_traverse_stack(arguments);
        while (stack_args[1].indexOf('_emscripten_') >= 0)
          stack_args = __emscripten_traverse_stack(stack_args[0]);
      }
      
      // Process all lines:
      lines = callstack.split('\n');
      callstack = '';
      var newFirefoxRe = new RegExp('\\s*(.*?)@(.*?):([0-9]+):([0-9]+)'); // New FF30 with column info: extract components of form '       Object._main@http://server.com:4324:12'
      var firefoxRe = new RegExp('\\s*(.*?)@(.*):(.*)(:(.*))?'); // Old FF without column info: extract components of form '       Object._main@http://server.com:4324'
      var chromeRe = new RegExp('\\s*at (.*?) \\\((.*):(.*):(.*)\\\)'); // Extract components of form '    at Object._main (http://server.com/file.html:4324:12)'
      
      for(l in lines) {
        var line = lines[l];
  
        var jsSymbolName = '';
        var file = '';
        var lineno = 0;
        var column = 0;
  
        var parts = chromeRe.exec(line);
        if (parts && parts.length == 5) {
          jsSymbolName = parts[1];
          file = parts[2];
          lineno = parts[3];
          column = parts[4];
        } else {
          parts = newFirefoxRe.exec(line);
          if (!parts) parts = firefoxRe.exec(line);
          if (parts && parts.length >= 4) {
            jsSymbolName = parts[1];
            file = parts[2];
            lineno = parts[3];
            column = parts[4]|0; // Old Firefox doesn't carry column information, but in new FF30, it is present. See https://bugzilla.mozilla.org/show_bug.cgi?id=762556
          } else {
            // Was not able to extract this line for demangling/sourcemapping purposes. Output it as-is.
            callstack += line + '\n';
            continue;
          }
        }
  
        // Try to demangle the symbol, but fall back to showing the original JS symbol name if not available.
        var cSymbolName = (flags & 32/*EM_LOG_DEMANGLE*/) ? demangle(jsSymbolName) : jsSymbolName;
        if (!cSymbolName) {
          cSymbolName = jsSymbolName;
        }
  
        var haveSourceMap = false;
  
        if (flags & 8/*EM_LOG_C_STACK*/) {
          var orig = emscripten_source_map.originalPositionFor({line: lineno, column: column});
          haveSourceMap = (orig && orig.source);
          if (haveSourceMap) {
            if (flags & 64/*EM_LOG_NO_PATHS*/) {
              orig.source = orig.source.substring(orig.source.replace(/\\/g, "/").lastIndexOf('/')+1);
            }
            callstack += '    at ' + cSymbolName + ' (' + orig.source + ':' + orig.line + ':' + orig.column + ')\n';
          }
        }
        if ((flags & 16/*EM_LOG_JS_STACK*/) || !haveSourceMap) {
          if (flags & 64/*EM_LOG_NO_PATHS*/) {
            file = file.substring(file.replace(/\\/g, "/").lastIndexOf('/')+1);
          }
          callstack += (haveSourceMap ? ('     = '+jsSymbolName) : ('    at '+cSymbolName)) + ' (' + file + ':' + lineno + ':' + column + ')\n';
        }
        
        // If we are still keeping track with the callstack by traversing via 'arguments.callee', print the function parameters as well.
        if (flags & 128 /*EM_LOG_FUNC_PARAMS*/ && stack_args[0]) {
          if (stack_args[1] == jsSymbolName && stack_args[2].length > 0) {
            callstack = callstack.replace(/\s+$/, '');
            callstack += ' with values: ' + stack_args[1] + stack_args[2] + '\n';
          }
          stack_args = __emscripten_traverse_stack(stack_args[0]);
        }
      }
      // Trim extra whitespace at the end of the output.
      callstack = callstack.replace(/\s+$/, '');
      return callstack;
    }function __Unwind_Backtrace(func, arg) {
      var trace = _emscripten_get_callstack_js();
      var parts = trace.split('\n');
      for (var i = 0; i < parts.length; i++) {
        var ret = Module['dynCall_iii'](func, 0, arg);
        if (ret !== 0) return;
      }
    }

  function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  function _pthread_condattr_setclock() { return 0; }

  function _glTexEnvi() { Runtime.warnOnce('glTexEnvi: TODO') }

  function _glBindAttribLocation(program, index, name) {
      name = Pointer_stringify(name);
      GLctx.bindAttribLocation(GL.programs[program], index, name);
    }

  function _pthread_rwlock_rdlock() { return 0; }

  function _glutGet(type) {
      switch (type) {
        case 100: /* GLUT_WINDOW_X */
          return 0; /* TODO */
        case 101: /* GLUT_WINDOW_Y */
          return 0; /* TODO */
        case 102: /* GLUT_WINDOW_WIDTH */
          return Module['canvas'].width;
        case 103: /* GLUT_WINDOW_HEIGHT */
          return Module['canvas'].height;
        case 200: /* GLUT_SCREEN_WIDTH */
          return Module['canvas'].width;
        case 201: /* GLUT_SCREEN_HEIGHT */
          return Module['canvas'].height;
        case 500: /* GLUT_INIT_WINDOW_X */
          return 0; /* TODO */
        case 501: /* GLUT_INIT_WINDOW_Y */
          return 0; /* TODO */
        case 502: /* GLUT_INIT_WINDOW_WIDTH */
          return GLUT.initWindowWidth;
        case 503: /* GLUT_INIT_WINDOW_HEIGHT */
          return GLUT.initWindowHeight;
        case 700: /* GLUT_ELAPSED_TIME */
          var now = Date.now();
          return now - GLUT.initTime;
  
        default:
          throw "glutGet(" + type + ") not implemented yet";
      }
    }

  function _glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }

   

  function ___syscall4(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // write
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.write(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _glUniformMatrix4fv(location, count, transpose, value) {
  
      if (GL.currentContext.supportsWebGL2EntryPoints) { // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, HEAPF32, value>>2, count*16);
        return;
      }
  
      var view;
      if (16*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[16*count-1];
        for (var i = 0; i < 16*count; i += 16) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
          view[i+9] = HEAPF32[(((value)+(4*i+36))>>2)];
          view[i+10] = HEAPF32[(((value)+(4*i+40))>>2)];
          view[i+11] = HEAPF32[(((value)+(4*i+44))>>2)];
          view[i+12] = HEAPF32[(((value)+(4*i+48))>>2)];
          view[i+13] = HEAPF32[(((value)+(4*i+52))>>2)];
          view[i+14] = HEAPF32[(((value)+(4*i+56))>>2)];
          view[i+15] = HEAPF32[(((value)+(4*i+60))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, view);
    }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
  
  
  var GLImmediate={MapTreeLib:null,spawnMapTreeLib:function () {
        /* A naive implementation of a map backed by an array, and accessed by
         * naive iteration along the array. (hashmap with only one bucket)
         */
        function CNaiveListMap() {
          var list = [];
  
          this.insert = function CNaiveListMap_insert(key, val) {
            if (this.contains(key|0)) return false;
            list.push([key, val]);
            return true;
          };
  
          var __contains_i;
          this.contains = function CNaiveListMap_contains(key) {
            for (__contains_i = 0; __contains_i < list.length; ++__contains_i) {
              if (list[__contains_i][0] === key) return true;
            }
            return false;
          };
  
          var __get_i;
          this.get = function CNaiveListMap_get(key) {
            for (__get_i = 0; __get_i < list.length; ++__get_i) {
              if (list[__get_i][0] === key) return list[__get_i][1];
            }
            return undefined;
          };
        };
  
        /* A tree of map nodes.
          Uses `KeyView`s to allow descending the tree without garbage.
          Example: {
            // Create our map object.
            var map = new ObjTreeMap();
  
            // Grab the static keyView for the map.
            var keyView = map.GetStaticKeyView();
  
            // Let's make a map for:
            // root: <undefined>
            //   1: <undefined>
            //     2: <undefined>
            //       5: "Three, sir!"
            //       3: "Three!"
  
            // Note how we can chain together `Reset` and `Next` to
            // easily descend based on multiple key fragments.
            keyView.Reset().Next(1).Next(2).Next(5).Set("Three, sir!");
            keyView.Reset().Next(1).Next(2).Next(3).Set("Three!");
          }
        */
        function CMapTree() {
          function CNLNode() {
            var map = new CNaiveListMap();
  
            this.child = function CNLNode_child(keyFrag) {
              if (!map.contains(keyFrag|0)) {
                map.insert(keyFrag|0, new CNLNode());
              }
              return map.get(keyFrag|0);
            };
  
            this.value = undefined;
            this.get = function CNLNode_get() {
              return this.value;
            };
  
            this.set = function CNLNode_set(val) {
              this.value = val;
            };
          }
  
          function CKeyView(root) {
            var cur;
  
            this.reset = function CKeyView_reset() {
              cur = root;
              return this;
            };
            this.reset();
  
            this.next = function CKeyView_next(keyFrag) {
              cur = cur.child(keyFrag);
              return this;
            };
  
            this.get = function CKeyView_get() {
              return cur.get();
            };
  
            this.set = function CKeyView_set(val) {
              cur.set(val);
            };
          };
  
          var root;
          var staticKeyView;
  
          this.createKeyView = function CNLNode_createKeyView() {
            return new CKeyView(root);
          }
  
          this.clear = function CNLNode_clear() {
            root = new CNLNode();
            staticKeyView = this.createKeyView();
          };
          this.clear();
  
          this.getStaticKeyView = function CNLNode_getStaticKeyView() {
            staticKeyView.reset();
            return staticKeyView;
          };
        };
  
        // Exports:
        return {
          create: function() {
            return new CMapTree();
          },
        };
      },TexEnvJIT:null,spawnTexEnvJIT:function () {
        // GL defs:
        var GL_TEXTURE0 = 0x84C0;
        var GL_TEXTURE_1D = 0x0DE0;
        var GL_TEXTURE_2D = 0x0DE1;
        var GL_TEXTURE_3D = 0x806f;
        var GL_TEXTURE_CUBE_MAP = 0x8513;
        var GL_TEXTURE_ENV = 0x2300;
        var GL_TEXTURE_ENV_MODE = 0x2200;
        var GL_TEXTURE_ENV_COLOR = 0x2201;
        var GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
        var GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
        var GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
        var GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
        var GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
        var GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
  
        var GL_SRC0_RGB = 0x8580;
        var GL_SRC1_RGB = 0x8581;
        var GL_SRC2_RGB = 0x8582;
  
        var GL_SRC0_ALPHA = 0x8588;
        var GL_SRC1_ALPHA = 0x8589;
        var GL_SRC2_ALPHA = 0x858A;
  
        var GL_OPERAND0_RGB = 0x8590;
        var GL_OPERAND1_RGB = 0x8591;
        var GL_OPERAND2_RGB = 0x8592;
  
        var GL_OPERAND0_ALPHA = 0x8598;
        var GL_OPERAND1_ALPHA = 0x8599;
        var GL_OPERAND2_ALPHA = 0x859A;
  
        var GL_COMBINE_RGB = 0x8571;
        var GL_COMBINE_ALPHA = 0x8572;
  
        var GL_RGB_SCALE = 0x8573;
        var GL_ALPHA_SCALE = 0x0D1C;
  
        // env.mode
        var GL_ADD      = 0x0104;
        var GL_BLEND    = 0x0BE2;
        var GL_REPLACE  = 0x1E01;
        var GL_MODULATE = 0x2100;
        var GL_DECAL    = 0x2101;
        var GL_COMBINE  = 0x8570;
  
        // env.color/alphaCombiner
        //var GL_ADD         = 0x0104;
        //var GL_REPLACE     = 0x1E01;
        //var GL_MODULATE    = 0x2100;
        var GL_SUBTRACT    = 0x84E7;
        var GL_INTERPOLATE = 0x8575;
  
        // env.color/alphaSrc
        var GL_TEXTURE       = 0x1702;
        var GL_CONSTANT      = 0x8576;
        var GL_PRIMARY_COLOR = 0x8577;
        var GL_PREVIOUS      = 0x8578;
  
        // env.color/alphaOp
        var GL_SRC_COLOR           = 0x0300;
        var GL_ONE_MINUS_SRC_COLOR = 0x0301;
        var GL_SRC_ALPHA           = 0x0302;
        var GL_ONE_MINUS_SRC_ALPHA = 0x0303;
  
        var GL_RGB  = 0x1907;
        var GL_RGBA = 0x1908;
  
        // Our defs:
        var TEXENVJIT_NAMESPACE_PREFIX = "tej_";
        // Not actually constant, as they can be changed between JIT passes:
        var TEX_UNIT_UNIFORM_PREFIX = "uTexUnit";
        var TEX_COORD_VARYING_PREFIX = "vTexCoord";
        var PRIM_COLOR_VARYING = "vPrimColor";
        var TEX_MATRIX_UNIFORM_PREFIX = "uTexMatrix";
  
        // Static vars:
        var s_texUnits = null; //[];
        var s_activeTexture = 0;
  
        var s_requiredTexUnitsForPass = [];
  
        // Static funcs:
        function abort(info) {
          assert(false, "[TexEnvJIT] ABORT: " + info);
        }
  
        function abort_noSupport(info) {
          abort("No support: " + info);
        }
  
        function abort_sanity(info) {
          abort("Sanity failure: " + info);
        }
  
        function genTexUnitSampleExpr(texUnitID) {
          var texUnit = s_texUnits[texUnitID];
          var texType = texUnit.getTexType();
  
          var func = null;
          switch (texType) {
            case GL_TEXTURE_1D:
              func = "texture2D";
              break;
            case GL_TEXTURE_2D:
              func = "texture2D";
              break;
            case GL_TEXTURE_3D:
              return abort_noSupport("No support for 3D textures.");
            case GL_TEXTURE_CUBE_MAP:
              func = "textureCube";
              break;
            default:
              return abort_sanity("Unknown texType: 0x" + texType.toString(16));
          }
  
          var texCoordExpr = TEX_COORD_VARYING_PREFIX + texUnitID;
          if (TEX_MATRIX_UNIFORM_PREFIX != null) {
            texCoordExpr = "(" + TEX_MATRIX_UNIFORM_PREFIX + texUnitID + " * " + texCoordExpr + ")";
          }
          return func + "(" + TEX_UNIT_UNIFORM_PREFIX + texUnitID + ", " + texCoordExpr + ".xy)";
        }
  
        function getTypeFromCombineOp(op) {
          switch (op) {
            case GL_SRC_COLOR:
            case GL_ONE_MINUS_SRC_COLOR:
              return "vec3";
            case GL_SRC_ALPHA:
            case GL_ONE_MINUS_SRC_ALPHA:
              return "float";
          }
  
          return abort_noSupport("Unsupported combiner op: 0x" + op.toString(16));
        }
  
        function getCurTexUnit() {
          return s_texUnits[s_activeTexture];
        }
  
        function genCombinerSourceExpr(texUnitID, constantExpr, previousVar,
                                       src, op)
        {
          var srcExpr = null;
          switch (src) {
            case GL_TEXTURE:
              srcExpr = genTexUnitSampleExpr(texUnitID);
              break;
            case GL_CONSTANT:
              srcExpr = constantExpr;
              break;
            case GL_PRIMARY_COLOR:
              srcExpr = PRIM_COLOR_VARYING;
              break;
            case GL_PREVIOUS:
              srcExpr = previousVar;
              break;
            default:
                return abort_noSupport("Unsupported combiner src: 0x" + src.toString(16));
          }
  
          var expr = null;
          switch (op) {
            case GL_SRC_COLOR:
              expr = srcExpr + ".rgb";
              break;
            case GL_ONE_MINUS_SRC_COLOR:
              expr = "(vec3(1.0) - " + srcExpr + ".rgb)";
              break;
            case GL_SRC_ALPHA:
              expr = srcExpr + ".a";
              break;
            case GL_ONE_MINUS_SRC_ALPHA:
              expr = "(1.0 - " + srcExpr + ".a)";
              break;
            default:
              return abort_noSupport("Unsupported combiner op: 0x" + op.toString(16));
          }
  
          return expr;
        }
  
        function valToFloatLiteral(val) {
          if (val == Math.round(val)) return val + '.0';
          return val;
        }
  
  
        // Classes:
        function CTexEnv() {
          this.mode = GL_MODULATE;
          this.colorCombiner = GL_MODULATE;
          this.alphaCombiner = GL_MODULATE;
          this.colorScale = 1;
          this.alphaScale = 1;
          this.envColor = [0, 0, 0, 0];
  
          this.colorSrc = [
            GL_TEXTURE,
            GL_PREVIOUS,
            GL_CONSTANT
          ];
          this.alphaSrc = [
            GL_TEXTURE,
            GL_PREVIOUS,
            GL_CONSTANT
          ];
          this.colorOp = [
            GL_SRC_COLOR,
            GL_SRC_COLOR,
            GL_SRC_ALPHA
          ];
          this.alphaOp = [
            GL_SRC_ALPHA,
            GL_SRC_ALPHA,
            GL_SRC_ALPHA
          ];
  
          // Map GLenums to small values to efficiently pack the enums to bits for tighter access.
          this.traverseKey = {
            // mode
            0x1E01 /* GL_REPLACE */: 0,
            0x2100 /* GL_MODULATE */: 1,
            0x0104 /* GL_ADD */: 2,
            0x0BE2 /* GL_BLEND */: 3,
            0x2101 /* GL_DECAL */: 4,
            0x8570 /* GL_COMBINE */: 5,
  
            // additional color and alpha combiners
            0x84E7 /* GL_SUBTRACT */: 3,
            0x8575 /* GL_INTERPOLATE */: 4,
  
            // color and alpha src
            0x1702 /* GL_TEXTURE */: 0,
            0x8576 /* GL_CONSTANT */: 1,
            0x8577 /* GL_PRIMARY_COLOR */: 2,
            0x8578 /* GL_PREVIOUS */: 3,
  
            // color and alpha op
            0x0300 /* GL_SRC_COLOR */: 0,
            0x0301 /* GL_ONE_MINUS_SRC_COLOR */: 1,
            0x0302 /* GL_SRC_ALPHA */: 2,
            0x0300 /* GL_ONE_MINUS_SRC_ALPHA */: 3
          };
  
          // The tuple (key0,key1,key2) uniquely identifies the state of the variables in CTexEnv.
          // -1 on key0 denotes 'the whole cached key is dirty'
          this.key0 = -1;
          this.key1 = 0;
          this.key2 = 0;
  
          this.computeKey0 = function() {
            var k = this.traverseKey;
            var key = k[this.mode] * 1638400; // 6 distinct values.
            key += k[this.colorCombiner] * 327680; // 5 distinct values.
            key += k[this.alphaCombiner] * 65536; // 5 distinct values.
            // The above three fields have 6*5*5=150 distinct values -> 8 bits.
            key += (this.colorScale-1) * 16384; // 10 bits used.
            key += (this.alphaScale-1) * 4096; // 12 bits used.
            key += k[this.colorSrc[0]] * 1024; // 14
            key += k[this.colorSrc[1]] * 256; // 16
            key += k[this.colorSrc[2]] * 64; // 18
            key += k[this.alphaSrc[0]] * 16; // 20
            key += k[this.alphaSrc[1]] * 4; // 22
            key += k[this.alphaSrc[2]]; // 24 bits used total.
            return key;
          }
          this.computeKey1 = function() {
            var k = this.traverseKey;
            key = k[this.colorOp[0]] * 4096;
            key += k[this.colorOp[1]] * 1024;             
            key += k[this.colorOp[2]] * 256;
            key += k[this.alphaOp[0]] * 16;
            key += k[this.alphaOp[1]] * 4;
            key += k[this.alphaOp[2]];
            return key;            
          }
          // TODO: remove this. The color should not be part of the key!
          this.computeKey2 = function() {
            return this.envColor[0] * 16777216 + this.envColor[1] * 65536 + this.envColor[2] * 256 + 1 + this.envColor[3];
          }
          this.recomputeKey = function() {
            this.key0 = this.computeKey0();
            this.key1 = this.computeKey1();
            this.key2 = this.computeKey2();
          }
          this.invalidateKey = function() {
            this.key0 = -1; // The key of this texture unit must be recomputed when rendering the next time.
            GLImmediate.currentRenderer = null; // The currently used renderer must be re-evaluated at next render.
          }
        }
  
        function CTexUnit() {
          this.env = new CTexEnv();
          this.enabled_tex1D   = false;
          this.enabled_tex2D   = false;
          this.enabled_tex3D   = false;
          this.enabled_texCube = false;
          this.texTypesEnabled = 0; // A bitfield combination of the four flags above, used for fast access to operations.
  
          this.traverseState = function CTexUnit_traverseState(keyView) {
            if (this.texTypesEnabled) {
              if (this.env.key0 == -1) {
                this.env.recomputeKey();
              }
              keyView.next(this.texTypesEnabled | (this.env.key0 << 4));
              keyView.next(this.env.key1);
              keyView.next(this.env.key2);
            } else {
              // For correctness, must traverse a zero value, theoretically a subsequent integer key could collide with this value otherwise.
              keyView.next(0);
            }
          };
        };
  
        // Class impls:
        CTexUnit.prototype.enabled = function CTexUnit_enabled() {
          return this.texTypesEnabled;
        }
  
        CTexUnit.prototype.genPassLines = function CTexUnit_genPassLines(passOutputVar, passInputVar, texUnitID) {
          if (!this.enabled()) {
            return ["vec4 " + passOutputVar + " = " + passInputVar + ";"];
          }
          var lines = this.env.genPassLines(passOutputVar, passInputVar, texUnitID).join('\n');
  
          var texLoadLines = '';
          var texLoadRegex = /(texture.*?\(.*?\))/g;
          var loadCounter = 0;
          var load;
  
          // As an optimization, merge duplicate identical texture loads to one var.
          while(load = texLoadRegex.exec(lines)) {
            var texLoadExpr = load[1];
            var secondOccurrence = lines.slice(load.index+1).indexOf(texLoadExpr);
            if (secondOccurrence != -1) { // And also has a second occurrence of same load expression..
              // Create new var to store the common load.
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var texLoadVar = prefix + 'texload' + loadCounter++;
              var texLoadLine = 'vec4 ' + texLoadVar + ' = ' + texLoadExpr + ';\n';
              texLoadLines += texLoadLine + '\n'; // Store the generated texture load statements in a temp string to not confuse regex search in progress.
              lines = lines.split(texLoadExpr).join(texLoadVar);
              // Reset regex search, since we modified the string.
              texLoadRegex = /(texture.*\(.*\))/g;
            }
          }
          return [texLoadLines + lines];
        }
  
        CTexUnit.prototype.getTexType = function CTexUnit_getTexType() {
          if (this.enabled_texCube) {
            return GL_TEXTURE_CUBE_MAP;
          } else if (this.enabled_tex3D) {
            return GL_TEXTURE_3D;
          } else if (this.enabled_tex2D) {
            return GL_TEXTURE_2D;
          } else if (this.enabled_tex1D) {
            return GL_TEXTURE_1D;
          }
          return 0;
        }
  
        CTexEnv.prototype.genPassLines = function CTexEnv_genPassLines(passOutputVar, passInputVar, texUnitID) {
          switch (this.mode) {
            case GL_REPLACE: {
              /* RGB:
               * Cv = Cs
               * Av = Ap // Note how this is different, and that we'll
               *            need to track the bound texture internalFormat
               *            to get this right.
               *
               * RGBA:
               * Cv = Cs
               * Av = As
               */
              return [
                "vec4 " + passOutputVar + " = " + genTexUnitSampleExpr(texUnitID) + ";",
              ];
            }
            case GL_ADD: {
              /* RGBA:
               * Cv = Cp + Cs
               * Av = ApAs
               */
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var texVar = prefix + "tex";
              var colorVar = prefix + "color";
              var alphaVar = prefix + "alpha";
  
              return [
                "vec4 " + texVar + " = " + genTexUnitSampleExpr(texUnitID) + ";",
                "vec3 " + colorVar + " = " + passInputVar + ".rgb + " + texVar + ".rgb;",
                "float " + alphaVar + " = " + passInputVar + ".a * " + texVar + ".a;",
                "vec4 " + passOutputVar + " = vec4(" + colorVar + ", " + alphaVar + ");",
              ];
            }
            case GL_MODULATE: {
              /* RGBA:
               * Cv = CpCs
               * Av = ApAs
               */
              var line = [
                "vec4 " + passOutputVar,
                " = ",
                  passInputVar,
                  " * ",
                  genTexUnitSampleExpr(texUnitID),
                ";",
              ];
              return [line.join("")];
            }
            case GL_DECAL: {
              /* RGBA:
               * Cv = Cp(1 - As) + CsAs
               * Av = Ap
               */
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var texVar = prefix + "tex";
              var colorVar = prefix + "color";
              var alphaVar = prefix + "alpha";
  
              return [
                "vec4 " + texVar + " = " + genTexUnitSampleExpr(texUnitID) + ";",
                [
                  "vec3 " + colorVar + " = ",
                    passInputVar + ".rgb * (1.0 - " + texVar + ".a)",
                      " + ",
                    texVar + ".rgb * " + texVar + ".a",
                  ";"
                ].join(""),
                "float " + alphaVar + " = " + passInputVar + ".a;",
                "vec4 " + passOutputVar + " = vec4(" + colorVar + ", " + alphaVar + ");",
              ];
            }
            case GL_BLEND: {
              /* RGBA:
               * Cv = Cp(1 - Cs) + CcCs
               * Av = As
               */
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var texVar = prefix + "tex";
              var colorVar = prefix + "color";
              var alphaVar = prefix + "alpha";
  
              return [
                "vec4 " + texVar + " = " + genTexUnitSampleExpr(texUnitID) + ";",
                [
                  "vec3 " + colorVar + " = ",
                    passInputVar + ".rgb * (1.0 - " + texVar + ".rgb)",
                      " + ",
                    PRIM_COLOR_VARYING + ".rgb * " + texVar + ".rgb",
                  ";"
                ].join(""),
                "float " + alphaVar + " = " + texVar + ".a;",
                "vec4 " + passOutputVar + " = vec4(" + colorVar + ", " + alphaVar + ");",
              ];
            }
            case GL_COMBINE: {
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var colorVar = prefix + "color";
              var alphaVar = prefix + "alpha";
              var colorLines = this.genCombinerLines(true, colorVar,
                                                     passInputVar, texUnitID,
                                                     this.colorCombiner, this.colorSrc, this.colorOp);
              var alphaLines = this.genCombinerLines(false, alphaVar,
                                                     passInputVar, texUnitID,
                                                     this.alphaCombiner, this.alphaSrc, this.alphaOp);
  
              // Generate scale, but avoid generating an identity op that multiplies by one.
              var scaledColor = (this.colorScale == 1) ? colorVar : (colorVar + " * " + valToFloatLiteral(this.colorScale));
              var scaledAlpha = (this.alphaScale == 1) ? alphaVar : (alphaVar + " * " + valToFloatLiteral(this.alphaScale));
  
              var line = [
                "vec4 " + passOutputVar,
                " = ",
                  "vec4(",
                      scaledColor,
                      ", ",
                      scaledAlpha,
                  ")",
                ";",
              ].join("");
              return [].concat(colorLines, alphaLines, [line]);
            }
          }
  
          return abort_noSupport("Unsupported TexEnv mode: 0x" + this.mode.toString(16));
        }
  
        CTexEnv.prototype.genCombinerLines = function CTexEnv_getCombinerLines(isColor, outputVar,
                                                                               passInputVar, texUnitID,
                                                                               combiner, srcArr, opArr)
        {
          var argsNeeded = null;
          switch (combiner) {
            case GL_REPLACE:
              argsNeeded = 1;
              break;
  
            case GL_MODULATE:
            case GL_ADD:
            case GL_SUBTRACT:
              argsNeeded = 2;
              break;
  
            case GL_INTERPOLATE:
              argsNeeded = 3;
              break;
  
            default:
              return abort_noSupport("Unsupported combiner: 0x" + combiner.toString(16));
          }
  
          var constantExpr = [
            "vec4(",
              valToFloatLiteral(this.envColor[0]),
              ", ",
              valToFloatLiteral(this.envColor[1]),
              ", ",
              valToFloatLiteral(this.envColor[2]),
              ", ",
              valToFloatLiteral(this.envColor[3]),
            ")",
          ].join("");
          var src0Expr = (argsNeeded >= 1) ? genCombinerSourceExpr(texUnitID, constantExpr, passInputVar, srcArr[0], opArr[0])
                                           : null;
          var src1Expr = (argsNeeded >= 2) ? genCombinerSourceExpr(texUnitID, constantExpr, passInputVar, srcArr[1], opArr[1])
                                           : null;
          var src2Expr = (argsNeeded >= 3) ? genCombinerSourceExpr(texUnitID, constantExpr, passInputVar, srcArr[2], opArr[2])
                                           : null;
  
          var outputType = isColor ? "vec3" : "float";
          var lines = null;
          switch (combiner) {
            case GL_REPLACE: {
              var line = [
                outputType + " " + outputVar,
                " = ",
                  src0Expr,
                ";",
              ];
              lines = [line.join("")];
              break;
            }
            case GL_MODULATE: {
              var line = [
                outputType + " " + outputVar + " = ",
                  src0Expr + " * " + src1Expr,
                ";",
              ];
              lines = [line.join("")];
              break;
            }
            case GL_ADD: {
              var line = [
                outputType + " " + outputVar + " = ",
                  src0Expr + " + " + src1Expr,
                ";",
              ];
              lines = [line.join("")];
              break;
            }
            case GL_SUBTRACT: {
              var line = [
                outputType + " " + outputVar + " = ",
                  src0Expr + " - " + src1Expr,
                ";",
              ];
              lines = [line.join("")];
              break;
            }
            case GL_INTERPOLATE: {
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var arg2Var = prefix + "colorSrc2";
              var arg2Line = getTypeFromCombineOp(this.colorOp[2]) + " " + arg2Var + " = " + src2Expr + ";";
  
              var line = [
                outputType + " " + outputVar,
                " = ",
                  src0Expr + " * " + arg2Var,
                  " + ",
                  src1Expr + " * (1.0 - " + arg2Var + ")",
                ";",
              ];
              lines = [
                arg2Line,
                line.join(""),
              ];
              break;
            }
  
            default:
              return abort_sanity("Unmatched TexEnv.colorCombiner?");
          }
  
          return lines;
        }
  
        return {
          // Exports:
          init: function(gl, specifiedMaxTextureImageUnits) {
            var maxTexUnits = 0;
            if (specifiedMaxTextureImageUnits) {
              maxTexUnits = specifiedMaxTextureImageUnits;
            } else if (gl) {
              maxTexUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
            }
            assert(maxTexUnits > 0);
            s_texUnits = [];
            for (var i = 0; i < maxTexUnits; i++) {
              s_texUnits.push(new CTexUnit());
            }
          },
  
          setGLSLVars: function(uTexUnitPrefix, vTexCoordPrefix, vPrimColor, uTexMatrixPrefix) {
            TEX_UNIT_UNIFORM_PREFIX   = uTexUnitPrefix;
            TEX_COORD_VARYING_PREFIX  = vTexCoordPrefix;
            PRIM_COLOR_VARYING        = vPrimColor;
            TEX_MATRIX_UNIFORM_PREFIX = uTexMatrixPrefix;
          },
  
          genAllPassLines: function(resultDest, indentSize) {
            indentSize = indentSize || 0;
  
            s_requiredTexUnitsForPass.length = 0; // Clear the list.
            var lines = [];
            var lastPassVar = PRIM_COLOR_VARYING;
            for (var i = 0; i < s_texUnits.length; i++) {
              if (!s_texUnits[i].enabled()) continue;
  
              s_requiredTexUnitsForPass.push(i);
  
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + i + "_";
              var passOutputVar = prefix + "result";
  
              var newLines = s_texUnits[i].genPassLines(passOutputVar, lastPassVar, i);
              lines = lines.concat(newLines, [""]);
  
              lastPassVar = passOutputVar;
            }
            lines.push(resultDest + " = " + lastPassVar + ";");
  
            var indent = "";
            for (var i = 0; i < indentSize; i++) indent += " ";
  
            var output = indent + lines.join("\n" + indent);
  
            return output;
          },
  
          getUsedTexUnitList: function() {
            return s_requiredTexUnitsForPass;
          },
  
          traverseState: function(keyView) {
            for (var i = 0; i < s_texUnits.length; i++) {
              s_texUnits[i].traverseState(keyView);
            }
          },
  
          getTexUnitType: function(texUnitID) {
            assert(texUnitID >= 0 &&
                   texUnitID < s_texUnits.length);
            return s_texUnits[texUnitID].getTexType();
          },
  
          // Hooks:
          hook_activeTexture: function(texture) {
            s_activeTexture = texture - GL_TEXTURE0;
          },
  
          hook_enable: function(cap) {
            var cur = getCurTexUnit();
            switch (cap) {
              case GL_TEXTURE_1D:
                if (!cur.enabled_tex1D) {
                  GLImmediate.currentRenderer = null; // Renderer state changed, and must be recreated or looked up again.
                  cur.enabled_tex1D = true;
                  cur.texTypesEnabled |= 1;
                }
                break;
              case GL_TEXTURE_2D:
                if (!cur.enabled_tex2D) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_tex2D = true;
                  cur.texTypesEnabled |= 2;
                }
                break;
              case GL_TEXTURE_3D:
                if (!cur.enabled_tex3D) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_tex3D = true;
                  cur.texTypesEnabled |= 4;
                }
                break;
              case GL_TEXTURE_CUBE_MAP:
                if (!cur.enabled_texCube) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_texCube = true;
                  cur.texTypesEnabled |= 8;
                }
                break;
            }
          },
  
          hook_disable: function(cap) {
            var cur = getCurTexUnit();
            switch (cap) {
              case GL_TEXTURE_1D:
                if (cur.enabled_tex1D) {
                  GLImmediate.currentRenderer = null; // Renderer state changed, and must be recreated or looked up again.
                  cur.enabled_tex1D = false;
                  cur.texTypesEnabled &= ~1;
                }
                break;
              case GL_TEXTURE_2D:
                if (cur.enabled_tex2D) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_tex2D = false;
                  cur.texTypesEnabled &= ~2;
                }
                break;
              case GL_TEXTURE_3D:
                if (cur.enabled_tex3D) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_tex3D = false;
                  cur.texTypesEnabled &= ~4;
                }
                break;
              case GL_TEXTURE_CUBE_MAP:
                if (cur.enabled_texCube) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_texCube = false;
                  cur.texTypesEnabled &= ~8;
                }
                break;
            }
          },
  
          hook_texEnvf: function(target, pname, param) {
            if (target != GL_TEXTURE_ENV)
              return;
  
            var env = getCurTexUnit().env;
            switch (pname) {
              case GL_RGB_SCALE:
                if (env.colorScale != param) {
                  env.invalidateKey(); // We changed FFP emulation renderer state.
                  env.colorScale = param;
                }
                break;
              case GL_ALPHA_SCALE:
                if (env.alphaScale != param) {
                  env.invalidateKey();
                  env.alphaScale = param;
                }
                break;
  
              default:
                Module.printErr('WARNING: Unhandled `pname` in call to `glTexEnvf`.');
            }
          },
  
          hook_texEnvi: function(target, pname, param) {
            if (target != GL_TEXTURE_ENV)
              return;
  
            var env = getCurTexUnit().env;
            switch (pname) {
              case GL_TEXTURE_ENV_MODE:
                if (env.mode != param) {
                  env.invalidateKey(); // We changed FFP emulation renderer state.
                  env.mode = param;
                }
                break;
  
              case GL_COMBINE_RGB:
                if (env.colorCombiner != param) {
                  env.invalidateKey();
                  env.colorCombiner = param;
                }
                break;
              case GL_COMBINE_ALPHA:
                if (env.alphaCombiner != param) {
                  env.invalidateKey();
                  env.alphaCombiner = param;
                }
                break;
  
              case GL_SRC0_RGB:
                if (env.colorSrc[0] != param) {
                  env.invalidateKey();
                  env.colorSrc[0] = param;
                }
                break;
              case GL_SRC1_RGB:
                if (env.colorSrc[1] != param) {
                  env.invalidateKey();
                  env.colorSrc[1] = param;
                }
                break;
              case GL_SRC2_RGB:
                if (env.colorSrc[2] != param) {
                  env.invalidateKey();
                  env.colorSrc[2] = param;
                }
                break;
  
              case GL_SRC0_ALPHA:
                if (env.alphaSrc[0] != param) {
                  env.invalidateKey();
                  env.alphaSrc[0] = param;
                }
                break;
              case GL_SRC1_ALPHA:
                if (env.alphaSrc[1] != param) {
                  env.invalidateKey();
                  env.alphaSrc[1] = param;
                }
                break;
              case GL_SRC2_ALPHA:
                if (env.alphaSrc[2] != param) {
                  env.invalidateKey();
                  env.alphaSrc[2] = param;
                }
                break;
  
              case GL_OPERAND0_RGB:
                if (env.colorOp[0] != param) {
                  env.invalidateKey();
                  env.colorOp[0] = param;
                }
                break;
              case GL_OPERAND1_RGB:
                if (env.colorOp[1] != param) {
                  env.invalidateKey();
                  env.colorOp[1] = param;
                }
                break;
              case GL_OPERAND2_RGB:
                if (env.colorOp[2] != param) {
                  env.invalidateKey();
                  env.colorOp[2] = param;
                }
                break;
  
              case GL_OPERAND0_ALPHA:
                if (env.alphaOp[0] != param) {
                  env.invalidateKey();
                  env.alphaOp[0] = param;
                }
                break;
              case GL_OPERAND1_ALPHA:
                if (env.alphaOp[1] != param) {
                  env.invalidateKey();
                  env.alphaOp[1] = param;
                }
                break;
              case GL_OPERAND2_ALPHA:
                if (env.alphaOp[2] != param) {
                  env.invalidateKey();
                  env.alphaOp[2] = param;
                }
                break;
  
              case GL_RGB_SCALE:
                if (env.colorScale != param) {
                  env.invalidateKey();
                  env.colorScale = param;
                }
                break;
              case GL_ALPHA_SCALE:
                if (env.alphaScale != param) {
                  env.invalidateKey();
                  env.alphaScale = param;
                }
                break;
  
              default:
                Module.printErr('WARNING: Unhandled `pname` in call to `glTexEnvi`.');
            }
          },
  
          hook_texEnvfv: function(target, pname, params) {
            if (target != GL_TEXTURE_ENV) return;
  
            var env = getCurTexUnit().env;
            switch (pname) {
              case GL_TEXTURE_ENV_COLOR: {
                for (var i = 0; i < 4; i++) {
                  var param = HEAPF32[(((params)+(i*4))>>2)];
                  if (env.envColor[i] != param) {
                    env.invalidateKey(); // We changed FFP emulation renderer state.
                    env.envColor[i] = param;
                  }
                }
                break
              }
              default:
                Module.printErr('WARNING: Unhandled `pname` in call to `glTexEnvfv`.');
            }
          },
  
          hook_getTexEnviv: function(target, pname, param) {
            if (target != GL_TEXTURE_ENV)
              return;
  
            var env = getCurTexUnit().env;
            switch (pname) {
              case GL_TEXTURE_ENV_MODE:
                HEAP32[((param)>>2)]=env.mode;
                return;
  
              case GL_TEXTURE_ENV_COLOR:
                HEAP32[((param)>>2)]=Math.max(Math.min(env.envColor[0]*255, 255, -255));
                HEAP32[(((param)+(1))>>2)]=Math.max(Math.min(env.envColor[1]*255, 255, -255));
                HEAP32[(((param)+(2))>>2)]=Math.max(Math.min(env.envColor[2]*255, 255, -255));
                HEAP32[(((param)+(3))>>2)]=Math.max(Math.min(env.envColor[3]*255, 255, -255));
                return;
  
              case GL_COMBINE_RGB:
                HEAP32[((param)>>2)]=env.colorCombiner;
                return;
  
              case GL_COMBINE_ALPHA:
                HEAP32[((param)>>2)]=env.alphaCombiner;
                return;
  
              case GL_SRC0_RGB:
                HEAP32[((param)>>2)]=env.colorSrc[0];
                return;
  
              case GL_SRC1_RGB:
                HEAP32[((param)>>2)]=env.colorSrc[1];
                return;
  
              case GL_SRC2_RGB:
                HEAP32[((param)>>2)]=env.colorSrc[2];
                return;
  
              case GL_SRC0_ALPHA:
                HEAP32[((param)>>2)]=env.alphaSrc[0];
                return;
  
              case GL_SRC1_ALPHA:
                HEAP32[((param)>>2)]=env.alphaSrc[1];
                return;
  
              case GL_SRC2_ALPHA:
                HEAP32[((param)>>2)]=env.alphaSrc[2];
                return;
  
              case GL_OPERAND0_RGB:
                HEAP32[((param)>>2)]=env.colorOp[0];
                return;
  
              case GL_OPERAND1_RGB:
                HEAP32[((param)>>2)]=env.colorOp[1];
                return;
  
              case GL_OPERAND2_RGB:
                HEAP32[((param)>>2)]=env.colorOp[2];
                return;
  
              case GL_OPERAND0_ALPHA:
                HEAP32[((param)>>2)]=env.alphaOp[0];
                return;
  
              case GL_OPERAND1_ALPHA:
                HEAP32[((param)>>2)]=env.alphaOp[1];
                return;
  
              case GL_OPERAND2_ALPHA:
                HEAP32[((param)>>2)]=env.alphaOp[2];
                return;
  
              case GL_RGB_SCALE:
                HEAP32[((param)>>2)]=env.colorScale;
                return;
  
              case GL_ALPHA_SCALE:
                HEAP32[((param)>>2)]=env.alphaScale;
                return;
  
              default:
                Module.printErr('WARNING: Unhandled `pname` in call to `glGetTexEnvi`.');
            }
          },
  
          hook_getTexEnvfv: function(target, pname, param) {
            if (target != GL_TEXTURE_ENV)
              return;
  
            var env = getCurTexUnit().env;
            switch (pname) {
              case GL_TEXTURE_ENV_COLOR:
                HEAPF32[((param)>>2)]=env.envColor[0];
                HEAPF32[(((param)+(4))>>2)]=env.envColor[1];
                HEAPF32[(((param)+(8))>>2)]=env.envColor[2];
                HEAPF32[(((param)+(12))>>2)]=env.envColor[3];
                return;
            }
          }
        };
      },vertexData:null,vertexDataU8:null,tempData:null,indexData:null,vertexCounter:0,mode:-1,rendererCache:null,rendererComponents:[],rendererComponentPointer:0,lastRenderer:null,lastArrayBuffer:null,lastProgram:null,lastStride:-1,matrix:[],matrixStack:[],currentMatrix:0,tempMatrix:null,matricesModified:false,useTextureMatrix:false,VERTEX:0,NORMAL:1,COLOR:2,TEXTURE0:3,NUM_ATTRIBUTES:-1,MAX_TEXTURES:-1,totalEnabledClientAttributes:0,enabledClientAttributes:[0,0],clientAttributes:[],liveClientAttributes:[],currentRenderer:null,modifiedClientAttributes:false,clientActiveTexture:0,clientColor:null,usedTexUnitList:[],fixedFunctionProgram:null,setClientAttribute:function setClientAttribute(name, size, type, stride, pointer) {
        var attrib = GLImmediate.clientAttributes[name];
        if (!attrib) {
          for (var i = 0; i <= name; i++) { // keep flat
            if (!GLImmediate.clientAttributes[i]) {
              GLImmediate.clientAttributes[i] = {
                name: name,
                size: size,
                type: type,
                stride: stride,
                pointer: pointer,
                offset: 0
              };
            }
          }
        } else {
          attrib.name = name;
          attrib.size = size;
          attrib.type = type;
          attrib.stride = stride;
          attrib.pointer = pointer;
          attrib.offset = 0;
        }
        GLImmediate.modifiedClientAttributes = true;
      },addRendererComponent:function addRendererComponent(name, size, type) {
        if (!GLImmediate.rendererComponents[name]) {
          GLImmediate.rendererComponents[name] = 1;
          if (GLImmediate.enabledClientAttributes[name]) {
            console.log("Warning: glTexCoord used after EnableClientState for TEXTURE_COORD_ARRAY for TEXTURE0. Disabling TEXTURE_COORD_ARRAY...");
          }
          GLImmediate.enabledClientAttributes[name] = true;
          GLImmediate.setClientAttribute(name, size, type, 0, GLImmediate.rendererComponentPointer);
          GLImmediate.rendererComponentPointer += size * GL.byteSizeByType[type - GL.byteSizeByTypeRoot];
        } else {
          GLImmediate.rendererComponents[name]++;
        }
      },disableBeginEndClientAttributes:function disableBeginEndClientAttributes() {
        for (var i = 0; i < GLImmediate.NUM_ATTRIBUTES; i++) {
          if (GLImmediate.rendererComponents[i]) GLImmediate.enabledClientAttributes[i] = false;
        }
      },getRenderer:function getRenderer() {
        // If no FFP state has changed that would have forced to re-evaluate which FFP emulation shader to use,
        // we have the currently used renderer in cache, and can immediately return that.
        if (GLImmediate.currentRenderer) {
          return GLImmediate.currentRenderer;
        }
        // return a renderer object given the liveClientAttributes
        // we maintain a cache of renderers, optimized to not generate garbage
        var attributes = GLImmediate.liveClientAttributes;
        var cacheMap = GLImmediate.rendererCache;
        var keyView = cacheMap.getStaticKeyView().reset();
  
        // By attrib state:
        var enabledAttributesKey = 0;
        for (var i = 0; i < attributes.length; i++) {
          enabledAttributesKey |= 1 << attributes[i].name;
        }
  
        // By fog state:
        var fogParam = 0;
        if (GLEmulation.fogEnabled) {
          switch (GLEmulation.fogMode) {
            case 0x0801: // GL_EXP2
              fogParam = 1;
              break;
            case 0x2601: // GL_LINEAR
              fogParam = 2;
              break;
            default: // default to GL_EXP
              fogParam = 3;
              break;
          }
        }
        keyView.next((enabledAttributesKey << 2) | fogParam);
  
        // By cur program:
        keyView.next(GL.currProgram);
        if (!GL.currProgram) {
          GLImmediate.TexEnvJIT.traverseState(keyView);
        }
  
        // If we don't already have it, create it.
        var renderer = keyView.get();
        if (!renderer) {
          renderer = GLImmediate.createRenderer();
          GLImmediate.currentRenderer = renderer;
          keyView.set(renderer);
          return renderer;
        }
        GLImmediate.currentRenderer = renderer; // Cache the currently used renderer, so later lookups without state changes can get this fast.
        return renderer;
      },createRenderer:function createRenderer(renderer) {
        var useCurrProgram = !!GL.currProgram;
        var hasTextures = false;
        for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
          var texAttribName = GLImmediate.TEXTURE0 + i;
          if (!GLImmediate.enabledClientAttributes[texAttribName])
            continue;
  
          if (!useCurrProgram) {
            if (GLImmediate.TexEnvJIT.getTexUnitType(i) == 0) {
               Runtime.warnOnce("GL_TEXTURE" + i + " coords are supplied, but that texture unit is disabled in the fixed-function pipeline.");
            }
          }
  
          hasTextures = true;
        }
  
        var ret = {
          init: function init() {
            // For fixed-function shader generation.
            var uTexUnitPrefix = 'u_texUnit';
            var aTexCoordPrefix = 'a_texCoord';
            var vTexCoordPrefix = 'v_texCoord';
            var vPrimColor = 'v_color';
            var uTexMatrixPrefix = GLImmediate.useTextureMatrix ? 'u_textureMatrix' : null;
  
            if (useCurrProgram) {
              if (GL.shaderInfos[GL.programShaders[GL.currProgram][0]].type == GLctx.VERTEX_SHADER) {
                this.vertexShader = GL.shaders[GL.programShaders[GL.currProgram][0]];
                this.fragmentShader = GL.shaders[GL.programShaders[GL.currProgram][1]];
              } else {
                this.vertexShader = GL.shaders[GL.programShaders[GL.currProgram][1]];
                this.fragmentShader = GL.shaders[GL.programShaders[GL.currProgram][0]];
              }
              this.program = GL.programs[GL.currProgram];
              this.usedTexUnitList = [];
            } else {
              // IMPORTANT NOTE: If you parameterize the shader source based on any runtime values
              // in order to create the least expensive shader possible based on the features being
              // used, you should also update the code in the beginning of getRenderer to make sure
              // that you cache the renderer based on the said parameters.
              if (GLEmulation.fogEnabled) {
                switch (GLEmulation.fogMode) {
                  case 0x0801: // GL_EXP2
                    // fog = exp(-(gl_Fog.density * gl_FogFragCoord)^2)
                    var fogFormula = '  float fog = exp(-u_fogDensity * u_fogDensity * ecDistance * ecDistance); \n';
                    break;
                  case 0x2601: // GL_LINEAR
                    // fog = (gl_Fog.end - gl_FogFragCoord) * gl_fog.scale
                    var fogFormula = '  float fog = (u_fogEnd - ecDistance) * u_fogScale; \n';
                    break;
                  default: // default to GL_EXP
                    // fog = exp(-gl_Fog.density * gl_FogFragCoord)
                    var fogFormula = '  float fog = exp(-u_fogDensity * ecDistance); \n';
                    break;
                }
              }
  
              GLImmediate.TexEnvJIT.setGLSLVars(uTexUnitPrefix, vTexCoordPrefix, vPrimColor, uTexMatrixPrefix);
              var fsTexEnvPass = GLImmediate.TexEnvJIT.genAllPassLines('gl_FragColor', 2);
  
              var texUnitAttribList = '';
              var texUnitVaryingList = '';
              var texUnitUniformList = '';
              var vsTexCoordInits = '';
              this.usedTexUnitList = GLImmediate.TexEnvJIT.getUsedTexUnitList();
              for (var i = 0; i < this.usedTexUnitList.length; i++) {
                var texUnit = this.usedTexUnitList[i];
                texUnitAttribList += 'attribute vec4 ' + aTexCoordPrefix + texUnit + ';\n';
                texUnitVaryingList += 'varying vec4 ' + vTexCoordPrefix + texUnit + ';\n';
                texUnitUniformList += 'uniform sampler2D ' + uTexUnitPrefix + texUnit + ';\n';
                vsTexCoordInits += '  ' + vTexCoordPrefix + texUnit + ' = ' + aTexCoordPrefix + texUnit + ';\n';
  
                if (GLImmediate.useTextureMatrix) {
                  texUnitUniformList += 'uniform mat4 ' + uTexMatrixPrefix + texUnit + ';\n';
                }
              }
  
              var vsFogVaryingInit = null;
              if (GLEmulation.fogEnabled) {
                vsFogVaryingInit = '  v_fogFragCoord = abs(ecPosition.z);\n';
              }
  
              var vsSource = [
                'attribute vec4 a_position;',
                'attribute vec4 a_color;',
                'varying vec4 v_color;',
                texUnitAttribList,
                texUnitVaryingList,
                (GLEmulation.fogEnabled ? 'varying float v_fogFragCoord;' : null),
                'uniform mat4 u_modelView;',
                'uniform mat4 u_projection;',
                'void main()',
                '{',
                '  vec4 ecPosition = u_modelView * a_position;', // eye-coordinate position
                '  gl_Position = u_projection * ecPosition;',
                '  v_color = a_color;',
                vsTexCoordInits,
                vsFogVaryingInit,
                '}',
                ''
              ].join('\n').replace(/\n\n+/g, '\n');
  
              this.vertexShader = GLctx.createShader(GLctx.VERTEX_SHADER);
              GLctx.shaderSource(this.vertexShader, vsSource);
              GLctx.compileShader(this.vertexShader);
  
              var fogHeaderIfNeeded = null;
              if (GLEmulation.fogEnabled) {
                fogHeaderIfNeeded = [
                  '',
                  'varying float v_fogFragCoord; ',
                  'uniform vec4 u_fogColor;      ',
                  'uniform float u_fogEnd;       ',
                  'uniform float u_fogScale;     ',
                  'uniform float u_fogDensity;   ',
                  'float ffog(in float ecDistance) { ',
                  fogFormula,
                  '  fog = clamp(fog, 0.0, 1.0); ',
                  '  return fog;                 ',
                  '}',
                  '',
                ].join("\n");
              }
  
              var fogPass = null;
              if (GLEmulation.fogEnabled) {
                fogPass = 'gl_FragColor = vec4(mix(u_fogColor.rgb, gl_FragColor.rgb, ffog(v_fogFragCoord)), gl_FragColor.a);\n';
              }
  
              var fsSource = [
                'precision mediump float;',
                texUnitVaryingList,
                texUnitUniformList,
                'varying vec4 v_color;',
                fogHeaderIfNeeded,
                'void main()',
                '{',
                fsTexEnvPass,
                fogPass,
                '}',
                ''
              ].join("\n").replace(/\n\n+/g, '\n');
  
              this.fragmentShader = GLctx.createShader(GLctx.FRAGMENT_SHADER);
              GLctx.shaderSource(this.fragmentShader, fsSource);
              GLctx.compileShader(this.fragmentShader);
  
              this.program = GLctx.createProgram();
              GLctx.attachShader(this.program, this.vertexShader);
              GLctx.attachShader(this.program, this.fragmentShader);
  
              // As optimization, bind all attributes to prespecified locations, so that the FFP emulation
              // code can submit attributes to any generated FFP shader without having to examine each shader in turn.
              // These prespecified locations are only assumed if GL_FFP_ONLY is specified, since user could also create their
              // own shaders that didn't have attributes in the same locations.
              GLctx.bindAttribLocation(this.program, GLImmediate.VERTEX, 'a_position');
              GLctx.bindAttribLocation(this.program, GLImmediate.COLOR, 'a_color');
              GLctx.bindAttribLocation(this.program, GLImmediate.NORMAL, 'a_normal');
              var maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
              for (var i = 0; i < GLImmediate.MAX_TEXTURES && GLImmediate.TEXTURE0 + i < maxVertexAttribs; i++) {
                GLctx.bindAttribLocation(this.program, GLImmediate.TEXTURE0 + i, 'a_texCoord'+i);
                GLctx.bindAttribLocation(this.program, GLImmediate.TEXTURE0 + i, aTexCoordPrefix+i);
              }
              GLctx.linkProgram(this.program);
            }
  
            // Stores an array that remembers which matrix uniforms are up-to-date in this FFP renderer, so they don't need to be resubmitted
            // each time we render with this program.
            this.textureMatrixVersion = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
  
            this.positionLocation = GLctx.getAttribLocation(this.program, 'a_position');
  
            this.texCoordLocations = [];
  
            for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
              if (!GLImmediate.enabledClientAttributes[GLImmediate.TEXTURE0 + i]) {
                this.texCoordLocations[i] = -1;
                continue;
              }
  
              if (useCurrProgram) {
                this.texCoordLocations[i] = GLctx.getAttribLocation(this.program, 'a_texCoord' + i);
              } else {
                this.texCoordLocations[i] = GLctx.getAttribLocation(this.program, aTexCoordPrefix + i);
              }
            }
            this.colorLocation = GLctx.getAttribLocation(this.program, 'a_color');
            if (!useCurrProgram) {
              // Temporarily switch to the program so we can set our sampler uniforms early.
              var prevBoundProg = GLctx.getParameter(GLctx.CURRENT_PROGRAM);
              GLctx.useProgram(this.program);
              {
                for (var i = 0; i < this.usedTexUnitList.length; i++) {
                  var texUnitID = this.usedTexUnitList[i];
                  var texSamplerLoc = GLctx.getUniformLocation(this.program, uTexUnitPrefix + texUnitID);
                  GLctx.uniform1i(texSamplerLoc, texUnitID);
                }
              }
              // The default color attribute value is not the same as the default for all other attribute streams (0,0,0,1) but (1,1,1,1),
              // so explicitly set it right at start.
              GLctx.vertexAttrib4fv(this.colorLocation, [1,1,1,1]);
              GLctx.useProgram(prevBoundProg);
            }
  
            this.textureMatrixLocations = [];
            for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
              this.textureMatrixLocations[i] = GLctx.getUniformLocation(this.program, 'u_textureMatrix' + i);
            }
            this.normalLocation = GLctx.getAttribLocation(this.program, 'a_normal');
  
            this.modelViewLocation = GLctx.getUniformLocation(this.program, 'u_modelView');
            this.projectionLocation = GLctx.getUniformLocation(this.program, 'u_projection');
  
            this.hasTextures = hasTextures;
            this.hasNormal = GLImmediate.enabledClientAttributes[GLImmediate.NORMAL] &&
                             GLImmediate.clientAttributes[GLImmediate.NORMAL].size > 0 &&
                             this.normalLocation >= 0;
            this.hasColor = (this.colorLocation === 0) || this.colorLocation > 0;
  
            this.floatType = GLctx.FLOAT; // minor optimization
  
            this.fogColorLocation = GLctx.getUniformLocation(this.program, 'u_fogColor');
            this.fogEndLocation = GLctx.getUniformLocation(this.program, 'u_fogEnd');
            this.fogScaleLocation = GLctx.getUniformLocation(this.program, 'u_fogScale');
            this.fogDensityLocation = GLctx.getUniformLocation(this.program, 'u_fogDensity');
            this.hasFog = !!(this.fogColorLocation || this.fogEndLocation ||
                             this.fogScaleLocation || this.fogDensityLocation);
          },
  
          prepare: function prepare() {
            // Calculate the array buffer
            var arrayBuffer;
            if (!GL.currArrayBuffer) {
              var start = GLImmediate.firstVertex*GLImmediate.stride;
              var end = GLImmediate.lastVertex*GLImmediate.stride;
              assert(end <= GL.MAX_TEMP_BUFFER_SIZE, 'too much vertex data');
              arrayBuffer = GL.getTempVertexBuffer(end);
              // TODO: consider using the last buffer we bound, if it was larger. downside is larger buffer, but we might avoid rebinding and preparing
            } else {
              arrayBuffer = GL.currArrayBuffer;
            }
  
            // If the array buffer is unchanged and the renderer as well, then we can avoid all the work here
            // XXX We use some heuristics here, and this may not work in all cases. Try disabling GL_UNSAFE_OPTS if you
            // have odd glitches
            var lastRenderer = GLImmediate.lastRenderer;
            var canSkip = this == lastRenderer &&
                          arrayBuffer == GLImmediate.lastArrayBuffer &&
                          (GL.currProgram || this.program) == GLImmediate.lastProgram &&
                          GLImmediate.stride == GLImmediate.lastStride &&
                          !GLImmediate.matricesModified;
            if (!canSkip && lastRenderer) lastRenderer.cleanup();
            if (!GL.currArrayBuffer) {
              // Bind the array buffer and upload data after cleaning up the previous renderer
  
              if (arrayBuffer != GLImmediate.lastArrayBuffer) {
                GLctx.bindBuffer(GLctx.ARRAY_BUFFER, arrayBuffer);
                GLImmediate.lastArrayBuffer = arrayBuffer;
              }
  
              GLctx.bufferSubData(GLctx.ARRAY_BUFFER, start, GLImmediate.vertexData.subarray(start >> 2, end >> 2));
            }
            if (canSkip) return;
            GLImmediate.lastRenderer = this;
            GLImmediate.lastProgram = GL.currProgram || this.program;
            GLImmediate.lastStride == GLImmediate.stride;
            GLImmediate.matricesModified = false;
  
            if (!GL.currProgram) {
              if (GLImmediate.fixedFunctionProgram != this.program) {
                GLctx.useProgram(this.program);
                GLImmediate.fixedFunctionProgram = this.program;
              }
            }
  
            if (this.modelViewLocation && this.modelViewMatrixVersion != GLImmediate.matrixVersion[0/*m*/]) {
              this.modelViewMatrixVersion = GLImmediate.matrixVersion[0/*m*/];
              GLctx.uniformMatrix4fv(this.modelViewLocation, false, GLImmediate.matrix[0/*m*/]);
            }
            if (this.projectionLocation && this.projectionMatrixVersion != GLImmediate.matrixVersion[1/*p*/]) {
              this.projectionMatrixVersion = GLImmediate.matrixVersion[1/*p*/];
              GLctx.uniformMatrix4fv(this.projectionLocation, false, GLImmediate.matrix[1/*p*/]);
            }
  
            var clientAttributes = GLImmediate.clientAttributes;
            var posAttr = clientAttributes[GLImmediate.VERTEX];
  
  
            GLctx.vertexAttribPointer(this.positionLocation, posAttr.size, posAttr.type, false, GLImmediate.stride, posAttr.offset);
            GLctx.enableVertexAttribArray(this.positionLocation);
            if (this.hasNormal) {
              var normalAttr = clientAttributes[GLImmediate.NORMAL];
              GLctx.vertexAttribPointer(this.normalLocation, normalAttr.size, normalAttr.type, true, GLImmediate.stride, normalAttr.offset);
              GLctx.enableVertexAttribArray(this.normalLocation);
            }
            if (this.hasTextures) {
              for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
                var attribLoc = this.texCoordLocations[i];
                if (attribLoc === undefined || attribLoc < 0) continue;
                var texAttr = clientAttributes[GLImmediate.TEXTURE0+i];
  
                if (texAttr.size) {
                  GLctx.vertexAttribPointer(attribLoc, texAttr.size, texAttr.type, false, GLImmediate.stride, texAttr.offset);
                  GLctx.enableVertexAttribArray(attribLoc);
                } else {
                  // These two might be dangerous, but let's try them.
                  GLctx.vertexAttrib4f(attribLoc, 0, 0, 0, 1);
                  GLctx.disableVertexAttribArray(attribLoc);
                }
                var t = 2/*t*/+i;
                if (this.textureMatrixLocations[i] && this.textureMatrixVersion[t] != GLImmediate.matrixVersion[t]) { // XXX might we need this even without the condition we are currently in?
                  this.textureMatrixVersion[t] = GLImmediate.matrixVersion[t];
                  GLctx.uniformMatrix4fv(this.textureMatrixLocations[i], false, GLImmediate.matrix[t]);
                }
              }
            }
            if (GLImmediate.enabledClientAttributes[GLImmediate.COLOR]) {
              var colorAttr = clientAttributes[GLImmediate.COLOR];
              GLctx.vertexAttribPointer(this.colorLocation, colorAttr.size, colorAttr.type, true, GLImmediate.stride, colorAttr.offset);
              GLctx.enableVertexAttribArray(this.colorLocation);
            }
            else if (this.hasColor) {
              GLctx.disableVertexAttribArray(this.colorLocation);
              GLctx.vertexAttrib4fv(this.colorLocation, GLImmediate.clientColor);
            }
            if (this.hasFog) {
              if (this.fogColorLocation) GLctx.uniform4fv(this.fogColorLocation, GLEmulation.fogColor);
              if (this.fogEndLocation) GLctx.uniform1f(this.fogEndLocation, GLEmulation.fogEnd);
              if (this.fogScaleLocation) GLctx.uniform1f(this.fogScaleLocation, 1/(GLEmulation.fogEnd - GLEmulation.fogStart));
              if (this.fogDensityLocation) GLctx.uniform1f(this.fogDensityLocation, GLEmulation.fogDensity);
            }
          },
  
          cleanup: function cleanup() {
            GLctx.disableVertexAttribArray(this.positionLocation);
            if (this.hasTextures) {
              for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
                if (GLImmediate.enabledClientAttributes[GLImmediate.TEXTURE0+i] && this.texCoordLocations[i] >= 0) {
                  GLctx.disableVertexAttribArray(this.texCoordLocations[i]);
                }
              }
            }
            if (this.hasColor) {
              GLctx.disableVertexAttribArray(this.colorLocation);
            }
            if (this.hasNormal) {
              GLctx.disableVertexAttribArray(this.normalLocation);
            }
            if (!GL.currProgram) {
              GLctx.useProgram(null);
              GLImmediate.fixedFunctionProgram = 0;
            }
            if (!GL.currArrayBuffer) {
              GLctx.bindBuffer(GLctx.ARRAY_BUFFER, null);
              GLImmediate.lastArrayBuffer = null;
            }
  
            GLImmediate.lastRenderer = null;
            GLImmediate.lastProgram = null;
            GLImmediate.matricesModified = true;
          }
        };
        ret.init();
        return ret;
      },setupFuncs:function () {
        // Replace some functions with immediate-mode aware versions. If there are no client
        // attributes enabled, and we use webgl-friendly modes (no GL_QUADS), then no need
        // for emulation
        _glDrawArrays = _emscripten_glDrawArrays = function _glDrawArrays(mode, first, count) {
          if (GLImmediate.totalEnabledClientAttributes == 0 && mode <= 6) {
            GLctx.drawArrays(mode, first, count);
            return;
          }
          GLImmediate.prepareClientAttributes(count, false);
          GLImmediate.mode = mode;
          if (!GL.currArrayBuffer) {
            GLImmediate.vertexData = HEAPF32.subarray((GLImmediate.vertexPointer)>>2,(GLImmediate.vertexPointer + (first+count)*GLImmediate.stride)>>2); // XXX assuming float
            GLImmediate.firstVertex = first;
            GLImmediate.lastVertex = first + count;
          }
          GLImmediate.flush(null, first);
          GLImmediate.mode = -1;
        };
        
  
        _glDrawElements = _emscripten_glDrawElements = function _glDrawElements(mode, count, type, indices, start, end) { // start, end are given if we come from glDrawRangeElements
          if (GLImmediate.totalEnabledClientAttributes == 0 && mode <= 6 && GL.currElementArrayBuffer) {
            GLctx.drawElements(mode, count, type, indices);
            return;
          }
          if (!GL.currElementArrayBuffer) {
            assert(type == GLctx.UNSIGNED_SHORT); // We can only emulate buffers of this kind, for now
          }
          console.log("DrawElements doesn't actually prepareClientAttributes properly.");
          GLImmediate.prepareClientAttributes(count, false);
          GLImmediate.mode = mode;
          if (!GL.currArrayBuffer) {
            GLImmediate.firstVertex = end ? start : TOTAL_MEMORY; // if we don't know the start, set an invalid value and we will calculate it later from the indices
            GLImmediate.lastVertex = end ? end+1 : 0;
            GLImmediate.vertexData = HEAPF32.subarray(GLImmediate.vertexPointer >> 2, end ? (GLImmediate.vertexPointer + (end+1)*GLImmediate.stride) >> 2 : undefined); // XXX assuming float
          }
          GLImmediate.flush(count, 0, indices);
          GLImmediate.mode = -1;
        };
        
  
        // TexEnv stuff needs to be prepared early, so do it here.
        // init() is too late for -O2, since it freezes the GL functions
        // by that point.
        GLImmediate.MapTreeLib = GLImmediate.spawnMapTreeLib();
        GLImmediate.spawnMapTreeLib = null;
  
        GLImmediate.TexEnvJIT = GLImmediate.spawnTexEnvJIT();
        GLImmediate.spawnTexEnvJIT = null;
  
        GLImmediate.setupHooks();
      },setupHooks:function () {
        if (!GLEmulation.hasRunInit) {
          GLEmulation.init();
        }
  
        var glActiveTexture = _glActiveTexture;
        _glActiveTexture = _emscripten_glActiveTexture = function _glActiveTexture(texture) {
          GLImmediate.TexEnvJIT.hook_activeTexture(texture);
          glActiveTexture(texture);
        };
        
  
        var glEnable = _glEnable;
        _glEnable = _emscripten_glEnable = function _glEnable(cap) {
          GLImmediate.TexEnvJIT.hook_enable(cap);
          glEnable(cap);
        };
        
  
        var glDisable = _glDisable;
        _glDisable = _emscripten_glDisable = function _glDisable(cap) {
          GLImmediate.TexEnvJIT.hook_disable(cap);
          glDisable(cap);
        };
        
  
        var glTexEnvf = (typeof(_glTexEnvf) != 'undefined') ? _glTexEnvf : function(){};
        _glTexEnvf = _emscripten_glTexEnvf = function _glTexEnvf(target, pname, param) {
          GLImmediate.TexEnvJIT.hook_texEnvf(target, pname, param);
          // Don't call old func, since we are the implementor.
          //glTexEnvf(target, pname, param);
        };
        
  
        var glTexEnvi = (typeof(_glTexEnvi) != 'undefined') ? _glTexEnvi : function(){};
        _glTexEnvi = _emscripten_glTexEnvi = function _glTexEnvi(target, pname, param) {
          GLImmediate.TexEnvJIT.hook_texEnvi(target, pname, param);
          // Don't call old func, since we are the implementor.
          //glTexEnvi(target, pname, param);
        };
        
  
        var glTexEnvfv = (typeof(_glTexEnvfv) != 'undefined') ? _glTexEnvfv : function(){};
        _glTexEnvfv = _emscripten_glTexEnvfv = function _glTexEnvfv(target, pname, param) {
          GLImmediate.TexEnvJIT.hook_texEnvfv(target, pname, param);
          // Don't call old func, since we are the implementor.
          //glTexEnvfv(target, pname, param);
        };
        
  
        _glGetTexEnviv = function _glGetTexEnviv(target, pname, param) {
          GLImmediate.TexEnvJIT.hook_getTexEnviv(target, pname, param);
        };
        
  
        _glGetTexEnvfv = function _glGetTexEnvfv(target, pname, param) {
          GLImmediate.TexEnvJIT.hook_getTexEnvfv(target, pname, param);
        };
        
  
        var glGetIntegerv = _glGetIntegerv;
        _glGetIntegerv = _emscripten_glGetIntegerv = function _glGetIntegerv(pname, params) {
          switch (pname) {
            case 0x8B8D: { // GL_CURRENT_PROGRAM
              // Just query directly so we're working with WebGL objects.
              var cur = GLctx.getParameter(GLctx.CURRENT_PROGRAM);
              if (cur == GLImmediate.fixedFunctionProgram) {
                // Pretend we're not using a program.
                HEAP32[((params)>>2)]=0;
                return;
              }
              break;
            }
          }
          glGetIntegerv(pname, params);
        };
        
      },initted:false,init:function () {
        Module.printErr('WARNING: using emscripten GL immediate mode emulation. This is very limited in what it supports');
        GLImmediate.initted = true;
  
        if (!Module.useWebGL) return; // a 2D canvas may be currently used TODO: make sure we are actually called in that case
  
        // User can override the maximum number of texture units that we emulate. Using fewer texture units increases runtime performance
        // slightly, so it is advantageous to choose as small value as needed.
        GLImmediate.MAX_TEXTURES = Module['GL_MAX_TEXTURE_IMAGE_UNITS'] || GLctx.getParameter(GLctx.MAX_TEXTURE_IMAGE_UNITS);
  
        GLImmediate.TexEnvJIT.init(GLctx, GLImmediate.MAX_TEXTURES);
  
        GLImmediate.NUM_ATTRIBUTES = 3 /*pos+normal+color attributes*/ + GLImmediate.MAX_TEXTURES;
        GLImmediate.clientAttributes = [];
        GLEmulation.enabledClientAttribIndices = [];
        for (var i = 0; i < GLImmediate.NUM_ATTRIBUTES; i++) {
          GLImmediate.clientAttributes.push({});
          GLEmulation.enabledClientAttribIndices.push(false);
        }
  
        // Initialize matrix library
        // When user sets a matrix, increment a 'version number' on the new data, and when rendering, submit
        // the matrices to the shader program only if they have an old version of the data.
        GLImmediate.matrix = [];
        GLImmediate.matrixStack = [];
        GLImmediate.matrixVersion = [];
        for (var i = 0; i < 2 + GLImmediate.MAX_TEXTURES; i++) { // Modelview, Projection, plus one matrix for each texture coordinate.
          GLImmediate.matrixStack.push([]);
          GLImmediate.matrixVersion.push(0);
          GLImmediate.matrix.push(GLImmediate.matrixLib.mat4.create());
          GLImmediate.matrixLib.mat4.identity(GLImmediate.matrix[i]);
        }
  
        // Renderer cache
        GLImmediate.rendererCache = GLImmediate.MapTreeLib.create();
  
        // Buffers for data
        GLImmediate.tempData = new Float32Array(GL.MAX_TEMP_BUFFER_SIZE >> 2);
        GLImmediate.indexData = new Uint16Array(GL.MAX_TEMP_BUFFER_SIZE >> 1);
  
        GLImmediate.vertexDataU8 = new Uint8Array(GLImmediate.tempData.buffer);
  
        GL.generateTempBuffers(true, GL.currentContext);
  
        GLImmediate.clientColor = new Float32Array([1, 1, 1, 1]);
      },prepareClientAttributes:function prepareClientAttributes(count, beginEnd) {
        // If no client attributes were modified since we were last called, do nothing. Note that this
        // does not work for glBegin/End, where we generate renderer components dynamically and then
        // disable them ourselves, but it does help with glDrawElements/Arrays.
        if (!GLImmediate.modifiedClientAttributes) {
          GLImmediate.vertexCounter = (GLImmediate.stride * count) / 4; // XXX assuming float
          return;
        }
        GLImmediate.modifiedClientAttributes = false;
  
        // The role of prepareClientAttributes is to examine the set of client-side vertex attribute buffers
        // that user code has submitted, and to prepare them to be uploaded to a VBO in GPU memory
        // (since WebGL does not support client-side rendering, i.e. rendering from vertex data in CPU memory)
        // User can submit vertex data generally in three different configurations:
        // 1. Fully planar: all attributes are in their own separate tightly-packed arrays in CPU memory.
        // 2. Fully interleaved: all attributes share a single array where data is interleaved something like (pos,uv,normal), (pos,uv,normal), ...
        // 3. Complex hybrid: Multiple separate arrays that either are sparsely strided, and/or partially interleave vertex attributes.
  
        // For simplicity, we support the case (2) as the fast case. For (1) and (3), we do a memory copy of the
        // vertex data here to prepare a relayouted buffer that is of the structure in case (2). The reason
        // for this is that it allows the emulation code to get away with using just one VBO buffer for rendering,
        // and not have to maintain multiple ones. Therefore cases (1) and (3) will be very slow, and case (2) is fast.
  
        // Detect which case we are in by using a quick heuristic by examining the strides of the buffers. If all the buffers have identical 
        // stride, we assume we have case (2), otherwise we have something more complex.
        var clientStartPointer = 0x7FFFFFFF;
        var bytes = 0; // Total number of bytes taken up by a single vertex.
        var minStride = 0x7FFFFFFF;
        var maxStride = 0;
        var attributes = GLImmediate.liveClientAttributes;
        attributes.length = 0;
        for (var i = 0; i < 3+GLImmediate.MAX_TEXTURES; i++) {
          if (GLImmediate.enabledClientAttributes[i]) {
            var attr = GLImmediate.clientAttributes[i];
            attributes.push(attr);
            clientStartPointer = Math.min(clientStartPointer, attr.pointer);
            attr.sizeBytes = attr.size * GL.byteSizeByType[attr.type - GL.byteSizeByTypeRoot];
            bytes += attr.sizeBytes;
            minStride = Math.min(minStride, attr.stride);
            maxStride = Math.max(maxStride, attr.stride);
          }
        }
  
        if ((minStride != maxStride || maxStride < bytes) && !beginEnd) {
          // We are in cases (1) or (3): slow path, shuffle the data around into a single interleaved vertex buffer.
          // The immediate-mode glBegin()/glEnd() vertex submission gets automatically generated in appropriate layout,
          // so never need to come down this path if that was used.
          if (!GLImmediate.restrideBuffer) GLImmediate.restrideBuffer = _malloc(GL.MAX_TEMP_BUFFER_SIZE);
          var start = GLImmediate.restrideBuffer;
          bytes = 0;
          // calculate restrided offsets and total size
          for (var i = 0; i < attributes.length; i++) {
            var attr = attributes[i];
            var size = attr.sizeBytes;
            if (size % 4 != 0) size += 4 - (size % 4); // align everything
            attr.offset = bytes;
            bytes += size;
          }
          // copy out the data (we need to know the stride for that, and define attr.pointer)
          for (var i = 0; i < attributes.length; i++) {
            var attr = attributes[i];
            var srcStride = Math.max(attr.sizeBytes, attr.stride);
            if ((srcStride & 3) == 0 && (attr.sizeBytes & 3) == 0) {
              var size4 = attr.sizeBytes>>2;
              var srcStride4 = Math.max(attr.sizeBytes, attr.stride)>>2;
              for (var j = 0; j < count; j++) {
                for (var k = 0; k < size4; k++) { // copy in chunks of 4 bytes, our alignment makes this possible
                  HEAP32[((start + attr.offset + bytes*j)>>2) + k] = HEAP32[(attr.pointer>>2) + j*srcStride4 + k];
                }
              }
            } else {
              for (var j = 0; j < count; j++) {
                for (var k = 0; k < attr.sizeBytes; k++) { // source data was not aligned to multiples of 4, must copy byte by byte.
                  HEAP8[start + attr.offset + bytes*j + k] = HEAP8[attr.pointer + j*srcStride + k];
                }
              }
            }
            attr.pointer = start + attr.offset;
          }
          GLImmediate.stride = bytes;
          GLImmediate.vertexPointer = start;
        } else {
          // case (2): fast path, all data is interleaved to a single vertex array so we can get away with a single VBO upload.
          if (GL.currArrayBuffer) {
            GLImmediate.vertexPointer = 0;
          } else {
            GLImmediate.vertexPointer = clientStartPointer;
          }
          for (var i = 0; i < attributes.length; i++) {
            var attr = attributes[i];
            attr.offset = attr.pointer - GLImmediate.vertexPointer; // Compute what will be the offset of this attribute in the VBO after we upload.
          }
          GLImmediate.stride = Math.max(maxStride, bytes);
        }
        if (!beginEnd) {
          GLImmediate.vertexCounter = (GLImmediate.stride * count) / 4; // XXX assuming float
        }
      },flush:function flush(numProvidedIndexes, startIndex, ptr) {
        assert(numProvidedIndexes >= 0 || !numProvidedIndexes);
        startIndex = startIndex || 0;
        ptr = ptr || 0;
  
        var renderer = GLImmediate.getRenderer();
  
        // Generate index data in a format suitable for GLES 2.0/WebGL
        var numVertexes = 4 * GLImmediate.vertexCounter / GLImmediate.stride;
        if (!numVertexes) return;
        assert(numVertexes % 1 == 0, "`numVertexes` must be an integer.");
        var emulatedElementArrayBuffer = false;
        var numIndexes = 0;
        if (numProvidedIndexes) {
          numIndexes = numProvidedIndexes;
          if (!GL.currArrayBuffer && GLImmediate.firstVertex > GLImmediate.lastVertex) {
            // Figure out the first and last vertex from the index data
            assert(!GL.currElementArrayBuffer); // If we are going to upload array buffer data, we need to find which range to
                                                // upload based on the indices. If they are in a buffer on the GPU, that is very
                                                // inconvenient! So if you do not have an array buffer, you should also not have
                                                // an element array buffer. But best is to use both buffers!
            for (var i = 0; i < numProvidedIndexes; i++) {
              var currIndex = HEAPU16[(((ptr)+(i*2))>>1)];
              GLImmediate.firstVertex = Math.min(GLImmediate.firstVertex, currIndex);
              GLImmediate.lastVertex = Math.max(GLImmediate.lastVertex, currIndex+1);
            }
          }
          if (!GL.currElementArrayBuffer) {
            // If no element array buffer is bound, then indices is a literal pointer to clientside data
            assert(numProvidedIndexes << 1 <= GL.MAX_TEMP_BUFFER_SIZE, 'too many immediate mode indexes (a)');
            var indexBuffer = GL.getTempIndexBuffer(numProvidedIndexes << 1);
            GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, indexBuffer);
            GLctx.bufferSubData(GLctx.ELEMENT_ARRAY_BUFFER, 0, HEAPU16.subarray((ptr)>>1,(ptr + (numProvidedIndexes << 1))>>1));
            ptr = 0;
            emulatedElementArrayBuffer = true;
          }
        } else if (GLImmediate.mode > 6) { // above GL_TRIANGLE_FAN are the non-GL ES modes
          if (GLImmediate.mode != 7) throw 'unsupported immediate mode ' + GLImmediate.mode; // GL_QUADS
          // GLImmediate.firstVertex is the first vertex we want. Quad indexes are in the pattern
          // 0 1 2, 0 2 3, 4 5 6, 4 6 7, so we need to look at index firstVertex * 1.5 to see it.
          // Then since indexes are 2 bytes each, that means 3
          assert(GLImmediate.firstVertex % 4 == 0);
          ptr = GLImmediate.firstVertex*3;
          var numQuads = numVertexes / 4;
          numIndexes = numQuads * 6; // 0 1 2, 0 2 3 pattern
          assert(ptr + (numIndexes << 1) <= GL.MAX_TEMP_BUFFER_SIZE, 'too many immediate mode indexes (b)');
          GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, GL.currentContext.tempQuadIndexBuffer);
          emulatedElementArrayBuffer = true;
        }
  
        renderer.prepare();
  
        if (numIndexes) {
          GLctx.drawElements(GLctx.TRIANGLES, numIndexes, GLctx.UNSIGNED_SHORT, ptr);
        } else {
          GLctx.drawArrays(GLImmediate.mode, startIndex, numVertexes);
        }
  
        if (emulatedElementArrayBuffer) {
          GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, GL.buffers[GL.currElementArrayBuffer] || null);
        }
  
      }};
  GLImmediate.matrixLib = (function() {
  
  /**
   * @fileoverview gl-matrix - High performance matrix and vector operations for WebGL
   * @author Brandon Jones
   * @version 1.2.4
   */
  
  // Modifed for emscripten: Global scoping etc.
  
  /*
   * Copyright (c) 2011 Brandon Jones
   *
   * This software is provided 'as-is', without any express or implied
   * warranty. In no event will the authors be held liable for any damages
   * arising from the use of this software.
   *
   * Permission is granted to anyone to use this software for any purpose,
   * including commercial applications, and to alter it and redistribute it
   * freely, subject to the following restrictions:
   *
   *    1. The origin of this software must not be misrepresented; you must not
   *    claim that you wrote the original software. If you use this software
   *    in a product, an acknowledgment in the product documentation would be
   *    appreciated but is not required.
   *
   *    2. Altered source versions must be plainly marked as such, and must not
   *    be misrepresented as being the original software.
   *
   *    3. This notice may not be removed or altered from any source
   *    distribution.
   */
  
  
  /**
   * @class 3 Dimensional Vector
   * @name vec3
   */
  var vec3 = {};
  
  /**
   * @class 3x3 Matrix
   * @name mat3
   */
  var mat3 = {};
  
  /**
   * @class 4x4 Matrix
   * @name mat4
   */
  var mat4 = {};
  
  /**
   * @class Quaternion
   * @name quat4
   */
  var quat4 = {};
  
  var MatrixArray = Float32Array;
  
  /*
   * vec3
   */
   
  /**
   * Creates a new instance of a vec3 using the default array type
   * Any javascript array-like objects containing at least 3 numeric elements can serve as a vec3
   *
   * @param {vec3} [vec] vec3 containing values to initialize with
   *
   * @returns {vec3} New vec3
   */
  vec3.create = function (vec) {
      var dest = new MatrixArray(3);
  
      if (vec) {
          dest[0] = vec[0];
          dest[1] = vec[1];
          dest[2] = vec[2];
      } else {
          dest[0] = dest[1] = dest[2] = 0;
      }
  
      return dest;
  };
  
  /**
   * Copies the values of one vec3 to another
   *
   * @param {vec3} vec vec3 containing values to copy
   * @param {vec3} dest vec3 receiving copied values
   *
   * @returns {vec3} dest
   */
  vec3.set = function (vec, dest) {
      dest[0] = vec[0];
      dest[1] = vec[1];
      dest[2] = vec[2];
  
      return dest;
  };
  
  /**
   * Performs a vector addition
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.add = function (vec, vec2, dest) {
      if (!dest || vec === dest) {
          vec[0] += vec2[0];
          vec[1] += vec2[1];
          vec[2] += vec2[2];
          return vec;
      }
  
      dest[0] = vec[0] + vec2[0];
      dest[1] = vec[1] + vec2[1];
      dest[2] = vec[2] + vec2[2];
      return dest;
  };
  
  /**
   * Performs a vector subtraction
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.subtract = function (vec, vec2, dest) {
      if (!dest || vec === dest) {
          vec[0] -= vec2[0];
          vec[1] -= vec2[1];
          vec[2] -= vec2[2];
          return vec;
      }
  
      dest[0] = vec[0] - vec2[0];
      dest[1] = vec[1] - vec2[1];
      dest[2] = vec[2] - vec2[2];
      return dest;
  };
  
  /**
   * Performs a vector multiplication
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.multiply = function (vec, vec2, dest) {
      if (!dest || vec === dest) {
          vec[0] *= vec2[0];
          vec[1] *= vec2[1];
          vec[2] *= vec2[2];
          return vec;
      }
  
      dest[0] = vec[0] * vec2[0];
      dest[1] = vec[1] * vec2[1];
      dest[2] = vec[2] * vec2[2];
      return dest;
  };
  
  /**
   * Negates the components of a vec3
   *
   * @param {vec3} vec vec3 to negate
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.negate = function (vec, dest) {
      if (!dest) { dest = vec; }
  
      dest[0] = -vec[0];
      dest[1] = -vec[1];
      dest[2] = -vec[2];
      return dest;
  };
  
  /**
   * Multiplies the components of a vec3 by a scalar value
   *
   * @param {vec3} vec vec3 to scale
   * @param {number} val Value to scale by
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.scale = function (vec, val, dest) {
      if (!dest || vec === dest) {
          vec[0] *= val;
          vec[1] *= val;
          vec[2] *= val;
          return vec;
      }
  
      dest[0] = vec[0] * val;
      dest[1] = vec[1] * val;
      dest[2] = vec[2] * val;
      return dest;
  };
  
  /**
   * Generates a unit vector of the same direction as the provided vec3
   * If vector length is 0, returns [0, 0, 0]
   *
   * @param {vec3} vec vec3 to normalize
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.normalize = function (vec, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0], y = vec[1], z = vec[2],
          len = Math.sqrt(x * x + y * y + z * z);
  
      if (!len) {
          dest[0] = 0;
          dest[1] = 0;
          dest[2] = 0;
          return dest;
      } else if (len === 1) {
          dest[0] = x;
          dest[1] = y;
          dest[2] = z;
          return dest;
      }
  
      len = 1 / len;
      dest[0] = x * len;
      dest[1] = y * len;
      dest[2] = z * len;
      return dest;
  };
  
  /**
   * Generates the cross product of two vec3s
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.cross = function (vec, vec2, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0], y = vec[1], z = vec[2],
          x2 = vec2[0], y2 = vec2[1], z2 = vec2[2];
  
      dest[0] = y * z2 - z * y2;
      dest[1] = z * x2 - x * z2;
      dest[2] = x * y2 - y * x2;
      return dest;
  };
  
  /**
   * Caclulates the length of a vec3
   *
   * @param {vec3} vec vec3 to calculate length of
   *
   * @returns {number} Length of vec
   */
  vec3.length = function (vec) {
      var x = vec[0], y = vec[1], z = vec[2];
      return Math.sqrt(x * x + y * y + z * z);
  };
  
  /**
   * Caclulates the dot product of two vec3s
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   *
   * @returns {number} Dot product of vec and vec2
   */
  vec3.dot = function (vec, vec2) {
      return vec[0] * vec2[0] + vec[1] * vec2[1] + vec[2] * vec2[2];
  };
  
  /**
   * Generates a unit vector pointing from one vector to another
   *
   * @param {vec3} vec Origin vec3
   * @param {vec3} vec2 vec3 to point to
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.direction = function (vec, vec2, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0] - vec2[0],
          y = vec[1] - vec2[1],
          z = vec[2] - vec2[2],
          len = Math.sqrt(x * x + y * y + z * z);
  
      if (!len) {
          dest[0] = 0;
          dest[1] = 0;
          dest[2] = 0;
          return dest;
      }
  
      len = 1 / len;
      dest[0] = x * len;
      dest[1] = y * len;
      dest[2] = z * len;
      return dest;
  };
  
  /**
   * Performs a linear interpolation between two vec3
   *
   * @param {vec3} vec First vector
   * @param {vec3} vec2 Second vector
   * @param {number} lerp Interpolation amount between the two inputs
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.lerp = function (vec, vec2, lerp, dest) {
      if (!dest) { dest = vec; }
  
      dest[0] = vec[0] + lerp * (vec2[0] - vec[0]);
      dest[1] = vec[1] + lerp * (vec2[1] - vec[1]);
      dest[2] = vec[2] + lerp * (vec2[2] - vec[2]);
  
      return dest;
  };
  
  /**
   * Calculates the euclidian distance between two vec3
   *
   * Params:
   * @param {vec3} vec First vector
   * @param {vec3} vec2 Second vector
   *
   * @returns {number} Distance between vec and vec2
   */
  vec3.dist = function (vec, vec2) {
      var x = vec2[0] - vec[0],
          y = vec2[1] - vec[1],
          z = vec2[2] - vec[2];
          
      return Math.sqrt(x*x + y*y + z*z);
  };
  
  /**
   * Projects the specified vec3 from screen space into object space
   * Based on the <a href="http://webcvs.freedesktop.org/mesa/Mesa/src/glu/mesa/project.c?revision=1.4&view=markup">Mesa gluUnProject implementation</a>
   *
   * @param {vec3} vec Screen-space vector to project
   * @param {mat4} view View matrix
   * @param {mat4} proj Projection matrix
   * @param {vec4} viewport Viewport as given to gl.viewport [x, y, width, height]
   * @param {vec3} [dest] vec3 receiving unprojected result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.unproject = function (vec, view, proj, viewport, dest) {
      if (!dest) { dest = vec; }
  
      var m = mat4.create();
      var v = new MatrixArray(4);
      
      v[0] = (vec[0] - viewport[0]) * 2.0 / viewport[2] - 1.0;
      v[1] = (vec[1] - viewport[1]) * 2.0 / viewport[3] - 1.0;
      v[2] = 2.0 * vec[2] - 1.0;
      v[3] = 1.0;
      
      mat4.multiply(proj, view, m);
      if(!mat4.inverse(m)) { return null; }
      
      mat4.multiplyVec4(m, v);
      if(v[3] === 0.0) { return null; }
  
      dest[0] = v[0] / v[3];
      dest[1] = v[1] / v[3];
      dest[2] = v[2] / v[3];
      
      return dest;
  };
  
  /**
   * Returns a string representation of a vector
   *
   * @param {vec3} vec Vector to represent as a string
   *
   * @returns {string} String representation of vec
   */
  vec3.str = function (vec) {
      return '[' + vec[0] + ', ' + vec[1] + ', ' + vec[2] + ']';
  };
  
  /*
   * mat3
   */
  
  /**
   * Creates a new instance of a mat3 using the default array type
   * Any javascript array-like object containing at least 9 numeric elements can serve as a mat3
   *
   * @param {mat3} [mat] mat3 containing values to initialize with
   *
   * @returns {mat3} New mat3
   */
  mat3.create = function (mat) {
      var dest = new MatrixArray(9);
  
      if (mat) {
          dest[0] = mat[0];
          dest[1] = mat[1];
          dest[2] = mat[2];
          dest[3] = mat[3];
          dest[4] = mat[4];
          dest[5] = mat[5];
          dest[6] = mat[6];
          dest[7] = mat[7];
          dest[8] = mat[8];
      }
  
      return dest;
  };
  
  /**
   * Copies the values of one mat3 to another
   *
   * @param {mat3} mat mat3 containing values to copy
   * @param {mat3} dest mat3 receiving copied values
   *
   * @returns {mat3} dest
   */
  mat3.set = function (mat, dest) {
      dest[0] = mat[0];
      dest[1] = mat[1];
      dest[2] = mat[2];
      dest[3] = mat[3];
      dest[4] = mat[4];
      dest[5] = mat[5];
      dest[6] = mat[6];
      dest[7] = mat[7];
      dest[8] = mat[8];
      return dest;
  };
  
  /**
   * Sets a mat3 to an identity matrix
   *
   * @param {mat3} dest mat3 to set
   *
   * @returns dest if specified, otherwise a new mat3
   */
  mat3.identity = function (dest) {
      if (!dest) { dest = mat3.create(); }
      dest[0] = 1;
      dest[1] = 0;
      dest[2] = 0;
      dest[3] = 0;
      dest[4] = 1;
      dest[5] = 0;
      dest[6] = 0;
      dest[7] = 0;
      dest[8] = 1;
      return dest;
  };
  
  /**
   * Transposes a mat3 (flips the values over the diagonal)
   *
   * Params:
   * @param {mat3} mat mat3 to transpose
   * @param {mat3} [dest] mat3 receiving transposed values. If not specified result is written to mat
   *
   * @returns {mat3} dest is specified, mat otherwise
   */
  mat3.transpose = function (mat, dest) {
      // If we are transposing ourselves we can skip a few steps but have to cache some values
      if (!dest || mat === dest) {
          var a01 = mat[1], a02 = mat[2],
              a12 = mat[5];
  
          mat[1] = mat[3];
          mat[2] = mat[6];
          mat[3] = a01;
          mat[5] = mat[7];
          mat[6] = a02;
          mat[7] = a12;
          return mat;
      }
  
      dest[0] = mat[0];
      dest[1] = mat[3];
      dest[2] = mat[6];
      dest[3] = mat[1];
      dest[4] = mat[4];
      dest[5] = mat[7];
      dest[6] = mat[2];
      dest[7] = mat[5];
      dest[8] = mat[8];
      return dest;
  };
  
  /**
   * Copies the elements of a mat3 into the upper 3x3 elements of a mat4
   *
   * @param {mat3} mat mat3 containing values to copy
   * @param {mat4} [dest] mat4 receiving copied values
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat3.toMat4 = function (mat, dest) {
      if (!dest) { dest = mat4.create(); }
  
      dest[15] = 1;
      dest[14] = 0;
      dest[13] = 0;
      dest[12] = 0;
  
      dest[11] = 0;
      dest[10] = mat[8];
      dest[9] = mat[7];
      dest[8] = mat[6];
  
      dest[7] = 0;
      dest[6] = mat[5];
      dest[5] = mat[4];
      dest[4] = mat[3];
  
      dest[3] = 0;
      dest[2] = mat[2];
      dest[1] = mat[1];
      dest[0] = mat[0];
  
      return dest;
  };
  
  /**
   * Returns a string representation of a mat3
   *
   * @param {mat3} mat mat3 to represent as a string
   *
   * @param {string} String representation of mat
   */
  mat3.str = function (mat) {
      return '[' + mat[0] + ', ' + mat[1] + ', ' + mat[2] +
          ', ' + mat[3] + ', ' + mat[4] + ', ' + mat[5] +
          ', ' + mat[6] + ', ' + mat[7] + ', ' + mat[8] + ']';
  };
  
  /*
   * mat4
   */
  
  /**
   * Creates a new instance of a mat4 using the default array type
   * Any javascript array-like object containing at least 16 numeric elements can serve as a mat4
   *
   * @param {mat4} [mat] mat4 containing values to initialize with
   *
   * @returns {mat4} New mat4
   */
  mat4.create = function (mat) {
      var dest = new MatrixArray(16);
  
      if (mat) {
          dest[0] = mat[0];
          dest[1] = mat[1];
          dest[2] = mat[2];
          dest[3] = mat[3];
          dest[4] = mat[4];
          dest[5] = mat[5];
          dest[6] = mat[6];
          dest[7] = mat[7];
          dest[8] = mat[8];
          dest[9] = mat[9];
          dest[10] = mat[10];
          dest[11] = mat[11];
          dest[12] = mat[12];
          dest[13] = mat[13];
          dest[14] = mat[14];
          dest[15] = mat[15];
      }
  
      return dest;
  };
  
  /**
   * Copies the values of one mat4 to another
   *
   * @param {mat4} mat mat4 containing values to copy
   * @param {mat4} dest mat4 receiving copied values
   *
   * @returns {mat4} dest
   */
  mat4.set = function (mat, dest) {
      dest[0] = mat[0];
      dest[1] = mat[1];
      dest[2] = mat[2];
      dest[3] = mat[3];
      dest[4] = mat[4];
      dest[5] = mat[5];
      dest[6] = mat[6];
      dest[7] = mat[7];
      dest[8] = mat[8];
      dest[9] = mat[9];
      dest[10] = mat[10];
      dest[11] = mat[11];
      dest[12] = mat[12];
      dest[13] = mat[13];
      dest[14] = mat[14];
      dest[15] = mat[15];
      return dest;
  };
  
  /**
   * Sets a mat4 to an identity matrix
   *
   * @param {mat4} dest mat4 to set
   *
   * @returns {mat4} dest
   */
  mat4.identity = function (dest) {
      if (!dest) { dest = mat4.create(); }
      dest[0] = 1;
      dest[1] = 0;
      dest[2] = 0;
      dest[3] = 0;
      dest[4] = 0;
      dest[5] = 1;
      dest[6] = 0;
      dest[7] = 0;
      dest[8] = 0;
      dest[9] = 0;
      dest[10] = 1;
      dest[11] = 0;
      dest[12] = 0;
      dest[13] = 0;
      dest[14] = 0;
      dest[15] = 1;
      return dest;
  };
  
  /**
   * Transposes a mat4 (flips the values over the diagonal)
   *
   * @param {mat4} mat mat4 to transpose
   * @param {mat4} [dest] mat4 receiving transposed values. If not specified result is written to mat
   *
   * @param {mat4} dest is specified, mat otherwise
   */
  mat4.transpose = function (mat, dest) {
      // If we are transposing ourselves we can skip a few steps but have to cache some values
      if (!dest || mat === dest) {
          var a01 = mat[1], a02 = mat[2], a03 = mat[3],
              a12 = mat[6], a13 = mat[7],
              a23 = mat[11];
  
          mat[1] = mat[4];
          mat[2] = mat[8];
          mat[3] = mat[12];
          mat[4] = a01;
          mat[6] = mat[9];
          mat[7] = mat[13];
          mat[8] = a02;
          mat[9] = a12;
          mat[11] = mat[14];
          mat[12] = a03;
          mat[13] = a13;
          mat[14] = a23;
          return mat;
      }
  
      dest[0] = mat[0];
      dest[1] = mat[4];
      dest[2] = mat[8];
      dest[3] = mat[12];
      dest[4] = mat[1];
      dest[5] = mat[5];
      dest[6] = mat[9];
      dest[7] = mat[13];
      dest[8] = mat[2];
      dest[9] = mat[6];
      dest[10] = mat[10];
      dest[11] = mat[14];
      dest[12] = mat[3];
      dest[13] = mat[7];
      dest[14] = mat[11];
      dest[15] = mat[15];
      return dest;
  };
  
  /**
   * Calculates the determinant of a mat4
   *
   * @param {mat4} mat mat4 to calculate determinant of
   *
   * @returns {number} determinant of mat
   */
  mat4.determinant = function (mat) {
      // Cache the matrix values (makes for huge speed increases!)
      var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3],
          a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7],
          a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11],
          a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15];
  
      return (a30 * a21 * a12 * a03 - a20 * a31 * a12 * a03 - a30 * a11 * a22 * a03 + a10 * a31 * a22 * a03 +
              a20 * a11 * a32 * a03 - a10 * a21 * a32 * a03 - a30 * a21 * a02 * a13 + a20 * a31 * a02 * a13 +
              a30 * a01 * a22 * a13 - a00 * a31 * a22 * a13 - a20 * a01 * a32 * a13 + a00 * a21 * a32 * a13 +
              a30 * a11 * a02 * a23 - a10 * a31 * a02 * a23 - a30 * a01 * a12 * a23 + a00 * a31 * a12 * a23 +
              a10 * a01 * a32 * a23 - a00 * a11 * a32 * a23 - a20 * a11 * a02 * a33 + a10 * a21 * a02 * a33 +
              a20 * a01 * a12 * a33 - a00 * a21 * a12 * a33 - a10 * a01 * a22 * a33 + a00 * a11 * a22 * a33);
  };
  
  /**
   * Calculates the inverse matrix of a mat4
   *
   * @param {mat4} mat mat4 to calculate inverse of
   * @param {mat4} [dest] mat4 receiving inverse matrix. If not specified result is written to mat
   *
   * @param {mat4} dest is specified, mat otherwise, null if matrix cannot be inverted
   */
  mat4.inverse = function (mat, dest) {
      if (!dest) { dest = mat; }
  
      // Cache the matrix values (makes for huge speed increases!)
      var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3],
          a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7],
          a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11],
          a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15],
  
          b00 = a00 * a11 - a01 * a10,
          b01 = a00 * a12 - a02 * a10,
          b02 = a00 * a13 - a03 * a10,
          b03 = a01 * a12 - a02 * a11,
          b04 = a01 * a13 - a03 * a11,
          b05 = a02 * a13 - a03 * a12,
          b06 = a20 * a31 - a21 * a30,
          b07 = a20 * a32 - a22 * a30,
          b08 = a20 * a33 - a23 * a30,
          b09 = a21 * a32 - a22 * a31,
          b10 = a21 * a33 - a23 * a31,
          b11 = a22 * a33 - a23 * a32,
  
          d = (b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06),
          invDet;
  
          // Calculate the determinant
          if (!d) { return null; }
          invDet = 1 / d;
  
      dest[0] = (a11 * b11 - a12 * b10 + a13 * b09) * invDet;
      dest[1] = (-a01 * b11 + a02 * b10 - a03 * b09) * invDet;
      dest[2] = (a31 * b05 - a32 * b04 + a33 * b03) * invDet;
      dest[3] = (-a21 * b05 + a22 * b04 - a23 * b03) * invDet;
      dest[4] = (-a10 * b11 + a12 * b08 - a13 * b07) * invDet;
      dest[5] = (a00 * b11 - a02 * b08 + a03 * b07) * invDet;
      dest[6] = (-a30 * b05 + a32 * b02 - a33 * b01) * invDet;
      dest[7] = (a20 * b05 - a22 * b02 + a23 * b01) * invDet;
      dest[8] = (a10 * b10 - a11 * b08 + a13 * b06) * invDet;
      dest[9] = (-a00 * b10 + a01 * b08 - a03 * b06) * invDet;
      dest[10] = (a30 * b04 - a31 * b02 + a33 * b00) * invDet;
      dest[11] = (-a20 * b04 + a21 * b02 - a23 * b00) * invDet;
      dest[12] = (-a10 * b09 + a11 * b07 - a12 * b06) * invDet;
      dest[13] = (a00 * b09 - a01 * b07 + a02 * b06) * invDet;
      dest[14] = (-a30 * b03 + a31 * b01 - a32 * b00) * invDet;
      dest[15] = (a20 * b03 - a21 * b01 + a22 * b00) * invDet;
  
      return dest;
  };
  
  /**
   * Copies the upper 3x3 elements of a mat4 into another mat4
   *
   * @param {mat4} mat mat4 containing values to copy
   * @param {mat4} [dest] mat4 receiving copied values
   *
   * @returns {mat4} dest is specified, a new mat4 otherwise
   */
  mat4.toRotationMat = function (mat, dest) {
      if (!dest) { dest = mat4.create(); }
  
      dest[0] = mat[0];
      dest[1] = mat[1];
      dest[2] = mat[2];
      dest[3] = mat[3];
      dest[4] = mat[4];
      dest[5] = mat[5];
      dest[6] = mat[6];
      dest[7] = mat[7];
      dest[8] = mat[8];
      dest[9] = mat[9];
      dest[10] = mat[10];
      dest[11] = mat[11];
      dest[12] = 0;
      dest[13] = 0;
      dest[14] = 0;
      dest[15] = 1;
  
      return dest;
  };
  
  /**
   * Copies the upper 3x3 elements of a mat4 into a mat3
   *
   * @param {mat4} mat mat4 containing values to copy
   * @param {mat3} [dest] mat3 receiving copied values
   *
   * @returns {mat3} dest is specified, a new mat3 otherwise
   */
  mat4.toMat3 = function (mat, dest) {
      if (!dest) { dest = mat3.create(); }
  
      dest[0] = mat[0];
      dest[1] = mat[1];
      dest[2] = mat[2];
      dest[3] = mat[4];
      dest[4] = mat[5];
      dest[5] = mat[6];
      dest[6] = mat[8];
      dest[7] = mat[9];
      dest[8] = mat[10];
  
      return dest;
  };
  
  /**
   * Calculates the inverse of the upper 3x3 elements of a mat4 and copies the result into a mat3
   * The resulting matrix is useful for calculating transformed normals
   *
   * Params:
   * @param {mat4} mat mat4 containing values to invert and copy
   * @param {mat3} [dest] mat3 receiving values
   *
   * @returns {mat3} dest is specified, a new mat3 otherwise, null if the matrix cannot be inverted
   */
  mat4.toInverseMat3 = function (mat, dest) {
      // Cache the matrix values (makes for huge speed increases!)
      var a00 = mat[0], a01 = mat[1], a02 = mat[2],
          a10 = mat[4], a11 = mat[5], a12 = mat[6],
          a20 = mat[8], a21 = mat[9], a22 = mat[10],
  
          b01 = a22 * a11 - a12 * a21,
          b11 = -a22 * a10 + a12 * a20,
          b21 = a21 * a10 - a11 * a20,
  
          d = a00 * b01 + a01 * b11 + a02 * b21,
          id;
  
      if (!d) { return null; }
      id = 1 / d;
  
      if (!dest) { dest = mat3.create(); }
  
      dest[0] = b01 * id;
      dest[1] = (-a22 * a01 + a02 * a21) * id;
      dest[2] = (a12 * a01 - a02 * a11) * id;
      dest[3] = b11 * id;
      dest[4] = (a22 * a00 - a02 * a20) * id;
      dest[5] = (-a12 * a00 + a02 * a10) * id;
      dest[6] = b21 * id;
      dest[7] = (-a21 * a00 + a01 * a20) * id;
      dest[8] = (a11 * a00 - a01 * a10) * id;
  
      return dest;
  };
  
  /**
   * Performs a matrix multiplication
   *
   * @param {mat4} mat First operand
   * @param {mat4} mat2 Second operand
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.multiply = function (mat, mat2, dest) {
      if (!dest) { dest = mat; }
  
      // Cache the matrix values (makes for huge speed increases!)
      var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3],
          a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7],
          a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11],
          a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15],
  
          b00 = mat2[0], b01 = mat2[1], b02 = mat2[2], b03 = mat2[3],
          b10 = mat2[4], b11 = mat2[5], b12 = mat2[6], b13 = mat2[7],
          b20 = mat2[8], b21 = mat2[9], b22 = mat2[10], b23 = mat2[11],
          b30 = mat2[12], b31 = mat2[13], b32 = mat2[14], b33 = mat2[15];
  
      dest[0] = b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30;
      dest[1] = b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31;
      dest[2] = b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32;
      dest[3] = b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33;
      dest[4] = b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30;
      dest[5] = b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31;
      dest[6] = b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32;
      dest[7] = b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33;
      dest[8] = b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30;
      dest[9] = b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31;
      dest[10] = b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32;
      dest[11] = b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33;
      dest[12] = b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30;
      dest[13] = b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31;
      dest[14] = b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32;
      dest[15] = b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33;
  
      return dest;
  };
  
  /**
   * Transforms a vec3 with the given matrix
   * 4th vector component is implicitly '1'
   *
   * @param {mat4} mat mat4 to transform the vector with
   * @param {vec3} vec vec3 to transform
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  mat4.multiplyVec3 = function (mat, vec, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0], y = vec[1], z = vec[2];
  
      dest[0] = mat[0] * x + mat[4] * y + mat[8] * z + mat[12];
      dest[1] = mat[1] * x + mat[5] * y + mat[9] * z + mat[13];
      dest[2] = mat[2] * x + mat[6] * y + mat[10] * z + mat[14];
  
      return dest;
  };
  
  /**
   * Transforms a vec4 with the given matrix
   *
   * @param {mat4} mat mat4 to transform the vector with
   * @param {vec4} vec vec4 to transform
   * @param {vec4} [dest] vec4 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec4} dest if specified, vec otherwise
   */
  mat4.multiplyVec4 = function (mat, vec, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0], y = vec[1], z = vec[2], w = vec[3];
  
      dest[0] = mat[0] * x + mat[4] * y + mat[8] * z + mat[12] * w;
      dest[1] = mat[1] * x + mat[5] * y + mat[9] * z + mat[13] * w;
      dest[2] = mat[2] * x + mat[6] * y + mat[10] * z + mat[14] * w;
      dest[3] = mat[3] * x + mat[7] * y + mat[11] * z + mat[15] * w;
  
      return dest;
  };
  
  /**
   * Translates a matrix by the given vector
   *
   * @param {mat4} mat mat4 to translate
   * @param {vec3} vec vec3 specifying the translation
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.translate = function (mat, vec, dest) {
      var x = vec[0], y = vec[1], z = vec[2],
          a00, a01, a02, a03,
          a10, a11, a12, a13,
          a20, a21, a22, a23;
  
      if (!dest || mat === dest) {
          mat[12] = mat[0] * x + mat[4] * y + mat[8] * z + mat[12];
          mat[13] = mat[1] * x + mat[5] * y + mat[9] * z + mat[13];
          mat[14] = mat[2] * x + mat[6] * y + mat[10] * z + mat[14];
          mat[15] = mat[3] * x + mat[7] * y + mat[11] * z + mat[15];
          return mat;
      }
  
      a00 = mat[0]; a01 = mat[1]; a02 = mat[2]; a03 = mat[3];
      a10 = mat[4]; a11 = mat[5]; a12 = mat[6]; a13 = mat[7];
      a20 = mat[8]; a21 = mat[9]; a22 = mat[10]; a23 = mat[11];
  
      dest[0] = a00; dest[1] = a01; dest[2] = a02; dest[3] = a03;
      dest[4] = a10; dest[5] = a11; dest[6] = a12; dest[7] = a13;
      dest[8] = a20; dest[9] = a21; dest[10] = a22; dest[11] = a23;
  
      dest[12] = a00 * x + a10 * y + a20 * z + mat[12];
      dest[13] = a01 * x + a11 * y + a21 * z + mat[13];
      dest[14] = a02 * x + a12 * y + a22 * z + mat[14];
      dest[15] = a03 * x + a13 * y + a23 * z + mat[15];
      return dest;
  };
  
  /**
   * Scales a matrix by the given vector
   *
   * @param {mat4} mat mat4 to scale
   * @param {vec3} vec vec3 specifying the scale for each axis
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @param {mat4} dest if specified, mat otherwise
   */
  mat4.scale = function (mat, vec, dest) {
      var x = vec[0], y = vec[1], z = vec[2];
  
      if (!dest || mat === dest) {
          mat[0] *= x;
          mat[1] *= x;
          mat[2] *= x;
          mat[3] *= x;
          mat[4] *= y;
          mat[5] *= y;
          mat[6] *= y;
          mat[7] *= y;
          mat[8] *= z;
          mat[9] *= z;
          mat[10] *= z;
          mat[11] *= z;
          return mat;
      }
  
      dest[0] = mat[0] * x;
      dest[1] = mat[1] * x;
      dest[2] = mat[2] * x;
      dest[3] = mat[3] * x;
      dest[4] = mat[4] * y;
      dest[5] = mat[5] * y;
      dest[6] = mat[6] * y;
      dest[7] = mat[7] * y;
      dest[8] = mat[8] * z;
      dest[9] = mat[9] * z;
      dest[10] = mat[10] * z;
      dest[11] = mat[11] * z;
      dest[12] = mat[12];
      dest[13] = mat[13];
      dest[14] = mat[14];
      dest[15] = mat[15];
      return dest;
  };
  
  /**
   * Rotates a matrix by the given angle around the specified axis
   * If rotating around a primary axis (X,Y,Z) one of the specialized rotation functions should be used instead for performance
   *
   * @param {mat4} mat mat4 to rotate
   * @param {number} angle Angle (in radians) to rotate
   * @param {vec3} axis vec3 representing the axis to rotate around 
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.rotate = function (mat, angle, axis, dest) {
      var x = axis[0], y = axis[1], z = axis[2],
          len = Math.sqrt(x * x + y * y + z * z),
          s, c, t,
          a00, a01, a02, a03,
          a10, a11, a12, a13,
          a20, a21, a22, a23,
          b00, b01, b02,
          b10, b11, b12,
          b20, b21, b22;
  
      if (!len) { return null; }
      if (len !== 1) {
          len = 1 / len;
          x *= len;
          y *= len;
          z *= len;
      }
  
      s = Math.sin(angle);
      c = Math.cos(angle);
      t = 1 - c;
  
      a00 = mat[0]; a01 = mat[1]; a02 = mat[2]; a03 = mat[3];
      a10 = mat[4]; a11 = mat[5]; a12 = mat[6]; a13 = mat[7];
      a20 = mat[8]; a21 = mat[9]; a22 = mat[10]; a23 = mat[11];
  
      // Construct the elements of the rotation matrix
      b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;
      b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;
      b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;
  
      if (!dest) {
          dest = mat;
      } else if (mat !== dest) { // If the source and destination differ, copy the unchanged last row
          dest[12] = mat[12];
          dest[13] = mat[13];
          dest[14] = mat[14];
          dest[15] = mat[15];
      }
  
      // Perform rotation-specific matrix multiplication
      dest[0] = a00 * b00 + a10 * b01 + a20 * b02;
      dest[1] = a01 * b00 + a11 * b01 + a21 * b02;
      dest[2] = a02 * b00 + a12 * b01 + a22 * b02;
      dest[3] = a03 * b00 + a13 * b01 + a23 * b02;
  
      dest[4] = a00 * b10 + a10 * b11 + a20 * b12;
      dest[5] = a01 * b10 + a11 * b11 + a21 * b12;
      dest[6] = a02 * b10 + a12 * b11 + a22 * b12;
      dest[7] = a03 * b10 + a13 * b11 + a23 * b12;
  
      dest[8] = a00 * b20 + a10 * b21 + a20 * b22;
      dest[9] = a01 * b20 + a11 * b21 + a21 * b22;
      dest[10] = a02 * b20 + a12 * b21 + a22 * b22;
      dest[11] = a03 * b20 + a13 * b21 + a23 * b22;
      return dest;
  };
  
  /**
   * Rotates a matrix by the given angle around the X axis
   *
   * @param {mat4} mat mat4 to rotate
   * @param {number} angle Angle (in radians) to rotate
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.rotateX = function (mat, angle, dest) {
      var s = Math.sin(angle),
          c = Math.cos(angle),
          a10 = mat[4],
          a11 = mat[5],
          a12 = mat[6],
          a13 = mat[7],
          a20 = mat[8],
          a21 = mat[9],
          a22 = mat[10],
          a23 = mat[11];
  
      if (!dest) {
          dest = mat;
      } else if (mat !== dest) { // If the source and destination differ, copy the unchanged rows
          dest[0] = mat[0];
          dest[1] = mat[1];
          dest[2] = mat[2];
          dest[3] = mat[3];
  
          dest[12] = mat[12];
          dest[13] = mat[13];
          dest[14] = mat[14];
          dest[15] = mat[15];
      }
  
      // Perform axis-specific matrix multiplication
      dest[4] = a10 * c + a20 * s;
      dest[5] = a11 * c + a21 * s;
      dest[6] = a12 * c + a22 * s;
      dest[7] = a13 * c + a23 * s;
  
      dest[8] = a10 * -s + a20 * c;
      dest[9] = a11 * -s + a21 * c;
      dest[10] = a12 * -s + a22 * c;
      dest[11] = a13 * -s + a23 * c;
      return dest;
  };
  
  /**
   * Rotates a matrix by the given angle around the Y axis
   *
   * @param {mat4} mat mat4 to rotate
   * @param {number} angle Angle (in radians) to rotate
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.rotateY = function (mat, angle, dest) {
      var s = Math.sin(angle),
          c = Math.cos(angle),
          a00 = mat[0],
          a01 = mat[1],
          a02 = mat[2],
          a03 = mat[3],
          a20 = mat[8],
          a21 = mat[9],
          a22 = mat[10],
          a23 = mat[11];
  
      if (!dest) {
          dest = mat;
      } else if (mat !== dest) { // If the source and destination differ, copy the unchanged rows
          dest[4] = mat[4];
          dest[5] = mat[5];
          dest[6] = mat[6];
          dest[7] = mat[7];
  
          dest[12] = mat[12];
          dest[13] = mat[13];
          dest[14] = mat[14];
          dest[15] = mat[15];
      }
  
      // Perform axis-specific matrix multiplication
      dest[0] = a00 * c + a20 * -s;
      dest[1] = a01 * c + a21 * -s;
      dest[2] = a02 * c + a22 * -s;
      dest[3] = a03 * c + a23 * -s;
  
      dest[8] = a00 * s + a20 * c;
      dest[9] = a01 * s + a21 * c;
      dest[10] = a02 * s + a22 * c;
      dest[11] = a03 * s + a23 * c;
      return dest;
  };
  
  /**
   * Rotates a matrix by the given angle around the Z axis
   *
   * @param {mat4} mat mat4 to rotate
   * @param {number} angle Angle (in radians) to rotate
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.rotateZ = function (mat, angle, dest) {
      var s = Math.sin(angle),
          c = Math.cos(angle),
          a00 = mat[0],
          a01 = mat[1],
          a02 = mat[2],
          a03 = mat[3],
          a10 = mat[4],
          a11 = mat[5],
          a12 = mat[6],
          a13 = mat[7];
  
      if (!dest) {
          dest = mat;
      } else if (mat !== dest) { // If the source and destination differ, copy the unchanged last row
          dest[8] = mat[8];
          dest[9] = mat[9];
          dest[10] = mat[10];
          dest[11] = mat[11];
  
          dest[12] = mat[12];
          dest[13] = mat[13];
          dest[14] = mat[14];
          dest[15] = mat[15];
      }
  
      // Perform axis-specific matrix multiplication
      dest[0] = a00 * c + a10 * s;
      dest[1] = a01 * c + a11 * s;
      dest[2] = a02 * c + a12 * s;
      dest[3] = a03 * c + a13 * s;
  
      dest[4] = a00 * -s + a10 * c;
      dest[5] = a01 * -s + a11 * c;
      dest[6] = a02 * -s + a12 * c;
      dest[7] = a03 * -s + a13 * c;
  
      return dest;
  };
  
  /**
   * Generates a frustum matrix with the given bounds
   *
   * @param {number} left Left bound of the frustum
   * @param {number} right Right bound of the frustum
   * @param {number} bottom Bottom bound of the frustum
   * @param {number} top Top bound of the frustum
   * @param {number} near Near bound of the frustum
   * @param {number} far Far bound of the frustum
   * @param {mat4} [dest] mat4 frustum matrix will be written into
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.frustum = function (left, right, bottom, top, near, far, dest) {
      if (!dest) { dest = mat4.create(); }
      var rl = (right - left),
          tb = (top - bottom),
          fn = (far - near);
      dest[0] = (near * 2) / rl;
      dest[1] = 0;
      dest[2] = 0;
      dest[3] = 0;
      dest[4] = 0;
      dest[5] = (near * 2) / tb;
      dest[6] = 0;
      dest[7] = 0;
      dest[8] = (right + left) / rl;
      dest[9] = (top + bottom) / tb;
      dest[10] = -(far + near) / fn;
      dest[11] = -1;
      dest[12] = 0;
      dest[13] = 0;
      dest[14] = -(far * near * 2) / fn;
      dest[15] = 0;
      return dest;
  };
  
  /**
   * Generates a perspective projection matrix with the given bounds
   *
   * @param {number} fovy Vertical field of view
   * @param {number} aspect Aspect ratio. typically viewport width/height
   * @param {number} near Near bound of the frustum
   * @param {number} far Far bound of the frustum
   * @param {mat4} [dest] mat4 frustum matrix will be written into
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.perspective = function (fovy, aspect, near, far, dest) {
      var top = near * Math.tan(fovy * Math.PI / 360.0),
          right = top * aspect;
      return mat4.frustum(-right, right, -top, top, near, far, dest);
  };
  
  /**
   * Generates a orthogonal projection matrix with the given bounds
   *
   * @param {number} left Left bound of the frustum
   * @param {number} right Right bound of the frustum
   * @param {number} bottom Bottom bound of the frustum
   * @param {number} top Top bound of the frustum
   * @param {number} near Near bound of the frustum
   * @param {number} far Far bound of the frustum
   * @param {mat4} [dest] mat4 frustum matrix will be written into
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.ortho = function (left, right, bottom, top, near, far, dest) {
      if (!dest) { dest = mat4.create(); }
      var rl = (right - left),
          tb = (top - bottom),
          fn = (far - near);
      dest[0] = 2 / rl;
      dest[1] = 0;
      dest[2] = 0;
      dest[3] = 0;
      dest[4] = 0;
      dest[5] = 2 / tb;
      dest[6] = 0;
      dest[7] = 0;
      dest[8] = 0;
      dest[9] = 0;
      dest[10] = -2 / fn;
      dest[11] = 0;
      dest[12] = -(left + right) / rl;
      dest[13] = -(top + bottom) / tb;
      dest[14] = -(far + near) / fn;
      dest[15] = 1;
      return dest;
  };
  
  /**
   * Generates a look-at matrix with the given eye position, focal point, and up axis
   *
   * @param {vec3} eye Position of the viewer
   * @param {vec3} center Point the viewer is looking at
   * @param {vec3} up vec3 pointing "up"
   * @param {mat4} [dest] mat4 frustum matrix will be written into
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.lookAt = function (eye, center, up, dest) {
      if (!dest) { dest = mat4.create(); }
  
      var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,
          eyex = eye[0],
          eyey = eye[1],
          eyez = eye[2],
          upx = up[0],
          upy = up[1],
          upz = up[2],
          centerx = center[0],
          centery = center[1],
          centerz = center[2];
  
      if (eyex === centerx && eyey === centery && eyez === centerz) {
          return mat4.identity(dest);
      }
  
      //vec3.direction(eye, center, z);
      z0 = eyex - centerx;
      z1 = eyey - centery;
      z2 = eyez - centerz;
  
      // normalize (no check needed for 0 because of early return)
      len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
      z0 *= len;
      z1 *= len;
      z2 *= len;
  
      //vec3.normalize(vec3.cross(up, z, x));
      x0 = upy * z2 - upz * z1;
      x1 = upz * z0 - upx * z2;
      x2 = upx * z1 - upy * z0;
      len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
      if (!len) {
          x0 = 0;
          x1 = 0;
          x2 = 0;
      } else {
          len = 1 / len;
          x0 *= len;
          x1 *= len;
          x2 *= len;
      }
  
      //vec3.normalize(vec3.cross(z, x, y));
      y0 = z1 * x2 - z2 * x1;
      y1 = z2 * x0 - z0 * x2;
      y2 = z0 * x1 - z1 * x0;
  
      len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
      if (!len) {
          y0 = 0;
          y1 = 0;
          y2 = 0;
      } else {
          len = 1 / len;
          y0 *= len;
          y1 *= len;
          y2 *= len;
      }
  
      dest[0] = x0;
      dest[1] = y0;
      dest[2] = z0;
      dest[3] = 0;
      dest[4] = x1;
      dest[5] = y1;
      dest[6] = z1;
      dest[7] = 0;
      dest[8] = x2;
      dest[9] = y2;
      dest[10] = z2;
      dest[11] = 0;
      dest[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
      dest[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
      dest[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
      dest[15] = 1;
  
      return dest;
  };
  
  /**
   * Creates a matrix from a quaternion rotation and vector translation
   * This is equivalent to (but much faster than):
   *
   *     mat4.identity(dest);
   *     mat4.translate(dest, vec);
   *     var quatMat = mat4.create();
   *     quat4.toMat4(quat, quatMat);
   *     mat4.multiply(dest, quatMat);
   *
   * @param {quat4} quat Rotation quaternion
   * @param {vec3} vec Translation vector
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to a new mat4
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.fromRotationTranslation = function (quat, vec, dest) {
      if (!dest) { dest = mat4.create(); }
  
      // Quaternion math
      var x = quat[0], y = quat[1], z = quat[2], w = quat[3],
          x2 = x + x,
          y2 = y + y,
          z2 = z + z,
  
          xx = x * x2,
          xy = x * y2,
          xz = x * z2,
          yy = y * y2,
          yz = y * z2,
          zz = z * z2,
          wx = w * x2,
          wy = w * y2,
          wz = w * z2;
  
      dest[0] = 1 - (yy + zz);
      dest[1] = xy + wz;
      dest[2] = xz - wy;
      dest[3] = 0;
      dest[4] = xy - wz;
      dest[5] = 1 - (xx + zz);
      dest[6] = yz + wx;
      dest[7] = 0;
      dest[8] = xz + wy;
      dest[9] = yz - wx;
      dest[10] = 1 - (xx + yy);
      dest[11] = 0;
      dest[12] = vec[0];
      dest[13] = vec[1];
      dest[14] = vec[2];
      dest[15] = 1;
      
      return dest;
  };
  
  /**
   * Returns a string representation of a mat4
   *
   * @param {mat4} mat mat4 to represent as a string
   *
   * @returns {string} String representation of mat
   */
  mat4.str = function (mat) {
      return '[' + mat[0] + ', ' + mat[1] + ', ' + mat[2] + ', ' + mat[3] +
          ', ' + mat[4] + ', ' + mat[5] + ', ' + mat[6] + ', ' + mat[7] +
          ', ' + mat[8] + ', ' + mat[9] + ', ' + mat[10] + ', ' + mat[11] +
          ', ' + mat[12] + ', ' + mat[13] + ', ' + mat[14] + ', ' + mat[15] + ']';
  };
  
  /*
   * quat4
   */
  
  /**
   * Creates a new instance of a quat4 using the default array type
   * Any javascript array containing at least 4 numeric elements can serve as a quat4
   *
   * @param {quat4} [quat] quat4 containing values to initialize with
   *
   * @returns {quat4} New quat4
   */
  quat4.create = function (quat) {
      var dest = new MatrixArray(4);
  
      if (quat) {
          dest[0] = quat[0];
          dest[1] = quat[1];
          dest[2] = quat[2];
          dest[3] = quat[3];
      }
  
      return dest;
  };
  
  /**
   * Copies the values of one quat4 to another
   *
   * @param {quat4} quat quat4 containing values to copy
   * @param {quat4} dest quat4 receiving copied values
   *
   * @returns {quat4} dest
   */
  quat4.set = function (quat, dest) {
      dest[0] = quat[0];
      dest[1] = quat[1];
      dest[2] = quat[2];
      dest[3] = quat[3];
  
      return dest;
  };
  
  /**
   * Calculates the W component of a quat4 from the X, Y, and Z components.
   * Assumes that quaternion is 1 unit in length. 
   * Any existing W component will be ignored. 
   *
   * @param {quat4} quat quat4 to calculate W component of
   * @param {quat4} [dest] quat4 receiving calculated values. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.calculateW = function (quat, dest) {
      var x = quat[0], y = quat[1], z = quat[2];
  
      if (!dest || quat === dest) {
          quat[3] = -Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
          return quat;
      }
      dest[0] = x;
      dest[1] = y;
      dest[2] = z;
      dest[3] = -Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
      return dest;
  };
  
  /**
   * Calculates the dot product of two quaternions
   *
   * @param {quat4} quat First operand
   * @param {quat4} quat2 Second operand
   *
   * @return {number} Dot product of quat and quat2
   */
  quat4.dot = function(quat, quat2){
      return quat[0]*quat2[0] + quat[1]*quat2[1] + quat[2]*quat2[2] + quat[3]*quat2[3];
  };
  
  /**
   * Calculates the inverse of a quat4
   *
   * @param {quat4} quat quat4 to calculate inverse of
   * @param {quat4} [dest] quat4 receiving inverse values. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.inverse = function(quat, dest) {
      var q0 = quat[0], q1 = quat[1], q2 = quat[2], q3 = quat[3],
          dot = q0*q0 + q1*q1 + q2*q2 + q3*q3,
          invDot = dot ? 1.0/dot : 0;
      
      // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0
      
      if(!dest || quat === dest) {
          quat[0] *= -invDot;
          quat[1] *= -invDot;
          quat[2] *= -invDot;
          quat[3] *= invDot;
          return quat;
      }
      dest[0] = -quat[0]*invDot;
      dest[1] = -quat[1]*invDot;
      dest[2] = -quat[2]*invDot;
      dest[3] = quat[3]*invDot;
      return dest;
  };
  
  
  /**
   * Calculates the conjugate of a quat4
   * If the quaternion is normalized, this function is faster than quat4.inverse and produces the same result.
   *
   * @param {quat4} quat quat4 to calculate conjugate of
   * @param {quat4} [dest] quat4 receiving conjugate values. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.conjugate = function (quat, dest) {
      if (!dest || quat === dest) {
          quat[0] *= -1;
          quat[1] *= -1;
          quat[2] *= -1;
          return quat;
      }
      dest[0] = -quat[0];
      dest[1] = -quat[1];
      dest[2] = -quat[2];
      dest[3] = quat[3];
      return dest;
  };
  
  /**
   * Calculates the length of a quat4
   *
   * Params:
   * @param {quat4} quat quat4 to calculate length of
   *
   * @returns Length of quat
   */
  quat4.length = function (quat) {
      var x = quat[0], y = quat[1], z = quat[2], w = quat[3];
      return Math.sqrt(x * x + y * y + z * z + w * w);
  };
  
  /**
   * Generates a unit quaternion of the same direction as the provided quat4
   * If quaternion length is 0, returns [0, 0, 0, 0]
   *
   * @param {quat4} quat quat4 to normalize
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.normalize = function (quat, dest) {
      if (!dest) { dest = quat; }
  
      var x = quat[0], y = quat[1], z = quat[2], w = quat[3],
          len = Math.sqrt(x * x + y * y + z * z + w * w);
      if (len === 0) {
          dest[0] = 0;
          dest[1] = 0;
          dest[2] = 0;
          dest[3] = 0;
          return dest;
      }
      len = 1 / len;
      dest[0] = x * len;
      dest[1] = y * len;
      dest[2] = z * len;
      dest[3] = w * len;
  
      return dest;
  };
  
  /**
   * Performs quaternion addition
   *
   * @param {quat4} quat First operand
   * @param {quat4} quat2 Second operand
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.add = function (quat, quat2, dest) {
      if(!dest || quat === dest) {
          quat[0] += quat2[0];
          quat[1] += quat2[1];
          quat[2] += quat2[2];
          quat[3] += quat2[3];
          return quat;
      }
      dest[0] = quat[0]+quat2[0];
      dest[1] = quat[1]+quat2[1];
      dest[2] = quat[2]+quat2[2];
      dest[3] = quat[3]+quat2[3];
      return dest;
  };
  
  /**
   * Performs a quaternion multiplication
   *
   * @param {quat4} quat First operand
   * @param {quat4} quat2 Second operand
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.multiply = function (quat, quat2, dest) {
      if (!dest) { dest = quat; }
  
      var qax = quat[0], qay = quat[1], qaz = quat[2], qaw = quat[3],
          qbx = quat2[0], qby = quat2[1], qbz = quat2[2], qbw = quat2[3];
  
      dest[0] = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
      dest[1] = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
      dest[2] = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
      dest[3] = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
  
      return dest;
  };
  
  /**
   * Transforms a vec3 with the given quaternion
   *
   * @param {quat4} quat quat4 to transform the vector with
   * @param {vec3} vec vec3 to transform
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns dest if specified, vec otherwise
   */
  quat4.multiplyVec3 = function (quat, vec, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0], y = vec[1], z = vec[2],
          qx = quat[0], qy = quat[1], qz = quat[2], qw = quat[3],
  
          // calculate quat * vec
          ix = qw * x + qy * z - qz * y,
          iy = qw * y + qz * x - qx * z,
          iz = qw * z + qx * y - qy * x,
          iw = -qx * x - qy * y - qz * z;
  
      // calculate result * inverse quat
      dest[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
      dest[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
      dest[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
  
      return dest;
  };
  
  /**
   * Multiplies the components of a quaternion by a scalar value
   *
   * @param {quat4} quat to scale
   * @param {number} val Value to scale by
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.scale = function (quat, val, dest) {
      if(!dest || quat === dest) {
          quat[0] *= val;
          quat[1] *= val;
          quat[2] *= val;
          quat[3] *= val;
          return quat;
      }
      dest[0] = quat[0]*val;
      dest[1] = quat[1]*val;
      dest[2] = quat[2]*val;
      dest[3] = quat[3]*val;
      return dest;
  };
  
  /**
   * Calculates a 3x3 matrix from the given quat4
   *
   * @param {quat4} quat quat4 to create matrix from
   * @param {mat3} [dest] mat3 receiving operation result
   *
   * @returns {mat3} dest if specified, a new mat3 otherwise
   */
  quat4.toMat3 = function (quat, dest) {
      if (!dest) { dest = mat3.create(); }
  
      var x = quat[0], y = quat[1], z = quat[2], w = quat[3],
          x2 = x + x,
          y2 = y + y,
          z2 = z + z,
  
          xx = x * x2,
          xy = x * y2,
          xz = x * z2,
          yy = y * y2,
          yz = y * z2,
          zz = z * z2,
          wx = w * x2,
          wy = w * y2,
          wz = w * z2;
  
      dest[0] = 1 - (yy + zz);
      dest[1] = xy + wz;
      dest[2] = xz - wy;
  
      dest[3] = xy - wz;
      dest[4] = 1 - (xx + zz);
      dest[5] = yz + wx;
  
      dest[6] = xz + wy;
      dest[7] = yz - wx;
      dest[8] = 1 - (xx + yy);
  
      return dest;
  };
  
  /**
   * Calculates a 4x4 matrix from the given quat4
   *
   * @param {quat4} quat quat4 to create matrix from
   * @param {mat4} [dest] mat4 receiving operation result
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  quat4.toMat4 = function (quat, dest) {
      if (!dest) { dest = mat4.create(); }
  
      var x = quat[0], y = quat[1], z = quat[2], w = quat[3],
          x2 = x + x,
          y2 = y + y,
          z2 = z + z,
  
          xx = x * x2,
          xy = x * y2,
          xz = x * z2,
          yy = y * y2,
          yz = y * z2,
          zz = z * z2,
          wx = w * x2,
          wy = w * y2,
          wz = w * z2;
  
      dest[0] = 1 - (yy + zz);
      dest[1] = xy + wz;
      dest[2] = xz - wy;
      dest[3] = 0;
  
      dest[4] = xy - wz;
      dest[5] = 1 - (xx + zz);
      dest[6] = yz + wx;
      dest[7] = 0;
  
      dest[8] = xz + wy;
      dest[9] = yz - wx;
      dest[10] = 1 - (xx + yy);
      dest[11] = 0;
  
      dest[12] = 0;
      dest[13] = 0;
      dest[14] = 0;
      dest[15] = 1;
  
      return dest;
  };
  
  /**
   * Performs a spherical linear interpolation between two quat4
   *
   * @param {quat4} quat First quaternion
   * @param {quat4} quat2 Second quaternion
   * @param {number} slerp Interpolation amount between the two inputs
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.slerp = function (quat, quat2, slerp, dest) {
      if (!dest) { dest = quat; }
  
      var cosHalfTheta = quat[0] * quat2[0] + quat[1] * quat2[1] + quat[2] * quat2[2] + quat[3] * quat2[3],
          halfTheta,
          sinHalfTheta,
          ratioA,
          ratioB;
  
      if (Math.abs(cosHalfTheta) >= 1.0) {
          if (dest !== quat) {
              dest[0] = quat[0];
              dest[1] = quat[1];
              dest[2] = quat[2];
              dest[3] = quat[3];
          }
          return dest;
      }
  
      halfTheta = Math.acos(cosHalfTheta);
      sinHalfTheta = Math.sqrt(1.0 - cosHalfTheta * cosHalfTheta);
  
      if (Math.abs(sinHalfTheta) < 0.001) {
          dest[0] = (quat[0] * 0.5 + quat2[0] * 0.5);
          dest[1] = (quat[1] * 0.5 + quat2[1] * 0.5);
          dest[2] = (quat[2] * 0.5 + quat2[2] * 0.5);
          dest[3] = (quat[3] * 0.5 + quat2[3] * 0.5);
          return dest;
      }
  
      ratioA = Math.sin((1 - slerp) * halfTheta) / sinHalfTheta;
      ratioB = Math.sin(slerp * halfTheta) / sinHalfTheta;
  
      dest[0] = (quat[0] * ratioA + quat2[0] * ratioB);
      dest[1] = (quat[1] * ratioA + quat2[1] * ratioB);
      dest[2] = (quat[2] * ratioA + quat2[2] * ratioB);
      dest[3] = (quat[3] * ratioA + quat2[3] * ratioB);
  
      return dest;
  };
  
  /**
   * Returns a string representation of a quaternion
   *
   * @param {quat4} quat quat4 to represent as a string
   *
   * @returns {string} String representation of quat
   */
  quat4.str = function (quat) {
      return '[' + quat[0] + ', ' + quat[1] + ', ' + quat[2] + ', ' + quat[3] + ']';
  };
  
  
  return {
    vec3: vec3,
    mat3: mat3,
    mat4: mat4,
    quat4: quat4
  };
  
  })();
  
  ;
  var GLImmediateSetup={};
  
  function _glIsEnabled(x0) { return GLctx['isEnabled'](x0) }
  
  
  function emscriptenWebGLGet(name_, p, type) {
      // Guard against user passing a null pointer.
      // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
      // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
      // better to report an error instead of doing anything random.
      if (!p) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var ret = undefined;
      switch(name_) { // Handle a few trivial GLES values
        case 0x8DFA: // GL_SHADER_COMPILER
          ret = 1;
          break;
        case 0x8DF8: // GL_SHADER_BINARY_FORMATS
          if (type !== 'Integer' && type !== 'Integer64') {
            GL.recordError(0x0500); // GL_INVALID_ENUM
          }
          return; // Do not write anything to the out pointer, since no binary formats are supported.
        case 0x87FE: // GL_NUM_PROGRAM_BINARY_FORMATS
        case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
          ret = 0;
          break;
        case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
          // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
          // so implement it ourselves to allow C++ GLES2 code get the length.
          var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
          ret = formats.length;
          break;
        case 0x821D: // GL_NUM_EXTENSIONS
          if (GLctx.canvas.GLctxObject.version < 2) {
            GL.recordError(0x0502 /* GL_INVALID_OPERATION */); // Calling GLES3/WebGL2 function with a GLES2/WebGL1 context
            return;
          }
          var exts = GLctx.getSupportedExtensions();
          ret = 2*exts.length; // each extension is duplicated, first in unprefixed WebGL form, and then a second time with "GL_" prefix.
          break;
        case 0x821B: // GL_MAJOR_VERSION
        case 0x821C: // GL_MINOR_VERSION
          if (GLctx.canvas.GLctxObject.version < 2) {
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return;
          }
          ret = name_ == 0x821B ? 3 : 0; // return version 3.0
          break;
      }
  
      if (ret === undefined) {
        var result = GLctx.getParameter(name_);
        switch (typeof(result)) {
          case "number":
            ret = result;
            break;
          case "boolean":
            ret = result ? 1 : 0;
            break;
          case "string":
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return;
          case "object":
            if (result === null) {
              // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
              // can mean an invalid name_, which we need to report as an error
              switch(name_) {
                case 0x8894: // ARRAY_BUFFER_BINDING
                case 0x8B8D: // CURRENT_PROGRAM
                case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                case 0x8CA6: // FRAMEBUFFER_BINDING
                case 0x8CA7: // RENDERBUFFER_BINDING
                case 0x8069: // TEXTURE_BINDING_2D
                case 0x85B5: // GL_VERTEX_ARRAY_BINDING
                case 0x8919: // GL_SAMPLER_BINDING
                case 0x8E25: // GL_TRANSFORM_FEEDBACK_BINDING
                case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                  ret = 0;
                  break;
                }
                default: {
                  GL.recordError(0x0500); // GL_INVALID_ENUM
                  return;
                }
              }
            } else if (result instanceof Float32Array ||
                       result instanceof Uint32Array ||
                       result instanceof Int32Array ||
                       result instanceof Array) {
              for (var i = 0; i < result.length; ++i) {
                switch (type) {
                  case 'Integer': HEAP32[(((p)+(i*4))>>2)]=result[i];   break;
                  case 'Float':   HEAPF32[(((p)+(i*4))>>2)]=result[i]; break;
                  case 'Boolean': HEAP8[(((p)+(i))>>0)]=result[i] ? 1 : 0;    break;
                  default: throw 'internal glGet error, bad type: ' + type;
                }
              }
              return;
            } else if (result instanceof WebGLBuffer ||
                       result instanceof WebGLProgram ||
                       result instanceof WebGLFramebuffer ||
                       result instanceof WebGLRenderbuffer ||
                       result instanceof WebGLQuery ||
                       result instanceof WebGLSampler ||
                       result instanceof WebGLSync ||
                       result instanceof WebGLTransformFeedback ||
                       result instanceof WebGLVertexArrayObject ||
                       result instanceof WebGLTexture) {
              ret = result.name | 0;
            } else {
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
            }
            break;
          default:
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return;
        }
      }
  
      switch (type) {
        case 'Integer64': (tempI64 = [ret>>>0,(tempDouble=ret,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((p)>>2)]=tempI64[0],HEAP32[(((p)+(4))>>2)]=tempI64[1]);    break;
        case 'Integer': HEAP32[((p)>>2)]=ret;    break;
        case 'Float':   HEAPF32[((p)>>2)]=ret;  break;
        case 'Boolean': HEAP8[((p)>>0)]=ret ? 1 : 0; break;
        default: throw 'internal glGet error, bad type: ' + type;
      }
    }function _glGetBooleanv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Boolean');
    }
  
  function _glGetIntegerv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Integer');
    }
  
  function _glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret; 
      switch(name_) {
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x9245 /* UNMASKED_VENDOR_WEBGL */:
        case 0x9246 /* UNMASKED_RENDERER_WEBGL */:
          ret = allocate(intArrayFromString(GLctx.getParameter(name_)), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F02 /* GL_VERSION */:
          var glVersion = GLctx.getParameter(GLctx.VERSION);
          // return GLES version string corresponding to the version of the WebGL context
          if (GLctx.canvas.GLctxObject.version >= 2) glVersion = 'OpenGL ES 3.0 (' + glVersion + ')';
          else
          {
            glVersion = 'OpenGL ES 2.0 (' + glVersion + ')';
          }
          ret = allocate(intArrayFromString(glVersion), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions();
          var gl_exts = [];
          for (var i = 0; i < exts.length; ++i) {
            gl_exts.push(exts[i]);
            gl_exts.push("GL_" + exts[i]);
          }
          ret = allocate(intArrayFromString(gl_exts.join(' ')), 'i8', ALLOC_NORMAL);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          var glslVersion = GLctx.getParameter(GLctx.SHADING_LANGUAGE_VERSION);
          // extract the version number 'N.M' from the string 'WebGL GLSL ES N.M ...'
          var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
          var ver_num = glslVersion.match(ver_re);
          if (ver_num !== null) {
            if (ver_num[1].length == 3) ver_num[1] = ver_num[1] + '0'; // ensure minor version has 2 digits
            glslVersion = 'OpenGL ES GLSL ES ' + ver_num[1] + ' (' + glslVersion + ')';
          }
          ret = allocate(intArrayFromString(glslVersion), 'i8', ALLOC_NORMAL);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }
  
  function _glDetachShader(program, shader) {
      GLctx.detachShader(GL.programs[program],
                              GL.shaders[shader]);
    }
  
  function _glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }
  
  function _glGetFloatv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Float');
    }
  
  function _glHint(x0, x1) { GLctx['hint'](x0, x1) }
  
  function _glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }var GLEmulation={fogStart:0,fogEnd:1,fogDensity:1,fogColor:null,fogMode:2048,fogEnabled:false,vaos:[],currentVao:null,enabledVertexAttribArrays:{},hasRunInit:false,init:function () {
        // Do not activate immediate/emulation code (e.g. replace glDrawElements) when in FULL_ES2 mode.
        // We do not need full emulation, we instead emulate client-side arrays etc. in FULL_ES2 code in
        // a straightforward manner, and avoid not having a bound buffer be ambiguous between es2 emulation
        // code and legacy gl emulation code.
  
        if (GLEmulation.hasRunInit) {
          return;
        }
        GLEmulation.hasRunInit = true;
  
        GLEmulation.fogColor = new Float32Array(4);
  
        // Add some emulation workarounds
        Module.printErr('WARNING: using emscripten GL emulation. This is a collection of limited workarounds, do not expect it to work.');
        Module.printErr('WARNING: using emscripten GL emulation unsafe opts. If weirdness happens, try -s GL_UNSAFE_OPTS=0');
  
        // XXX some of the capabilities we don't support may lead to incorrect rendering, if we do not emulate them in shaders
        var validCapabilities = {
          0x0B44: 1, // GL_CULL_FACE
          0x0BE2: 1, // GL_BLEND
          0x0BD0: 1, // GL_DITHER,
          0x0B90: 1, // GL_STENCIL_TEST
          0x0B71: 1, // GL_DEPTH_TEST
          0x0C11: 1, // GL_SCISSOR_TEST
          0x8037: 1, // GL_POLYGON_OFFSET_FILL
          0x809E: 1, // GL_SAMPLE_ALPHA_TO_COVERAGE
          0x80A0: 1  // GL_SAMPLE_COVERAGE
        };
  
  
  
        var glEnable = _glEnable;
        _glEnable = _emscripten_glEnable = function _glEnable(cap) {
          // Clean up the renderer on any change to the rendering state. The optimization of
          // skipping renderer setup is aimed at the case of multiple glDraw* right after each other
          if (GLImmediate.lastRenderer) GLImmediate.lastRenderer.cleanup();
          if (cap == 0x0B60 /* GL_FOG */) {
            if (GLEmulation.fogEnabled != true) {
              GLImmediate.currentRenderer = null; // Fog parameter is part of the FFP shader state, we must re-lookup the renderer to use.
              GLEmulation.fogEnabled = true;
            }
            return;
          } else if (cap == 0x0de1 /* GL_TEXTURE_2D */) {
            // XXX not according to spec, and not in desktop GL, but works in some GLES1.x apparently, so support
            // it by forwarding to glEnableClientState
            /* Actually, let's not, for now. (This sounds exceedingly broken)
             * This is in gl_ps_workaround2.c.
            _glEnableClientState(cap);
            */
            return;
          } else if (!(cap in validCapabilities)) {
            return;
          }
          glEnable(cap);
        };
        
  
        var glDisable = _glDisable;
        _glDisable = _emscripten_glDisable = function _glDisable(cap) {
          if (GLImmediate.lastRenderer) GLImmediate.lastRenderer.cleanup();
          if (cap == 0x0B60 /* GL_FOG */) {
            if (GLEmulation.fogEnabled != false) {
              GLImmediate.currentRenderer = null; // Fog parameter is part of the FFP shader state, we must re-lookup the renderer to use.
              GLEmulation.fogEnabled = false;
            }
            return;
          } else if (cap == 0x0de1 /* GL_TEXTURE_2D */) {
            // XXX not according to spec, and not in desktop GL, but works in some GLES1.x apparently, so support
            // it by forwarding to glDisableClientState
            /* Actually, let's not, for now. (This sounds exceedingly broken)
             * This is in gl_ps_workaround2.c.
            _glDisableClientState(cap);
            */
            return;
          } else if (!(cap in validCapabilities)) {
            return;
          }
          glDisable(cap);
        };
        
  
        _glIsEnabled = _emscripten_glIsEnabled = function _glIsEnabled(cap) {
          if (cap == 0x0B60 /* GL_FOG */) {
            return GLEmulation.fogEnabled ? 1 : 0;
          } else if (!(cap in validCapabilities)) {
            return 0;
          }
          return GLctx.isEnabled(cap);
        };
        
  
        var glGetBooleanv = _glGetBooleanv;
        _glGetBooleanv = _emscripten_glGetBooleanv = function _glGetBooleanv(pname, p) {
          var attrib = GLEmulation.getAttributeFromCapability(pname);
          if (attrib !== null) {
            var result = GLImmediate.enabledClientAttributes[attrib];
            HEAP8[((p)>>0)]=result === true ? 1 : 0;
            return;
          }
          glGetBooleanv(pname, p);
        };
        
  
        var glGetIntegerv = _glGetIntegerv;
        _glGetIntegerv = _emscripten_glGetIntegerv = function _glGetIntegerv(pname, params) {
          switch (pname) {
            case 0x84E2: pname = GLctx.MAX_TEXTURE_IMAGE_UNITS /* fake it */; break; // GL_MAX_TEXTURE_UNITS
            case 0x8B4A: { // GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB
              var result = GLctx.getParameter(GLctx.MAX_VERTEX_UNIFORM_VECTORS);
              HEAP32[((params)>>2)]=result*4; // GLES gives num of 4-element vectors, GL wants individual components, so multiply
              return;
            }
            case 0x8B49: { // GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB
              var result = GLctx.getParameter(GLctx.MAX_FRAGMENT_UNIFORM_VECTORS);
              HEAP32[((params)>>2)]=result*4; // GLES gives num of 4-element vectors, GL wants individual components, so multiply
              return;
            }
            case 0x8B4B: { // GL_MAX_VARYING_FLOATS_ARB
              var result = GLctx.getParameter(GLctx.MAX_VARYING_VECTORS);
              HEAP32[((params)>>2)]=result*4; // GLES gives num of 4-element vectors, GL wants individual components, so multiply
              return;
            }
            case 0x8871: pname = GLctx.MAX_COMBINED_TEXTURE_IMAGE_UNITS /* close enough */; break; // GL_MAX_TEXTURE_COORDS
            case 0x807A: { // GL_VERTEX_ARRAY_SIZE
              var attribute = GLImmediate.clientAttributes[GLImmediate.VERTEX];
              HEAP32[((params)>>2)]=attribute ? attribute.size : 0;
              return;
            }
            case 0x807B: { // GL_VERTEX_ARRAY_TYPE
              var attribute = GLImmediate.clientAttributes[GLImmediate.VERTEX];
              HEAP32[((params)>>2)]=attribute ? attribute.type : 0;
              return;
            }
            case 0x807C: { // GL_VERTEX_ARRAY_STRIDE
              var attribute = GLImmediate.clientAttributes[GLImmediate.VERTEX];
              HEAP32[((params)>>2)]=attribute ? attribute.stride : 0;
              return;
            }
            case 0x8081: { // GL_COLOR_ARRAY_SIZE
              var attribute = GLImmediate.clientAttributes[GLImmediate.COLOR];
              HEAP32[((params)>>2)]=attribute ? attribute.size : 0;
              return;
            }
            case 0x8082: { // GL_COLOR_ARRAY_TYPE
              var attribute = GLImmediate.clientAttributes[GLImmediate.COLOR];
              HEAP32[((params)>>2)]=attribute ? attribute.type : 0;
              return;
            }
            case 0x8083: { // GL_COLOR_ARRAY_STRIDE
              var attribute = GLImmediate.clientAttributes[GLImmediate.COLOR];
              HEAP32[((params)>>2)]=attribute ? attribute.stride : 0;
              return;
            }
            case 0x8088: { // GL_TEXTURE_COORD_ARRAY_SIZE
              var attribute = GLImmediate.clientAttributes[GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture];
              HEAP32[((params)>>2)]=attribute ? attribute.size : 0;
              return;
            }
            case 0x8089: { // GL_TEXTURE_COORD_ARRAY_TYPE
              var attribute = GLImmediate.clientAttributes[GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture];
              HEAP32[((params)>>2)]=attribute ? attribute.type : 0;
              return;
            }
            case 0x808A: { // GL_TEXTURE_COORD_ARRAY_STRIDE
              var attribute = GLImmediate.clientAttributes[GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture];
              HEAP32[((params)>>2)]=attribute ? attribute.stride : 0;
              return;
            }
          }
          glGetIntegerv(pname, params);
        };
        
  
        var glGetString = _glGetString;
        _glGetString = _emscripten_glGetString = function _glGetString(name_) {
          if (GL.stringCache[name_]) return GL.stringCache[name_];
          switch(name_) {
            case 0x1F03 /* GL_EXTENSIONS */: // Add various extensions that we can support
              var ret = allocate(intArrayFromString(GLctx.getSupportedExtensions().join(' ') +
                     ' GL_EXT_texture_env_combine GL_ARB_texture_env_crossbar GL_ATI_texture_env_combine3 GL_NV_texture_env_combine4 GL_EXT_texture_env_dot3 GL_ARB_multitexture GL_ARB_vertex_buffer_object GL_EXT_framebuffer_object GL_ARB_vertex_program GL_ARB_fragment_program GL_ARB_shading_language_100 GL_ARB_shader_objects GL_ARB_vertex_shader GL_ARB_fragment_shader GL_ARB_texture_cube_map GL_EXT_draw_range_elements' +
                     (GL.currentContext.compressionExt ? ' GL_ARB_texture_compression GL_EXT_texture_compression_s3tc' : '') +
                     (GL.currentContext.anisotropicExt ? ' GL_EXT_texture_filter_anisotropic' : '')
              ), 'i8', ALLOC_NORMAL);
              GL.stringCache[name_] = ret;
              return ret;
          }
          return glGetString(name_);
        };
        
  
        // Do some automatic rewriting to work around GLSL differences. Note that this must be done in
        // tandem with the rest of the program, by itself it cannot suffice.
        // Note that we need to remember shader types for this rewriting, saving sources makes it easier to debug.
        GL.shaderInfos = {};
        var glCreateShader = _glCreateShader;
        _glCreateShader = _emscripten_glCreateShader = function _glCreateShader(shaderType) {
          var id = glCreateShader(shaderType);
          GL.shaderInfos[id] = {
            type: shaderType,
            ftransform: false
          };
          return id;
        };
        
  
        function ensurePrecision(source) {
          if (!/precision +(low|medium|high)p +float *;/.test(source)) {
            source = 'precision mediump float;\n' + source;
          }
          return source;
        }
  
        var glShaderSource = _glShaderSource;
        _glShaderSource = _emscripten_glShaderSource = function _glShaderSource(shader, count, string, length) {
          var source = GL.getSource(shader, count, string, length);
          // XXX We add attributes and uniforms to shaders. The program can ask for the # of them, and see the
          // ones we generated, potentially confusing it? Perhaps we should hide them.
          if (GL.shaderInfos[shader].type == GLctx.VERTEX_SHADER) {
            // Replace ftransform() with explicit project/modelview transforms, and add position and matrix info.
            var has_pm = source.search(/u_projection/) >= 0;
            var has_mm = source.search(/u_modelView/) >= 0;
            var has_pv = source.search(/a_position/) >= 0;
            var need_pm = 0, need_mm = 0, need_pv = 0;
            var old = source;
            source = source.replace(/ftransform\(\)/g, '(u_projection * u_modelView * a_position)');
            if (old != source) need_pm = need_mm = need_pv = 1;
            old = source;
            source = source.replace(/gl_ProjectionMatrix/g, 'u_projection');
            if (old != source) need_pm = 1;
            old = source;
            source = source.replace(/gl_ModelViewMatrixTranspose\[2\]/g, 'vec4(u_modelView[0][2], u_modelView[1][2], u_modelView[2][2], u_modelView[3][2])'); // XXX extremely inefficient
            if (old != source) need_mm = 1;
            old = source;
            source = source.replace(/gl_ModelViewMatrix/g, 'u_modelView');
            if (old != source) need_mm = 1;
            old = source;
            source = source.replace(/gl_Vertex/g, 'a_position');
            if (old != source) need_pv = 1;
            old = source;
            source = source.replace(/gl_ModelViewProjectionMatrix/g, '(u_projection * u_modelView)');
            if (old != source) need_pm = need_mm = 1;
            if (need_pv && !has_pv) source = 'attribute vec4 a_position; \n' + source;
            if (need_mm && !has_mm) source = 'uniform mat4 u_modelView; \n' + source;
            if (need_pm && !has_pm) source = 'uniform mat4 u_projection; \n' + source;
            GL.shaderInfos[shader].ftransform = need_pm || need_mm || need_pv; // we will need to provide the fixed function stuff as attributes and uniforms
            for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
              // XXX To handle both regular texture mapping and cube mapping, we use vec4 for tex coordinates.
              var old = source;
              var need_vtc = source.search('v_texCoord' + i) == -1;
              source = source.replace(new RegExp('gl_TexCoord\\[' + i + '\\]', 'g'), 'v_texCoord' + i)
                             .replace(new RegExp('gl_MultiTexCoord' + i, 'g'), 'a_texCoord' + i);
              if (source != old) {
                source = 'attribute vec4 a_texCoord' + i + '; \n' + source;
                if (need_vtc) {
                  source = 'varying vec4 v_texCoord' + i + ';   \n' + source;
                }
              }
  
              old = source;
              source = source.replace(new RegExp('gl_TextureMatrix\\[' + i + '\\]', 'g'), 'u_textureMatrix' + i);
              if (source != old) {
                source = 'uniform mat4 u_textureMatrix' + i + '; \n' + source;
              }
            }
            if (source.indexOf('gl_FrontColor') >= 0) {
              source = 'varying vec4 v_color; \n' +
                       source.replace(/gl_FrontColor/g, 'v_color');
            }
            if (source.indexOf('gl_Color') >= 0) {
              source = 'attribute vec4 a_color; \n' +
                       source.replace(/gl_Color/g, 'a_color');
            }
            if (source.indexOf('gl_Normal') >= 0) {
              source = 'attribute vec3 a_normal; \n' +
                       source.replace(/gl_Normal/g, 'a_normal');
            }
            // fog
            if (source.indexOf('gl_FogFragCoord') >= 0) {
              source = 'varying float v_fogFragCoord;   \n' +
                       source.replace(/gl_FogFragCoord/g, 'v_fogFragCoord');
            }
            source = ensurePrecision(source);
          } else { // Fragment shader
            for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
              var old = source;
              source = source.replace(new RegExp('gl_TexCoord\\[' + i + '\\]', 'g'), 'v_texCoord' + i);
              if (source != old) {
                source = 'varying vec4 v_texCoord' + i + ';   \n' + source;
              }
            }
            if (source.indexOf('gl_Color') >= 0) {
              source = 'varying vec4 v_color; \n' + source.replace(/gl_Color/g, 'v_color');
            }
            if (source.indexOf('gl_Fog.color') >= 0) {
              source = 'uniform vec4 u_fogColor;   \n' +
                       source.replace(/gl_Fog.color/g, 'u_fogColor');
            }
            if (source.indexOf('gl_Fog.end') >= 0) {
              source = 'uniform float u_fogEnd;   \n' +
                       source.replace(/gl_Fog.end/g, 'u_fogEnd');
            }
            if (source.indexOf('gl_Fog.scale') >= 0) {
              source = 'uniform float u_fogScale;   \n' +
                       source.replace(/gl_Fog.scale/g, 'u_fogScale');
            }
            if (source.indexOf('gl_Fog.density') >= 0) {
              source = 'uniform float u_fogDensity;   \n' +
                       source.replace(/gl_Fog.density/g, 'u_fogDensity');
            }
            if (source.indexOf('gl_FogFragCoord') >= 0) {
              source = 'varying float v_fogFragCoord;   \n' +
                       source.replace(/gl_FogFragCoord/g, 'v_fogFragCoord');
            }
            source = ensurePrecision(source);
          }
          GLctx.shaderSource(GL.shaders[shader], source);
        };
        
  
        var glCompileShader = _glCompileShader;
        _glCompileShader = _emscripten_glCompileShader = function _glCompileShader(shader) {
          GLctx.compileShader(GL.shaders[shader]);
        };
        
  
        GL.programShaders = {};
        var glAttachShader = _glAttachShader;
        _glAttachShader = _emscripten_glAttachShader = function _glAttachShader(program, shader) {
          if (!GL.programShaders[program]) GL.programShaders[program] = [];
          GL.programShaders[program].push(shader);
          glAttachShader(program, shader);
        };
        
  
        var glDetachShader = _glDetachShader;
        _glDetachShader = _emscripten_glDetachShader = function _glDetachShader(program, shader) {
          var programShader = GL.programShaders[program];
          if (!programShader) {
            Module.printErr('WARNING: _glDetachShader received invalid program: ' + program);
            return;
          }
          var index = programShader.indexOf(shader);
          programShader.splice(index, 1);
          glDetachShader(program, shader);
        };
        
  
        var glUseProgram = _glUseProgram;
        _glUseProgram = _emscripten_glUseProgram = function _glUseProgram(program) {
          if (GL.currProgram != program) {
            GLImmediate.currentRenderer = null; // This changes the FFP emulation shader program, need to recompute that.
            GL.currProgram = program;
            GLImmediate.fixedFunctionProgram = 0;
            glUseProgram(program);
          }
        }
        
  
        var glDeleteProgram = _glDeleteProgram;
        _glDeleteProgram = _emscripten_glDeleteProgram = function _glDeleteProgram(program) {
          glDeleteProgram(program);
          if (program == GL.currProgram) {
            GLImmediate.currentRenderer = null; // This changes the FFP emulation shader program, need to recompute that.
            GL.currProgram = 0;
          }
        };
        
  
        // If attribute 0 was not bound, bind it to 0 for WebGL performance reasons. Track if 0 is free for that.
        var zeroUsedPrograms = {};
        var glBindAttribLocation = _glBindAttribLocation;
        _glBindAttribLocation = _emscripten_glBindAttribLocation = function _glBindAttribLocation(program, index, name) {
          if (index == 0) zeroUsedPrograms[program] = true;
          glBindAttribLocation(program, index, name);
        };
        
  
        var glLinkProgram = _glLinkProgram;
        _glLinkProgram = _emscripten_glLinkProgram = function _glLinkProgram(program) {
          if (!(program in zeroUsedPrograms)) {
            GLctx.bindAttribLocation(GL.programs[program], 0, 'a_position');
          }
          glLinkProgram(program);
        };
        
  
        var glBindBuffer = _glBindBuffer;
        _glBindBuffer = _emscripten_glBindBuffer = function _glBindBuffer(target, buffer) {
          glBindBuffer(target, buffer);
          if (target == GLctx.ARRAY_BUFFER) {
            if (GLEmulation.currentVao) {
              assert(GLEmulation.currentVao.arrayBuffer == buffer || GLEmulation.currentVao.arrayBuffer == 0 || buffer == 0, 'TODO: support for multiple array buffers in vao');
              GLEmulation.currentVao.arrayBuffer = buffer;
            }
          } else if (target == GLctx.ELEMENT_ARRAY_BUFFER) {
            if (GLEmulation.currentVao) GLEmulation.currentVao.elementArrayBuffer = buffer;
          }
        };
        
  
        var glGetFloatv = _glGetFloatv;
        _glGetFloatv = _emscripten_glGetFloatv = function _glGetFloatv(pname, params) {
          if (pname == 0x0BA6) { // GL_MODELVIEW_MATRIX
            HEAPF32.set(GLImmediate.matrix[0/*m*/], params >> 2);
          } else if (pname == 0x0BA7) { // GL_PROJECTION_MATRIX
            HEAPF32.set(GLImmediate.matrix[1/*p*/], params >> 2);
          } else if (pname == 0x0BA8) { // GL_TEXTURE_MATRIX
            HEAPF32.set(GLImmediate.matrix[2/*t*/ + GLImmediate.clientActiveTexture], params >> 2);
          } else if (pname == 0x0B66) { // GL_FOG_COLOR
            HEAPF32.set(GLEmulation.fogColor, params >> 2);
          } else if (pname == 0x0B63) { // GL_FOG_START
            HEAPF32[((params)>>2)]=GLEmulation.fogStart;
          } else if (pname == 0x0B64) { // GL_FOG_END
            HEAPF32[((params)>>2)]=GLEmulation.fogEnd;
          } else if (pname == 0x0B62) { // GL_FOG_DENSITY
            HEAPF32[((params)>>2)]=GLEmulation.fogDensity;
          } else if (pname == 0x0B65) { // GL_FOG_MODE
            HEAPF32[((params)>>2)]=GLEmulation.fogMode;
          } else {
            glGetFloatv(pname, params);
          }
        };
        
  
        var glHint = _glHint;
        _glHint = _emscripten_glHint = function _glHint(target, mode) {
          if (target == 0x84EF) { // GL_TEXTURE_COMPRESSION_HINT
            return;
          }
          glHint(target, mode);
        };
        
  
        var glEnableVertexAttribArray = _glEnableVertexAttribArray;
        _glEnableVertexAttribArray = _emscripten_glEnableVertexAttribArray = function _glEnableVertexAttribArray(index) {
          glEnableVertexAttribArray(index);
          GLEmulation.enabledVertexAttribArrays[index] = 1;
          if (GLEmulation.currentVao) GLEmulation.currentVao.enabledVertexAttribArrays[index] = 1;
        };
        
  
        var glDisableVertexAttribArray = _glDisableVertexAttribArray;
        _glDisableVertexAttribArray = _emscripten_glDisableVertexAttribArray = function _glDisableVertexAttribArray(index) {
          glDisableVertexAttribArray(index);
          delete GLEmulation.enabledVertexAttribArrays[index];
          if (GLEmulation.currentVao) delete GLEmulation.currentVao.enabledVertexAttribArrays[index];
        };
        
  
        var glVertexAttribPointer = _glVertexAttribPointer;
        _glVertexAttribPointer = _emscripten_glVertexAttribPointer = function _glVertexAttribPointer(index, size, type, normalized, stride, pointer) {
          glVertexAttribPointer(index, size, type, normalized, stride, pointer);
          if (GLEmulation.currentVao) { // TODO: avoid object creation here? likely not hot though
            GLEmulation.currentVao.vertexAttribPointers[index] = [index, size, type, normalized, stride, pointer];
          }
        };
        
      },getAttributeFromCapability:function (cap) {
        var attrib = null;
        switch (cap) {
          case 0x0de1: // GL_TEXTURE_2D - XXX not according to spec, and not in desktop GL, but works in some GLES1.x apparently, so support it
            abort("GL_TEXTURE_2D is not a spec-defined capability for gl{Enable,Disable}ClientState.");
            // Fall through:
          case 0x8078: // GL_TEXTURE_COORD_ARRAY
            attrib = GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture; break;
          case 0x8074: // GL_VERTEX_ARRAY
            attrib = GLImmediate.VERTEX; break;
          case 0x8075: // GL_NORMAL_ARRAY
            attrib = GLImmediate.NORMAL; break;
          case 0x8076: // GL_COLOR_ARRAY
            attrib = GLImmediate.COLOR; break;
        }
        return attrib;
      }};function _emulGlGenVertexArrays(n, vaos) {
      for (var i = 0; i < n; i++) {
        var id = GL.getNewId(GLEmulation.vaos);
        GLEmulation.vaos[id] = {
          id: id,
          arrayBuffer: 0,
          elementArrayBuffer: 0,
          enabledVertexAttribArrays: {},
          vertexAttribPointers: {},
          enabledClientStates: {},
        };
        HEAP32[(((vaos)+(i*4))>>2)]=id;
      }
    }function _glGenVertexArrays(n, arrays) {
      _emulGlGenVertexArrays(n, arrays);
    }

   

  function _SDL_GL_SwapBuffers() {
      if (Browser.doSwapBuffers) Browser.doSwapBuffers(); // in workers, this is used to send out a buffered frame
    }

  function _glGetActiveUniform(program, index, bufSize, length, size, type, name) {
      program = GL.programs[program];
      var info = GLctx.getActiveUniform(program, index);
      if (!info) return; // If an error occurs, nothing will be written to length, size, type and name.
  
      if (bufSize > 0 && name) {
        var numBytesWrittenExclNull = stringToUTF8(info.name, name, bufSize);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
  
      if (size) HEAP32[((size)>>2)]=info.size;
      if (type) HEAP32[((type)>>2)]=info.type;
    }

  
    

  function _SDL_Init(initFlags) {
      SDL.startTime = Date.now();
      SDL.initFlags = initFlags;
  
      // capture all key events. we just keep down and up, but also capture press to prevent default actions
      if (!Module['doNotCaptureKeyboard']) {
        var keyboardListeningElement = Module['keyboardListeningElement'] || document;
        keyboardListeningElement.addEventListener("keydown", SDL.receiveEvent);
        keyboardListeningElement.addEventListener("keyup", SDL.receiveEvent);
        keyboardListeningElement.addEventListener("keypress", SDL.receiveEvent);
        window.addEventListener("focus", SDL.receiveEvent);
        window.addEventListener("blur", SDL.receiveEvent);
        document.addEventListener("visibilitychange", SDL.receiveEvent);
      }
  
      if (initFlags & 0x200) {
        // SDL_INIT_JOYSTICK
        // Firefox will not give us Joystick data unless we register this NOP
        // callback.
        // https://bugzilla.mozilla.org/show_bug.cgi?id=936104
        addEventListener("gamepadconnected", function() {});
      }
  
      window.addEventListener("unload", SDL.receiveEvent);
      SDL.keyboardState = _malloc(0x10000); // Our SDL needs 512, but 64K is safe for older SDLs
      _memset(SDL.keyboardState, 0, 0x10000);
      // Initialize this structure carefully for closure
      SDL.DOMEventToSDLEvent['keydown']    = 0x300  /* SDL_KEYDOWN */;
      SDL.DOMEventToSDLEvent['keyup']      = 0x301  /* SDL_KEYUP */;
      SDL.DOMEventToSDLEvent['keypress']   = 0x303  /* SDL_TEXTINPUT */;
      SDL.DOMEventToSDLEvent['mousedown']  = 0x401  /* SDL_MOUSEBUTTONDOWN */;
      SDL.DOMEventToSDLEvent['mouseup']    = 0x402  /* SDL_MOUSEBUTTONUP */;
      SDL.DOMEventToSDLEvent['mousemove']  = 0x400  /* SDL_MOUSEMOTION */;
      SDL.DOMEventToSDLEvent['wheel']      = 0x403  /* SDL_MOUSEWHEEL */; 
      SDL.DOMEventToSDLEvent['touchstart'] = 0x700  /* SDL_FINGERDOWN */;
      SDL.DOMEventToSDLEvent['touchend']   = 0x701  /* SDL_FINGERUP */;
      SDL.DOMEventToSDLEvent['touchmove']  = 0x702  /* SDL_FINGERMOTION */;
      SDL.DOMEventToSDLEvent['unload']     = 0x100  /* SDL_QUIT */;
      SDL.DOMEventToSDLEvent['resize']     = 0x7001 /* SDL_VIDEORESIZE/SDL_EVENT_COMPAT2 */;
      SDL.DOMEventToSDLEvent['visibilitychange'] = 0x200 /* SDL_WINDOWEVENT */;
      SDL.DOMEventToSDLEvent['focus']      = 0x200 /* SDL_WINDOWEVENT */;
      SDL.DOMEventToSDLEvent['blur']       = 0x200 /* SDL_WINDOWEVENT */;
  
      // These are not technically DOM events; the HTML gamepad API is poll-based.
      // However, we define them here, as the rest of the SDL code assumes that
      // all SDL events originate as DOM events.
      SDL.DOMEventToSDLEvent['joystick_axis_motion'] = 0x600 /* SDL_JOYAXISMOTION */;
      SDL.DOMEventToSDLEvent['joystick_button_down'] = 0x603 /* SDL_JOYBUTTONDOWN */;
      SDL.DOMEventToSDLEvent['joystick_button_up'] = 0x604 /* SDL_JOYBUTTONUP */;
      return 0; // success
    }

  function _glTexParameteri(x0, x1, x2) { GLctx['texParameteri'](x0, x1, x2) }

  function _glutReshapeFunc(func) {
      GLUT.reshapeFunc = func;
    }

  var _llvm_sqrt_f32=Math_sqrt;

  function _llvm_trap() {
      abort('trap!');
    }

  function _glGetShaderiv(shader, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B88) { // GL_SHADER_SOURCE_LENGTH
        var source = GLctx.getShaderSource(GL.shaders[shader]);
        var sourceLength = (source === null || source.length == 0) ? 0 : source.length + 1;
        HEAP32[((p)>>2)]=sourceLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _pthread_condattr_init() { return 0; }

  function _glutKeyboardFunc(func) {
      GLUT.keyboardFunc = func;
    }

var GLctx; GL.init();
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
___buildEnvironment(ENV);;
GLEmulation.init();;
GLImmediate.setupFuncs(); Browser.moduleContextCreatedCallbacks.push(function() { GLImmediate.init() });;
DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);

STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");


function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_d(x) { Module["printErr"]("Invalid function pointer called with signature 'd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_di(x) { Module["printErr"]("Invalid function pointer called with signature 'di'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vidddd(x) { Module["printErr"]("Invalid function pointer called with signature 'vidddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiid(x) { Module["printErr"]("Invalid function pointer called with signature 'viiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vdddd(x) { Module["printErr"]("Invalid function pointer called with signature 'vdddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_d(index) {
  try {
    return Module["dynCall_d"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_di(index,a1) {
  try {
    return Module["dynCall_di"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vidddd(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_vidddd"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiid(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiid"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vdddd(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_vdddd"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_d": nullFunc_d, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_di": nullFunc_di, "nullFunc_i": nullFunc_i, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_vidddd": nullFunc_vidddd, "nullFunc_viiiiiiiii": nullFunc_viiiiiiiii, "nullFunc_ii": nullFunc_ii, "nullFunc_viiid": nullFunc_viiid, "nullFunc_vdddd": nullFunc_vdddd, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "invoke_viiiii": invoke_viiiii, "invoke_d": invoke_d, "invoke_viiiiiii": invoke_viiiiiii, "invoke_di": invoke_di, "invoke_i": invoke_i, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_vidddd": invoke_vidddd, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_ii": invoke_ii, "invoke_viiid": invoke_viiid, "invoke_vdddd": invoke_vdddd, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iiiii": invoke_iiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_viiii": invoke_viiii, "_glUseProgram": _glUseProgram, "_pthread_key_create": _pthread_key_create, "_glUniformMatrix4fv": _glUniformMatrix4fv, "_SDL_RWFromFile": _SDL_RWFromFile, "_glutKeyboardUpFunc": _glutKeyboardUpFunc, "_glDeleteProgram": _glDeleteProgram, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_glBindBuffer": _glBindBuffer, "_glGetShaderInfoLog": _glGetShaderInfoLog, "_glutSpecialUpFunc": _glutSpecialUpFunc, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_glutPassiveMotionFunc": _glutPassiveMotionFunc, "_glutReshapeWindow": _glutReshapeWindow, "_glDisableVertexAttribArray": _glDisableVertexAttribArray, "_Mix_PlayChannel": _Mix_PlayChannel, "_TTF_RenderText_Solid": _TTF_RenderText_Solid, "_glGenBuffers": _glGenBuffers, "_Mix_PlayMusic": _Mix_PlayMusic, "__emscripten_traverse_stack": __emscripten_traverse_stack, "_pthread_condattr_init": _pthread_condattr_init, "_pthread_mutexattr_settype": _pthread_mutexattr_settype, "_Mix_LoadWAV_RW": _Mix_LoadWAV_RW, "_glutSpecialFunc": _glutSpecialFunc, "_glShaderSource": _glShaderSource, "_llvm_sqrt_f32": _llvm_sqrt_f32, "_glutMotionFunc": _glutMotionFunc, "_glGetBooleanv": _glGetBooleanv, "_glutCreateWindow": _glutCreateWindow, "_llvm_trap": _llvm_trap, "_IMG_Load_RW": _IMG_Load_RW, "___syscall146": ___syscall146, "_glVertexAttribPointer": _glVertexAttribPointer, "_glHint": _glHint, "_SDL_GL_SetAttribute": _SDL_GL_SetAttribute, "_glutDisplayFunc": _glutDisplayFunc, "_glutGet": _glutGet, "_glGetProgramInfoLog": _glGetProgramInfoLog, "_emscripten_get_callstack_js": _emscripten_get_callstack_js, "_SDL_GetTicks": _SDL_GetTicks, "___cxa_free_exception": ___cxa_free_exception, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_pthread_cond_init": _pthread_cond_init, "_glDrawElements": _glDrawElements, "_glutInitDisplayMode": _glutInitDisplayMode, "_SDL_LockSurface": _SDL_LockSurface, "_glViewport": _glViewport, "_Mix_HaltMusic": _Mix_HaltMusic, "___setErrNo": ___setErrNo, "_pthread_rwlock_rdlock": _pthread_rwlock_rdlock, "___resumeException": ___resumeException, "_pthread_condattr_setclock": _pthread_condattr_setclock, "_glutReshapeFunc": _glutReshapeFunc, "_glEnable": _glEnable, "_dladdr": _dladdr, "_glGenTextures": _glGenTextures, "_glGetIntegerv": _glGetIntegerv, "_glGetString": _glGetString, "emscriptenWebGLGet": emscriptenWebGLGet, "_emscripten_get_now": _emscripten_get_now, "_emulGlBindVertexArray": _emulGlBindVertexArray, "_glAttachShader": _glAttachShader, "_glCreateProgram": _glCreateProgram, "_TTF_SizeText": _TTF_SizeText, "___lock": ___lock, "_SDL_SetVideoMode": _SDL_SetVideoMode, "___syscall6": ___syscall6, "___syscall4": ___syscall4, "_glDetachShader": _glDetachShader, "_SDL_UpperBlitScaled": _SDL_UpperBlitScaled, "_putenv": _putenv, "_emscripten_run_script": _emscripten_run_script, "_glutGetModifiers": _glutGetModifiers, "_IMG_Load": _IMG_Load, "_TTF_FontHeight": _TTF_FontHeight, "_pthread_rwlock_unlock": _pthread_rwlock_unlock, "___cxa_allocate_exception": ___cxa_allocate_exception, "___buildEnvironment": ___buildEnvironment, "emscriptenWebGLGetShiftForType": emscriptenWebGLGetShiftForType, "__Unwind_GetIPInfo": __Unwind_GetIPInfo, "_pthread_key_delete": _pthread_key_delete, "_glClearColor": _glClearColor, "_glIsEnabled": _glIsEnabled, "_SDL_Init": _SDL_Init, "_glGetAttribLocation": _glGetAttribLocation, "_glGetFloatv": _glGetFloatv, "_glutIdleFunc": _glutIdleFunc, "_glDrawArrays": _glDrawArrays, "_glCreateShader": _glCreateShader, "_glGetError": _glGetError, "_emulGlGenVertexArrays": _emulGlGenVertexArrays, "_pthread_mutex_destroy": _pthread_mutex_destroy, "_glutPostRedisplay": _glutPostRedisplay, "_glutMouseFunc": _glutMouseFunc, "_glGetActiveUniform": _glGetActiveUniform, "_glActiveTexture": _glActiveTexture, "_glCompileShader": _glCompileShader, "_glEnableVertexAttribArray": _glEnableVertexAttribArray, "_abort": _abort, "_glBindVertexArray": _glBindVertexArray, "_glBufferData": _glBufferData, "_glTexImage2D": _glTexImage2D, "__Unwind_Backtrace": __Unwind_Backtrace, "_glFlush": _glFlush, "_pthread_getspecific": _pthread_getspecific, "_pthread_cond_wait": _pthread_cond_wait, "_glEnableClientState": _glEnableClientState, "_glGetProgramiv": _glGetProgramiv, "emscriptenWebGLGetTexPixelData": emscriptenWebGLGetTexPixelData, "__Unwind_FindEnclosingFunction": __Unwind_FindEnclosingFunction, "_glutKeyboardFunc": _glutKeyboardFunc, "_glGenVertexArrays": _glGenVertexArrays, "emscriptenWebGLComputeImageSize": emscriptenWebGLComputeImageSize, "_SDL_CloseAudio": _SDL_CloseAudio, "___gxx_personality_v0": ___gxx_personality_v0, "___cxa_find_matching_catch_2": ___cxa_find_matching_catch_2, "___cxa_find_matching_catch_3": ___cxa_find_matching_catch_3, "_glLinkProgram": _glLinkProgram, "_glTexEnvi": _glTexEnvi, "_pthread_mutexattr_destroy": _pthread_mutexattr_destroy, "_pthread_cond_signal": _pthread_cond_signal, "_SDL_PauseAudio": _SDL_PauseAudio, "_glGetUniformLocation": _glGetUniformLocation, "_glClear": _glClear, "_glUniform4fv": _glUniform4fv, "_Mix_FreeChunk": _Mix_FreeChunk, "_glBindTexture": _glBindTexture, "emscriptenWebGLGetHeapForType": emscriptenWebGLGetHeapForType, "_llvm_sin_f32": _llvm_sin_f32, "_glBindAttribLocation": _glBindAttribLocation, "_glGetShaderiv": _glGetShaderiv, "_llvm_cos_f32": _llvm_cos_f32, "_pthread_condattr_destroy": _pthread_condattr_destroy, "___syscall54": ___syscall54, "___unlock": ___unlock, "___syscall140": ___syscall140, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_pthread_mutexattr_init": _pthread_mutexattr_init, "_pthread_setspecific": _pthread_setspecific, "_getenv": _getenv, "___cxa_throw": ___cxa_throw, "_SDL_GL_SwapBuffers": _SDL_GL_SwapBuffers, "_glutInit": _glutInit, "_glDisable": _glDisable, "_glTexParameteri": _glTexParameteri, "_pthread_cond_destroy": _pthread_cond_destroy, "_SDL_FreeRW": _SDL_FreeRW, "_SDL_UpperBlit": _SDL_UpperBlit, "_pthread_mutex_init": _pthread_mutex_init, "_SDL_RWFromConstMem": _SDL_RWFromConstMem, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
'almost asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_d=env.nullFunc_d;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var nullFunc_di=env.nullFunc_di;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_vidddd=env.nullFunc_vidddd;
  var nullFunc_viiiiiiiii=env.nullFunc_viiiiiiiii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viiid=env.nullFunc_viiid;
  var nullFunc_vdddd=env.nullFunc_vdddd;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_d=env.invoke_d;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_di=env.invoke_di;
  var invoke_i=env.invoke_i;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_vidddd=env.invoke_vidddd;
  var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_viiid=env.invoke_viiid;
  var invoke_vdddd=env.invoke_vdddd;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_viiii=env.invoke_viiii;
  var _glUseProgram=env._glUseProgram;
  var _pthread_key_create=env._pthread_key_create;
  var _glUniformMatrix4fv=env._glUniformMatrix4fv;
  var _SDL_RWFromFile=env._SDL_RWFromFile;
  var _glutKeyboardUpFunc=env._glutKeyboardUpFunc;
  var _glDeleteProgram=env._glDeleteProgram;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _glBindBuffer=env._glBindBuffer;
  var _glGetShaderInfoLog=env._glGetShaderInfoLog;
  var _glutSpecialUpFunc=env._glutSpecialUpFunc;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _glutPassiveMotionFunc=env._glutPassiveMotionFunc;
  var _glutReshapeWindow=env._glutReshapeWindow;
  var _glDisableVertexAttribArray=env._glDisableVertexAttribArray;
  var _Mix_PlayChannel=env._Mix_PlayChannel;
  var _TTF_RenderText_Solid=env._TTF_RenderText_Solid;
  var _glGenBuffers=env._glGenBuffers;
  var _Mix_PlayMusic=env._Mix_PlayMusic;
  var __emscripten_traverse_stack=env.__emscripten_traverse_stack;
  var _pthread_condattr_init=env._pthread_condattr_init;
  var _pthread_mutexattr_settype=env._pthread_mutexattr_settype;
  var _Mix_LoadWAV_RW=env._Mix_LoadWAV_RW;
  var _glutSpecialFunc=env._glutSpecialFunc;
  var _glShaderSource=env._glShaderSource;
  var _llvm_sqrt_f32=env._llvm_sqrt_f32;
  var _glutMotionFunc=env._glutMotionFunc;
  var _glGetBooleanv=env._glGetBooleanv;
  var _glutCreateWindow=env._glutCreateWindow;
  var _llvm_trap=env._llvm_trap;
  var _IMG_Load_RW=env._IMG_Load_RW;
  var ___syscall146=env.___syscall146;
  var _glVertexAttribPointer=env._glVertexAttribPointer;
  var _glHint=env._glHint;
  var _SDL_GL_SetAttribute=env._SDL_GL_SetAttribute;
  var _glutDisplayFunc=env._glutDisplayFunc;
  var _glutGet=env._glutGet;
  var _glGetProgramInfoLog=env._glGetProgramInfoLog;
  var _emscripten_get_callstack_js=env._emscripten_get_callstack_js;
  var _SDL_GetTicks=env._SDL_GetTicks;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _pthread_cond_init=env._pthread_cond_init;
  var _glDrawElements=env._glDrawElements;
  var _glutInitDisplayMode=env._glutInitDisplayMode;
  var _SDL_LockSurface=env._SDL_LockSurface;
  var _glViewport=env._glViewport;
  var _Mix_HaltMusic=env._Mix_HaltMusic;
  var ___setErrNo=env.___setErrNo;
  var _pthread_rwlock_rdlock=env._pthread_rwlock_rdlock;
  var ___resumeException=env.___resumeException;
  var _pthread_condattr_setclock=env._pthread_condattr_setclock;
  var _glutReshapeFunc=env._glutReshapeFunc;
  var _glEnable=env._glEnable;
  var _dladdr=env._dladdr;
  var _glGenTextures=env._glGenTextures;
  var _glGetIntegerv=env._glGetIntegerv;
  var _glGetString=env._glGetString;
  var emscriptenWebGLGet=env.emscriptenWebGLGet;
  var _emscripten_get_now=env._emscripten_get_now;
  var _emulGlBindVertexArray=env._emulGlBindVertexArray;
  var _glAttachShader=env._glAttachShader;
  var _glCreateProgram=env._glCreateProgram;
  var _TTF_SizeText=env._TTF_SizeText;
  var ___lock=env.___lock;
  var _SDL_SetVideoMode=env._SDL_SetVideoMode;
  var ___syscall6=env.___syscall6;
  var ___syscall4=env.___syscall4;
  var _glDetachShader=env._glDetachShader;
  var _SDL_UpperBlitScaled=env._SDL_UpperBlitScaled;
  var _putenv=env._putenv;
  var _emscripten_run_script=env._emscripten_run_script;
  var _glutGetModifiers=env._glutGetModifiers;
  var _IMG_Load=env._IMG_Load;
  var _TTF_FontHeight=env._TTF_FontHeight;
  var _pthread_rwlock_unlock=env._pthread_rwlock_unlock;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var ___buildEnvironment=env.___buildEnvironment;
  var emscriptenWebGLGetShiftForType=env.emscriptenWebGLGetShiftForType;
  var __Unwind_GetIPInfo=env.__Unwind_GetIPInfo;
  var _pthread_key_delete=env._pthread_key_delete;
  var _glClearColor=env._glClearColor;
  var _glIsEnabled=env._glIsEnabled;
  var _SDL_Init=env._SDL_Init;
  var _glGetAttribLocation=env._glGetAttribLocation;
  var _glGetFloatv=env._glGetFloatv;
  var _glutIdleFunc=env._glutIdleFunc;
  var _glDrawArrays=env._glDrawArrays;
  var _glCreateShader=env._glCreateShader;
  var _glGetError=env._glGetError;
  var _emulGlGenVertexArrays=env._emulGlGenVertexArrays;
  var _pthread_mutex_destroy=env._pthread_mutex_destroy;
  var _glutPostRedisplay=env._glutPostRedisplay;
  var _glutMouseFunc=env._glutMouseFunc;
  var _glGetActiveUniform=env._glGetActiveUniform;
  var _glActiveTexture=env._glActiveTexture;
  var _glCompileShader=env._glCompileShader;
  var _glEnableVertexAttribArray=env._glEnableVertexAttribArray;
  var _abort=env._abort;
  var _glBindVertexArray=env._glBindVertexArray;
  var _glBufferData=env._glBufferData;
  var _glTexImage2D=env._glTexImage2D;
  var __Unwind_Backtrace=env.__Unwind_Backtrace;
  var _glFlush=env._glFlush;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _glEnableClientState=env._glEnableClientState;
  var _glGetProgramiv=env._glGetProgramiv;
  var emscriptenWebGLGetTexPixelData=env.emscriptenWebGLGetTexPixelData;
  var __Unwind_FindEnclosingFunction=env.__Unwind_FindEnclosingFunction;
  var _glutKeyboardFunc=env._glutKeyboardFunc;
  var _glGenVertexArrays=env._glGenVertexArrays;
  var emscriptenWebGLComputeImageSize=env.emscriptenWebGLComputeImageSize;
  var _SDL_CloseAudio=env._SDL_CloseAudio;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___cxa_find_matching_catch_2=env.___cxa_find_matching_catch_2;
  var ___cxa_find_matching_catch_3=env.___cxa_find_matching_catch_3;
  var _glLinkProgram=env._glLinkProgram;
  var _glTexEnvi=env._glTexEnvi;
  var _pthread_mutexattr_destroy=env._pthread_mutexattr_destroy;
  var _pthread_cond_signal=env._pthread_cond_signal;
  var _SDL_PauseAudio=env._SDL_PauseAudio;
  var _glGetUniformLocation=env._glGetUniformLocation;
  var _glClear=env._glClear;
  var _glUniform4fv=env._glUniform4fv;
  var _Mix_FreeChunk=env._Mix_FreeChunk;
  var _glBindTexture=env._glBindTexture;
  var emscriptenWebGLGetHeapForType=env.emscriptenWebGLGetHeapForType;
  var _llvm_sin_f32=env._llvm_sin_f32;
  var _glBindAttribLocation=env._glBindAttribLocation;
  var _glGetShaderiv=env._glGetShaderiv;
  var _llvm_cos_f32=env._llvm_cos_f32;
  var _pthread_condattr_destroy=env._pthread_condattr_destroy;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var ___syscall140=env.___syscall140;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _pthread_mutexattr_init=env._pthread_mutexattr_init;
  var _pthread_setspecific=env._pthread_setspecific;
  var _getenv=env._getenv;
  var ___cxa_throw=env.___cxa_throw;
  var _SDL_GL_SwapBuffers=env._SDL_GL_SwapBuffers;
  var _glutInit=env._glutInit;
  var _glDisable=env._glDisable;
  var _glTexParameteri=env._glTexParameteri;
  var _pthread_cond_destroy=env._pthread_cond_destroy;
  var _SDL_FreeRW=env._SDL_FreeRW;
  var _SDL_UpperBlit=env._SDL_UpperBlit;
  var _pthread_mutex_init=env._pthread_mutex_init;
  var _SDL_RWFromConstMem=env._SDL_RWFromConstMem;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function __ZN3std9panicking11begin_panic17h1a4c9be19e7ea39bE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $file_line_col = 0, $msg = 0, $x$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$i = sp + 16|0;
 $msg = sp;
 HEAP32[$msg>>2] = $0;
 $3 = ((($msg)) + 4|0);
 HEAP32[$3>>2] = $1;
 $file_line_col = $2;
 $4 = HEAP32[$msg>>2]|0; //@line 538 "/checkout/src/libstd/panicking.rs"
 $5 = ((($msg)) + 4|0); //@line 538 "/checkout/src/libstd/panicking.rs"
 $6 = HEAP32[$5>>2]|0; //@line 538 "/checkout/src/libstd/panicking.rs"
 HEAP32[$x$i>>2] = $4;
 $7 = ((($x$i)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = (__ZN5alloc4heap15exchange_malloc17h2b3df7e8451de4ebE(8,4)|0); //@line 242 "/checkout/src/liballoc/boxed.rs"
 $9 = HEAP32[$x$i>>2]|0; //@line 242 "/checkout/src/liballoc/boxed.rs"
 $10 = ((($x$i)) + 4|0); //@line 242 "/checkout/src/liballoc/boxed.rs"
 $11 = HEAP32[$10>>2]|0; //@line 242 "/checkout/src/liballoc/boxed.rs"
 HEAP32[$8>>2] = $9; //@line 242 "/checkout/src/liballoc/boxed.rs"
 $12 = ((($8)) + 4|0); //@line 242 "/checkout/src/liballoc/boxed.rs"
 HEAP32[$12>>2] = $11; //@line 242 "/checkout/src/liballoc/boxed.rs"
 $13 = $file_line_col; //@line 538 "/checkout/src/libstd/panicking.rs"
 __ZN3std9panicking20rust_panic_with_hook17h3cd58f4b456754d8E($8,3164,$13); //@line 538 "/checkout/src/libstd/panicking.rs"
 // unreachable; //@line 538 "/checkout/src/libstd/panicking.rs"
}
function __ZN4core3cmp3max17h4405a58e9b937f43E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $v1 = 0, $v2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $v1 = $0;
 $v2 = $1;
 $2 = $v1; //@line 754 "/checkout/src/libcore/cmp.rs"
 $3 = $v2; //@line 754 "/checkout/src/libcore/cmp.rs"
 $4 = (__ZN4core3cmp3Ord3max17hc285ce8b1e2a02fbE($2,$3)|0); //@line 754 "/checkout/src/libcore/cmp.rs"
 STACKTOP = sp;return ($4|0); //@line 755 "/checkout/src/libcore/cmp.rs"
}
function __ZN4core3cmp3Ord3max17hc285ce8b1e2a02fbE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_8 = 0;
 var $_9 = 0, $other = 0, $personalityslot = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $personalityslot = sp + 16|0;
 $other = sp + 4|0;
 $self = sp;
 HEAP32[$self>>2] = $0;
 HEAP32[$other>>2] = $1;
 $_8 = 0; //@line 462 "/checkout/src/libcore/cmp.rs"
 $_9 = 0; //@line 462 "/checkout/src/libcore/cmp.rs"
 $_8 = 1; //@line 462 "/checkout/src/libcore/cmp.rs"
 $_9 = 1; //@line 462 "/checkout/src/libcore/cmp.rs"
 __THREW__ = 0;
 $2 = (invoke_iii(159,($other|0),($self|0))|0); //@line 462 "/checkout/src/libcore/cmp.rs"
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $15 = ___cxa_find_matching_catch_2()|0;
  $16 = tempRet0;
  HEAP32[$personalityslot>>2] = $15;
  $17 = ((($personalityslot)) + 4|0);
  HEAP32[$17>>2] = $16;
  $_9 = 0; //@line 463 "/checkout/src/libcore/cmp.rs"
  $18 = $_8; //@line 463 "/checkout/src/libcore/cmp.rs"
  $19 = $18&1; //@line 463 "/checkout/src/libcore/cmp.rs"
  if (!($19)) {
   $5 = HEAP32[$personalityslot>>2]|0; //@line 460 "/checkout/src/libcore/cmp.rs"
   $6 = ((($personalityslot)) + 4|0); //@line 460 "/checkout/src/libcore/cmp.rs"
   $7 = HEAP32[$6>>2]|0; //@line 460 "/checkout/src/libcore/cmp.rs"
   ___resumeException($5|0);
   // unreachable;
  }
  $_8 = 0; //@line 463 "/checkout/src/libcore/cmp.rs"
  $5 = HEAP32[$personalityslot>>2]|0; //@line 460 "/checkout/src/libcore/cmp.rs"
  $6 = ((($personalityslot)) + 4|0); //@line 460 "/checkout/src/libcore/cmp.rs"
  $7 = HEAP32[$6>>2]|0; //@line 460 "/checkout/src/libcore/cmp.rs"
  ___resumeException($5|0);
  // unreachable;
 }
 if ($2) {
  $_9 = 0; //@line 462 "/checkout/src/libcore/cmp.rs"
  $8 = HEAP32[$other>>2]|0; //@line 462 "/checkout/src/libcore/cmp.rs"
  $_0 = $8; //@line 462 "/checkout/src/libcore/cmp.rs"
 } else {
  $_8 = 0; //@line 462 "/checkout/src/libcore/cmp.rs"
  $9 = HEAP32[$self>>2]|0; //@line 462 "/checkout/src/libcore/cmp.rs"
  $_0 = $9; //@line 462 "/checkout/src/libcore/cmp.rs"
 }
 $10 = $_9; //@line 463 "/checkout/src/libcore/cmp.rs"
 $11 = $10&1; //@line 463 "/checkout/src/libcore/cmp.rs"
 if ($11) {
  $_9 = 0; //@line 463 "/checkout/src/libcore/cmp.rs"
 }
 $12 = $_8; //@line 463 "/checkout/src/libcore/cmp.rs"
 $13 = $12&1; //@line 463 "/checkout/src/libcore/cmp.rs"
 if (!($13)) {
  $14 = $_0; //@line 463 "/checkout/src/libcore/cmp.rs"
  STACKTOP = sp;return ($14|0); //@line 463 "/checkout/src/libcore/cmp.rs"
 }
 $_8 = 0; //@line 463 "/checkout/src/libcore/cmp.rs"
 $14 = $_0; //@line 463 "/checkout/src/libcore/cmp.rs"
 STACKTOP = sp;return ($14|0); //@line 463 "/checkout/src/libcore/cmp.rs"
}
function __ZN4core3cmp3max17hc9a0caf44efcf4dbE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $v1 = 0, $v2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $v1 = $0;
 $v2 = $1;
 $2 = $v1; //@line 754 "/checkout/src/libcore/cmp.rs"
 $3 = $v2; //@line 754 "/checkout/src/libcore/cmp.rs"
 $4 = (__ZN4core3cmp3Ord3max17h0248f68be671228aE($2,$3)|0); //@line 754 "/checkout/src/libcore/cmp.rs"
 STACKTOP = sp;return ($4|0); //@line 755 "/checkout/src/libcore/cmp.rs"
}
function __ZN4core3cmp3Ord3max17h0248f68be671228aE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_8 = 0;
 var $_9 = 0, $other = 0, $personalityslot = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $personalityslot = sp + 16|0;
 $other = sp + 4|0;
 $self = sp;
 HEAP32[$self>>2] = $0;
 HEAP32[$other>>2] = $1;
 $_8 = 0; //@line 462 "/checkout/src/libcore/cmp.rs"
 $_9 = 0; //@line 462 "/checkout/src/libcore/cmp.rs"
 $_8 = 1; //@line 462 "/checkout/src/libcore/cmp.rs"
 $_9 = 1; //@line 462 "/checkout/src/libcore/cmp.rs"
 __THREW__ = 0;
 $2 = (invoke_iii(160,($other|0),($self|0))|0); //@line 462 "/checkout/src/libcore/cmp.rs"
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $15 = ___cxa_find_matching_catch_2()|0;
  $16 = tempRet0;
  HEAP32[$personalityslot>>2] = $15;
  $17 = ((($personalityslot)) + 4|0);
  HEAP32[$17>>2] = $16;
  $_9 = 0; //@line 463 "/checkout/src/libcore/cmp.rs"
  $18 = $_8; //@line 463 "/checkout/src/libcore/cmp.rs"
  $19 = $18&1; //@line 463 "/checkout/src/libcore/cmp.rs"
  if (!($19)) {
   $5 = HEAP32[$personalityslot>>2]|0; //@line 460 "/checkout/src/libcore/cmp.rs"
   $6 = ((($personalityslot)) + 4|0); //@line 460 "/checkout/src/libcore/cmp.rs"
   $7 = HEAP32[$6>>2]|0; //@line 460 "/checkout/src/libcore/cmp.rs"
   ___resumeException($5|0);
   // unreachable;
  }
  $_8 = 0; //@line 463 "/checkout/src/libcore/cmp.rs"
  $5 = HEAP32[$personalityslot>>2]|0; //@line 460 "/checkout/src/libcore/cmp.rs"
  $6 = ((($personalityslot)) + 4|0); //@line 460 "/checkout/src/libcore/cmp.rs"
  $7 = HEAP32[$6>>2]|0; //@line 460 "/checkout/src/libcore/cmp.rs"
  ___resumeException($5|0);
  // unreachable;
 }
 if ($2) {
  $_9 = 0; //@line 462 "/checkout/src/libcore/cmp.rs"
  $8 = HEAP32[$other>>2]|0; //@line 462 "/checkout/src/libcore/cmp.rs"
  $_0 = $8; //@line 462 "/checkout/src/libcore/cmp.rs"
 } else {
  $_8 = 0; //@line 462 "/checkout/src/libcore/cmp.rs"
  $9 = HEAP32[$self>>2]|0; //@line 462 "/checkout/src/libcore/cmp.rs"
  $_0 = $9; //@line 462 "/checkout/src/libcore/cmp.rs"
 }
 $10 = $_9; //@line 463 "/checkout/src/libcore/cmp.rs"
 $11 = $10&1; //@line 463 "/checkout/src/libcore/cmp.rs"
 if ($11) {
  $_9 = 0; //@line 463 "/checkout/src/libcore/cmp.rs"
 }
 $12 = $_8; //@line 463 "/checkout/src/libcore/cmp.rs"
 $13 = $12&1; //@line 463 "/checkout/src/libcore/cmp.rs"
 if (!($13)) {
  $14 = $_0; //@line 463 "/checkout/src/libcore/cmp.rs"
  STACKTOP = sp;return ($14|0); //@line 463 "/checkout/src/libcore/cmp.rs"
 }
 $_8 = 0; //@line 463 "/checkout/src/libcore/cmp.rs"
 $14 = $_0; //@line 463 "/checkout/src/libcore/cmp.rs"
 STACKTOP = sp;return ($14|0); //@line 463 "/checkout/src/libcore/cmp.rs"
}
function __ZN4core3cmp3min17h3d41c0830ab66801E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $v1 = 0, $v2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $v1 = $0;
 $v2 = $1;
 $2 = $v1; //@line 734 "/checkout/src/libcore/cmp.rs"
 $3 = $v2; //@line 734 "/checkout/src/libcore/cmp.rs"
 $4 = (__ZN4core3cmp3Ord3min17h6eef5e8dfa9da8fbE($2,$3)|0); //@line 734 "/checkout/src/libcore/cmp.rs"
 STACKTOP = sp;return ($4|0); //@line 735 "/checkout/src/libcore/cmp.rs"
}
function __ZN4core3cmp3Ord3min17h6eef5e8dfa9da8fbE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_8 = 0;
 var $_9 = 0, $other = 0, $personalityslot = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $personalityslot = sp + 16|0;
 $other = sp + 4|0;
 $self = sp;
 HEAP32[$self>>2] = $0;
 HEAP32[$other>>2] = $1;
 $_8 = 0; //@line 478 "/checkout/src/libcore/cmp.rs"
 $_9 = 0; //@line 478 "/checkout/src/libcore/cmp.rs"
 $_8 = 1; //@line 478 "/checkout/src/libcore/cmp.rs"
 $_9 = 1; //@line 478 "/checkout/src/libcore/cmp.rs"
 __THREW__ = 0;
 $2 = (invoke_iii(161,($self|0),($other|0))|0); //@line 478 "/checkout/src/libcore/cmp.rs"
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $15 = ___cxa_find_matching_catch_2()|0;
  $16 = tempRet0;
  HEAP32[$personalityslot>>2] = $15;
  $17 = ((($personalityslot)) + 4|0);
  HEAP32[$17>>2] = $16;
  $_9 = 0; //@line 479 "/checkout/src/libcore/cmp.rs"
  $18 = $_8; //@line 479 "/checkout/src/libcore/cmp.rs"
  $19 = $18&1; //@line 479 "/checkout/src/libcore/cmp.rs"
  if (!($19)) {
   $5 = HEAP32[$personalityslot>>2]|0; //@line 476 "/checkout/src/libcore/cmp.rs"
   $6 = ((($personalityslot)) + 4|0); //@line 476 "/checkout/src/libcore/cmp.rs"
   $7 = HEAP32[$6>>2]|0; //@line 476 "/checkout/src/libcore/cmp.rs"
   ___resumeException($5|0);
   // unreachable;
  }
  $_8 = 0; //@line 479 "/checkout/src/libcore/cmp.rs"
  $5 = HEAP32[$personalityslot>>2]|0; //@line 476 "/checkout/src/libcore/cmp.rs"
  $6 = ((($personalityslot)) + 4|0); //@line 476 "/checkout/src/libcore/cmp.rs"
  $7 = HEAP32[$6>>2]|0; //@line 476 "/checkout/src/libcore/cmp.rs"
  ___resumeException($5|0);
  // unreachable;
 }
 if ($2) {
  $_8 = 0; //@line 478 "/checkout/src/libcore/cmp.rs"
  $8 = HEAP32[$self>>2]|0; //@line 478 "/checkout/src/libcore/cmp.rs"
  $_0 = $8; //@line 478 "/checkout/src/libcore/cmp.rs"
 } else {
  $_9 = 0; //@line 478 "/checkout/src/libcore/cmp.rs"
  $9 = HEAP32[$other>>2]|0; //@line 478 "/checkout/src/libcore/cmp.rs"
  $_0 = $9; //@line 478 "/checkout/src/libcore/cmp.rs"
 }
 $10 = $_9; //@line 479 "/checkout/src/libcore/cmp.rs"
 $11 = $10&1; //@line 479 "/checkout/src/libcore/cmp.rs"
 if ($11) {
  $_9 = 0; //@line 479 "/checkout/src/libcore/cmp.rs"
 }
 $12 = $_8; //@line 479 "/checkout/src/libcore/cmp.rs"
 $13 = $12&1; //@line 479 "/checkout/src/libcore/cmp.rs"
 if (!($13)) {
  $14 = $_0; //@line 479 "/checkout/src/libcore/cmp.rs"
  STACKTOP = sp;return ($14|0); //@line 479 "/checkout/src/libcore/cmp.rs"
 }
 $_8 = 0; //@line 479 "/checkout/src/libcore/cmp.rs"
 $14 = $_0; //@line 479 "/checkout/src/libcore/cmp.rs"
 STACKTOP = sp;return ($14|0); //@line 479 "/checkout/src/libcore/cmp.rs"
}
function __ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_6offset17h8805074ce8868ed7E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $count = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $count = $1;
 $2 = $self; //@line 1261 "/checkout/src/libcore/ptr.rs"
 $3 = $count; //@line 1261 "/checkout/src/libcore/ptr.rs"
 $4 = (($2) + (($3*48)|0)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
 $tmp_ret = $4; //@line 1261 "/checkout/src/libcore/ptr.rs"
 $5 = $tmp_ret; //@line 1261 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return ($5|0); //@line 1262 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h255a2e868f2a18ecE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 1170 "/checkout/src/libcore/ptr.rs"
 $2 = (__ZN4core3ptr8null_mut17h08a501618653ee44E()|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
 $3 = ($1|0)==($2|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return ($3|0); //@line 1171 "/checkout/src/libcore/ptr.rs"
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17hb6b961c3b6c5552bE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $f = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $f = $1;
 $2 = $self; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$2>>2]|0; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $4 = $f; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $5 = (__ZN71__LT_rustv__r3d__geom__Extents_LT_T_GT__u20_as_u20_core__fmt__Debug_GT_3fmt17h8079aded6e0546caE($3,$4)|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return ($5|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN71__LT_rustv__r3d__geom__Extents_LT_T_GT__u20_as_u20_core__fmt__Debug_GT_3fmt17h8079aded6e0546caE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_16 = 0, $_24 = 0, $__arg_0 = 0, $__self_0_0 = 0, $__self_0_1 = 0, $builder = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_24 = sp + 28|0;
 $_16 = sp + 24|0;
 $builder = sp + 16|0;
 $self = $0;
 $__arg_0 = $1;
 $2 = $self; //@line 86 "r3d/geom.rs"
 $__self_0_0 = $2; //@line 86 "r3d/geom.rs"
 $3 = $self; //@line 86 "r3d/geom.rs"
 $4 = ((($3)) + 8|0); //@line 86 "r3d/geom.rs"
 $__self_0_1 = $4; //@line 86 "r3d/geom.rs"
 $5 = $__arg_0; //@line 84 "r3d/geom.rs"
 __ZN4core3fmt9Formatter12debug_struct17h2d24fc5dad9395cdE($builder,$5,13379,7); //@line 84 "r3d/geom.rs"
 $6 = $__self_0_0; //@line 86 "r3d/geom.rs"
 HEAP32[$_16>>2] = $6; //@line 86 "r3d/geom.rs"
 (__ZN4core3fmt8builders11DebugStruct5field17h5f57368d80e04997E($builder,13386,3,$_16,7808)|0); //@line 84 "r3d/geom.rs"
 $7 = $__self_0_1; //@line 86 "r3d/geom.rs"
 HEAP32[$_24>>2] = $7; //@line 86 "r3d/geom.rs"
 (__ZN4core3fmt8builders11DebugStruct5field17h5f57368d80e04997E($builder,13389,3,$_24,7808)|0); //@line 84 "r3d/geom.rs"
 $8 = (__ZN4core3fmt8builders11DebugStruct6finish17h63c8c54de379106dE($builder)|0); //@line 84 "r3d/geom.rs"
 STACKTOP = sp;return ($8|0); //@line 84 "r3d/geom.rs"
}
function __ZN5alloc5slice29__LT_impl_u20__u5b_T_u5d__GT_10as_mut_ptr17h527160738d4bc457E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp;
 HEAP32[$self>>2] = $0;
 $2 = ((($self)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$self>>2]|0; //@line 499 "/checkout/src/liballoc/slice.rs"
 $4 = ((($self)) + 4|0); //@line 499 "/checkout/src/liballoc/slice.rs"
 $5 = HEAP32[$4>>2]|0; //@line 499 "/checkout/src/liballoc/slice.rs"
 $6 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17h11340362c19bcbb2E($3,$5)|0); //@line 499 "/checkout/src/liballoc/slice.rs"
 STACKTOP = sp;return ($6|0); //@line 500 "/checkout/src/liballoc/slice.rs"
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17h11340362c19bcbb2E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp;
 HEAP32[$self>>2] = $0;
 $2 = ((($self)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$self>>2]|0; //@line 617 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return ($3|0); //@line 618 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN5rustv3r3d5c_str17h24b9d36d97df309cE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$arith = 0, $$arith21 = 0, $$ispos = 0, $$ispos26 = 0, $$negcheck = 0, $$negcheck25 = 0, $$negtemp = 0, $$negtemp23 = 0, $$poscheck = 0, $$poscheck24 = 0, $$postemp = 0, $$postemp22 = 0, $$select = 0, $$select27 = 0, $$sreg$field = 0, $$sreg$field6 = 0, $$sreg$index5 = 0, $$sreg1$field = 0, $$sreg1$field9 = 0, $$sreg1$index8 = 0;
 var $$sreg2$field = 0, $$sreg2$field12 = 0, $$sreg2$index11 = 0, $$sreg3$field = 0, $$sreg3$field15 = 0, $$sreg3$index14 = 0, $$sreg4$field = 0, $$sreg4$field18 = 0, $$sreg4$index17 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_25 = 0, $_32 = 0, $_33 = 0, $_53 = 0, $_60 = 0, $_61 = 0, $__arg0 = 0, $__arg01 = 0, $__arg1 = 0, $__arg12 = 0, $__arg2 = 0, $i = 0, $last_char = 0, $len = 0, $r = 0;
 var $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $2 = sp + 64|0;
 $3 = sp + 48|0;
 $4 = sp + 32|0;
 $5 = sp + 16|0;
 $6 = sp;
 $_61 = sp + 200|0;
 $_60 = sp + 176|0;
 $_53 = sp + 152|0;
 $_33 = sp + 136|0;
 $_32 = sp + 120|0;
 $_25 = sp + 96|0;
 $i = sp + 88|0;
 $last_char = sp + 224|0;
 $len = sp + 80|0;
 $s = sp + 72|0;
 HEAP32[$s>>2] = $0;
 $7 = ((($s)) + 4|0);
 HEAP32[$7>>2] = $1;
 $8 = HEAP32[$s>>2]|0; //@line 72 "r3d/mod.rs"
 $9 = ((($s)) + 4|0); //@line 72 "r3d/mod.rs"
 $10 = HEAP32[$9>>2]|0; //@line 72 "r3d/mod.rs"
 $11 = (__ZN5alloc3str21__LT_impl_u20_str_GT_3len17h80991aa095f3a65dE($8,$10)|0); //@line 72 "r3d/mod.rs"
 HEAP32[$len>>2] = $11; //@line 72 "r3d/mod.rs"
 $12 = HEAP32[$s>>2]|0; //@line 74 "r3d/mod.rs"
 $13 = ((($s)) + 4|0); //@line 74 "r3d/mod.rs"
 $14 = HEAP32[$13>>2]|0; //@line 74 "r3d/mod.rs"
 $15 = (__ZN5alloc3str21__LT_impl_u20_str_GT_6as_ptr17ha541499c65855fceE($12,$14)|0); //@line 74 "r3d/mod.rs"
 $r = $15; //@line 74 "r3d/mod.rs"
 $16 = $r; //@line 75 "r3d/mod.rs"
 $17 = HEAP32[$len>>2]|0; //@line 75 "r3d/mod.rs"
 $$arith21 = (($17) - 1)|0; //@line 75 "r3d/mod.rs"
 $$postemp22 = (($17) + -2147483647)|0; //@line 75 "r3d/mod.rs"
 $$negtemp23 = (($17) + -2147483648)|0; //@line 75 "r3d/mod.rs"
 $$poscheck24 = ($$arith21|0)<($$postemp22|0); //@line 75 "r3d/mod.rs"
 $$negcheck25 = ($$arith21|0)>($$negtemp23|0); //@line 75 "r3d/mod.rs"
 $$ispos26 = ($17|0)>=(0); //@line 75 "r3d/mod.rs"
 $$select27 = $$ispos26 ? $$poscheck24 : $$negcheck25; //@line 75 "r3d/mod.rs"
 $18 = $$select27; //@line 75 "r3d/mod.rs"
 if ($18) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(3252); //@line 75 "r3d/mod.rs"
  // unreachable; //@line 75 "r3d/mod.rs"
 }
 $19 = (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_6offset17h34e3882c32f92199E($16,$$arith21)|0); //@line 75 "r3d/mod.rs"
 $20 = HEAP8[$19>>0]|0; //@line 75 "r3d/mod.rs"
 HEAP8[$last_char>>0] = $20; //@line 75 "r3d/mod.rs"
 $21 = HEAP8[$last_char>>0]|0; //@line 76 "r3d/mod.rs"
 $22 = ($21<<24>>24)!=(0); //@line 76 "r3d/mod.rs"
 if (!($22)) {
  $23 = $r; //@line 84 "r3d/mod.rs"
  STACKTOP = sp;return ($23|0); //@line 85 "r3d/mod.rs"
 }
 HEAP32[$i>>2] = 0; //@line 77 "r3d/mod.rs"
 while(1) {
  $24 = HEAP32[$i>>2]|0; //@line 78 "r3d/mod.rs"
  $25 = HEAP32[$len>>2]|0; //@line 78 "r3d/mod.rs"
  $26 = ($24|0)<($25|0); //@line 78 "r3d/mod.rs"
  if (!($26)) {
   label = 6;
   break;
  }
  $43 = $r; //@line 79 "r3d/mod.rs"
  $44 = HEAP32[$i>>2]|0; //@line 79 "r3d/mod.rs"
  $45 = (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_6offset17h34e3882c32f92199E($43,$44)|0); //@line 79 "r3d/mod.rs"
  HEAP32[$_33>>2] = $i; //@line 79 "r3d/mod.rs"
  $46 = ((($_33)) + 4|0); //@line 79 "r3d/mod.rs"
  HEAP32[$46>>2] = $45; //@line 79 "r3d/mod.rs"
  $47 = HEAP32[$_33>>2]|0; //@line 79 "r3d/mod.rs"
  $__arg0 = $47; //@line 79 "r3d/mod.rs"
  $48 = ((($_33)) + 4|0); //@line 79 "r3d/mod.rs"
  $49 = HEAP32[$48>>2]|0; //@line 79 "r3d/mod.rs"
  $__arg1 = $49; //@line 79 "r3d/mod.rs"
  $50 = $__arg0; //@line 79 "r3d/mod.rs"
  __ZN4core3fmt10ArgumentV13new17h015bb9f1401d5999E($3,$50,163); //@line 79 "r3d/mod.rs"
  $$sreg3$field = HEAP32[$3>>2]|0; //@line 79 "r3d/mod.rs"
  $$sreg3$index14 = ((($3)) + 4|0); //@line 79 "r3d/mod.rs"
  $$sreg3$field15 = HEAP32[$$sreg3$index14>>2]|0; //@line 79 "r3d/mod.rs"
  $51 = $__arg1; //@line 79 "r3d/mod.rs"
  __ZN4core3fmt10ArgumentV13new17hf7be953a10f1c908E($2,$51,165); //@line 79 "r3d/mod.rs"
  $$sreg4$field = HEAP32[$2>>2]|0; //@line 79 "r3d/mod.rs"
  $$sreg4$index17 = ((($2)) + 4|0); //@line 79 "r3d/mod.rs"
  $$sreg4$field18 = HEAP32[$$sreg4$index17>>2]|0; //@line 79 "r3d/mod.rs"
  HEAP32[$_32>>2] = $$sreg3$field; //@line 79 "r3d/mod.rs"
  $52 = ((($_32)) + 4|0); //@line 79 "r3d/mod.rs"
  HEAP32[$52>>2] = $$sreg3$field15; //@line 79 "r3d/mod.rs"
  $53 = ((($_32)) + 8|0); //@line 79 "r3d/mod.rs"
  HEAP32[$53>>2] = $$sreg4$field; //@line 79 "r3d/mod.rs"
  $54 = ((($53)) + 4|0); //@line 79 "r3d/mod.rs"
  HEAP32[$54>>2] = $$sreg4$field18; //@line 79 "r3d/mod.rs"
  $55 = HEAP32[1819]|0; //@line 79 "r3d/mod.rs"
  __ZN4core3fmt9Arguments16new_v1_formatted17hd7921c86529aa3b1E($_25,3180,3,$_32,2,$55,2); //@line 79 "r3d/mod.rs"
  __ZN3std2io5stdio6_print17h5e38a8ff46cfb3e1E($_25); //@line 79 "r3d/mod.rs"
  $56 = HEAP32[$i>>2]|0; //@line 80 "r3d/mod.rs"
  $$arith = (($56) + 1)|0; //@line 80 "r3d/mod.rs"
  $$postemp = (($56) + -2147483648)|0; //@line 80 "r3d/mod.rs"
  $$negtemp = (($56) + 2147483647)|0; //@line 80 "r3d/mod.rs"
  $$poscheck = ($$arith|0)<($$postemp|0); //@line 80 "r3d/mod.rs"
  $$negcheck = ($$arith|0)>($$negtemp|0); //@line 80 "r3d/mod.rs"
  $$ispos = ($56|0)>=(0); //@line 80 "r3d/mod.rs"
  $$select = $$ispos ? $$poscheck : $$negcheck; //@line 80 "r3d/mod.rs"
  $57 = $$select; //@line 80 "r3d/mod.rs"
  if ($57) {
   label = 10;
   break;
  }
  HEAP32[$i>>2] = $$arith; //@line 80 "r3d/mod.rs"
 }
 if ((label|0) == 6) {
  HEAP32[$_61>>2] = $s; //@line 82 "r3d/mod.rs"
  $27 = ((($_61)) + 4|0); //@line 82 "r3d/mod.rs"
  HEAP32[$27>>2] = $len; //@line 82 "r3d/mod.rs"
  $28 = ((($_61)) + 8|0); //@line 82 "r3d/mod.rs"
  HEAP32[$28>>2] = $last_char; //@line 82 "r3d/mod.rs"
  $29 = HEAP32[$_61>>2]|0; //@line 82 "r3d/mod.rs"
  $__arg01 = $29; //@line 82 "r3d/mod.rs"
  $30 = ((($_61)) + 4|0); //@line 82 "r3d/mod.rs"
  $31 = HEAP32[$30>>2]|0; //@line 82 "r3d/mod.rs"
  $__arg12 = $31; //@line 82 "r3d/mod.rs"
  $32 = ((($_61)) + 8|0); //@line 82 "r3d/mod.rs"
  $33 = HEAP32[$32>>2]|0; //@line 82 "r3d/mod.rs"
  $__arg2 = $33; //@line 82 "r3d/mod.rs"
  $34 = $__arg01; //@line 82 "r3d/mod.rs"
  __ZN4core3fmt10ArgumentV13new17heecba43e0c9da516E($6,$34,162); //@line 82 "r3d/mod.rs"
  $$sreg$field = HEAP32[$6>>2]|0; //@line 82 "r3d/mod.rs"
  $$sreg$index5 = ((($6)) + 4|0); //@line 82 "r3d/mod.rs"
  $$sreg$field6 = HEAP32[$$sreg$index5>>2]|0; //@line 82 "r3d/mod.rs"
  $35 = $__arg12; //@line 82 "r3d/mod.rs"
  __ZN4core3fmt10ArgumentV13new17h015bb9f1401d5999E($5,$35,163); //@line 82 "r3d/mod.rs"
  $$sreg1$field = HEAP32[$5>>2]|0; //@line 82 "r3d/mod.rs"
  $$sreg1$index8 = ((($5)) + 4|0); //@line 82 "r3d/mod.rs"
  $$sreg1$field9 = HEAP32[$$sreg1$index8>>2]|0; //@line 82 "r3d/mod.rs"
  $36 = $__arg2; //@line 82 "r3d/mod.rs"
  __ZN4core3fmt10ArgumentV13new17hf7be953a10f1c908E($4,$36,164); //@line 82 "r3d/mod.rs"
  $$sreg2$field = HEAP32[$4>>2]|0; //@line 82 "r3d/mod.rs"
  $$sreg2$index11 = ((($4)) + 4|0); //@line 82 "r3d/mod.rs"
  $$sreg2$field12 = HEAP32[$$sreg2$index11>>2]|0; //@line 82 "r3d/mod.rs"
  HEAP32[$_60>>2] = $$sreg$field; //@line 82 "r3d/mod.rs"
  $37 = ((($_60)) + 4|0); //@line 82 "r3d/mod.rs"
  HEAP32[$37>>2] = $$sreg$field6; //@line 82 "r3d/mod.rs"
  $38 = ((($_60)) + 8|0); //@line 82 "r3d/mod.rs"
  HEAP32[$38>>2] = $$sreg1$field; //@line 82 "r3d/mod.rs"
  $39 = ((($38)) + 4|0); //@line 82 "r3d/mod.rs"
  HEAP32[$39>>2] = $$sreg1$field9; //@line 82 "r3d/mod.rs"
  $40 = ((($_60)) + 16|0); //@line 82 "r3d/mod.rs"
  HEAP32[$40>>2] = $$sreg2$field; //@line 82 "r3d/mod.rs"
  $41 = ((($40)) + 4|0); //@line 82 "r3d/mod.rs"
  HEAP32[$41>>2] = $$sreg2$field12; //@line 82 "r3d/mod.rs"
  $42 = HEAP32[1863]|0; //@line 82 "r3d/mod.rs"
  __ZN4core3fmt9Arguments16new_v1_formatted17hd7921c86529aa3b1E($_53,3204,4,$_60,3,$42,3); //@line 82 "r3d/mod.rs"
  __ZN3std9panicking15begin_panic_fmt17h4cb2c5614efe15b0E($_53,3236); //@line 82 "r3d/mod.rs"
  // unreachable; //@line 82 "r3d/mod.rs"
 }
 else if ((label|0) == 10) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(3276); //@line 80 "r3d/mod.rs"
  // unreachable; //@line 80 "r3d/mod.rs"
 }
 return (0)|0;
}
function __ZN5rustv3r3d11vec_from_fn17h48db4c2e78f328c4E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sreg$field = 0, $$sreg$field3 = 0, $$sreg$index2 = 0, $$sreg1$field = 0, $$sreg1$field6 = 0, $$sreg1$index5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_15 = 0, $_16 = 0, $_28 = 0, $_34 = 0, $_44 = 0, $_46 = 0, $_49 = 0, $_8 = 0, $__arg0 = 0, $__next = 0, $f = 0;
 var $iter = 0, $num = 0, $personalityslot = 0, $r = 0, $switch = 0, $val = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $3 = sp + 16|0;
 $4 = sp;
 $personalityslot = sp + 192|0;
 $_49 = sp + 180|0;
 $_44 = sp + 128|0;
 $_34 = sp + 112|0;
 $iter = sp + 96|0;
 $_28 = sp + 88|0;
 $_15 = sp + 72|0;
 $_8 = sp + 48|0;
 $r = sp + 32|0;
 $num = sp + 24|0;
 HEAP32[$num>>2] = $1;
 $f = $2;
 __ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_3new17hed5cf88f04c2798bE($r); //@line 89 "r3d/mod.rs"
 $5 = HEAP32[$num>>2]|0; //@line 90 "r3d/mod.rs"
 __THREW__ = 0;
 invoke_vii(166,($r|0),($5|0)); //@line 90 "r3d/mod.rs"
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 L1: do {
  if (!($7)) {
   $_16 = $num; //@line 91 "r3d/mod.rs"
   $8 = $_16; //@line 91 "r3d/mod.rs"
   $__arg0 = $8; //@line 91 "r3d/mod.rs"
   $9 = $__arg0; //@line 91 "r3d/mod.rs"
   __THREW__ = 0;
   invoke_viii(167,($4|0),($9|0),(168|0)); //@line 91 "r3d/mod.rs"
   $$sreg$field = HEAP32[$4>>2]|0; //@line 91 "r3d/mod.rs"
   $$sreg$index2 = ((($4)) + 4|0); //@line 91 "r3d/mod.rs"
   $$sreg$field3 = HEAP32[$$sreg$index2>>2]|0; //@line 91 "r3d/mod.rs"
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    HEAP32[$_15>>2] = $$sreg$field; //@line 91 "r3d/mod.rs"
    $12 = ((($_15)) + 4|0); //@line 91 "r3d/mod.rs"
    HEAP32[$12>>2] = $$sreg$field3; //@line 91 "r3d/mod.rs"
    $13 = HEAP32[1683]|0; //@line 91 "r3d/mod.rs"
    __THREW__ = 0;
    invoke_viiiiiii(169,($_8|0),(3300|0),2,($_15|0),1,($13|0),1); //@line 91 "r3d/mod.rs"
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if (!($15)) {
     __THREW__ = 0;
     invoke_vi(170,($_8|0)); //@line 91 "r3d/mod.rs"
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if (!($17)) {
      $18 = HEAP32[$num>>2]|0; //@line 92 "r3d/mod.rs"
      HEAP32[$_28>>2] = 0; //@line 92 "r3d/mod.rs"
      $19 = ((($_28)) + 4|0); //@line 92 "r3d/mod.rs"
      HEAP32[$19>>2] = $18; //@line 92 "r3d/mod.rs"
      $20 = HEAP32[$_28>>2]|0; //@line 92 "r3d/mod.rs"
      $21 = ((($_28)) + 4|0); //@line 92 "r3d/mod.rs"
      $22 = HEAP32[$21>>2]|0; //@line 92 "r3d/mod.rs"
      __THREW__ = 0;
      invoke_viii(171,($3|0),($20|0),($22|0)); //@line 92 "r3d/mod.rs"
      $$sreg1$field = HEAP32[$3>>2]|0; //@line 92 "r3d/mod.rs"
      $$sreg1$index5 = ((($3)) + 4|0); //@line 92 "r3d/mod.rs"
      $$sreg1$field6 = HEAP32[$$sreg1$index5>>2]|0; //@line 92 "r3d/mod.rs"
      $23 = __THREW__; __THREW__ = 0;
      $24 = $23&1;
      if (!($24)) {
       HEAP32[$iter>>2] = $$sreg1$field; //@line 92 "r3d/mod.rs"
       $25 = ((($iter)) + 4|0); //@line 92 "r3d/mod.rs"
       HEAP32[$25>>2] = $$sreg1$field6; //@line 92 "r3d/mod.rs"
       while(1) {
        __THREW__ = 0;
        invoke_vii(172,($_34|0),($iter|0)); //@line 92 "r3d/mod.rs"
        $26 = __THREW__; __THREW__ = 0;
        $27 = $26&1;
        if ($27) {
         break L1;
        }
        $28 = HEAP32[$_34>>2]|0; //@line 92 "r3d/mod.rs"
        $switch = ($28>>>0)<(1); //@line 92 "r3d/mod.rs"
        if ($switch) {
         break;
        }
        $29 = ((($_34)) + 4|0); //@line 92 "r3d/mod.rs"
        $30 = HEAP32[$29>>2]|0; //@line 92 "r3d/mod.rs"
        $val = $30; //@line 92 "r3d/mod.rs"
        $31 = $val; //@line 92 "r3d/mod.rs"
        $__next = $31; //@line 92 "r3d/mod.rs"
        $32 = $__next; //@line 92 "r3d/mod.rs"
        $x = $32; //@line 92 "r3d/mod.rs"
        $33 = $f; //@line 93 "r3d/mod.rs"
        $34 = $x; //@line 93 "r3d/mod.rs"
        $_46 = $34; //@line 93 "r3d/mod.rs"
        $35 = $_46; //@line 93 "r3d/mod.rs"
        __THREW__ = 0;
        invoke_viii(173,($_44|0),($33|0),($35|0)); //@line 93 "r3d/mod.rs"
        $36 = __THREW__; __THREW__ = 0;
        $37 = $36&1;
        if ($37) {
         break L1;
        }
        __THREW__ = 0;
        invoke_vii(174,($r|0),($_44|0)); //@line 93 "r3d/mod.rs"
        $38 = __THREW__; __THREW__ = 0;
        $39 = $38&1;
        if ($39) {
         break L1;
        }
       }
       ;HEAP32[$_49>>2]=HEAP32[$r>>2]|0;HEAP32[$_49+4>>2]=HEAP32[$r+4>>2]|0;HEAP32[$_49+8>>2]=HEAP32[$r+8>>2]|0; //@line 95 "r3d/mod.rs"
       ;HEAP32[$0>>2]=HEAP32[$_49>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_49+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_49+8>>2]|0; //@line 95 "r3d/mod.rs"
       STACKTOP = sp;return; //@line 96 "r3d/mod.rs"
      }
     }
    }
   }
  }
 } while(0);
 $40 = ___cxa_find_matching_catch_2()|0;
 $41 = tempRet0;
 HEAP32[$personalityslot>>2] = $40;
 $42 = ((($personalityslot)) + 4|0);
 HEAP32[$42>>2] = $41;
 __ZN4core3ptr13drop_in_place17h033be6a4eca0dd18E($r); //@line 96 "r3d/mod.rs"
 $43 = HEAP32[$personalityslot>>2]|0; //@line 87 "r3d/mod.rs"
 $44 = ((($personalityslot)) + 4|0); //@line 87 "r3d/mod.rs"
 $45 = HEAP32[$44>>2]|0; //@line 87 "r3d/mod.rs"
 ___resumeException($43|0);
 // unreachable;
}
function __ZN5rustv3r3d11vec_from_fn17ha44ed534a91e0e15E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sreg$field = 0, $$sreg$field3 = 0, $$sreg$index2 = 0, $$sreg1$field = 0, $$sreg1$field6 = 0, $$sreg1$index5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_15 = 0, $_16 = 0, $_28 = 0, $_34 = 0, $_46 = 0, $_49 = 0, $_8 = 0, $__arg0 = 0, $__next = 0, $f = 0;
 var $iter = 0, $num = 0, $personalityslot = 0, $r = 0, $switch = 0, $val = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $3 = sp + 16|0;
 $4 = sp;
 $personalityslot = sp + 144|0;
 $_49 = sp + 132|0;
 $_34 = sp + 112|0;
 $iter = sp + 96|0;
 $_28 = sp + 88|0;
 $_15 = sp + 72|0;
 $_8 = sp + 48|0;
 $r = sp + 32|0;
 $num = sp + 24|0;
 HEAP32[$num>>2] = $1;
 $f = $2;
 __ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_3new17h8f49465beea9d182E($r); //@line 89 "r3d/mod.rs"
 $5 = HEAP32[$num>>2]|0; //@line 90 "r3d/mod.rs"
 __THREW__ = 0;
 invoke_vii(175,($r|0),($5|0)); //@line 90 "r3d/mod.rs"
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 L1: do {
  if (!($7)) {
   $_16 = $num; //@line 91 "r3d/mod.rs"
   $8 = $_16; //@line 91 "r3d/mod.rs"
   $__arg0 = $8; //@line 91 "r3d/mod.rs"
   $9 = $__arg0; //@line 91 "r3d/mod.rs"
   __THREW__ = 0;
   invoke_viii(167,($4|0),($9|0),(168|0)); //@line 91 "r3d/mod.rs"
   $$sreg$field = HEAP32[$4>>2]|0; //@line 91 "r3d/mod.rs"
   $$sreg$index2 = ((($4)) + 4|0); //@line 91 "r3d/mod.rs"
   $$sreg$field3 = HEAP32[$$sreg$index2>>2]|0; //@line 91 "r3d/mod.rs"
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    HEAP32[$_15>>2] = $$sreg$field; //@line 91 "r3d/mod.rs"
    $12 = ((($_15)) + 4|0); //@line 91 "r3d/mod.rs"
    HEAP32[$12>>2] = $$sreg$field3; //@line 91 "r3d/mod.rs"
    $13 = HEAP32[1683]|0; //@line 91 "r3d/mod.rs"
    __THREW__ = 0;
    invoke_viiiiiii(169,($_8|0),(3300|0),2,($_15|0),1,($13|0),1); //@line 91 "r3d/mod.rs"
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if (!($15)) {
     __THREW__ = 0;
     invoke_vi(170,($_8|0)); //@line 91 "r3d/mod.rs"
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if (!($17)) {
      $18 = HEAP32[$num>>2]|0; //@line 92 "r3d/mod.rs"
      HEAP32[$_28>>2] = 0; //@line 92 "r3d/mod.rs"
      $19 = ((($_28)) + 4|0); //@line 92 "r3d/mod.rs"
      HEAP32[$19>>2] = $18; //@line 92 "r3d/mod.rs"
      $20 = HEAP32[$_28>>2]|0; //@line 92 "r3d/mod.rs"
      $21 = ((($_28)) + 4|0); //@line 92 "r3d/mod.rs"
      $22 = HEAP32[$21>>2]|0; //@line 92 "r3d/mod.rs"
      __THREW__ = 0;
      invoke_viii(171,($3|0),($20|0),($22|0)); //@line 92 "r3d/mod.rs"
      $$sreg1$field = HEAP32[$3>>2]|0; //@line 92 "r3d/mod.rs"
      $$sreg1$index5 = ((($3)) + 4|0); //@line 92 "r3d/mod.rs"
      $$sreg1$field6 = HEAP32[$$sreg1$index5>>2]|0; //@line 92 "r3d/mod.rs"
      $23 = __THREW__; __THREW__ = 0;
      $24 = $23&1;
      if (!($24)) {
       HEAP32[$iter>>2] = $$sreg1$field; //@line 92 "r3d/mod.rs"
       $25 = ((($iter)) + 4|0); //@line 92 "r3d/mod.rs"
       HEAP32[$25>>2] = $$sreg1$field6; //@line 92 "r3d/mod.rs"
       while(1) {
        __THREW__ = 0;
        invoke_vii(172,($_34|0),($iter|0)); //@line 92 "r3d/mod.rs"
        $26 = __THREW__; __THREW__ = 0;
        $27 = $26&1;
        if ($27) {
         break L1;
        }
        $28 = HEAP32[$_34>>2]|0; //@line 92 "r3d/mod.rs"
        $switch = ($28>>>0)<(1); //@line 92 "r3d/mod.rs"
        if ($switch) {
         break;
        }
        $29 = ((($_34)) + 4|0); //@line 92 "r3d/mod.rs"
        $30 = HEAP32[$29>>2]|0; //@line 92 "r3d/mod.rs"
        $val = $30; //@line 92 "r3d/mod.rs"
        $31 = $val; //@line 92 "r3d/mod.rs"
        $__next = $31; //@line 92 "r3d/mod.rs"
        $32 = $__next; //@line 92 "r3d/mod.rs"
        $x = $32; //@line 92 "r3d/mod.rs"
        $33 = $f; //@line 93 "r3d/mod.rs"
        $34 = $x; //@line 93 "r3d/mod.rs"
        $_46 = $34; //@line 93 "r3d/mod.rs"
        $35 = $_46; //@line 93 "r3d/mod.rs"
        __THREW__ = 0;
        $36 = (invoke_iii(176,($33|0),($35|0))|0); //@line 93 "r3d/mod.rs"
        $37 = __THREW__; __THREW__ = 0;
        $38 = $37&1;
        if ($38) {
         break L1;
        }
        __THREW__ = 0;
        invoke_vii(177,($r|0),($36|0)); //@line 93 "r3d/mod.rs"
        $39 = __THREW__; __THREW__ = 0;
        $40 = $39&1;
        if ($40) {
         break L1;
        }
       }
       ;HEAP32[$_49>>2]=HEAP32[$r>>2]|0;HEAP32[$_49+4>>2]=HEAP32[$r+4>>2]|0;HEAP32[$_49+8>>2]=HEAP32[$r+8>>2]|0; //@line 95 "r3d/mod.rs"
       ;HEAP32[$0>>2]=HEAP32[$_49>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_49+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_49+8>>2]|0; //@line 95 "r3d/mod.rs"
       STACKTOP = sp;return; //@line 96 "r3d/mod.rs"
      }
     }
    }
   }
  }
 } while(0);
 $41 = ___cxa_find_matching_catch_2()|0;
 $42 = tempRet0;
 HEAP32[$personalityslot>>2] = $41;
 $43 = ((($personalityslot)) + 4|0);
 HEAP32[$43>>2] = $42;
 __ZN4core3ptr13drop_in_place17h567c71dce2ffe868E($r); //@line 96 "r3d/mod.rs"
 $44 = HEAP32[$personalityslot>>2]|0; //@line 87 "r3d/mod.rs"
 $45 = ((($personalityslot)) + 4|0); //@line 87 "r3d/mod.rs"
 $46 = HEAP32[$45>>2]|0; //@line 87 "r3d/mod.rs"
 ___resumeException($44|0);
 // unreachable;
}
function __ZN5rustv3r3d11vec_from_fn17heb91aee15b727de8E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sreg$field = 0, $$sreg$field3 = 0, $$sreg$index2 = 0, $$sreg1$field = 0, $$sreg1$field6 = 0, $$sreg1$index5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_15 = 0, $_16 = 0, $_28 = 0, $_34 = 0, $_46 = 0, $_49 = 0, $_8 = 0, $__arg0 = 0, $__next = 0, $f = 0;
 var $iter = 0, $num = 0, $personalityslot = 0, $r = 0, $switch = 0, $val = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $3 = sp + 16|0;
 $4 = sp;
 $personalityslot = sp + 144|0;
 $_49 = sp + 132|0;
 $_34 = sp + 112|0;
 $iter = sp + 96|0;
 $_28 = sp + 88|0;
 $_15 = sp + 72|0;
 $_8 = sp + 48|0;
 $r = sp + 32|0;
 $num = sp + 24|0;
 HEAP32[$num>>2] = $1;
 $f = $2;
 __ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_3new17h8f49465beea9d182E($r); //@line 89 "r3d/mod.rs"
 $5 = HEAP32[$num>>2]|0; //@line 90 "r3d/mod.rs"
 __THREW__ = 0;
 invoke_vii(175,($r|0),($5|0)); //@line 90 "r3d/mod.rs"
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 L1: do {
  if (!($7)) {
   $_16 = $num; //@line 91 "r3d/mod.rs"
   $8 = $_16; //@line 91 "r3d/mod.rs"
   $__arg0 = $8; //@line 91 "r3d/mod.rs"
   $9 = $__arg0; //@line 91 "r3d/mod.rs"
   __THREW__ = 0;
   invoke_viii(167,($4|0),($9|0),(168|0)); //@line 91 "r3d/mod.rs"
   $$sreg$field = HEAP32[$4>>2]|0; //@line 91 "r3d/mod.rs"
   $$sreg$index2 = ((($4)) + 4|0); //@line 91 "r3d/mod.rs"
   $$sreg$field3 = HEAP32[$$sreg$index2>>2]|0; //@line 91 "r3d/mod.rs"
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    HEAP32[$_15>>2] = $$sreg$field; //@line 91 "r3d/mod.rs"
    $12 = ((($_15)) + 4|0); //@line 91 "r3d/mod.rs"
    HEAP32[$12>>2] = $$sreg$field3; //@line 91 "r3d/mod.rs"
    $13 = HEAP32[1683]|0; //@line 91 "r3d/mod.rs"
    __THREW__ = 0;
    invoke_viiiiiii(169,($_8|0),(3300|0),2,($_15|0),1,($13|0),1); //@line 91 "r3d/mod.rs"
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if (!($15)) {
     __THREW__ = 0;
     invoke_vi(170,($_8|0)); //@line 91 "r3d/mod.rs"
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if (!($17)) {
      $18 = HEAP32[$num>>2]|0; //@line 92 "r3d/mod.rs"
      HEAP32[$_28>>2] = 0; //@line 92 "r3d/mod.rs"
      $19 = ((($_28)) + 4|0); //@line 92 "r3d/mod.rs"
      HEAP32[$19>>2] = $18; //@line 92 "r3d/mod.rs"
      $20 = HEAP32[$_28>>2]|0; //@line 92 "r3d/mod.rs"
      $21 = ((($_28)) + 4|0); //@line 92 "r3d/mod.rs"
      $22 = HEAP32[$21>>2]|0; //@line 92 "r3d/mod.rs"
      __THREW__ = 0;
      invoke_viii(171,($3|0),($20|0),($22|0)); //@line 92 "r3d/mod.rs"
      $$sreg1$field = HEAP32[$3>>2]|0; //@line 92 "r3d/mod.rs"
      $$sreg1$index5 = ((($3)) + 4|0); //@line 92 "r3d/mod.rs"
      $$sreg1$field6 = HEAP32[$$sreg1$index5>>2]|0; //@line 92 "r3d/mod.rs"
      $23 = __THREW__; __THREW__ = 0;
      $24 = $23&1;
      if (!($24)) {
       HEAP32[$iter>>2] = $$sreg1$field; //@line 92 "r3d/mod.rs"
       $25 = ((($iter)) + 4|0); //@line 92 "r3d/mod.rs"
       HEAP32[$25>>2] = $$sreg1$field6; //@line 92 "r3d/mod.rs"
       while(1) {
        __THREW__ = 0;
        invoke_vii(172,($_34|0),($iter|0)); //@line 92 "r3d/mod.rs"
        $26 = __THREW__; __THREW__ = 0;
        $27 = $26&1;
        if ($27) {
         break L1;
        }
        $28 = HEAP32[$_34>>2]|0; //@line 92 "r3d/mod.rs"
        $switch = ($28>>>0)<(1); //@line 92 "r3d/mod.rs"
        if ($switch) {
         break;
        }
        $29 = ((($_34)) + 4|0); //@line 92 "r3d/mod.rs"
        $30 = HEAP32[$29>>2]|0; //@line 92 "r3d/mod.rs"
        $val = $30; //@line 92 "r3d/mod.rs"
        $31 = $val; //@line 92 "r3d/mod.rs"
        $__next = $31; //@line 92 "r3d/mod.rs"
        $32 = $__next; //@line 92 "r3d/mod.rs"
        $x = $32; //@line 92 "r3d/mod.rs"
        $33 = $f; //@line 93 "r3d/mod.rs"
        $34 = $x; //@line 93 "r3d/mod.rs"
        $_46 = $34; //@line 93 "r3d/mod.rs"
        $35 = $_46; //@line 93 "r3d/mod.rs"
        __THREW__ = 0;
        $36 = (invoke_iii(178,($33|0),($35|0))|0); //@line 93 "r3d/mod.rs"
        $37 = __THREW__; __THREW__ = 0;
        $38 = $37&1;
        if ($38) {
         break L1;
        }
        __THREW__ = 0;
        invoke_vii(177,($r|0),($36|0)); //@line 93 "r3d/mod.rs"
        $39 = __THREW__; __THREW__ = 0;
        $40 = $39&1;
        if ($40) {
         break L1;
        }
       }
       ;HEAP32[$_49>>2]=HEAP32[$r>>2]|0;HEAP32[$_49+4>>2]=HEAP32[$r+4>>2]|0;HEAP32[$_49+8>>2]=HEAP32[$r+8>>2]|0; //@line 95 "r3d/mod.rs"
       ;HEAP32[$0>>2]=HEAP32[$_49>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_49+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_49+8>>2]|0; //@line 95 "r3d/mod.rs"
       STACKTOP = sp;return; //@line 96 "r3d/mod.rs"
      }
     }
    }
   }
  }
 } while(0);
 $41 = ___cxa_find_matching_catch_2()|0;
 $42 = tempRet0;
 HEAP32[$personalityslot>>2] = $41;
 $43 = ((($personalityslot)) + 4|0);
 HEAP32[$43>>2] = $42;
 __ZN4core3ptr13drop_in_place17h567c71dce2ffe868E($r); //@line 96 "r3d/mod.rs"
 $44 = HEAP32[$personalityslot>>2]|0; //@line 87 "r3d/mod.rs"
 $45 = ((($personalityslot)) + 4|0); //@line 87 "r3d/mod.rs"
 $46 = HEAP32[$45>>2]|0; //@line 87 "r3d/mod.rs"
 ___resumeException($44|0);
 // unreachable;
}
function __ZN5rustv3r3d12gl_error_str17h2f03f77aff008096E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sink = 0, $$sink2 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $_0 = 0, $err = 0, $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_0 = sp + 8|0;
 $err = $0;
 $1 = $err; //@line 126 "r3d/mod.rs"
 switch ($1|0) {
 case 0:  {
  $$sink = 11;$$sink2 = 13546;
  break;
 }
 case 1280:  {
  $$sink = 15;$$sink2 = 13557;
  break;
 }
 case 1281:  {
  $$sink = 16;$$sink2 = 13572;
  break;
 }
 case 1282:  {
  $$sink = 20;$$sink2 = 13588;
  break;
 }
 case 1286:  {
  $$sink = 32;$$sink2 = 13608;
  break;
 }
 case 1285:  {
  $$sink = 16;$$sink2 = 13640;
  break;
 }
 default: {
  $$sink = 14;$$sink2 = 13656;
 }
 }
 HEAP32[$_0>>2] = $$sink2;
 $2 = ((($_0)) + 4|0);
 HEAP32[$2>>2] = $$sink;
 $3 = HEAP32[$_0>>2]|0; //@line 135 "r3d/mod.rs"
 $4 = ((($_0)) + 4|0); //@line 135 "r3d/mod.rs"
 $5 = HEAP32[$4>>2]|0; //@line 135 "r3d/mod.rs"
 HEAP32[$retVal>>2] = $3; //@line 135 "r3d/mod.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 135 "r3d/mod.rs"
 HEAP32[$retVal$index1>>2] = $5; //@line 135 "r3d/mod.rs"
 STACKTOP = sp;return; //@line 135 "r3d/mod.rs"
}
function __ZN5rustv3r3d11as_void_ptr17h0b0ecd425b81d508E($0) {
 $0 = $0|0;
 var $1 = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ptr = $0;
 $1 = $ptr; //@line 143 "r3d/mod.rs"
 STACKTOP = sp;return ($1|0); //@line 144 "r3d/mod.rs"
}
function __ZN5rustv3r3d11as_void_ptr17h36ce78c479599264E($0) {
 $0 = $0|0;
 var $1 = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ptr = $0;
 $1 = $ptr; //@line 143 "r3d/mod.rs"
 STACKTOP = sp;return ($1|0); //@line 144 "r3d/mod.rs"
}
function __ZN5rustv3r3d11as_void_ptr17h38a843d4402f9d65E($0) {
 $0 = $0|0;
 var $1 = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ptr = $0;
 $1 = $ptr; //@line 143 "r3d/mod.rs"
 STACKTOP = sp;return ($1|0); //@line 144 "r3d/mod.rs"
}
function __ZN5rustv3r3d11as_void_ptr17hdb8df238374e7195E($0) {
 $0 = $0|0;
 var $1 = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ptr = $0;
 $1 = $ptr; //@line 143 "r3d/mod.rs"
 STACKTOP = sp;return ($1|0); //@line 144 "r3d/mod.rs"
}
function __ZN5rustv3r3d11as_void_ptr17hedc27eafdc44b9c1E($0) {
 $0 = $0|0;
 var $1 = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ptr = $0;
 $1 = $ptr; //@line 143 "r3d/mod.rs"
 STACKTOP = sp;return ($1|0); //@line 144 "r3d/mod.rs"
}
function __ZN5rustv3r3d3one17had807af2f7293135E() {
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+__ZN39__LT_f32_u20_as_u20_rustv__r3d__One_GT_3one17h4ee4cedb78d41e05E()); //@line 368 "r3d/mod.rs"
 return (+$0); //@line 368 "r3d/mod.rs"
}
function __ZN39__LT_f32_u20_as_u20_rustv__r3d__One_GT_3one17h4ee4cedb78d41e05E() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return +1; //@line 354 "r3d/mod.rs"
}
function __ZN5rustv3r3d4zero17hccc9cde42a9b40adE() {
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+__ZN40__LT_f32_u20_as_u20_rustv__r3d__Zero_GT_4zero17h9ed4eeff3be91bddE()); //@line 369 "r3d/mod.rs"
 return (+$0); //@line 369 "r3d/mod.rs"
}
function __ZN40__LT_f32_u20_as_u20_rustv__r3d__Zero_GT_4zero17h9ed4eeff3be91bddE() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return +0; //@line 376 "r3d/mod.rs"
}
function __ZN41__LT_f32_u20_as_u20_rustv__r3d__Float_GT_7sin_cos17h23cde6307aafff78E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = +$0;
 var $$sreg$field = 0.0, $$sreg$field2 = 0.0, $$sreg$index1 = 0, $1 = 0, $2 = 0.0, $retVal$index4 = 0, $self = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $self = $0;
 $2 = $self; //@line 506 "r3d/mod.rs"
 __ZN3std3f3221__LT_impl_u20_f32_GT_7sin_cos17heaf68361e181d19aE($1,$2); //@line 506 "r3d/mod.rs"
 $$sreg$field = +HEAPF32[$1>>2]; //@line 506 "r3d/mod.rs"
 $$sreg$index1 = ((($1)) + 4|0); //@line 506 "r3d/mod.rs"
 $$sreg$field2 = +HEAPF32[$$sreg$index1>>2]; //@line 506 "r3d/mod.rs"
 HEAPF32[$retVal>>2] = $$sreg$field; //@line 506 "r3d/mod.rs"
 $retVal$index4 = ((($retVal)) + 4|0); //@line 506 "r3d/mod.rs"
 HEAPF32[$retVal$index4>>2] = $$sreg$field2; //@line 506 "r3d/mod.rs"
 STACKTOP = sp;return; //@line 506 "r3d/mod.rs"
}
function __ZN5rustv3r3d3cos17hecef639f5fcd4660E($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $x = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x = $0;
 $1 = $x; //@line 552 "r3d/mod.rs"
 $2 = (+__ZN41__LT_f32_u20_as_u20_rustv__r3d__Float_GT_3cos17h90aab55bc915e3edE($1)); //@line 552 "r3d/mod.rs"
 STACKTOP = sp;return (+$2); //@line 552 "r3d/mod.rs"
}
function __ZN41__LT_f32_u20_as_u20_rustv__r3d__Float_GT_3cos17h90aab55bc915e3edE($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $self = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 505 "r3d/mod.rs"
 $2 = (+__ZN3std3f3221__LT_impl_u20_f32_GT_3cos17hf8a0a9a2de44c759E($1)); //@line 505 "r3d/mod.rs"
 STACKTOP = sp;return (+$2); //@line 505 "r3d/mod.rs"
}
function __ZN5rustv3r3d7sin_cos17hdfd72834cc9b8d67E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = +$0;
 var $$sreg$field = 0.0, $$sreg$field2 = 0.0, $$sreg$index1 = 0, $1 = 0, $2 = 0.0, $retVal$index4 = 0, $x = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $x = $0;
 $2 = $x; //@line 553 "r3d/mod.rs"
 __ZN41__LT_f32_u20_as_u20_rustv__r3d__Float_GT_7sin_cos17h23cde6307aafff78E($1,$2); //@line 553 "r3d/mod.rs"
 $$sreg$field = +HEAPF32[$1>>2]; //@line 553 "r3d/mod.rs"
 $$sreg$index1 = ((($1)) + 4|0); //@line 553 "r3d/mod.rs"
 $$sreg$field2 = +HEAPF32[$$sreg$index1>>2]; //@line 553 "r3d/mod.rs"
 HEAPF32[$retVal>>2] = $$sreg$field; //@line 553 "r3d/mod.rs"
 $retVal$index4 = ((($retVal)) + 4|0); //@line 553 "r3d/mod.rs"
 HEAPF32[$retVal$index4>>2] = $$sreg$field2; //@line 553 "r3d/mod.rs"
 STACKTOP = sp;return; //@line 553 "r3d/mod.rs"
}
function __ZN5rustv3r3d7div_rem17h805283f327a888d1E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $a = 0, $b = 0, $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_0 = sp + 8|0;
 $a = $0;
 $b = $1;
 $2 = $a; //@line 562 "r3d/mod.rs"
 $3 = $b; //@line 562 "r3d/mod.rs"
 $4 = (__ZN47__LT_isize_u20_as_u20_core__ops__arith__Div_GT_3div17h7baf6276e2c157d4E($2,$3)|0); //@line 562 "r3d/mod.rs"
 $5 = $a; //@line 562 "r3d/mod.rs"
 $6 = $b; //@line 562 "r3d/mod.rs"
 $7 = (__ZN47__LT_isize_u20_as_u20_core__ops__arith__Rem_GT_3rem17h13f0442a290c053fE($5,$6)|0); //@line 562 "r3d/mod.rs"
 HEAP32[$_0>>2] = $4; //@line 562 "r3d/mod.rs"
 $8 = ((($_0)) + 4|0); //@line 562 "r3d/mod.rs"
 HEAP32[$8>>2] = $7; //@line 562 "r3d/mod.rs"
 $9 = HEAP32[$_0>>2]|0; //@line 562 "r3d/mod.rs"
 $10 = ((($_0)) + 4|0); //@line 562 "r3d/mod.rs"
 $11 = HEAP32[$10>>2]|0; //@line 562 "r3d/mod.rs"
 HEAP32[$retVal>>2] = $9; //@line 562 "r3d/mod.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 562 "r3d/mod.rs"
 HEAP32[$retVal$index1>>2] = $11; //@line 562 "r3d/mod.rs"
 STACKTOP = sp;return; //@line 562 "r3d/mod.rs"
}
function __ZN5rustv3r3d7div_rem17hb02e49cf6a980b3aE($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $a = 0, $b = 0, $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_0 = sp + 8|0;
 $a = $0;
 $b = $1;
 $2 = $a; //@line 562 "r3d/mod.rs"
 $3 = $b; //@line 562 "r3d/mod.rs"
 $4 = (__ZN47__LT_usize_u20_as_u20_core__ops__arith__Div_GT_3div17h795987895902b5ecE($2,$3)|0); //@line 562 "r3d/mod.rs"
 $5 = $a; //@line 562 "r3d/mod.rs"
 $6 = $b; //@line 562 "r3d/mod.rs"
 $7 = (__ZN47__LT_usize_u20_as_u20_core__ops__arith__Rem_GT_3rem17hd3fe84939c0a70fcE($5,$6)|0); //@line 562 "r3d/mod.rs"
 HEAP32[$_0>>2] = $4; //@line 562 "r3d/mod.rs"
 $8 = ((($_0)) + 4|0); //@line 562 "r3d/mod.rs"
 HEAP32[$8>>2] = $7; //@line 562 "r3d/mod.rs"
 $9 = HEAP32[$_0>>2]|0; //@line 562 "r3d/mod.rs"
 $10 = ((($_0)) + 4|0); //@line 562 "r3d/mod.rs"
 $11 = HEAP32[$10>>2]|0; //@line 562 "r3d/mod.rs"
 HEAP32[$retVal>>2] = $9; //@line 562 "r3d/mod.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 562 "r3d/mod.rs"
 HEAP32[$retVal$index1>>2] = $11; //@line 562 "r3d/mod.rs"
 STACKTOP = sp;return; //@line 562 "r3d/mod.rs"
}
function __ZN5rustv3r3d7div_rem17hb7cb2fac6c5b1055E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $a = 0, $b = 0, $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_0 = sp + 8|0;
 $a = $0;
 $b = $1;
 $2 = $a; //@line 562 "r3d/mod.rs"
 $3 = $b; //@line 562 "r3d/mod.rs"
 $4 = (__ZN45__LT_u32_u20_as_u20_core__ops__arith__Div_GT_3div17h4c1cdf4a0c1b710fE($2,$3)|0); //@line 562 "r3d/mod.rs"
 $5 = $a; //@line 562 "r3d/mod.rs"
 $6 = $b; //@line 562 "r3d/mod.rs"
 $7 = (__ZN45__LT_u32_u20_as_u20_core__ops__arith__Rem_GT_3rem17h6ed4c6326e23f004E($5,$6)|0); //@line 562 "r3d/mod.rs"
 HEAP32[$_0>>2] = $4; //@line 562 "r3d/mod.rs"
 $8 = ((($_0)) + 4|0); //@line 562 "r3d/mod.rs"
 HEAP32[$8>>2] = $7; //@line 562 "r3d/mod.rs"
 $9 = HEAP32[$_0>>2]|0; //@line 562 "r3d/mod.rs"
 $10 = ((($_0)) + 4|0); //@line 562 "r3d/mod.rs"
 $11 = HEAP32[$10>>2]|0; //@line 562 "r3d/mod.rs"
 HEAP32[$retVal>>2] = $9; //@line 562 "r3d/mod.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 562 "r3d/mod.rs"
 HEAP32[$retVal$index1>>2] = $11; //@line 562 "r3d/mod.rs"
 STACKTOP = sp;return; //@line 562 "r3d/mod.rs"
}
function __ZN5rustv3r3d5v2sub17h4003862951903751E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0.0, $$sreg$field2 = 0.0, $$sreg$index1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $a = 0, $b = 0, $retVal$index4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $a = $0;
 $b = $1;
 $3 = $a; //@line 913 "r3d/mod.rs"
 $4 = (+__ZN71__LT_rustv__r3d__vector__Vec2_LT_T_GT__u20_as_u20_rustv__r3d__HasXY_GT_1x17h71b0c38254f0a90cE($3)); //@line 913 "r3d/mod.rs"
 $5 = $b; //@line 913 "r3d/mod.rs"
 $6 = (+__ZN71__LT_rustv__r3d__vector__Vec2_LT_T_GT__u20_as_u20_rustv__r3d__HasXY_GT_1x17h71b0c38254f0a90cE($5)); //@line 913 "r3d/mod.rs"
 $7 = (+__ZN45__LT_f32_u20_as_u20_core__ops__arith__Sub_GT_3sub17he0a1eb3f9d1069c3E($4,$6)); //@line 913 "r3d/mod.rs"
 $8 = $a; //@line 913 "r3d/mod.rs"
 $9 = (+__ZN71__LT_rustv__r3d__vector__Vec2_LT_T_GT__u20_as_u20_rustv__r3d__HasXY_GT_1y17h506fed29d306cdc2E($8)); //@line 913 "r3d/mod.rs"
 $10 = $b; //@line 913 "r3d/mod.rs"
 $11 = (+__ZN71__LT_rustv__r3d__vector__Vec2_LT_T_GT__u20_as_u20_rustv__r3d__HasXY_GT_1y17h506fed29d306cdc2E($10)); //@line 913 "r3d/mod.rs"
 $12 = (+__ZN45__LT_f32_u20_as_u20_core__ops__arith__Sub_GT_3sub17he0a1eb3f9d1069c3E($9,$11)); //@line 913 "r3d/mod.rs"
 __ZN71__LT_rustv__r3d__vector__Vec2_LT_T_GT__u20_as_u20_rustv__r3d__HasXY_GT_7from_xy17h0401f7dcd09296b6E($2,$7,$12); //@line 913 "r3d/mod.rs"
 $$sreg$field = +HEAPF32[$2>>2]; //@line 913 "r3d/mod.rs"
 $$sreg$index1 = ((($2)) + 4|0); //@line 913 "r3d/mod.rs"
 $$sreg$field2 = +HEAPF32[$$sreg$index1>>2]; //@line 913 "r3d/mod.rs"
 HEAPF32[$retVal>>2] = $$sreg$field; //@line 913 "r3d/mod.rs"
 $retVal$index4 = ((($retVal)) + 4|0); //@line 913 "r3d/mod.rs"
 HEAPF32[$retVal$index4>>2] = $$sreg$field2; //@line 913 "r3d/mod.rs"
 STACKTOP = sp;return; //@line 913 "r3d/mod.rs"
}
function __ZN5rustv6window9callbacks12reshape_func17ha573a220215dcc65E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field3 = 0, $$sreg$index2 = 0, $$sreg1$field = 0, $$sreg1$field6 = 0, $$sreg1$index5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0;
 var $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_11 = 0, $_12 = 0, $_4 = 0, $__arg0 = 0, $__arg1 = 0, $fx = 0.0, $fy = 0.0, $x = 0, $y = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $2 = sp + 16|0;
 $3 = sp;
 $_12 = sp + 72|0;
 $_11 = sp + 56|0;
 $_4 = sp + 32|0;
 $y = sp + 28|0;
 $x = sp + 24|0;
 HEAP32[$x>>2] = $0;
 HEAP32[$y>>2] = $1;
 HEAP32[$_12>>2] = $x; //@line 507 "window.rs"
 $4 = ((($_12)) + 4|0); //@line 507 "window.rs"
 HEAP32[$4>>2] = $y; //@line 507 "window.rs"
 $5 = HEAP32[$_12>>2]|0; //@line 507 "window.rs"
 $__arg0 = $5; //@line 507 "window.rs"
 $6 = ((($_12)) + 4|0); //@line 507 "window.rs"
 $7 = HEAP32[$6>>2]|0; //@line 507 "window.rs"
 $__arg1 = $7; //@line 507 "window.rs"
 $8 = $__arg0; //@line 507 "window.rs"
 __ZN4core3fmt10ArgumentV13new17h18c233152faad36eE($3,$8,179); //@line 507 "window.rs"
 $$sreg$field = HEAP32[$3>>2]|0; //@line 507 "window.rs"
 $$sreg$index2 = ((($3)) + 4|0); //@line 507 "window.rs"
 $$sreg$field3 = HEAP32[$$sreg$index2>>2]|0; //@line 507 "window.rs"
 $9 = $__arg1; //@line 507 "window.rs"
 __ZN4core3fmt10ArgumentV13new17h18c233152faad36eE($2,$9,179); //@line 507 "window.rs"
 $$sreg1$field = HEAP32[$2>>2]|0; //@line 507 "window.rs"
 $$sreg1$index5 = ((($2)) + 4|0); //@line 507 "window.rs"
 $$sreg1$field6 = HEAP32[$$sreg1$index5>>2]|0; //@line 507 "window.rs"
 HEAP32[$_11>>2] = $$sreg$field; //@line 507 "window.rs"
 $10 = ((($_11)) + 4|0); //@line 507 "window.rs"
 HEAP32[$10>>2] = $$sreg$field3; //@line 507 "window.rs"
 $11 = ((($_11)) + 8|0); //@line 507 "window.rs"
 HEAP32[$11>>2] = $$sreg1$field; //@line 507 "window.rs"
 $12 = ((($11)) + 4|0); //@line 507 "window.rs"
 HEAP32[$12>>2] = $$sreg1$field6; //@line 507 "window.rs"
 $13 = HEAP32[1819]|0; //@line 507 "window.rs"
 __ZN4core3fmt9Arguments16new_v1_formatted17hd7921c86529aa3b1E($_4,3316,3,$_11,2,$13,2); //@line 507 "window.rs"
 __ZN3std2io5stdio6_print17h5e38a8ff46cfb3e1E($_4); //@line 507 "window.rs"
 $14 = HEAP32[$x>>2]|0; //@line 509 "window.rs"
 $15 = (+($14|0)); //@line 509 "window.rs"
 $fx = $15; //@line 509 "window.rs"
 $16 = HEAP32[$y>>2]|0; //@line 509 "window.rs"
 $17 = (+($16|0)); //@line 509 "window.rs"
 $fy = $17; //@line 509 "window.rs"
 $18 = HEAP32[$x>>2]|0; //@line 510 "window.rs"
 $19 = HEAP32[$y>>2]|0; //@line 510 "window.rs"
 HEAP32[873] = $18; //@line 510 "window.rs"
 HEAP32[(3496)>>2] = $19; //@line 510 "window.rs"
 $20 = $fx; //@line 511 "window.rs"
 $21 = $fy; //@line 511 "window.rs"
 HEAPF32[875] = $20; //@line 511 "window.rs"
 HEAPF32[(3504)>>2] = $21; //@line 511 "window.rs"
 $22 = $fx; //@line 512 "window.rs"
 $23 = $fy; //@line 512 "window.rs"
 $24 = $22 / $23; //@line 512 "window.rs"
 HEAPF32[877] = $24; //@line 512 "window.rs"
 $25 = HEAP32[$x>>2]|0; //@line 513 "window.rs"
 $26 = HEAP32[$y>>2]|0; //@line 513 "window.rs"
 _glViewport(0,0,($25|0),($26|0)); //@line 513 "window.rs"
 STACKTOP = sp;return; //@line 517 "window.rs"
}
function __ZN5rustv6window9callbacks13keyboard_func17h8afb74b465c8bcbeE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $key = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $key = $0;
 $x = $1;
 $y = $2;
 $3 = $key; //@line 528 "window.rs"
 $4 = $x; //@line 528 "window.rs"
 $5 = $y; //@line 528 "window.rs"
 __ZN5rustv6window9callbacks17keyboard_func_sub17h1d6376a1a7d4f61fE($3,1,$4,$5); //@line 528 "window.rs"
 STACKTOP = sp;return; //@line 529 "window.rs"
}
function __ZN5rustv6window9callbacks17keyboard_func_sub17h1d6376a1a7d4f61fE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sreg$field = 0.0, $$sreg$field2 = 0.0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_11 = 0, $_15 = 0, $_18 = 0, $_22 = 0, $_23 = 0, $isdown = 0, $key = 0;
 var $kp = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $4 = sp;
 $_23 = sp + 76|0;
 $_22 = sp + 48|0;
 $_18 = sp + 40|0;
 $kp = sp + 16|0;
 $key = $0;
 $5 = $1&1;
 $isdown = $5;
 $x = $2;
 $y = $3;
 $6 = $isdown; //@line 521 "window.rs"
 $7 = $6&1; //@line 521 "window.rs"
 $8 = $key; //@line 521 "window.rs"
 $9 = $8&255; //@line 521 "window.rs"
 $10 = ($9>>>0)<(256); //@line 521 "window.rs"
 $11 = $10; //@line 521 "window.rs"
 if (!($11)) {
  __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(3340,$9,256); //@line 521 "window.rs"
  // unreachable; //@line 521 "window.rs"
 }
 $12 = (39194 + ($9)|0); //@line 521 "window.rs"
 $13 = $7&1; //@line 521 "window.rs"
 HEAP8[$12>>0] = $13; //@line 521 "window.rs"
 $14 = $key; //@line 522 "window.rs"
 $15 = $14&255; //@line 522 "window.rs"
 $_11 = $15; //@line 522 "window.rs"
 $16 = (__ZN5rustv6window13get_modifiers17hd0d23e34e408f2bdE()|0); //@line 522 "window.rs"
 $17 = $isdown; //@line 522 "window.rs"
 $18 = $17&1; //@line 522 "window.rs"
 if ($18) {
  $_15 = 0; //@line 522 "window.rs"
 } else {
  $_15 = 1; //@line 522 "window.rs"
 }
 $19 = $x; //@line 522 "window.rs"
 $20 = $y; //@line 522 "window.rs"
 HEAP32[$_18>>2] = $19; //@line 522 "window.rs"
 $21 = ((($_18)) + 4|0); //@line 522 "window.rs"
 HEAP32[$21>>2] = $20; //@line 522 "window.rs"
 $22 = HEAP32[$_18>>2]|0; //@line 522 "window.rs"
 $23 = ((($_18)) + 4|0); //@line 522 "window.rs"
 $24 = HEAP32[$23>>2]|0; //@line 522 "window.rs"
 __ZN5rustv6window12to_screenpos17h4d298ea930c2bb34E($4,$22,$24); //@line 522 "window.rs"
 $$sreg$field = +HEAPF32[$4>>2]; //@line 522 "window.rs"
 $$sreg$index1 = ((($4)) + 4|0); //@line 522 "window.rs"
 $$sreg$field2 = +HEAPF32[$$sreg$index1>>2]; //@line 522 "window.rs"
 $25 = $_11; //@line 522 "window.rs"
 HEAP32[$kp>>2] = $25; //@line 522 "window.rs"
 $26 = ((($kp)) + 4|0); //@line 522 "window.rs"
 HEAP32[$26>>2] = $16; //@line 522 "window.rs"
 $27 = $_15; //@line 522 "window.rs"
 $28 = $27&1; //@line 522 "window.rs"
 $29 = ((($kp)) + 16|0); //@line 522 "window.rs"
 $30 = $28&1; //@line 522 "window.rs"
 HEAP8[$29>>0] = $30; //@line 522 "window.rs"
 $31 = ((($kp)) + 8|0); //@line 522 "window.rs"
 HEAPF32[$31>>2] = $$sreg$field; //@line 522 "window.rs"
 $32 = ((($31)) + 4|0); //@line 522 "window.rs"
 HEAPF32[$32>>2] = $$sreg$field2; //@line 522 "window.rs"
 ;HEAP32[$_23>>2]=HEAP32[$kp>>2]|0;HEAP32[$_23+4>>2]=HEAP32[$kp+4>>2]|0;HEAP32[$_23+8>>2]=HEAP32[$kp+8>>2]|0;HEAP32[$_23+12>>2]=HEAP32[$kp+12>>2]|0;HEAP32[$_23+16>>2]=HEAP32[$kp+16>>2]|0; //@line 523 "window.rs"
 HEAP8[$_22>>0] = 5; //@line 523 "window.rs"
 $33 = ((($_22)) + 4|0); //@line 523 "window.rs"
 ;HEAP32[$33>>2]=HEAP32[$_23>>2]|0;HEAP32[$33+4>>2]=HEAP32[$_23+4>>2]|0;HEAP32[$33+8>>2]=HEAP32[$_23+8>>2]|0;HEAP32[$33+12>>2]=HEAP32[$_23+12>>2]|0;HEAP32[$33+16>>2]=HEAP32[$_23+16>>2]|0; //@line 523 "window.rs"
 __ZN5rustv6window10push_event17hdc373bf9329b1a08E($_22); //@line 523 "window.rs"
 STACKTOP = sp;return; //@line 525 "window.rs"
}
function __ZN5rustv6window9callbacks12special_func17h2cd004b2d3a139e2E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $key = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $key = $0;
 $x = $1;
 $y = $2;
 $3 = $key; //@line 542 "window.rs"
 $4 = $x; //@line 542 "window.rs"
 $5 = $y; //@line 542 "window.rs"
 __ZN5rustv6window9callbacks16special_func_sub17hc72e8c118a50827fE($3,1,$4,$5); //@line 542 "window.rs"
 STACKTOP = sp;return; //@line 543 "window.rs"
}
function __ZN5rustv6window9callbacks16special_func_sub17hc72e8c118a50827fE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sreg$field = 0, $$sreg$field3 = 0, $$sreg$index2 = 0, $$sreg1$field = 0.0, $$sreg1$field6 = 0.0, $$sreg1$index5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_16 = 0, $_23 = 0, $_24 = 0;
 var $_37 = 0, $_40 = 0, $_44 = 0, $_45 = 0, $__arg0 = 0, $isdown = 0, $key = 0, $kp = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $4 = sp + 16|0;
 $5 = sp;
 $_45 = sp + 140|0;
 $_44 = sp + 112|0;
 $_40 = sp + 104|0;
 $kp = sp + 80|0;
 $_23 = sp + 64|0;
 $_16 = sp + 40|0;
 $key = sp + 24|0;
 HEAP32[$key>>2] = $0;
 $6 = $1&1;
 $isdown = $6;
 $x = $2;
 $y = $3;
 $7 = HEAP32[$key>>2]|0; //@line 532 "window.rs"
 $8 = $7 & 255; //@line 532 "window.rs"
 $9 = HEAP32[$key>>2]|0; //@line 532 "window.rs"
 $10 = ($8|0)==($9|0); //@line 532 "window.rs"
 $11 = $10 ^ 1; //@line 532 "window.rs"
 if ($11) {
  __ZN3std9panicking11begin_panic17h1a4c9be19e7ea39bE(13689,50,3356); //@line 532 "window.rs"
  // unreachable; //@line 532 "window.rs"
 }
 $_24 = $key; //@line 534 "window.rs"
 $12 = $_24; //@line 534 "window.rs"
 $__arg0 = $12; //@line 534 "window.rs"
 $13 = $__arg0; //@line 534 "window.rs"
 __ZN4core3fmt10ArgumentV13new17h0963b74890d3a7c4E($5,$13,180); //@line 534 "window.rs"
 $$sreg$field = HEAP32[$5>>2]|0; //@line 534 "window.rs"
 $$sreg$index2 = ((($5)) + 4|0); //@line 534 "window.rs"
 $$sreg$field3 = HEAP32[$$sreg$index2>>2]|0; //@line 534 "window.rs"
 HEAP32[$_23>>2] = $$sreg$field; //@line 534 "window.rs"
 $14 = ((($_23)) + 4|0); //@line 534 "window.rs"
 HEAP32[$14>>2] = $$sreg$field3; //@line 534 "window.rs"
 $15 = HEAP32[1683]|0; //@line 534 "window.rs"
 __ZN4core3fmt9Arguments16new_v1_formatted17hd7921c86529aa3b1E($_16,3372,2,$_23,1,$15,1); //@line 534 "window.rs"
 __ZN3std2io5stdio6_print17h5e38a8ff46cfb3e1E($_16); //@line 534 "window.rs"
 $16 = HEAP32[$key>>2]|0; //@line 535 "window.rs"
 $17 = (__ZN5rustv6window16xlat_special_key17h80e2458e181bcf1eE($16)|0); //@line 535 "window.rs"
 $18 = (__ZN5rustv6window13get_modifiers17hd0d23e34e408f2bdE()|0); //@line 535 "window.rs"
 $19 = $isdown; //@line 535 "window.rs"
 $20 = $19&1; //@line 535 "window.rs"
 if ($20) {
  $_37 = 0; //@line 535 "window.rs"
 } else {
  $_37 = 1; //@line 535 "window.rs"
 }
 $21 = $x; //@line 535 "window.rs"
 $22 = $y; //@line 535 "window.rs"
 HEAP32[$_40>>2] = $21; //@line 535 "window.rs"
 $23 = ((($_40)) + 4|0); //@line 535 "window.rs"
 HEAP32[$23>>2] = $22; //@line 535 "window.rs"
 $24 = HEAP32[$_40>>2]|0; //@line 535 "window.rs"
 $25 = ((($_40)) + 4|0); //@line 535 "window.rs"
 $26 = HEAP32[$25>>2]|0; //@line 535 "window.rs"
 __ZN5rustv6window12to_screenpos17h4d298ea930c2bb34E($4,$24,$26); //@line 535 "window.rs"
 $$sreg1$field = +HEAPF32[$4>>2]; //@line 535 "window.rs"
 $$sreg1$index5 = ((($4)) + 4|0); //@line 535 "window.rs"
 $$sreg1$field6 = +HEAPF32[$$sreg1$index5>>2]; //@line 535 "window.rs"
 HEAP32[$kp>>2] = $17; //@line 535 "window.rs"
 $27 = ((($kp)) + 4|0); //@line 535 "window.rs"
 HEAP32[$27>>2] = $18; //@line 535 "window.rs"
 $28 = $_37; //@line 535 "window.rs"
 $29 = $28&1; //@line 535 "window.rs"
 $30 = ((($kp)) + 16|0); //@line 535 "window.rs"
 $31 = $29&1; //@line 535 "window.rs"
 HEAP8[$30>>0] = $31; //@line 535 "window.rs"
 $32 = ((($kp)) + 8|0); //@line 535 "window.rs"
 HEAPF32[$32>>2] = $$sreg1$field; //@line 535 "window.rs"
 $33 = ((($32)) + 4|0); //@line 535 "window.rs"
 HEAPF32[$33>>2] = $$sreg1$field6; //@line 535 "window.rs"
 ;HEAP32[$_45>>2]=HEAP32[$kp>>2]|0;HEAP32[$_45+4>>2]=HEAP32[$kp+4>>2]|0;HEAP32[$_45+8>>2]=HEAP32[$kp+8>>2]|0;HEAP32[$_45+12>>2]=HEAP32[$kp+12>>2]|0;HEAP32[$_45+16>>2]=HEAP32[$kp+16>>2]|0; //@line 536 "window.rs"
 HEAP8[$_44>>0] = 5; //@line 536 "window.rs"
 $34 = ((($_44)) + 4|0); //@line 536 "window.rs"
 ;HEAP32[$34>>2]=HEAP32[$_45>>2]|0;HEAP32[$34+4>>2]=HEAP32[$_45+4>>2]|0;HEAP32[$34+8>>2]=HEAP32[$_45+8>>2]|0;HEAP32[$34+12>>2]=HEAP32[$_45+12>>2]|0;HEAP32[$34+16>>2]=HEAP32[$_45+16>>2]|0; //@line 536 "window.rs"
 __ZN5rustv6window10push_event17hdc373bf9329b1a08E($_44); //@line 536 "window.rs"
 STACKTOP = sp;return; //@line 539 "window.rs"
}
function __ZN5rustv6window9callbacks15special_up_func17h51cac959bd6caa3eE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $key = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $key = $0;
 $x = $1;
 $y = $2;
 $3 = $key; //@line 546 "window.rs"
 $4 = $x; //@line 546 "window.rs"
 $5 = $y; //@line 546 "window.rs"
 __ZN5rustv6window9callbacks16special_func_sub17hc72e8c118a50827fE($3,0,$4,$5); //@line 546 "window.rs"
 STACKTOP = sp;return; //@line 547 "window.rs"
}
function __ZN5rustv6window9callbacks16keyboard_up_func17h81cfb555cc5d93caE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $key = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $key = $0;
 $x = $1;
 $y = $2;
 $3 = $key; //@line 552 "window.rs"
 $4 = $x; //@line 552 "window.rs"
 $5 = $y; //@line 552 "window.rs"
 __ZN5rustv6window9callbacks17keyboard_func_sub17h1d6376a1a7d4f61fE($3,0,$4,$5); //@line 552 "window.rs"
 STACKTOP = sp;return; //@line 553 "window.rs"
}
function __ZN5rustv6window9callbacks11motion_func17h57bd20c59f3716e5E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0.0, $$sreg$field9 = 0.0, $$sreg$index8 = 0, $$sreg5$field = 0.0, $$sreg5$field13 = 0.0, $$sreg5$index12 = 0, $$sreg6$field = 0.0, $$sreg6$field16 = 0.0, $$sreg6$index15 = 0, $$sreg7$field = 0.0, $$sreg7$field19 = 0.0, $$sreg7$index18 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $_13 = 0, $_14 = 0, $_15 = 0, $_16 = 0, $_17 = 0, $_18 = 0, $_28 = 0;
 var $_29 = 0, $_37 = 0, $_38 = 0, $_45 = 0, $_46 = 0, $_7 = 0, $cond = 0, $cond1 = 0, $cond2 = 0, $cvp = 0, $cvp$index11 = 0, $dm = 0, $op = 0, $op1 = 0, $op2 = 0, $switch = 0, $switch3 = 0, $switch4 = 0, $x = 0, $y = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $2 = sp + 48|0;
 $3 = sp + 32|0;
 $4 = sp + 16|0;
 $5 = sp;
 $_45 = sp + 280|0;
 $op2 = sp + 272|0;
 $_37 = sp + 240|0;
 $op1 = sp + 232|0;
 $_28 = sp + 200|0;
 $op = sp + 192|0;
 $_18 = sp + 176|0;
 $_17 = sp + 164|0;
 $_16 = sp + 152|0;
 $_15 = sp + 116|0;
 $_13 = sp + 84|0;
 $_7 = sp + 72|0;
 $cvp = sp + 64|0;
 $x = $0;
 $y = $1;
 $6 = $x; //@line 555 "window.rs"
 $7 = $y; //@line 555 "window.rs"
 __ZN5rustv6window13set_mouse_pos17hf79519c5acd775fbE($6,$7); //@line 555 "window.rs"
 $8 = $x; //@line 556 "window.rs"
 $9 = $y; //@line 556 "window.rs"
 HEAP32[$_7>>2] = $8; //@line 556 "window.rs"
 $10 = ((($_7)) + 4|0); //@line 556 "window.rs"
 HEAP32[$10>>2] = $9; //@line 556 "window.rs"
 $11 = HEAP32[$_7>>2]|0; //@line 556 "window.rs"
 $12 = ((($_7)) + 4|0); //@line 556 "window.rs"
 $13 = HEAP32[$12>>2]|0; //@line 556 "window.rs"
 __ZN5rustv6window12to_screenpos17h4d298ea930c2bb34E($5,$11,$13); //@line 556 "window.rs"
 $$sreg$field = +HEAPF32[$5>>2]; //@line 556 "window.rs"
 $$sreg$index8 = ((($5)) + 4|0); //@line 556 "window.rs"
 $$sreg$field9 = +HEAPF32[$$sreg$index8>>2]; //@line 556 "window.rs"
 HEAPF32[$cvp>>2] = $$sreg$field; //@line 556 "window.rs"
 $cvp$index11 = ((($cvp)) + 4|0); //@line 556 "window.rs"
 HEAPF32[$cvp$index11>>2] = $$sreg$field9; //@line 556 "window.rs"
 $14 = HEAP32[7769]|0; //@line 559 "window.rs"
 $dm = $14; //@line 559 "window.rs"
 ;HEAP32[$_16>>2]=HEAP32[31080>>2]|0;HEAP32[$_16+4>>2]=HEAP32[31080+4>>2]|0;HEAP32[$_16+8>>2]=HEAP32[31080+8>>2]|0; //@line 561 "window.rs"
 ;HEAP32[$_17>>2]=HEAP32[31092>>2]|0;HEAP32[$_17+4>>2]=HEAP32[31092+4>>2]|0;HEAP32[$_17+8>>2]=HEAP32[31092+8>>2]|0; //@line 561 "window.rs"
 ;HEAP32[$_18>>2]=HEAP32[31104>>2]|0;HEAP32[$_18+4>>2]=HEAP32[31104+4>>2]|0;HEAP32[$_18+8>>2]=HEAP32[31104+8>>2]|0; //@line 561 "window.rs"
 ;HEAP32[$_15>>2]=HEAP32[$_16>>2]|0;HEAP32[$_15+4>>2]=HEAP32[$_16+4>>2]|0;HEAP32[$_15+8>>2]=HEAP32[$_16+8>>2]|0; //@line 561 "window.rs"
 $15 = ((($_15)) + 12|0); //@line 561 "window.rs"
 ;HEAP32[$15>>2]=HEAP32[$_17>>2]|0;HEAP32[$15+4>>2]=HEAP32[$_17+4>>2]|0;HEAP32[$15+8>>2]=HEAP32[$_17+8>>2]|0; //@line 561 "window.rs"
 $16 = ((($_15)) + 24|0); //@line 561 "window.rs"
 ;HEAP32[$16>>2]=HEAP32[$_18>>2]|0;HEAP32[$16+4>>2]=HEAP32[$_18+4>>2]|0;HEAP32[$16+8>>2]=HEAP32[$_18+8>>2]|0; //@line 561 "window.rs"
 $17 = HEAP32[$_15>>2]|0; //@line 562 "window.rs"
 $switch4 = ($17>>>0)<(1); //@line 562 "window.rs"
 do {
  if ($switch4) {
   $18 = ((($_15)) + 12|0); //@line 563 "window.rs"
   $19 = HEAP32[$18>>2]|0; //@line 563 "window.rs"
   $switch = ($19>>>0)<(1); //@line 563 "window.rs"
   if (!($switch)) {
    $_14 = 4; //@line 563 "window.rs"
    break;
   }
   $20 = ((($_15)) + 24|0); //@line 564 "window.rs"
   $21 = HEAP32[$20>>2]|0; //@line 564 "window.rs"
   $switch3 = ($21>>>0)<(1); //@line 564 "window.rs"
   if ($switch3) {
    __ZN3std9panicking11begin_panic17h1a4c9be19e7ea39bE(13751,14,3388); //@line 565 "window.rs"
    // unreachable; //@line 565 "window.rs"
   } else {
    $_14 = 2; //@line 564 "window.rs"
    break;
   }
  } else {
   $_14 = 1; //@line 562 "window.rs"
  }
 } while(0);
 $22 = +HEAPF32[$cvp>>2]; //@line 567 "window.rs"
 $23 = ((($cvp)) + 4|0); //@line 567 "window.rs"
 $24 = +HEAPF32[$23>>2]; //@line 567 "window.rs"
 HEAP8[$_13>>0] = 8; //@line 560 "window.rs"
 $25 = $_14; //@line 560 "window.rs"
 $26 = ((($_13)) + 4|0); //@line 560 "window.rs"
 HEAP32[$26>>2] = $25; //@line 560 "window.rs"
 $27 = ((($_13)) + 8|0); //@line 560 "window.rs"
 HEAPF32[$27>>2] = $22; //@line 560 "window.rs"
 $28 = ((($27)) + 4|0); //@line 560 "window.rs"
 HEAPF32[$28>>2] = $24; //@line 560 "window.rs"
 __ZN5rustv6window10push_event17hdc373bf9329b1a08E($_13); //@line 560 "window.rs"
 $29 = HEAP32[7770]|0; //@line 569 "window.rs"
 $cond = ($29|0)==(1); //@line 569 "window.rs"
 if ($cond) {
  $30 = HEAP32[(31084)>>2]|0; //@line 569 "window.rs"
  $31 = HEAP32[(31088)>>2]|0; //@line 569 "window.rs"
  HEAP32[$op>>2] = $30; //@line 569 "window.rs"
  $32 = ((($op)) + 4|0); //@line 569 "window.rs"
  HEAP32[$32>>2] = $31; //@line 569 "window.rs"
  $_29 = 1; //@line 570 "window.rs"
  $33 = HEAP32[$op>>2]|0; //@line 570 "window.rs"
  $34 = ((($op)) + 4|0); //@line 570 "window.rs"
  $35 = HEAP32[$34>>2]|0; //@line 570 "window.rs"
  __ZN5rustv6window12to_screenpos17h4d298ea930c2bb34E($4,$33,$35); //@line 570 "window.rs"
  $$sreg5$field = +HEAPF32[$4>>2]; //@line 570 "window.rs"
  $$sreg5$index12 = ((($4)) + 4|0); //@line 570 "window.rs"
  $$sreg5$field13 = +HEAPF32[$$sreg5$index12>>2]; //@line 570 "window.rs"
  $36 = +HEAPF32[$cvp>>2]; //@line 570 "window.rs"
  $37 = ((($cvp)) + 4|0); //@line 570 "window.rs"
  $38 = +HEAPF32[$37>>2]; //@line 570 "window.rs"
  $39 = $dm; //@line 570 "window.rs"
  HEAP8[$_28>>0] = 9; //@line 570 "window.rs"
  $40 = $_29; //@line 570 "window.rs"
  $41 = ((($_28)) + 4|0); //@line 570 "window.rs"
  HEAP32[$41>>2] = $40; //@line 570 "window.rs"
  $42 = ((($_28)) + 8|0); //@line 570 "window.rs"
  HEAPF32[$42>>2] = $$sreg5$field; //@line 570 "window.rs"
  $43 = ((($42)) + 4|0); //@line 570 "window.rs"
  HEAPF32[$43>>2] = $$sreg5$field13; //@line 570 "window.rs"
  $44 = ((($_28)) + 16|0); //@line 570 "window.rs"
  HEAPF32[$44>>2] = $36; //@line 570 "window.rs"
  $45 = ((($44)) + 4|0); //@line 570 "window.rs"
  HEAPF32[$45>>2] = $38; //@line 570 "window.rs"
  $46 = ((($_28)) + 24|0); //@line 570 "window.rs"
  HEAP32[$46>>2] = $39; //@line 570 "window.rs"
  __ZN5rustv6window10push_event17hdc373bf9329b1a08E($_28); //@line 570 "window.rs"
 }
 $47 = HEAP32[7773]|0; //@line 572 "window.rs"
 $cond1 = ($47|0)==(1); //@line 572 "window.rs"
 if ($cond1) {
  $48 = HEAP32[(31096)>>2]|0; //@line 572 "window.rs"
  $49 = HEAP32[(31100)>>2]|0; //@line 572 "window.rs"
  HEAP32[$op1>>2] = $48; //@line 572 "window.rs"
  $50 = ((($op1)) + 4|0); //@line 572 "window.rs"
  HEAP32[$50>>2] = $49; //@line 572 "window.rs"
  $_38 = 4; //@line 573 "window.rs"
  $51 = HEAP32[$op1>>2]|0; //@line 573 "window.rs"
  $52 = ((($op1)) + 4|0); //@line 573 "window.rs"
  $53 = HEAP32[$52>>2]|0; //@line 573 "window.rs"
  __ZN5rustv6window12to_screenpos17h4d298ea930c2bb34E($3,$51,$53); //@line 573 "window.rs"
  $$sreg6$field = +HEAPF32[$3>>2]; //@line 573 "window.rs"
  $$sreg6$index15 = ((($3)) + 4|0); //@line 573 "window.rs"
  $$sreg6$field16 = +HEAPF32[$$sreg6$index15>>2]; //@line 573 "window.rs"
  $54 = +HEAPF32[$cvp>>2]; //@line 573 "window.rs"
  $55 = ((($cvp)) + 4|0); //@line 573 "window.rs"
  $56 = +HEAPF32[$55>>2]; //@line 573 "window.rs"
  $57 = $dm; //@line 573 "window.rs"
  HEAP8[$_37>>0] = 9; //@line 573 "window.rs"
  $58 = $_38; //@line 573 "window.rs"
  $59 = ((($_37)) + 4|0); //@line 573 "window.rs"
  HEAP32[$59>>2] = $58; //@line 573 "window.rs"
  $60 = ((($_37)) + 8|0); //@line 573 "window.rs"
  HEAPF32[$60>>2] = $$sreg6$field; //@line 573 "window.rs"
  $61 = ((($60)) + 4|0); //@line 573 "window.rs"
  HEAPF32[$61>>2] = $$sreg6$field16; //@line 573 "window.rs"
  $62 = ((($_37)) + 16|0); //@line 573 "window.rs"
  HEAPF32[$62>>2] = $54; //@line 573 "window.rs"
  $63 = ((($62)) + 4|0); //@line 573 "window.rs"
  HEAPF32[$63>>2] = $56; //@line 573 "window.rs"
  $64 = ((($_37)) + 24|0); //@line 573 "window.rs"
  HEAP32[$64>>2] = $57; //@line 573 "window.rs"
  __ZN5rustv6window10push_event17hdc373bf9329b1a08E($_37); //@line 573 "window.rs"
 }
 $65 = HEAP32[7776]|0; //@line 575 "window.rs"
 $cond2 = ($65|0)==(1); //@line 575 "window.rs"
 if (!($cond2)) {
  STACKTOP = sp;return; //@line 579 "window.rs"
 }
 $66 = HEAP32[(31108)>>2]|0; //@line 575 "window.rs"
 $67 = HEAP32[(31112)>>2]|0; //@line 575 "window.rs"
 HEAP32[$op2>>2] = $66; //@line 575 "window.rs"
 $68 = ((($op2)) + 4|0); //@line 575 "window.rs"
 HEAP32[$68>>2] = $67; //@line 575 "window.rs"
 $_46 = 2; //@line 576 "window.rs"
 $69 = HEAP32[$op2>>2]|0; //@line 576 "window.rs"
 $70 = ((($op2)) + 4|0); //@line 576 "window.rs"
 $71 = HEAP32[$70>>2]|0; //@line 576 "window.rs"
 __ZN5rustv6window12to_screenpos17h4d298ea930c2bb34E($2,$69,$71); //@line 576 "window.rs"
 $$sreg7$field = +HEAPF32[$2>>2]; //@line 576 "window.rs"
 $$sreg7$index18 = ((($2)) + 4|0); //@line 576 "window.rs"
 $$sreg7$field19 = +HEAPF32[$$sreg7$index18>>2]; //@line 576 "window.rs"
 $72 = +HEAPF32[$cvp>>2]; //@line 576 "window.rs"
 $73 = ((($cvp)) + 4|0); //@line 576 "window.rs"
 $74 = +HEAPF32[$73>>2]; //@line 576 "window.rs"
 $75 = $dm; //@line 576 "window.rs"
 HEAP8[$_45>>0] = 9; //@line 576 "window.rs"
 $76 = $_46; //@line 576 "window.rs"
 $77 = ((($_45)) + 4|0); //@line 576 "window.rs"
 HEAP32[$77>>2] = $76; //@line 576 "window.rs"
 $78 = ((($_45)) + 8|0); //@line 576 "window.rs"
 HEAPF32[$78>>2] = $$sreg7$field; //@line 576 "window.rs"
 $79 = ((($78)) + 4|0); //@line 576 "window.rs"
 HEAPF32[$79>>2] = $$sreg7$field19; //@line 576 "window.rs"
 $80 = ((($_45)) + 16|0); //@line 576 "window.rs"
 HEAPF32[$80>>2] = $72; //@line 576 "window.rs"
 $81 = ((($80)) + 4|0); //@line 576 "window.rs"
 HEAPF32[$81>>2] = $74; //@line 576 "window.rs"
 $82 = ((($_45)) + 24|0); //@line 576 "window.rs"
 HEAP32[$82>>2] = $75; //@line 576 "window.rs"
 __ZN5rustv6window10push_event17hdc373bf9329b1a08E($_45); //@line 576 "window.rs"
 STACKTOP = sp;return; //@line 579 "window.rs"
}
function __ZN5rustv6window9callbacks19passive_motion_func17h329377897b7a09a1E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0.0, $$sreg$field2 = 0.0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_7 = 0, $_9 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $2 = sp;
 $_9 = sp + 48|0;
 $_7 = sp + 16|0;
 $x = $0;
 $y = $1;
 $3 = $x; //@line 582 "window.rs"
 $4 = $y; //@line 582 "window.rs"
 __ZN5rustv6window13set_mouse_pos17hf79519c5acd775fbE($3,$4); //@line 582 "window.rs"
 $5 = $x; //@line 583 "window.rs"
 $6 = $y; //@line 583 "window.rs"
 HEAP32[$_9>>2] = $5; //@line 583 "window.rs"
 $7 = ((($_9)) + 4|0); //@line 583 "window.rs"
 HEAP32[$7>>2] = $6; //@line 583 "window.rs"
 $8 = HEAP32[$_9>>2]|0; //@line 583 "window.rs"
 $9 = ((($_9)) + 4|0); //@line 583 "window.rs"
 $10 = HEAP32[$9>>2]|0; //@line 583 "window.rs"
 __ZN5rustv6window12to_screenpos17h4d298ea930c2bb34E($2,$8,$10); //@line 583 "window.rs"
 $$sreg$field = +HEAPF32[$2>>2]; //@line 583 "window.rs"
 $$sreg$index1 = ((($2)) + 4|0); //@line 583 "window.rs"
 $$sreg$field2 = +HEAPF32[$$sreg$index1>>2]; //@line 583 "window.rs"
 HEAP8[$_7>>0] = 6; //@line 583 "window.rs"
 $11 = ((($_7)) + 4|0); //@line 583 "window.rs"
 HEAPF32[$11>>2] = $$sreg$field; //@line 583 "window.rs"
 $12 = ((($11)) + 4|0); //@line 583 "window.rs"
 HEAPF32[$12>>2] = $$sreg$field2; //@line 583 "window.rs"
 __ZN5rustv6window10push_event17hdc373bf9329b1a08E($_7); //@line 583 "window.rs"
 STACKTOP = sp;return; //@line 584 "window.rs"
}
function __ZN5rustv6window9callbacks11render_null17hcbe53d744bc68365E() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return; //@line 585 "window.rs"
}
function __ZN5rustv6window9callbacks9idle_func17h0cb1903543c78295E() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _glutPostRedisplay(); //@line 587 "window.rs"
 return; //@line 588 "window.rs"
}
function __ZN5rustv6window9callbacks10mouse_func17h953632dd851c215aE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink = 0, $$sink1 = 0, $$sink3 = 0, $$sink4 = 0, $$sreg$field = 0.0, $$sreg$field12 = 0.0, $$sreg$index11 = 0, $$sreg10$field = 0.0, $$sreg10$field25 = 0.0, $$sreg10$index24 = 0, $$sreg7$field = 0.0, $$sreg7$field16 = 0.0, $$sreg7$index15 = 0, $$sreg8$field = 0, $$sreg8$field19 = 0, $$sreg8$index18 = 0, $$sreg9$field = 0, $$sreg9$field22 = 0, $$sreg9$index21 = 0, $10 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $GLUT_MID_BUTTON = 0, $GLUT_MID_BUTTON1 = 0;
 var $GLUT_MID_BUTTON2 = 0, $_19 = 0, $_20 = 0, $_24 = 0, $_28 = 0, $_40 = 0, $_43 = 0, $_45 = 0, $_47 = 0, $_52 = 0, $_54 = 0, $_57 = 0, $_61 = 0, $_65 = 0, $button = 0, $cond = 0, $mb = 0, $oldbs = 0, $oldpos = 0, $posi = 0;
 var $state = 0, $vpos = 0, $vpos$index14 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $4 = sp + 64|0;
 $5 = sp + 48|0;
 $6 = sp + 32|0;
 $7 = sp + 16|0;
 $8 = sp;
 $_61 = sp + 260|0;
 $_57 = sp + 232|0;
 $_54 = sp + 204|0;
 $_52 = sp + 192|0;
 $_40 = sp + 168|0;
 $_28 = sp + 144|0;
 $_19 = sp + 108|0;
 $vpos = sp + 96|0;
 $posi = sp + 88|0;
 $button = $0;
 $state = $1;
 $x = $2;
 $y = $3;
 $9 = $x; //@line 596 "window.rs"
 $10 = $y; //@line 596 "window.rs"
 HEAP32[$posi>>2] = $9; //@line 596 "window.rs"
 $11 = ((($posi)) + 4|0); //@line 596 "window.rs"
 HEAP32[$11>>2] = $10; //@line 596 "window.rs"
 $12 = HEAP32[$posi>>2]|0; //@line 597 "window.rs"
 $13 = ((($posi)) + 4|0); //@line 597 "window.rs"
 $14 = HEAP32[$13>>2]|0; //@line 597 "window.rs"
 __ZN5rustv6window12to_screenpos17h4d298ea930c2bb34E($8,$12,$14); //@line 597 "window.rs"
 $$sreg$field = +HEAPF32[$8>>2]; //@line 597 "window.rs"
 $$sreg$index11 = ((($8)) + 4|0); //@line 597 "window.rs"
 $$sreg$field12 = +HEAPF32[$$sreg$index11>>2]; //@line 597 "window.rs"
 HEAPF32[$vpos>>2] = $$sreg$field; //@line 597 "window.rs"
 $vpos$index14 = ((($vpos)) + 4|0); //@line 597 "window.rs"
 HEAPF32[$vpos$index14>>2] = $$sreg$field12; //@line 597 "window.rs"
 $15 = HEAP32[7764]|0; //@line 598 "window.rs"
 $oldbs = $15; //@line 598 "window.rs"
 $16 = $state; //@line 600 "window.rs"
 $17 = ($16|0)==(0); //@line 600 "window.rs"
 $18 = $button;
 if ($17) {
  $19 = HEAP32[7764]|0; //@line 601 "window.rs"
  $20 = $19 | $18; //@line 601 "window.rs"
  HEAP32[7764] = $20; //@line 601 "window.rs"
  HEAP8[39193] = 1; //@line 603 "window.rs"
 } else {
  $21 = $18 ^ -1; //@line 606 "window.rs"
  $22 = HEAP32[7764]|0; //@line 606 "window.rs"
  $23 = $22 & $21; //@line 606 "window.rs"
  HEAP32[7764] = $23; //@line 606 "window.rs"
 }
 $24 = $button; //@line 610 "window.rs"
 switch ($24|0) {
 case 0:  {
  $_20 = 1; //@line 611 "window.rs"
  break;
 }
 case 2:  {
  $_20 = 4; //@line 612 "window.rs"
  break;
 }
 default: {
  $GLUT_MID_BUTTON = $24; //@line 613 "window.rs"
  $_20 = 2; //@line 613 "window.rs"
 }
 }
 $25 = $state; //@line 618 "window.rs"
 $cond = ($25|0)==(0); //@line 618 "window.rs"
 if ($cond) {
  $_24 = 1; //@line 618 "window.rs"
 } else {
  $_24 = 0; //@line 618 "window.rs"
 }
 $26 = $x; //@line 619 "window.rs"
 $27 = $y; //@line 619 "window.rs"
 HEAP32[$_28>>2] = $26; //@line 619 "window.rs"
 $28 = ((($_28)) + 4|0); //@line 619 "window.rs"
 HEAP32[$28>>2] = $27; //@line 619 "window.rs"
 $29 = HEAP32[$_28>>2]|0; //@line 619 "window.rs"
 $30 = ((($_28)) + 4|0); //@line 619 "window.rs"
 $31 = HEAP32[$30>>2]|0; //@line 619 "window.rs"
 __ZN5rustv6window12to_screenpos17h4d298ea930c2bb34E($7,$29,$31); //@line 619 "window.rs"
 $$sreg7$field = +HEAPF32[$7>>2]; //@line 619 "window.rs"
 $$sreg7$index15 = ((($7)) + 4|0); //@line 619 "window.rs"
 $$sreg7$field16 = +HEAPF32[$$sreg7$index15>>2]; //@line 619 "window.rs"
 HEAP8[$_19>>0] = 11; //@line 609 "window.rs"
 $32 = $_20; //@line 609 "window.rs"
 $33 = ((($_19)) + 4|0); //@line 609 "window.rs"
 HEAP32[$33>>2] = $32; //@line 609 "window.rs"
 $34 = $_24; //@line 609 "window.rs"
 $35 = $34&1; //@line 609 "window.rs"
 $36 = ((($_19)) + 1|0); //@line 609 "window.rs"
 $37 = $35&1; //@line 609 "window.rs"
 HEAP8[$36>>0] = $37; //@line 609 "window.rs"
 $38 = ((($_19)) + 8|0); //@line 609 "window.rs"
 HEAPF32[$38>>2] = $$sreg7$field; //@line 609 "window.rs"
 $39 = ((($38)) + 4|0); //@line 609 "window.rs"
 HEAPF32[$39>>2] = $$sreg7$field16; //@line 609 "window.rs"
 __ZN5rustv6window10push_event17hdc373bf9329b1a08E($_19); //@line 609 "window.rs"
 $40 = $state; //@line 623 "window.rs"
 $41 = ($40|0)==(0); //@line 623 "window.rs"
 $42 = $button;
 if ($41) {
  switch ($42|0) {
  case 0:  {
   $$sink1 = (31088);$$sink3 = (31084);$$sink4 = 31080;
   break;
  }
  case 2:  {
   $$sink1 = (31100);$$sink3 = (31096);$$sink4 = 31092;
   break;
  }
  default: {
   $43 = $button; //@line 629 "window.rs"
   $GLUT_MID_BUTTON1 = $43; //@line 629 "window.rs"
   $$sink1 = (31112);$$sink3 = (31108);$$sink4 = 31104;
  }
  }
  $44 = HEAP32[$posi>>2]|0;
  $45 = ((($posi)) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  HEAP32[$$sink4>>2] = 1;
  HEAP32[$$sink3>>2] = $44;
  HEAP32[$$sink1>>2] = $46;
  $81 = $x; //@line 648 "window.rs"
  $82 = $y; //@line 648 "window.rs"
  __ZN5rustv6window13set_mouse_pos17hf79519c5acd775fbE($81,$82); //@line 648 "window.rs"
  STACKTOP = sp;return; //@line 649 "window.rs"
 }
 switch ($42|0) {
 case 0:  {
  $_43 = 1; //@line 634 "window.rs"
  HEAP32[$_40>>2] = 31080; //@line 634 "window.rs"
  $47 = $_43; //@line 634 "window.rs"
  $$sink = $47;
  break;
 }
 case 2:  {
  $_45 = 4; //@line 635 "window.rs"
  HEAP32[$_40>>2] = 31092; //@line 635 "window.rs"
  $48 = $_45; //@line 635 "window.rs"
  $$sink = $48;
  break;
 }
 default: {
  $49 = $button; //@line 636 "window.rs"
  $GLUT_MID_BUTTON2 = $49; //@line 636 "window.rs"
  $_47 = 2; //@line 636 "window.rs"
  HEAP32[$_40>>2] = 31104; //@line 636 "window.rs"
  $50 = $_47; //@line 636 "window.rs"
  $$sink = $50;
 }
 }
 $51 = ((($_40)) + 4|0);
 HEAP32[$51>>2] = $$sink;
 $52 = HEAP32[$_40>>2]|0; //@line 633 "window.rs"
 $oldpos = $52; //@line 633 "window.rs"
 $53 = ((($_40)) + 4|0); //@line 633 "window.rs"
 $54 = HEAP32[$53>>2]|0; //@line 633 "window.rs"
 $mb = $54; //@line 633 "window.rs"
 $55 = $oldpos; //@line 638 "window.rs"
 ;HEAP32[$_52>>2]=HEAP32[$55>>2]|0;HEAP32[$_52+4>>2]=HEAP32[$55+4>>2]|0;HEAP32[$_52+8>>2]=HEAP32[$55+8>>2]|0; //@line 638 "window.rs"
 __ZN38__LT_core__option__Option_LT_T_GT__GT_6unwrap17h303cd54fcfc19e6eE($6,$_52); //@line 638 "window.rs"
 $$sreg8$field = HEAP32[$6>>2]|0; //@line 638 "window.rs"
 $$sreg8$index18 = ((($6)) + 4|0); //@line 638 "window.rs"
 $$sreg8$field19 = HEAP32[$$sreg8$index18>>2]|0; //@line 638 "window.rs"
 $56 = HEAP32[$posi>>2]|0; //@line 638 "window.rs"
 $57 = ((($posi)) + 4|0); //@line 638 "window.rs"
 $58 = HEAP32[$57>>2]|0; //@line 638 "window.rs"
 $59 = (__ZN5rustv6window10drag_mdist17hc79ccb4443dd33a3E($$sreg8$field,$$sreg8$field19,$56,$58)|0); //@line 638 "window.rs"
 $60 = ($59|0)==(0); //@line 638 "window.rs"
 $61 = $mb;
 if ($60) {
  $62 = +HEAPF32[$vpos>>2]; //@line 639 "window.rs"
  $63 = ((($vpos)) + 4|0); //@line 639 "window.rs"
  $64 = +HEAPF32[$63>>2]; //@line 639 "window.rs"
  HEAP8[$_54>>0] = 7; //@line 639 "window.rs"
  $65 = ((($_54)) + 4|0); //@line 639 "window.rs"
  HEAP32[$65>>2] = $61; //@line 639 "window.rs"
  $66 = ((($_54)) + 8|0); //@line 639 "window.rs"
  HEAPF32[$66>>2] = $62; //@line 639 "window.rs"
  $67 = ((($66)) + 4|0); //@line 639 "window.rs"
  HEAPF32[$67>>2] = $64; //@line 639 "window.rs"
  __ZN5rustv6window10push_event17hdc373bf9329b1a08E($_54); //@line 639 "window.rs"
 } else {
  $68 = $oldpos; //@line 641 "window.rs"
  ;HEAP32[$_61>>2]=HEAP32[$68>>2]|0;HEAP32[$_61+4>>2]=HEAP32[$68+4>>2]|0;HEAP32[$_61+8>>2]=HEAP32[$68+8>>2]|0; //@line 641 "window.rs"
  __ZN38__LT_core__option__Option_LT_T_GT__GT_6unwrap17h303cd54fcfc19e6eE($5,$_61); //@line 641 "window.rs"
  $$sreg9$field = HEAP32[$5>>2]|0; //@line 641 "window.rs"
  $$sreg9$index21 = ((($5)) + 4|0); //@line 641 "window.rs"
  $$sreg9$field22 = HEAP32[$$sreg9$index21>>2]|0; //@line 641 "window.rs"
  __ZN5rustv6window12to_screenpos17h4d298ea930c2bb34E($4,$$sreg9$field,$$sreg9$field22); //@line 641 "window.rs"
  $$sreg10$field = +HEAPF32[$4>>2]; //@line 641 "window.rs"
  $$sreg10$index24 = ((($4)) + 4|0); //@line 641 "window.rs"
  $$sreg10$field25 = +HEAPF32[$$sreg10$index24>>2]; //@line 641 "window.rs"
  $69 = +HEAPF32[$vpos>>2]; //@line 641 "window.rs"
  $70 = ((($vpos)) + 4|0); //@line 641 "window.rs"
  $71 = +HEAPF32[$70>>2]; //@line 641 "window.rs"
  $72 = HEAP32[7769]|0; //@line 641 "window.rs"
  HEAP8[$_57>>0] = 10; //@line 641 "window.rs"
  $73 = ((($_57)) + 4|0); //@line 641 "window.rs"
  HEAP32[$73>>2] = $61; //@line 641 "window.rs"
  $74 = ((($_57)) + 8|0); //@line 641 "window.rs"
  HEAPF32[$74>>2] = $$sreg10$field; //@line 641 "window.rs"
  $75 = ((($74)) + 4|0); //@line 641 "window.rs"
  HEAPF32[$75>>2] = $$sreg10$field25; //@line 641 "window.rs"
  $76 = ((($_57)) + 16|0); //@line 641 "window.rs"
  HEAPF32[$76>>2] = $69; //@line 641 "window.rs"
  $77 = ((($76)) + 4|0); //@line 641 "window.rs"
  HEAPF32[$77>>2] = $71; //@line 641 "window.rs"
  $78 = ((($_57)) + 24|0); //@line 641 "window.rs"
  HEAP32[$78>>2] = $72; //@line 641 "window.rs"
  __ZN5rustv6window10push_event17hdc373bf9329b1a08E($_57); //@line 641 "window.rs"
 }
 $79 = $oldpos; //@line 644 "window.rs"
 HEAP32[$79>>2] = 0; //@line 644 "window.rs"
 $_65 = 0; //@line 645 "window.rs"
 $80 = $_65; //@line 645 "window.rs"
 __ZN5rustv6window12set_dragmode17hb2b14aa1a94a54f8E($80); //@line 645 "window.rs"
 $81 = $x; //@line 648 "window.rs"
 $82 = $y; //@line 648 "window.rs"
 __ZN5rustv6window13set_mouse_pos17hf79519c5acd775fbE($81,$82); //@line 648 "window.rs"
 STACKTOP = sp;return; //@line 649 "window.rs"
}
function __ZN5rustv10emscripten5alert17hc82315ff20fd9b50E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field3 = 0, $$sreg$index2 = 0, $$sreg1$field = 0, $$sreg1$field6 = 0, $$sreg1$index5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_11 = 0, $_3 = 0, $__arg0 = 0, $personalityslot = 0, $s = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $2 = sp + 16|0;
 $3 = sp;
 $personalityslot = sp + 88|0;
 $_11 = sp + 80|0;
 $_10 = sp + 72|0;
 $_3 = sp + 48|0;
 $tmp = sp + 32|0;
 $s = sp + 24|0;
 HEAP32[$s>>2] = $0;
 $4 = ((($s)) + 4|0);
 HEAP32[$4>>2] = $1;
 HEAP32[$_11>>2] = $s; //@line 76 "emscripten.rs"
 $5 = HEAP32[$_11>>2]|0; //@line 76 "emscripten.rs"
 $__arg0 = $5; //@line 76 "emscripten.rs"
 $6 = $__arg0; //@line 76 "emscripten.rs"
 __ZN4core3fmt10ArgumentV13new17heecba43e0c9da516E($3,$6,162); //@line 76 "emscripten.rs"
 $$sreg$field = HEAP32[$3>>2]|0; //@line 76 "emscripten.rs"
 $$sreg$index2 = ((($3)) + 4|0); //@line 76 "emscripten.rs"
 $$sreg$field3 = HEAP32[$$sreg$index2>>2]|0; //@line 76 "emscripten.rs"
 HEAP32[$_10>>2] = $$sreg$field; //@line 76 "emscripten.rs"
 $7 = ((($_10)) + 4|0); //@line 76 "emscripten.rs"
 HEAP32[$7>>2] = $$sreg$field3; //@line 76 "emscripten.rs"
 $8 = HEAP32[1683]|0; //@line 76 "emscripten.rs"
 __ZN4core3fmt9Arguments16new_v1_formatted17hd7921c86529aa3b1E($_3,3404,2,$_10,1,$8,1); //@line 76 "emscripten.rs"
 __ZN5alloc3fmt6format17h9b28a0d324b081e9E($tmp,$_3); //@line 76 "emscripten.rs"
 __THREW__ = 0;
 invoke_vii(181,($2|0),($tmp|0)); //@line 77 "emscripten.rs"
 $$sreg1$field = HEAP32[$2>>2]|0; //@line 77 "emscripten.rs"
 $$sreg1$index5 = ((($2)) + 4|0); //@line 77 "emscripten.rs"
 $$sreg1$field6 = HEAP32[$$sreg1$index5>>2]|0; //@line 77 "emscripten.rs"
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if (!($10)) {
  __THREW__ = 0;
  $11 = (invoke_iii(182,($$sreg1$field|0),($$sreg1$field6|0))|0); //@line 77 "emscripten.rs"
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if (!($13)) {
   __THREW__ = 0;
   invoke_vi(183,($11|0)); //@line 77 "emscripten.rs"
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if (!($15)) {
    __ZN4core3ptr13drop_in_place17hcdb5cdbc316a5a16E($tmp); //@line 78 "emscripten.rs"
    STACKTOP = sp;return; //@line 78 "emscripten.rs"
   }
  }
 }
 $16 = ___cxa_find_matching_catch_2()|0;
 $17 = tempRet0;
 HEAP32[$personalityslot>>2] = $16;
 $18 = ((($personalityslot)) + 4|0);
 HEAP32[$18>>2] = $17;
 __ZN4core3ptr13drop_in_place17hcdb5cdbc316a5a16E($tmp); //@line 78 "emscripten.rs"
 $19 = HEAP32[$personalityslot>>2]|0; //@line 75 "emscripten.rs"
 $20 = ((($personalityslot)) + 4|0); //@line 75 "emscripten.rs"
 $21 = HEAP32[$20>>2]|0; //@line 75 "emscripten.rs"
 ___resumeException($19|0);
 // unreachable;
}
function __ZN73__LT_rustv__r3d__geom__Extents_LT_T_GT__u20_as_u20_core__clone__Clone_GT_5clone17h687e78722686f5f7E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0.0, $$sreg$field3 = 0.0, $$sreg$index2 = 0, $$sreg1$field = 0.0, $$sreg1$field6 = 0.0, $$sreg1$index5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__self_0_0 = 0, $__self_0_1 = 0, $personalityslot = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = sp + 16|0;
 $3 = sp;
 $personalityslot = sp + 40|0;
 $self = $1;
 $4 = $self; //@line 86 "r3d/geom.rs"
 $__self_0_0 = $4; //@line 86 "r3d/geom.rs"
 $5 = $self; //@line 86 "r3d/geom.rs"
 $6 = ((($5)) + 8|0); //@line 86 "r3d/geom.rs"
 $__self_0_1 = $6; //@line 86 "r3d/geom.rs"
 $7 = $__self_0_0; //@line 86 "r3d/geom.rs"
 __ZN81__LT_rustv__r3d__vector__Vec2_LT_X_C__u20_Y_GT__u20_as_u20_core__clone__Clone_GT_5clone17h0f20656a3ab1ae05E($3,$7); //@line 86 "r3d/geom.rs"
 $$sreg$field = +HEAPF32[$3>>2]; //@line 86 "r3d/geom.rs"
 $$sreg$index2 = ((($3)) + 4|0); //@line 86 "r3d/geom.rs"
 $$sreg$field3 = +HEAPF32[$$sreg$index2>>2]; //@line 86 "r3d/geom.rs"
 $8 = $__self_0_1; //@line 86 "r3d/geom.rs"
 __THREW__ = 0;
 invoke_vii(184,($2|0),($8|0)); //@line 86 "r3d/geom.rs"
 $$sreg1$field = +HEAPF32[$2>>2]; //@line 86 "r3d/geom.rs"
 $$sreg1$index5 = ((($2)) + 4|0); //@line 86 "r3d/geom.rs"
 $$sreg1$field6 = +HEAPF32[$$sreg1$index5>>2]; //@line 86 "r3d/geom.rs"
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  HEAP32[$personalityslot>>2] = $14;
  $16 = ((($personalityslot)) + 4|0);
  HEAP32[$16>>2] = $15;
  $17 = HEAP32[$personalityslot>>2]|0; //@line 84 "r3d/geom.rs"
  $18 = ((($personalityslot)) + 4|0); //@line 84 "r3d/geom.rs"
  $19 = HEAP32[$18>>2]|0; //@line 84 "r3d/geom.rs"
  ___resumeException($17|0);
  // unreachable;
 } else {
  HEAPF32[$0>>2] = $$sreg$field; //@line 84 "r3d/geom.rs"
  $11 = ((($0)) + 4|0); //@line 84 "r3d/geom.rs"
  HEAPF32[$11>>2] = $$sreg$field3; //@line 84 "r3d/geom.rs"
  $12 = ((($0)) + 8|0); //@line 84 "r3d/geom.rs"
  HEAPF32[$12>>2] = $$sreg1$field; //@line 84 "r3d/geom.rs"
  $13 = ((($12)) + 4|0); //@line 84 "r3d/geom.rs"
  HEAPF32[$13>>2] = $$sreg1$field6; //@line 84 "r3d/geom.rs"
  STACKTOP = sp;return; //@line 84 "r3d/geom.rs"
 }
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_14from_raw_parts17h532028a06be2ef74E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_0 = 0, $cap = 0, $ptr = 0, $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_0 = sp + 8|0;
 $ptr = $0;
 $cap = $1;
 $2 = $ptr; //@line 178 "/checkout/src/liballoc/raw_vec.rs"
 $3 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_13new_unchecked17h0173a0f57669b1fcE($2)|0); //@line 178 "/checkout/src/liballoc/raw_vec.rs"
 $4 = $cap; //@line 179 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$_0>>2] = $3; //@line 177 "/checkout/src/liballoc/raw_vec.rs"
 $5 = ((($_0)) + 4|0); //@line 177 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$5>>2] = $4; //@line 177 "/checkout/src/liballoc/raw_vec.rs"
 $6 = HEAP32[$_0>>2]|0; //@line 182 "/checkout/src/liballoc/raw_vec.rs"
 $7 = ((($_0)) + 4|0); //@line 182 "/checkout/src/liballoc/raw_vec.rs"
 $8 = HEAP32[$7>>2]|0; //@line 182 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$retVal>>2] = $6; //@line 182 "/checkout/src/liballoc/raw_vec.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 182 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$retVal$index1>>2] = $8; //@line 182 "/checkout/src/liballoc/raw_vec.rs"
 STACKTOP = sp;return; //@line 182 "/checkout/src/liballoc/raw_vec.rs"
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_14from_raw_parts17h6425fbe5971072edE($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_0 = 0, $cap = 0, $ptr = 0, $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_0 = sp + 8|0;
 $ptr = $0;
 $cap = $1;
 $2 = $ptr; //@line 178 "/checkout/src/liballoc/raw_vec.rs"
 $3 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_13new_unchecked17ha96c2151ecf4ff6cE($2)|0); //@line 178 "/checkout/src/liballoc/raw_vec.rs"
 $4 = $cap; //@line 179 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$_0>>2] = $3; //@line 177 "/checkout/src/liballoc/raw_vec.rs"
 $5 = ((($_0)) + 4|0); //@line 177 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$5>>2] = $4; //@line 177 "/checkout/src/liballoc/raw_vec.rs"
 $6 = HEAP32[$_0>>2]|0; //@line 182 "/checkout/src/liballoc/raw_vec.rs"
 $7 = ((($_0)) + 4|0); //@line 182 "/checkout/src/liballoc/raw_vec.rs"
 $8 = HEAP32[$7>>2]|0; //@line 182 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$retVal>>2] = $6; //@line 182 "/checkout/src/liballoc/raw_vec.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 182 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$retVal$index1>>2] = $8; //@line 182 "/checkout/src/liballoc/raw_vec.rs"
 STACKTOP = sp;return; //@line 182 "/checkout/src/liballoc/raw_vec.rs"
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_14from_raw_parts17h75ca805e873840bdE($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_0 = 0, $cap = 0, $ptr = 0, $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_0 = sp + 8|0;
 $ptr = $0;
 $cap = $1;
 $2 = $ptr; //@line 178 "/checkout/src/liballoc/raw_vec.rs"
 $3 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_13new_unchecked17hc04c3fd822e1b62dE($2)|0); //@line 178 "/checkout/src/liballoc/raw_vec.rs"
 $4 = $cap; //@line 179 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$_0>>2] = $3; //@line 177 "/checkout/src/liballoc/raw_vec.rs"
 $5 = ((($_0)) + 4|0); //@line 177 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$5>>2] = $4; //@line 177 "/checkout/src/liballoc/raw_vec.rs"
 $6 = HEAP32[$_0>>2]|0; //@line 182 "/checkout/src/liballoc/raw_vec.rs"
 $7 = ((($_0)) + 4|0); //@line 182 "/checkout/src/liballoc/raw_vec.rs"
 $8 = HEAP32[$7>>2]|0; //@line 182 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$retVal>>2] = $6; //@line 182 "/checkout/src/liballoc/raw_vec.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 182 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$retVal$index1>>2] = $8; //@line 182 "/checkout/src/liballoc/raw_vec.rs"
 STACKTOP = sp;return; //@line 182 "/checkout/src/liballoc/raw_vec.rs"
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3new17h13a442f282479982E($retVal) {
 $retVal = $retVal|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $0 = 0, $retVal$index4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp; //@line 121 "/checkout/src/liballoc/raw_vec.rs"
 __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_6new_in17h0b1797b57d12d8fbE($0); //@line 121 "/checkout/src/liballoc/raw_vec.rs"
 $$sreg$field = HEAP32[$0>>2]|0; //@line 121 "/checkout/src/liballoc/raw_vec.rs"
 $$sreg$index1 = ((($0)) + 4|0); //@line 121 "/checkout/src/liballoc/raw_vec.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 121 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$retVal>>2] = $$sreg$field; //@line 122 "/checkout/src/liballoc/raw_vec.rs"
 $retVal$index4 = ((($retVal)) + 4|0); //@line 122 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$retVal$index4>>2] = $$sreg$field2; //@line 122 "/checkout/src/liballoc/raw_vec.rs"
 STACKTOP = sp;return; //@line 122 "/checkout/src/liballoc/raw_vec.rs"
}
function __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_6new_in17h0b1797b57d12d8fbE($retVal) {
 $retVal = $retVal|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $cap = 0;
 var $personalityslot = 0, $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $personalityslot = sp + 16|0;
 $_0 = sp;
 __THREW__ = 0;
 $0 = (invoke_i(185)|0); //@line 58 "/checkout/src/liballoc/raw_vec.rs"
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  $3 = ($0|0)==(0); //@line 58 "/checkout/src/liballoc/raw_vec.rs"
  if ($3) {
   $cap = -1; //@line 58 "/checkout/src/liballoc/raw_vec.rs"
  } else {
   $cap = 0; //@line 58 "/checkout/src/liballoc/raw_vec.rs"
  }
  __THREW__ = 0;
  $4 = (invoke_i(186)|0); //@line 62 "/checkout/src/liballoc/raw_vec.rs"
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if (!($6)) {
   $7 = $cap; //@line 63 "/checkout/src/liballoc/raw_vec.rs"
   HEAP32[$_0>>2] = $4; //@line 61 "/checkout/src/liballoc/raw_vec.rs"
   $8 = ((($_0)) + 4|0); //@line 61 "/checkout/src/liballoc/raw_vec.rs"
   HEAP32[$8>>2] = $7; //@line 61 "/checkout/src/liballoc/raw_vec.rs"
   $9 = HEAP32[$_0>>2]|0; //@line 66 "/checkout/src/liballoc/raw_vec.rs"
   $10 = ((($_0)) + 4|0); //@line 66 "/checkout/src/liballoc/raw_vec.rs"
   $11 = HEAP32[$10>>2]|0; //@line 66 "/checkout/src/liballoc/raw_vec.rs"
   HEAP32[$retVal>>2] = $9; //@line 66 "/checkout/src/liballoc/raw_vec.rs"
   $retVal$index1 = ((($retVal)) + 4|0); //@line 66 "/checkout/src/liballoc/raw_vec.rs"
   HEAP32[$retVal$index1>>2] = $11; //@line 66 "/checkout/src/liballoc/raw_vec.rs"
   STACKTOP = sp;return; //@line 66 "/checkout/src/liballoc/raw_vec.rs"
  }
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 HEAP32[$personalityslot>>2] = $12;
 $14 = ((($personalityslot)) + 4|0);
 HEAP32[$14>>2] = $13;
 $15 = HEAP32[$personalityslot>>2]|0; //@line 56 "/checkout/src/liballoc/raw_vec.rs"
 $16 = ((($personalityslot)) + 4|0); //@line 56 "/checkout/src/liballoc/raw_vec.rs"
 $17 = HEAP32[$16>>2]|0; //@line 56 "/checkout/src/liballoc/raw_vec.rs"
 ___resumeException($15|0);
 // unreachable;
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3new17h3cd73a04e0db3b7fE($retVal) {
 $retVal = $retVal|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $0 = 0, $retVal$index4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp; //@line 121 "/checkout/src/liballoc/raw_vec.rs"
 __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_6new_in17h278d05d5e60fe9f1E($0); //@line 121 "/checkout/src/liballoc/raw_vec.rs"
 $$sreg$field = HEAP32[$0>>2]|0; //@line 121 "/checkout/src/liballoc/raw_vec.rs"
 $$sreg$index1 = ((($0)) + 4|0); //@line 121 "/checkout/src/liballoc/raw_vec.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 121 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$retVal>>2] = $$sreg$field; //@line 122 "/checkout/src/liballoc/raw_vec.rs"
 $retVal$index4 = ((($retVal)) + 4|0); //@line 122 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$retVal$index4>>2] = $$sreg$field2; //@line 122 "/checkout/src/liballoc/raw_vec.rs"
 STACKTOP = sp;return; //@line 122 "/checkout/src/liballoc/raw_vec.rs"
}
function __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_6new_in17h278d05d5e60fe9f1E($retVal) {
 $retVal = $retVal|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $cap = 0;
 var $personalityslot = 0, $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $personalityslot = sp + 16|0;
 $_0 = sp;
 __THREW__ = 0;
 $0 = (invoke_i(187)|0); //@line 58 "/checkout/src/liballoc/raw_vec.rs"
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  $3 = ($0|0)==(0); //@line 58 "/checkout/src/liballoc/raw_vec.rs"
  if ($3) {
   $cap = -1; //@line 58 "/checkout/src/liballoc/raw_vec.rs"
  } else {
   $cap = 0; //@line 58 "/checkout/src/liballoc/raw_vec.rs"
  }
  __THREW__ = 0;
  $4 = (invoke_i(188)|0); //@line 62 "/checkout/src/liballoc/raw_vec.rs"
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if (!($6)) {
   $7 = $cap; //@line 63 "/checkout/src/liballoc/raw_vec.rs"
   HEAP32[$_0>>2] = $4; //@line 61 "/checkout/src/liballoc/raw_vec.rs"
   $8 = ((($_0)) + 4|0); //@line 61 "/checkout/src/liballoc/raw_vec.rs"
   HEAP32[$8>>2] = $7; //@line 61 "/checkout/src/liballoc/raw_vec.rs"
   $9 = HEAP32[$_0>>2]|0; //@line 66 "/checkout/src/liballoc/raw_vec.rs"
   $10 = ((($_0)) + 4|0); //@line 66 "/checkout/src/liballoc/raw_vec.rs"
   $11 = HEAP32[$10>>2]|0; //@line 66 "/checkout/src/liballoc/raw_vec.rs"
   HEAP32[$retVal>>2] = $9; //@line 66 "/checkout/src/liballoc/raw_vec.rs"
   $retVal$index1 = ((($retVal)) + 4|0); //@line 66 "/checkout/src/liballoc/raw_vec.rs"
   HEAP32[$retVal$index1>>2] = $11; //@line 66 "/checkout/src/liballoc/raw_vec.rs"
   STACKTOP = sp;return; //@line 66 "/checkout/src/liballoc/raw_vec.rs"
  }
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 HEAP32[$personalityslot>>2] = $12;
 $14 = ((($personalityslot)) + 4|0);
 HEAP32[$14>>2] = $13;
 $15 = HEAP32[$personalityslot>>2]|0; //@line 56 "/checkout/src/liballoc/raw_vec.rs"
 $16 = ((($personalityslot)) + 4|0); //@line 56 "/checkout/src/liballoc/raw_vec.rs"
 $17 = HEAP32[$16>>2]|0; //@line 56 "/checkout/src/liballoc/raw_vec.rs"
 ___resumeException($15|0);
 // unreachable;
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3new17h8a1881fffd55e157E($retVal) {
 $retVal = $retVal|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $0 = 0, $retVal$index4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp; //@line 121 "/checkout/src/liballoc/raw_vec.rs"
 __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_6new_in17h5efdf2bba32f88b4E($0); //@line 121 "/checkout/src/liballoc/raw_vec.rs"
 $$sreg$field = HEAP32[$0>>2]|0; //@line 121 "/checkout/src/liballoc/raw_vec.rs"
 $$sreg$index1 = ((($0)) + 4|0); //@line 121 "/checkout/src/liballoc/raw_vec.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 121 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$retVal>>2] = $$sreg$field; //@line 122 "/checkout/src/liballoc/raw_vec.rs"
 $retVal$index4 = ((($retVal)) + 4|0); //@line 122 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$retVal$index4>>2] = $$sreg$field2; //@line 122 "/checkout/src/liballoc/raw_vec.rs"
 STACKTOP = sp;return; //@line 122 "/checkout/src/liballoc/raw_vec.rs"
}
function __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_6new_in17h5efdf2bba32f88b4E($retVal) {
 $retVal = $retVal|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $cap = 0;
 var $personalityslot = 0, $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $personalityslot = sp + 16|0;
 $_0 = sp;
 __THREW__ = 0;
 $0 = (invoke_i(189)|0); //@line 58 "/checkout/src/liballoc/raw_vec.rs"
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  $3 = ($0|0)==(0); //@line 58 "/checkout/src/liballoc/raw_vec.rs"
  if ($3) {
   $cap = -1; //@line 58 "/checkout/src/liballoc/raw_vec.rs"
  } else {
   $cap = 0; //@line 58 "/checkout/src/liballoc/raw_vec.rs"
  }
  __THREW__ = 0;
  $4 = (invoke_i(190)|0); //@line 62 "/checkout/src/liballoc/raw_vec.rs"
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if (!($6)) {
   $7 = $cap; //@line 63 "/checkout/src/liballoc/raw_vec.rs"
   HEAP32[$_0>>2] = $4; //@line 61 "/checkout/src/liballoc/raw_vec.rs"
   $8 = ((($_0)) + 4|0); //@line 61 "/checkout/src/liballoc/raw_vec.rs"
   HEAP32[$8>>2] = $7; //@line 61 "/checkout/src/liballoc/raw_vec.rs"
   $9 = HEAP32[$_0>>2]|0; //@line 66 "/checkout/src/liballoc/raw_vec.rs"
   $10 = ((($_0)) + 4|0); //@line 66 "/checkout/src/liballoc/raw_vec.rs"
   $11 = HEAP32[$10>>2]|0; //@line 66 "/checkout/src/liballoc/raw_vec.rs"
   HEAP32[$retVal>>2] = $9; //@line 66 "/checkout/src/liballoc/raw_vec.rs"
   $retVal$index1 = ((($retVal)) + 4|0); //@line 66 "/checkout/src/liballoc/raw_vec.rs"
   HEAP32[$retVal$index1>>2] = $11; //@line 66 "/checkout/src/liballoc/raw_vec.rs"
   STACKTOP = sp;return; //@line 66 "/checkout/src/liballoc/raw_vec.rs"
  }
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 HEAP32[$personalityslot>>2] = $12;
 $14 = ((($personalityslot)) + 4|0);
 HEAP32[$14>>2] = $13;
 $15 = HEAP32[$personalityslot>>2]|0; //@line 56 "/checkout/src/liballoc/raw_vec.rs"
 $16 = ((($personalityslot)) + 4|0); //@line 56 "/checkout/src/liballoc/raw_vec.rs"
 $17 = HEAP32[$16>>2]|0; //@line 56 "/checkout/src/liballoc/raw_vec.rs"
 ___resumeException($15|0);
 // unreachable;
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3new17h93374d6d4d4ccfcdE($retVal) {
 $retVal = $retVal|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $0 = 0, $retVal$index4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp; //@line 121 "/checkout/src/liballoc/raw_vec.rs"
 __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_6new_in17hf12f474fb4c6f21dE($0); //@line 121 "/checkout/src/liballoc/raw_vec.rs"
 $$sreg$field = HEAP32[$0>>2]|0; //@line 121 "/checkout/src/liballoc/raw_vec.rs"
 $$sreg$index1 = ((($0)) + 4|0); //@line 121 "/checkout/src/liballoc/raw_vec.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 121 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$retVal>>2] = $$sreg$field; //@line 122 "/checkout/src/liballoc/raw_vec.rs"
 $retVal$index4 = ((($retVal)) + 4|0); //@line 122 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$retVal$index4>>2] = $$sreg$field2; //@line 122 "/checkout/src/liballoc/raw_vec.rs"
 STACKTOP = sp;return; //@line 122 "/checkout/src/liballoc/raw_vec.rs"
}
function __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_6new_in17hf12f474fb4c6f21dE($retVal) {
 $retVal = $retVal|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $cap = 0;
 var $personalityslot = 0, $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $personalityslot = sp + 16|0;
 $_0 = sp;
 __THREW__ = 0;
 $0 = (invoke_i(191)|0); //@line 58 "/checkout/src/liballoc/raw_vec.rs"
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  $3 = ($0|0)==(0); //@line 58 "/checkout/src/liballoc/raw_vec.rs"
  if ($3) {
   $cap = -1; //@line 58 "/checkout/src/liballoc/raw_vec.rs"
  } else {
   $cap = 0; //@line 58 "/checkout/src/liballoc/raw_vec.rs"
  }
  __THREW__ = 0;
  $4 = (invoke_i(192)|0); //@line 62 "/checkout/src/liballoc/raw_vec.rs"
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if (!($6)) {
   $7 = $cap; //@line 63 "/checkout/src/liballoc/raw_vec.rs"
   HEAP32[$_0>>2] = $4; //@line 61 "/checkout/src/liballoc/raw_vec.rs"
   $8 = ((($_0)) + 4|0); //@line 61 "/checkout/src/liballoc/raw_vec.rs"
   HEAP32[$8>>2] = $7; //@line 61 "/checkout/src/liballoc/raw_vec.rs"
   $9 = HEAP32[$_0>>2]|0; //@line 66 "/checkout/src/liballoc/raw_vec.rs"
   $10 = ((($_0)) + 4|0); //@line 66 "/checkout/src/liballoc/raw_vec.rs"
   $11 = HEAP32[$10>>2]|0; //@line 66 "/checkout/src/liballoc/raw_vec.rs"
   HEAP32[$retVal>>2] = $9; //@line 66 "/checkout/src/liballoc/raw_vec.rs"
   $retVal$index1 = ((($retVal)) + 4|0); //@line 66 "/checkout/src/liballoc/raw_vec.rs"
   HEAP32[$retVal$index1>>2] = $11; //@line 66 "/checkout/src/liballoc/raw_vec.rs"
   STACKTOP = sp;return; //@line 66 "/checkout/src/liballoc/raw_vec.rs"
  }
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 HEAP32[$personalityslot>>2] = $12;
 $14 = ((($personalityslot)) + 4|0);
 HEAP32[$14>>2] = $13;
 $15 = HEAP32[$personalityslot>>2]|0; //@line 56 "/checkout/src/liballoc/raw_vec.rs"
 $16 = ((($personalityslot)) + 4|0); //@line 56 "/checkout/src/liballoc/raw_vec.rs"
 $17 = HEAP32[$16>>2]|0; //@line 56 "/checkout/src/liballoc/raw_vec.rs"
 ___resumeException($15|0);
 // unreachable;
}
function __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_3ptr17h2f3ec64847fef552E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 $2 = HEAP32[$1>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 $3 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_6as_ptr17hafbc5c0503bf9717E($2)|0); //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 STACKTOP = sp;return ($3|0); //@line 200 "/checkout/src/liballoc/raw_vec.rs"
}
function __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_3ptr17h55ebe3fe1903b12fE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 $2 = HEAP32[$1>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 $3 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_6as_ptr17hc335539227ef4f58E($2)|0); //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 STACKTOP = sp;return ($3|0); //@line 200 "/checkout/src/liballoc/raw_vec.rs"
}
function __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_3ptr17hb27cde95f398fcc7E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 $2 = HEAP32[$1>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 $3 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_6as_ptr17h3bb82dda755467c2E($2)|0); //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 STACKTOP = sp;return ($3|0); //@line 200 "/checkout/src/liballoc/raw_vec.rs"
}
function __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_3ptr17hc248a9eac2afce31E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 $2 = HEAP32[$1>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 $3 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_6as_ptr17h5472f53bc77f1039E($2)|0); //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 STACKTOP = sp;return ($3|0); //@line 200 "/checkout/src/liballoc/raw_vec.rs"
}
function __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_3ptr17hcec96c2ecad113e0E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 $2 = HEAP32[$1>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 $3 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_6as_ptr17h99d71c7f68843f3aE($2)|0); //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 STACKTOP = sp;return ($3|0); //@line 200 "/checkout/src/liballoc/raw_vec.rs"
}
function __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_3ptr17he70b59a544f416aaE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 $2 = HEAP32[$1>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 $3 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_6as_ptr17hae9ef777118ec745E($2)|0); //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 STACKTOP = sp;return ($3|0); //@line 200 "/checkout/src/liballoc/raw_vec.rs"
}
function __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_3ptr17hea8a32bfd7e3d35eE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 $2 = HEAP32[$1>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 $3 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_6as_ptr17h9c34f3a94ee631dbE($2)|0); //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 STACKTOP = sp;return ($3|0); //@line 200 "/checkout/src/liballoc/raw_vec.rs"
}
function __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_6double17h23f32bd4676f5808E($0) {
 $0 = $0|0;
 var $$sink = 0, $$sink2 = 0, $$sreg$field = 0, $$sreg$field7 = 0, $$sreg$index6 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $_11 = 0, $_12 = 0, $_42 = 0, $_49 = 0, $_58 = 0, $cur = 0, $e = 0, $e4 = 0, $elem_size = 0, $new_cap = 0, $new_cap1 = 0, $new_cap2 = 0, $new_layout = 0, $new_layout$index9 = 0, $new_size = 0;
 var $ptr = 0, $ptr3 = 0, $ptr_res = 0, $self = 0, $switch = 0, $switch4 = 0, $switch5 = 0, $uniq = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $1 = sp;
 $_58 = sp + 152|0;
 $e4 = sp + 140|0;
 $_49 = sp + 120|0;
 $_42 = sp + 104|0;
 $e = sp + 92|0;
 $ptr_res = sp + 72|0;
 $new_layout = sp + 64|0;
 $cur = sp + 48|0;
 $_12 = sp + 32|0;
 $_11 = sp + 24|0;
 $self = $0;
 $2 = (__ZN4core3mem7size_of17hd7a6698aeb9187d3E()|0); //@line 290 "/checkout/src/liballoc/raw_vec.rs"
 $elem_size = $2; //@line 290 "/checkout/src/liballoc/raw_vec.rs"
 $3 = $elem_size; //@line 294 "/checkout/src/liballoc/raw_vec.rs"
 $4 = ($3|0)!=(0); //@line 294 "/checkout/src/liballoc/raw_vec.rs"
 $5 = $4 ^ 1; //@line 5 "<assert macros>"
 if ($5) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(3420); //@line 3 "<panic macros>"
  // unreachable; //@line 3 "<panic macros>"
 }
 $6 = $self; //@line 296 "/checkout/src/liballoc/raw_vec.rs"
 __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_14current_layout17h334087341b255fe6E($_12,$6); //@line 296 "/checkout/src/liballoc/raw_vec.rs"
 $7 = HEAP32[$_12>>2]|0; //@line 297 "/checkout/src/liballoc/raw_vec.rs"
 $switch = ($7>>>0)<(1); //@line 297 "/checkout/src/liballoc/raw_vec.rs"
 if (!($switch)) {
  $10 = ((($_12)) + 4|0); //@line 297 "/checkout/src/liballoc/raw_vec.rs"
  $11 = HEAP32[$10>>2]|0; //@line 297 "/checkout/src/liballoc/raw_vec.rs"
  $12 = ((($10)) + 4|0); //@line 297 "/checkout/src/liballoc/raw_vec.rs"
  $13 = HEAP32[$12>>2]|0; //@line 297 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$cur>>2] = $11; //@line 297 "/checkout/src/liballoc/raw_vec.rs"
  $14 = ((($cur)) + 4|0); //@line 297 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$14>>2] = $13; //@line 297 "/checkout/src/liballoc/raw_vec.rs"
  $15 = $self; //@line 308 "/checkout/src/liballoc/raw_vec.rs"
  $16 = ((($15)) + 4|0); //@line 308 "/checkout/src/liballoc/raw_vec.rs"
  $17 = HEAP32[$16>>2]|0; //@line 308 "/checkout/src/liballoc/raw_vec.rs"
  $18 = $17<<1; //@line 308 "/checkout/src/liballoc/raw_vec.rs"
  $new_cap1 = $18; //@line 308 "/checkout/src/liballoc/raw_vec.rs"
  $19 = $new_cap1; //@line 309 "/checkout/src/liballoc/raw_vec.rs"
  $20 = $elem_size; //@line 309 "/checkout/src/liballoc/raw_vec.rs"
  $21 = Math_imul($19, $20)|0; //@line 309 "/checkout/src/liballoc/raw_vec.rs"
  $new_size = $21; //@line 309 "/checkout/src/liballoc/raw_vec.rs"
  $22 = $new_size; //@line 310 "/checkout/src/liballoc/raw_vec.rs"
  $23 = (__ZN5alloc9allocator6Layout5align17h2a1da598a1c292caE($cur)|0); //@line 310 "/checkout/src/liballoc/raw_vec.rs"
  __ZN5alloc9allocator6Layout25from_size_align_unchecked17h1f4c5097bb0a95f9E($1,$22,$23); //@line 310 "/checkout/src/liballoc/raw_vec.rs"
  $$sreg$field = HEAP32[$1>>2]|0; //@line 310 "/checkout/src/liballoc/raw_vec.rs"
  $$sreg$index6 = ((($1)) + 4|0); //@line 310 "/checkout/src/liballoc/raw_vec.rs"
  $$sreg$field7 = HEAP32[$$sreg$index6>>2]|0; //@line 310 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$new_layout>>2] = $$sreg$field; //@line 310 "/checkout/src/liballoc/raw_vec.rs"
  $new_layout$index9 = ((($new_layout)) + 4|0); //@line 310 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$new_layout$index9>>2] = $$sreg$field7; //@line 310 "/checkout/src/liballoc/raw_vec.rs"
  $24 = $new_size; //@line 311 "/checkout/src/liballoc/raw_vec.rs"
  __ZN5alloc7raw_vec11alloc_guard17hd2f7c556070d3619E($24); //@line 311 "/checkout/src/liballoc/raw_vec.rs"
  $25 = $self; //@line 312 "/checkout/src/liballoc/raw_vec.rs"
  $26 = $self; //@line 312 "/checkout/src/liballoc/raw_vec.rs"
  $27 = HEAP32[$26>>2]|0; //@line 312 "/checkout/src/liballoc/raw_vec.rs"
  $28 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_6as_ptr17h5472f53bc77f1039E($27)|0); //@line 312 "/checkout/src/liballoc/raw_vec.rs"
  $29 = HEAP32[$cur>>2]|0; //@line 313 "/checkout/src/liballoc/raw_vec.rs"
  $30 = ((($cur)) + 4|0); //@line 313 "/checkout/src/liballoc/raw_vec.rs"
  $31 = HEAP32[$30>>2]|0; //@line 313 "/checkout/src/liballoc/raw_vec.rs"
  $32 = HEAP32[$new_layout>>2]|0; //@line 314 "/checkout/src/liballoc/raw_vec.rs"
  $33 = ((($new_layout)) + 4|0); //@line 314 "/checkout/src/liballoc/raw_vec.rs"
  $34 = HEAP32[$33>>2]|0; //@line 314 "/checkout/src/liballoc/raw_vec.rs"
  __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_7realloc17h42923a80abd93e7aE($ptr_res,$25,$28,$29,$31,$32,$34); //@line 312 "/checkout/src/liballoc/raw_vec.rs"
  $35 = HEAP32[$ptr_res>>2]|0; //@line 316 "/checkout/src/liballoc/raw_vec.rs"
  $switch4 = ($35>>>0)<(1); //@line 316 "/checkout/src/liballoc/raw_vec.rs"
  if (!($switch4)) {
   $50 = ((($ptr_res)) + 4|0); //@line 317 "/checkout/src/liballoc/raw_vec.rs"
   ;HEAP32[$e>>2]=HEAP32[$50>>2]|0;HEAP32[$e+4>>2]=HEAP32[$50+4>>2]|0;HEAP32[$e+8>>2]=HEAP32[$50+8>>2]|0; //@line 317 "/checkout/src/liballoc/raw_vec.rs"
   $51 = $self; //@line 317 "/checkout/src/liballoc/raw_vec.rs"
   ;HEAP32[$_42>>2]=HEAP32[$e>>2]|0;HEAP32[$_42+4>>2]=HEAP32[$e+4>>2]|0;HEAP32[$_42+8>>2]=HEAP32[$e+8>>2]|0; //@line 317 "/checkout/src/liballoc/raw_vec.rs"
   __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h4a74d63357c934f6E($51,$_42); //@line 317 "/checkout/src/liballoc/raw_vec.rs"
   // unreachable; //@line 317 "/checkout/src/liballoc/raw_vec.rs"
  }
  $45 = ((($ptr_res)) + 4|0); //@line 316 "/checkout/src/liballoc/raw_vec.rs"
  $46 = HEAP32[$45>>2]|0; //@line 316 "/checkout/src/liballoc/raw_vec.rs"
  $ptr = $46; //@line 316 "/checkout/src/liballoc/raw_vec.rs"
  $47 = $new_cap1; //@line 316 "/checkout/src/liballoc/raw_vec.rs"
  $48 = $ptr; //@line 316 "/checkout/src/liballoc/raw_vec.rs"
  $49 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_13new_unchecked17h6e6eca53f3fccbfcE($48)|0); //@line 316 "/checkout/src/liballoc/raw_vec.rs"
  $$sink = $49;$$sink2 = $47;
  HEAP32[$_11>>2] = $$sink2;
  $36 = ((($_11)) + 4|0);
  HEAP32[$36>>2] = $$sink;
  $37 = HEAP32[$_11>>2]|0; //@line 296 "/checkout/src/liballoc/raw_vec.rs"
  $new_cap = $37; //@line 296 "/checkout/src/liballoc/raw_vec.rs"
  $38 = ((($_11)) + 4|0); //@line 296 "/checkout/src/liballoc/raw_vec.rs"
  $39 = HEAP32[$38>>2]|0; //@line 296 "/checkout/src/liballoc/raw_vec.rs"
  $uniq = $39; //@line 296 "/checkout/src/liballoc/raw_vec.rs"
  $40 = $uniq; //@line 330 "/checkout/src/liballoc/raw_vec.rs"
  $41 = $self; //@line 330 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$41>>2] = $40; //@line 330 "/checkout/src/liballoc/raw_vec.rs"
  $42 = $new_cap; //@line 331 "/checkout/src/liballoc/raw_vec.rs"
  $43 = $self; //@line 331 "/checkout/src/liballoc/raw_vec.rs"
  $44 = ((($43)) + 4|0); //@line 331 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$44>>2] = $42; //@line 331 "/checkout/src/liballoc/raw_vec.rs"
  STACKTOP = sp;return; //@line 333 "/checkout/src/liballoc/raw_vec.rs"
 }
 $8 = $elem_size; //@line 323 "/checkout/src/liballoc/raw_vec.rs"
 $9 = ($8>>>0)>(536870911); //@line 323 "/checkout/src/liballoc/raw_vec.rs"
 if ($9) {
  $new_cap2 = 1; //@line 323 "/checkout/src/liballoc/raw_vec.rs"
 } else {
  $new_cap2 = 4; //@line 323 "/checkout/src/liballoc/raw_vec.rs"
 }
 $52 = $self; //@line 324 "/checkout/src/liballoc/raw_vec.rs"
 $53 = $new_cap2; //@line 324 "/checkout/src/liballoc/raw_vec.rs"
 __ZN5alloc9allocator5Alloc11alloc_array17h8794b61fba216641E($_49,$52,$53); //@line 324 "/checkout/src/liballoc/raw_vec.rs"
 $54 = HEAP32[$_49>>2]|0; //@line 325 "/checkout/src/liballoc/raw_vec.rs"
 $switch5 = ($54>>>0)<(1); //@line 325 "/checkout/src/liballoc/raw_vec.rs"
 if (!($switch5)) {
  $59 = ((($_49)) + 4|0); //@line 326 "/checkout/src/liballoc/raw_vec.rs"
  ;HEAP32[$e4>>2]=HEAP32[$59>>2]|0;HEAP32[$e4+4>>2]=HEAP32[$59+4>>2]|0;HEAP32[$e4+8>>2]=HEAP32[$59+8>>2]|0; //@line 326 "/checkout/src/liballoc/raw_vec.rs"
  $60 = $self; //@line 326 "/checkout/src/liballoc/raw_vec.rs"
  ;HEAP32[$_58>>2]=HEAP32[$e4>>2]|0;HEAP32[$_58+4>>2]=HEAP32[$e4+4>>2]|0;HEAP32[$_58+8>>2]=HEAP32[$e4+8>>2]|0; //@line 326 "/checkout/src/liballoc/raw_vec.rs"
  __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h4a74d63357c934f6E($60,$_58); //@line 326 "/checkout/src/liballoc/raw_vec.rs"
  // unreachable; //@line 326 "/checkout/src/liballoc/raw_vec.rs"
 }
 $55 = ((($_49)) + 4|0); //@line 325 "/checkout/src/liballoc/raw_vec.rs"
 $56 = HEAP32[$55>>2]|0; //@line 325 "/checkout/src/liballoc/raw_vec.rs"
 $ptr3 = $56; //@line 325 "/checkout/src/liballoc/raw_vec.rs"
 $57 = $new_cap2; //@line 325 "/checkout/src/liballoc/raw_vec.rs"
 $58 = $ptr3; //@line 325 "/checkout/src/liballoc/raw_vec.rs"
 $$sink = $58;$$sink2 = $57;
 HEAP32[$_11>>2] = $$sink2;
 $36 = ((($_11)) + 4|0);
 HEAP32[$36>>2] = $$sink;
 $37 = HEAP32[$_11>>2]|0; //@line 296 "/checkout/src/liballoc/raw_vec.rs"
 $new_cap = $37; //@line 296 "/checkout/src/liballoc/raw_vec.rs"
 $38 = ((($_11)) + 4|0); //@line 296 "/checkout/src/liballoc/raw_vec.rs"
 $39 = HEAP32[$38>>2]|0; //@line 296 "/checkout/src/liballoc/raw_vec.rs"
 $uniq = $39; //@line 296 "/checkout/src/liballoc/raw_vec.rs"
 $40 = $uniq; //@line 330 "/checkout/src/liballoc/raw_vec.rs"
 $41 = $self; //@line 330 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$41>>2] = $40; //@line 330 "/checkout/src/liballoc/raw_vec.rs"
 $42 = $new_cap; //@line 331 "/checkout/src/liballoc/raw_vec.rs"
 $43 = $self; //@line 331 "/checkout/src/liballoc/raw_vec.rs"
 $44 = ((($43)) + 4|0); //@line 331 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$44>>2] = $42; //@line 331 "/checkout/src/liballoc/raw_vec.rs"
 STACKTOP = sp;return; //@line 333 "/checkout/src/liballoc/raw_vec.rs"
}
function __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_14current_layout17h334087341b255fe6E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $align = 0, $self = 0;
 var $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $self = $1;
 $3 = $self; //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $4 = ((($3)) + 4|0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $5 = HEAP32[$4>>2]|0; //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $6 = ($5|0)==(0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 if ($6) {
  HEAP32[$0>>2] = 0; //@line 226 "/checkout/src/liballoc/raw_vec.rs"
  STACKTOP = sp;return; //@line 236 "/checkout/src/liballoc/raw_vec.rs"
 } else {
  $7 = (__ZN4core3mem8align_of17hf4a8fc97f4876179E()|0); //@line 231 "/checkout/src/liballoc/raw_vec.rs"
  $align = $7; //@line 231 "/checkout/src/liballoc/raw_vec.rs"
  $8 = (__ZN4core3mem7size_of17hd7a6698aeb9187d3E()|0); //@line 232 "/checkout/src/liballoc/raw_vec.rs"
  $9 = $self; //@line 232 "/checkout/src/liballoc/raw_vec.rs"
  $10 = ((($9)) + 4|0); //@line 232 "/checkout/src/liballoc/raw_vec.rs"
  $11 = HEAP32[$10>>2]|0; //@line 232 "/checkout/src/liballoc/raw_vec.rs"
  $12 = Math_imul($8, $11)|0; //@line 232 "/checkout/src/liballoc/raw_vec.rs"
  $size = $12; //@line 232 "/checkout/src/liballoc/raw_vec.rs"
  $13 = $size; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  $14 = $align; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  __ZN5alloc9allocator6Layout25from_size_align_unchecked17h1f4c5097bb0a95f9E($2,$13,$14); //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  $$sreg$field = HEAP32[$2>>2]|0; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  $$sreg$index1 = ((($2)) + 4|0); //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$0>>2] = 1; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  $15 = ((($0)) + 4|0); //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$15>>2] = $$sreg$field; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  $16 = ((($15)) + 4|0); //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$16>>2] = $$sreg$field2; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  STACKTOP = sp;return; //@line 236 "/checkout/src/liballoc/raw_vec.rs"
 }
}
function __ZN5alloc7raw_vec11alloc_guard17hd2f7c556070d3619E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $alloc_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $alloc_size = $0;
 $1 = (__ZN4core3mem7size_of17h56842b121b8b689bE()|0); //@line 713 "/checkout/src/liballoc/raw_vec.rs"
 $2 = ($1>>>0)<(8); //@line 713 "/checkout/src/liballoc/raw_vec.rs"
 if (!($2)) {
  STACKTOP = sp;return; //@line 717 "/checkout/src/liballoc/raw_vec.rs"
 }
 $3 = $alloc_size; //@line 714 "/checkout/src/liballoc/raw_vec.rs"
 $4 = ($3>>>0)<=(2147483647); //@line 714 "/checkout/src/liballoc/raw_vec.rs"
 $5 = $4 ^ 1; //@line 5 "<assert macros>"
 if ($5) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(3444); //@line 3 "<panic macros>"
  // unreachable; //@line 3 "<panic macros>"
 } else {
  STACKTOP = sp;return; //@line 717 "/checkout/src/liballoc/raw_vec.rs"
 }
}
function __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_6double17h7c80b4d26ce5f7f2E($0) {
 $0 = $0|0;
 var $$sink = 0, $$sink2 = 0, $$sreg$field = 0, $$sreg$field7 = 0, $$sreg$index6 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $_11 = 0, $_12 = 0, $_42 = 0, $_49 = 0, $_58 = 0, $cur = 0, $e = 0, $e4 = 0, $elem_size = 0, $new_cap = 0, $new_cap1 = 0, $new_cap2 = 0, $new_layout = 0, $new_layout$index9 = 0, $new_size = 0;
 var $ptr = 0, $ptr3 = 0, $ptr_res = 0, $self = 0, $switch = 0, $switch4 = 0, $switch5 = 0, $uniq = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $1 = sp;
 $_58 = sp + 152|0;
 $e4 = sp + 140|0;
 $_49 = sp + 120|0;
 $_42 = sp + 104|0;
 $e = sp + 92|0;
 $ptr_res = sp + 72|0;
 $new_layout = sp + 64|0;
 $cur = sp + 48|0;
 $_12 = sp + 32|0;
 $_11 = sp + 24|0;
 $self = $0;
 $2 = (__ZN4core3mem7size_of17h34f2235168088e08E()|0); //@line 290 "/checkout/src/liballoc/raw_vec.rs"
 $elem_size = $2; //@line 290 "/checkout/src/liballoc/raw_vec.rs"
 $3 = $elem_size; //@line 294 "/checkout/src/liballoc/raw_vec.rs"
 $4 = ($3|0)!=(0); //@line 294 "/checkout/src/liballoc/raw_vec.rs"
 $5 = $4 ^ 1; //@line 5 "<assert macros>"
 if ($5) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(3420); //@line 3 "<panic macros>"
  // unreachable; //@line 3 "<panic macros>"
 }
 $6 = $self; //@line 296 "/checkout/src/liballoc/raw_vec.rs"
 __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_14current_layout17hbcae1ab8165ee399E($_12,$6); //@line 296 "/checkout/src/liballoc/raw_vec.rs"
 $7 = HEAP32[$_12>>2]|0; //@line 297 "/checkout/src/liballoc/raw_vec.rs"
 $switch = ($7>>>0)<(1); //@line 297 "/checkout/src/liballoc/raw_vec.rs"
 if (!($switch)) {
  $10 = ((($_12)) + 4|0); //@line 297 "/checkout/src/liballoc/raw_vec.rs"
  $11 = HEAP32[$10>>2]|0; //@line 297 "/checkout/src/liballoc/raw_vec.rs"
  $12 = ((($10)) + 4|0); //@line 297 "/checkout/src/liballoc/raw_vec.rs"
  $13 = HEAP32[$12>>2]|0; //@line 297 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$cur>>2] = $11; //@line 297 "/checkout/src/liballoc/raw_vec.rs"
  $14 = ((($cur)) + 4|0); //@line 297 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$14>>2] = $13; //@line 297 "/checkout/src/liballoc/raw_vec.rs"
  $15 = $self; //@line 308 "/checkout/src/liballoc/raw_vec.rs"
  $16 = ((($15)) + 4|0); //@line 308 "/checkout/src/liballoc/raw_vec.rs"
  $17 = HEAP32[$16>>2]|0; //@line 308 "/checkout/src/liballoc/raw_vec.rs"
  $18 = $17<<1; //@line 308 "/checkout/src/liballoc/raw_vec.rs"
  $new_cap1 = $18; //@line 308 "/checkout/src/liballoc/raw_vec.rs"
  $19 = $new_cap1; //@line 309 "/checkout/src/liballoc/raw_vec.rs"
  $20 = $elem_size; //@line 309 "/checkout/src/liballoc/raw_vec.rs"
  $21 = Math_imul($19, $20)|0; //@line 309 "/checkout/src/liballoc/raw_vec.rs"
  $new_size = $21; //@line 309 "/checkout/src/liballoc/raw_vec.rs"
  $22 = $new_size; //@line 310 "/checkout/src/liballoc/raw_vec.rs"
  $23 = (__ZN5alloc9allocator6Layout5align17h2a1da598a1c292caE($cur)|0); //@line 310 "/checkout/src/liballoc/raw_vec.rs"
  __ZN5alloc9allocator6Layout25from_size_align_unchecked17h1f4c5097bb0a95f9E($1,$22,$23); //@line 310 "/checkout/src/liballoc/raw_vec.rs"
  $$sreg$field = HEAP32[$1>>2]|0; //@line 310 "/checkout/src/liballoc/raw_vec.rs"
  $$sreg$index6 = ((($1)) + 4|0); //@line 310 "/checkout/src/liballoc/raw_vec.rs"
  $$sreg$field7 = HEAP32[$$sreg$index6>>2]|0; //@line 310 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$new_layout>>2] = $$sreg$field; //@line 310 "/checkout/src/liballoc/raw_vec.rs"
  $new_layout$index9 = ((($new_layout)) + 4|0); //@line 310 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$new_layout$index9>>2] = $$sreg$field7; //@line 310 "/checkout/src/liballoc/raw_vec.rs"
  $24 = $new_size; //@line 311 "/checkout/src/liballoc/raw_vec.rs"
  __ZN5alloc7raw_vec11alloc_guard17hd2f7c556070d3619E($24); //@line 311 "/checkout/src/liballoc/raw_vec.rs"
  $25 = $self; //@line 312 "/checkout/src/liballoc/raw_vec.rs"
  $26 = $self; //@line 312 "/checkout/src/liballoc/raw_vec.rs"
  $27 = HEAP32[$26>>2]|0; //@line 312 "/checkout/src/liballoc/raw_vec.rs"
  $28 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_6as_ptr17h99d71c7f68843f3aE($27)|0); //@line 312 "/checkout/src/liballoc/raw_vec.rs"
  $29 = HEAP32[$cur>>2]|0; //@line 313 "/checkout/src/liballoc/raw_vec.rs"
  $30 = ((($cur)) + 4|0); //@line 313 "/checkout/src/liballoc/raw_vec.rs"
  $31 = HEAP32[$30>>2]|0; //@line 313 "/checkout/src/liballoc/raw_vec.rs"
  $32 = HEAP32[$new_layout>>2]|0; //@line 314 "/checkout/src/liballoc/raw_vec.rs"
  $33 = ((($new_layout)) + 4|0); //@line 314 "/checkout/src/liballoc/raw_vec.rs"
  $34 = HEAP32[$33>>2]|0; //@line 314 "/checkout/src/liballoc/raw_vec.rs"
  __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_7realloc17h42923a80abd93e7aE($ptr_res,$25,$28,$29,$31,$32,$34); //@line 312 "/checkout/src/liballoc/raw_vec.rs"
  $35 = HEAP32[$ptr_res>>2]|0; //@line 316 "/checkout/src/liballoc/raw_vec.rs"
  $switch4 = ($35>>>0)<(1); //@line 316 "/checkout/src/liballoc/raw_vec.rs"
  if (!($switch4)) {
   $50 = ((($ptr_res)) + 4|0); //@line 317 "/checkout/src/liballoc/raw_vec.rs"
   ;HEAP32[$e>>2]=HEAP32[$50>>2]|0;HEAP32[$e+4>>2]=HEAP32[$50+4>>2]|0;HEAP32[$e+8>>2]=HEAP32[$50+8>>2]|0; //@line 317 "/checkout/src/liballoc/raw_vec.rs"
   $51 = $self; //@line 317 "/checkout/src/liballoc/raw_vec.rs"
   ;HEAP32[$_42>>2]=HEAP32[$e>>2]|0;HEAP32[$_42+4>>2]=HEAP32[$e+4>>2]|0;HEAP32[$_42+8>>2]=HEAP32[$e+8>>2]|0; //@line 317 "/checkout/src/liballoc/raw_vec.rs"
   __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h4a74d63357c934f6E($51,$_42); //@line 317 "/checkout/src/liballoc/raw_vec.rs"
   // unreachable; //@line 317 "/checkout/src/liballoc/raw_vec.rs"
  }
  $45 = ((($ptr_res)) + 4|0); //@line 316 "/checkout/src/liballoc/raw_vec.rs"
  $46 = HEAP32[$45>>2]|0; //@line 316 "/checkout/src/liballoc/raw_vec.rs"
  $ptr = $46; //@line 316 "/checkout/src/liballoc/raw_vec.rs"
  $47 = $new_cap1; //@line 316 "/checkout/src/liballoc/raw_vec.rs"
  $48 = $ptr; //@line 316 "/checkout/src/liballoc/raw_vec.rs"
  $49 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_13new_unchecked17h4db77394a7746a1bE($48)|0); //@line 316 "/checkout/src/liballoc/raw_vec.rs"
  $$sink = $49;$$sink2 = $47;
  HEAP32[$_11>>2] = $$sink2;
  $36 = ((($_11)) + 4|0);
  HEAP32[$36>>2] = $$sink;
  $37 = HEAP32[$_11>>2]|0; //@line 296 "/checkout/src/liballoc/raw_vec.rs"
  $new_cap = $37; //@line 296 "/checkout/src/liballoc/raw_vec.rs"
  $38 = ((($_11)) + 4|0); //@line 296 "/checkout/src/liballoc/raw_vec.rs"
  $39 = HEAP32[$38>>2]|0; //@line 296 "/checkout/src/liballoc/raw_vec.rs"
  $uniq = $39; //@line 296 "/checkout/src/liballoc/raw_vec.rs"
  $40 = $uniq; //@line 330 "/checkout/src/liballoc/raw_vec.rs"
  $41 = $self; //@line 330 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$41>>2] = $40; //@line 330 "/checkout/src/liballoc/raw_vec.rs"
  $42 = $new_cap; //@line 331 "/checkout/src/liballoc/raw_vec.rs"
  $43 = $self; //@line 331 "/checkout/src/liballoc/raw_vec.rs"
  $44 = ((($43)) + 4|0); //@line 331 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$44>>2] = $42; //@line 331 "/checkout/src/liballoc/raw_vec.rs"
  STACKTOP = sp;return; //@line 333 "/checkout/src/liballoc/raw_vec.rs"
 }
 $8 = $elem_size; //@line 323 "/checkout/src/liballoc/raw_vec.rs"
 $9 = ($8>>>0)>(536870911); //@line 323 "/checkout/src/liballoc/raw_vec.rs"
 if ($9) {
  $new_cap2 = 1; //@line 323 "/checkout/src/liballoc/raw_vec.rs"
 } else {
  $new_cap2 = 4; //@line 323 "/checkout/src/liballoc/raw_vec.rs"
 }
 $52 = $self; //@line 324 "/checkout/src/liballoc/raw_vec.rs"
 $53 = $new_cap2; //@line 324 "/checkout/src/liballoc/raw_vec.rs"
 __ZN5alloc9allocator5Alloc11alloc_array17h7e9776e5f88bd715E($_49,$52,$53); //@line 324 "/checkout/src/liballoc/raw_vec.rs"
 $54 = HEAP32[$_49>>2]|0; //@line 325 "/checkout/src/liballoc/raw_vec.rs"
 $switch5 = ($54>>>0)<(1); //@line 325 "/checkout/src/liballoc/raw_vec.rs"
 if (!($switch5)) {
  $59 = ((($_49)) + 4|0); //@line 326 "/checkout/src/liballoc/raw_vec.rs"
  ;HEAP32[$e4>>2]=HEAP32[$59>>2]|0;HEAP32[$e4+4>>2]=HEAP32[$59+4>>2]|0;HEAP32[$e4+8>>2]=HEAP32[$59+8>>2]|0; //@line 326 "/checkout/src/liballoc/raw_vec.rs"
  $60 = $self; //@line 326 "/checkout/src/liballoc/raw_vec.rs"
  ;HEAP32[$_58>>2]=HEAP32[$e4>>2]|0;HEAP32[$_58+4>>2]=HEAP32[$e4+4>>2]|0;HEAP32[$_58+8>>2]=HEAP32[$e4+8>>2]|0; //@line 326 "/checkout/src/liballoc/raw_vec.rs"
  __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h4a74d63357c934f6E($60,$_58); //@line 326 "/checkout/src/liballoc/raw_vec.rs"
  // unreachable; //@line 326 "/checkout/src/liballoc/raw_vec.rs"
 }
 $55 = ((($_49)) + 4|0); //@line 325 "/checkout/src/liballoc/raw_vec.rs"
 $56 = HEAP32[$55>>2]|0; //@line 325 "/checkout/src/liballoc/raw_vec.rs"
 $ptr3 = $56; //@line 325 "/checkout/src/liballoc/raw_vec.rs"
 $57 = $new_cap2; //@line 325 "/checkout/src/liballoc/raw_vec.rs"
 $58 = $ptr3; //@line 325 "/checkout/src/liballoc/raw_vec.rs"
 $$sink = $58;$$sink2 = $57;
 HEAP32[$_11>>2] = $$sink2;
 $36 = ((($_11)) + 4|0);
 HEAP32[$36>>2] = $$sink;
 $37 = HEAP32[$_11>>2]|0; //@line 296 "/checkout/src/liballoc/raw_vec.rs"
 $new_cap = $37; //@line 296 "/checkout/src/liballoc/raw_vec.rs"
 $38 = ((($_11)) + 4|0); //@line 296 "/checkout/src/liballoc/raw_vec.rs"
 $39 = HEAP32[$38>>2]|0; //@line 296 "/checkout/src/liballoc/raw_vec.rs"
 $uniq = $39; //@line 296 "/checkout/src/liballoc/raw_vec.rs"
 $40 = $uniq; //@line 330 "/checkout/src/liballoc/raw_vec.rs"
 $41 = $self; //@line 330 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$41>>2] = $40; //@line 330 "/checkout/src/liballoc/raw_vec.rs"
 $42 = $new_cap; //@line 331 "/checkout/src/liballoc/raw_vec.rs"
 $43 = $self; //@line 331 "/checkout/src/liballoc/raw_vec.rs"
 $44 = ((($43)) + 4|0); //@line 331 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$44>>2] = $42; //@line 331 "/checkout/src/liballoc/raw_vec.rs"
 STACKTOP = sp;return; //@line 333 "/checkout/src/liballoc/raw_vec.rs"
}
function __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_14current_layout17hbcae1ab8165ee399E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $align = 0, $self = 0;
 var $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $self = $1;
 $3 = $self; //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $4 = ((($3)) + 4|0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $5 = HEAP32[$4>>2]|0; //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $6 = ($5|0)==(0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 if ($6) {
  HEAP32[$0>>2] = 0; //@line 226 "/checkout/src/liballoc/raw_vec.rs"
  STACKTOP = sp;return; //@line 236 "/checkout/src/liballoc/raw_vec.rs"
 } else {
  $7 = (__ZN4core3mem8align_of17hccc7922e2c3ce90fE()|0); //@line 231 "/checkout/src/liballoc/raw_vec.rs"
  $align = $7; //@line 231 "/checkout/src/liballoc/raw_vec.rs"
  $8 = (__ZN4core3mem7size_of17h34f2235168088e08E()|0); //@line 232 "/checkout/src/liballoc/raw_vec.rs"
  $9 = $self; //@line 232 "/checkout/src/liballoc/raw_vec.rs"
  $10 = ((($9)) + 4|0); //@line 232 "/checkout/src/liballoc/raw_vec.rs"
  $11 = HEAP32[$10>>2]|0; //@line 232 "/checkout/src/liballoc/raw_vec.rs"
  $12 = Math_imul($8, $11)|0; //@line 232 "/checkout/src/liballoc/raw_vec.rs"
  $size = $12; //@line 232 "/checkout/src/liballoc/raw_vec.rs"
  $13 = $size; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  $14 = $align; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  __ZN5alloc9allocator6Layout25from_size_align_unchecked17h1f4c5097bb0a95f9E($2,$13,$14); //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  $$sreg$field = HEAP32[$2>>2]|0; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  $$sreg$index1 = ((($2)) + 4|0); //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$0>>2] = 1; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  $15 = ((($0)) + 4|0); //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$15>>2] = $$sreg$field; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  $16 = ((($15)) + 4|0); //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$16>>2] = $$sreg$field2; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  STACKTOP = sp;return; //@line 236 "/checkout/src/liballoc/raw_vec.rs"
 }
}
function __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_6double17hbc540d80a1e64f03E($0) {
 $0 = $0|0;
 var $$sink = 0, $$sink2 = 0, $$sreg$field = 0, $$sreg$field7 = 0, $$sreg$index6 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $_11 = 0, $_12 = 0, $_42 = 0, $_49 = 0, $_58 = 0, $cur = 0, $e = 0, $e4 = 0, $elem_size = 0, $new_cap = 0, $new_cap1 = 0, $new_cap2 = 0, $new_layout = 0, $new_layout$index9 = 0, $new_size = 0;
 var $ptr = 0, $ptr3 = 0, $ptr_res = 0, $self = 0, $switch = 0, $switch4 = 0, $switch5 = 0, $uniq = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $1 = sp;
 $_58 = sp + 152|0;
 $e4 = sp + 140|0;
 $_49 = sp + 120|0;
 $_42 = sp + 104|0;
 $e = sp + 92|0;
 $ptr_res = sp + 72|0;
 $new_layout = sp + 64|0;
 $cur = sp + 48|0;
 $_12 = sp + 32|0;
 $_11 = sp + 24|0;
 $self = $0;
 $2 = (__ZN4core3mem7size_of17h1975c8c10bebb793E()|0); //@line 290 "/checkout/src/liballoc/raw_vec.rs"
 $elem_size = $2; //@line 290 "/checkout/src/liballoc/raw_vec.rs"
 $3 = $elem_size; //@line 294 "/checkout/src/liballoc/raw_vec.rs"
 $4 = ($3|0)!=(0); //@line 294 "/checkout/src/liballoc/raw_vec.rs"
 $5 = $4 ^ 1; //@line 5 "<assert macros>"
 if ($5) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(3420); //@line 3 "<panic macros>"
  // unreachable; //@line 3 "<panic macros>"
 }
 $6 = $self; //@line 296 "/checkout/src/liballoc/raw_vec.rs"
 __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_14current_layout17h5094a7f764870a02E($_12,$6); //@line 296 "/checkout/src/liballoc/raw_vec.rs"
 $7 = HEAP32[$_12>>2]|0; //@line 297 "/checkout/src/liballoc/raw_vec.rs"
 $switch = ($7>>>0)<(1); //@line 297 "/checkout/src/liballoc/raw_vec.rs"
 if (!($switch)) {
  $10 = ((($_12)) + 4|0); //@line 297 "/checkout/src/liballoc/raw_vec.rs"
  $11 = HEAP32[$10>>2]|0; //@line 297 "/checkout/src/liballoc/raw_vec.rs"
  $12 = ((($10)) + 4|0); //@line 297 "/checkout/src/liballoc/raw_vec.rs"
  $13 = HEAP32[$12>>2]|0; //@line 297 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$cur>>2] = $11; //@line 297 "/checkout/src/liballoc/raw_vec.rs"
  $14 = ((($cur)) + 4|0); //@line 297 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$14>>2] = $13; //@line 297 "/checkout/src/liballoc/raw_vec.rs"
  $15 = $self; //@line 308 "/checkout/src/liballoc/raw_vec.rs"
  $16 = ((($15)) + 4|0); //@line 308 "/checkout/src/liballoc/raw_vec.rs"
  $17 = HEAP32[$16>>2]|0; //@line 308 "/checkout/src/liballoc/raw_vec.rs"
  $18 = $17<<1; //@line 308 "/checkout/src/liballoc/raw_vec.rs"
  $new_cap1 = $18; //@line 308 "/checkout/src/liballoc/raw_vec.rs"
  $19 = $new_cap1; //@line 309 "/checkout/src/liballoc/raw_vec.rs"
  $20 = $elem_size; //@line 309 "/checkout/src/liballoc/raw_vec.rs"
  $21 = Math_imul($19, $20)|0; //@line 309 "/checkout/src/liballoc/raw_vec.rs"
  $new_size = $21; //@line 309 "/checkout/src/liballoc/raw_vec.rs"
  $22 = $new_size; //@line 310 "/checkout/src/liballoc/raw_vec.rs"
  $23 = (__ZN5alloc9allocator6Layout5align17h2a1da598a1c292caE($cur)|0); //@line 310 "/checkout/src/liballoc/raw_vec.rs"
  __ZN5alloc9allocator6Layout25from_size_align_unchecked17h1f4c5097bb0a95f9E($1,$22,$23); //@line 310 "/checkout/src/liballoc/raw_vec.rs"
  $$sreg$field = HEAP32[$1>>2]|0; //@line 310 "/checkout/src/liballoc/raw_vec.rs"
  $$sreg$index6 = ((($1)) + 4|0); //@line 310 "/checkout/src/liballoc/raw_vec.rs"
  $$sreg$field7 = HEAP32[$$sreg$index6>>2]|0; //@line 310 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$new_layout>>2] = $$sreg$field; //@line 310 "/checkout/src/liballoc/raw_vec.rs"
  $new_layout$index9 = ((($new_layout)) + 4|0); //@line 310 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$new_layout$index9>>2] = $$sreg$field7; //@line 310 "/checkout/src/liballoc/raw_vec.rs"
  $24 = $new_size; //@line 311 "/checkout/src/liballoc/raw_vec.rs"
  __ZN5alloc7raw_vec11alloc_guard17hd2f7c556070d3619E($24); //@line 311 "/checkout/src/liballoc/raw_vec.rs"
  $25 = $self; //@line 312 "/checkout/src/liballoc/raw_vec.rs"
  $26 = $self; //@line 312 "/checkout/src/liballoc/raw_vec.rs"
  $27 = HEAP32[$26>>2]|0; //@line 312 "/checkout/src/liballoc/raw_vec.rs"
  $28 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_6as_ptr17h9c34f3a94ee631dbE($27)|0); //@line 312 "/checkout/src/liballoc/raw_vec.rs"
  $29 = HEAP32[$cur>>2]|0; //@line 313 "/checkout/src/liballoc/raw_vec.rs"
  $30 = ((($cur)) + 4|0); //@line 313 "/checkout/src/liballoc/raw_vec.rs"
  $31 = HEAP32[$30>>2]|0; //@line 313 "/checkout/src/liballoc/raw_vec.rs"
  $32 = HEAP32[$new_layout>>2]|0; //@line 314 "/checkout/src/liballoc/raw_vec.rs"
  $33 = ((($new_layout)) + 4|0); //@line 314 "/checkout/src/liballoc/raw_vec.rs"
  $34 = HEAP32[$33>>2]|0; //@line 314 "/checkout/src/liballoc/raw_vec.rs"
  __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_7realloc17h42923a80abd93e7aE($ptr_res,$25,$28,$29,$31,$32,$34); //@line 312 "/checkout/src/liballoc/raw_vec.rs"
  $35 = HEAP32[$ptr_res>>2]|0; //@line 316 "/checkout/src/liballoc/raw_vec.rs"
  $switch4 = ($35>>>0)<(1); //@line 316 "/checkout/src/liballoc/raw_vec.rs"
  if (!($switch4)) {
   $50 = ((($ptr_res)) + 4|0); //@line 317 "/checkout/src/liballoc/raw_vec.rs"
   ;HEAP32[$e>>2]=HEAP32[$50>>2]|0;HEAP32[$e+4>>2]=HEAP32[$50+4>>2]|0;HEAP32[$e+8>>2]=HEAP32[$50+8>>2]|0; //@line 317 "/checkout/src/liballoc/raw_vec.rs"
   $51 = $self; //@line 317 "/checkout/src/liballoc/raw_vec.rs"
   ;HEAP32[$_42>>2]=HEAP32[$e>>2]|0;HEAP32[$_42+4>>2]=HEAP32[$e+4>>2]|0;HEAP32[$_42+8>>2]=HEAP32[$e+8>>2]|0; //@line 317 "/checkout/src/liballoc/raw_vec.rs"
   __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h4a74d63357c934f6E($51,$_42); //@line 317 "/checkout/src/liballoc/raw_vec.rs"
   // unreachable; //@line 317 "/checkout/src/liballoc/raw_vec.rs"
  }
  $45 = ((($ptr_res)) + 4|0); //@line 316 "/checkout/src/liballoc/raw_vec.rs"
  $46 = HEAP32[$45>>2]|0; //@line 316 "/checkout/src/liballoc/raw_vec.rs"
  $ptr = $46; //@line 316 "/checkout/src/liballoc/raw_vec.rs"
  $47 = $new_cap1; //@line 316 "/checkout/src/liballoc/raw_vec.rs"
  $48 = $ptr; //@line 316 "/checkout/src/liballoc/raw_vec.rs"
  $49 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_13new_unchecked17h0173a0f57669b1fcE($48)|0); //@line 316 "/checkout/src/liballoc/raw_vec.rs"
  $$sink = $49;$$sink2 = $47;
  HEAP32[$_11>>2] = $$sink2;
  $36 = ((($_11)) + 4|0);
  HEAP32[$36>>2] = $$sink;
  $37 = HEAP32[$_11>>2]|0; //@line 296 "/checkout/src/liballoc/raw_vec.rs"
  $new_cap = $37; //@line 296 "/checkout/src/liballoc/raw_vec.rs"
  $38 = ((($_11)) + 4|0); //@line 296 "/checkout/src/liballoc/raw_vec.rs"
  $39 = HEAP32[$38>>2]|0; //@line 296 "/checkout/src/liballoc/raw_vec.rs"
  $uniq = $39; //@line 296 "/checkout/src/liballoc/raw_vec.rs"
  $40 = $uniq; //@line 330 "/checkout/src/liballoc/raw_vec.rs"
  $41 = $self; //@line 330 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$41>>2] = $40; //@line 330 "/checkout/src/liballoc/raw_vec.rs"
  $42 = $new_cap; //@line 331 "/checkout/src/liballoc/raw_vec.rs"
  $43 = $self; //@line 331 "/checkout/src/liballoc/raw_vec.rs"
  $44 = ((($43)) + 4|0); //@line 331 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$44>>2] = $42; //@line 331 "/checkout/src/liballoc/raw_vec.rs"
  STACKTOP = sp;return; //@line 333 "/checkout/src/liballoc/raw_vec.rs"
 }
 $8 = $elem_size; //@line 323 "/checkout/src/liballoc/raw_vec.rs"
 $9 = ($8>>>0)>(536870911); //@line 323 "/checkout/src/liballoc/raw_vec.rs"
 if ($9) {
  $new_cap2 = 1; //@line 323 "/checkout/src/liballoc/raw_vec.rs"
 } else {
  $new_cap2 = 4; //@line 323 "/checkout/src/liballoc/raw_vec.rs"
 }
 $52 = $self; //@line 324 "/checkout/src/liballoc/raw_vec.rs"
 $53 = $new_cap2; //@line 324 "/checkout/src/liballoc/raw_vec.rs"
 __ZN5alloc9allocator5Alloc11alloc_array17h8ab62f40d63c8786E($_49,$52,$53); //@line 324 "/checkout/src/liballoc/raw_vec.rs"
 $54 = HEAP32[$_49>>2]|0; //@line 325 "/checkout/src/liballoc/raw_vec.rs"
 $switch5 = ($54>>>0)<(1); //@line 325 "/checkout/src/liballoc/raw_vec.rs"
 if (!($switch5)) {
  $59 = ((($_49)) + 4|0); //@line 326 "/checkout/src/liballoc/raw_vec.rs"
  ;HEAP32[$e4>>2]=HEAP32[$59>>2]|0;HEAP32[$e4+4>>2]=HEAP32[$59+4>>2]|0;HEAP32[$e4+8>>2]=HEAP32[$59+8>>2]|0; //@line 326 "/checkout/src/liballoc/raw_vec.rs"
  $60 = $self; //@line 326 "/checkout/src/liballoc/raw_vec.rs"
  ;HEAP32[$_58>>2]=HEAP32[$e4>>2]|0;HEAP32[$_58+4>>2]=HEAP32[$e4+4>>2]|0;HEAP32[$_58+8>>2]=HEAP32[$e4+8>>2]|0; //@line 326 "/checkout/src/liballoc/raw_vec.rs"
  __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h4a74d63357c934f6E($60,$_58); //@line 326 "/checkout/src/liballoc/raw_vec.rs"
  // unreachable; //@line 326 "/checkout/src/liballoc/raw_vec.rs"
 }
 $55 = ((($_49)) + 4|0); //@line 325 "/checkout/src/liballoc/raw_vec.rs"
 $56 = HEAP32[$55>>2]|0; //@line 325 "/checkout/src/liballoc/raw_vec.rs"
 $ptr3 = $56; //@line 325 "/checkout/src/liballoc/raw_vec.rs"
 $57 = $new_cap2; //@line 325 "/checkout/src/liballoc/raw_vec.rs"
 $58 = $ptr3; //@line 325 "/checkout/src/liballoc/raw_vec.rs"
 $$sink = $58;$$sink2 = $57;
 HEAP32[$_11>>2] = $$sink2;
 $36 = ((($_11)) + 4|0);
 HEAP32[$36>>2] = $$sink;
 $37 = HEAP32[$_11>>2]|0; //@line 296 "/checkout/src/liballoc/raw_vec.rs"
 $new_cap = $37; //@line 296 "/checkout/src/liballoc/raw_vec.rs"
 $38 = ((($_11)) + 4|0); //@line 296 "/checkout/src/liballoc/raw_vec.rs"
 $39 = HEAP32[$38>>2]|0; //@line 296 "/checkout/src/liballoc/raw_vec.rs"
 $uniq = $39; //@line 296 "/checkout/src/liballoc/raw_vec.rs"
 $40 = $uniq; //@line 330 "/checkout/src/liballoc/raw_vec.rs"
 $41 = $self; //@line 330 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$41>>2] = $40; //@line 330 "/checkout/src/liballoc/raw_vec.rs"
 $42 = $new_cap; //@line 331 "/checkout/src/liballoc/raw_vec.rs"
 $43 = $self; //@line 331 "/checkout/src/liballoc/raw_vec.rs"
 $44 = ((($43)) + 4|0); //@line 331 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$44>>2] = $42; //@line 331 "/checkout/src/liballoc/raw_vec.rs"
 STACKTOP = sp;return; //@line 333 "/checkout/src/liballoc/raw_vec.rs"
}
function __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_14current_layout17h5094a7f764870a02E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $align = 0, $self = 0;
 var $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $self = $1;
 $3 = $self; //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $4 = ((($3)) + 4|0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $5 = HEAP32[$4>>2]|0; //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $6 = ($5|0)==(0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 if ($6) {
  HEAP32[$0>>2] = 0; //@line 226 "/checkout/src/liballoc/raw_vec.rs"
  STACKTOP = sp;return; //@line 236 "/checkout/src/liballoc/raw_vec.rs"
 } else {
  $7 = (__ZN4core3mem8align_of17h1bf47edbc88dde51E()|0); //@line 231 "/checkout/src/liballoc/raw_vec.rs"
  $align = $7; //@line 231 "/checkout/src/liballoc/raw_vec.rs"
  $8 = (__ZN4core3mem7size_of17h1975c8c10bebb793E()|0); //@line 232 "/checkout/src/liballoc/raw_vec.rs"
  $9 = $self; //@line 232 "/checkout/src/liballoc/raw_vec.rs"
  $10 = ((($9)) + 4|0); //@line 232 "/checkout/src/liballoc/raw_vec.rs"
  $11 = HEAP32[$10>>2]|0; //@line 232 "/checkout/src/liballoc/raw_vec.rs"
  $12 = Math_imul($8, $11)|0; //@line 232 "/checkout/src/liballoc/raw_vec.rs"
  $size = $12; //@line 232 "/checkout/src/liballoc/raw_vec.rs"
  $13 = $size; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  $14 = $align; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  __ZN5alloc9allocator6Layout25from_size_align_unchecked17h1f4c5097bb0a95f9E($2,$13,$14); //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  $$sreg$field = HEAP32[$2>>2]|0; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  $$sreg$index1 = ((($2)) + 4|0); //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$0>>2] = 1; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  $15 = ((($0)) + 4|0); //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$15>>2] = $$sreg$field; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  $16 = ((($15)) + 4|0); //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$16>>2] = $$sreg$field2; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  STACKTOP = sp;return; //@line 236 "/checkout/src/liballoc/raw_vec.rs"
 }
}
function __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_7reserve17h370a85656f72c58dE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_0$i = 0, $_16 = 0, $_27 = 0, $_47 = 0, $e = 0, $layout = 0, $layout1 = 0, $needed_extra_cap = 0, $new_cap = 0, $new_layout = 0, $old_ptr = 0, $ptr = 0, $res = 0, $self = 0, $self$i = 0, $switch = 0, $switch1 = 0, $switch2 = 0, $uniq = 0;
 var $used_cap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $_47 = sp + 112|0;
 $e = sp + 100|0;
 $layout1 = sp + 80|0;
 $_27 = sp + 64|0;
 $res = sp + 48|0;
 $layout = sp + 40|0;
 $_16 = sp + 24|0;
 $new_layout = sp + 16|0;
 $self = $0;
 $used_cap = $1;
 $needed_extra_cap = $2;
 $3 = $self; //@line 516 "/checkout/src/liballoc/raw_vec.rs"
 $self$i = $3;
 $4 = (__ZN4core3mem7size_of17hd7a6698aeb9187d3E()|0); //@line 207 "/checkout/src/liballoc/raw_vec.rs"
 $5 = ($4|0)==(0); //@line 207 "/checkout/src/liballoc/raw_vec.rs"
 if ($5) {
  $_0$i = -1; //@line 208 "/checkout/src/liballoc/raw_vec.rs"
 } else {
  $6 = $self$i; //@line 210 "/checkout/src/liballoc/raw_vec.rs"
  $7 = ((($6)) + 4|0); //@line 210 "/checkout/src/liballoc/raw_vec.rs"
  $8 = HEAP32[$7>>2]|0; //@line 210 "/checkout/src/liballoc/raw_vec.rs"
  $_0$i = $8; //@line 210 "/checkout/src/liballoc/raw_vec.rs"
 }
 $9 = $_0$i; //@line 212 "/checkout/src/liballoc/raw_vec.rs"
 $10 = $used_cap; //@line 516 "/checkout/src/liballoc/raw_vec.rs"
 $11 = (__ZN4core3num23__LT_impl_u20_usize_GT_12wrapping_sub17h4713c9842bdc8110E($9,$10)|0); //@line 516 "/checkout/src/liballoc/raw_vec.rs"
 $12 = $needed_extra_cap; //@line 516 "/checkout/src/liballoc/raw_vec.rs"
 $13 = ($11>>>0)>=($12>>>0); //@line 516 "/checkout/src/liballoc/raw_vec.rs"
 if ($13) {
  STACKTOP = sp;return; //@line 542 "/checkout/src/liballoc/raw_vec.rs"
 }
 $14 = $self; //@line 520 "/checkout/src/liballoc/raw_vec.rs"
 $15 = $used_cap; //@line 520 "/checkout/src/liballoc/raw_vec.rs"
 $16 = $needed_extra_cap; //@line 520 "/checkout/src/liballoc/raw_vec.rs"
 $17 = (__ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_18amortized_new_size17h37366298e4de3fd4E($14,$15,$16)|0); //@line 520 "/checkout/src/liballoc/raw_vec.rs"
 $new_cap = $17; //@line 520 "/checkout/src/liballoc/raw_vec.rs"
 $18 = $new_cap; //@line 522 "/checkout/src/liballoc/raw_vec.rs"
 __ZN5alloc9allocator6Layout5array17h2fe3026d0ba14cafE($_16,$18); //@line 522 "/checkout/src/liballoc/raw_vec.rs"
 $19 = HEAP32[$_16>>2]|0; //@line 523 "/checkout/src/liballoc/raw_vec.rs"
 $switch1 = ($19>>>0)<(1); //@line 523 "/checkout/src/liballoc/raw_vec.rs"
 if ($switch1) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(3468); //@line 3 "<panic macros>"
  // unreachable; //@line 3 "<panic macros>"
 }
 $20 = ((($_16)) + 4|0); //@line 523 "/checkout/src/liballoc/raw_vec.rs"
 $21 = HEAP32[$20>>2]|0; //@line 523 "/checkout/src/liballoc/raw_vec.rs"
 $22 = ((($20)) + 4|0); //@line 523 "/checkout/src/liballoc/raw_vec.rs"
 $23 = HEAP32[$22>>2]|0; //@line 523 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$layout>>2] = $21; //@line 523 "/checkout/src/liballoc/raw_vec.rs"
 $24 = ((($layout)) + 4|0); //@line 523 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$24>>2] = $23; //@line 523 "/checkout/src/liballoc/raw_vec.rs"
 $25 = HEAP32[$layout>>2]|0; //@line 523 "/checkout/src/liballoc/raw_vec.rs"
 $26 = ((($layout)) + 4|0); //@line 523 "/checkout/src/liballoc/raw_vec.rs"
 $27 = HEAP32[$26>>2]|0; //@line 523 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$new_layout>>2] = $25; //@line 523 "/checkout/src/liballoc/raw_vec.rs"
 $28 = ((($new_layout)) + 4|0); //@line 523 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$28>>2] = $27; //@line 523 "/checkout/src/liballoc/raw_vec.rs"
 $29 = (__ZN5alloc9allocator6Layout4size17hf21f6297eca498a6E($new_layout)|0); //@line 527 "/checkout/src/liballoc/raw_vec.rs"
 __ZN5alloc7raw_vec11alloc_guard17hd2f7c556070d3619E($29); //@line 527 "/checkout/src/liballoc/raw_vec.rs"
 $30 = $self; //@line 528 "/checkout/src/liballoc/raw_vec.rs"
 __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_14current_layout17h334087341b255fe6E($_27,$30); //@line 528 "/checkout/src/liballoc/raw_vec.rs"
 $31 = HEAP32[$_27>>2]|0; //@line 529 "/checkout/src/liballoc/raw_vec.rs"
 $switch2 = ($31>>>0)<(1); //@line 529 "/checkout/src/liballoc/raw_vec.rs"
 if ($switch2) {
  $32 = $self; //@line 533 "/checkout/src/liballoc/raw_vec.rs"
  $33 = HEAP32[$new_layout>>2]|0; //@line 533 "/checkout/src/liballoc/raw_vec.rs"
  $34 = ((($new_layout)) + 4|0); //@line 533 "/checkout/src/liballoc/raw_vec.rs"
  $35 = HEAP32[$34>>2]|0; //@line 533 "/checkout/src/liballoc/raw_vec.rs"
  __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_5alloc17h1df6c2188654da5aE($res,$32,$33,$35); //@line 533 "/checkout/src/liballoc/raw_vec.rs"
 } else {
  $36 = ((($_27)) + 4|0); //@line 529 "/checkout/src/liballoc/raw_vec.rs"
  $37 = HEAP32[$36>>2]|0; //@line 529 "/checkout/src/liballoc/raw_vec.rs"
  $38 = ((($36)) + 4|0); //@line 529 "/checkout/src/liballoc/raw_vec.rs"
  $39 = HEAP32[$38>>2]|0; //@line 529 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$layout1>>2] = $37; //@line 529 "/checkout/src/liballoc/raw_vec.rs"
  $40 = ((($layout1)) + 4|0); //@line 529 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$40>>2] = $39; //@line 529 "/checkout/src/liballoc/raw_vec.rs"
  $41 = $self; //@line 530 "/checkout/src/liballoc/raw_vec.rs"
  $42 = HEAP32[$41>>2]|0; //@line 530 "/checkout/src/liballoc/raw_vec.rs"
  $43 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_6as_ptr17h5472f53bc77f1039E($42)|0); //@line 530 "/checkout/src/liballoc/raw_vec.rs"
  $old_ptr = $43; //@line 530 "/checkout/src/liballoc/raw_vec.rs"
  $44 = $self; //@line 531 "/checkout/src/liballoc/raw_vec.rs"
  $45 = $old_ptr; //@line 531 "/checkout/src/liballoc/raw_vec.rs"
  $46 = HEAP32[$layout1>>2]|0; //@line 531 "/checkout/src/liballoc/raw_vec.rs"
  $47 = ((($layout1)) + 4|0); //@line 531 "/checkout/src/liballoc/raw_vec.rs"
  $48 = HEAP32[$47>>2]|0; //@line 531 "/checkout/src/liballoc/raw_vec.rs"
  $49 = HEAP32[$new_layout>>2]|0; //@line 531 "/checkout/src/liballoc/raw_vec.rs"
  $50 = ((($new_layout)) + 4|0); //@line 531 "/checkout/src/liballoc/raw_vec.rs"
  $51 = HEAP32[$50>>2]|0; //@line 531 "/checkout/src/liballoc/raw_vec.rs"
  __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_7realloc17h42923a80abd93e7aE($res,$44,$45,$46,$48,$49,$51); //@line 531 "/checkout/src/liballoc/raw_vec.rs"
 }
 $52 = HEAP32[$res>>2]|0; //@line 536 "/checkout/src/liballoc/raw_vec.rs"
 $switch = ($52>>>0)<(1); //@line 536 "/checkout/src/liballoc/raw_vec.rs"
 if (!($switch)) {
  $62 = ((($res)) + 4|0); //@line 537 "/checkout/src/liballoc/raw_vec.rs"
  ;HEAP32[$e>>2]=HEAP32[$62>>2]|0;HEAP32[$e+4>>2]=HEAP32[$62+4>>2]|0;HEAP32[$e+8>>2]=HEAP32[$62+8>>2]|0; //@line 537 "/checkout/src/liballoc/raw_vec.rs"
  $63 = $self; //@line 537 "/checkout/src/liballoc/raw_vec.rs"
  ;HEAP32[$_47>>2]=HEAP32[$e>>2]|0;HEAP32[$_47+4>>2]=HEAP32[$e+4>>2]|0;HEAP32[$_47+8>>2]=HEAP32[$e+8>>2]|0; //@line 537 "/checkout/src/liballoc/raw_vec.rs"
  __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h4a74d63357c934f6E($63,$_47); //@line 537 "/checkout/src/liballoc/raw_vec.rs"
  // unreachable; //@line 537 "/checkout/src/liballoc/raw_vec.rs"
 }
 $53 = ((($res)) + 4|0); //@line 536 "/checkout/src/liballoc/raw_vec.rs"
 $54 = HEAP32[$53>>2]|0; //@line 536 "/checkout/src/liballoc/raw_vec.rs"
 $ptr = $54; //@line 536 "/checkout/src/liballoc/raw_vec.rs"
 $55 = $ptr; //@line 536 "/checkout/src/liballoc/raw_vec.rs"
 $56 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_13new_unchecked17h6e6eca53f3fccbfcE($55)|0); //@line 536 "/checkout/src/liballoc/raw_vec.rs"
 $uniq = $56; //@line 536 "/checkout/src/liballoc/raw_vec.rs"
 $57 = $uniq; //@line 539 "/checkout/src/liballoc/raw_vec.rs"
 $58 = $self; //@line 539 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$58>>2] = $57; //@line 539 "/checkout/src/liballoc/raw_vec.rs"
 $59 = $new_cap; //@line 540 "/checkout/src/liballoc/raw_vec.rs"
 $60 = $self; //@line 540 "/checkout/src/liballoc/raw_vec.rs"
 $61 = ((($60)) + 4|0); //@line 540 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$61>>2] = $59; //@line 540 "/checkout/src/liballoc/raw_vec.rs"
 STACKTOP = sp;return; //@line 542 "/checkout/src/liballoc/raw_vec.rs"
}
function __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_18amortized_new_size17h37366298e4de3fd4E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_5 = 0, $double_cap = 0, $needed_extra_cap = 0, $required_cap = 0, $self = 0, $used_cap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_5 = sp + 16|0;
 $self = $0;
 $used_cap = $1;
 $needed_extra_cap = $2;
 $3 = $used_cap; //@line 447 "/checkout/src/liballoc/raw_vec.rs"
 $4 = $needed_extra_cap; //@line 447 "/checkout/src/liballoc/raw_vec.rs"
 __ZN4core3num23__LT_impl_u20_usize_GT_11checked_add17h00d1a99943b8f1ffE($_5,$3,$4); //@line 447 "/checkout/src/liballoc/raw_vec.rs"
 $5 = (__ZN38__LT_core__option__Option_LT_T_GT__GT_6expect17h309912bdbe900737E($_5,13775,17)|0); //@line 447 "/checkout/src/liballoc/raw_vec.rs"
 $required_cap = $5; //@line 447 "/checkout/src/liballoc/raw_vec.rs"
 $6 = $self; //@line 450 "/checkout/src/liballoc/raw_vec.rs"
 $7 = ((($6)) + 4|0); //@line 450 "/checkout/src/liballoc/raw_vec.rs"
 $8 = HEAP32[$7>>2]|0; //@line 450 "/checkout/src/liballoc/raw_vec.rs"
 $9 = $8<<1; //@line 450 "/checkout/src/liballoc/raw_vec.rs"
 $double_cap = $9; //@line 450 "/checkout/src/liballoc/raw_vec.rs"
 $10 = $double_cap; //@line 452 "/checkout/src/liballoc/raw_vec.rs"
 $11 = $required_cap; //@line 452 "/checkout/src/liballoc/raw_vec.rs"
 $12 = (__ZN4core3cmp3max17hc9a0caf44efcf4dbE($10,$11)|0); //@line 452 "/checkout/src/liballoc/raw_vec.rs"
 STACKTOP = sp;return ($12|0); //@line 453 "/checkout/src/liballoc/raw_vec.rs"
}
function __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_7reserve17h3fb2a297a9ecbf70E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_0$i = 0, $_16 = 0, $_27 = 0, $_47 = 0, $e = 0, $layout = 0, $layout1 = 0, $needed_extra_cap = 0, $new_cap = 0, $new_layout = 0, $old_ptr = 0, $ptr = 0, $res = 0, $self = 0, $self$i = 0, $switch = 0, $switch1 = 0, $switch2 = 0, $uniq = 0;
 var $used_cap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $_47 = sp + 112|0;
 $e = sp + 100|0;
 $layout1 = sp + 80|0;
 $_27 = sp + 64|0;
 $res = sp + 48|0;
 $layout = sp + 40|0;
 $_16 = sp + 24|0;
 $new_layout = sp + 16|0;
 $self = $0;
 $used_cap = $1;
 $needed_extra_cap = $2;
 $3 = $self; //@line 516 "/checkout/src/liballoc/raw_vec.rs"
 $self$i = $3;
 $4 = (__ZN4core3mem7size_of17h34f2235168088e08E()|0); //@line 207 "/checkout/src/liballoc/raw_vec.rs"
 $5 = ($4|0)==(0); //@line 207 "/checkout/src/liballoc/raw_vec.rs"
 if ($5) {
  $_0$i = -1; //@line 208 "/checkout/src/liballoc/raw_vec.rs"
 } else {
  $6 = $self$i; //@line 210 "/checkout/src/liballoc/raw_vec.rs"
  $7 = ((($6)) + 4|0); //@line 210 "/checkout/src/liballoc/raw_vec.rs"
  $8 = HEAP32[$7>>2]|0; //@line 210 "/checkout/src/liballoc/raw_vec.rs"
  $_0$i = $8; //@line 210 "/checkout/src/liballoc/raw_vec.rs"
 }
 $9 = $_0$i; //@line 212 "/checkout/src/liballoc/raw_vec.rs"
 $10 = $used_cap; //@line 516 "/checkout/src/liballoc/raw_vec.rs"
 $11 = (__ZN4core3num23__LT_impl_u20_usize_GT_12wrapping_sub17h4713c9842bdc8110E($9,$10)|0); //@line 516 "/checkout/src/liballoc/raw_vec.rs"
 $12 = $needed_extra_cap; //@line 516 "/checkout/src/liballoc/raw_vec.rs"
 $13 = ($11>>>0)>=($12>>>0); //@line 516 "/checkout/src/liballoc/raw_vec.rs"
 if ($13) {
  STACKTOP = sp;return; //@line 542 "/checkout/src/liballoc/raw_vec.rs"
 }
 $14 = $self; //@line 520 "/checkout/src/liballoc/raw_vec.rs"
 $15 = $used_cap; //@line 520 "/checkout/src/liballoc/raw_vec.rs"
 $16 = $needed_extra_cap; //@line 520 "/checkout/src/liballoc/raw_vec.rs"
 $17 = (__ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_18amortized_new_size17h9973f9e26f423beeE($14,$15,$16)|0); //@line 520 "/checkout/src/liballoc/raw_vec.rs"
 $new_cap = $17; //@line 520 "/checkout/src/liballoc/raw_vec.rs"
 $18 = $new_cap; //@line 522 "/checkout/src/liballoc/raw_vec.rs"
 __ZN5alloc9allocator6Layout5array17h400e7ec2b99ceddfE($_16,$18); //@line 522 "/checkout/src/liballoc/raw_vec.rs"
 $19 = HEAP32[$_16>>2]|0; //@line 523 "/checkout/src/liballoc/raw_vec.rs"
 $switch1 = ($19>>>0)<(1); //@line 523 "/checkout/src/liballoc/raw_vec.rs"
 if ($switch1) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(3468); //@line 3 "<panic macros>"
  // unreachable; //@line 3 "<panic macros>"
 }
 $20 = ((($_16)) + 4|0); //@line 523 "/checkout/src/liballoc/raw_vec.rs"
 $21 = HEAP32[$20>>2]|0; //@line 523 "/checkout/src/liballoc/raw_vec.rs"
 $22 = ((($20)) + 4|0); //@line 523 "/checkout/src/liballoc/raw_vec.rs"
 $23 = HEAP32[$22>>2]|0; //@line 523 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$layout>>2] = $21; //@line 523 "/checkout/src/liballoc/raw_vec.rs"
 $24 = ((($layout)) + 4|0); //@line 523 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$24>>2] = $23; //@line 523 "/checkout/src/liballoc/raw_vec.rs"
 $25 = HEAP32[$layout>>2]|0; //@line 523 "/checkout/src/liballoc/raw_vec.rs"
 $26 = ((($layout)) + 4|0); //@line 523 "/checkout/src/liballoc/raw_vec.rs"
 $27 = HEAP32[$26>>2]|0; //@line 523 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$new_layout>>2] = $25; //@line 523 "/checkout/src/liballoc/raw_vec.rs"
 $28 = ((($new_layout)) + 4|0); //@line 523 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$28>>2] = $27; //@line 523 "/checkout/src/liballoc/raw_vec.rs"
 $29 = (__ZN5alloc9allocator6Layout4size17hf21f6297eca498a6E($new_layout)|0); //@line 527 "/checkout/src/liballoc/raw_vec.rs"
 __ZN5alloc7raw_vec11alloc_guard17hd2f7c556070d3619E($29); //@line 527 "/checkout/src/liballoc/raw_vec.rs"
 $30 = $self; //@line 528 "/checkout/src/liballoc/raw_vec.rs"
 __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_14current_layout17hbcae1ab8165ee399E($_27,$30); //@line 528 "/checkout/src/liballoc/raw_vec.rs"
 $31 = HEAP32[$_27>>2]|0; //@line 529 "/checkout/src/liballoc/raw_vec.rs"
 $switch2 = ($31>>>0)<(1); //@line 529 "/checkout/src/liballoc/raw_vec.rs"
 if ($switch2) {
  $32 = $self; //@line 533 "/checkout/src/liballoc/raw_vec.rs"
  $33 = HEAP32[$new_layout>>2]|0; //@line 533 "/checkout/src/liballoc/raw_vec.rs"
  $34 = ((($new_layout)) + 4|0); //@line 533 "/checkout/src/liballoc/raw_vec.rs"
  $35 = HEAP32[$34>>2]|0; //@line 533 "/checkout/src/liballoc/raw_vec.rs"
  __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_5alloc17h1df6c2188654da5aE($res,$32,$33,$35); //@line 533 "/checkout/src/liballoc/raw_vec.rs"
 } else {
  $36 = ((($_27)) + 4|0); //@line 529 "/checkout/src/liballoc/raw_vec.rs"
  $37 = HEAP32[$36>>2]|0; //@line 529 "/checkout/src/liballoc/raw_vec.rs"
  $38 = ((($36)) + 4|0); //@line 529 "/checkout/src/liballoc/raw_vec.rs"
  $39 = HEAP32[$38>>2]|0; //@line 529 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$layout1>>2] = $37; //@line 529 "/checkout/src/liballoc/raw_vec.rs"
  $40 = ((($layout1)) + 4|0); //@line 529 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$40>>2] = $39; //@line 529 "/checkout/src/liballoc/raw_vec.rs"
  $41 = $self; //@line 530 "/checkout/src/liballoc/raw_vec.rs"
  $42 = HEAP32[$41>>2]|0; //@line 530 "/checkout/src/liballoc/raw_vec.rs"
  $43 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_6as_ptr17h99d71c7f68843f3aE($42)|0); //@line 530 "/checkout/src/liballoc/raw_vec.rs"
  $old_ptr = $43; //@line 530 "/checkout/src/liballoc/raw_vec.rs"
  $44 = $self; //@line 531 "/checkout/src/liballoc/raw_vec.rs"
  $45 = $old_ptr; //@line 531 "/checkout/src/liballoc/raw_vec.rs"
  $46 = HEAP32[$layout1>>2]|0; //@line 531 "/checkout/src/liballoc/raw_vec.rs"
  $47 = ((($layout1)) + 4|0); //@line 531 "/checkout/src/liballoc/raw_vec.rs"
  $48 = HEAP32[$47>>2]|0; //@line 531 "/checkout/src/liballoc/raw_vec.rs"
  $49 = HEAP32[$new_layout>>2]|0; //@line 531 "/checkout/src/liballoc/raw_vec.rs"
  $50 = ((($new_layout)) + 4|0); //@line 531 "/checkout/src/liballoc/raw_vec.rs"
  $51 = HEAP32[$50>>2]|0; //@line 531 "/checkout/src/liballoc/raw_vec.rs"
  __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_7realloc17h42923a80abd93e7aE($res,$44,$45,$46,$48,$49,$51); //@line 531 "/checkout/src/liballoc/raw_vec.rs"
 }
 $52 = HEAP32[$res>>2]|0; //@line 536 "/checkout/src/liballoc/raw_vec.rs"
 $switch = ($52>>>0)<(1); //@line 536 "/checkout/src/liballoc/raw_vec.rs"
 if (!($switch)) {
  $62 = ((($res)) + 4|0); //@line 537 "/checkout/src/liballoc/raw_vec.rs"
  ;HEAP32[$e>>2]=HEAP32[$62>>2]|0;HEAP32[$e+4>>2]=HEAP32[$62+4>>2]|0;HEAP32[$e+8>>2]=HEAP32[$62+8>>2]|0; //@line 537 "/checkout/src/liballoc/raw_vec.rs"
  $63 = $self; //@line 537 "/checkout/src/liballoc/raw_vec.rs"
  ;HEAP32[$_47>>2]=HEAP32[$e>>2]|0;HEAP32[$_47+4>>2]=HEAP32[$e+4>>2]|0;HEAP32[$_47+8>>2]=HEAP32[$e+8>>2]|0; //@line 537 "/checkout/src/liballoc/raw_vec.rs"
  __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h4a74d63357c934f6E($63,$_47); //@line 537 "/checkout/src/liballoc/raw_vec.rs"
  // unreachable; //@line 537 "/checkout/src/liballoc/raw_vec.rs"
 }
 $53 = ((($res)) + 4|0); //@line 536 "/checkout/src/liballoc/raw_vec.rs"
 $54 = HEAP32[$53>>2]|0; //@line 536 "/checkout/src/liballoc/raw_vec.rs"
 $ptr = $54; //@line 536 "/checkout/src/liballoc/raw_vec.rs"
 $55 = $ptr; //@line 536 "/checkout/src/liballoc/raw_vec.rs"
 $56 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_13new_unchecked17h4db77394a7746a1bE($55)|0); //@line 536 "/checkout/src/liballoc/raw_vec.rs"
 $uniq = $56; //@line 536 "/checkout/src/liballoc/raw_vec.rs"
 $57 = $uniq; //@line 539 "/checkout/src/liballoc/raw_vec.rs"
 $58 = $self; //@line 539 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$58>>2] = $57; //@line 539 "/checkout/src/liballoc/raw_vec.rs"
 $59 = $new_cap; //@line 540 "/checkout/src/liballoc/raw_vec.rs"
 $60 = $self; //@line 540 "/checkout/src/liballoc/raw_vec.rs"
 $61 = ((($60)) + 4|0); //@line 540 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$61>>2] = $59; //@line 540 "/checkout/src/liballoc/raw_vec.rs"
 STACKTOP = sp;return; //@line 542 "/checkout/src/liballoc/raw_vec.rs"
}
function __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_18amortized_new_size17h9973f9e26f423beeE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_5 = 0, $double_cap = 0, $needed_extra_cap = 0, $required_cap = 0, $self = 0, $used_cap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_5 = sp + 16|0;
 $self = $0;
 $used_cap = $1;
 $needed_extra_cap = $2;
 $3 = $used_cap; //@line 447 "/checkout/src/liballoc/raw_vec.rs"
 $4 = $needed_extra_cap; //@line 447 "/checkout/src/liballoc/raw_vec.rs"
 __ZN4core3num23__LT_impl_u20_usize_GT_11checked_add17h00d1a99943b8f1ffE($_5,$3,$4); //@line 447 "/checkout/src/liballoc/raw_vec.rs"
 $5 = (__ZN38__LT_core__option__Option_LT_T_GT__GT_6expect17h309912bdbe900737E($_5,13775,17)|0); //@line 447 "/checkout/src/liballoc/raw_vec.rs"
 $required_cap = $5; //@line 447 "/checkout/src/liballoc/raw_vec.rs"
 $6 = $self; //@line 450 "/checkout/src/liballoc/raw_vec.rs"
 $7 = ((($6)) + 4|0); //@line 450 "/checkout/src/liballoc/raw_vec.rs"
 $8 = HEAP32[$7>>2]|0; //@line 450 "/checkout/src/liballoc/raw_vec.rs"
 $9 = $8<<1; //@line 450 "/checkout/src/liballoc/raw_vec.rs"
 $double_cap = $9; //@line 450 "/checkout/src/liballoc/raw_vec.rs"
 $10 = $double_cap; //@line 452 "/checkout/src/liballoc/raw_vec.rs"
 $11 = $required_cap; //@line 452 "/checkout/src/liballoc/raw_vec.rs"
 $12 = (__ZN4core3cmp3max17hc9a0caf44efcf4dbE($10,$11)|0); //@line 452 "/checkout/src/liballoc/raw_vec.rs"
 STACKTOP = sp;return ($12|0); //@line 453 "/checkout/src/liballoc/raw_vec.rs"
}
function __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_7reserve17h47c2e17872c37f83E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_0$i = 0, $_16 = 0, $_27 = 0, $_47 = 0, $e = 0, $layout = 0, $layout1 = 0, $needed_extra_cap = 0, $new_cap = 0, $new_layout = 0, $old_ptr = 0, $ptr = 0, $res = 0, $self = 0, $self$i = 0, $switch = 0, $switch1 = 0, $switch2 = 0, $uniq = 0;
 var $used_cap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $_47 = sp + 112|0;
 $e = sp + 100|0;
 $layout1 = sp + 80|0;
 $_27 = sp + 64|0;
 $res = sp + 48|0;
 $layout = sp + 40|0;
 $_16 = sp + 24|0;
 $new_layout = sp + 16|0;
 $self = $0;
 $used_cap = $1;
 $needed_extra_cap = $2;
 $3 = $self; //@line 516 "/checkout/src/liballoc/raw_vec.rs"
 $self$i = $3;
 $4 = (__ZN4core3mem7size_of17h809a29d4399807a6E()|0); //@line 207 "/checkout/src/liballoc/raw_vec.rs"
 $5 = ($4|0)==(0); //@line 207 "/checkout/src/liballoc/raw_vec.rs"
 if ($5) {
  $_0$i = -1; //@line 208 "/checkout/src/liballoc/raw_vec.rs"
 } else {
  $6 = $self$i; //@line 210 "/checkout/src/liballoc/raw_vec.rs"
  $7 = ((($6)) + 4|0); //@line 210 "/checkout/src/liballoc/raw_vec.rs"
  $8 = HEAP32[$7>>2]|0; //@line 210 "/checkout/src/liballoc/raw_vec.rs"
  $_0$i = $8; //@line 210 "/checkout/src/liballoc/raw_vec.rs"
 }
 $9 = $_0$i; //@line 212 "/checkout/src/liballoc/raw_vec.rs"
 $10 = $used_cap; //@line 516 "/checkout/src/liballoc/raw_vec.rs"
 $11 = (__ZN4core3num23__LT_impl_u20_usize_GT_12wrapping_sub17h4713c9842bdc8110E($9,$10)|0); //@line 516 "/checkout/src/liballoc/raw_vec.rs"
 $12 = $needed_extra_cap; //@line 516 "/checkout/src/liballoc/raw_vec.rs"
 $13 = ($11>>>0)>=($12>>>0); //@line 516 "/checkout/src/liballoc/raw_vec.rs"
 if ($13) {
  STACKTOP = sp;return; //@line 542 "/checkout/src/liballoc/raw_vec.rs"
 }
 $14 = $self; //@line 520 "/checkout/src/liballoc/raw_vec.rs"
 $15 = $used_cap; //@line 520 "/checkout/src/liballoc/raw_vec.rs"
 $16 = $needed_extra_cap; //@line 520 "/checkout/src/liballoc/raw_vec.rs"
 $17 = (__ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_18amortized_new_size17hbcce71e6be915c73E($14,$15,$16)|0); //@line 520 "/checkout/src/liballoc/raw_vec.rs"
 $new_cap = $17; //@line 520 "/checkout/src/liballoc/raw_vec.rs"
 $18 = $new_cap; //@line 522 "/checkout/src/liballoc/raw_vec.rs"
 __ZN5alloc9allocator6Layout5array17h13723c3d36e7ffbeE($_16,$18); //@line 522 "/checkout/src/liballoc/raw_vec.rs"
 $19 = HEAP32[$_16>>2]|0; //@line 523 "/checkout/src/liballoc/raw_vec.rs"
 $switch1 = ($19>>>0)<(1); //@line 523 "/checkout/src/liballoc/raw_vec.rs"
 if ($switch1) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(3468); //@line 3 "<panic macros>"
  // unreachable; //@line 3 "<panic macros>"
 }
 $20 = ((($_16)) + 4|0); //@line 523 "/checkout/src/liballoc/raw_vec.rs"
 $21 = HEAP32[$20>>2]|0; //@line 523 "/checkout/src/liballoc/raw_vec.rs"
 $22 = ((($20)) + 4|0); //@line 523 "/checkout/src/liballoc/raw_vec.rs"
 $23 = HEAP32[$22>>2]|0; //@line 523 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$layout>>2] = $21; //@line 523 "/checkout/src/liballoc/raw_vec.rs"
 $24 = ((($layout)) + 4|0); //@line 523 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$24>>2] = $23; //@line 523 "/checkout/src/liballoc/raw_vec.rs"
 $25 = HEAP32[$layout>>2]|0; //@line 523 "/checkout/src/liballoc/raw_vec.rs"
 $26 = ((($layout)) + 4|0); //@line 523 "/checkout/src/liballoc/raw_vec.rs"
 $27 = HEAP32[$26>>2]|0; //@line 523 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$new_layout>>2] = $25; //@line 523 "/checkout/src/liballoc/raw_vec.rs"
 $28 = ((($new_layout)) + 4|0); //@line 523 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$28>>2] = $27; //@line 523 "/checkout/src/liballoc/raw_vec.rs"
 $29 = (__ZN5alloc9allocator6Layout4size17hf21f6297eca498a6E($new_layout)|0); //@line 527 "/checkout/src/liballoc/raw_vec.rs"
 __ZN5alloc7raw_vec11alloc_guard17hd2f7c556070d3619E($29); //@line 527 "/checkout/src/liballoc/raw_vec.rs"
 $30 = $self; //@line 528 "/checkout/src/liballoc/raw_vec.rs"
 __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_14current_layout17h3cd945fef7e785f3E($_27,$30); //@line 528 "/checkout/src/liballoc/raw_vec.rs"
 $31 = HEAP32[$_27>>2]|0; //@line 529 "/checkout/src/liballoc/raw_vec.rs"
 $switch2 = ($31>>>0)<(1); //@line 529 "/checkout/src/liballoc/raw_vec.rs"
 if ($switch2) {
  $32 = $self; //@line 533 "/checkout/src/liballoc/raw_vec.rs"
  $33 = HEAP32[$new_layout>>2]|0; //@line 533 "/checkout/src/liballoc/raw_vec.rs"
  $34 = ((($new_layout)) + 4|0); //@line 533 "/checkout/src/liballoc/raw_vec.rs"
  $35 = HEAP32[$34>>2]|0; //@line 533 "/checkout/src/liballoc/raw_vec.rs"
  __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_5alloc17h1df6c2188654da5aE($res,$32,$33,$35); //@line 533 "/checkout/src/liballoc/raw_vec.rs"
 } else {
  $36 = ((($_27)) + 4|0); //@line 529 "/checkout/src/liballoc/raw_vec.rs"
  $37 = HEAP32[$36>>2]|0; //@line 529 "/checkout/src/liballoc/raw_vec.rs"
  $38 = ((($36)) + 4|0); //@line 529 "/checkout/src/liballoc/raw_vec.rs"
  $39 = HEAP32[$38>>2]|0; //@line 529 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$layout1>>2] = $37; //@line 529 "/checkout/src/liballoc/raw_vec.rs"
  $40 = ((($layout1)) + 4|0); //@line 529 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$40>>2] = $39; //@line 529 "/checkout/src/liballoc/raw_vec.rs"
  $41 = $self; //@line 530 "/checkout/src/liballoc/raw_vec.rs"
  $42 = HEAP32[$41>>2]|0; //@line 530 "/checkout/src/liballoc/raw_vec.rs"
  $43 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_6as_ptr17h3bb82dda755467c2E($42)|0); //@line 530 "/checkout/src/liballoc/raw_vec.rs"
  $old_ptr = $43; //@line 530 "/checkout/src/liballoc/raw_vec.rs"
  $44 = $self; //@line 531 "/checkout/src/liballoc/raw_vec.rs"
  $45 = $old_ptr; //@line 531 "/checkout/src/liballoc/raw_vec.rs"
  $46 = HEAP32[$layout1>>2]|0; //@line 531 "/checkout/src/liballoc/raw_vec.rs"
  $47 = ((($layout1)) + 4|0); //@line 531 "/checkout/src/liballoc/raw_vec.rs"
  $48 = HEAP32[$47>>2]|0; //@line 531 "/checkout/src/liballoc/raw_vec.rs"
  $49 = HEAP32[$new_layout>>2]|0; //@line 531 "/checkout/src/liballoc/raw_vec.rs"
  $50 = ((($new_layout)) + 4|0); //@line 531 "/checkout/src/liballoc/raw_vec.rs"
  $51 = HEAP32[$50>>2]|0; //@line 531 "/checkout/src/liballoc/raw_vec.rs"
  __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_7realloc17h42923a80abd93e7aE($res,$44,$45,$46,$48,$49,$51); //@line 531 "/checkout/src/liballoc/raw_vec.rs"
 }
 $52 = HEAP32[$res>>2]|0; //@line 536 "/checkout/src/liballoc/raw_vec.rs"
 $switch = ($52>>>0)<(1); //@line 536 "/checkout/src/liballoc/raw_vec.rs"
 if (!($switch)) {
  $62 = ((($res)) + 4|0); //@line 537 "/checkout/src/liballoc/raw_vec.rs"
  ;HEAP32[$e>>2]=HEAP32[$62>>2]|0;HEAP32[$e+4>>2]=HEAP32[$62+4>>2]|0;HEAP32[$e+8>>2]=HEAP32[$62+8>>2]|0; //@line 537 "/checkout/src/liballoc/raw_vec.rs"
  $63 = $self; //@line 537 "/checkout/src/liballoc/raw_vec.rs"
  ;HEAP32[$_47>>2]=HEAP32[$e>>2]|0;HEAP32[$_47+4>>2]=HEAP32[$e+4>>2]|0;HEAP32[$_47+8>>2]=HEAP32[$e+8>>2]|0; //@line 537 "/checkout/src/liballoc/raw_vec.rs"
  __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h4a74d63357c934f6E($63,$_47); //@line 537 "/checkout/src/liballoc/raw_vec.rs"
  // unreachable; //@line 537 "/checkout/src/liballoc/raw_vec.rs"
 }
 $53 = ((($res)) + 4|0); //@line 536 "/checkout/src/liballoc/raw_vec.rs"
 $54 = HEAP32[$53>>2]|0; //@line 536 "/checkout/src/liballoc/raw_vec.rs"
 $ptr = $54; //@line 536 "/checkout/src/liballoc/raw_vec.rs"
 $55 = $ptr; //@line 536 "/checkout/src/liballoc/raw_vec.rs"
 $56 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_13new_unchecked17h66f2c919dab55965E($55)|0); //@line 536 "/checkout/src/liballoc/raw_vec.rs"
 $uniq = $56; //@line 536 "/checkout/src/liballoc/raw_vec.rs"
 $57 = $uniq; //@line 539 "/checkout/src/liballoc/raw_vec.rs"
 $58 = $self; //@line 539 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$58>>2] = $57; //@line 539 "/checkout/src/liballoc/raw_vec.rs"
 $59 = $new_cap; //@line 540 "/checkout/src/liballoc/raw_vec.rs"
 $60 = $self; //@line 540 "/checkout/src/liballoc/raw_vec.rs"
 $61 = ((($60)) + 4|0); //@line 540 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$61>>2] = $59; //@line 540 "/checkout/src/liballoc/raw_vec.rs"
 STACKTOP = sp;return; //@line 542 "/checkout/src/liballoc/raw_vec.rs"
}
function __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_18amortized_new_size17hbcce71e6be915c73E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_5 = 0, $double_cap = 0, $needed_extra_cap = 0, $required_cap = 0, $self = 0, $used_cap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_5 = sp + 16|0;
 $self = $0;
 $used_cap = $1;
 $needed_extra_cap = $2;
 $3 = $used_cap; //@line 447 "/checkout/src/liballoc/raw_vec.rs"
 $4 = $needed_extra_cap; //@line 447 "/checkout/src/liballoc/raw_vec.rs"
 __ZN4core3num23__LT_impl_u20_usize_GT_11checked_add17h00d1a99943b8f1ffE($_5,$3,$4); //@line 447 "/checkout/src/liballoc/raw_vec.rs"
 $5 = (__ZN38__LT_core__option__Option_LT_T_GT__GT_6expect17h309912bdbe900737E($_5,13775,17)|0); //@line 447 "/checkout/src/liballoc/raw_vec.rs"
 $required_cap = $5; //@line 447 "/checkout/src/liballoc/raw_vec.rs"
 $6 = $self; //@line 450 "/checkout/src/liballoc/raw_vec.rs"
 $7 = ((($6)) + 4|0); //@line 450 "/checkout/src/liballoc/raw_vec.rs"
 $8 = HEAP32[$7>>2]|0; //@line 450 "/checkout/src/liballoc/raw_vec.rs"
 $9 = $8<<1; //@line 450 "/checkout/src/liballoc/raw_vec.rs"
 $double_cap = $9; //@line 450 "/checkout/src/liballoc/raw_vec.rs"
 $10 = $double_cap; //@line 452 "/checkout/src/liballoc/raw_vec.rs"
 $11 = $required_cap; //@line 452 "/checkout/src/liballoc/raw_vec.rs"
 $12 = (__ZN4core3cmp3max17hc9a0caf44efcf4dbE($10,$11)|0); //@line 452 "/checkout/src/liballoc/raw_vec.rs"
 STACKTOP = sp;return ($12|0); //@line 453 "/checkout/src/liballoc/raw_vec.rs"
}
function __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_14current_layout17h3cd945fef7e785f3E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $align = 0, $self = 0;
 var $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $self = $1;
 $3 = $self; //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $4 = ((($3)) + 4|0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $5 = HEAP32[$4>>2]|0; //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $6 = ($5|0)==(0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 if ($6) {
  HEAP32[$0>>2] = 0; //@line 226 "/checkout/src/liballoc/raw_vec.rs"
  STACKTOP = sp;return; //@line 236 "/checkout/src/liballoc/raw_vec.rs"
 } else {
  $7 = (__ZN4core3mem8align_of17h3d4cf13420557a3fE()|0); //@line 231 "/checkout/src/liballoc/raw_vec.rs"
  $align = $7; //@line 231 "/checkout/src/liballoc/raw_vec.rs"
  $8 = (__ZN4core3mem7size_of17h809a29d4399807a6E()|0); //@line 232 "/checkout/src/liballoc/raw_vec.rs"
  $9 = $self; //@line 232 "/checkout/src/liballoc/raw_vec.rs"
  $10 = ((($9)) + 4|0); //@line 232 "/checkout/src/liballoc/raw_vec.rs"
  $11 = HEAP32[$10>>2]|0; //@line 232 "/checkout/src/liballoc/raw_vec.rs"
  $12 = Math_imul($8, $11)|0; //@line 232 "/checkout/src/liballoc/raw_vec.rs"
  $size = $12; //@line 232 "/checkout/src/liballoc/raw_vec.rs"
  $13 = $size; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  $14 = $align; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  __ZN5alloc9allocator6Layout25from_size_align_unchecked17h1f4c5097bb0a95f9E($2,$13,$14); //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  $$sreg$field = HEAP32[$2>>2]|0; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  $$sreg$index1 = ((($2)) + 4|0); //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$0>>2] = 1; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  $15 = ((($0)) + 4|0); //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$15>>2] = $$sreg$field; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  $16 = ((($15)) + 4|0); //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$16>>2] = $$sreg$field2; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  STACKTOP = sp;return; //@line 236 "/checkout/src/liballoc/raw_vec.rs"
 }
}
function __ZN82__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__u20_as_u20_core__ops__drop__Drop_GT_4drop17h0c05810c11a1c7a2E($0) {
 $0 = $0|0;
 var $1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 696 "/checkout/src/liballoc/raw_vec.rs"
 __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_14dealloc_buffer17hc1d963bfb7681e9fE($1); //@line 696 "/checkout/src/liballoc/raw_vec.rs"
 STACKTOP = sp;return; //@line 697 "/checkout/src/liballoc/raw_vec.rs"
}
function __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_14dealloc_buffer17hc1d963bfb7681e9fE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_5 = 0, $cond = 0, $elem_size = 0;
 var $layout = 0, $ptr = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $layout = sp + 24|0;
 $_5 = sp + 8|0;
 $self = $0;
 $1 = (__ZN4core3mem7size_of17hd7a6698aeb9187d3E()|0); //@line 683 "/checkout/src/liballoc/raw_vec.rs"
 $elem_size = $1; //@line 683 "/checkout/src/liballoc/raw_vec.rs"
 $2 = $elem_size; //@line 684 "/checkout/src/liballoc/raw_vec.rs"
 $3 = ($2|0)!=(0); //@line 684 "/checkout/src/liballoc/raw_vec.rs"
 if (!($3)) {
  STACKTOP = sp;return; //@line 690 "/checkout/src/liballoc/raw_vec.rs"
 }
 $4 = $self; //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_14current_layout17h334087341b255fe6E($_5,$4); //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $5 = HEAP32[$_5>>2]|0; //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $cond = ($5|0)==(1); //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 if (!($cond)) {
  STACKTOP = sp;return; //@line 690 "/checkout/src/liballoc/raw_vec.rs"
 }
 $6 = ((($_5)) + 4|0); //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $7 = HEAP32[$6>>2]|0; //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $8 = ((($6)) + 4|0); //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $9 = HEAP32[$8>>2]|0; //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$layout>>2] = $7; //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $10 = ((($layout)) + 4|0); //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$10>>2] = $9; //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $11 = $self; //@line 686 "/checkout/src/liballoc/raw_vec.rs"
 $12 = (__ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_3ptr17hc248a9eac2afce31E($11)|0); //@line 686 "/checkout/src/liballoc/raw_vec.rs"
 $ptr = $12; //@line 686 "/checkout/src/liballoc/raw_vec.rs"
 $13 = $self; //@line 687 "/checkout/src/liballoc/raw_vec.rs"
 $14 = $ptr; //@line 687 "/checkout/src/liballoc/raw_vec.rs"
 $15 = HEAP32[$layout>>2]|0; //@line 687 "/checkout/src/liballoc/raw_vec.rs"
 $16 = ((($layout)) + 4|0); //@line 687 "/checkout/src/liballoc/raw_vec.rs"
 $17 = HEAP32[$16>>2]|0; //@line 687 "/checkout/src/liballoc/raw_vec.rs"
 __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_7dealloc17h10f2588a340aefeeE($13,$14,$15,$17); //@line 687 "/checkout/src/liballoc/raw_vec.rs"
 STACKTOP = sp;return; //@line 690 "/checkout/src/liballoc/raw_vec.rs"
}
function __ZN82__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__u20_as_u20_core__ops__drop__Drop_GT_4drop17h4071bf09d3d3d3b5E($0) {
 $0 = $0|0;
 var $1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 696 "/checkout/src/liballoc/raw_vec.rs"
 __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_14dealloc_buffer17hbc607facad501d6aE($1); //@line 696 "/checkout/src/liballoc/raw_vec.rs"
 STACKTOP = sp;return; //@line 697 "/checkout/src/liballoc/raw_vec.rs"
}
function __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_14dealloc_buffer17hbc607facad501d6aE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_5 = 0, $cond = 0, $elem_size = 0;
 var $layout = 0, $ptr = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $layout = sp + 24|0;
 $_5 = sp + 8|0;
 $self = $0;
 $1 = (__ZN4core3mem7size_of17h1975c8c10bebb793E()|0); //@line 683 "/checkout/src/liballoc/raw_vec.rs"
 $elem_size = $1; //@line 683 "/checkout/src/liballoc/raw_vec.rs"
 $2 = $elem_size; //@line 684 "/checkout/src/liballoc/raw_vec.rs"
 $3 = ($2|0)!=(0); //@line 684 "/checkout/src/liballoc/raw_vec.rs"
 if (!($3)) {
  STACKTOP = sp;return; //@line 690 "/checkout/src/liballoc/raw_vec.rs"
 }
 $4 = $self; //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_14current_layout17h5094a7f764870a02E($_5,$4); //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $5 = HEAP32[$_5>>2]|0; //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $cond = ($5|0)==(1); //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 if (!($cond)) {
  STACKTOP = sp;return; //@line 690 "/checkout/src/liballoc/raw_vec.rs"
 }
 $6 = ((($_5)) + 4|0); //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $7 = HEAP32[$6>>2]|0; //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $8 = ((($6)) + 4|0); //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $9 = HEAP32[$8>>2]|0; //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$layout>>2] = $7; //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $10 = ((($layout)) + 4|0); //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$10>>2] = $9; //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $11 = $self; //@line 686 "/checkout/src/liballoc/raw_vec.rs"
 $12 = (__ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_3ptr17hea8a32bfd7e3d35eE($11)|0); //@line 686 "/checkout/src/liballoc/raw_vec.rs"
 $ptr = $12; //@line 686 "/checkout/src/liballoc/raw_vec.rs"
 $13 = $self; //@line 687 "/checkout/src/liballoc/raw_vec.rs"
 $14 = $ptr; //@line 687 "/checkout/src/liballoc/raw_vec.rs"
 $15 = HEAP32[$layout>>2]|0; //@line 687 "/checkout/src/liballoc/raw_vec.rs"
 $16 = ((($layout)) + 4|0); //@line 687 "/checkout/src/liballoc/raw_vec.rs"
 $17 = HEAP32[$16>>2]|0; //@line 687 "/checkout/src/liballoc/raw_vec.rs"
 __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_7dealloc17h10f2588a340aefeeE($13,$14,$15,$17); //@line 687 "/checkout/src/liballoc/raw_vec.rs"
 STACKTOP = sp;return; //@line 690 "/checkout/src/liballoc/raw_vec.rs"
}
function __ZN82__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__u20_as_u20_core__ops__drop__Drop_GT_4drop17h455a94d057fc7c8bE($0) {
 $0 = $0|0;
 var $1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 696 "/checkout/src/liballoc/raw_vec.rs"
 __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_14dealloc_buffer17h89f08c97a2b0138aE($1); //@line 696 "/checkout/src/liballoc/raw_vec.rs"
 STACKTOP = sp;return; //@line 697 "/checkout/src/liballoc/raw_vec.rs"
}
function __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_14dealloc_buffer17h89f08c97a2b0138aE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_5 = 0, $cond = 0, $elem_size = 0;
 var $layout = 0, $ptr = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $layout = sp + 24|0;
 $_5 = sp + 8|0;
 $self = $0;
 $1 = (__ZN4core3mem7size_of17h066421ba255ff1ccE()|0); //@line 683 "/checkout/src/liballoc/raw_vec.rs"
 $elem_size = $1; //@line 683 "/checkout/src/liballoc/raw_vec.rs"
 $2 = $elem_size; //@line 684 "/checkout/src/liballoc/raw_vec.rs"
 $3 = ($2|0)!=(0); //@line 684 "/checkout/src/liballoc/raw_vec.rs"
 if (!($3)) {
  STACKTOP = sp;return; //@line 690 "/checkout/src/liballoc/raw_vec.rs"
 }
 $4 = $self; //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_14current_layout17ha63dcdc2f6fe3ef6E($_5,$4); //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $5 = HEAP32[$_5>>2]|0; //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $cond = ($5|0)==(1); //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 if (!($cond)) {
  STACKTOP = sp;return; //@line 690 "/checkout/src/liballoc/raw_vec.rs"
 }
 $6 = ((($_5)) + 4|0); //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $7 = HEAP32[$6>>2]|0; //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $8 = ((($6)) + 4|0); //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $9 = HEAP32[$8>>2]|0; //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$layout>>2] = $7; //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $10 = ((($layout)) + 4|0); //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$10>>2] = $9; //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $11 = $self; //@line 686 "/checkout/src/liballoc/raw_vec.rs"
 $12 = (__ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_3ptr17he70b59a544f416aaE($11)|0); //@line 686 "/checkout/src/liballoc/raw_vec.rs"
 $ptr = $12; //@line 686 "/checkout/src/liballoc/raw_vec.rs"
 $13 = $self; //@line 687 "/checkout/src/liballoc/raw_vec.rs"
 $14 = $ptr; //@line 687 "/checkout/src/liballoc/raw_vec.rs"
 $15 = HEAP32[$layout>>2]|0; //@line 687 "/checkout/src/liballoc/raw_vec.rs"
 $16 = ((($layout)) + 4|0); //@line 687 "/checkout/src/liballoc/raw_vec.rs"
 $17 = HEAP32[$16>>2]|0; //@line 687 "/checkout/src/liballoc/raw_vec.rs"
 __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_7dealloc17h10f2588a340aefeeE($13,$14,$15,$17); //@line 687 "/checkout/src/liballoc/raw_vec.rs"
 STACKTOP = sp;return; //@line 690 "/checkout/src/liballoc/raw_vec.rs"
}
function __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_14current_layout17ha63dcdc2f6fe3ef6E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $align = 0, $self = 0;
 var $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $self = $1;
 $3 = $self; //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $4 = ((($3)) + 4|0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $5 = HEAP32[$4>>2]|0; //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $6 = ($5|0)==(0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 if ($6) {
  HEAP32[$0>>2] = 0; //@line 226 "/checkout/src/liballoc/raw_vec.rs"
  STACKTOP = sp;return; //@line 236 "/checkout/src/liballoc/raw_vec.rs"
 } else {
  $7 = (__ZN4core3mem8align_of17h80f2724461767a36E()|0); //@line 231 "/checkout/src/liballoc/raw_vec.rs"
  $align = $7; //@line 231 "/checkout/src/liballoc/raw_vec.rs"
  $8 = (__ZN4core3mem7size_of17h066421ba255ff1ccE()|0); //@line 232 "/checkout/src/liballoc/raw_vec.rs"
  $9 = $self; //@line 232 "/checkout/src/liballoc/raw_vec.rs"
  $10 = ((($9)) + 4|0); //@line 232 "/checkout/src/liballoc/raw_vec.rs"
  $11 = HEAP32[$10>>2]|0; //@line 232 "/checkout/src/liballoc/raw_vec.rs"
  $12 = Math_imul($8, $11)|0; //@line 232 "/checkout/src/liballoc/raw_vec.rs"
  $size = $12; //@line 232 "/checkout/src/liballoc/raw_vec.rs"
  $13 = $size; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  $14 = $align; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  __ZN5alloc9allocator6Layout25from_size_align_unchecked17h1f4c5097bb0a95f9E($2,$13,$14); //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  $$sreg$field = HEAP32[$2>>2]|0; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  $$sreg$index1 = ((($2)) + 4|0); //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$0>>2] = 1; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  $15 = ((($0)) + 4|0); //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$15>>2] = $$sreg$field; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  $16 = ((($15)) + 4|0); //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$16>>2] = $$sreg$field2; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  STACKTOP = sp;return; //@line 236 "/checkout/src/liballoc/raw_vec.rs"
 }
}
function __ZN82__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__u20_as_u20_core__ops__drop__Drop_GT_4drop17h600cf6cb14ec9a74E($0) {
 $0 = $0|0;
 var $1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 696 "/checkout/src/liballoc/raw_vec.rs"
 __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_14dealloc_buffer17h85af0e47be7b6edcE($1); //@line 696 "/checkout/src/liballoc/raw_vec.rs"
 STACKTOP = sp;return; //@line 697 "/checkout/src/liballoc/raw_vec.rs"
}
function __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_14dealloc_buffer17h85af0e47be7b6edcE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_5 = 0, $cond = 0, $elem_size = 0;
 var $layout = 0, $ptr = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $layout = sp + 24|0;
 $_5 = sp + 8|0;
 $self = $0;
 $1 = (__ZN4core3mem7size_of17hde987414d3fda057E()|0); //@line 683 "/checkout/src/liballoc/raw_vec.rs"
 $elem_size = $1; //@line 683 "/checkout/src/liballoc/raw_vec.rs"
 $2 = $elem_size; //@line 684 "/checkout/src/liballoc/raw_vec.rs"
 $3 = ($2|0)!=(0); //@line 684 "/checkout/src/liballoc/raw_vec.rs"
 if (!($3)) {
  STACKTOP = sp;return; //@line 690 "/checkout/src/liballoc/raw_vec.rs"
 }
 $4 = $self; //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_14current_layout17h03144e3f5f64dba4E($_5,$4); //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $5 = HEAP32[$_5>>2]|0; //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $cond = ($5|0)==(1); //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 if (!($cond)) {
  STACKTOP = sp;return; //@line 690 "/checkout/src/liballoc/raw_vec.rs"
 }
 $6 = ((($_5)) + 4|0); //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $7 = HEAP32[$6>>2]|0; //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $8 = ((($6)) + 4|0); //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $9 = HEAP32[$8>>2]|0; //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$layout>>2] = $7; //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $10 = ((($layout)) + 4|0); //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$10>>2] = $9; //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $11 = $self; //@line 686 "/checkout/src/liballoc/raw_vec.rs"
 $12 = (__ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_3ptr17h55ebe3fe1903b12fE($11)|0); //@line 686 "/checkout/src/liballoc/raw_vec.rs"
 $ptr = $12; //@line 686 "/checkout/src/liballoc/raw_vec.rs"
 $13 = $self; //@line 687 "/checkout/src/liballoc/raw_vec.rs"
 $14 = $ptr; //@line 687 "/checkout/src/liballoc/raw_vec.rs"
 $15 = HEAP32[$layout>>2]|0; //@line 687 "/checkout/src/liballoc/raw_vec.rs"
 $16 = ((($layout)) + 4|0); //@line 687 "/checkout/src/liballoc/raw_vec.rs"
 $17 = HEAP32[$16>>2]|0; //@line 687 "/checkout/src/liballoc/raw_vec.rs"
 __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_7dealloc17h10f2588a340aefeeE($13,$14,$15,$17); //@line 687 "/checkout/src/liballoc/raw_vec.rs"
 STACKTOP = sp;return; //@line 690 "/checkout/src/liballoc/raw_vec.rs"
}
function __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_14current_layout17h03144e3f5f64dba4E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $align = 0, $self = 0;
 var $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $self = $1;
 $3 = $self; //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $4 = ((($3)) + 4|0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $5 = HEAP32[$4>>2]|0; //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $6 = ($5|0)==(0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 if ($6) {
  HEAP32[$0>>2] = 0; //@line 226 "/checkout/src/liballoc/raw_vec.rs"
  STACKTOP = sp;return; //@line 236 "/checkout/src/liballoc/raw_vec.rs"
 } else {
  $7 = (__ZN4core3mem8align_of17h658feaec843c903eE()|0); //@line 231 "/checkout/src/liballoc/raw_vec.rs"
  $align = $7; //@line 231 "/checkout/src/liballoc/raw_vec.rs"
  $8 = (__ZN4core3mem7size_of17hde987414d3fda057E()|0); //@line 232 "/checkout/src/liballoc/raw_vec.rs"
  $9 = $self; //@line 232 "/checkout/src/liballoc/raw_vec.rs"
  $10 = ((($9)) + 4|0); //@line 232 "/checkout/src/liballoc/raw_vec.rs"
  $11 = HEAP32[$10>>2]|0; //@line 232 "/checkout/src/liballoc/raw_vec.rs"
  $12 = Math_imul($8, $11)|0; //@line 232 "/checkout/src/liballoc/raw_vec.rs"
  $size = $12; //@line 232 "/checkout/src/liballoc/raw_vec.rs"
  $13 = $size; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  $14 = $align; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  __ZN5alloc9allocator6Layout25from_size_align_unchecked17h1f4c5097bb0a95f9E($2,$13,$14); //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  $$sreg$field = HEAP32[$2>>2]|0; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  $$sreg$index1 = ((($2)) + 4|0); //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$0>>2] = 1; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  $15 = ((($0)) + 4|0); //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$15>>2] = $$sreg$field; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  $16 = ((($15)) + 4|0); //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$16>>2] = $$sreg$field2; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  STACKTOP = sp;return; //@line 236 "/checkout/src/liballoc/raw_vec.rs"
 }
}
function __ZN82__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__u20_as_u20_core__ops__drop__Drop_GT_4drop17h981ea48916c4a475E($0) {
 $0 = $0|0;
 var $1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 696 "/checkout/src/liballoc/raw_vec.rs"
 __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_14dealloc_buffer17hca4f7763749cf86dE($1); //@line 696 "/checkout/src/liballoc/raw_vec.rs"
 STACKTOP = sp;return; //@line 697 "/checkout/src/liballoc/raw_vec.rs"
}
function __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_14dealloc_buffer17hca4f7763749cf86dE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_5 = 0, $cond = 0, $elem_size = 0;
 var $layout = 0, $ptr = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $layout = sp + 24|0;
 $_5 = sp + 8|0;
 $self = $0;
 $1 = (__ZN4core3mem7size_of17ha6e39ca688c637d2E()|0); //@line 683 "/checkout/src/liballoc/raw_vec.rs"
 $elem_size = $1; //@line 683 "/checkout/src/liballoc/raw_vec.rs"
 $2 = $elem_size; //@line 684 "/checkout/src/liballoc/raw_vec.rs"
 $3 = ($2|0)!=(0); //@line 684 "/checkout/src/liballoc/raw_vec.rs"
 if (!($3)) {
  STACKTOP = sp;return; //@line 690 "/checkout/src/liballoc/raw_vec.rs"
 }
 $4 = $self; //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_14current_layout17h4855849df03e5b59E($_5,$4); //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $5 = HEAP32[$_5>>2]|0; //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $cond = ($5|0)==(1); //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 if (!($cond)) {
  STACKTOP = sp;return; //@line 690 "/checkout/src/liballoc/raw_vec.rs"
 }
 $6 = ((($_5)) + 4|0); //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $7 = HEAP32[$6>>2]|0; //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $8 = ((($6)) + 4|0); //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $9 = HEAP32[$8>>2]|0; //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$layout>>2] = $7; //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $10 = ((($layout)) + 4|0); //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$10>>2] = $9; //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $11 = $self; //@line 686 "/checkout/src/liballoc/raw_vec.rs"
 $12 = (__ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_3ptr17h2f3ec64847fef552E($11)|0); //@line 686 "/checkout/src/liballoc/raw_vec.rs"
 $ptr = $12; //@line 686 "/checkout/src/liballoc/raw_vec.rs"
 $13 = $self; //@line 687 "/checkout/src/liballoc/raw_vec.rs"
 $14 = $ptr; //@line 687 "/checkout/src/liballoc/raw_vec.rs"
 $15 = HEAP32[$layout>>2]|0; //@line 687 "/checkout/src/liballoc/raw_vec.rs"
 $16 = ((($layout)) + 4|0); //@line 687 "/checkout/src/liballoc/raw_vec.rs"
 $17 = HEAP32[$16>>2]|0; //@line 687 "/checkout/src/liballoc/raw_vec.rs"
 __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_7dealloc17h10f2588a340aefeeE($13,$14,$15,$17); //@line 687 "/checkout/src/liballoc/raw_vec.rs"
 STACKTOP = sp;return; //@line 690 "/checkout/src/liballoc/raw_vec.rs"
}
function __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_14current_layout17h4855849df03e5b59E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $align = 0, $self = 0;
 var $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $self = $1;
 $3 = $self; //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $4 = ((($3)) + 4|0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $5 = HEAP32[$4>>2]|0; //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $6 = ($5|0)==(0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 if ($6) {
  HEAP32[$0>>2] = 0; //@line 226 "/checkout/src/liballoc/raw_vec.rs"
  STACKTOP = sp;return; //@line 236 "/checkout/src/liballoc/raw_vec.rs"
 } else {
  $7 = (__ZN4core3mem8align_of17h2c2eaff1a316b960E()|0); //@line 231 "/checkout/src/liballoc/raw_vec.rs"
  $align = $7; //@line 231 "/checkout/src/liballoc/raw_vec.rs"
  $8 = (__ZN4core3mem7size_of17ha6e39ca688c637d2E()|0); //@line 232 "/checkout/src/liballoc/raw_vec.rs"
  $9 = $self; //@line 232 "/checkout/src/liballoc/raw_vec.rs"
  $10 = ((($9)) + 4|0); //@line 232 "/checkout/src/liballoc/raw_vec.rs"
  $11 = HEAP32[$10>>2]|0; //@line 232 "/checkout/src/liballoc/raw_vec.rs"
  $12 = Math_imul($8, $11)|0; //@line 232 "/checkout/src/liballoc/raw_vec.rs"
  $size = $12; //@line 232 "/checkout/src/liballoc/raw_vec.rs"
  $13 = $size; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  $14 = $align; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  __ZN5alloc9allocator6Layout25from_size_align_unchecked17h1f4c5097bb0a95f9E($2,$13,$14); //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  $$sreg$field = HEAP32[$2>>2]|0; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  $$sreg$index1 = ((($2)) + 4|0); //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$0>>2] = 1; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  $15 = ((($0)) + 4|0); //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$15>>2] = $$sreg$field; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  $16 = ((($15)) + 4|0); //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$16>>2] = $$sreg$field2; //@line 233 "/checkout/src/liballoc/raw_vec.rs"
  STACKTOP = sp;return; //@line 236 "/checkout/src/liballoc/raw_vec.rs"
 }
}
function __ZN82__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__u20_as_u20_core__ops__drop__Drop_GT_4drop17ha80ede2c7a82b1dcE($0) {
 $0 = $0|0;
 var $1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 696 "/checkout/src/liballoc/raw_vec.rs"
 __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_14dealloc_buffer17hb52dc8dd3c0a4faaE($1); //@line 696 "/checkout/src/liballoc/raw_vec.rs"
 STACKTOP = sp;return; //@line 697 "/checkout/src/liballoc/raw_vec.rs"
}
function __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_14dealloc_buffer17hb52dc8dd3c0a4faaE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_5 = 0, $cond = 0, $elem_size = 0;
 var $layout = 0, $ptr = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $layout = sp + 24|0;
 $_5 = sp + 8|0;
 $self = $0;
 $1 = (__ZN4core3mem7size_of17h809a29d4399807a6E()|0); //@line 683 "/checkout/src/liballoc/raw_vec.rs"
 $elem_size = $1; //@line 683 "/checkout/src/liballoc/raw_vec.rs"
 $2 = $elem_size; //@line 684 "/checkout/src/liballoc/raw_vec.rs"
 $3 = ($2|0)!=(0); //@line 684 "/checkout/src/liballoc/raw_vec.rs"
 if (!($3)) {
  STACKTOP = sp;return; //@line 690 "/checkout/src/liballoc/raw_vec.rs"
 }
 $4 = $self; //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_14current_layout17h3cd945fef7e785f3E($_5,$4); //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $5 = HEAP32[$_5>>2]|0; //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $cond = ($5|0)==(1); //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 if (!($cond)) {
  STACKTOP = sp;return; //@line 690 "/checkout/src/liballoc/raw_vec.rs"
 }
 $6 = ((($_5)) + 4|0); //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $7 = HEAP32[$6>>2]|0; //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $8 = ((($6)) + 4|0); //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $9 = HEAP32[$8>>2]|0; //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$layout>>2] = $7; //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $10 = ((($layout)) + 4|0); //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$10>>2] = $9; //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $11 = $self; //@line 686 "/checkout/src/liballoc/raw_vec.rs"
 $12 = (__ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_3ptr17hb27cde95f398fcc7E($11)|0); //@line 686 "/checkout/src/liballoc/raw_vec.rs"
 $ptr = $12; //@line 686 "/checkout/src/liballoc/raw_vec.rs"
 $13 = $self; //@line 687 "/checkout/src/liballoc/raw_vec.rs"
 $14 = $ptr; //@line 687 "/checkout/src/liballoc/raw_vec.rs"
 $15 = HEAP32[$layout>>2]|0; //@line 687 "/checkout/src/liballoc/raw_vec.rs"
 $16 = ((($layout)) + 4|0); //@line 687 "/checkout/src/liballoc/raw_vec.rs"
 $17 = HEAP32[$16>>2]|0; //@line 687 "/checkout/src/liballoc/raw_vec.rs"
 __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_7dealloc17h10f2588a340aefeeE($13,$14,$15,$17); //@line 687 "/checkout/src/liballoc/raw_vec.rs"
 STACKTOP = sp;return; //@line 690 "/checkout/src/liballoc/raw_vec.rs"
}
function __ZN82__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__u20_as_u20_core__ops__drop__Drop_GT_4drop17hfba2afe8d2e964dfE($0) {
 $0 = $0|0;
 var $1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 696 "/checkout/src/liballoc/raw_vec.rs"
 __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_14dealloc_buffer17h1e00051cec68b7c1E($1); //@line 696 "/checkout/src/liballoc/raw_vec.rs"
 STACKTOP = sp;return; //@line 697 "/checkout/src/liballoc/raw_vec.rs"
}
function __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_14dealloc_buffer17h1e00051cec68b7c1E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_5 = 0, $cond = 0, $elem_size = 0;
 var $layout = 0, $ptr = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $layout = sp + 24|0;
 $_5 = sp + 8|0;
 $self = $0;
 $1 = (__ZN4core3mem7size_of17h34f2235168088e08E()|0); //@line 683 "/checkout/src/liballoc/raw_vec.rs"
 $elem_size = $1; //@line 683 "/checkout/src/liballoc/raw_vec.rs"
 $2 = $elem_size; //@line 684 "/checkout/src/liballoc/raw_vec.rs"
 $3 = ($2|0)!=(0); //@line 684 "/checkout/src/liballoc/raw_vec.rs"
 if (!($3)) {
  STACKTOP = sp;return; //@line 690 "/checkout/src/liballoc/raw_vec.rs"
 }
 $4 = $self; //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_14current_layout17hbcae1ab8165ee399E($_5,$4); //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $5 = HEAP32[$_5>>2]|0; //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $cond = ($5|0)==(1); //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 if (!($cond)) {
  STACKTOP = sp;return; //@line 690 "/checkout/src/liballoc/raw_vec.rs"
 }
 $6 = ((($_5)) + 4|0); //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $7 = HEAP32[$6>>2]|0; //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $8 = ((($6)) + 4|0); //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $9 = HEAP32[$8>>2]|0; //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$layout>>2] = $7; //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $10 = ((($layout)) + 4|0); //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$10>>2] = $9; //@line 685 "/checkout/src/liballoc/raw_vec.rs"
 $11 = $self; //@line 686 "/checkout/src/liballoc/raw_vec.rs"
 $12 = (__ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_3ptr17hcec96c2ecad113e0E($11)|0); //@line 686 "/checkout/src/liballoc/raw_vec.rs"
 $ptr = $12; //@line 686 "/checkout/src/liballoc/raw_vec.rs"
 $13 = $self; //@line 687 "/checkout/src/liballoc/raw_vec.rs"
 $14 = $ptr; //@line 687 "/checkout/src/liballoc/raw_vec.rs"
 $15 = HEAP32[$layout>>2]|0; //@line 687 "/checkout/src/liballoc/raw_vec.rs"
 $16 = ((($layout)) + 4|0); //@line 687 "/checkout/src/liballoc/raw_vec.rs"
 $17 = HEAP32[$16>>2]|0; //@line 687 "/checkout/src/liballoc/raw_vec.rs"
 __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_7dealloc17h10f2588a340aefeeE($13,$14,$15,$17); //@line 687 "/checkout/src/liballoc/raw_vec.rs"
 STACKTOP = sp;return; //@line 690 "/checkout/src/liballoc/raw_vec.rs"
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h19e9178258e47697E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $f = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $f = $1;
 $2 = $self; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$2>>2]|0; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $4 = $f; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $5 = (__ZN61__LT_rustv__window__WinCursor_u20_as_u20_core__fmt__Debug_GT_3fmt17hc08bb1ec643d10d3E($3,$4)|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return ($5|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN61__LT_rustv__window__WinCursor_u20_as_u20_core__fmt__Debug_GT_3fmt17hc08bb1ec643d10d3E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_20 = 0;
 var $_28 = 0, $_36 = 0, $_44 = 0, $_52 = 0, $_60 = 0, $__arg_0 = 0, $__self_0_0 = 0, $__self_0_1 = 0, $__self_0_2 = 0, $__self_0_3 = 0, $__self_0_4 = 0, $__self_0_5 = 0, $builder = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_60 = sp + 60|0;
 $_52 = sp + 56|0;
 $_44 = sp + 52|0;
 $_36 = sp + 48|0;
 $_28 = sp + 44|0;
 $_20 = sp + 40|0;
 $builder = sp + 32|0;
 $self = $0;
 $__arg_0 = $1;
 $2 = $self; //@line 776 "window.rs"
 $__self_0_0 = $2; //@line 776 "window.rs"
 $3 = $self; //@line 777 "window.rs"
 $4 = ((($3)) + 16|0); //@line 777 "window.rs"
 $__self_0_1 = $4; //@line 777 "window.rs"
 $5 = $self; //@line 778 "window.rs"
 $6 = ((($5)) + 20|0); //@line 778 "window.rs"
 $__self_0_2 = $6; //@line 778 "window.rs"
 $7 = $self; //@line 779 "window.rs"
 $8 = ((($7)) + 32|0); //@line 779 "window.rs"
 $__self_0_3 = $8; //@line 779 "window.rs"
 $9 = $self; //@line 780 "window.rs"
 $10 = ((($9)) + 40|0); //@line 780 "window.rs"
 $__self_0_4 = $10; //@line 780 "window.rs"
 $11 = $self; //@line 781 "window.rs"
 $12 = ((($11)) + 48|0); //@line 781 "window.rs"
 $__self_0_5 = $12; //@line 781 "window.rs"
 $13 = $__arg_0; //@line 774 "window.rs"
 __ZN4core3fmt9Formatter12debug_struct17h2d24fc5dad9395cdE($builder,$13,13825,9); //@line 774 "window.rs"
 $14 = $__self_0_0; //@line 776 "window.rs"
 HEAP32[$_20>>2] = $14; //@line 776 "window.rs"
 (__ZN4core3fmt8builders11DebugStruct5field17h5f57368d80e04997E($builder,13834,4,$_20,3512)|0); //@line 774 "window.rs"
 $15 = $__self_0_1; //@line 777 "window.rs"
 HEAP32[$_28>>2] = $15; //@line 777 "window.rs"
 (__ZN4core3fmt8builders11DebugStruct5field17h5f57368d80e04997E($builder,13838,12,$_28,5068)|0); //@line 774 "window.rs"
 $16 = $__self_0_2; //@line 778 "window.rs"
 HEAP32[$_36>>2] = $16; //@line 778 "window.rs"
 (__ZN4core3fmt8builders11DebugStruct5field17h5f57368d80e04997E($builder,13850,10,$_36,3528)|0); //@line 774 "window.rs"
 $17 = $__self_0_3; //@line 779 "window.rs"
 HEAP32[$_44>>2] = $17; //@line 779 "window.rs"
 (__ZN4core3fmt8builders11DebugStruct5field17h5f57368d80e04997E($builder,13860,7,$_44,7808)|0); //@line 774 "window.rs"
 $18 = $__self_0_4; //@line 780 "window.rs"
 HEAP32[$_52>>2] = $18; //@line 780 "window.rs"
 (__ZN4core3fmt8builders11DebugStruct5field17h5f57368d80e04997E($builder,13867,3,$_52,7808)|0); //@line 774 "window.rs"
 $19 = $__self_0_5; //@line 781 "window.rs"
 HEAP32[$_60>>2] = $19; //@line 781 "window.rs"
 (__ZN4core3fmt8builders11DebugStruct5field17h5f57368d80e04997E($builder,13870,1,$_60,5068)|0); //@line 774 "window.rs"
 $20 = (__ZN4core3fmt8builders11DebugStruct6finish17h63c8c54de379106dE($builder)|0); //@line 774 "window.rs"
 STACKTOP = sp;return ($20|0); //@line 774 "window.rs"
}
function __ZN5rustv6window16get_aspect_ratio17hec5c79d4b08fa3aaE() {
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[877]; //@line 460 "window.rs"
 return (+$0); //@line 460 "window.rs"
}
function __ZN5rustv6window13get_modifiers17hd0d23e34e408f2bdE() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_11 = 0, $_16 = 0, $_6 = 0, $modk = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = (_glutGetModifiers()|0); //@line 469 "window.rs"
 $modk = $0; //@line 469 "window.rs"
 $1 = $modk; //@line 471 "window.rs"
 $2 = HEAP32[965]|0; //@line 471 "window.rs"
 $3 = $1 & $2; //@line 471 "window.rs"
 $4 = ($3|0)!=(0); //@line 471 "window.rs"
 if ($4) {
  $_6 = 2; //@line 471 "window.rs"
 } else {
  $_6 = 0; //@line 471 "window.rs"
 }
 $5 = $_6; //@line 470 "window.rs"
 $6 = 0 | $5; //@line 470 "window.rs"
 $7 = $modk; //@line 472 "window.rs"
 $8 = HEAP32[2418]|0; //@line 472 "window.rs"
 $9 = $7 & $8; //@line 472 "window.rs"
 $10 = ($9|0)!=(0); //@line 472 "window.rs"
 if ($10) {
  $_11 = 1; //@line 472 "window.rs"
 } else {
  $_11 = 0; //@line 472 "window.rs"
 }
 $11 = $_11; //@line 470 "window.rs"
 $12 = $6 | $11; //@line 470 "window.rs"
 $13 = $modk; //@line 473 "window.rs"
 $14 = HEAP32[966]|0; //@line 473 "window.rs"
 $15 = $13 & $14; //@line 473 "window.rs"
 $16 = ($15|0)!=(0); //@line 473 "window.rs"
 if ($16) {
  $_16 = 4; //@line 473 "window.rs"
  $17 = $_16; //@line 470 "window.rs"
  $18 = $12 | $17; //@line 470 "window.rs"
  $ret = $18; //@line 470 "window.rs"
  $19 = $ret; //@line 475 "window.rs"
  STACKTOP = sp;return ($19|0); //@line 476 "window.rs"
 } else {
  $_16 = 0; //@line 473 "window.rs"
  $17 = $_16; //@line 470 "window.rs"
  $18 = $12 | $17; //@line 470 "window.rs"
  $ret = $18; //@line 470 "window.rs"
  $19 = $ret; //@line 475 "window.rs"
  STACKTOP = sp;return ($19|0); //@line 476 "window.rs"
 }
 return (0)|0;
}
function __ZN5rustv6window16xlat_special_key17h80e2458e181bcf1eE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $_0 = 0, $skey = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $skey = $0;
 $1 = $skey; //@line 479 "window.rs"
 do {
  switch ($1|0) {
  case 100:  {
   $_0 = 1114124; //@line 479 "window.rs"
   break;
  }
  case 102:  {
   $_0 = 1114127; //@line 480 "window.rs"
   break;
  }
  case 101:  {
   $_0 = 1114125; //@line 481 "window.rs"
   break;
  }
  case 103:  {
   $_0 = 1114126; //@line 482 "window.rs"
   break;
  }
  case 108:  {
   $_0 = 1114132; //@line 483 "window.rs"
   break;
  }
  case 106:  {
   $_0 = 1114130; //@line 484 "window.rs"
   break;
  }
  case 107:  {
   $_0 = 1114131; //@line 485 "window.rs"
   break;
  }
  case 104:  {
   $_0 = 1114128; //@line 486 "window.rs"
   break;
  }
  case 105:  {
   $_0 = 1114129; //@line 487 "window.rs"
   break;
  }
  case 1:  {
   $_0 = 1114112; //@line 488 "window.rs"
   break;
  }
  case 2:  {
   $_0 = 1114113; //@line 489 "window.rs"
   break;
  }
  case 3:  {
   $_0 = 1114114; //@line 490 "window.rs"
   break;
  }
  case 4:  {
   $_0 = 1114115; //@line 491 "window.rs"
   break;
  }
  case 5:  {
   $_0 = 1114116; //@line 492 "window.rs"
   break;
  }
  case 6:  {
   $_0 = 1114117; //@line 493 "window.rs"
   break;
  }
  case 7:  {
   $_0 = 1114118; //@line 494 "window.rs"
   break;
  }
  case 8:  {
   $_0 = 1114119; //@line 495 "window.rs"
   break;
  }
  case 9:  {
   $_0 = 1114120; //@line 496 "window.rs"
   break;
  }
  case 10:  {
   $_0 = 1114121; //@line 497 "window.rs"
   break;
  }
  case 11:  {
   $_0 = 1114122; //@line 498 "window.rs"
   break;
  }
  case 12:  {
   $_0 = 1114123; //@line 499 "window.rs"
   break;
  }
  default: {
   $_0 = 0; //@line 501 "window.rs"
  }
  }
 } while(0);
 $2 = $_0; //@line 503 "window.rs"
 STACKTOP = sp;return ($2|0); //@line 503 "window.rs"
}
function __ZN5rustv6window10drag_mdist17hc79ccb4443dd33a3E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$arith = 0, $$arith11 = 0, $$arith2 = 0, $$ispos = 0, $$ispos16 = 0, $$ispos7 = 0, $$negcheck = 0, $$negcheck15 = 0, $$negcheck6 = 0, $$negtemp = 0, $$negtemp13 = 0, $$negtemp4 = 0, $$poscheck = 0, $$poscheck14 = 0, $$poscheck5 = 0, $$postemp = 0, $$postemp12 = 0, $$postemp3 = 0, $$select = 0, $$select17 = 0;
 var $$select8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $dx = 0, $dy = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $b = sp + 8|0;
 $a = sp;
 HEAP32[$a>>2] = $0;
 $4 = ((($a)) + 4|0);
 HEAP32[$4>>2] = $1;
 HEAP32[$b>>2] = $2;
 $5 = ((($b)) + 4|0);
 HEAP32[$5>>2] = $3;
 $6 = HEAP32[$b>>2]|0; //@line 654 "window.rs"
 $7 = HEAP32[$a>>2]|0; //@line 654 "window.rs"
 $$arith11 = (($6) - ($7))|0; //@line 654 "window.rs"
 $$postemp12 = (($6) + -2147483647)|0; //@line 654 "window.rs"
 $$negtemp13 = (($6) + -2147483648)|0; //@line 654 "window.rs"
 $$poscheck14 = ($$arith11|0)<($$postemp12|0); //@line 654 "window.rs"
 $$negcheck15 = ($$arith11|0)>($$negtemp13|0); //@line 654 "window.rs"
 $$ispos16 = ($6|0)>=(0); //@line 654 "window.rs"
 $$select17 = $$ispos16 ? $$poscheck14 : $$negcheck15; //@line 654 "window.rs"
 $8 = $$select17; //@line 654 "window.rs"
 if ($8) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(3544); //@line 654 "window.rs"
  // unreachable; //@line 654 "window.rs"
 }
 $dx = $$arith11; //@line 654 "window.rs"
 $9 = ((($b)) + 4|0); //@line 655 "window.rs"
 $10 = HEAP32[$9>>2]|0; //@line 655 "window.rs"
 $11 = ((($a)) + 4|0); //@line 655 "window.rs"
 $12 = HEAP32[$11>>2]|0; //@line 655 "window.rs"
 $$arith2 = (($10) - ($12))|0; //@line 655 "window.rs"
 $$postemp3 = (($10) + -2147483647)|0; //@line 655 "window.rs"
 $$negtemp4 = (($10) + -2147483648)|0; //@line 655 "window.rs"
 $$poscheck5 = ($$arith2|0)<($$postemp3|0); //@line 655 "window.rs"
 $$negcheck6 = ($$arith2|0)>($$negtemp4|0); //@line 655 "window.rs"
 $$ispos7 = ($10|0)>=(0); //@line 655 "window.rs"
 $$select8 = $$ispos7 ? $$poscheck5 : $$negcheck6; //@line 655 "window.rs"
 $13 = $$select8; //@line 655 "window.rs"
 if ($13) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(3568); //@line 655 "window.rs"
  // unreachable; //@line 655 "window.rs"
 }
 $dy = $$arith2; //@line 655 "window.rs"
 $14 = $dx; //@line 656 "window.rs"
 $15 = (__ZN4core3num21__LT_impl_u20_i32_GT_3abs17h936f61cd3229beccE($14)|0); //@line 656 "window.rs"
 $16 = $dy; //@line 656 "window.rs"
 $17 = (__ZN4core3num21__LT_impl_u20_i32_GT_3abs17h936f61cd3229beccE($16)|0); //@line 656 "window.rs"
 $$arith = (($15) + ($17))|0; //@line 656 "window.rs"
 $$postemp = (($15) + -2147483648)|0; //@line 656 "window.rs"
 $$negtemp = (($15) + 2147483647)|0; //@line 656 "window.rs"
 $$poscheck = ($$arith|0)<($$postemp|0); //@line 656 "window.rs"
 $$negcheck = ($$arith|0)>($$negtemp|0); //@line 656 "window.rs"
 $$ispos = ($15|0)>=(0); //@line 656 "window.rs"
 $$select = $$ispos ? $$poscheck : $$negcheck; //@line 656 "window.rs"
 $18 = $$select; //@line 656 "window.rs"
 if ($18) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(3592); //@line 656 "window.rs"
  // unreachable; //@line 656 "window.rs"
 } else {
  STACKTOP = sp;return ($$arith|0); //@line 657 "window.rs"
 }
 return (0)|0;
}
function __ZN5rustv6window12to_screenpos17h4d298ea930c2bb34E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0.0, $$sreg$field2 = 0.0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $retVal$index4 = 0, $s = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $s = sp + 8|0;
 HEAP32[$s>>2] = $0;
 $3 = ((($s)) + 4|0);
 HEAP32[$3>>2] = $1;
 $4 = HEAP32[$s>>2]|0; //@line 666 "window.rs"
 $5 = HEAP32[873]|0; //@line 666 "window.rs"
 $6 = (+__ZN5rustv6window6divf3217h9a8d4ebe50350d91E($4,$5)); //@line 666 "window.rs"
 $7 = $6 * 2.0; //@line 666 "window.rs"
 $8 = $7 - 1.0; //@line 666 "window.rs"
 $9 = ((($s)) + 4|0); //@line 667 "window.rs"
 $10 = HEAP32[$9>>2]|0; //@line 667 "window.rs"
 $11 = HEAP32[(3496)>>2]|0; //@line 667 "window.rs"
 $12 = (+__ZN5rustv6window6divf3217h9a8d4ebe50350d91E($10,$11)); //@line 667 "window.rs"
 $13 = $12 * 2.0; //@line 667 "window.rs"
 $14 = $13 - 1.0; //@line 667 "window.rs"
 $15 = -$14; //@line 667 "window.rs"
 __ZN5rustv3r3d6vector4Vec217h13338ae8e54872e4E($2,$8,$15); //@line 666 "window.rs"
 $$sreg$field = +HEAPF32[$2>>2]; //@line 666 "window.rs"
 $$sreg$index1 = ((($2)) + 4|0); //@line 666 "window.rs"
 $$sreg$field2 = +HEAPF32[$$sreg$index1>>2]; //@line 666 "window.rs"
 HEAPF32[$retVal>>2] = $$sreg$field; //@line 669 "window.rs"
 $retVal$index4 = ((($retVal)) + 4|0); //@line 669 "window.rs"
 HEAPF32[$retVal$index4>>2] = $$sreg$field2; //@line 669 "window.rs"
 STACKTOP = sp;return; //@line 669 "window.rs"
}
function __ZN5rustv6window6divf3217h9a8d4ebe50350d91E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $a = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $a = $0;
 $b = $1;
 $2 = $a; //@line 663 "window.rs"
 $3 = (+($2|0)); //@line 663 "window.rs"
 $4 = $b; //@line 663 "window.rs"
 $5 = (+($4|0)); //@line 663 "window.rs"
 $6 = $3 / $5; //@line 663 "window.rs"
 STACKTOP = sp;return (+$6); //@line 663 "window.rs"
}
function __ZN5rustv6window13set_mouse_pos17hf79519c5acd775fbE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x = $0;
 $y = $1;
 $2 = HEAP32[7765]|0; //@line 670 "window.rs"
 $3 = HEAP32[(31064)>>2]|0; //@line 670 "window.rs"
 HEAP32[7767] = $2; //@line 670 "window.rs"
 HEAP32[(31072)>>2] = $3; //@line 670 "window.rs"
 $4 = $x; //@line 670 "window.rs"
 $5 = $y; //@line 670 "window.rs"
 HEAP32[7765] = $4; //@line 670 "window.rs"
 HEAP32[(31064)>>2] = $5; //@line 670 "window.rs"
 STACKTOP = sp;return; //@line 670 "window.rs"
}
function __ZN5rustv6window14get_mouse_vpos17h4b4bafae429f8560E($retVal) {
 $retVal = $retVal|0;
 var $$sreg$field = 0.0, $$sreg$field2 = 0.0, $$sreg$index1 = 0, $0 = 0, $1 = 0, $2 = 0, $retVal$index4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp; //@line 671 "window.rs"
 $1 = HEAP32[7765]|0; //@line 671 "window.rs"
 $2 = HEAP32[(31064)>>2]|0; //@line 671 "window.rs"
 __ZN5rustv6window12to_screenpos17h4d298ea930c2bb34E($0,$1,$2); //@line 671 "window.rs"
 $$sreg$field = +HEAPF32[$0>>2]; //@line 671 "window.rs"
 $$sreg$index1 = ((($0)) + 4|0); //@line 671 "window.rs"
 $$sreg$field2 = +HEAPF32[$$sreg$index1>>2]; //@line 671 "window.rs"
 HEAPF32[$retVal>>2] = $$sreg$field; //@line 671 "window.rs"
 $retVal$index4 = ((($retVal)) + 4|0); //@line 671 "window.rs"
 HEAPF32[$retVal$index4>>2] = $$sreg$field2; //@line 671 "window.rs"
 STACKTOP = sp;return; //@line 671 "window.rs"
}
function __ZN5rustv6window15get_mouse_ovpos17h6dc6f712cac0c3f4E($retVal) {
 $retVal = $retVal|0;
 var $$sreg$field = 0.0, $$sreg$field2 = 0.0, $$sreg$index1 = 0, $0 = 0, $1 = 0, $2 = 0, $retVal$index4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp; //@line 672 "window.rs"
 $1 = HEAP32[7767]|0; //@line 672 "window.rs"
 $2 = HEAP32[(31072)>>2]|0; //@line 672 "window.rs"
 __ZN5rustv6window12to_screenpos17h4d298ea930c2bb34E($0,$1,$2); //@line 672 "window.rs"
 $$sreg$field = +HEAPF32[$0>>2]; //@line 672 "window.rs"
 $$sreg$index1 = ((($0)) + 4|0); //@line 672 "window.rs"
 $$sreg$field2 = +HEAPF32[$$sreg$index1>>2]; //@line 672 "window.rs"
 HEAPF32[$retVal>>2] = $$sreg$field; //@line 672 "window.rs"
 $retVal$index4 = ((($retVal)) + 4|0); //@line 672 "window.rs"
 HEAPF32[$retVal$index4>>2] = $$sreg$field2; //@line 672 "window.rs"
 STACKTOP = sp;return; //@line 672 "window.rs"
}
function __ZN5rustv6window14get_drag_start17h5e85640b6e39274cE($0) {
 $0 = $0|0;
 var $$sreg$field = 0.0, $$sreg$field2 = 0.0, $$sreg$index1 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $ipos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $ipos = sp + 8|0;
 $2 = HEAP32[7770]|0; //@line 675 "window.rs"
 $cond = ($2|0)==(1); //@line 675 "window.rs"
 if ($cond) {
  $3 = HEAP32[(31084)>>2]|0; //@line 675 "window.rs"
  $4 = HEAP32[(31088)>>2]|0; //@line 675 "window.rs"
  HEAP32[$ipos>>2] = $3; //@line 675 "window.rs"
  $5 = ((($ipos)) + 4|0); //@line 675 "window.rs"
  HEAP32[$5>>2] = $4; //@line 675 "window.rs"
  $6 = HEAP32[$ipos>>2]|0; //@line 675 "window.rs"
  $7 = ((($ipos)) + 4|0); //@line 675 "window.rs"
  $8 = HEAP32[$7>>2]|0; //@line 675 "window.rs"
  __ZN5rustv6window12to_screenpos17h4d298ea930c2bb34E($1,$6,$8); //@line 675 "window.rs"
  $$sreg$field = +HEAPF32[$1>>2]; //@line 675 "window.rs"
  $$sreg$index1 = ((($1)) + 4|0); //@line 675 "window.rs"
  $$sreg$field2 = +HEAPF32[$$sreg$index1>>2]; //@line 675 "window.rs"
  HEAP32[$0>>2] = 1; //@line 675 "window.rs"
  $9 = ((($0)) + 4|0); //@line 675 "window.rs"
  HEAPF32[$9>>2] = $$sreg$field; //@line 675 "window.rs"
  $10 = ((($9)) + 4|0); //@line 675 "window.rs"
  HEAPF32[$10>>2] = $$sreg$field2; //@line 675 "window.rs"
  STACKTOP = sp;return; //@line 676 "window.rs"
 } else {
  HEAP32[$0>>2] = 0; //@line 675 "window.rs"
  STACKTOP = sp;return; //@line 676 "window.rs"
 }
}
function __ZN5rustv6window10push_event17hdc373bf9329b1a08E($e) {
 $e = $e|0;
 var $$arith = 0, $$ispos = 0, $$negcheck = 0, $$negtemp = 0, $$poscheck = 0, $$postemp = 0, $$select = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_12 = 0, $_19 = 0;
 var $next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_19 = sp + 32|0; //@line 1 "window.rs"
 $_12 = sp + 4|0; //@line 1 "window.rs"
 $0 = HEAP32[7779]|0; //@line 679 "window.rs"
 $$arith = (($0) + 1)|0; //@line 679 "window.rs"
 $$postemp = (($0) + -2147483648)|0; //@line 679 "window.rs"
 $$negtemp = (($0) + 2147483647)|0; //@line 679 "window.rs"
 $$poscheck = ($$arith|0)<($$postemp|0); //@line 679 "window.rs"
 $$negcheck = ($$arith|0)>($$negtemp|0); //@line 679 "window.rs"
 $$ispos = ($0|0)>=(0); //@line 679 "window.rs"
 $$select = $$ispos ? $$poscheck : $$negcheck; //@line 679 "window.rs"
 $1 = $$select; //@line 679 "window.rs"
 if ($1) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(3624); //@line 679 "window.rs"
  // unreachable; //@line 679 "window.rs"
 }
 $2 = $$arith & 255; //@line 679 "window.rs"
 $next = $2; //@line 679 "window.rs"
 $3 = $next; //@line 680 "window.rs"
 $4 = HEAP32[7780]|0; //@line 680 "window.rs"
 $5 = ($3|0)!=($4|0); //@line 680 "window.rs"
 if (!($5)) {
  __ZN4core3fmt9Arguments6new_v117h1cedc7e123bae470E($_19,3616,1,38620,0); //@line 684 "window.rs"
  __ZN3std2io5stdio6_print17h5e38a8ff46cfb3e1E($_19); //@line 684 "window.rs"
  STACKTOP = sp;return; //@line 687 "window.rs"
 }
 ;HEAP32[$_12>>2]=HEAP32[$e>>2]|0;HEAP32[$_12+4>>2]=HEAP32[$e+4>>2]|0;HEAP32[$_12+8>>2]=HEAP32[$e+8>>2]|0;HEAP32[$_12+12>>2]=HEAP32[$e+12>>2]|0;HEAP32[$_12+16>>2]=HEAP32[$e+16>>2]|0;HEAP32[$_12+20>>2]=HEAP32[$e+20>>2]|0;HEAP32[$_12+24>>2]=HEAP32[$e+24>>2]|0; //@line 681 "window.rs"
 $6 = HEAP32[7779]|0; //@line 681 "window.rs"
 $7 = ($6>>>0)<(256); //@line 681 "window.rs"
 $8 = $7; //@line 681 "window.rs"
 if (!($8)) {
  __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(3648,$6,256); //@line 681 "window.rs"
  // unreachable; //@line 681 "window.rs"
 }
 $9 = (31124 + (($6*28)|0)|0); //@line 681 "window.rs"
 ;HEAP32[$9>>2]=HEAP32[$_12>>2]|0;HEAP32[$9+4>>2]=HEAP32[$_12+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$_12+8>>2]|0;HEAP32[$9+12>>2]=HEAP32[$_12+12>>2]|0;HEAP32[$9+16>>2]=HEAP32[$_12+16>>2]|0;HEAP32[$9+20>>2]=HEAP32[$_12+20>>2]|0;HEAP32[$9+24>>2]=HEAP32[$_12+24>>2]|0; //@line 681 "window.rs"
 $10 = $next; //@line 682 "window.rs"
 HEAP32[7779] = $10; //@line 682 "window.rs"
 STACKTOP = sp;return; //@line 687 "window.rs"
}
function __ZN5rustv6window4mkwc17h76e0112b41ab3701E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sreg$field = 0.0, $$sreg$field3 = 0.0, $$sreg$index2 = 0, $$sreg1$field = 0.0, $$sreg1$field6 = 0.0, $$sreg1$index5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $_3 = 0;
 var $_9 = 0, $p = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp + 16|0;
 $4 = sp;
 $_9 = sp + 48|0;
 $_3 = sp + 32|0;
 $r = $1;
 $p = $2;
 $5 = $r; //@line 785 "window.rs"
 __ZN73__LT_rustv__r3d__geom__Extents_LT_T_GT__u20_as_u20_core__clone__Clone_GT_5clone17h687e78722686f5f7E($_3,$5); //@line 785 "window.rs"
 $6 = $p; //@line 785 "window.rs"
 __ZN81__LT_rustv__r3d__vector__Vec2_LT_X_C__u20_Y_GT__u20_as_u20_core__clone__Clone_GT_5clone17h0f20656a3ab1ae05E($4,$6); //@line 785 "window.rs"
 $$sreg$field = +HEAPF32[$4>>2]; //@line 785 "window.rs"
 $$sreg$index2 = ((($4)) + 4|0); //@line 785 "window.rs"
 $$sreg$field3 = +HEAPF32[$$sreg$index2>>2]; //@line 785 "window.rs"
 $7 = $p; //@line 785 "window.rs"
 __ZN81__LT_rustv__r3d__vector__Vec2_LT_X_C__u20_Y_GT__u20_as_u20_core__clone__Clone_GT_5clone17h0f20656a3ab1ae05E($3,$7); //@line 785 "window.rs"
 $$sreg1$field = +HEAPF32[$3>>2]; //@line 785 "window.rs"
 $$sreg1$index5 = ((($3)) + 4|0); //@line 785 "window.rs"
 $$sreg1$field6 = +HEAPF32[$$sreg1$index5>>2]; //@line 785 "window.rs"
 HEAP32[$_9>>2] = 0; //@line 785 "window.rs"
 $8 = (+__ZN5rustv6window16get_aspect_ratio17hec5c79d4b08fa3aaE()); //@line 785 "window.rs"
 ;HEAP32[$0>>2]=HEAP32[$_3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_3+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_3+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$_3+12>>2]|0; //@line 784 "window.rs"
 $9 = ((($0)) + 16|0); //@line 784 "window.rs"
 HEAPF32[$9>>2] = $8; //@line 784 "window.rs"
 $10 = ((($0)) + 20|0); //@line 784 "window.rs"
 ;HEAP32[$10>>2]=HEAP32[$_9>>2]|0;HEAP32[$10+4>>2]=HEAP32[$_9+4>>2]|0;HEAP32[$10+8>>2]=HEAP32[$_9+8>>2]|0; //@line 784 "window.rs"
 $11 = ((($0)) + 32|0); //@line 784 "window.rs"
 HEAPF32[$11>>2] = $$sreg1$field; //@line 784 "window.rs"
 $12 = ((($11)) + 4|0); //@line 784 "window.rs"
 HEAPF32[$12>>2] = $$sreg1$field6; //@line 784 "window.rs"
 $13 = ((($0)) + 40|0); //@line 784 "window.rs"
 HEAPF32[$13>>2] = $$sreg$field; //@line 784 "window.rs"
 $14 = ((($13)) + 4|0); //@line 784 "window.rs"
 HEAPF32[$14>>2] = $$sreg$field3; //@line 784 "window.rs"
 $15 = ((($0)) + 48|0); //@line 784 "window.rs"
 HEAPF32[$15>>2] = 0.0; //@line 784 "window.rs"
 STACKTOP = sp;return; //@line 787 "window.rs"
}
function __ZN5rustv6window5mkwcd17h9e3be5218fa50858E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sreg$field = 0.0, $$sreg$field4 = 0.0, $$sreg$index3 = 0, $$sreg1$field = 0.0, $$sreg1$field7 = 0.0, $$sreg1$index6 = 0, $$sreg2$field = 0.0, $$sreg2$field10 = 0.0, $$sreg2$index9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_4 = 0, $dragstart = 0, $p = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $4 = sp + 32|0;
 $5 = sp + 16|0;
 $6 = sp;
 $_10 = sp + 72|0;
 $_4 = sp + 56|0;
 $r = $1;
 $p = $2;
 $dragstart = $3;
 $7 = $r; //@line 791 "window.rs"
 __ZN73__LT_rustv__r3d__geom__Extents_LT_T_GT__u20_as_u20_core__clone__Clone_GT_5clone17h687e78722686f5f7E($_4,$7); //@line 791 "window.rs"
 $8 = $p; //@line 791 "window.rs"
 __ZN81__LT_rustv__r3d__vector__Vec2_LT_X_C__u20_Y_GT__u20_as_u20_core__clone__Clone_GT_5clone17h0f20656a3ab1ae05E($6,$8); //@line 791 "window.rs"
 $$sreg$field = +HEAPF32[$6>>2]; //@line 791 "window.rs"
 $$sreg$index3 = ((($6)) + 4|0); //@line 791 "window.rs"
 $$sreg$field4 = +HEAPF32[$$sreg$index3>>2]; //@line 791 "window.rs"
 $9 = $p; //@line 791 "window.rs"
 __ZN81__LT_rustv__r3d__vector__Vec2_LT_X_C__u20_Y_GT__u20_as_u20_core__clone__Clone_GT_5clone17h0f20656a3ab1ae05E($5,$9); //@line 791 "window.rs"
 $$sreg1$field = +HEAPF32[$5>>2]; //@line 791 "window.rs"
 $$sreg1$index6 = ((($5)) + 4|0); //@line 791 "window.rs"
 $$sreg1$field7 = +HEAPF32[$$sreg1$index6>>2]; //@line 791 "window.rs"
 $10 = $dragstart; //@line 791 "window.rs"
 __ZN81__LT_rustv__r3d__vector__Vec2_LT_X_C__u20_Y_GT__u20_as_u20_core__clone__Clone_GT_5clone17h0f20656a3ab1ae05E($4,$10); //@line 791 "window.rs"
 $$sreg2$field = +HEAPF32[$4>>2]; //@line 791 "window.rs"
 $$sreg2$index9 = ((($4)) + 4|0); //@line 791 "window.rs"
 $$sreg2$field10 = +HEAPF32[$$sreg2$index9>>2]; //@line 791 "window.rs"
 HEAP32[$_10>>2] = 1; //@line 791 "window.rs"
 $11 = ((($_10)) + 4|0); //@line 791 "window.rs"
 HEAPF32[$11>>2] = $$sreg2$field; //@line 791 "window.rs"
 $12 = ((($11)) + 4|0); //@line 791 "window.rs"
 HEAPF32[$12>>2] = $$sreg2$field10; //@line 791 "window.rs"
 $13 = (+__ZN5rustv6window16get_aspect_ratio17hec5c79d4b08fa3aaE()); //@line 791 "window.rs"
 ;HEAP32[$0>>2]=HEAP32[$_4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$_4+12>>2]|0; //@line 790 "window.rs"
 $14 = ((($0)) + 16|0); //@line 790 "window.rs"
 HEAPF32[$14>>2] = $13; //@line 790 "window.rs"
 $15 = ((($0)) + 20|0); //@line 790 "window.rs"
 ;HEAP32[$15>>2]=HEAP32[$_10>>2]|0;HEAP32[$15+4>>2]=HEAP32[$_10+4>>2]|0;HEAP32[$15+8>>2]=HEAP32[$_10+8>>2]|0; //@line 790 "window.rs"
 $16 = ((($0)) + 32|0); //@line 790 "window.rs"
 HEAPF32[$16>>2] = $$sreg1$field; //@line 790 "window.rs"
 $17 = ((($16)) + 4|0); //@line 790 "window.rs"
 HEAPF32[$17>>2] = $$sreg1$field7; //@line 790 "window.rs"
 $18 = ((($0)) + 40|0); //@line 790 "window.rs"
 HEAPF32[$18>>2] = $$sreg$field; //@line 790 "window.rs"
 $19 = ((($18)) + 4|0); //@line 790 "window.rs"
 HEAPF32[$19>>2] = $$sreg$field4; //@line 790 "window.rs"
 $20 = ((($0)) + 48|0); //@line 790 "window.rs"
 HEAPF32[$20>>2] = 0.0; //@line 790 "window.rs"
 STACKTOP = sp;return; //@line 793 "window.rs"
}
function __ZN5rustv6window5mkwcm17hed9614c411b3ce1bE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sreg$field = 0.0, $$sreg$field3 = 0.0, $$sreg$index2 = 0, $$sreg1$field = 0.0, $$sreg1$field6 = 0.0, $$sreg1$index5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $_10 = 0;
 var $_4 = 0, $opos = 0, $p = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = sp + 16|0;
 $5 = sp;
 $_10 = sp + 56|0;
 $_4 = sp + 40|0;
 $r = $1;
 $p = $2;
 $opos = $3;
 $6 = $r; //@line 796 "window.rs"
 __ZN73__LT_rustv__r3d__geom__Extents_LT_T_GT__u20_as_u20_core__clone__Clone_GT_5clone17h687e78722686f5f7E($_4,$6); //@line 796 "window.rs"
 $7 = $p; //@line 796 "window.rs"
 __ZN81__LT_rustv__r3d__vector__Vec2_LT_X_C__u20_Y_GT__u20_as_u20_core__clone__Clone_GT_5clone17h0f20656a3ab1ae05E($5,$7); //@line 796 "window.rs"
 $$sreg$field = +HEAPF32[$5>>2]; //@line 796 "window.rs"
 $$sreg$index2 = ((($5)) + 4|0); //@line 796 "window.rs"
 $$sreg$field3 = +HEAPF32[$$sreg$index2>>2]; //@line 796 "window.rs"
 $8 = $opos; //@line 796 "window.rs"
 __ZN81__LT_rustv__r3d__vector__Vec2_LT_X_C__u20_Y_GT__u20_as_u20_core__clone__Clone_GT_5clone17h0f20656a3ab1ae05E($4,$8); //@line 796 "window.rs"
 $$sreg1$field = +HEAPF32[$4>>2]; //@line 796 "window.rs"
 $$sreg1$index5 = ((($4)) + 4|0); //@line 796 "window.rs"
 $$sreg1$field6 = +HEAPF32[$$sreg1$index5>>2]; //@line 796 "window.rs"
 HEAP32[$_10>>2] = 0; //@line 796 "window.rs"
 $9 = (+__ZN5rustv6window16get_aspect_ratio17hec5c79d4b08fa3aaE()); //@line 796 "window.rs"
 ;HEAP32[$0>>2]=HEAP32[$_4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$_4+12>>2]|0; //@line 795 "window.rs"
 $10 = ((($0)) + 16|0); //@line 795 "window.rs"
 HEAPF32[$10>>2] = $9; //@line 795 "window.rs"
 $11 = ((($0)) + 20|0); //@line 795 "window.rs"
 ;HEAP32[$11>>2]=HEAP32[$_10>>2]|0;HEAP32[$11+4>>2]=HEAP32[$_10+4>>2]|0;HEAP32[$11+8>>2]=HEAP32[$_10+8>>2]|0; //@line 795 "window.rs"
 $12 = ((($0)) + 32|0); //@line 795 "window.rs"
 HEAPF32[$12>>2] = $$sreg1$field; //@line 795 "window.rs"
 $13 = ((($12)) + 4|0); //@line 795 "window.rs"
 HEAPF32[$13>>2] = $$sreg1$field6; //@line 795 "window.rs"
 $14 = ((($0)) + 40|0); //@line 795 "window.rs"
 HEAPF32[$14>>2] = $$sreg$field; //@line 795 "window.rs"
 $15 = ((($14)) + 4|0); //@line 795 "window.rs"
 HEAPF32[$15>>2] = $$sreg$field3; //@line 795 "window.rs"
 $16 = ((($0)) + 48|0); //@line 795 "window.rs"
 HEAPF32[$16>>2] = 0.0; //@line 795 "window.rs"
 STACKTOP = sp;return; //@line 798 "window.rs"
}
function __ZN5rustv6window12set_dragmode17hb2b14aa1a94a54f8E($0) {
 $0 = $0|0;
 var $1 = 0, $d = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $d = $0;
 $1 = $d; //@line 801 "window.rs"
 HEAP32[7769] = $1; //@line 801 "window.rs"
 STACKTOP = sp;return; //@line 802 "window.rs"
}
function __ZN5rustv6window12get_dragmode17h00e5007a3f4c85eaE() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[7769]|0; //@line 804 "window.rs"
 return ($0|0); //@line 805 "window.rs"
}
function __ZN5rustv6window8run_loop17hdde427d64c137fe3E($swins,$0) {
 $swins = $swins|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field3 = 0, $$sreg$index2 = 0, $$sreg1$field = 0, $$sreg1$field6 = 0, $$sreg1$index5 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $_13 = 0, $_14 = 0, $_145 = 0, $_156 = 0, $_157 = 0, $_158 = 0, $_159 = 0, $_24 = 0, $_25 = 0, $_3$i = 0, $_30 = 0, $_4 = 0, $_49 = 0, $_74 = 0, $_81 = 0, $_82 = 0, $_84 = 0, $_87 = 0;
 var $__arg0 = 0, $__arg1 = 0, $__next = 0, $_wins = 0, $app = 0, $argc = 0, $argv = 0, $cond = 0, $iter = 0, $personalityslot = 0, $val = 0, $w = 0, $win = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $1 = sp + 16|0; //@line 1 "/checkout/src/liballoc/boxed.rs"
 $2 = sp; //@line 1 "/checkout/src/liballoc/boxed.rs"
 $_3$i = sp + 320|0; //@line 1 "/checkout/src/liballoc/boxed.rs"
 $personalityslot = sp + 312|0; //@line 1 "window.rs"
 $_145 = sp + 288|0; //@line 1 "window.rs"
 $_87 = sp + 276|0; //@line 1 "window.rs"
 $_84 = sp + 272|0; //@line 1 "window.rs"
 $_82 = sp + 264|0; //@line 1 "window.rs"
 $_81 = sp + 248|0; //@line 1 "window.rs"
 $_74 = sp + 224|0; //@line 1 "window.rs"
 $argv = sp + 204|0; //@line 1 "window.rs"
 $argc = sp + 200|0; //@line 1 "window.rs"
 $_49 = sp + 176|0; //@line 1 "window.rs"
 $w = sp + 168|0; //@line 1 "window.rs"
 $val = sp + 160|0; //@line 1 "window.rs"
 $_30 = sp + 152|0; //@line 1 "window.rs"
 $__next = sp + 144|0; //@line 1 "window.rs"
 $iter = sp + 128|0; //@line 1 "window.rs"
 $_25 = sp + 112|0; //@line 1 "window.rs"
 $_24 = sp + 96|0; //@line 1 "window.rs"
 $_14 = sp + 80|0; //@line 1 "window.rs"
 $_13 = sp + 64|0; //@line 1 "window.rs"
 $_wins = sp + 56|0; //@line 1 "window.rs"
 $_4 = sp + 32|0; //@line 1 "window.rs"
 $app = $0;
 $_157 = 0; //@line 978 "window.rs"
 $_156 = 0; //@line 978 "window.rs"
 $_159 = 0; //@line 978 "window.rs"
 $_158 = 0; //@line 978 "window.rs"
 $_156 = 1; //@line 978 "window.rs"
 __THREW__ = 0;
 invoke_viiiii(193,($_4|0),(3664|0),1,(38620|0),0); //@line 978 "window.rs"
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  label = 61;
 } else {
  __THREW__ = 0;
  invoke_vi(170,($_4|0)); //@line 978 "window.rs"
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if ($9) {
   label = 61;
  } else {
   $10 = (__ZN5alloc4heap15exchange_malloc17h2b3df7e8451de4ebE(0,4)|0); //@line 980 "window.rs"
   __THREW__ = 0;
   invoke_viii(194,($_14|0),($10|0),0); //@line 980 "window.rs"
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if ($12) {
    label = 61;
   } else {
    ;HEAP32[$_13>>2]=HEAP32[$_14>>2]|0;HEAP32[$_13+4>>2]=HEAP32[$_14+4>>2]|0;HEAP32[$_13+8>>2]=HEAP32[$_14+8>>2]|0; //@line 980 "window.rs"
    $13 = ((($_13)) + 12|0); //@line 980 "window.rs"
    HEAP32[$13>>2] = 0; //@line 980 "window.rs"
    __THREW__ = 0;
    $14 = (invoke_iii(195,16,4)|0); //@line 242 "/checkout/src/liballoc/boxed.rs"
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if ($16) {
     label = 61;
    } else {
     ;HEAP32[$_3$i>>2]=HEAP32[$_13>>2]|0;HEAP32[$_3$i+4>>2]=HEAP32[$_13+4>>2]|0;HEAP32[$_3$i+8>>2]=HEAP32[$_13+8>>2]|0;HEAP32[$_3$i+12>>2]=HEAP32[$_13+12>>2]|0; //@line 242 "/checkout/src/liballoc/boxed.rs"
     ;HEAP32[$14>>2]=HEAP32[$_3$i>>2]|0;HEAP32[$14+4>>2]=HEAP32[$_3$i+4>>2]|0;HEAP32[$14+8>>2]=HEAP32[$_3$i+8>>2]|0;HEAP32[$14+12>>2]=HEAP32[$_3$i+12>>2]|0; //@line 242 "/checkout/src/liballoc/boxed.rs"
     HEAP32[$_wins>>2] = $14; //@line 980 "window.rs"
     $_157 = 1; //@line 980 "window.rs"
     $17 = HEAP32[$_wins>>2]|0; //@line 982 "window.rs"
     HEAP32[9573] = $17; //@line 982 "window.rs"
     $_156 = 0; //@line 983 "window.rs"
     ;HEAP32[$_25>>2]=HEAP32[$swins>>2]|0;HEAP32[$_25+4>>2]=HEAP32[$swins+4>>2]|0;HEAP32[$_25+8>>2]=HEAP32[$swins+8>>2]|0; //@line 983 "window.rs"
     __THREW__ = 0;
     invoke_vii(196,($_24|0),($_25|0)); //@line 983 "window.rs"
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     L6: do {
      if ($19) {
       label = 62;
      } else {
       ;HEAP32[$iter>>2]=HEAP32[$_24>>2]|0;HEAP32[$iter+4>>2]=HEAP32[$_24+4>>2]|0;HEAP32[$iter+8>>2]=HEAP32[$_24+8>>2]|0;HEAP32[$iter+12>>2]=HEAP32[$_24+12>>2]|0; //@line 983 "window.rs"
       while(1) {
        __THREW__ = 0;
        invoke_vii(197,($_30|0),($iter|0)); //@line 983 "window.rs"
        $22 = __THREW__; __THREW__ = 0;
        $23 = $22&1;
        if ($23) {
         label = 63;
         break;
        }
        $24 = HEAP32[$_30>>2]|0; //@line 983 "window.rs"
        $25 = ($24|0)==(0|0); //@line 983 "window.rs"
        if ($25) {
         label = 12;
         break;
        }
        $28 = HEAP32[$_30>>2]|0; //@line 983 "window.rs"
        $29 = ((($_30)) + 4|0); //@line 983 "window.rs"
        $30 = HEAP32[$29>>2]|0; //@line 983 "window.rs"
        HEAP32[$val>>2] = $28; //@line 983 "window.rs"
        $31 = ((($val)) + 4|0); //@line 983 "window.rs"
        HEAP32[$31>>2] = $30; //@line 983 "window.rs"
        $32 = HEAP32[$val>>2]|0; //@line 983 "window.rs"
        $33 = ((($val)) + 4|0); //@line 983 "window.rs"
        $34 = HEAP32[$33>>2]|0; //@line 983 "window.rs"
        $_158 = 1; //@line 983 "window.rs"
        HEAP32[$__next>>2] = $32; //@line 983 "window.rs"
        $35 = ((($__next)) + 4|0); //@line 983 "window.rs"
        HEAP32[$35>>2] = $34; //@line 983 "window.rs"
        $36 = HEAP32[$_30>>2]|0; //@line 983 "window.rs"
        $37 = ($36|0)==(0|0); //@line 983 "window.rs"
        $38 = $37 ? 0 : 1; //@line 983 "window.rs"
        $cond = ($38|0)==(1); //@line 983 "window.rs"
        if (!($cond)) {
         __THREW__ = 0;
         invoke_vi(198,($_30|0)); //@line 983 "window.rs"
         $158 = __THREW__; __THREW__ = 0;
         $159 = $158&1;
         if ($159) {
          label = 63;
          break;
         }
        }
        $_158 = 0; //@line 983 "window.rs"
        $152 = HEAP32[$__next>>2]|0; //@line 983 "window.rs"
        $153 = ((($__next)) + 4|0); //@line 983 "window.rs"
        $154 = HEAP32[$153>>2]|0; //@line 983 "window.rs"
        $_159 = 1; //@line 983 "window.rs"
        HEAP32[$w>>2] = $152; //@line 983 "window.rs"
        $155 = ((($w)) + 4|0); //@line 983 "window.rs"
        HEAP32[$155>>2] = $154; //@line 983 "window.rs"
        __THREW__ = 0;
        $44 = (invoke_i(237)|0); //@line 983 "window.rs"
        $156 = __THREW__; __THREW__ = 0;
        $157 = $156&1;
        if ($157) {
         label = 64;
         break;
        }
        $_159 = 0; //@line 983 "window.rs"
        $41 = HEAP32[$w>>2]|0; //@line 983 "window.rs"
        $42 = ((($w)) + 4|0); //@line 983 "window.rs"
        $43 = HEAP32[$42>>2]|0; //@line 983 "window.rs"
        __THREW__ = 0;
        invoke_viii(200,($44|0),($41|0),($43|0)); //@line 983 "window.rs"
        $45 = __THREW__; __THREW__ = 0;
        $46 = $45&1;
        if ($46) {
         label = 64;
         break;
        }
        $_159 = 0; //@line 983 "window.rs"
        $_158 = 0; //@line 983 "window.rs"
       }
       if ((label|0) == 12) {
        __THREW__ = 0;
        invoke_vi(198,($_30|0)); //@line 983 "window.rs"
        $26 = __THREW__; __THREW__ = 0;
        $27 = $26&1;
        if ($27) {
         label = 63;
        } else {
         $_158 = 0; //@line 983 "window.rs"
         __THREW__ = 0;
         invoke_vi(199,($iter|0)); //@line 983 "window.rs"
         $39 = __THREW__; __THREW__ = 0;
         $40 = $39&1;
         if ($40) {
          label = 62;
          break;
         }
         $_157 = 0; //@line 984 "window.rs"
         $47 = HEAP32[$_wins>>2]|0; //@line 984 "window.rs"
         __THREW__ = 0;
         invoke_vi(201,($47|0)); //@line 984 "window.rs"
         $48 = __THREW__; __THREW__ = 0;
         $49 = $48&1;
         if ($49) {
          label = 62;
          break;
         }
         $50 = +HEAPF32[875]; //@line 988 "window.rs"
         $51 = +HEAPF32[(3504)>>2]; //@line 988 "window.rs"
         $52 = $50 / $51; //@line 988 "window.rs"
         HEAPF32[877] = $52; //@line 988 "window.rs"
         __THREW__ = 0;
         invoke_viiiii(193,($_49|0),(3672|0),1,(38620|0),0); //@line 989 "window.rs"
         $53 = __THREW__; __THREW__ = 0;
         $54 = $53&1;
         if ($54) {
          label = 62;
          break;
         }
         __THREW__ = 0;
         invoke_vi(170,($_49|0)); //@line 989 "window.rs"
         $55 = __THREW__; __THREW__ = 0;
         $56 = $55&1;
         if ($56) {
          label = 62;
          break;
         }
         HEAP32[$argc>>2] = 0; //@line 990 "window.rs"
         __THREW__ = 0;
         invoke_vi(202,($argv|0)); //@line 991 "window.rs"
         $57 = __THREW__; __THREW__ = 0;
         $58 = $57&1;
         if ($58) {
          label = 62;
          break;
         }
         __THREW__ = 0;
         invoke_vii(203,($argc|0),(0|0)); //@line 992 "window.rs"
         $59 = __THREW__; __THREW__ = 0;
         $60 = $59&1;
         do {
          if (!($60)) {
           $61 = HEAP32[962]|0; //@line 993 "window.rs"
           $62 = $61 | 2; //@line 993 "window.rs"
           __THREW__ = 0;
           invoke_vi(204,($62|0)); //@line 993 "window.rs"
           $63 = __THREW__; __THREW__ = 0;
           $64 = $63&1;
           if (!($64)) {
            __THREW__ = 0;
            $65 = (invoke_iii(182,(13964|0),16)|0); //@line 994 "window.rs"
            $66 = __THREW__; __THREW__ = 0;
            $67 = $66&1;
            if (!($67)) {
             __THREW__ = 0;
             $68 = (invoke_ii(205,($65|0))|0); //@line 994 "window.rs"
             $69 = __THREW__; __THREW__ = 0;
             $70 = $69&1;
             if (!($70)) {
              $win = $68; //@line 994 "window.rs"
              $71 = HEAP32[963]|0; //@line 995 "window.rs"
              __THREW__ = 0;
              $72 = (invoke_ii(206,($71|0))|0); //@line 995 "window.rs"
              $73 = __THREW__; __THREW__ = 0;
              $74 = $73&1;
              if (!($74)) {
               HEAP32[$_84>>2] = $72; //@line 995 "window.rs"
               $75 = HEAP32[964]|0; //@line 996 "window.rs"
               __THREW__ = 0;
               $76 = (invoke_ii(206,($75|0))|0); //@line 996 "window.rs"
               $77 = __THREW__; __THREW__ = 0;
               $78 = $77&1;
               if ($78) {
                break;
               }
               HEAP32[$_87>>2] = $76; //@line 996 "window.rs"
               HEAP32[$_82>>2] = $_84; //@line 995 "window.rs"
               $79 = ((($_82)) + 4|0); //@line 995 "window.rs"
               HEAP32[$79>>2] = $_87; //@line 995 "window.rs"
               $80 = HEAP32[$_82>>2]|0; //@line 995 "window.rs"
               $__arg0 = $80; //@line 995 "window.rs"
               $81 = ((($_82)) + 4|0); //@line 995 "window.rs"
               $82 = HEAP32[$81>>2]|0; //@line 995 "window.rs"
               $__arg1 = $82; //@line 995 "window.rs"
               $83 = $__arg0; //@line 995 "window.rs"
               __THREW__ = 0;
               invoke_viii(207,($2|0),($83|0),(179|0)); //@line 995 "window.rs"
               $$sreg$field = HEAP32[$2>>2]|0; //@line 995 "window.rs"
               $$sreg$index2 = ((($2)) + 4|0); //@line 995 "window.rs"
               $$sreg$field3 = HEAP32[$$sreg$index2>>2]|0; //@line 995 "window.rs"
               $84 = __THREW__; __THREW__ = 0;
               $85 = $84&1;
               if ($85) {
                break;
               }
               $86 = $__arg1; //@line 995 "window.rs"
               __THREW__ = 0;
               invoke_viii(207,($1|0),($86|0),(179|0)); //@line 995 "window.rs"
               $$sreg1$field = HEAP32[$1>>2]|0; //@line 995 "window.rs"
               $$sreg1$index5 = ((($1)) + 4|0); //@line 995 "window.rs"
               $$sreg1$field6 = HEAP32[$$sreg1$index5>>2]|0; //@line 995 "window.rs"
               $87 = __THREW__; __THREW__ = 0;
               $88 = $87&1;
               if ($88) {
                break;
               }
               HEAP32[$_81>>2] = $$sreg$field; //@line 995 "window.rs"
               $89 = ((($_81)) + 4|0); //@line 995 "window.rs"
               HEAP32[$89>>2] = $$sreg$field3; //@line 995 "window.rs"
               $90 = ((($_81)) + 8|0); //@line 995 "window.rs"
               HEAP32[$90>>2] = $$sreg1$field; //@line 995 "window.rs"
               $91 = ((($90)) + 4|0); //@line 995 "window.rs"
               HEAP32[$91>>2] = $$sreg1$field6; //@line 995 "window.rs"
               $92 = HEAP32[1819]|0; //@line 995 "window.rs"
               __THREW__ = 0;
               invoke_viiiiiii(169,($_74|0),(3680|0),3,($_81|0),2,($92|0),2); //@line 995 "window.rs"
               $93 = __THREW__; __THREW__ = 0;
               $94 = $93&1;
               if ($94) {
                break;
               }
               __THREW__ = 0;
               invoke_vi(170,($_74|0)); //@line 995 "window.rs"
               $95 = __THREW__; __THREW__ = 0;
               $96 = $95&1;
               if ($96) {
                break;
               }
               $97 = HEAP32[873]|0; //@line 998 "window.rs"
               $98 = HEAP32[(3496)>>2]|0; //@line 998 "window.rs"
               __THREW__ = 0;
               invoke_vii(208,($97|0),($98|0)); //@line 998 "window.rs"
               $99 = __THREW__; __THREW__ = 0;
               $100 = $99&1;
               if ($100) {
                break;
               }
               $101 = HEAP32[873]|0; //@line 999 "window.rs"
               $102 = HEAP32[(3496)>>2]|0; //@line 999 "window.rs"
               __THREW__ = 0;
               invoke_viiii(209,0,0,($101|0),($102|0)); //@line 999 "window.rs"
               $103 = __THREW__; __THREW__ = 0;
               $104 = $103&1;
               if ($104) {
                break;
               }
               __THREW__ = 0;
               invoke_vi(210,(211|0)); //@line 1007 "window.rs"
               $105 = __THREW__; __THREW__ = 0;
               $106 = $105&1;
               if ($106) {
                break;
               }
               __THREW__ = 0;
               invoke_vi(212,(213|0)); //@line 1008 "window.rs"
               $107 = __THREW__; __THREW__ = 0;
               $108 = $107&1;
               if ($108) {
                break;
               }
               __THREW__ = 0;
               invoke_vi(214,(215|0)); //@line 1009 "window.rs"
               $109 = __THREW__; __THREW__ = 0;
               $110 = $109&1;
               if ($110) {
                break;
               }
               __THREW__ = 0;
               invoke_vi(216,(217|0)); //@line 1010 "window.rs"
               $111 = __THREW__; __THREW__ = 0;
               $112 = $111&1;
               if ($112) {
                break;
               }
               __THREW__ = 0;
               invoke_vi(218,(219|0)); //@line 1011 "window.rs"
               $113 = __THREW__; __THREW__ = 0;
               $114 = $113&1;
               if ($114) {
                break;
               }
               __THREW__ = 0;
               invoke_vi(220,(221|0)); //@line 1012 "window.rs"
               $115 = __THREW__; __THREW__ = 0;
               $116 = $115&1;
               if ($116) {
                break;
               }
               __THREW__ = 0;
               invoke_vi(222,(223|0)); //@line 1013 "window.rs"
               $117 = __THREW__; __THREW__ = 0;
               $118 = $117&1;
               if ($118) {
                break;
               }
               __THREW__ = 0;
               invoke_vi(224,(225|0)); //@line 1014 "window.rs"
               $119 = __THREW__; __THREW__ = 0;
               $120 = $119&1;
               if ($120) {
                break;
               }
               __THREW__ = 0;
               invoke_v(226); //@line 1016 "window.rs"
               $121 = __THREW__; __THREW__ = 0;
               $122 = $121&1;
               if ($122) {
                break;
               }
               __THREW__ = 0;
               invoke_vi(227,(228|0)); //@line 1017 "window.rs"
               $123 = __THREW__; __THREW__ = 0;
               $124 = $123&1;
               if ($124) {
                break;
               }
               __THREW__ = 0;
               invoke_vi(229,(230|0)); //@line 1018 "window.rs"
               $125 = __THREW__; __THREW__ = 0;
               $126 = $125&1;
               if ($126) {
                break;
               }
               $127 = HEAP32[776]|0; //@line 1019 "window.rs"
               __THREW__ = 0;
               invoke_vi(231,($127|0)); //@line 1019 "window.rs"
               $128 = __THREW__; __THREW__ = 0;
               $129 = $128&1;
               if ($129) {
                break;
               }
               __THREW__ = 0;
               invoke_vdddd(232,0.5,0.5,0.5,1.0); //@line 1021 "window.rs"
               $130 = __THREW__; __THREW__ = 0;
               $131 = $130&1;
               if ($131) {
                break;
               }
               $132 = HEAP32[789]|0; //@line 1022 "window.rs"
               $133 = HEAP32[788]|0; //@line 1022 "window.rs"
               $134 = $132 | $133; //@line 1022 "window.rs"
               __THREW__ = 0;
               invoke_vi(233,($134|0)); //@line 1022 "window.rs"
               $135 = __THREW__; __THREW__ = 0;
               $136 = $135&1;
               if ($136) {
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(193,($_145|0),(3704|0),1,(38620|0),0); //@line 1026 "window.rs"
               $137 = __THREW__; __THREW__ = 0;
               $138 = $137&1;
               if ($138) {
                break;
               }
               __THREW__ = 0;
               invoke_vi(170,($_145|0)); //@line 1026 "window.rs"
               $139 = __THREW__; __THREW__ = 0;
               $140 = $139&1;
               if ($140) {
                break;
               }
               $141 = HEAP32[776]|0; //@line 1027 "window.rs"
               __THREW__ = 0;
               invoke_vi(234,($141|0)); //@line 1027 "window.rs"
               $142 = __THREW__; __THREW__ = 0;
               $143 = $142&1;
               if ($143) {
                break;
               }
               __THREW__ = 0;
               invoke_v(235); //@line 1028 "window.rs"
               $144 = __THREW__; __THREW__ = 0;
               $145 = $144&1;
               if ($145) {
                break;
               }
               __THREW__ = 0;
               invoke_vi(236,($argv|0)); //@line 1060 "window.rs"
               $146 = __THREW__; __THREW__ = 0;
               $147 = $146&1;
               if ($147) {
                label = 62;
                break L6;
               }
               $_157 = 0; //@line 1061 "window.rs"
               STACKTOP = sp;return; //@line 1061 "window.rs"
              }
             }
            }
           }
          }
         } while(0);
         $174 = ___cxa_find_matching_catch_2()|0;
         $175 = tempRet0;
         HEAP32[$personalityslot>>2] = $174;
         $176 = ((($personalityslot)) + 4|0);
         HEAP32[$176>>2] = $175;
         __ZN4core3ptr13drop_in_place17heae217dde415a979E($argv); //@line 1060 "window.rs"
         break;
        }
       }
       else if ((label|0) == 64) {
        $169 = ___cxa_find_matching_catch_2()|0;
        $170 = tempRet0;
        HEAP32[$personalityslot>>2] = $169;
        $171 = ((($personalityslot)) + 4|0);
        HEAP32[$171>>2] = $170;
        $172 = $_159; //@line 983 "window.rs"
        $173 = $172&1; //@line 983 "window.rs"
        if ($173) {
         $_159 = 0; //@line 983 "window.rs"
         __ZN4core3ptr13drop_in_place17h4ca7e74bbb163d7dE($w); //@line 983 "window.rs"
        }
       }
       if ((label|0) == 63) {
        $166 = ___cxa_find_matching_catch_2()|0;
        $167 = tempRet0;
        HEAP32[$personalityslot>>2] = $166;
        $168 = ((($personalityslot)) + 4|0);
        HEAP32[$168>>2] = $167;
       }
       $150 = $_158; //@line 983 "window.rs"
       $151 = $150&1; //@line 983 "window.rs"
       if ($151) {
        $_158 = 0; //@line 983 "window.rs"
        __ZN4core3ptr13drop_in_place17h4ca7e74bbb163d7dE($__next); //@line 983 "window.rs"
       }
       __ZN4core3ptr13drop_in_place17h410e6eec18304b4cE($iter); //@line 983 "window.rs"
      }
     } while(0);
     if ((label|0) == 62) {
      $163 = ___cxa_find_matching_catch_2()|0;
      $164 = tempRet0;
      HEAP32[$personalityslot>>2] = $163;
      $165 = ((($personalityslot)) + 4|0);
      HEAP32[$165>>2] = $164;
     }
     $20 = $_157; //@line 1061 "window.rs"
     $21 = $20&1; //@line 1061 "window.rs"
     if ($21) {
      $_157 = 0; //@line 1061 "window.rs"
      __ZN4core3ptr13drop_in_place17hb0ec69cc02f70c4aE($_wins); //@line 1061 "window.rs"
     }
    }
   }
  }
 }
 if ((label|0) == 61) {
  $160 = ___cxa_find_matching_catch_2()|0;
  $161 = tempRet0;
  HEAP32[$personalityslot>>2] = $160;
  $162 = ((($personalityslot)) + 4|0);
  HEAP32[$162>>2] = $161;
 }
 $148 = $_156; //@line 1061 "window.rs"
 $149 = $148&1; //@line 1061 "window.rs"
 if (!($149)) {
  $5 = HEAP32[$personalityslot>>2]|0; //@line 977 "window.rs"
  $6 = ((($personalityslot)) + 4|0); //@line 977 "window.rs"
  $7 = HEAP32[$6>>2]|0; //@line 977 "window.rs"
  ___resumeException($5|0);
  // unreachable;
 }
 $_156 = 0; //@line 1061 "window.rs"
 __ZN4core3ptr13drop_in_place17hdf63de801541aaabE($swins); //@line 1061 "window.rs"
 $5 = HEAP32[$personalityslot>>2]|0; //@line 977 "window.rs"
 $6 = ((($personalityslot)) + 4|0); //@line 977 "window.rs"
 $7 = HEAP32[$6>>2]|0; //@line 977 "window.rs"
 ___resumeException($5|0);
 // unreachable;
}
function __ZN5rustv6window4push17h0e15bb959934d5a0E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_5 = 0, $w = 0, $wins = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_5 = sp + 16|0;
 $w = sp + 8|0;
 $wins = $0;
 HEAP32[$w>>2] = $1;
 $3 = ((($w)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = $wins; //@line 1065 "window.rs"
 $5 = HEAP32[$w>>2]|0; //@line 1065 "window.rs"
 $6 = ((($w)) + 4|0); //@line 1065 "window.rs"
 $7 = HEAP32[$6>>2]|0; //@line 1065 "window.rs"
 HEAP32[$_5>>2] = $5; //@line 1065 "window.rs"
 $8 = ((($_5)) + 4|0); //@line 1065 "window.rs"
 HEAP32[$8>>2] = $7; //@line 1065 "window.rs"
 $9 = ((($_5)) + 8|0); //@line 1065 "window.rs"
 HEAP8[$9>>0] = 0; //@line 1065 "window.rs"
 __ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_4push17he61425ed0a566096E($4,$_5); //@line 1065 "window.rs"
 $10 = (__ZN5rustv6window13glutGetWindow17h94649d33c06beb2bE()|0); //@line 1066 "window.rs"
 $11 = $wins; //@line 1066 "window.rs"
 $12 = ((($11)) + 12|0); //@line 1066 "window.rs"
 HEAP32[$12>>2] = $10; //@line 1066 "window.rs"
 STACKTOP = sp;return; //@line 1068 "window.rs"
}
function __ZN5rustv6window15extra_callbacks17hac8a0f23997fd68fE() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return; //@line 930 "window.rs"
}
function __ZN5rustv6window4wins17he08646de1c9bf0c1E() {
 var $0 = 0, $1 = 0, $transmute_temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[9573]|0; //@line 955 "window.rs"
 $transmute_temp = $0; //@line 955 "window.rs"
 $1 = $transmute_temp; //@line 955 "window.rs"
 STACKTOP = sp;return ($1|0); //@line 956 "window.rs"
}
function __ZN5rustv6window13glutGetWindow17h94649d33c06beb2bE() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0; //@line 735 "window.rs"
}
function __ZN60__LT_rustv__window__DragMode_u20_as_u20_core__fmt__Debug_GT_3fmt17h1b18e30d9705fc33E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_3 = 0, $__arg_0 = 0, $builder = 0, $builder1 = 0, $builder2 = 0, $builder3 = 0, $builder4 = 0, $builder5 = 0, $builder6 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $builder6 = sp + 84|0;
 $builder5 = sp + 72|0;
 $builder4 = sp + 60|0;
 $builder3 = sp + 48|0;
 $builder2 = sp + 36|0;
 $builder1 = sp + 24|0;
 $builder = sp + 12|0;
 $self = $0;
 $__arg_0 = $1;
 $2 = $self; //@line 118 "window.rs"
 $_3 = $2; //@line 118 "window.rs"
 $3 = $_3; //@line 118 "window.rs"
 $4 = HEAP32[$3>>2]|0; //@line 118 "window.rs"
 switch ($4|0) {
 case 0:  {
  $5 = $__arg_0; //@line 118 "window.rs"
  __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder,$5,14047,4); //@line 118 "window.rs"
  $6 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder)|0); //@line 118 "window.rs"
  $7 = $6&1; //@line 118 "window.rs"
  $_0 = $7; //@line 118 "window.rs"
  break;
 }
 case 1:  {
  $8 = $__arg_0; //@line 118 "window.rs"
  __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder1,$8,14051,4); //@line 118 "window.rs"
  $9 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder1)|0); //@line 118 "window.rs"
  $10 = $9&1; //@line 118 "window.rs"
  $_0 = $10; //@line 118 "window.rs"
  break;
 }
 case 2:  {
  $11 = $__arg_0; //@line 118 "window.rs"
  __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder2,$11,14055,4); //@line 118 "window.rs"
  $12 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder2)|0); //@line 118 "window.rs"
  $13 = $12&1; //@line 118 "window.rs"
  $_0 = $13; //@line 118 "window.rs"
  break;
 }
 case 3:  {
  $14 = $__arg_0; //@line 118 "window.rs"
  __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder3,$14,14059,8); //@line 118 "window.rs"
  $15 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder3)|0); //@line 118 "window.rs"
  $16 = $15&1; //@line 118 "window.rs"
  $_0 = $16; //@line 118 "window.rs"
  break;
 }
 case 4:  {
  $17 = $__arg_0; //@line 118 "window.rs"
  __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder4,$17,14067,5); //@line 118 "window.rs"
  $18 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder4)|0); //@line 118 "window.rs"
  $19 = $18&1; //@line 118 "window.rs"
  $_0 = $19; //@line 118 "window.rs"
  break;
 }
 case 5:  {
  $20 = $__arg_0; //@line 118 "window.rs"
  __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder5,$20,14072,6); //@line 118 "window.rs"
  $21 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder5)|0); //@line 118 "window.rs"
  $22 = $21&1; //@line 118 "window.rs"
  $_0 = $22; //@line 118 "window.rs"
  break;
 }
 case 6:  {
  $23 = $__arg_0; //@line 118 "window.rs"
  __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder6,$23,14078,7); //@line 118 "window.rs"
  $24 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder6)|0); //@line 118 "window.rs"
  $25 = $24&1; //@line 118 "window.rs"
  $_0 = $25; //@line 118 "window.rs"
  break;
 }
 default: {
  // unreachable; //@line 118 "window.rs"
 }
 }
 $26 = $_0; //@line 118 "window.rs"
 $27 = $26&1; //@line 118 "window.rs"
 STACKTOP = sp;return ($27|0); //@line 118 "window.rs"
}
function __ZN35__LT_core__ptr__Shared_LT_T_GT__GT_13new_unchecked17h9438c2f16e3cbf5dE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $_0 = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ptr = $0;
 $1 = $ptr; //@line 2521 "/checkout/src/libcore/ptr.rs"
 $2 = (__ZN40__LT_core__nonzero__NonZero_LT_T_GT__GT_13new_unchecked17h782eee845be98642E($1)|0); //@line 2521 "/checkout/src/libcore/ptr.rs"
 $_0 = $2; //@line 2521 "/checkout/src/libcore/ptr.rs"
 $3 = $_0; //@line 2522 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return ($3|0); //@line 2522 "/checkout/src/libcore/ptr.rs"
}
function __ZN35__LT_core__ptr__Shared_LT_T_GT__GT_6as_ptr17hcbaa53a063b660cdE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 2531 "/checkout/src/libcore/ptr.rs"
 $2 = (__ZN40__LT_core__nonzero__NonZero_LT_T_GT__GT_3get17h04b45df7b689e7a2E($1)|0); //@line 2531 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return ($2|0); //@line 2532 "/checkout/src/libcore/ptr.rs"
}
function __ZN35__LT_core__ptr__Unique_LT_T_GT__GT_13new_unchecked17h0173a0f57669b1fcE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $_0 = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ptr = $0;
 $1 = $ptr; //@line 2387 "/checkout/src/libcore/ptr.rs"
 $2 = (__ZN40__LT_core__nonzero__NonZero_LT_T_GT__GT_13new_unchecked17h2b46601ecb155fe8E($1)|0); //@line 2387 "/checkout/src/libcore/ptr.rs"
 $_0 = $2; //@line 2387 "/checkout/src/libcore/ptr.rs"
 $3 = $_0; //@line 2388 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return ($3|0); //@line 2388 "/checkout/src/libcore/ptr.rs"
}
function __ZN35__LT_core__ptr__Unique_LT_T_GT__GT_13new_unchecked17h4db77394a7746a1bE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $_0 = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ptr = $0;
 $1 = $ptr; //@line 2387 "/checkout/src/libcore/ptr.rs"
 $2 = (__ZN40__LT_core__nonzero__NonZero_LT_T_GT__GT_13new_unchecked17h13098a01db1d72adE($1)|0); //@line 2387 "/checkout/src/libcore/ptr.rs"
 $_0 = $2; //@line 2387 "/checkout/src/libcore/ptr.rs"
 $3 = $_0; //@line 2388 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return ($3|0); //@line 2388 "/checkout/src/libcore/ptr.rs"
}
function __ZN35__LT_core__ptr__Unique_LT_T_GT__GT_13new_unchecked17h66f2c919dab55965E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $_0 = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ptr = $0;
 $1 = $ptr; //@line 2387 "/checkout/src/libcore/ptr.rs"
 $2 = (__ZN40__LT_core__nonzero__NonZero_LT_T_GT__GT_13new_unchecked17h76c1345f2162671dE($1)|0); //@line 2387 "/checkout/src/libcore/ptr.rs"
 $_0 = $2; //@line 2387 "/checkout/src/libcore/ptr.rs"
 $3 = $_0; //@line 2388 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return ($3|0); //@line 2388 "/checkout/src/libcore/ptr.rs"
}
function __ZN35__LT_core__ptr__Unique_LT_T_GT__GT_13new_unchecked17h6e6eca53f3fccbfcE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $_0 = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ptr = $0;
 $1 = $ptr; //@line 2387 "/checkout/src/libcore/ptr.rs"
 $2 = (__ZN40__LT_core__nonzero__NonZero_LT_T_GT__GT_13new_unchecked17hb5354d34b3674381E($1)|0); //@line 2387 "/checkout/src/libcore/ptr.rs"
 $_0 = $2; //@line 2387 "/checkout/src/libcore/ptr.rs"
 $3 = $_0; //@line 2388 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return ($3|0); //@line 2388 "/checkout/src/libcore/ptr.rs"
}
function __ZN35__LT_core__ptr__Unique_LT_T_GT__GT_13new_unchecked17ha96c2151ecf4ff6cE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $_0 = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ptr = $0;
 $1 = $ptr; //@line 2387 "/checkout/src/libcore/ptr.rs"
 $2 = (__ZN40__LT_core__nonzero__NonZero_LT_T_GT__GT_13new_unchecked17h782eee845be98642E($1)|0); //@line 2387 "/checkout/src/libcore/ptr.rs"
 $_0 = $2; //@line 2387 "/checkout/src/libcore/ptr.rs"
 $3 = $_0; //@line 2388 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return ($3|0); //@line 2388 "/checkout/src/libcore/ptr.rs"
}
function __ZN35__LT_core__ptr__Unique_LT_T_GT__GT_13new_unchecked17hc04c3fd822e1b62dE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $_0 = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ptr = $0;
 $1 = $ptr; //@line 2387 "/checkout/src/libcore/ptr.rs"
 $2 = (__ZN40__LT_core__nonzero__NonZero_LT_T_GT__GT_13new_unchecked17h69aa2a1631ed1227E($1)|0); //@line 2387 "/checkout/src/libcore/ptr.rs"
 $_0 = $2; //@line 2387 "/checkout/src/libcore/ptr.rs"
 $3 = $_0; //@line 2388 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return ($3|0); //@line 2388 "/checkout/src/libcore/ptr.rs"
}
function __ZN35__LT_core__ptr__Unique_LT_T_GT__GT_5empty17h7ea790039c9e1aaeE() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = (__ZN4core3mem8align_of17h658feaec843c903eE()|0); //@line 2372 "/checkout/src/libcore/ptr.rs"
 $1 = $0; //@line 2372 "/checkout/src/libcore/ptr.rs"
 $ptr = $1; //@line 2372 "/checkout/src/libcore/ptr.rs"
 $2 = $ptr; //@line 2373 "/checkout/src/libcore/ptr.rs"
 $3 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_13new_unchecked17hc247754758f1f1d9E($2)|0); //@line 2373 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return ($3|0); //@line 2375 "/checkout/src/libcore/ptr.rs"
}
function __ZN35__LT_core__ptr__Unique_LT_T_GT__GT_13new_unchecked17hc247754758f1f1d9E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $_0 = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ptr = $0;
 $1 = $ptr; //@line 2387 "/checkout/src/libcore/ptr.rs"
 $2 = (__ZN40__LT_core__nonzero__NonZero_LT_T_GT__GT_13new_unchecked17h6cd7c874a8dbeb23E($1)|0); //@line 2387 "/checkout/src/libcore/ptr.rs"
 $_0 = $2; //@line 2387 "/checkout/src/libcore/ptr.rs"
 $3 = $_0; //@line 2388 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return ($3|0); //@line 2388 "/checkout/src/libcore/ptr.rs"
}
function __ZN35__LT_core__ptr__Unique_LT_T_GT__GT_5empty17ha06199c2c16c491aE() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = (__ZN4core3mem8align_of17hccc7922e2c3ce90fE()|0); //@line 2372 "/checkout/src/libcore/ptr.rs"
 $1 = $0; //@line 2372 "/checkout/src/libcore/ptr.rs"
 $ptr = $1; //@line 2372 "/checkout/src/libcore/ptr.rs"
 $2 = $ptr; //@line 2373 "/checkout/src/libcore/ptr.rs"
 $3 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_13new_unchecked17h4db77394a7746a1bE($2)|0); //@line 2373 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return ($3|0); //@line 2375 "/checkout/src/libcore/ptr.rs"
}
function __ZN35__LT_core__ptr__Unique_LT_T_GT__GT_5empty17hf42f9cf1df3d97cbE() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = (__ZN4core3mem8align_of17hf4a8fc97f4876179E()|0); //@line 2372 "/checkout/src/libcore/ptr.rs"
 $1 = $0; //@line 2372 "/checkout/src/libcore/ptr.rs"
 $ptr = $1; //@line 2372 "/checkout/src/libcore/ptr.rs"
 $2 = $ptr; //@line 2373 "/checkout/src/libcore/ptr.rs"
 $3 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_13new_unchecked17h6e6eca53f3fccbfcE($2)|0); //@line 2373 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return ($3|0); //@line 2375 "/checkout/src/libcore/ptr.rs"
}
function __ZN35__LT_core__ptr__Unique_LT_T_GT__GT_5empty17hff45d0c488db48a8E() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = (__ZN4core3mem8align_of17h3d4cf13420557a3fE()|0); //@line 2372 "/checkout/src/libcore/ptr.rs"
 $1 = $0; //@line 2372 "/checkout/src/libcore/ptr.rs"
 $ptr = $1; //@line 2372 "/checkout/src/libcore/ptr.rs"
 $2 = $ptr; //@line 2373 "/checkout/src/libcore/ptr.rs"
 $3 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_13new_unchecked17h66f2c919dab55965E($2)|0); //@line 2373 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return ($3|0); //@line 2375 "/checkout/src/libcore/ptr.rs"
}
function __ZN35__LT_core__ptr__Unique_LT_T_GT__GT_6as_ptr17h3bb82dda755467c2E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 2397 "/checkout/src/libcore/ptr.rs"
 $2 = (__ZN40__LT_core__nonzero__NonZero_LT_T_GT__GT_3get17h22ca0b1071656f0bE($1)|0); //@line 2397 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return ($2|0); //@line 2398 "/checkout/src/libcore/ptr.rs"
}
function __ZN35__LT_core__ptr__Unique_LT_T_GT__GT_6as_ptr17h5472f53bc77f1039E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 2397 "/checkout/src/libcore/ptr.rs"
 $2 = (__ZN40__LT_core__nonzero__NonZero_LT_T_GT__GT_3get17h29ad1d9c8de52510E($1)|0); //@line 2397 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return ($2|0); //@line 2398 "/checkout/src/libcore/ptr.rs"
}
function __ZN35__LT_core__ptr__Unique_LT_T_GT__GT_6as_ptr17h99d71c7f68843f3aE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 2397 "/checkout/src/libcore/ptr.rs"
 $2 = (__ZN40__LT_core__nonzero__NonZero_LT_T_GT__GT_3get17haa49b52a9de79e75E($1)|0); //@line 2397 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return ($2|0); //@line 2398 "/checkout/src/libcore/ptr.rs"
}
function __ZN35__LT_core__ptr__Unique_LT_T_GT__GT_6as_ptr17h9c34f3a94ee631dbE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 2397 "/checkout/src/libcore/ptr.rs"
 $2 = (__ZN40__LT_core__nonzero__NonZero_LT_T_GT__GT_3get17h52e719d1fff06b8cE($1)|0); //@line 2397 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return ($2|0); //@line 2398 "/checkout/src/libcore/ptr.rs"
}
function __ZN35__LT_core__ptr__Unique_LT_T_GT__GT_6as_ptr17hae9ef777118ec745E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 2397 "/checkout/src/libcore/ptr.rs"
 $2 = (__ZN40__LT_core__nonzero__NonZero_LT_T_GT__GT_3get17h04b45df7b689e7a2E($1)|0); //@line 2397 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return ($2|0); //@line 2398 "/checkout/src/libcore/ptr.rs"
}
function __ZN35__LT_core__ptr__Unique_LT_T_GT__GT_6as_ptr17hafbc5c0503bf9717E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 2397 "/checkout/src/libcore/ptr.rs"
 $2 = (__ZN40__LT_core__nonzero__NonZero_LT_T_GT__GT_3get17h103d68e3956fc209E($1)|0); //@line 2397 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return ($2|0); //@line 2398 "/checkout/src/libcore/ptr.rs"
}
function __ZN35__LT_core__ptr__Unique_LT_T_GT__GT_6as_ptr17hc335539227ef4f58E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 2397 "/checkout/src/libcore/ptr.rs"
 $2 = (__ZN40__LT_core__nonzero__NonZero_LT_T_GT__GT_3get17h821ac8bef9593fc7E($1)|0); //@line 2397 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return ($2|0); //@line 2398 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr19swap_nonoverlapping17h6d304b137989ce4eE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, $len = 0, $x = 0, $x1 = 0, $y = 0, $y2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x = $0;
 $y = $1;
 $count = $2;
 $3 = $x; //@line 186 "/checkout/src/libcore/ptr.rs"
 $x1 = $3; //@line 186 "/checkout/src/libcore/ptr.rs"
 $4 = $y; //@line 187 "/checkout/src/libcore/ptr.rs"
 $y2 = $4; //@line 187 "/checkout/src/libcore/ptr.rs"
 $5 = (__ZN4core3mem7size_of17h09f91698b5f928bfE()|0); //@line 188 "/checkout/src/libcore/ptr.rs"
 $6 = $count; //@line 188 "/checkout/src/libcore/ptr.rs"
 $7 = Math_imul($5, $6)|0; //@line 188 "/checkout/src/libcore/ptr.rs"
 $len = $7; //@line 188 "/checkout/src/libcore/ptr.rs"
 $8 = $x1; //@line 189 "/checkout/src/libcore/ptr.rs"
 $9 = $y2; //@line 189 "/checkout/src/libcore/ptr.rs"
 $10 = $len; //@line 189 "/checkout/src/libcore/ptr.rs"
 __ZN4core3ptr25swap_nonoverlapping_bytes17h508e1cf19bcaab81E($8,$9,$10); //@line 189 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return; //@line 190 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr25swap_nonoverlapping_bytes17h508e1cf19bcaab81E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $block_size = 0, $i = 0, $len = 0, $rem = 0, $t = 0, $t1 = 0, $t4 = 0, $t5 = 0, $x = 0;
 var $x2 = 0, $x6 = 0, $y = 0, $y3 = 0, $y7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $t4 = sp + 32|0;
 $t = sp;
 $x = $0;
 $y = $1;
 $len = $2;
 $3 = (__ZN4core3mem7size_of17ha59eb6b46170b9c0E()|0); //@line 207 "/checkout/src/libcore/ptr.rs"
 $block_size = $3; //@line 207 "/checkout/src/libcore/ptr.rs"
 $i = 0; //@line 212 "/checkout/src/libcore/ptr.rs"
 while(1) {
  $4 = $i; //@line 213 "/checkout/src/libcore/ptr.rs"
  $5 = $block_size; //@line 213 "/checkout/src/libcore/ptr.rs"
  $6 = (($4) + ($5))|0; //@line 213 "/checkout/src/libcore/ptr.rs"
  $7 = $len; //@line 213 "/checkout/src/libcore/ptr.rs"
  $8 = ($6>>>0)<=($7>>>0); //@line 213 "/checkout/src/libcore/ptr.rs"
  if (!($8)) {
   break;
  }
  __ZN4core3mem13uninitialized17hb91b4d6e2ecd4460E($t); //@line 216 "/checkout/src/libcore/ptr.rs"
  $t1 = $t; //@line 217 "/checkout/src/libcore/ptr.rs"
  $12 = $x; //@line 218 "/checkout/src/libcore/ptr.rs"
  $13 = $i; //@line 218 "/checkout/src/libcore/ptr.rs"
  $14 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_6offset17h0a36fcf400b954f6E($12,$13)|0); //@line 218 "/checkout/src/libcore/ptr.rs"
  $x2 = $14; //@line 218 "/checkout/src/libcore/ptr.rs"
  $15 = $y; //@line 219 "/checkout/src/libcore/ptr.rs"
  $16 = $i; //@line 219 "/checkout/src/libcore/ptr.rs"
  $17 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_6offset17h0a36fcf400b954f6E($15,$16)|0); //@line 219 "/checkout/src/libcore/ptr.rs"
  $y3 = $17; //@line 219 "/checkout/src/libcore/ptr.rs"
  $18 = $x2; //@line 223 "/checkout/src/libcore/ptr.rs"
  $19 = $t1; //@line 223 "/checkout/src/libcore/ptr.rs"
  $20 = $block_size; //@line 223 "/checkout/src/libcore/ptr.rs"
  $21 = $20; //@line 223 "/checkout/src/libcore/ptr.rs"
  _memcpy(($19|0),($18|0),($21|0))|0; //@line 223 "/checkout/src/libcore/ptr.rs"
  $22 = $y3; //@line 224 "/checkout/src/libcore/ptr.rs"
  $23 = $x2; //@line 224 "/checkout/src/libcore/ptr.rs"
  $24 = $block_size; //@line 224 "/checkout/src/libcore/ptr.rs"
  $25 = $24; //@line 224 "/checkout/src/libcore/ptr.rs"
  _memcpy(($23|0),($22|0),($25|0))|0; //@line 224 "/checkout/src/libcore/ptr.rs"
  $26 = $t1; //@line 225 "/checkout/src/libcore/ptr.rs"
  $27 = $y3; //@line 225 "/checkout/src/libcore/ptr.rs"
  $28 = $block_size; //@line 225 "/checkout/src/libcore/ptr.rs"
  $29 = $28; //@line 225 "/checkout/src/libcore/ptr.rs"
  _memcpy(($27|0),($26|0),($29|0))|0; //@line 225 "/checkout/src/libcore/ptr.rs"
  $30 = $block_size; //@line 226 "/checkout/src/libcore/ptr.rs"
  $31 = $i; //@line 226 "/checkout/src/libcore/ptr.rs"
  $32 = (($31) + ($30))|0; //@line 226 "/checkout/src/libcore/ptr.rs"
  $i = $32; //@line 226 "/checkout/src/libcore/ptr.rs"
 }
 $9 = $i; //@line 229 "/checkout/src/libcore/ptr.rs"
 $10 = $len; //@line 229 "/checkout/src/libcore/ptr.rs"
 $11 = ($9>>>0)<($10>>>0); //@line 229 "/checkout/src/libcore/ptr.rs"
 if (!($11)) {
  STACKTOP = sp;return; //@line 242 "/checkout/src/libcore/ptr.rs"
 }
 __ZN4core3mem13uninitialized17h40c8af2f40f39ddeE($t4); //@line 231 "/checkout/src/libcore/ptr.rs"
 $33 = $len; //@line 232 "/checkout/src/libcore/ptr.rs"
 $34 = $i; //@line 232 "/checkout/src/libcore/ptr.rs"
 $35 = (($33) - ($34))|0; //@line 232 "/checkout/src/libcore/ptr.rs"
 $rem = $35; //@line 232 "/checkout/src/libcore/ptr.rs"
 $t5 = $t4; //@line 234 "/checkout/src/libcore/ptr.rs"
 $36 = $x; //@line 235 "/checkout/src/libcore/ptr.rs"
 $37 = $i; //@line 235 "/checkout/src/libcore/ptr.rs"
 $38 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_6offset17h0a36fcf400b954f6E($36,$37)|0); //@line 235 "/checkout/src/libcore/ptr.rs"
 $x6 = $38; //@line 235 "/checkout/src/libcore/ptr.rs"
 $39 = $y; //@line 236 "/checkout/src/libcore/ptr.rs"
 $40 = $i; //@line 236 "/checkout/src/libcore/ptr.rs"
 $41 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_6offset17h0a36fcf400b954f6E($39,$40)|0); //@line 236 "/checkout/src/libcore/ptr.rs"
 $y7 = $41; //@line 236 "/checkout/src/libcore/ptr.rs"
 $42 = $x6; //@line 238 "/checkout/src/libcore/ptr.rs"
 $43 = $t5; //@line 238 "/checkout/src/libcore/ptr.rs"
 $44 = $rem; //@line 238 "/checkout/src/libcore/ptr.rs"
 $45 = $44; //@line 238 "/checkout/src/libcore/ptr.rs"
 _memcpy(($43|0),($42|0),($45|0))|0; //@line 238 "/checkout/src/libcore/ptr.rs"
 $46 = $y7; //@line 239 "/checkout/src/libcore/ptr.rs"
 $47 = $x6; //@line 239 "/checkout/src/libcore/ptr.rs"
 $48 = $rem; //@line 239 "/checkout/src/libcore/ptr.rs"
 $49 = $48; //@line 239 "/checkout/src/libcore/ptr.rs"
 _memcpy(($47|0),($46|0),($49|0))|0; //@line 239 "/checkout/src/libcore/ptr.rs"
 $50 = $t5; //@line 240 "/checkout/src/libcore/ptr.rs"
 $51 = $y7; //@line 240 "/checkout/src/libcore/ptr.rs"
 $52 = $rem; //@line 240 "/checkout/src/libcore/ptr.rs"
 $53 = $52; //@line 240 "/checkout/src/libcore/ptr.rs"
 _memcpy(($51|0),($50|0),($53|0))|0; //@line 240 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return; //@line 242 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_6offset17h0a36fcf400b954f6E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $count = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $count = $1;
 $2 = $self; //@line 1261 "/checkout/src/libcore/ptr.rs"
 $3 = $count; //@line 1261 "/checkout/src/libcore/ptr.rs"
 $4 = (($2) + ($3)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
 $tmp_ret = $4; //@line 1261 "/checkout/src/libcore/ptr.rs"
 $5 = $tmp_ret; //@line 1261 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return ($5|0); //@line 1262 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr19swap_nonoverlapping17hd246995b863bb0a1E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, $len = 0, $x = 0, $x1 = 0, $y = 0, $y2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x = $0;
 $y = $1;
 $count = $2;
 $3 = $x; //@line 186 "/checkout/src/libcore/ptr.rs"
 $x1 = $3; //@line 186 "/checkout/src/libcore/ptr.rs"
 $4 = $y; //@line 187 "/checkout/src/libcore/ptr.rs"
 $y2 = $4; //@line 187 "/checkout/src/libcore/ptr.rs"
 $5 = (__ZN4core3mem7size_of17h56842b121b8b689bE()|0); //@line 188 "/checkout/src/libcore/ptr.rs"
 $6 = $count; //@line 188 "/checkout/src/libcore/ptr.rs"
 $7 = Math_imul($5, $6)|0; //@line 188 "/checkout/src/libcore/ptr.rs"
 $len = $7; //@line 188 "/checkout/src/libcore/ptr.rs"
 $8 = $x1; //@line 189 "/checkout/src/libcore/ptr.rs"
 $9 = $y2; //@line 189 "/checkout/src/libcore/ptr.rs"
 $10 = $len; //@line 189 "/checkout/src/libcore/ptr.rs"
 __ZN4core3ptr25swap_nonoverlapping_bytes17h508e1cf19bcaab81E($8,$9,$10); //@line 189 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return; //@line 190 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_15wrapping_offset17ha6d8b6c64249cfb7E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $count = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $count = $1;
 $2 = $self; //@line 1299 "/checkout/src/libcore/ptr.rs"
 $3 = $count; //@line 1299 "/checkout/src/libcore/ptr.rs"
 $4 = (($2) + ($3)|0); //@line 1299 "/checkout/src/libcore/ptr.rs"
 $tmp_ret = $4; //@line 1299 "/checkout/src/libcore/ptr.rs"
 $5 = $tmp_ret; //@line 1299 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return ($5|0); //@line 1301 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_6offset17hd4a80f2f7dd3ac22E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $count = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $count = $1;
 $2 = $self; //@line 1261 "/checkout/src/libcore/ptr.rs"
 $3 = $count; //@line 1261 "/checkout/src/libcore/ptr.rs"
 $4 = (($2) + ($3<<2)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
 $tmp_ret = $4; //@line 1261 "/checkout/src/libcore/ptr.rs"
 $5 = $tmp_ret; //@line 1261 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return ($5|0); //@line 1262 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h29f14f440a266f0fE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 1170 "/checkout/src/libcore/ptr.rs"
 $2 = (__ZN4core3ptr8null_mut17h08a501618653ee44E()|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
 $3 = ($1|0)==($2|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return ($3|0); //@line 1171 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr8null_mut17h08a501618653ee44E() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0); //@line 91 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h29fb7da4258afde7E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 1170 "/checkout/src/libcore/ptr.rs"
 $2 = (__ZN4core3ptr8null_mut17h08a501618653ee44E()|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
 $3 = ($1|0)==($2|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return ($3|0); //@line 1171 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h4a2648388ee43bb3E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 1170 "/checkout/src/libcore/ptr.rs"
 $2 = (__ZN4core3ptr8null_mut17h08a501618653ee44E()|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
 $3 = ($1|0)==($2|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return ($3|0); //@line 1171 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17hb720cbe35e48fa74E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 1170 "/checkout/src/libcore/ptr.rs"
 $2 = (__ZN4core3ptr8null_mut17h08a501618653ee44E()|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
 $3 = ($1|0)==($2|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return ($3|0); //@line 1171 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_6offset17h34e3882c32f92199E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $count = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $count = $1;
 $2 = $self; //@line 623 "/checkout/src/libcore/ptr.rs"
 $3 = $count; //@line 623 "/checkout/src/libcore/ptr.rs"
 $4 = (($2) + ($3)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
 $tmp_ret = $4; //@line 623 "/checkout/src/libcore/ptr.rs"
 $5 = $tmp_ret; //@line 623 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return ($5|0); //@line 624 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_6offset17h84b833a1a70712c3E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $count = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $count = $1;
 $2 = $self; //@line 623 "/checkout/src/libcore/ptr.rs"
 $3 = $count; //@line 623 "/checkout/src/libcore/ptr.rs"
 $4 = (($2) + ($3<<3)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
 $tmp_ret = $4; //@line 623 "/checkout/src/libcore/ptr.rs"
 $5 = $tmp_ret; //@line 623 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return ($5|0); //@line 624 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_6offset17h8a493778eead053fE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $count = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $count = $1;
 $2 = $self; //@line 623 "/checkout/src/libcore/ptr.rs"
 $3 = $count; //@line 623 "/checkout/src/libcore/ptr.rs"
 $4 = (($2) + ($3)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
 $tmp_ret = $4; //@line 623 "/checkout/src/libcore/ptr.rs"
 $5 = $tmp_ret; //@line 623 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return ($5|0); //@line 624 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_6offset17hc45b0a90f73ce35eE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $count = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $count = $1;
 $2 = $self; //@line 623 "/checkout/src/libcore/ptr.rs"
 $3 = $count; //@line 623 "/checkout/src/libcore/ptr.rs"
 $4 = (($2) + ($3<<2)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
 $tmp_ret = $4; //@line 623 "/checkout/src/libcore/ptr.rs"
 $5 = $tmp_ret; //@line 623 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return ($5|0); //@line 624 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h5943771350e7aea2E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 532 "/checkout/src/libcore/ptr.rs"
 $2 = (__ZN4core3ptr4null17h9e9ea5d63ed0f801E()|0); //@line 532 "/checkout/src/libcore/ptr.rs"
 $3 = ($1|0)==($2|0); //@line 532 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return ($3|0); //@line 533 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr4null17h9e9ea5d63ed0f801E() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0); //@line 77 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h7d9ca3e12c62cd11E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 532 "/checkout/src/libcore/ptr.rs"
 $2 = (__ZN4core3ptr4null17h9e9ea5d63ed0f801E()|0); //@line 532 "/checkout/src/libcore/ptr.rs"
 $3 = ($1|0)==($2|0); //@line 532 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return ($3|0); //@line 533 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17hb519a6910a0cefa8E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 532 "/checkout/src/libcore/ptr.rs"
 $2 = (__ZN4core3ptr4null17h9e9ea5d63ed0f801E()|0); //@line 532 "/checkout/src/libcore/ptr.rs"
 $3 = ($1|0)==($2|0); //@line 532 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return ($3|0); //@line 533 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr4read17had018deaa5dd648aE($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $retVal$index5 = 0, $src = 0, $tmp = 0, $tmp$index4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $tmp = sp + 16|0;
 $src = $0;
 __ZN4core3mem13uninitialized17h252a0eb0013cb542E($1); //@line 287 "/checkout/src/libcore/ptr.rs"
 $$sreg$field = HEAP32[$1>>2]|0; //@line 287 "/checkout/src/libcore/ptr.rs"
 $$sreg$index1 = ((($1)) + 4|0); //@line 287 "/checkout/src/libcore/ptr.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 287 "/checkout/src/libcore/ptr.rs"
 HEAP32[$tmp>>2] = $$sreg$field; //@line 287 "/checkout/src/libcore/ptr.rs"
 $tmp$index4 = ((($tmp)) + 4|0); //@line 287 "/checkout/src/libcore/ptr.rs"
 HEAP32[$tmp$index4>>2] = $$sreg$field2; //@line 287 "/checkout/src/libcore/ptr.rs"
 $2 = $src; //@line 288 "/checkout/src/libcore/ptr.rs"
 ;HEAP32[$tmp>>2]=HEAP32[$2>>2]|0;HEAP32[$tmp+4>>2]=HEAP32[$2+4>>2]|0; //@line 288 "/checkout/src/libcore/ptr.rs"
 $3 = HEAP32[$tmp>>2]|0; //@line 289 "/checkout/src/libcore/ptr.rs"
 $4 = ((($tmp)) + 4|0); //@line 289 "/checkout/src/libcore/ptr.rs"
 $5 = HEAP32[$4>>2]|0; //@line 289 "/checkout/src/libcore/ptr.rs"
 HEAP32[$retVal>>2] = $3; //@line 290 "/checkout/src/libcore/ptr.rs"
 $retVal$index5 = ((($retVal)) + 4|0); //@line 290 "/checkout/src/libcore/ptr.rs"
 HEAP32[$retVal$index5>>2] = $5; //@line 290 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return; //@line 290 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr5write17h40092ed46b051c77E($0,$src) {
 $0 = $0|0;
 $src = $src|0;
 var $1 = 0, $_6 = 0, $dst = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_6 = sp + 4|0;
 $dst = $0;
 $1 = $dst; //@line 364 "/checkout/src/libcore/ptr.rs"
 ;HEAP32[$_6>>2]=HEAP32[$src>>2]|0;HEAP32[$_6+4>>2]=HEAP32[$src+4>>2]|0;HEAP32[$_6+8>>2]=HEAP32[$src+8>>2]|0; //@line 364 "/checkout/src/libcore/ptr.rs"
 ;HEAP32[$1>>2]=HEAP32[$_6>>2]|0;HEAP32[$1+4>>2]=HEAP32[$_6+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$_6+8>>2]|0; //@line 364 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return; //@line 365 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr5write17h615b845359d1df8eE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $dst = 0, $src = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $dst = $0;
 $src = $1;
 $2 = $dst; //@line 364 "/checkout/src/libcore/ptr.rs"
 $3 = $src; //@line 364 "/checkout/src/libcore/ptr.rs"
 HEAP32[$2>>2] = $3; //@line 364 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return; //@line 365 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr5write17he7e85e6848b3de02E($0,$src) {
 $0 = $0|0;
 $src = $src|0;
 var $1 = 0, $_6 = 0, $dst = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_6 = sp + 8|0;
 $dst = $0;
 $1 = $dst; //@line 364 "/checkout/src/libcore/ptr.rs"
 dest=$_6; src=$src; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0)); //@line 364 "/checkout/src/libcore/ptr.rs"
 dest=$1; src=$_6; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0)); //@line 364 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return; //@line 365 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr13drop_in_place17h0028a71fb8c1a22bE($0) {
 $0 = $0|0;
 var $arg0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr13drop_in_place17h0131253b1c417f0dE($0) {
 $0 = $0|0;
 var $arg0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr13drop_in_place17h033be6a4eca0dd18E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $personalityslot = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $personalityslot = sp + 8|0;
 $arg0 = $0;
 $1 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
 __THREW__ = 0;
 invoke_vi(238,($1|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 do {
  if ($3) {
   $10 = ___cxa_find_matching_catch_2()|0;
   $11 = tempRet0;
   HEAP32[$personalityslot>>2] = $10;
   $12 = ((($personalityslot)) + 4|0);
   HEAP32[$12>>2] = $11;
   $13 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
   __ZN4core3ptr13drop_in_place17hfa3f6176c8a73023E($13); //@line 59 "/checkout/src/libcore/ptr.rs"
  } else {
   $7 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
   __THREW__ = 0;
   invoke_vi(239,($7|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if ($9) {
    $14 = ___cxa_find_matching_catch_2()|0;
    $15 = tempRet0;
    HEAP32[$personalityslot>>2] = $14;
    $16 = ((($personalityslot)) + 4|0);
    HEAP32[$16>>2] = $15;
    break;
   } else {
    STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
   }
  }
 } while(0);
 $4 = HEAP32[$personalityslot>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $5 = ((($personalityslot)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $6 = HEAP32[$5>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 ___resumeException($4|0);
 // unreachable;
}
function __ZN4core3ptr13drop_in_place17hfa3f6176c8a73023E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $personalityslot = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $personalityslot = sp + 8|0;
 $arg0 = $0;
 $1 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
 __THREW__ = 0;
 invoke_vi(240,($1|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$personalityslot>>2] = $4;
  $6 = ((($personalityslot)) + 4|0);
  HEAP32[$6>>2] = $5;
  $7 = HEAP32[$personalityslot>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $8 = ((($personalityslot)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  $9 = HEAP32[$8>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  ___resumeException($7|0);
  // unreachable;
 } else {
  STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
}
function __ZN4core3ptr13drop_in_place17hcf7a48d5df5f24c4E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $personalityslot = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $personalityslot = sp + 8|0;
 $arg0 = $0;
 $1 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
 __THREW__ = 0;
 invoke_vi(241,($1|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$personalityslot>>2] = $4;
  $6 = ((($personalityslot)) + 4|0);
  HEAP32[$6>>2] = $5;
  $7 = HEAP32[$personalityslot>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $8 = ((($personalityslot)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  $9 = HEAP32[$8>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  ___resumeException($7|0);
  // unreachable;
 } else {
  STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
}
function __ZN4core3ptr13drop_in_place17h7da8ace2a16d31d8E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $personalityslot = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $personalityslot = sp + 8|0;
 $arg0 = $0;
 $1 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
 __THREW__ = 0;
 invoke_vi(242,($1|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 do {
  if ($3) {
   $10 = ___cxa_find_matching_catch_2()|0;
   $11 = tempRet0;
   HEAP32[$personalityslot>>2] = $10;
   $12 = ((($personalityslot)) + 4|0);
   HEAP32[$12>>2] = $11;
   $13 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
   __ZN4core3ptr13drop_in_place17h48bfff9d518a29c3E($13); //@line 59 "/checkout/src/libcore/ptr.rs"
  } else {
   $7 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
   __THREW__ = 0;
   invoke_vi(243,($7|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if ($9) {
    $14 = ___cxa_find_matching_catch_2()|0;
    $15 = tempRet0;
    HEAP32[$personalityslot>>2] = $14;
    $16 = ((($personalityslot)) + 4|0);
    HEAP32[$16>>2] = $15;
    break;
   } else {
    STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
   }
  }
 } while(0);
 $4 = HEAP32[$personalityslot>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $5 = ((($personalityslot)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $6 = HEAP32[$5>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 ___resumeException($4|0);
 // unreachable;
}
function __ZN4core3ptr13drop_in_place17h48bfff9d518a29c3E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $personalityslot = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $personalityslot = sp + 8|0;
 $arg0 = $0;
 $1 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
 __THREW__ = 0;
 invoke_vi(244,($1|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$personalityslot>>2] = $4;
  $6 = ((($personalityslot)) + 4|0);
  HEAP32[$6>>2] = $5;
  $7 = HEAP32[$personalityslot>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $8 = ((($personalityslot)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  $9 = HEAP32[$8>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  ___resumeException($7|0);
  // unreachable;
 } else {
  STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
}
function __ZN4core3ptr13drop_in_place17h16f8c2c72dff7d4bE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $personalityslot = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $personalityslot = sp + 8|0;
 $arg0 = $0;
 $1 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $2 = HEAP32[$1>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 switch ($2|0) {
 case 2:  {
  $3 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $4 = ((($3)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  __THREW__ = 0;
  invoke_vi(245,($4|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if (!($6)) {
   STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
  }
  break;
 }
 case 3:  {
  $7 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $8 = ((($7)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  __THREW__ = 0;
  invoke_vi(246,($8|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
  }
  break;
 }
 case 8:  {
  $11 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $12 = ((($11)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  __THREW__ = 0;
  invoke_vi(246,($12|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if (!($14)) {
   STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
  }
  break;
 }
 case 9:  {
  $15 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $16 = ((($15)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  __THREW__ = 0;
  invoke_vi(246,($16|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  if (!($18)) {
   STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
  }
  break;
 }
 case 10:  {
  $19 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $20 = ((($19)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  __THREW__ = 0;
  invoke_vi(246,($20|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
  $21 = __THREW__; __THREW__ = 0;
  $22 = $21&1;
  if (!($22)) {
   STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
  }
  break;
 }
 case 11:  {
  $23 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $24 = ((($23)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  __THREW__ = 0;
  invoke_vi(246,($24|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
  $25 = __THREW__; __THREW__ = 0;
  $26 = $25&1;
  if (!($26)) {
   STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
  }
  break;
 }
 case 16: case 15: case 14: case 13: case 12: case 7: case 6: case 5: case 4: case 1: case 0:  {
  STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
  break;
 }
 default: {
  $27 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $28 = ((($27)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  __THREW__ = 0;
  invoke_vi(246,($28|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
  $29 = __THREW__; __THREW__ = 0;
  $30 = $29&1;
  if (!($30)) {
   STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
  }
 }
 }
 $31 = ___cxa_find_matching_catch_2()|0;
 $32 = tempRet0;
 HEAP32[$personalityslot>>2] = $31;
 $33 = ((($personalityslot)) + 4|0);
 HEAP32[$33>>2] = $32;
 $34 = HEAP32[$personalityslot>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $35 = ((($personalityslot)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $36 = HEAP32[$35>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 ___resumeException($34|0);
 // unreachable;
}
function __ZN4core3ptr13drop_in_place17hcdb5cdbc316a5a16E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $personalityslot = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $personalityslot = sp + 8|0;
 $arg0 = $0;
 $1 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
 __THREW__ = 0;
 invoke_vi(247,($1|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$personalityslot>>2] = $4;
  $6 = ((($personalityslot)) + 4|0);
  HEAP32[$6>>2] = $5;
  $7 = HEAP32[$personalityslot>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $8 = ((($personalityslot)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  $9 = HEAP32[$8>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  ___resumeException($7|0);
  // unreachable;
 } else {
  STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
}
function __ZN4core3ptr13drop_in_place17h4ca7e74bbb163d7dE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $arg0 = 0, $personalityslot = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $personalityslot = sp + 8|0;
 $arg0 = $0;
 $1 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $2 = HEAP32[$1>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $3 = ((($1)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $4 = HEAP32[$3>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $5 = HEAP32[$4>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 __THREW__ = 0;
 invoke_vi($5|0,($2|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $12 = ___cxa_find_matching_catch_2()|0;
  $13 = tempRet0;
  HEAP32[$personalityslot>>2] = $12;
  $14 = ((($personalityslot)) + 4|0);
  HEAP32[$14>>2] = $13;
  $15 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $16 = HEAP32[$15>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $17 = ((($15)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  $18 = HEAP32[$17>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  __ZN5alloc4heap8box_free17hd0c03be837d4e9ccE($16,$18); //@line 59 "/checkout/src/libcore/ptr.rs"
  $19 = HEAP32[$personalityslot>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $20 = ((($personalityslot)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  $21 = HEAP32[$20>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  ___resumeException($19|0);
  // unreachable;
 } else {
  $8 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $9 = HEAP32[$8>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $10 = ((($8)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  $11 = HEAP32[$10>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  __ZN5alloc4heap8box_free17hd0c03be837d4e9ccE($9,$11); //@line 59 "/checkout/src/libcore/ptr.rs"
  STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
}
function __ZN4core3ptr13drop_in_place17h312da34936eb6b8bE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $personalityslot = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $personalityslot = sp + 8|0;
 $arg0 = $0;
 $1 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
 __THREW__ = 0;
 invoke_vi(248,($1|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 do {
  if ($3) {
   $10 = ___cxa_find_matching_catch_2()|0;
   $11 = tempRet0;
   HEAP32[$personalityslot>>2] = $10;
   $12 = ((($personalityslot)) + 4|0);
   HEAP32[$12>>2] = $11;
   $13 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
   __ZN4core3ptr13drop_in_place17h065a1df124132e0bE($13); //@line 59 "/checkout/src/libcore/ptr.rs"
  } else {
   $7 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
   __THREW__ = 0;
   invoke_vi(249,($7|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if ($9) {
    $14 = ___cxa_find_matching_catch_2()|0;
    $15 = tempRet0;
    HEAP32[$personalityslot>>2] = $14;
    $16 = ((($personalityslot)) + 4|0);
    HEAP32[$16>>2] = $15;
    break;
   } else {
    STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
   }
  }
 } while(0);
 $4 = HEAP32[$personalityslot>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $5 = ((($personalityslot)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $6 = HEAP32[$5>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 ___resumeException($4|0);
 // unreachable;
}
function __ZN4core3ptr13drop_in_place17h065a1df124132e0bE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $personalityslot = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $personalityslot = sp + 8|0;
 $arg0 = $0;
 $1 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
 __THREW__ = 0;
 invoke_vi(250,($1|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$personalityslot>>2] = $4;
  $6 = ((($personalityslot)) + 4|0);
  HEAP32[$6>>2] = $5;
  $7 = HEAP32[$personalityslot>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $8 = ((($personalityslot)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  $9 = HEAP32[$8>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  ___resumeException($7|0);
  // unreachable;
 } else {
  STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
}
function __ZN4core3ptr13drop_in_place17h1f12095180eca2a0E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $personalityslot = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $personalityslot = sp + 8|0;
 $arg0 = $0;
 $1 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
 __THREW__ = 0;
 invoke_vi(246,($1|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$personalityslot>>2] = $4;
  $6 = ((($personalityslot)) + 4|0);
  HEAP32[$6>>2] = $5;
  $7 = HEAP32[$personalityslot>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $8 = ((($personalityslot)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  $9 = HEAP32[$8>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  ___resumeException($7|0);
  // unreachable;
 } else {
  STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
}
function __ZN4core3ptr13drop_in_place17h2ae92ba27d02d527E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $personalityslot = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $personalityslot = sp + 8|0;
 $arg0 = $0;
 $1 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
 __THREW__ = 0;
 invoke_vi(251,($1|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 do {
  if ($3) {
   $10 = ___cxa_find_matching_catch_2()|0;
   $11 = tempRet0;
   HEAP32[$personalityslot>>2] = $10;
   $12 = ((($personalityslot)) + 4|0);
   HEAP32[$12>>2] = $11;
   $13 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
   __ZN4core3ptr13drop_in_place17h524420189630e30dE($13); //@line 59 "/checkout/src/libcore/ptr.rs"
  } else {
   $7 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
   __THREW__ = 0;
   invoke_vi(252,($7|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if ($9) {
    $14 = ___cxa_find_matching_catch_2()|0;
    $15 = tempRet0;
    HEAP32[$personalityslot>>2] = $14;
    $16 = ((($personalityslot)) + 4|0);
    HEAP32[$16>>2] = $15;
    break;
   } else {
    STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
   }
  }
 } while(0);
 $4 = HEAP32[$personalityslot>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $5 = ((($personalityslot)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $6 = HEAP32[$5>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 ___resumeException($4|0);
 // unreachable;
}
function __ZN4core3ptr13drop_in_place17h524420189630e30dE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $personalityslot = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $personalityslot = sp + 8|0;
 $arg0 = $0;
 $1 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
 __THREW__ = 0;
 invoke_vi(253,($1|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$personalityslot>>2] = $4;
  $6 = ((($personalityslot)) + 4|0);
  HEAP32[$6>>2] = $5;
  $7 = HEAP32[$personalityslot>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $8 = ((($personalityslot)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  $9 = HEAP32[$8>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  ___resumeException($7|0);
  // unreachable;
 } else {
  STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
}
function __ZN4core3ptr13drop_in_place17h410e6eec18304b4cE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $personalityslot = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $personalityslot = sp + 8|0;
 $arg0 = $0;
 $1 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
 __THREW__ = 0;
 invoke_vi(254,($1|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$personalityslot>>2] = $4;
  $6 = ((($personalityslot)) + 4|0);
  HEAP32[$6>>2] = $5;
  $7 = HEAP32[$personalityslot>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $8 = ((($personalityslot)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  $9 = HEAP32[$8>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  ___resumeException($7|0);
  // unreachable;
 } else {
  STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
}
function __ZN4core3ptr13drop_in_place17h41928bb2cd95a692E($0) {
 $0 = $0|0;
 var $arg0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr13drop_in_place17h4dcb0deb2b88097cE($0) {
 $0 = $0|0;
 var $arg0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr13drop_in_place17h567c71dce2ffe868E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $personalityslot = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $personalityslot = sp + 8|0;
 $arg0 = $0;
 $1 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
 __THREW__ = 0;
 invoke_vi(255,($1|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 do {
  if ($3) {
   $10 = ___cxa_find_matching_catch_2()|0;
   $11 = tempRet0;
   HEAP32[$personalityslot>>2] = $10;
   $12 = ((($personalityslot)) + 4|0);
   HEAP32[$12>>2] = $11;
   $13 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
   __ZN4core3ptr13drop_in_place17h13f94b80aaa580bcE($13); //@line 59 "/checkout/src/libcore/ptr.rs"
  } else {
   $7 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
   __THREW__ = 0;
   invoke_vi(256,($7|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if ($9) {
    $14 = ___cxa_find_matching_catch_2()|0;
    $15 = tempRet0;
    HEAP32[$personalityslot>>2] = $14;
    $16 = ((($personalityslot)) + 4|0);
    HEAP32[$16>>2] = $15;
    break;
   } else {
    STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
   }
  }
 } while(0);
 $4 = HEAP32[$personalityslot>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $5 = ((($personalityslot)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $6 = HEAP32[$5>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 ___resumeException($4|0);
 // unreachable;
}
function __ZN4core3ptr13drop_in_place17h13f94b80aaa580bcE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $personalityslot = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $personalityslot = sp + 8|0;
 $arg0 = $0;
 $1 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
 __THREW__ = 0;
 invoke_vi(257,($1|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$personalityslot>>2] = $4;
  $6 = ((($personalityslot)) + 4|0);
  HEAP32[$6>>2] = $5;
  $7 = HEAP32[$personalityslot>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $8 = ((($personalityslot)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  $9 = HEAP32[$8>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  ___resumeException($7|0);
  // unreachable;
 } else {
  STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
}
function __ZN4core3ptr13drop_in_place17h633a458e8eb65ab0E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $arg0 = 0, $personalityslot = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $personalityslot = sp + 16|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($arg0)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $4 = HEAP32[$3>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $5 = HEAP32[$arg0>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $_10 = $5; //@line 59 "/checkout/src/libcore/ptr.rs"
 $6 = $_10; //@line 59 "/checkout/src/libcore/ptr.rs"
 $7 = (($6) + (($4*12)|0)|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 while(1) {
  $21 = $_10; //@line 59 "/checkout/src/libcore/ptr.rs"
  $22 = ($21|0)==($7|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  if ($22) {
   label = 2;
   break;
  }
  $16 = $_10; //@line 59 "/checkout/src/libcore/ptr.rs"
  $17 = $_10; //@line 59 "/checkout/src/libcore/ptr.rs"
  $18 = ((($17)) + 12|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  $_10 = $18; //@line 59 "/checkout/src/libcore/ptr.rs"
  __THREW__ = 0;
  invoke_vi(258,($16|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
  $19 = __THREW__; __THREW__ = 0;
  $20 = $19&1;
  if ($20) {
   break;
  }
 }
 if ((label|0) == 2) {
  STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 $23 = ___cxa_find_matching_catch_2()|0;
 $24 = tempRet0;
 HEAP32[$personalityslot>>2] = $23;
 $25 = ((($personalityslot)) + 4|0);
 HEAP32[$25>>2] = $24;
 while(1) {
  $14 = $_10; //@line 59 "/checkout/src/libcore/ptr.rs"
  $15 = ($14|0)==($7|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  if ($15) {
   break;
  }
  $11 = $_10; //@line 59 "/checkout/src/libcore/ptr.rs"
  $12 = $_10; //@line 59 "/checkout/src/libcore/ptr.rs"
  $13 = ((($12)) + 12|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  $_10 = $13; //@line 59 "/checkout/src/libcore/ptr.rs"
  __ZN4core3ptr13drop_in_place17h1f12095180eca2a0E($11); //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 $8 = HEAP32[$personalityslot>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $9 = ((($personalityslot)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $10 = HEAP32[$9>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 ___resumeException($8|0);
 // unreachable;
}
function __ZN4core3ptr13drop_in_place17h6df0224222932d18E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $personalityslot = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $personalityslot = sp + 8|0;
 $arg0 = $0;
 $1 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $2 = HEAP32[$1>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $switch = ($2>>>0)<(4); //@line 59 "/checkout/src/libcore/ptr.rs"
 if ($switch) {
  STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 $3 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $4 = ((($3)) + 16|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 __THREW__ = 0;
 invoke_vi(245,($4|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  HEAP32[$personalityslot>>2] = $7;
  $9 = ((($personalityslot)) + 4|0);
  HEAP32[$9>>2] = $8;
  $10 = HEAP32[$personalityslot>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $11 = ((($personalityslot)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  $12 = HEAP32[$11>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  ___resumeException($10|0);
  // unreachable;
 } else {
  STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
}
function __ZN4core3ptr13drop_in_place17h6ec3dbe65a5e3525E($0) {
 $0 = $0|0;
 var $arg0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr13drop_in_place17h95882c5328b6b001E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $arg0 = 0, $personalityslot = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $personalityslot = sp + 8|0;
 $arg0 = $0;
 $1 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $2 = HEAP32[$1>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $3 = ((($1)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $4 = HEAP32[$3>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 __THREW__ = 0;
 invoke_vii(259,($2|0),($4|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $11 = ___cxa_find_matching_catch_2()|0;
  $12 = tempRet0;
  HEAP32[$personalityslot>>2] = $11;
  $13 = ((($personalityslot)) + 4|0);
  HEAP32[$13>>2] = $12;
  $14 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $15 = HEAP32[$14>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $16 = ((($14)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  $17 = HEAP32[$16>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  __ZN5alloc4heap8box_free17h546f4f6e40057b73E($15,$17); //@line 59 "/checkout/src/libcore/ptr.rs"
  $18 = HEAP32[$personalityslot>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $19 = ((($personalityslot)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  $20 = HEAP32[$19>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  ___resumeException($18|0);
  // unreachable;
 } else {
  $7 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $8 = HEAP32[$7>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $9 = ((($7)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  $10 = HEAP32[$9>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  __ZN5alloc4heap8box_free17h546f4f6e40057b73E($8,$10); //@line 59 "/checkout/src/libcore/ptr.rs"
  STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
}
function __ZN4core3ptr13drop_in_place17hd55485ccc898009aE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $arg0 = 0, $personalityslot = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $personalityslot = sp + 16|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($arg0)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $4 = HEAP32[$3>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $5 = HEAP32[$arg0>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $_10 = $5; //@line 59 "/checkout/src/libcore/ptr.rs"
 $6 = $_10; //@line 59 "/checkout/src/libcore/ptr.rs"
 $7 = (($6) + ($4<<3)|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 while(1) {
  $21 = $_10; //@line 59 "/checkout/src/libcore/ptr.rs"
  $22 = ($21|0)==($7|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  if ($22) {
   label = 2;
   break;
  }
  $16 = $_10; //@line 59 "/checkout/src/libcore/ptr.rs"
  $17 = $_10; //@line 59 "/checkout/src/libcore/ptr.rs"
  $18 = ((($17)) + 8|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  $_10 = $18; //@line 59 "/checkout/src/libcore/ptr.rs"
  __THREW__ = 0;
  invoke_vi(246,($16|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
  $19 = __THREW__; __THREW__ = 0;
  $20 = $19&1;
  if ($20) {
   break;
  }
 }
 if ((label|0) == 2) {
  STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 $23 = ___cxa_find_matching_catch_2()|0;
 $24 = tempRet0;
 HEAP32[$personalityslot>>2] = $23;
 $25 = ((($personalityslot)) + 4|0);
 HEAP32[$25>>2] = $24;
 while(1) {
  $14 = $_10; //@line 59 "/checkout/src/libcore/ptr.rs"
  $15 = ($14|0)==($7|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  if ($15) {
   break;
  }
  $11 = $_10; //@line 59 "/checkout/src/libcore/ptr.rs"
  $12 = $_10; //@line 59 "/checkout/src/libcore/ptr.rs"
  $13 = ((($12)) + 8|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  $_10 = $13; //@line 59 "/checkout/src/libcore/ptr.rs"
  __ZN4core3ptr13drop_in_place17h4ca7e74bbb163d7dE($11); //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 $8 = HEAP32[$personalityslot>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $9 = ((($personalityslot)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $10 = HEAP32[$9>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 ___resumeException($8|0);
 // unreachable;
}
function __ZN4core3ptr13drop_in_place17h993914d213c45a4eE($0) {
 $0 = $0|0;
 var $arg0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr13drop_in_place17h9be59e88b77b6d1fE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $cond = 0, $personalityslot = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $personalityslot = sp + 8|0;
 $arg0 = $0;
 $1 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $2 = HEAP32[$1>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $3 = ($2|0)==(0|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $4 = $3 ? 0 : 1; //@line 59 "/checkout/src/libcore/ptr.rs"
 $cond = ($4|0)==(0); //@line 59 "/checkout/src/libcore/ptr.rs"
 if ($cond) {
  STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 $5 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
 __THREW__ = 0;
 invoke_vi(246,($5|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch_2()|0;
  $9 = tempRet0;
  HEAP32[$personalityslot>>2] = $8;
  $10 = ((($personalityslot)) + 4|0);
  HEAP32[$10>>2] = $9;
  $11 = HEAP32[$personalityslot>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $12 = ((($personalityslot)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  $13 = HEAP32[$12>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  ___resumeException($11|0);
  // unreachable;
 } else {
  STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
}
function __ZN4core3ptr13drop_in_place17ha7ccb58bcd493979E($0) {
 $0 = $0|0;
 var $arg0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr13drop_in_place17hb0ec69cc02f70c4aE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $personalityslot = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $personalityslot = sp + 8|0;
 $arg0 = $0;
 $1 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $2 = HEAP32[$1>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 __THREW__ = 0;
 invoke_vi(260,($2|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  HEAP32[$personalityslot>>2] = $7;
  $9 = ((($personalityslot)) + 4|0);
  HEAP32[$9>>2] = $8;
  $10 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $11 = HEAP32[$10>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  __ZN5alloc4heap8box_free17h20558b8626b21c9cE($11); //@line 59 "/checkout/src/libcore/ptr.rs"
  $12 = HEAP32[$personalityslot>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $13 = ((($personalityslot)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  $14 = HEAP32[$13>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  ___resumeException($12|0);
  // unreachable;
 } else {
  $5 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $6 = HEAP32[$5>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  __ZN5alloc4heap8box_free17h20558b8626b21c9cE($6); //@line 59 "/checkout/src/libcore/ptr.rs"
  STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
}
function __ZN4core3ptr13drop_in_place17hc0a099156e59c979E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $arg0 = 0, $personalityslot = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $personalityslot = sp + 8|0;
 $arg0 = $0;
 $1 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $2 = HEAP32[$1>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $3 = ((($1)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $4 = HEAP32[$3>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 __THREW__ = 0;
 invoke_vii(261,($2|0),($4|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $11 = ___cxa_find_matching_catch_2()|0;
  $12 = tempRet0;
  HEAP32[$personalityslot>>2] = $11;
  $13 = ((($personalityslot)) + 4|0);
  HEAP32[$13>>2] = $12;
  $14 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $15 = HEAP32[$14>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $16 = ((($14)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  $17 = HEAP32[$16>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  __ZN5alloc4heap8box_free17he9a97f96773fb35cE($15,$17); //@line 59 "/checkout/src/libcore/ptr.rs"
  $18 = HEAP32[$personalityslot>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $19 = ((($personalityslot)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  $20 = HEAP32[$19>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  ___resumeException($18|0);
  // unreachable;
 } else {
  $7 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $8 = HEAP32[$7>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $9 = ((($7)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  $10 = HEAP32[$9>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  __ZN5alloc4heap8box_free17he9a97f96773fb35cE($8,$10); //@line 59 "/checkout/src/libcore/ptr.rs"
  STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
}
function __ZN4core3ptr13drop_in_place17hc7ed0b862d58d0c9E($0) {
 $0 = $0|0;
 var $arg0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr13drop_in_place17hd892534b9a8ccfedE($0) {
 $0 = $0|0;
 var $arg0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr13drop_in_place17hdf63de801541aaabE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $personalityslot = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $personalityslot = sp + 8|0;
 $arg0 = $0;
 $1 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
 __THREW__ = 0;
 invoke_vi(262,($1|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 do {
  if ($3) {
   $10 = ___cxa_find_matching_catch_2()|0;
   $11 = tempRet0;
   HEAP32[$personalityslot>>2] = $10;
   $12 = ((($personalityslot)) + 4|0);
   HEAP32[$12>>2] = $11;
   $13 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
   __ZN4core3ptr13drop_in_place17he3c15c5a2bddefe7E($13); //@line 59 "/checkout/src/libcore/ptr.rs"
  } else {
   $7 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
   __THREW__ = 0;
   invoke_vi(263,($7|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if ($9) {
    $14 = ___cxa_find_matching_catch_2()|0;
    $15 = tempRet0;
    HEAP32[$personalityslot>>2] = $14;
    $16 = ((($personalityslot)) + 4|0);
    HEAP32[$16>>2] = $15;
    break;
   } else {
    STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
   }
  }
 } while(0);
 $4 = HEAP32[$personalityslot>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $5 = ((($personalityslot)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $6 = HEAP32[$5>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 ___resumeException($4|0);
 // unreachable;
}
function __ZN4core3ptr13drop_in_place17he3c15c5a2bddefe7E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $personalityslot = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $personalityslot = sp + 8|0;
 $arg0 = $0;
 $1 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
 __THREW__ = 0;
 invoke_vi(264,($1|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$personalityslot>>2] = $4;
  $6 = ((($personalityslot)) + 4|0);
  HEAP32[$6>>2] = $5;
  $7 = HEAP32[$personalityslot>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $8 = ((($personalityslot)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  $9 = HEAP32[$8>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  ___resumeException($7|0);
  // unreachable;
 } else {
  STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
}
function __ZN4core3ptr13drop_in_place17heae217dde415a979E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $personalityslot = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $personalityslot = sp + 8|0;
 $arg0 = $0;
 $1 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
 __THREW__ = 0;
 invoke_vi(265,($1|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 do {
  if ($3) {
   $10 = ___cxa_find_matching_catch_2()|0;
   $11 = tempRet0;
   HEAP32[$personalityslot>>2] = $10;
   $12 = ((($personalityslot)) + 4|0);
   HEAP32[$12>>2] = $11;
   $13 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
   __ZN4core3ptr13drop_in_place17hd32eaee5678338c6E($13); //@line 59 "/checkout/src/libcore/ptr.rs"
  } else {
   $7 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
   __THREW__ = 0;
   invoke_vi(266,($7|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if ($9) {
    $14 = ___cxa_find_matching_catch_2()|0;
    $15 = tempRet0;
    HEAP32[$personalityslot>>2] = $14;
    $16 = ((($personalityslot)) + 4|0);
    HEAP32[$16>>2] = $15;
    break;
   } else {
    STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
   }
  }
 } while(0);
 $4 = HEAP32[$personalityslot>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $5 = ((($personalityslot)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $6 = HEAP32[$5>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 ___resumeException($4|0);
 // unreachable;
}
function __ZN4core3ptr13drop_in_place17hd32eaee5678338c6E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $personalityslot = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $personalityslot = sp + 8|0;
 $arg0 = $0;
 $1 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
 __THREW__ = 0;
 invoke_vi(267,($1|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$personalityslot>>2] = $4;
  $6 = ((($personalityslot)) + 4|0);
  HEAP32[$6>>2] = $5;
  $7 = HEAP32[$personalityslot>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $8 = ((($personalityslot)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  $9 = HEAP32[$8>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  ___resumeException($7|0);
  // unreachable;
 } else {
  STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
}
function __ZN4core3ptr13drop_in_place17hefc903a20533cb51E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $2 = HEAP32[$1>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $3 = ((($1)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $4 = HEAP32[$3>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 __ZN5alloc4heap8box_free17h42c932a9e0b09cc3E($2,$4); //@line 59 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr13drop_in_place17hfde6b988799b2301E($0) {
 $0 = $0|0;
 var $arg0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 STACKTOP = sp;return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core5clone5Clone5clone17h74371fa23fb4a621E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, $arg0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0; //@line 103 "/checkout/src/libcore/clone.rs"
 $2 = +HEAPF32[$1>>2]; //@line 103 "/checkout/src/libcore/clone.rs"
 STACKTOP = sp;return (+$2); //@line 103 "/checkout/src/libcore/clone.rs"
}
function __ZN4core5clone5Clone5clone17h868c1ec8c3c5394aE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $arg0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0; //@line 103 "/checkout/src/libcore/clone.rs"
 $2 = HEAP32[$1>>2]|0; //@line 103 "/checkout/src/libcore/clone.rs"
 STACKTOP = sp;return ($2|0); //@line 103 "/checkout/src/libcore/clone.rs"
}
function __ZN41__LT_core__mem__ManuallyDrop_LT_T_GT__GT_10into_inner17ha408edfe4da19cb5E($0,$slot) {
 $0 = $0|0;
 $slot = $slot|0;
 var $_2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_2 = sp; //@line 1 "/checkout/src/libcore/mem.rs"
 ;HEAP32[$_2>>2]=HEAP32[$slot>>2]|0;HEAP32[$_2+4>>2]=HEAP32[$slot+4>>2]|0;HEAP32[$_2+8>>2]=HEAP32[$slot+8>>2]|0; //@line 979 "/checkout/src/libcore/mem.rs"
 ;HEAP32[$0>>2]=HEAP32[$_2>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_2+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_2+8>>2]|0; //@line 979 "/checkout/src/libcore/mem.rs"
 STACKTOP = sp;return; //@line 981 "/checkout/src/libcore/mem.rs"
}
function __ZN41__LT_core__mem__ManuallyDrop_LT_T_GT__GT_3new17hd38fa85c3ed08875E($0,$value) {
 $0 = $0|0;
 $value = $value|0;
 var $_2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_2 = sp; //@line 1 "/checkout/src/libcore/mem.rs"
 ;HEAP32[$_2>>2]=HEAP32[$value>>2]|0;HEAP32[$_2+4>>2]=HEAP32[$value+4>>2]|0;HEAP32[$_2+8>>2]=HEAP32[$value+8>>2]|0; //@line 963 "/checkout/src/libcore/mem.rs"
 ;HEAP32[$0>>2]=HEAP32[$_2>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_2+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_2+8>>2]|0; //@line 963 "/checkout/src/libcore/mem.rs"
 STACKTOP = sp;return; //@line 964 "/checkout/src/libcore/mem.rs"
}
function __ZN45__LT_f32_u20_as_u20_core__ops__arith__Add_GT_3add17h815deb0ce4b370b5E($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, $3 = 0.0, $4 = 0.0, $other = 0.0, $self = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $other = $1;
 $2 = $self; //@line 97 "/checkout/src/libcore/ops/arith.rs"
 $3 = $other; //@line 97 "/checkout/src/libcore/ops/arith.rs"
 $4 = $2 + $3; //@line 97 "/checkout/src/libcore/ops/arith.rs"
 STACKTOP = sp;return (+$4); //@line 97 "/checkout/src/libcore/ops/arith.rs"
}
function __ZN45__LT_f32_u20_as_u20_core__ops__arith__Div_GT_3div17ha905544e578c4868E($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, $3 = 0.0, $4 = 0.0, $other = 0.0, $self = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $other = $1;
 $2 = $self; //@line 447 "/checkout/src/libcore/ops/arith.rs"
 $3 = $other; //@line 447 "/checkout/src/libcore/ops/arith.rs"
 $4 = $2 / $3; //@line 447 "/checkout/src/libcore/ops/arith.rs"
 STACKTOP = sp;return (+$4); //@line 447 "/checkout/src/libcore/ops/arith.rs"
}
function __ZN45__LT_f32_u20_as_u20_core__ops__arith__Mul_GT_3mul17h85d76a03b8e09b50E($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, $3 = 0.0, $4 = 0.0, $other = 0.0, $self = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $other = $1;
 $2 = $self; //@line 309 "/checkout/src/libcore/ops/arith.rs"
 $3 = $other; //@line 309 "/checkout/src/libcore/ops/arith.rs"
 $4 = $2 * $3; //@line 309 "/checkout/src/libcore/ops/arith.rs"
 STACKTOP = sp;return (+$4); //@line 309 "/checkout/src/libcore/ops/arith.rs"
}
function __ZN45__LT_f32_u20_as_u20_core__ops__arith__Neg_GT_3neg17h695fa36ec0cbefdfE($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $self = 0.0, $x = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 597 "/checkout/src/libcore/ops/arith.rs"
 $x = $1; //@line 597 "/checkout/src/libcore/ops/arith.rs"
 $2 = $x; //@line 605 "/checkout/src/libcore/ops/arith.rs"
 $3 = -$2; //@line 605 "/checkout/src/libcore/ops/arith.rs"
 STACKTOP = sp;return (+$3); //@line 597 "/checkout/src/libcore/ops/arith.rs"
}
function __ZN45__LT_f32_u20_as_u20_core__ops__arith__Sub_GT_3sub17he0a1eb3f9d1069c3E($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, $3 = 0.0, $4 = 0.0, $other = 0.0, $self = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $other = $1;
 $2 = $self; //@line 192 "/checkout/src/libcore/ops/arith.rs"
 $3 = $other; //@line 192 "/checkout/src/libcore/ops/arith.rs"
 $4 = $2 - $3; //@line 192 "/checkout/src/libcore/ops/arith.rs"
 STACKTOP = sp;return (+$4); //@line 192 "/checkout/src/libcore/ops/arith.rs"
}
function __ZN45__LT_u32_u20_as_u20_core__ops__arith__Div_GT_3div17h4c1cdf4a0c1b710fE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $other = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $other = $1;
 $2 = $self; //@line 431 "/checkout/src/libcore/ops/arith.rs"
 $3 = $other; //@line 431 "/checkout/src/libcore/ops/arith.rs"
 $4 = ($3|0)==(0); //@line 431 "/checkout/src/libcore/ops/arith.rs"
 $5 = $4; //@line 431 "/checkout/src/libcore/ops/arith.rs"
 if ($5) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(3712); //@line 431 "/checkout/src/libcore/ops/arith.rs"
  // unreachable; //@line 431 "/checkout/src/libcore/ops/arith.rs"
 } else {
  $6 = (($2>>>0) / ($3>>>0))&-1; //@line 431 "/checkout/src/libcore/ops/arith.rs"
  STACKTOP = sp;return ($6|0); //@line 431 "/checkout/src/libcore/ops/arith.rs"
 }
 return (0)|0;
}
function __ZN45__LT_u32_u20_as_u20_core__ops__arith__Rem_GT_3rem17h6ed4c6326e23f004E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $other = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $other = $1;
 $2 = $self; //@line 513 "/checkout/src/libcore/ops/arith.rs"
 $3 = $other; //@line 513 "/checkout/src/libcore/ops/arith.rs"
 $4 = ($3|0)==(0); //@line 513 "/checkout/src/libcore/ops/arith.rs"
 $5 = $4; //@line 513 "/checkout/src/libcore/ops/arith.rs"
 if ($5) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(3736); //@line 513 "/checkout/src/libcore/ops/arith.rs"
  // unreachable; //@line 513 "/checkout/src/libcore/ops/arith.rs"
 } else {
  $6 = (($2>>>0) % ($3>>>0))&-1; //@line 513 "/checkout/src/libcore/ops/arith.rs"
  STACKTOP = sp;return ($6|0); //@line 513 "/checkout/src/libcore/ops/arith.rs"
 }
 return (0)|0;
}
function __ZN47__LT_core__result__Result_LT_T_C__u20_E_GT__GT_14unwrap_or_else17h902c3f54ce7aa72aE($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_10 = 0, $_11 = 0, $_12 = 0, $_8 = 0, $_9 = 0, $cond = 0, $cond1 = 0, $e = 0, $personalityslot = 0, $switch = 0, $t = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $personalityslot = sp + 48|0; //@line 1 "/checkout/src/libcore/result.rs"
 $_9 = sp + 32|0; //@line 1 "/checkout/src/libcore/result.rs"
 $_8 = sp + 20|0; //@line 1 "/checkout/src/libcore/result.rs"
 $e = sp + 8|0; //@line 1 "/checkout/src/libcore/result.rs"
 $_10 = 0; //@line 747 "/checkout/src/libcore/result.rs"
 $_11 = 0; //@line 747 "/checkout/src/libcore/result.rs"
 $_12 = 0; //@line 747 "/checkout/src/libcore/result.rs"
 $_10 = 1; //@line 747 "/checkout/src/libcore/result.rs"
 $_11 = 1; //@line 747 "/checkout/src/libcore/result.rs"
 $_12 = 1; //@line 747 "/checkout/src/libcore/result.rs"
 $0 = HEAP32[$self>>2]|0; //@line 747 "/checkout/src/libcore/result.rs"
 $switch = ($0>>>0)<(1); //@line 747 "/checkout/src/libcore/result.rs"
 do {
  if ($switch) {
   $_11 = 0; //@line 747 "/checkout/src/libcore/result.rs"
   $4 = ((($self)) + 4|0); //@line 747 "/checkout/src/libcore/result.rs"
   $5 = HEAP32[$4>>2]|0; //@line 747 "/checkout/src/libcore/result.rs"
   $t = $5; //@line 747 "/checkout/src/libcore/result.rs"
   $6 = $t; //@line 747 "/checkout/src/libcore/result.rs"
   $_0 = $6; //@line 747 "/checkout/src/libcore/result.rs"
  } else {
   $_10 = 0; //@line 748 "/checkout/src/libcore/result.rs"
   $7 = ((($self)) + 4|0); //@line 748 "/checkout/src/libcore/result.rs"
   ;HEAP32[$e>>2]=HEAP32[$7>>2]|0;HEAP32[$e+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$e+8>>2]=HEAP32[$7+8>>2]|0; //@line 748 "/checkout/src/libcore/result.rs"
   $_12 = 0; //@line 748 "/checkout/src/libcore/result.rs"
   ;HEAP32[$_9>>2]=HEAP32[$e>>2]|0;HEAP32[$_9+4>>2]=HEAP32[$e+4>>2]|0;HEAP32[$_9+8>>2]=HEAP32[$e+8>>2]|0; //@line 748 "/checkout/src/libcore/result.rs"
   ;HEAP32[$_8>>2]=HEAP32[$_9>>2]|0;HEAP32[$_8+4>>2]=HEAP32[$_9+4>>2]|0;HEAP32[$_8+8>>2]=HEAP32[$_9+8>>2]|0; //@line 748 "/checkout/src/libcore/result.rs"
   __THREW__ = 0;
   $8 = (invoke_ii(268,($_8|0))|0); //@line 748 "/checkout/src/libcore/result.rs"
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if (!($10)) {
    $_0 = $8; //@line 748 "/checkout/src/libcore/result.rs"
    break;
   }
   $23 = ___cxa_find_matching_catch_2()|0;
   $24 = tempRet0;
   HEAP32[$personalityslot>>2] = $23;
   $25 = ((($personalityslot)) + 4|0);
   HEAP32[$25>>2] = $24;
   $26 = HEAP32[$self>>2]|0; //@line 750 "/checkout/src/libcore/result.rs"
   $cond1 = ($26|0)==(0); //@line 750 "/checkout/src/libcore/result.rs"
   if ($cond1) {
    $14 = $_11; //@line 750 "/checkout/src/libcore/result.rs"
    $15 = $14&1; //@line 750 "/checkout/src/libcore/result.rs"
    if ($15) {
     $_11 = 0; //@line 750 "/checkout/src/libcore/result.rs"
    }
   } else {
    $16 = $_10; //@line 750 "/checkout/src/libcore/result.rs"
    $17 = $16&1; //@line 750 "/checkout/src/libcore/result.rs"
    if ($17) {
     $_10 = 0; //@line 750 "/checkout/src/libcore/result.rs"
    }
   }
   $1 = HEAP32[$personalityslot>>2]|0; //@line 745 "/checkout/src/libcore/result.rs"
   $2 = ((($personalityslot)) + 4|0); //@line 745 "/checkout/src/libcore/result.rs"
   $3 = HEAP32[$2>>2]|0; //@line 745 "/checkout/src/libcore/result.rs"
   ___resumeException($1|0);
   // unreachable;
  }
 } while(0);
 $11 = $_12; //@line 750 "/checkout/src/libcore/result.rs"
 $12 = $11&1; //@line 750 "/checkout/src/libcore/result.rs"
 if ($12) {
  $_12 = 0; //@line 750 "/checkout/src/libcore/result.rs"
 }
 $13 = HEAP32[$self>>2]|0; //@line 750 "/checkout/src/libcore/result.rs"
 $cond = ($13|0)==(0); //@line 750 "/checkout/src/libcore/result.rs"
 if ($cond) {
  $19 = $_11; //@line 750 "/checkout/src/libcore/result.rs"
  $20 = $19&1; //@line 750 "/checkout/src/libcore/result.rs"
  if (!($20)) {
   $18 = $_0; //@line 750 "/checkout/src/libcore/result.rs"
   STACKTOP = sp;return ($18|0); //@line 750 "/checkout/src/libcore/result.rs"
  }
  $_11 = 0; //@line 750 "/checkout/src/libcore/result.rs"
  $18 = $_0; //@line 750 "/checkout/src/libcore/result.rs"
  STACKTOP = sp;return ($18|0); //@line 750 "/checkout/src/libcore/result.rs"
 } else {
  $21 = $_10; //@line 750 "/checkout/src/libcore/result.rs"
  $22 = $21&1; //@line 750 "/checkout/src/libcore/result.rs"
  if (!($22)) {
   $18 = $_0; //@line 750 "/checkout/src/libcore/result.rs"
   STACKTOP = sp;return ($18|0); //@line 750 "/checkout/src/libcore/result.rs"
  }
  $_10 = 0; //@line 750 "/checkout/src/libcore/result.rs"
  $18 = $_0; //@line 750 "/checkout/src/libcore/result.rs"
  STACKTOP = sp;return ($18|0); //@line 750 "/checkout/src/libcore/result.rs"
 }
 return (0)|0;
}
function __ZN47__LT_core__result__Result_LT_T_C__u20_E_GT__GT_3map17h63e7db712b2f2e4bE($0,$self) {
 $0 = $0|0;
 $self = $self|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_11 = 0, $_12 = 0, $_13 = 0, $_8 = 0, $cond = 0, $cond1 = 0, $e = 0, $personalityslot = 0, $switch = 0, $t = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $personalityslot = sp + 32|0; //@line 1 "/checkout/src/libcore/result.rs"
 $_10 = sp + 20|0; //@line 1 "/checkout/src/libcore/result.rs"
 $e = sp + 4|0; //@line 1 "/checkout/src/libcore/result.rs"
 $_12 = 0; //@line 468 "/checkout/src/libcore/result.rs"
 $_11 = 0; //@line 468 "/checkout/src/libcore/result.rs"
 $_13 = 0; //@line 468 "/checkout/src/libcore/result.rs"
 $_11 = 1; //@line 468 "/checkout/src/libcore/result.rs"
 $_12 = 1; //@line 468 "/checkout/src/libcore/result.rs"
 $_13 = 1; //@line 468 "/checkout/src/libcore/result.rs"
 $1 = HEAP32[$self>>2]|0; //@line 468 "/checkout/src/libcore/result.rs"
 $switch = ($1>>>0)<(1); //@line 468 "/checkout/src/libcore/result.rs"
 do {
  if ($switch) {
   $_12 = 0; //@line 468 "/checkout/src/libcore/result.rs"
   $5 = ((($self)) + 4|0); //@line 468 "/checkout/src/libcore/result.rs"
   $6 = HEAP32[$5>>2]|0; //@line 468 "/checkout/src/libcore/result.rs"
   $t = $6; //@line 468 "/checkout/src/libcore/result.rs"
   $_13 = 0; //@line 468 "/checkout/src/libcore/result.rs"
   $7 = $t; //@line 468 "/checkout/src/libcore/result.rs"
   $_8 = $7; //@line 468 "/checkout/src/libcore/result.rs"
   $8 = $_8; //@line 468 "/checkout/src/libcore/result.rs"
   __THREW__ = 0;
   $9 = (invoke_ii(269,($8|0))|0); //@line 468 "/checkout/src/libcore/result.rs"
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    HEAP32[$0>>2] = 0; //@line 468 "/checkout/src/libcore/result.rs"
    $16 = ((($0)) + 4|0); //@line 468 "/checkout/src/libcore/result.rs"
    HEAP32[$16>>2] = $9; //@line 468 "/checkout/src/libcore/result.rs"
    break;
   }
   $26 = ___cxa_find_matching_catch_2()|0;
   $27 = tempRet0;
   HEAP32[$personalityslot>>2] = $26;
   $28 = ((($personalityslot)) + 4|0);
   HEAP32[$28>>2] = $27;
   $29 = HEAP32[$self>>2]|0; //@line 471 "/checkout/src/libcore/result.rs"
   $cond1 = ($29|0)==(0); //@line 471 "/checkout/src/libcore/result.rs"
   if ($cond1) {
    $18 = $_12; //@line 471 "/checkout/src/libcore/result.rs"
    $19 = $18&1; //@line 471 "/checkout/src/libcore/result.rs"
    if ($19) {
     $_12 = 0; //@line 471 "/checkout/src/libcore/result.rs"
    }
   } else {
    $20 = $_11; //@line 471 "/checkout/src/libcore/result.rs"
    $21 = $20&1; //@line 471 "/checkout/src/libcore/result.rs"
    if ($21) {
     $_11 = 0; //@line 471 "/checkout/src/libcore/result.rs"
    }
   }
   $2 = HEAP32[$personalityslot>>2]|0; //@line 466 "/checkout/src/libcore/result.rs"
   $3 = ((($personalityslot)) + 4|0); //@line 466 "/checkout/src/libcore/result.rs"
   $4 = HEAP32[$3>>2]|0; //@line 466 "/checkout/src/libcore/result.rs"
   ___resumeException($2|0);
   // unreachable;
  } else {
   $_11 = 0; //@line 469 "/checkout/src/libcore/result.rs"
   $12 = ((($self)) + 4|0); //@line 469 "/checkout/src/libcore/result.rs"
   ;HEAP32[$e>>2]=HEAP32[$12>>2]|0;HEAP32[$e+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$e+8>>2]=HEAP32[$12+8>>2]|0; //@line 469 "/checkout/src/libcore/result.rs"
   ;HEAP32[$_10>>2]=HEAP32[$e>>2]|0;HEAP32[$_10+4>>2]=HEAP32[$e+4>>2]|0;HEAP32[$_10+8>>2]=HEAP32[$e+8>>2]|0; //@line 469 "/checkout/src/libcore/result.rs"
   HEAP32[$0>>2] = 1; //@line 469 "/checkout/src/libcore/result.rs"
   $13 = ((($0)) + 4|0); //@line 469 "/checkout/src/libcore/result.rs"
   ;HEAP32[$13>>2]=HEAP32[$_10>>2]|0;HEAP32[$13+4>>2]=HEAP32[$_10+4>>2]|0;HEAP32[$13+8>>2]=HEAP32[$_10+8>>2]|0; //@line 469 "/checkout/src/libcore/result.rs"
  }
 } while(0);
 $14 = $_13; //@line 471 "/checkout/src/libcore/result.rs"
 $15 = $14&1; //@line 471 "/checkout/src/libcore/result.rs"
 if ($15) {
  $_13 = 0; //@line 471 "/checkout/src/libcore/result.rs"
 }
 $17 = HEAP32[$self>>2]|0; //@line 471 "/checkout/src/libcore/result.rs"
 $cond = ($17|0)==(0); //@line 471 "/checkout/src/libcore/result.rs"
 if ($cond) {
  $22 = $_12; //@line 471 "/checkout/src/libcore/result.rs"
  $23 = $22&1; //@line 471 "/checkout/src/libcore/result.rs"
  if (!($23)) {
   STACKTOP = sp;return; //@line 471 "/checkout/src/libcore/result.rs"
  }
  $_12 = 0; //@line 471 "/checkout/src/libcore/result.rs"
  STACKTOP = sp;return; //@line 471 "/checkout/src/libcore/result.rs"
 } else {
  $24 = $_11; //@line 471 "/checkout/src/libcore/result.rs"
  $25 = $24&1; //@line 471 "/checkout/src/libcore/result.rs"
  if (!($25)) {
   STACKTOP = sp;return; //@line 471 "/checkout/src/libcore/result.rs"
  }
  $_11 = 0; //@line 471 "/checkout/src/libcore/result.rs"
  STACKTOP = sp;return; //@line 471 "/checkout/src/libcore/result.rs"
 }
}
function __ZN47__LT_core__result__Result_LT_T_C__u20_E_GT__GT_3map17h8f564d7bef5b07b3E($0,$self) {
 $0 = $0|0;
 $self = $self|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_11 = 0, $_12 = 0, $_13 = 0, $_8 = 0, $cond = 0, $cond1 = 0, $e = 0, $personalityslot = 0, $switch = 0, $t = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $personalityslot = sp + 32|0; //@line 1 "/checkout/src/libcore/result.rs"
 $_10 = sp + 20|0; //@line 1 "/checkout/src/libcore/result.rs"
 $e = sp + 4|0; //@line 1 "/checkout/src/libcore/result.rs"
 $_12 = 0; //@line 468 "/checkout/src/libcore/result.rs"
 $_11 = 0; //@line 468 "/checkout/src/libcore/result.rs"
 $_13 = 0; //@line 468 "/checkout/src/libcore/result.rs"
 $_11 = 1; //@line 468 "/checkout/src/libcore/result.rs"
 $_12 = 1; //@line 468 "/checkout/src/libcore/result.rs"
 $_13 = 1; //@line 468 "/checkout/src/libcore/result.rs"
 $1 = HEAP32[$self>>2]|0; //@line 468 "/checkout/src/libcore/result.rs"
 $switch = ($1>>>0)<(1); //@line 468 "/checkout/src/libcore/result.rs"
 do {
  if ($switch) {
   $_12 = 0; //@line 468 "/checkout/src/libcore/result.rs"
   $5 = ((($self)) + 4|0); //@line 468 "/checkout/src/libcore/result.rs"
   $6 = HEAP32[$5>>2]|0; //@line 468 "/checkout/src/libcore/result.rs"
   $t = $6; //@line 468 "/checkout/src/libcore/result.rs"
   $_13 = 0; //@line 468 "/checkout/src/libcore/result.rs"
   $7 = $t; //@line 468 "/checkout/src/libcore/result.rs"
   $_8 = $7; //@line 468 "/checkout/src/libcore/result.rs"
   $8 = $_8; //@line 468 "/checkout/src/libcore/result.rs"
   __THREW__ = 0;
   $9 = (invoke_ii(270,($8|0))|0); //@line 468 "/checkout/src/libcore/result.rs"
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    HEAP32[$0>>2] = 0; //@line 468 "/checkout/src/libcore/result.rs"
    $16 = ((($0)) + 4|0); //@line 468 "/checkout/src/libcore/result.rs"
    HEAP32[$16>>2] = $9; //@line 468 "/checkout/src/libcore/result.rs"
    break;
   }
   $26 = ___cxa_find_matching_catch_2()|0;
   $27 = tempRet0;
   HEAP32[$personalityslot>>2] = $26;
   $28 = ((($personalityslot)) + 4|0);
   HEAP32[$28>>2] = $27;
   $29 = HEAP32[$self>>2]|0; //@line 471 "/checkout/src/libcore/result.rs"
   $cond1 = ($29|0)==(0); //@line 471 "/checkout/src/libcore/result.rs"
   if ($cond1) {
    $18 = $_12; //@line 471 "/checkout/src/libcore/result.rs"
    $19 = $18&1; //@line 471 "/checkout/src/libcore/result.rs"
    if ($19) {
     $_12 = 0; //@line 471 "/checkout/src/libcore/result.rs"
    }
   } else {
    $20 = $_11; //@line 471 "/checkout/src/libcore/result.rs"
    $21 = $20&1; //@line 471 "/checkout/src/libcore/result.rs"
    if ($21) {
     $_11 = 0; //@line 471 "/checkout/src/libcore/result.rs"
    }
   }
   $2 = HEAP32[$personalityslot>>2]|0; //@line 466 "/checkout/src/libcore/result.rs"
   $3 = ((($personalityslot)) + 4|0); //@line 466 "/checkout/src/libcore/result.rs"
   $4 = HEAP32[$3>>2]|0; //@line 466 "/checkout/src/libcore/result.rs"
   ___resumeException($2|0);
   // unreachable;
  } else {
   $_11 = 0; //@line 469 "/checkout/src/libcore/result.rs"
   $12 = ((($self)) + 4|0); //@line 469 "/checkout/src/libcore/result.rs"
   ;HEAP32[$e>>2]=HEAP32[$12>>2]|0;HEAP32[$e+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$e+8>>2]=HEAP32[$12+8>>2]|0; //@line 469 "/checkout/src/libcore/result.rs"
   ;HEAP32[$_10>>2]=HEAP32[$e>>2]|0;HEAP32[$_10+4>>2]=HEAP32[$e+4>>2]|0;HEAP32[$_10+8>>2]=HEAP32[$e+8>>2]|0; //@line 469 "/checkout/src/libcore/result.rs"
   HEAP32[$0>>2] = 1; //@line 469 "/checkout/src/libcore/result.rs"
   $13 = ((($0)) + 4|0); //@line 469 "/checkout/src/libcore/result.rs"
   ;HEAP32[$13>>2]=HEAP32[$_10>>2]|0;HEAP32[$13+4>>2]=HEAP32[$_10+4>>2]|0;HEAP32[$13+8>>2]=HEAP32[$_10+8>>2]|0; //@line 469 "/checkout/src/libcore/result.rs"
  }
 } while(0);
 $14 = $_13; //@line 471 "/checkout/src/libcore/result.rs"
 $15 = $14&1; //@line 471 "/checkout/src/libcore/result.rs"
 if ($15) {
  $_13 = 0; //@line 471 "/checkout/src/libcore/result.rs"
 }
 $17 = HEAP32[$self>>2]|0; //@line 471 "/checkout/src/libcore/result.rs"
 $cond = ($17|0)==(0); //@line 471 "/checkout/src/libcore/result.rs"
 if ($cond) {
  $22 = $_12; //@line 471 "/checkout/src/libcore/result.rs"
  $23 = $22&1; //@line 471 "/checkout/src/libcore/result.rs"
  if (!($23)) {
   STACKTOP = sp;return; //@line 471 "/checkout/src/libcore/result.rs"
  }
  $_12 = 0; //@line 471 "/checkout/src/libcore/result.rs"
  STACKTOP = sp;return; //@line 471 "/checkout/src/libcore/result.rs"
 } else {
  $24 = $_11; //@line 471 "/checkout/src/libcore/result.rs"
  $25 = $24&1; //@line 471 "/checkout/src/libcore/result.rs"
  if (!($25)) {
   STACKTOP = sp;return; //@line 471 "/checkout/src/libcore/result.rs"
  }
  $_11 = 0; //@line 471 "/checkout/src/libcore/result.rs"
  STACKTOP = sp;return; //@line 471 "/checkout/src/libcore/result.rs"
 }
}
function __ZN47__LT_core__result__Result_LT_T_C__u20_E_GT__GT_3map17h91d241b6f5bb9943E($0,$self) {
 $0 = $0|0;
 $self = $self|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_11 = 0, $_12 = 0, $_13 = 0, $_8 = 0, $cond = 0, $cond1 = 0, $e = 0, $personalityslot = 0, $switch = 0, $t = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $personalityslot = sp + 32|0; //@line 1 "/checkout/src/libcore/result.rs"
 $_10 = sp + 20|0; //@line 1 "/checkout/src/libcore/result.rs"
 $e = sp + 4|0; //@line 1 "/checkout/src/libcore/result.rs"
 $_12 = 0; //@line 468 "/checkout/src/libcore/result.rs"
 $_11 = 0; //@line 468 "/checkout/src/libcore/result.rs"
 $_13 = 0; //@line 468 "/checkout/src/libcore/result.rs"
 $_11 = 1; //@line 468 "/checkout/src/libcore/result.rs"
 $_12 = 1; //@line 468 "/checkout/src/libcore/result.rs"
 $_13 = 1; //@line 468 "/checkout/src/libcore/result.rs"
 $1 = HEAP32[$self>>2]|0; //@line 468 "/checkout/src/libcore/result.rs"
 $switch = ($1>>>0)<(1); //@line 468 "/checkout/src/libcore/result.rs"
 do {
  if ($switch) {
   $_12 = 0; //@line 468 "/checkout/src/libcore/result.rs"
   $5 = ((($self)) + 4|0); //@line 468 "/checkout/src/libcore/result.rs"
   $6 = HEAP32[$5>>2]|0; //@line 468 "/checkout/src/libcore/result.rs"
   $t = $6; //@line 468 "/checkout/src/libcore/result.rs"
   $_13 = 0; //@line 468 "/checkout/src/libcore/result.rs"
   $7 = $t; //@line 468 "/checkout/src/libcore/result.rs"
   $_8 = $7; //@line 468 "/checkout/src/libcore/result.rs"
   $8 = $_8; //@line 468 "/checkout/src/libcore/result.rs"
   __THREW__ = 0;
   $9 = (invoke_ii(271,($8|0))|0); //@line 468 "/checkout/src/libcore/result.rs"
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    HEAP32[$0>>2] = 0; //@line 468 "/checkout/src/libcore/result.rs"
    $16 = ((($0)) + 4|0); //@line 468 "/checkout/src/libcore/result.rs"
    HEAP32[$16>>2] = $9; //@line 468 "/checkout/src/libcore/result.rs"
    break;
   }
   $26 = ___cxa_find_matching_catch_2()|0;
   $27 = tempRet0;
   HEAP32[$personalityslot>>2] = $26;
   $28 = ((($personalityslot)) + 4|0);
   HEAP32[$28>>2] = $27;
   $29 = HEAP32[$self>>2]|0; //@line 471 "/checkout/src/libcore/result.rs"
   $cond1 = ($29|0)==(0); //@line 471 "/checkout/src/libcore/result.rs"
   if ($cond1) {
    $18 = $_12; //@line 471 "/checkout/src/libcore/result.rs"
    $19 = $18&1; //@line 471 "/checkout/src/libcore/result.rs"
    if ($19) {
     $_12 = 0; //@line 471 "/checkout/src/libcore/result.rs"
    }
   } else {
    $20 = $_11; //@line 471 "/checkout/src/libcore/result.rs"
    $21 = $20&1; //@line 471 "/checkout/src/libcore/result.rs"
    if ($21) {
     $_11 = 0; //@line 471 "/checkout/src/libcore/result.rs"
    }
   }
   $2 = HEAP32[$personalityslot>>2]|0; //@line 466 "/checkout/src/libcore/result.rs"
   $3 = ((($personalityslot)) + 4|0); //@line 466 "/checkout/src/libcore/result.rs"
   $4 = HEAP32[$3>>2]|0; //@line 466 "/checkout/src/libcore/result.rs"
   ___resumeException($2|0);
   // unreachable;
  } else {
   $_11 = 0; //@line 469 "/checkout/src/libcore/result.rs"
   $12 = ((($self)) + 4|0); //@line 469 "/checkout/src/libcore/result.rs"
   ;HEAP32[$e>>2]=HEAP32[$12>>2]|0;HEAP32[$e+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$e+8>>2]=HEAP32[$12+8>>2]|0; //@line 469 "/checkout/src/libcore/result.rs"
   ;HEAP32[$_10>>2]=HEAP32[$e>>2]|0;HEAP32[$_10+4>>2]=HEAP32[$e+4>>2]|0;HEAP32[$_10+8>>2]=HEAP32[$e+8>>2]|0; //@line 469 "/checkout/src/libcore/result.rs"
   HEAP32[$0>>2] = 1; //@line 469 "/checkout/src/libcore/result.rs"
   $13 = ((($0)) + 4|0); //@line 469 "/checkout/src/libcore/result.rs"
   ;HEAP32[$13>>2]=HEAP32[$_10>>2]|0;HEAP32[$13+4>>2]=HEAP32[$_10+4>>2]|0;HEAP32[$13+8>>2]=HEAP32[$_10+8>>2]|0; //@line 469 "/checkout/src/libcore/result.rs"
  }
 } while(0);
 $14 = $_13; //@line 471 "/checkout/src/libcore/result.rs"
 $15 = $14&1; //@line 471 "/checkout/src/libcore/result.rs"
 if ($15) {
  $_13 = 0; //@line 471 "/checkout/src/libcore/result.rs"
 }
 $17 = HEAP32[$self>>2]|0; //@line 471 "/checkout/src/libcore/result.rs"
 $cond = ($17|0)==(0); //@line 471 "/checkout/src/libcore/result.rs"
 if ($cond) {
  $22 = $_12; //@line 471 "/checkout/src/libcore/result.rs"
  $23 = $22&1; //@line 471 "/checkout/src/libcore/result.rs"
  if (!($23)) {
   STACKTOP = sp;return; //@line 471 "/checkout/src/libcore/result.rs"
  }
  $_12 = 0; //@line 471 "/checkout/src/libcore/result.rs"
  STACKTOP = sp;return; //@line 471 "/checkout/src/libcore/result.rs"
 } else {
  $24 = $_11; //@line 471 "/checkout/src/libcore/result.rs"
  $25 = $24&1; //@line 471 "/checkout/src/libcore/result.rs"
  if (!($25)) {
   STACKTOP = sp;return; //@line 471 "/checkout/src/libcore/result.rs"
  }
  $_11 = 0; //@line 471 "/checkout/src/libcore/result.rs"
  STACKTOP = sp;return; //@line 471 "/checkout/src/libcore/result.rs"
 }
}
function __ZN47__LT_isize_u20_as_u20_core__ops__arith__Div_GT_3div17h7baf6276e2c157d4E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $other = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $other = $1;
 $2 = $self; //@line 431 "/checkout/src/libcore/ops/arith.rs"
 $3 = $other; //@line 431 "/checkout/src/libcore/ops/arith.rs"
 $4 = ($3|0)==(0); //@line 431 "/checkout/src/libcore/ops/arith.rs"
 $5 = $4; //@line 431 "/checkout/src/libcore/ops/arith.rs"
 if ($5) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(3712); //@line 431 "/checkout/src/libcore/ops/arith.rs"
  // unreachable; //@line 431 "/checkout/src/libcore/ops/arith.rs"
 }
 $6 = ($3|0)==(-1); //@line 431 "/checkout/src/libcore/ops/arith.rs"
 $7 = ($2|0)==(-2147483648); //@line 431 "/checkout/src/libcore/ops/arith.rs"
 $8 = $6 & $7; //@line 431 "/checkout/src/libcore/ops/arith.rs"
 $9 = $8; //@line 431 "/checkout/src/libcore/ops/arith.rs"
 if ($9) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(3760); //@line 431 "/checkout/src/libcore/ops/arith.rs"
  // unreachable; //@line 431 "/checkout/src/libcore/ops/arith.rs"
 } else {
  $10 = (($2|0) / ($3|0))&-1; //@line 431 "/checkout/src/libcore/ops/arith.rs"
  STACKTOP = sp;return ($10|0); //@line 431 "/checkout/src/libcore/ops/arith.rs"
 }
 return (0)|0;
}
function __ZN47__LT_isize_u20_as_u20_core__ops__arith__Rem_GT_3rem17h13f0442a290c053fE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $other = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $other = $1;
 $2 = $self; //@line 513 "/checkout/src/libcore/ops/arith.rs"
 $3 = $other; //@line 513 "/checkout/src/libcore/ops/arith.rs"
 $4 = ($3|0)==(0); //@line 513 "/checkout/src/libcore/ops/arith.rs"
 $5 = $4; //@line 513 "/checkout/src/libcore/ops/arith.rs"
 if ($5) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(3736); //@line 513 "/checkout/src/libcore/ops/arith.rs"
  // unreachable; //@line 513 "/checkout/src/libcore/ops/arith.rs"
 }
 $6 = ($3|0)==(-1); //@line 513 "/checkout/src/libcore/ops/arith.rs"
 $7 = ($2|0)==(-2147483648); //@line 513 "/checkout/src/libcore/ops/arith.rs"
 $8 = $6 & $7; //@line 513 "/checkout/src/libcore/ops/arith.rs"
 $9 = $8; //@line 513 "/checkout/src/libcore/ops/arith.rs"
 if ($9) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(3784); //@line 513 "/checkout/src/libcore/ops/arith.rs"
  // unreachable; //@line 513 "/checkout/src/libcore/ops/arith.rs"
 } else {
  $10 = (($2|0) % ($3|0))&-1; //@line 513 "/checkout/src/libcore/ops/arith.rs"
  STACKTOP = sp;return ($10|0); //@line 513 "/checkout/src/libcore/ops/arith.rs"
 }
 return (0)|0;
}
function __ZN47__LT_usize_u20_as_u20_core__ops__arith__Div_GT_3div17h795987895902b5ecE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $other = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $other = $1;
 $2 = $self; //@line 431 "/checkout/src/libcore/ops/arith.rs"
 $3 = $other; //@line 431 "/checkout/src/libcore/ops/arith.rs"
 $4 = ($3|0)==(0); //@line 431 "/checkout/src/libcore/ops/arith.rs"
 $5 = $4; //@line 431 "/checkout/src/libcore/ops/arith.rs"
 if ($5) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(3712); //@line 431 "/checkout/src/libcore/ops/arith.rs"
  // unreachable; //@line 431 "/checkout/src/libcore/ops/arith.rs"
 } else {
  $6 = (($2>>>0) / ($3>>>0))&-1; //@line 431 "/checkout/src/libcore/ops/arith.rs"
  STACKTOP = sp;return ($6|0); //@line 431 "/checkout/src/libcore/ops/arith.rs"
 }
 return (0)|0;
}
function __ZN47__LT_usize_u20_as_u20_core__ops__arith__Rem_GT_3rem17hd3fe84939c0a70fcE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $other = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $other = $1;
 $2 = $self; //@line 513 "/checkout/src/libcore/ops/arith.rs"
 $3 = $other; //@line 513 "/checkout/src/libcore/ops/arith.rs"
 $4 = ($3|0)==(0); //@line 513 "/checkout/src/libcore/ops/arith.rs"
 $5 = $4; //@line 513 "/checkout/src/libcore/ops/arith.rs"
 if ($5) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(3736); //@line 513 "/checkout/src/libcore/ops/arith.rs"
  // unreachable; //@line 513 "/checkout/src/libcore/ops/arith.rs"
 } else {
  $6 = (($2>>>0) % ($3>>>0))&-1; //@line 513 "/checkout/src/libcore/ops/arith.rs"
  STACKTOP = sp;return ($6|0); //@line 513 "/checkout/src/libcore/ops/arith.rs"
 }
 return (0)|0;
}
function __ZN4core3cmp5impls55__LT_impl_u20_core__cmp__PartialOrd_u20_for_u20_i32_GT_2lt17ha0fd71492e508d8fE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $other = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $other = $1;
 $2 = $self; //@line 846 "/checkout/src/libcore/cmp.rs"
 $3 = HEAP32[$2>>2]|0; //@line 846 "/checkout/src/libcore/cmp.rs"
 $4 = $other; //@line 846 "/checkout/src/libcore/cmp.rs"
 $5 = HEAP32[$4>>2]|0; //@line 846 "/checkout/src/libcore/cmp.rs"
 $6 = ($3|0)<($5|0); //@line 846 "/checkout/src/libcore/cmp.rs"
 STACKTOP = sp;return ($6|0); //@line 846 "/checkout/src/libcore/cmp.rs"
}
function __ZN4core3cmp5impls57__LT_impl_u20_core__cmp__PartialOrd_u20_for_u20_isize_GT_2ge17hdc3de56da84035e7E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $other = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $other = $1;
 $2 = $self; //@line 850 "/checkout/src/libcore/cmp.rs"
 $3 = HEAP32[$2>>2]|0; //@line 850 "/checkout/src/libcore/cmp.rs"
 $4 = $other; //@line 850 "/checkout/src/libcore/cmp.rs"
 $5 = HEAP32[$4>>2]|0; //@line 850 "/checkout/src/libcore/cmp.rs"
 $6 = ($3|0)>=($5|0); //@line 850 "/checkout/src/libcore/cmp.rs"
 STACKTOP = sp;return ($6|0); //@line 850 "/checkout/src/libcore/cmp.rs"
}
function __ZN4core3cmp5impls57__LT_impl_u20_core__cmp__PartialOrd_u20_for_u20_isize_GT_2le17hc67215c37e8496a1E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $other = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $other = $1;
 $2 = $self; //@line 848 "/checkout/src/libcore/cmp.rs"
 $3 = HEAP32[$2>>2]|0; //@line 848 "/checkout/src/libcore/cmp.rs"
 $4 = $other; //@line 848 "/checkout/src/libcore/cmp.rs"
 $5 = HEAP32[$4>>2]|0; //@line 848 "/checkout/src/libcore/cmp.rs"
 $6 = ($3|0)<=($5|0); //@line 848 "/checkout/src/libcore/cmp.rs"
 STACKTOP = sp;return ($6|0); //@line 848 "/checkout/src/libcore/cmp.rs"
}
function __ZN4core3cmp5impls57__LT_impl_u20_core__cmp__PartialOrd_u20_for_u20_usize_GT_2ge17ha1f3e207a473d6fbE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $other = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $other = $1;
 $2 = $self; //@line 850 "/checkout/src/libcore/cmp.rs"
 $3 = HEAP32[$2>>2]|0; //@line 850 "/checkout/src/libcore/cmp.rs"
 $4 = $other; //@line 850 "/checkout/src/libcore/cmp.rs"
 $5 = HEAP32[$4>>2]|0; //@line 850 "/checkout/src/libcore/cmp.rs"
 $6 = ($3>>>0)>=($5>>>0); //@line 850 "/checkout/src/libcore/cmp.rs"
 STACKTOP = sp;return ($6|0); //@line 850 "/checkout/src/libcore/cmp.rs"
}
function __ZN4core3cmp5impls57__LT_impl_u20_core__cmp__PartialOrd_u20_for_u20_usize_GT_2lt17hc24b885bc352bf1cE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $other = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $other = $1;
 $2 = $self; //@line 846 "/checkout/src/libcore/cmp.rs"
 $3 = HEAP32[$2>>2]|0; //@line 846 "/checkout/src/libcore/cmp.rs"
 $4 = $other; //@line 846 "/checkout/src/libcore/cmp.rs"
 $5 = HEAP32[$4>>2]|0; //@line 846 "/checkout/src/libcore/cmp.rs"
 $6 = ($3>>>0)<($5>>>0); //@line 846 "/checkout/src/libcore/cmp.rs"
 STACKTOP = sp;return ($6|0); //@line 846 "/checkout/src/libcore/cmp.rs"
}
function __ZN4core3mem11size_of_val17hd28abde553f913caE($0) {
 $0 = $0|0;
 var $1 = 0, $tmp_ret = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $val = $0;
 $tmp_ret = 48; //@line 341 "/checkout/src/libcore/mem.rs"
 $1 = $tmp_ret; //@line 341 "/checkout/src/libcore/mem.rs"
 STACKTOP = sp;return ($1|0); //@line 342 "/checkout/src/libcore/mem.rs"
}
function __ZN4core3mem13uninitialized17h207771a6410a72eaE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return; //@line 612 "/checkout/src/libcore/mem.rs"
}
function __ZN4core3mem13uninitialized17h252a0eb0013cb542E($retVal) {
 $retVal = $retVal|0;
 var $0 = 0, $1 = 0, $2 = 0, $retVal$index1 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = sp;
 $0 = HEAP32[$tmp_ret>>2]|0; //@line 611 "/checkout/src/libcore/mem.rs"
 $1 = ((($tmp_ret)) + 4|0); //@line 611 "/checkout/src/libcore/mem.rs"
 $2 = HEAP32[$1>>2]|0; //@line 611 "/checkout/src/libcore/mem.rs"
 HEAP32[$retVal>>2] = $0; //@line 612 "/checkout/src/libcore/mem.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 612 "/checkout/src/libcore/mem.rs"
 HEAP32[$retVal$index1>>2] = $2; //@line 612 "/checkout/src/libcore/mem.rs"
 STACKTOP = sp;return; //@line 612 "/checkout/src/libcore/mem.rs"
}
function __ZN4core3mem13uninitialized17h40c8af2f40f39ddeE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return; //@line 612 "/checkout/src/libcore/mem.rs"
}
function __ZN4core3mem13uninitialized17hb91b4d6e2ecd4460E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return; //@line 612 "/checkout/src/libcore/mem.rs"
}
function __ZN4core3mem4swap17h8c74b5a0bd376223E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x = $0;
 $y = $1;
 $2 = $x; //@line 633 "/checkout/src/libcore/mem.rs"
 $3 = $y; //@line 633 "/checkout/src/libcore/mem.rs"
 __ZN4core3ptr19swap_nonoverlapping17h6d304b137989ce4eE($2,$3,1); //@line 633 "/checkout/src/libcore/mem.rs"
 STACKTOP = sp;return; //@line 635 "/checkout/src/libcore/mem.rs"
}
function __ZN4core3mem4swap17ha99459f1e07731abE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x = $0;
 $y = $1;
 $2 = $x; //@line 633 "/checkout/src/libcore/mem.rs"
 $3 = $y; //@line 633 "/checkout/src/libcore/mem.rs"
 __ZN4core3ptr19swap_nonoverlapping17hd246995b863bb0a1E($2,$3,1); //@line 633 "/checkout/src/libcore/mem.rs"
 STACKTOP = sp;return; //@line 635 "/checkout/src/libcore/mem.rs"
}
function __ZN4core3mem6forget17h474ca36a5433ec61E($t) {
 $t = $t|0;
 var $_2 = 0, $_3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_3 = sp + 12|0; //@line 1 "/checkout/src/libcore/mem.rs"
 $_2 = sp; //@line 1 "/checkout/src/libcore/mem.rs"
 ;HEAP32[$_3>>2]=HEAP32[$t>>2]|0;HEAP32[$_3+4>>2]=HEAP32[$t+4>>2]|0;HEAP32[$_3+8>>2]=HEAP32[$t+8>>2]|0; //@line 175 "/checkout/src/libcore/mem.rs"
 __ZN41__LT_core__mem__ManuallyDrop_LT_T_GT__GT_3new17hd4085130e3d835a1E($_2,$_3); //@line 175 "/checkout/src/libcore/mem.rs"
 STACKTOP = sp;return; //@line 176 "/checkout/src/libcore/mem.rs"
}
function __ZN41__LT_core__mem__ManuallyDrop_LT_T_GT__GT_3new17hd4085130e3d835a1E($0,$value) {
 $0 = $0|0;
 $value = $value|0;
 var $_2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_2 = sp; //@line 1 "/checkout/src/libcore/mem.rs"
 ;HEAP32[$_2>>2]=HEAP32[$value>>2]|0;HEAP32[$_2+4>>2]=HEAP32[$value+4>>2]|0;HEAP32[$_2+8>>2]=HEAP32[$value+8>>2]|0; //@line 963 "/checkout/src/libcore/mem.rs"
 ;HEAP32[$0>>2]=HEAP32[$_2>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_2+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_2+8>>2]|0; //@line 963 "/checkout/src/libcore/mem.rs"
 STACKTOP = sp;return; //@line 964 "/checkout/src/libcore/mem.rs"
}
function __ZN4core3mem6forget17h49541cbfa280a011E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $_2 = 0, $abi_cast = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $abi_cast = sp + 8|0;
 $_2 = sp + 4|0;
 $t = $0;
 $1 = $t; //@line 175 "/checkout/src/libcore/mem.rs"
 $2 = (__ZN41__LT_core__mem__ManuallyDrop_LT_T_GT__GT_3new17h408fd83482b48f2aE($1)|0); //@line 175 "/checkout/src/libcore/mem.rs"
 HEAP32[$abi_cast>>2] = $2; //@line 175 "/checkout/src/libcore/mem.rs"
 ;HEAP32[$_2>>2]=HEAP32[$abi_cast>>2]|0; //@line 175 "/checkout/src/libcore/mem.rs"
 STACKTOP = sp;return; //@line 176 "/checkout/src/libcore/mem.rs"
}
function __ZN41__LT_core__mem__ManuallyDrop_LT_T_GT__GT_3new17h408fd83482b48f2aE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $_0 = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_0 = sp + 4|0;
 $value = $0;
 $1 = $value; //@line 963 "/checkout/src/libcore/mem.rs"
 HEAP32[$_0>>2] = $1; //@line 963 "/checkout/src/libcore/mem.rs"
 $2 = HEAP32[$_0>>2]|0; //@line 964 "/checkout/src/libcore/mem.rs"
 STACKTOP = sp;return ($2|0); //@line 964 "/checkout/src/libcore/mem.rs"
}
function __ZN4core3mem6forget17hffa1216d18bc5048E($t) {
 $t = $t|0;
 var $_2 = 0, $_3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_3 = sp + 12|0; //@line 1 "/checkout/src/libcore/mem.rs"
 $_2 = sp; //@line 1 "/checkout/src/libcore/mem.rs"
 ;HEAP32[$_3>>2]=HEAP32[$t>>2]|0;HEAP32[$_3+4>>2]=HEAP32[$t+4>>2]|0;HEAP32[$_3+8>>2]=HEAP32[$t+8>>2]|0; //@line 175 "/checkout/src/libcore/mem.rs"
 __ZN41__LT_core__mem__ManuallyDrop_LT_T_GT__GT_3new17h01ec0c5d1f64f670E($_2,$_3); //@line 175 "/checkout/src/libcore/mem.rs"
 STACKTOP = sp;return; //@line 176 "/checkout/src/libcore/mem.rs"
}
function __ZN41__LT_core__mem__ManuallyDrop_LT_T_GT__GT_3new17h01ec0c5d1f64f670E($0,$value) {
 $0 = $0|0;
 $value = $value|0;
 var $_2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_2 = sp; //@line 1 "/checkout/src/libcore/mem.rs"
 ;HEAP32[$_2>>2]=HEAP32[$value>>2]|0;HEAP32[$_2+4>>2]=HEAP32[$value+4>>2]|0;HEAP32[$_2+8>>2]=HEAP32[$value+8>>2]|0; //@line 963 "/checkout/src/libcore/mem.rs"
 ;HEAP32[$0>>2]=HEAP32[$_2>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_2+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_2+8>>2]|0; //@line 963 "/checkout/src/libcore/mem.rs"
 STACKTOP = sp;return; //@line 964 "/checkout/src/libcore/mem.rs"
}
function __ZN4core3mem7size_of17h066421ba255ff1ccE() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 8; //@line 315 "/checkout/src/libcore/mem.rs"
 $0 = $tmp_ret; //@line 315 "/checkout/src/libcore/mem.rs"
 STACKTOP = sp;return ($0|0); //@line 316 "/checkout/src/libcore/mem.rs"
}
function __ZN4core3mem7size_of17h09f91698b5f928bfE() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 4; //@line 315 "/checkout/src/libcore/mem.rs"
 $0 = $tmp_ret; //@line 315 "/checkout/src/libcore/mem.rs"
 STACKTOP = sp;return ($0|0); //@line 316 "/checkout/src/libcore/mem.rs"
}
function __ZN4core3mem7size_of17h1975c8c10bebb793E() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 12; //@line 315 "/checkout/src/libcore/mem.rs"
 $0 = $tmp_ret; //@line 315 "/checkout/src/libcore/mem.rs"
 STACKTOP = sp;return ($0|0); //@line 316 "/checkout/src/libcore/mem.rs"
}
function __ZN4core3mem7size_of17h34f2235168088e08E() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 4; //@line 315 "/checkout/src/libcore/mem.rs"
 $0 = $tmp_ret; //@line 315 "/checkout/src/libcore/mem.rs"
 STACKTOP = sp;return ($0|0); //@line 316 "/checkout/src/libcore/mem.rs"
}
function __ZN4core3mem7size_of17h56842b121b8b689bE() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 4; //@line 315 "/checkout/src/libcore/mem.rs"
 $0 = $tmp_ret; //@line 315 "/checkout/src/libcore/mem.rs"
 STACKTOP = sp;return ($0|0); //@line 316 "/checkout/src/libcore/mem.rs"
}
function __ZN4core3mem7size_of17h809a29d4399807a6E() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 1; //@line 315 "/checkout/src/libcore/mem.rs"
 $0 = $tmp_ret; //@line 315 "/checkout/src/libcore/mem.rs"
 STACKTOP = sp;return ($0|0); //@line 316 "/checkout/src/libcore/mem.rs"
}
function __ZN4core3mem7size_of17h85a290d02afca270E() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 12; //@line 315 "/checkout/src/libcore/mem.rs"
 $0 = $tmp_ret; //@line 315 "/checkout/src/libcore/mem.rs"
 STACKTOP = sp;return ($0|0); //@line 316 "/checkout/src/libcore/mem.rs"
}
function __ZN4core3mem7size_of17h975d444723173452E() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 8; //@line 315 "/checkout/src/libcore/mem.rs"
 $0 = $tmp_ret; //@line 315 "/checkout/src/libcore/mem.rs"
 STACKTOP = sp;return ($0|0); //@line 316 "/checkout/src/libcore/mem.rs"
}
function __ZN4core3mem7size_of17ha59eb6b46170b9c0E() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 32; //@line 315 "/checkout/src/libcore/mem.rs"
 $0 = $tmp_ret; //@line 315 "/checkout/src/libcore/mem.rs"
 STACKTOP = sp;return ($0|0); //@line 316 "/checkout/src/libcore/mem.rs"
}
function __ZN4core3mem7size_of17ha6e39ca688c637d2E() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 4; //@line 315 "/checkout/src/libcore/mem.rs"
 $0 = $tmp_ret; //@line 315 "/checkout/src/libcore/mem.rs"
 STACKTOP = sp;return ($0|0); //@line 316 "/checkout/src/libcore/mem.rs"
}
function __ZN4core3mem7size_of17hd7a6698aeb9187d3E() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 48; //@line 315 "/checkout/src/libcore/mem.rs"
 $0 = $tmp_ret; //@line 315 "/checkout/src/libcore/mem.rs"
 STACKTOP = sp;return ($0|0); //@line 316 "/checkout/src/libcore/mem.rs"
}
function __ZN4core3mem7size_of17hde987414d3fda057E() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 4; //@line 315 "/checkout/src/libcore/mem.rs"
 $0 = $tmp_ret; //@line 315 "/checkout/src/libcore/mem.rs"
 STACKTOP = sp;return ($0|0); //@line 316 "/checkout/src/libcore/mem.rs"
}
function __ZN4core3mem8align_of17h1bf47edbc88dde51E() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 4; //@line 406 "/checkout/src/libcore/mem.rs"
 $0 = $tmp_ret; //@line 406 "/checkout/src/libcore/mem.rs"
 STACKTOP = sp;return ($0|0); //@line 407 "/checkout/src/libcore/mem.rs"
}
function __ZN4core3mem8align_of17h2c2eaff1a316b960E() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 4; //@line 406 "/checkout/src/libcore/mem.rs"
 $0 = $tmp_ret; //@line 406 "/checkout/src/libcore/mem.rs"
 STACKTOP = sp;return ($0|0); //@line 407 "/checkout/src/libcore/mem.rs"
}
function __ZN4core3mem8align_of17h3d4cf13420557a3fE() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 1; //@line 406 "/checkout/src/libcore/mem.rs"
 $0 = $tmp_ret; //@line 406 "/checkout/src/libcore/mem.rs"
 STACKTOP = sp;return ($0|0); //@line 407 "/checkout/src/libcore/mem.rs"
}
function __ZN4core3mem8align_of17h658feaec843c903eE() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 4; //@line 406 "/checkout/src/libcore/mem.rs"
 $0 = $tmp_ret; //@line 406 "/checkout/src/libcore/mem.rs"
 STACKTOP = sp;return ($0|0); //@line 407 "/checkout/src/libcore/mem.rs"
}
function __ZN4core3mem8align_of17h80f2724461767a36E() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 4; //@line 406 "/checkout/src/libcore/mem.rs"
 $0 = $tmp_ret; //@line 406 "/checkout/src/libcore/mem.rs"
 STACKTOP = sp;return ($0|0); //@line 407 "/checkout/src/libcore/mem.rs"
}
function __ZN4core3mem8align_of17hccc7922e2c3ce90fE() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 4; //@line 406 "/checkout/src/libcore/mem.rs"
 $0 = $tmp_ret; //@line 406 "/checkout/src/libcore/mem.rs"
 STACKTOP = sp;return ($0|0); //@line 407 "/checkout/src/libcore/mem.rs"
}
function __ZN4core3mem8align_of17hf4a8fc97f4876179E() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 4; //@line 406 "/checkout/src/libcore/mem.rs"
 $0 = $tmp_ret; //@line 406 "/checkout/src/libcore/mem.rs"
 STACKTOP = sp;return ($0|0); //@line 407 "/checkout/src/libcore/mem.rs"
}
function __ZN4core3num21__LT_impl_u20_i32_GT_3abs17h936f61cd3229beccE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $_0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 1138 "/checkout/src/libcore/num/mod.rs"
 $2 = (__ZN4core3num21__LT_impl_u20_i32_GT_11is_negative17h26a0723abc117420E($1)|0); //@line 1138 "/checkout/src/libcore/num/mod.rs"
 $3 = $self;
 if (!($2)) {
  $_0 = $3; //@line 1144 "/checkout/src/libcore/num/mod.rs"
  $7 = $_0; //@line 1146 "/checkout/src/libcore/num/mod.rs"
  STACKTOP = sp;return ($7|0); //@line 1146 "/checkout/src/libcore/num/mod.rs"
 }
 $4 = ($3|0)==(-2147483648); //@line 1142 "/checkout/src/libcore/num/mod.rs"
 $5 = $4; //@line 1142 "/checkout/src/libcore/num/mod.rs"
 if ($5) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(3808); //@line 1142 "/checkout/src/libcore/num/mod.rs"
  // unreachable; //@line 1142 "/checkout/src/libcore/num/mod.rs"
 }
 $6 = (0 - ($3))|0; //@line 1142 "/checkout/src/libcore/num/mod.rs"
 $_0 = $6; //@line 1142 "/checkout/src/libcore/num/mod.rs"
 $7 = $_0; //@line 1146 "/checkout/src/libcore/num/mod.rs"
 STACKTOP = sp;return ($7|0); //@line 1146 "/checkout/src/libcore/num/mod.rs"
}
function __ZN4core3num21__LT_impl_u20_i32_GT_11is_negative17h26a0723abc117420E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 1201 "/checkout/src/libcore/num/mod.rs"
 $2 = ($1|0)<(0); //@line 1201 "/checkout/src/libcore/num/mod.rs"
 STACKTOP = sp;return ($2|0); //@line 1201 "/checkout/src/libcore/num/mod.rs"
}
function __ZN4core3num21__LT_impl_u20_u32_GT_12wrapping_add17h14c8620751cfde03E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $rhs = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $rhs = $1;
 $2 = $self; //@line 1801 "/checkout/src/libcore/num/mod.rs"
 $3 = $rhs; //@line 1801 "/checkout/src/libcore/num/mod.rs"
 $4 = (($2) + ($3))|0; //@line 1801 "/checkout/src/libcore/num/mod.rs"
 $tmp_ret = $4; //@line 1801 "/checkout/src/libcore/num/mod.rs"
 $5 = $tmp_ret; //@line 1801 "/checkout/src/libcore/num/mod.rs"
 STACKTOP = sp;return ($5|0); //@line 1803 "/checkout/src/libcore/num/mod.rs"
}
function __ZN4core3num23__LT_impl_u20_usize_GT_11checked_add17h00d1a99943b8f1ffE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$field2$pre_trunc = 0, $$sreg$index1 = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $rhs = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $self = $1;
 $rhs = $2;
 $4 = $self; //@line 1590 "/checkout/src/libcore/num/mod.rs"
 $5 = $rhs; //@line 1590 "/checkout/src/libcore/num/mod.rs"
 __ZN4core3num23__LT_impl_u20_usize_GT_15overflowing_add17h050e409578b173d4E($3,$4,$5); //@line 1590 "/checkout/src/libcore/num/mod.rs"
 $$sreg$field = HEAP32[$3>>2]|0; //@line 1590 "/checkout/src/libcore/num/mod.rs"
 $$sreg$index1 = ((($3)) + 4|0); //@line 1590 "/checkout/src/libcore/num/mod.rs"
 $$sreg$field2$pre_trunc = HEAP8[$$sreg$index1>>0]|0; //@line 1590 "/checkout/src/libcore/num/mod.rs"
 $$sreg$field2 = $$sreg$field2$pre_trunc&1; //@line 1590 "/checkout/src/libcore/num/mod.rs"
 $a = $$sreg$field; //@line 1590 "/checkout/src/libcore/num/mod.rs"
 $6 = $$sreg$field2&1; //@line 1590 "/checkout/src/libcore/num/mod.rs"
 $b = $6; //@line 1590 "/checkout/src/libcore/num/mod.rs"
 $7 = $b; //@line 1591 "/checkout/src/libcore/num/mod.rs"
 $8 = $7&1; //@line 1591 "/checkout/src/libcore/num/mod.rs"
 if ($8) {
  HEAP32[$0>>2] = 0; //@line 1591 "/checkout/src/libcore/num/mod.rs"
  STACKTOP = sp;return; //@line 1592 "/checkout/src/libcore/num/mod.rs"
 } else {
  $9 = $a; //@line 1591 "/checkout/src/libcore/num/mod.rs"
  HEAP32[$0>>2] = 1; //@line 1591 "/checkout/src/libcore/num/mod.rs"
  $10 = ((($0)) + 4|0); //@line 1591 "/checkout/src/libcore/num/mod.rs"
  HEAP32[$10>>2] = $9; //@line 1591 "/checkout/src/libcore/num/mod.rs"
  STACKTOP = sp;return; //@line 1592 "/checkout/src/libcore/num/mod.rs"
 }
}
function __ZN4core3num23__LT_impl_u20_usize_GT_15overflowing_add17h050e409578b173d4E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$arith = 0, $$expand_i1_val = 0, $$overflow = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_0 = 0, $a = 0, $b = 0, $retVal$index1 = 0, $rhs = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $tmp_ret = sp + 24|0;
 $_0 = sp + 8|0;
 $self = $0;
 $rhs = $1;
 $2 = $self; //@line 1982 "/checkout/src/libcore/num/mod.rs"
 $3 = $rhs; //@line 1983 "/checkout/src/libcore/num/mod.rs"
 $$arith = (($2) + ($3))|0; //@line 1982 "/checkout/src/libcore/num/mod.rs"
 $$overflow = ($$arith>>>0)<($2>>>0); //@line 1982 "/checkout/src/libcore/num/mod.rs"
 $4 = $$overflow&1; //@line 1982 "/checkout/src/libcore/num/mod.rs"
 HEAP32[$tmp_ret>>2] = $$arith; //@line 1982 "/checkout/src/libcore/num/mod.rs"
 $5 = ((($tmp_ret)) + 4|0); //@line 1982 "/checkout/src/libcore/num/mod.rs"
 HEAP8[$5>>0] = $4; //@line 1982 "/checkout/src/libcore/num/mod.rs"
 $6 = HEAP32[$tmp_ret>>2]|0; //@line 1982 "/checkout/src/libcore/num/mod.rs"
 $7 = ((($tmp_ret)) + 4|0); //@line 1982 "/checkout/src/libcore/num/mod.rs"
 $8 = HEAP8[$7>>0]|0; //@line 1982 "/checkout/src/libcore/num/mod.rs"
 $9 = $8&1; //@line 1982 "/checkout/src/libcore/num/mod.rs"
 $a = $6; //@line 1982 "/checkout/src/libcore/num/mod.rs"
 $10 = $9&1; //@line 1982 "/checkout/src/libcore/num/mod.rs"
 $b = $10; //@line 1982 "/checkout/src/libcore/num/mod.rs"
 $11 = $a; //@line 1984 "/checkout/src/libcore/num/mod.rs"
 $12 = $b; //@line 1984 "/checkout/src/libcore/num/mod.rs"
 $13 = $12&1; //@line 1984 "/checkout/src/libcore/num/mod.rs"
 HEAP32[$_0>>2] = $11; //@line 1984 "/checkout/src/libcore/num/mod.rs"
 $14 = ((($_0)) + 4|0); //@line 1984 "/checkout/src/libcore/num/mod.rs"
 $15 = $13&1; //@line 1984 "/checkout/src/libcore/num/mod.rs"
 HEAP8[$14>>0] = $15; //@line 1984 "/checkout/src/libcore/num/mod.rs"
 $16 = HEAP32[$_0>>2]|0; //@line 1986 "/checkout/src/libcore/num/mod.rs"
 $17 = ((($_0)) + 4|0); //@line 1986 "/checkout/src/libcore/num/mod.rs"
 $18 = HEAP8[$17>>0]|0; //@line 1986 "/checkout/src/libcore/num/mod.rs"
 $19 = $18&1; //@line 1986 "/checkout/src/libcore/num/mod.rs"
 HEAP32[$retVal>>2] = $16; //@line 1986 "/checkout/src/libcore/num/mod.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 1986 "/checkout/src/libcore/num/mod.rs"
 $$expand_i1_val = $19&1; //@line 1986 "/checkout/src/libcore/num/mod.rs"
 HEAP8[$retVal$index1>>0] = $$expand_i1_val; //@line 1986 "/checkout/src/libcore/num/mod.rs"
 STACKTOP = sp;return; //@line 1986 "/checkout/src/libcore/num/mod.rs"
}
function __ZN4core3num23__LT_impl_u20_usize_GT_11checked_mul17h7a319dc43d01198eE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$field2$pre_trunc = 0, $$sreg$index1 = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $rhs = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $self = $1;
 $rhs = $2;
 $4 = $self; //@line 1626 "/checkout/src/libcore/num/mod.rs"
 $5 = $rhs; //@line 1626 "/checkout/src/libcore/num/mod.rs"
 __ZN4core3num23__LT_impl_u20_usize_GT_15overflowing_mul17h79624bf3fd52724cE($3,$4,$5); //@line 1626 "/checkout/src/libcore/num/mod.rs"
 $$sreg$field = HEAP32[$3>>2]|0; //@line 1626 "/checkout/src/libcore/num/mod.rs"
 $$sreg$index1 = ((($3)) + 4|0); //@line 1626 "/checkout/src/libcore/num/mod.rs"
 $$sreg$field2$pre_trunc = HEAP8[$$sreg$index1>>0]|0; //@line 1626 "/checkout/src/libcore/num/mod.rs"
 $$sreg$field2 = $$sreg$field2$pre_trunc&1; //@line 1626 "/checkout/src/libcore/num/mod.rs"
 $a = $$sreg$field; //@line 1626 "/checkout/src/libcore/num/mod.rs"
 $6 = $$sreg$field2&1; //@line 1626 "/checkout/src/libcore/num/mod.rs"
 $b = $6; //@line 1626 "/checkout/src/libcore/num/mod.rs"
 $7 = $b; //@line 1627 "/checkout/src/libcore/num/mod.rs"
 $8 = $7&1; //@line 1627 "/checkout/src/libcore/num/mod.rs"
 if ($8) {
  HEAP32[$0>>2] = 0; //@line 1627 "/checkout/src/libcore/num/mod.rs"
  STACKTOP = sp;return; //@line 1628 "/checkout/src/libcore/num/mod.rs"
 } else {
  $9 = $a; //@line 1627 "/checkout/src/libcore/num/mod.rs"
  HEAP32[$0>>2] = 1; //@line 1627 "/checkout/src/libcore/num/mod.rs"
  $10 = ((($0)) + 4|0); //@line 1627 "/checkout/src/libcore/num/mod.rs"
  HEAP32[$10>>2] = $9; //@line 1627 "/checkout/src/libcore/num/mod.rs"
  STACKTOP = sp;return; //@line 1628 "/checkout/src/libcore/num/mod.rs"
 }
}
function __ZN4core3num23__LT_impl_u20_usize_GT_15overflowing_mul17h79624bf3fd52724cE($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$arith = 0, $$denom = 0, $$div = 0, $$expand_i1_val = 0, $$iszero = 0, $$overflow = 0, $$same = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $a = 0, $b = 0, $retVal$index1 = 0, $rhs = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $tmp_ret = sp + 24|0;
 $_0 = sp + 8|0;
 $self = $0;
 $rhs = $1;
 $2 = $self; //@line 2032 "/checkout/src/libcore/num/mod.rs"
 $3 = $rhs; //@line 2033 "/checkout/src/libcore/num/mod.rs"
 $$arith = Math_imul($2, $3)|0; //@line 2032 "/checkout/src/libcore/num/mod.rs"
 $$iszero = ($3|0)==(0); //@line 2032 "/checkout/src/libcore/num/mod.rs"
 $$denom = $$iszero ? 1 : $3; //@line 2032 "/checkout/src/libcore/num/mod.rs"
 $$div = (($$arith>>>0) / ($$denom>>>0))&-1; //@line 2032 "/checkout/src/libcore/num/mod.rs"
 $$same = ($$div|0)!=($2|0); //@line 2032 "/checkout/src/libcore/num/mod.rs"
 $$overflow = $$iszero ? 0 : $$same; //@line 2032 "/checkout/src/libcore/num/mod.rs"
 $4 = $$overflow&1; //@line 2032 "/checkout/src/libcore/num/mod.rs"
 HEAP32[$tmp_ret>>2] = $$arith; //@line 2032 "/checkout/src/libcore/num/mod.rs"
 $5 = ((($tmp_ret)) + 4|0); //@line 2032 "/checkout/src/libcore/num/mod.rs"
 HEAP8[$5>>0] = $4; //@line 2032 "/checkout/src/libcore/num/mod.rs"
 $6 = HEAP32[$tmp_ret>>2]|0; //@line 2032 "/checkout/src/libcore/num/mod.rs"
 $7 = ((($tmp_ret)) + 4|0); //@line 2032 "/checkout/src/libcore/num/mod.rs"
 $8 = HEAP8[$7>>0]|0; //@line 2032 "/checkout/src/libcore/num/mod.rs"
 $9 = $8&1; //@line 2032 "/checkout/src/libcore/num/mod.rs"
 $a = $6; //@line 2032 "/checkout/src/libcore/num/mod.rs"
 $10 = $9&1; //@line 2032 "/checkout/src/libcore/num/mod.rs"
 $b = $10; //@line 2032 "/checkout/src/libcore/num/mod.rs"
 $11 = $a; //@line 2034 "/checkout/src/libcore/num/mod.rs"
 $12 = $b; //@line 2034 "/checkout/src/libcore/num/mod.rs"
 $13 = $12&1; //@line 2034 "/checkout/src/libcore/num/mod.rs"
 HEAP32[$_0>>2] = $11; //@line 2034 "/checkout/src/libcore/num/mod.rs"
 $14 = ((($_0)) + 4|0); //@line 2034 "/checkout/src/libcore/num/mod.rs"
 $15 = $13&1; //@line 2034 "/checkout/src/libcore/num/mod.rs"
 HEAP8[$14>>0] = $15; //@line 2034 "/checkout/src/libcore/num/mod.rs"
 $16 = HEAP32[$_0>>2]|0; //@line 2036 "/checkout/src/libcore/num/mod.rs"
 $17 = ((($_0)) + 4|0); //@line 2036 "/checkout/src/libcore/num/mod.rs"
 $18 = HEAP8[$17>>0]|0; //@line 2036 "/checkout/src/libcore/num/mod.rs"
 $19 = $18&1; //@line 2036 "/checkout/src/libcore/num/mod.rs"
 HEAP32[$retVal>>2] = $16; //@line 2036 "/checkout/src/libcore/num/mod.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 2036 "/checkout/src/libcore/num/mod.rs"
 $$expand_i1_val = $19&1; //@line 2036 "/checkout/src/libcore/num/mod.rs"
 HEAP8[$retVal$index1>>0] = $$expand_i1_val; //@line 2036 "/checkout/src/libcore/num/mod.rs"
 STACKTOP = sp;return; //@line 2036 "/checkout/src/libcore/num/mod.rs"
}
function __ZN4core3num23__LT_impl_u20_usize_GT_12wrapping_add17h0164fc63a67cb059E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $rhs = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $rhs = $1;
 $2 = $self; //@line 1801 "/checkout/src/libcore/num/mod.rs"
 $3 = $rhs; //@line 1801 "/checkout/src/libcore/num/mod.rs"
 $4 = (($2) + ($3))|0; //@line 1801 "/checkout/src/libcore/num/mod.rs"
 $tmp_ret = $4; //@line 1801 "/checkout/src/libcore/num/mod.rs"
 $5 = $tmp_ret; //@line 1801 "/checkout/src/libcore/num/mod.rs"
 STACKTOP = sp;return ($5|0); //@line 1803 "/checkout/src/libcore/num/mod.rs"
}
function __ZN4core3num23__LT_impl_u20_usize_GT_12wrapping_sub17h4713c9842bdc8110E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $rhs = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $rhs = $1;
 $2 = $self; //@line 1820 "/checkout/src/libcore/num/mod.rs"
 $3 = $rhs; //@line 1820 "/checkout/src/libcore/num/mod.rs"
 $4 = (($2) - ($3))|0; //@line 1820 "/checkout/src/libcore/num/mod.rs"
 $tmp_ret = $4; //@line 1820 "/checkout/src/libcore/num/mod.rs"
 $5 = $tmp_ret; //@line 1820 "/checkout/src/libcore/num/mod.rs"
 STACKTOP = sp;return ($5|0); //@line 1822 "/checkout/src/libcore/num/mod.rs"
}
function __ZN4core3num23__LT_impl_u20_usize_GT_15is_power_of_two17h3fbf26df8111dfbcE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 2199 "/checkout/src/libcore/num/mod.rs"
 $2 = (__ZN4core3num23__LT_impl_u20_usize_GT_12wrapping_sub17h4713c9842bdc8110E($1,1)|0); //@line 2199 "/checkout/src/libcore/num/mod.rs"
 $3 = $self; //@line 2199 "/checkout/src/libcore/num/mod.rs"
 $4 = $2 & $3; //@line 2199 "/checkout/src/libcore/num/mod.rs"
 $5 = ($4|0)==(0); //@line 2199 "/checkout/src/libcore/num/mod.rs"
 if ($5) {
  $6 = $self; //@line 2199 "/checkout/src/libcore/num/mod.rs"
  $7 = ($6|0)==(0); //@line 2199 "/checkout/src/libcore/num/mod.rs"
  $8 = $7 ^ 1; //@line 2199 "/checkout/src/libcore/num/mod.rs"
  if ($8) {
   $_0 = 1; //@line 2199 "/checkout/src/libcore/num/mod.rs"
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $_0 = 0; //@line 2199 "/checkout/src/libcore/num/mod.rs"
 }
 $9 = $_0; //@line 2200 "/checkout/src/libcore/num/mod.rs"
 $10 = $9&1; //@line 2200 "/checkout/src/libcore/num/mod.rs"
 STACKTOP = sp;return ($10|0); //@line 2200 "/checkout/src/libcore/num/mod.rs"
}
function __ZN54__LT_I_u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17hf39266a51009a40bE($0,$self) {
 $0 = $0|0;
 $self = $self|0;
 var $_2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_2 = sp; //@line 1 "/checkout/src/libcore/iter/traits.rs"
 ;HEAP32[$_2>>2]=HEAP32[$self>>2]|0;HEAP32[$_2+4>>2]=HEAP32[$self+4>>2]|0;HEAP32[$_2+8>>2]=HEAP32[$self+8>>2]|0; //@line 257 "/checkout/src/libcore/iter/traits.rs"
 ;HEAP32[$0>>2]=HEAP32[$_2>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_2+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_2+8>>2]|0; //@line 257 "/checkout/src/libcore/iter/traits.rs"
 STACKTOP = sp;return; //@line 258 "/checkout/src/libcore/iter/traits.rs"
}
function __ZN5alloc5slice4hack8into_vec17h32e5f67293e1a60dE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_11 = 0, $_12 = 0, $b = 0;
 var $personalityslot = 0, $xs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $personalityslot = sp + 32|0;
 $_11 = sp + 20|0;
 $xs = sp + 8|0;
 $b = sp;
 HEAP32[$b>>2] = $1;
 $3 = ((($b)) + 4|0);
 HEAP32[$3>>2] = $2;
 $_12 = 0; //@line 155 "/checkout/src/liballoc/slice.rs"
 $_12 = 1; //@line 155 "/checkout/src/liballoc/slice.rs"
 $4 = HEAP32[$b>>2]|0; //@line 155 "/checkout/src/liballoc/slice.rs"
 $5 = ((($b)) + 4|0); //@line 155 "/checkout/src/liballoc/slice.rs"
 $6 = HEAP32[$5>>2]|0; //@line 155 "/checkout/src/liballoc/slice.rs"
 __THREW__ = 0;
 $7 = (invoke_iii(272,($4|0),($6|0))|0); //@line 155 "/checkout/src/liballoc/slice.rs"
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if ($9) {
   label = 10;
  } else {
   $13 = HEAP32[$b>>2]|0; //@line 155 "/checkout/src/liballoc/slice.rs"
   $14 = ((($b)) + 4|0); //@line 155 "/checkout/src/liballoc/slice.rs"
   $15 = HEAP32[$14>>2]|0; //@line 155 "/checkout/src/liballoc/slice.rs"
   __THREW__ = 0;
   $16 = (invoke_iii(273,($13|0),($15|0))|0); //@line 155 "/checkout/src/liballoc/slice.rs"
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    label = 10;
   } else {
    $19 = HEAP32[$b>>2]|0; //@line 155 "/checkout/src/liballoc/slice.rs"
    $20 = ((($b)) + 4|0); //@line 155 "/checkout/src/liballoc/slice.rs"
    $21 = HEAP32[$20>>2]|0; //@line 155 "/checkout/src/liballoc/slice.rs"
    __THREW__ = 0;
    $22 = (invoke_iii(273,($19|0),($21|0))|0); //@line 155 "/checkout/src/liballoc/slice.rs"
    $23 = __THREW__; __THREW__ = 0;
    $24 = $23&1;
    if ($24) {
     label = 10;
    } else {
     __THREW__ = 0;
     invoke_viiii(274,($xs|0),($7|0),($16|0),($22|0)); //@line 155 "/checkout/src/liballoc/slice.rs"
     $25 = __THREW__; __THREW__ = 0;
     $26 = $25&1;
     if ($26) {
      label = 10;
     } else {
      $_12 = 0; //@line 156 "/checkout/src/liballoc/slice.rs"
      $27 = HEAP32[$b>>2]|0; //@line 156 "/checkout/src/liballoc/slice.rs"
      $28 = ((($b)) + 4|0); //@line 156 "/checkout/src/liballoc/slice.rs"
      $29 = HEAP32[$28>>2]|0; //@line 156 "/checkout/src/liballoc/slice.rs"
      __THREW__ = 0;
      invoke_vii(275,($27|0),($29|0)); //@line 156 "/checkout/src/liballoc/slice.rs"
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       $37 = ___cxa_find_matching_catch_2()|0;
       $38 = tempRet0;
       HEAP32[$personalityslot>>2] = $37;
       $39 = ((($personalityslot)) + 4|0);
       HEAP32[$39>>2] = $38;
       __ZN4core3ptr13drop_in_place17h2ae92ba27d02d527E($xs); //@line 158 "/checkout/src/liballoc/slice.rs"
       break;
      } else {
       ;HEAP32[$_11>>2]=HEAP32[$xs>>2]|0;HEAP32[$_11+4>>2]=HEAP32[$xs+4>>2]|0;HEAP32[$_11+8>>2]=HEAP32[$xs+8>>2]|0; //@line 157 "/checkout/src/liballoc/slice.rs"
       ;HEAP32[$0>>2]=HEAP32[$_11>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_11+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_11+8>>2]|0; //@line 157 "/checkout/src/liballoc/slice.rs"
       STACKTOP = sp;return; //@line 159 "/checkout/src/liballoc/slice.rs"
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 10) {
  $34 = ___cxa_find_matching_catch_2()|0;
  $35 = tempRet0;
  HEAP32[$personalityslot>>2] = $34;
  $36 = ((($personalityslot)) + 4|0);
  HEAP32[$36>>2] = $35;
 }
 $32 = $_12; //@line 159 "/checkout/src/liballoc/slice.rs"
 $33 = $32&1; //@line 159 "/checkout/src/liballoc/slice.rs"
 if (!($33)) {
  $10 = HEAP32[$personalityslot>>2]|0; //@line 153 "/checkout/src/liballoc/slice.rs"
  $11 = ((($personalityslot)) + 4|0); //@line 153 "/checkout/src/liballoc/slice.rs"
  $12 = HEAP32[$11>>2]|0; //@line 153 "/checkout/src/liballoc/slice.rs"
  ___resumeException($10|0);
  // unreachable;
 }
 $_12 = 0; //@line 159 "/checkout/src/liballoc/slice.rs"
 __ZN4core3ptr13drop_in_place17hefc903a20533cb51E($b); //@line 159 "/checkout/src/liballoc/slice.rs"
 $10 = HEAP32[$personalityslot>>2]|0; //@line 153 "/checkout/src/liballoc/slice.rs"
 $11 = ((($personalityslot)) + 4|0); //@line 153 "/checkout/src/liballoc/slice.rs"
 $12 = HEAP32[$11>>2]|0; //@line 153 "/checkout/src/liballoc/slice.rs"
 ___resumeException($10|0);
 // unreachable;
}
function __ZN4core3mem6forget17h22d33bf15f8e5b5dE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $_2 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_2 = sp + 8|0;
 $t = sp;
 HEAP32[$t>>2] = $0;
 $2 = ((($t)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$t>>2]|0; //@line 175 "/checkout/src/libcore/mem.rs"
 $4 = ((($t)) + 4|0); //@line 175 "/checkout/src/libcore/mem.rs"
 $5 = HEAP32[$4>>2]|0; //@line 175 "/checkout/src/libcore/mem.rs"
 __ZN41__LT_core__mem__ManuallyDrop_LT_T_GT__GT_3new17hd3c89e0521b2c110E($_2,$3,$5); //@line 175 "/checkout/src/libcore/mem.rs"
 STACKTOP = sp;return; //@line 176 "/checkout/src/libcore/mem.rs"
}
function __ZN41__LT_core__mem__ManuallyDrop_LT_T_GT__GT_3new17hd3c89e0521b2c110E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $value = sp;
 HEAP32[$value>>2] = $1;
 $3 = ((($value)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$value>>2]|0; //@line 963 "/checkout/src/libcore/mem.rs"
 $5 = ((($value)) + 4|0); //@line 963 "/checkout/src/libcore/mem.rs"
 $6 = HEAP32[$5>>2]|0; //@line 963 "/checkout/src/libcore/mem.rs"
 HEAP32[$0>>2] = $4; //@line 963 "/checkout/src/libcore/mem.rs"
 $7 = ((($0)) + 4|0); //@line 963 "/checkout/src/libcore/mem.rs"
 HEAP32[$7>>2] = $6; //@line 963 "/checkout/src/libcore/mem.rs"
 STACKTOP = sp;return; //@line 964 "/checkout/src/libcore/mem.rs"
}
function __ZN5alloc5slice4hack8into_vec17h77347666c02ce767E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_11 = 0, $_12 = 0, $b = 0;
 var $personalityslot = 0, $xs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $personalityslot = sp + 32|0;
 $_11 = sp + 20|0;
 $xs = sp + 8|0;
 $b = sp;
 HEAP32[$b>>2] = $1;
 $3 = ((($b)) + 4|0);
 HEAP32[$3>>2] = $2;
 $_12 = 0; //@line 155 "/checkout/src/liballoc/slice.rs"
 $_12 = 1; //@line 155 "/checkout/src/liballoc/slice.rs"
 $4 = HEAP32[$b>>2]|0; //@line 155 "/checkout/src/liballoc/slice.rs"
 $5 = ((($b)) + 4|0); //@line 155 "/checkout/src/liballoc/slice.rs"
 $6 = HEAP32[$5>>2]|0; //@line 155 "/checkout/src/liballoc/slice.rs"
 __THREW__ = 0;
 $7 = (invoke_iii(276,($4|0),($6|0))|0); //@line 155 "/checkout/src/liballoc/slice.rs"
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if ($9) {
   label = 10;
  } else {
   $13 = HEAP32[$b>>2]|0; //@line 155 "/checkout/src/liballoc/slice.rs"
   $14 = ((($b)) + 4|0); //@line 155 "/checkout/src/liballoc/slice.rs"
   $15 = HEAP32[$14>>2]|0; //@line 155 "/checkout/src/liballoc/slice.rs"
   __THREW__ = 0;
   $16 = (invoke_iii(277,($13|0),($15|0))|0); //@line 155 "/checkout/src/liballoc/slice.rs"
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    label = 10;
   } else {
    $19 = HEAP32[$b>>2]|0; //@line 155 "/checkout/src/liballoc/slice.rs"
    $20 = ((($b)) + 4|0); //@line 155 "/checkout/src/liballoc/slice.rs"
    $21 = HEAP32[$20>>2]|0; //@line 155 "/checkout/src/liballoc/slice.rs"
    __THREW__ = 0;
    $22 = (invoke_iii(277,($19|0),($21|0))|0); //@line 155 "/checkout/src/liballoc/slice.rs"
    $23 = __THREW__; __THREW__ = 0;
    $24 = $23&1;
    if ($24) {
     label = 10;
    } else {
     __THREW__ = 0;
     invoke_viiii(278,($xs|0),($7|0),($16|0),($22|0)); //@line 155 "/checkout/src/liballoc/slice.rs"
     $25 = __THREW__; __THREW__ = 0;
     $26 = $25&1;
     if ($26) {
      label = 10;
     } else {
      $_12 = 0; //@line 156 "/checkout/src/liballoc/slice.rs"
      $27 = HEAP32[$b>>2]|0; //@line 156 "/checkout/src/liballoc/slice.rs"
      $28 = ((($b)) + 4|0); //@line 156 "/checkout/src/liballoc/slice.rs"
      $29 = HEAP32[$28>>2]|0; //@line 156 "/checkout/src/liballoc/slice.rs"
      __THREW__ = 0;
      invoke_vii(279,($27|0),($29|0)); //@line 156 "/checkout/src/liballoc/slice.rs"
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       $37 = ___cxa_find_matching_catch_2()|0;
       $38 = tempRet0;
       HEAP32[$personalityslot>>2] = $37;
       $39 = ((($personalityslot)) + 4|0);
       HEAP32[$39>>2] = $38;
       __ZN4core3ptr13drop_in_place17hdf63de801541aaabE($xs); //@line 158 "/checkout/src/liballoc/slice.rs"
       break;
      } else {
       ;HEAP32[$_11>>2]=HEAP32[$xs>>2]|0;HEAP32[$_11+4>>2]=HEAP32[$xs+4>>2]|0;HEAP32[$_11+8>>2]=HEAP32[$xs+8>>2]|0; //@line 157 "/checkout/src/liballoc/slice.rs"
       ;HEAP32[$0>>2]=HEAP32[$_11>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_11+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_11+8>>2]|0; //@line 157 "/checkout/src/liballoc/slice.rs"
       STACKTOP = sp;return; //@line 159 "/checkout/src/liballoc/slice.rs"
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 10) {
  $34 = ___cxa_find_matching_catch_2()|0;
  $35 = tempRet0;
  HEAP32[$personalityslot>>2] = $34;
  $36 = ((($personalityslot)) + 4|0);
  HEAP32[$36>>2] = $35;
 }
 $32 = $_12; //@line 159 "/checkout/src/liballoc/slice.rs"
 $33 = $32&1; //@line 159 "/checkout/src/liballoc/slice.rs"
 if (!($33)) {
  $10 = HEAP32[$personalityslot>>2]|0; //@line 153 "/checkout/src/liballoc/slice.rs"
  $11 = ((($personalityslot)) + 4|0); //@line 153 "/checkout/src/liballoc/slice.rs"
  $12 = HEAP32[$11>>2]|0; //@line 153 "/checkout/src/liballoc/slice.rs"
  ___resumeException($10|0);
  // unreachable;
 }
 $_12 = 0; //@line 159 "/checkout/src/liballoc/slice.rs"
 __ZN4core3ptr13drop_in_place17h95882c5328b6b001E($b); //@line 159 "/checkout/src/liballoc/slice.rs"
 $10 = HEAP32[$personalityslot>>2]|0; //@line 153 "/checkout/src/liballoc/slice.rs"
 $11 = ((($personalityslot)) + 4|0); //@line 153 "/checkout/src/liballoc/slice.rs"
 $12 = HEAP32[$11>>2]|0; //@line 153 "/checkout/src/liballoc/slice.rs"
 ___resumeException($10|0);
 // unreachable;
}
function __ZN4core3mem6forget17h37695a73995dfc41E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $_2 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_2 = sp + 8|0;
 $t = sp;
 HEAP32[$t>>2] = $0;
 $2 = ((($t)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$t>>2]|0; //@line 175 "/checkout/src/libcore/mem.rs"
 $4 = ((($t)) + 4|0); //@line 175 "/checkout/src/libcore/mem.rs"
 $5 = HEAP32[$4>>2]|0; //@line 175 "/checkout/src/libcore/mem.rs"
 __ZN41__LT_core__mem__ManuallyDrop_LT_T_GT__GT_3new17hc8ae53e743ef4583E($_2,$3,$5); //@line 175 "/checkout/src/libcore/mem.rs"
 STACKTOP = sp;return; //@line 176 "/checkout/src/libcore/mem.rs"
}
function __ZN41__LT_core__mem__ManuallyDrop_LT_T_GT__GT_3new17hc8ae53e743ef4583E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $value = sp;
 HEAP32[$value>>2] = $1;
 $3 = ((($value)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$value>>2]|0; //@line 963 "/checkout/src/libcore/mem.rs"
 $5 = ((($value)) + 4|0); //@line 963 "/checkout/src/libcore/mem.rs"
 $6 = HEAP32[$5>>2]|0; //@line 963 "/checkout/src/libcore/mem.rs"
 HEAP32[$0>>2] = $4; //@line 963 "/checkout/src/libcore/mem.rs"
 $7 = ((($0)) + 4|0); //@line 963 "/checkout/src/libcore/mem.rs"
 HEAP32[$7>>2] = $6; //@line 963 "/checkout/src/libcore/mem.rs"
 STACKTOP = sp;return; //@line 964 "/checkout/src/libcore/mem.rs"
}
function __ZN5alloc5slice4hack8into_vec17he4b44abd93cb884aE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_11 = 0, $_12 = 0, $b = 0;
 var $personalityslot = 0, $xs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $personalityslot = sp + 32|0;
 $_11 = sp + 20|0;
 $xs = sp + 8|0;
 $b = sp;
 HEAP32[$b>>2] = $1;
 $3 = ((($b)) + 4|0);
 HEAP32[$3>>2] = $2;
 $_12 = 0; //@line 155 "/checkout/src/liballoc/slice.rs"
 $_12 = 1; //@line 155 "/checkout/src/liballoc/slice.rs"
 $4 = HEAP32[$b>>2]|0; //@line 155 "/checkout/src/liballoc/slice.rs"
 $5 = ((($b)) + 4|0); //@line 155 "/checkout/src/liballoc/slice.rs"
 $6 = HEAP32[$5>>2]|0; //@line 155 "/checkout/src/liballoc/slice.rs"
 __THREW__ = 0;
 $7 = (invoke_iii(280,($4|0),($6|0))|0); //@line 155 "/checkout/src/liballoc/slice.rs"
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if ($9) {
   label = 10;
  } else {
   $13 = HEAP32[$b>>2]|0; //@line 155 "/checkout/src/liballoc/slice.rs"
   $14 = ((($b)) + 4|0); //@line 155 "/checkout/src/liballoc/slice.rs"
   $15 = HEAP32[$14>>2]|0; //@line 155 "/checkout/src/liballoc/slice.rs"
   __THREW__ = 0;
   $16 = (invoke_iii(281,($13|0),($15|0))|0); //@line 155 "/checkout/src/liballoc/slice.rs"
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    label = 10;
   } else {
    $19 = HEAP32[$b>>2]|0; //@line 155 "/checkout/src/liballoc/slice.rs"
    $20 = ((($b)) + 4|0); //@line 155 "/checkout/src/liballoc/slice.rs"
    $21 = HEAP32[$20>>2]|0; //@line 155 "/checkout/src/liballoc/slice.rs"
    __THREW__ = 0;
    $22 = (invoke_iii(281,($19|0),($21|0))|0); //@line 155 "/checkout/src/liballoc/slice.rs"
    $23 = __THREW__; __THREW__ = 0;
    $24 = $23&1;
    if ($24) {
     label = 10;
    } else {
     __THREW__ = 0;
     invoke_viiii(282,($xs|0),($7|0),($16|0),($22|0)); //@line 155 "/checkout/src/liballoc/slice.rs"
     $25 = __THREW__; __THREW__ = 0;
     $26 = $25&1;
     if ($26) {
      label = 10;
     } else {
      $_12 = 0; //@line 156 "/checkout/src/liballoc/slice.rs"
      $27 = HEAP32[$b>>2]|0; //@line 156 "/checkout/src/liballoc/slice.rs"
      $28 = ((($b)) + 4|0); //@line 156 "/checkout/src/liballoc/slice.rs"
      $29 = HEAP32[$28>>2]|0; //@line 156 "/checkout/src/liballoc/slice.rs"
      __THREW__ = 0;
      invoke_vii(283,($27|0),($29|0)); //@line 156 "/checkout/src/liballoc/slice.rs"
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       $37 = ___cxa_find_matching_catch_2()|0;
       $38 = tempRet0;
       HEAP32[$personalityslot>>2] = $37;
       $39 = ((($personalityslot)) + 4|0);
       HEAP32[$39>>2] = $38;
       __ZN4core3ptr13drop_in_place17h7da8ace2a16d31d8E($xs); //@line 158 "/checkout/src/liballoc/slice.rs"
       break;
      } else {
       ;HEAP32[$_11>>2]=HEAP32[$xs>>2]|0;HEAP32[$_11+4>>2]=HEAP32[$xs+4>>2]|0;HEAP32[$_11+8>>2]=HEAP32[$xs+8>>2]|0; //@line 157 "/checkout/src/liballoc/slice.rs"
       ;HEAP32[$0>>2]=HEAP32[$_11>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_11+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_11+8>>2]|0; //@line 157 "/checkout/src/liballoc/slice.rs"
       STACKTOP = sp;return; //@line 159 "/checkout/src/liballoc/slice.rs"
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 10) {
  $34 = ___cxa_find_matching_catch_2()|0;
  $35 = tempRet0;
  HEAP32[$personalityslot>>2] = $34;
  $36 = ((($personalityslot)) + 4|0);
  HEAP32[$36>>2] = $35;
 }
 $32 = $_12; //@line 159 "/checkout/src/liballoc/slice.rs"
 $33 = $32&1; //@line 159 "/checkout/src/liballoc/slice.rs"
 if (!($33)) {
  $10 = HEAP32[$personalityslot>>2]|0; //@line 153 "/checkout/src/liballoc/slice.rs"
  $11 = ((($personalityslot)) + 4|0); //@line 153 "/checkout/src/liballoc/slice.rs"
  $12 = HEAP32[$11>>2]|0; //@line 153 "/checkout/src/liballoc/slice.rs"
  ___resumeException($10|0);
  // unreachable;
 }
 $_12 = 0; //@line 159 "/checkout/src/liballoc/slice.rs"
 __ZN4core3ptr13drop_in_place17hc0a099156e59c979E($b); //@line 159 "/checkout/src/liballoc/slice.rs"
 $10 = HEAP32[$personalityslot>>2]|0; //@line 153 "/checkout/src/liballoc/slice.rs"
 $11 = ((($personalityslot)) + 4|0); //@line 153 "/checkout/src/liballoc/slice.rs"
 $12 = HEAP32[$11>>2]|0; //@line 153 "/checkout/src/liballoc/slice.rs"
 ___resumeException($10|0);
 // unreachable;
}
function __ZN4core3mem6forget17hf65d2811865d3e89E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $_2 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_2 = sp + 8|0;
 $t = sp;
 HEAP32[$t>>2] = $0;
 $2 = ((($t)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$t>>2]|0; //@line 175 "/checkout/src/libcore/mem.rs"
 $4 = ((($t)) + 4|0); //@line 175 "/checkout/src/libcore/mem.rs"
 $5 = HEAP32[$4>>2]|0; //@line 175 "/checkout/src/libcore/mem.rs"
 __ZN41__LT_core__mem__ManuallyDrop_LT_T_GT__GT_3new17h962d32c2da9cb50fE($_2,$3,$5); //@line 175 "/checkout/src/libcore/mem.rs"
 STACKTOP = sp;return; //@line 176 "/checkout/src/libcore/mem.rs"
}
function __ZN41__LT_core__mem__ManuallyDrop_LT_T_GT__GT_3new17h962d32c2da9cb50fE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $value = sp;
 HEAP32[$value>>2] = $1;
 $3 = ((($value)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$value>>2]|0; //@line 963 "/checkout/src/libcore/mem.rs"
 $5 = ((($value)) + 4|0); //@line 963 "/checkout/src/libcore/mem.rs"
 $6 = HEAP32[$5>>2]|0; //@line 963 "/checkout/src/libcore/mem.rs"
 HEAP32[$0>>2] = $4; //@line 963 "/checkout/src/libcore/mem.rs"
 $7 = ((($0)) + 4|0); //@line 963 "/checkout/src/libcore/mem.rs"
 HEAP32[$7>>2] = $6; //@line 963 "/checkout/src/libcore/mem.rs"
 STACKTOP = sp;return; //@line 964 "/checkout/src/libcore/mem.rs"
}
function __ZN75__LT_core__result__Result_LT_T_C__u20_E_GT__u20_as_u20_core__fmt__Debug_GT_3fmt17h5352bca6f63ac9ecE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_17 = 0, $_28 = 0, $_3 = 0;
 var $__arg_0 = 0, $__self_0 = 0, $__self_01 = 0, $builder = 0, $builder2 = 0, $self = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_28 = sp + 48|0;
 $builder2 = sp + 36|0;
 $_17 = sp + 32|0;
 $builder = sp + 20|0;
 $_3 = sp + 8|0;
 $self = $0;
 $__arg_0 = $1;
 $2 = $self; //@line 253 "/checkout/src/libcore/result.rs"
 HEAP32[$_3>>2] = $2; //@line 253 "/checkout/src/libcore/result.rs"
 $3 = HEAP32[$_3>>2]|0; //@line 253 "/checkout/src/libcore/result.rs"
 $4 = HEAP32[$3>>2]|0; //@line 253 "/checkout/src/libcore/result.rs"
 $switch = ($4>>>0)<(1); //@line 253 "/checkout/src/libcore/result.rs"
 $5 = HEAP32[$_3>>2]|0;
 if ($switch) {
  $6 = ((($5)) + 4|0); //@line 259 "/checkout/src/libcore/result.rs"
  $__self_0 = $6; //@line 259 "/checkout/src/libcore/result.rs"
  $7 = $__arg_0; //@line 253 "/checkout/src/libcore/result.rs"
  __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder,$7,14343,2); //@line 253 "/checkout/src/libcore/result.rs"
  $8 = $__self_0; //@line 259 "/checkout/src/libcore/result.rs"
  HEAP32[$_17>>2] = $8; //@line 259 "/checkout/src/libcore/result.rs"
  (__ZN4core3fmt8builders10DebugTuple5field17hf986ac1f5cbaa58cE($builder,$_17,3908)|0); //@line 253 "/checkout/src/libcore/result.rs"
  $9 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder)|0); //@line 253 "/checkout/src/libcore/result.rs"
  $10 = $9&1; //@line 253 "/checkout/src/libcore/result.rs"
  $_0 = $10; //@line 253 "/checkout/src/libcore/result.rs"
  $16 = $_0; //@line 253 "/checkout/src/libcore/result.rs"
  $17 = $16&1; //@line 253 "/checkout/src/libcore/result.rs"
  STACKTOP = sp;return ($17|0); //@line 253 "/checkout/src/libcore/result.rs"
 } else {
  $11 = ((($5)) + 4|0); //@line 263 "/checkout/src/libcore/result.rs"
  $__self_01 = $11; //@line 263 "/checkout/src/libcore/result.rs"
  $12 = $__arg_0; //@line 253 "/checkout/src/libcore/result.rs"
  __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder2,$12,14345,3); //@line 253 "/checkout/src/libcore/result.rs"
  $13 = $__self_01; //@line 263 "/checkout/src/libcore/result.rs"
  HEAP32[$_28>>2] = $13; //@line 263 "/checkout/src/libcore/result.rs"
  (__ZN4core3fmt8builders10DebugTuple5field17hf986ac1f5cbaa58cE($builder2,$_28,3832)|0); //@line 253 "/checkout/src/libcore/result.rs"
  $14 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder2)|0); //@line 253 "/checkout/src/libcore/result.rs"
  $15 = $14&1; //@line 253 "/checkout/src/libcore/result.rs"
  $_0 = $15; //@line 253 "/checkout/src/libcore/result.rs"
  $16 = $_0; //@line 253 "/checkout/src/libcore/result.rs"
  $17 = $16&1; //@line 253 "/checkout/src/libcore/result.rs"
  STACKTOP = sp;return ($17|0); //@line 253 "/checkout/src/libcore/result.rs"
 }
 return (0)|0;
}
function __ZN79__LT_core__mem__ManuallyDrop_LT_T_GT__u20_as_u20_core__ops__deref__DerefMut_GT_9deref_mut17h84408d281bd43844E($0) {
 $0 = $0|0;
 var $1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 1013 "/checkout/src/libcore/mem.rs"
 STACKTOP = sp;return ($1|0); //@line 1015 "/checkout/src/libcore/mem.rs"
}
function __ZN81__LT_core__iter__Enumerate_LT_I_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17h05fe401cb92845d3E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $_4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_4 = sp + 4|0;
 $self = sp;
 HEAP32[$self>>2] = $1;
 $2 = HEAP32[$self>>2]|0; //@line 1605 "/checkout/src/libcore/iter/mod.rs"
 $3 = (__ZN91__LT_core__slice__Iter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17h5340d2be0d3d36f5E($2)|0); //@line 1605 "/checkout/src/libcore/iter/mod.rs"
 HEAP32[$_4>>2] = $self; //@line 1605 "/checkout/src/libcore/iter/mod.rs"
 $4 = HEAP32[$_4>>2]|0; //@line 1605 "/checkout/src/libcore/iter/mod.rs"
 __ZN38__LT_core__option__Option_LT_T_GT__GT_3map17hfccc543f12303d69E($0,$3,$4); //@line 1605 "/checkout/src/libcore/iter/mod.rs"
 STACKTOP = sp;return; //@line 1611 "/checkout/src/libcore/iter/mod.rs"
}
function __ZN81__LT_core__iter__Enumerate_LT_I_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next28__u7b__u7b_closure_u7d__u7d_17hd4c5b8a92a03a9d1E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__debuginfo_env_ptr = 0, $a = 0, $arg0 = 0;
 var $ret = 0, $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $ret = sp + 16|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $__debuginfo_env_ptr = $arg0;
 $a = $1;
 $2 = HEAP32[$arg0>>2]|0; //@line 1606 "/checkout/src/libcore/iter/mod.rs"
 $3 = HEAP32[$2>>2]|0; //@line 1606 "/checkout/src/libcore/iter/mod.rs"
 $4 = ((($3)) + 8|0); //@line 1606 "/checkout/src/libcore/iter/mod.rs"
 $5 = HEAP32[$4>>2]|0; //@line 1606 "/checkout/src/libcore/iter/mod.rs"
 $6 = $a; //@line 1606 "/checkout/src/libcore/iter/mod.rs"
 HEAP32[$ret>>2] = $5; //@line 1606 "/checkout/src/libcore/iter/mod.rs"
 $7 = ((($ret)) + 4|0); //@line 1606 "/checkout/src/libcore/iter/mod.rs"
 HEAP32[$7>>2] = $6; //@line 1606 "/checkout/src/libcore/iter/mod.rs"
 $8 = HEAP32[$arg0>>2]|0; //@line 1608 "/checkout/src/libcore/iter/mod.rs"
 $9 = HEAP32[$8>>2]|0; //@line 1608 "/checkout/src/libcore/iter/mod.rs"
 $10 = ((($9)) + 8|0); //@line 1608 "/checkout/src/libcore/iter/mod.rs"
 $11 = HEAP32[$arg0>>2]|0; //@line 1608 "/checkout/src/libcore/iter/mod.rs"
 $12 = HEAP32[$11>>2]|0; //@line 1608 "/checkout/src/libcore/iter/mod.rs"
 $13 = ((($12)) + 8|0); //@line 1608 "/checkout/src/libcore/iter/mod.rs"
 $14 = HEAP32[$13>>2]|0; //@line 1608 "/checkout/src/libcore/iter/mod.rs"
 $15 = (($14) + 1)|0; //@line 1608 "/checkout/src/libcore/iter/mod.rs"
 HEAP32[$10>>2] = $15; //@line 1608 "/checkout/src/libcore/iter/mod.rs"
 $16 = HEAP32[$ret>>2]|0; //@line 1609 "/checkout/src/libcore/iter/mod.rs"
 $17 = ((($ret)) + 4|0); //@line 1609 "/checkout/src/libcore/iter/mod.rs"
 $18 = HEAP32[$17>>2]|0; //@line 1609 "/checkout/src/libcore/iter/mod.rs"
 HEAP32[$retVal>>2] = $16; //@line 1610 "/checkout/src/libcore/iter/mod.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 1610 "/checkout/src/libcore/iter/mod.rs"
 HEAP32[$retVal$index1>>2] = $18; //@line 1610 "/checkout/src/libcore/iter/mod.rs"
 STACKTOP = sp;return; //@line 1610 "/checkout/src/libcore/iter/mod.rs"
}
function __ZN36__LT_T_u20_as_u20_core__any__Any_GT_11get_type_id17h0e756433c3c770d2E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = (__ZN4core3any6TypeId2of17h4d86ed932f02f4b4E()|0); //@line 115 "/checkout/src/libcore/any.rs"
 $2 = tempRet0; //@line 115 "/checkout/src/libcore/any.rs"
 tempRet0 = ($2); //@line 115 "/checkout/src/libcore/any.rs"
 STACKTOP = sp;return ($1|0); //@line 115 "/checkout/src/libcore/any.rs"
}
function __ZN4core3any6TypeId2of17h4d86ed932f02f4b4E() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = sp + 8|0;
 $_0 = sp;
 $0 = $tmp_ret; //@line 372 "/checkout/src/libcore/any.rs"
 $1 = $0; //@line 372 "/checkout/src/libcore/any.rs"
 HEAP32[$1>>2] = 1890621284; //@line 372 "/checkout/src/libcore/any.rs"
 $2 = (($0) + 4)|0; //@line 372 "/checkout/src/libcore/any.rs"
 $3 = $2; //@line 372 "/checkout/src/libcore/any.rs"
 HEAP32[$3>>2] = 286299353; //@line 372 "/checkout/src/libcore/any.rs"
 $4 = $tmp_ret; //@line 372 "/checkout/src/libcore/any.rs"
 $5 = $4; //@line 372 "/checkout/src/libcore/any.rs"
 $6 = HEAP32[$5>>2]|0; //@line 372 "/checkout/src/libcore/any.rs"
 $7 = (($4) + 4)|0; //@line 372 "/checkout/src/libcore/any.rs"
 $8 = $7; //@line 372 "/checkout/src/libcore/any.rs"
 $9 = HEAP32[$8>>2]|0; //@line 372 "/checkout/src/libcore/any.rs"
 $10 = $_0; //@line 371 "/checkout/src/libcore/any.rs"
 $11 = $10; //@line 371 "/checkout/src/libcore/any.rs"
 HEAP32[$11>>2] = $6; //@line 371 "/checkout/src/libcore/any.rs"
 $12 = (($10) + 4)|0; //@line 371 "/checkout/src/libcore/any.rs"
 $13 = $12; //@line 371 "/checkout/src/libcore/any.rs"
 HEAP32[$13>>2] = $9; //@line 371 "/checkout/src/libcore/any.rs"
 $14 = $_0; //@line 374 "/checkout/src/libcore/any.rs"
 $15 = $14; //@line 374 "/checkout/src/libcore/any.rs"
 $16 = HEAP32[$15>>2]|0; //@line 374 "/checkout/src/libcore/any.rs"
 $17 = (($14) + 4)|0; //@line 374 "/checkout/src/libcore/any.rs"
 $18 = $17; //@line 374 "/checkout/src/libcore/any.rs"
 $19 = HEAP32[$18>>2]|0; //@line 374 "/checkout/src/libcore/any.rs"
 tempRet0 = ($19); //@line 374 "/checkout/src/libcore/any.rs"
 STACKTOP = sp;return ($16|0); //@line 374 "/checkout/src/libcore/any.rs"
}
function __ZN47__LT_i32_u20_as_u20_core__iter__range__Step_GT_9add_usize17h30e5da2458d050daE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_3 = 0, $n = 0, $n_as_unsigned = 0, $self = 0, $wrapped = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $self = $1;
 $n = $2;
 $3 = $n; //@line 126 "/checkout/src/libcore/iter/range.rs"
 $4 = (__ZN4core3num18ptr_try_from_impls69__LT_impl_u20_core__convert__TryFrom_LT_usize_GT__u20_for_u20_u32_GT_8try_from17h5c8b72d14914ee32E($3)|0); //@line 126 "/checkout/src/libcore/iter/range.rs"
 $_3 = $4; //@line 126 "/checkout/src/libcore/iter/range.rs"
 $5 = $_3; //@line 127 "/checkout/src/libcore/iter/range.rs"
 $n_as_unsigned = $5; //@line 127 "/checkout/src/libcore/iter/range.rs"
 $6 = $self; //@line 131 "/checkout/src/libcore/iter/range.rs"
 $7 = HEAP32[$6>>2]|0; //@line 131 "/checkout/src/libcore/iter/range.rs"
 $8 = $n_as_unsigned; //@line 131 "/checkout/src/libcore/iter/range.rs"
 $9 = (__ZN4core3num21__LT_impl_u20_u32_GT_12wrapping_add17h14c8620751cfde03E($7,$8)|0); //@line 131 "/checkout/src/libcore/iter/range.rs"
 $wrapped = $9; //@line 131 "/checkout/src/libcore/iter/range.rs"
 $10 = $wrapped; //@line 132 "/checkout/src/libcore/iter/range.rs"
 $11 = $self; //@line 132 "/checkout/src/libcore/iter/range.rs"
 $12 = HEAP32[$11>>2]|0; //@line 132 "/checkout/src/libcore/iter/range.rs"
 $13 = ($10|0)>=($12|0); //@line 132 "/checkout/src/libcore/iter/range.rs"
 if ($13) {
  $14 = $wrapped; //@line 133 "/checkout/src/libcore/iter/range.rs"
  HEAP32[$0>>2] = 1; //@line 133 "/checkout/src/libcore/iter/range.rs"
  $15 = ((($0)) + 4|0); //@line 133 "/checkout/src/libcore/iter/range.rs"
  HEAP32[$15>>2] = $14; //@line 133 "/checkout/src/libcore/iter/range.rs"
  STACKTOP = sp;return; //@line 140 "/checkout/src/libcore/iter/range.rs"
 } else {
  HEAP32[$0>>2] = 0; //@line 135 "/checkout/src/libcore/iter/range.rs"
  STACKTOP = sp;return; //@line 140 "/checkout/src/libcore/iter/range.rs"
 }
}
function __ZN4core3num18ptr_try_from_impls69__LT_impl_u20_core__convert__TryFrom_LT_usize_GT__u20_for_u20_u32_GT_8try_from17h5c8b72d14914ee32E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $_0 = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $value = $0;
 $1 = $value; //@line 3084 "/checkout/src/libcore/num/mod.rs"
 $_0 = $1; //@line 3084 "/checkout/src/libcore/num/mod.rs"
 $2 = $_0; //@line 3085 "/checkout/src/libcore/num/mod.rs"
 STACKTOP = sp;return ($2|0); //@line 3085 "/checkout/src/libcore/num/mod.rs"
}
function __ZN49__LT_core__slice__Iter_LT__u27_a_C__u20_T_GT__GT_8as_slice17h59eb302a7be3ea8aE($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sink$index = 0, $$sink$index9 = 0, $$sreg$field = 0, $$sreg$field3 = 0, $$sreg$index2 = 0, $$sreg1$field = 0, $$sreg1$field6 = 0, $$sreg1$index5 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $diff = 0, $len = 0, $retVal$index13 = 0, $self = 0;
 var $start1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $1 = sp + 16|0;
 $2 = sp;
 $_0 = sp + 32|0;
 $self = $0;
 $3 = $self; //@line 1352 "/checkout/src/libcore/slice/mod.rs"
 $4 = HEAP32[$3>>2]|0; //@line 1352 "/checkout/src/libcore/slice/mod.rs"
 $start1 = $4; //@line 1352 "/checkout/src/libcore/slice/mod.rs"
 $5 = $self; //@line 1352 "/checkout/src/libcore/slice/mod.rs"
 $6 = ((($5)) + 4|0); //@line 1352 "/checkout/src/libcore/slice/mod.rs"
 $7 = HEAP32[$6>>2]|0; //@line 1352 "/checkout/src/libcore/slice/mod.rs"
 $8 = $7; //@line 1259 "/checkout/src/libcore/slice/mod.rs"
 $9 = $start1; //@line 1259 "/checkout/src/libcore/slice/mod.rs"
 $10 = $9; //@line 1259 "/checkout/src/libcore/slice/mod.rs"
 $11 = (__ZN4core3num23__LT_impl_u20_usize_GT_12wrapping_sub17h4713c9842bdc8110E($8,$10)|0); //@line 1259 "/checkout/src/libcore/slice/mod.rs"
 $diff = $11; //@line 1259 "/checkout/src/libcore/slice/mod.rs"
 $12 = $start1; //@line 1260 "/checkout/src/libcore/slice/mod.rs"
 $13 = (__ZN4core5slice13size_from_ptr17he7942dc6838e0e45E($12)|0); //@line 1260 "/checkout/src/libcore/slice/mod.rs"
 $14 = ($13|0)==(0); //@line 1260 "/checkout/src/libcore/slice/mod.rs"
 if ($14) {
  $15 = $diff; //@line 1262 "/checkout/src/libcore/slice/mod.rs"
  __ZN4core5slice14from_raw_parts17hdc8144621bac6d1eE($2,(1),$15); //@line 1262 "/checkout/src/libcore/slice/mod.rs"
  $$sreg$field = HEAP32[$2>>2]|0; //@line 1262 "/checkout/src/libcore/slice/mod.rs"
  $$sreg$index2 = ((($2)) + 4|0); //@line 1262 "/checkout/src/libcore/slice/mod.rs"
  $$sreg$field3 = HEAP32[$$sreg$index2>>2]|0; //@line 1262 "/checkout/src/libcore/slice/mod.rs"
  $$sink$index = $$sreg$field;$$sink$index9 = $$sreg$field3;
  HEAP32[$_0>>2] = $$sink$index;
  $24 = ((($_0)) + 4|0);
  HEAP32[$24>>2] = $$sink$index9;
  $25 = HEAP32[$_0>>2]|0; //@line 1353 "/checkout/src/libcore/slice/mod.rs"
  $26 = ((($_0)) + 4|0); //@line 1353 "/checkout/src/libcore/slice/mod.rs"
  $27 = HEAP32[$26>>2]|0; //@line 1353 "/checkout/src/libcore/slice/mod.rs"
  HEAP32[$retVal>>2] = $25; //@line 1353 "/checkout/src/libcore/slice/mod.rs"
  $retVal$index13 = ((($retVal)) + 4|0); //@line 1353 "/checkout/src/libcore/slice/mod.rs"
  HEAP32[$retVal$index13>>2] = $27; //@line 1353 "/checkout/src/libcore/slice/mod.rs"
  STACKTOP = sp;return; //@line 1353 "/checkout/src/libcore/slice/mod.rs"
 }
 $16 = $diff; //@line 1264 "/checkout/src/libcore/slice/mod.rs"
 $17 = $start1; //@line 1264 "/checkout/src/libcore/slice/mod.rs"
 $18 = (__ZN4core5slice13size_from_ptr17he7942dc6838e0e45E($17)|0); //@line 1264 "/checkout/src/libcore/slice/mod.rs"
 $19 = ($18|0)==(0); //@line 1264 "/checkout/src/libcore/slice/mod.rs"
 $20 = $19; //@line 1264 "/checkout/src/libcore/slice/mod.rs"
 if ($20) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(3868); //@line 1264 "/checkout/src/libcore/slice/mod.rs"
  // unreachable; //@line 1264 "/checkout/src/libcore/slice/mod.rs"
 }
 $21 = (($16>>>0) / ($18>>>0))&-1; //@line 1264 "/checkout/src/libcore/slice/mod.rs"
 $len = $21; //@line 1264 "/checkout/src/libcore/slice/mod.rs"
 $22 = $start1; //@line 1265 "/checkout/src/libcore/slice/mod.rs"
 $23 = $len; //@line 1265 "/checkout/src/libcore/slice/mod.rs"
 __ZN4core5slice14from_raw_parts17hdc8144621bac6d1eE($1,$22,$23); //@line 1265 "/checkout/src/libcore/slice/mod.rs"
 $$sreg1$field = HEAP32[$1>>2]|0; //@line 1265 "/checkout/src/libcore/slice/mod.rs"
 $$sreg1$index5 = ((($1)) + 4|0); //@line 1265 "/checkout/src/libcore/slice/mod.rs"
 $$sreg1$field6 = HEAP32[$$sreg1$index5>>2]|0; //@line 1265 "/checkout/src/libcore/slice/mod.rs"
 $$sink$index = $$sreg1$field;$$sink$index9 = $$sreg1$field6;
 HEAP32[$_0>>2] = $$sink$index;
 $24 = ((($_0)) + 4|0);
 HEAP32[$24>>2] = $$sink$index9;
 $25 = HEAP32[$_0>>2]|0; //@line 1353 "/checkout/src/libcore/slice/mod.rs"
 $26 = ((($_0)) + 4|0); //@line 1353 "/checkout/src/libcore/slice/mod.rs"
 $27 = HEAP32[$26>>2]|0; //@line 1353 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$retVal>>2] = $25; //@line 1353 "/checkout/src/libcore/slice/mod.rs"
 $retVal$index13 = ((($retVal)) + 4|0); //@line 1353 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$retVal$index13>>2] = $27; //@line 1353 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return; //@line 1353 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN4core5slice13size_from_ptr17he7942dc6838e0e45E($0) {
 $0 = $0|0;
 var $1 = 0, $arg0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = (__ZN4core3mem7size_of17h809a29d4399807a6E()|0); //@line 1120 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return ($1|0); //@line 1121 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN4core5slice14from_raw_parts17hdc8144621bac6d1eE($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_3 = 0, $len = 0, $p = 0, $retVal$index1 = 0, $transmute_temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp = sp + 16|0;
 $_3 = sp + 8|0;
 $p = $0;
 $len = $1;
 $2 = $p; //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 $3 = $len; //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$_3>>2] = $2; //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 $4 = ((($_3)) + 4|0); //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$4>>2] = $3; //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 $5 = HEAP32[$_3>>2]|0; //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 $6 = ((($_3)) + 4|0); //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 $7 = HEAP32[$6>>2]|0; //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$transmute_temp>>2] = $5; //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 $8 = ((($transmute_temp)) + 4|0); //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$8>>2] = $7; //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 $9 = HEAP32[$transmute_temp>>2]|0; //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 $10 = ((($transmute_temp)) + 4|0); //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 $11 = HEAP32[$10>>2]|0; //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$retVal>>2] = $9; //@line 2372 "/checkout/src/libcore/slice/mod.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 2372 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$retVal$index1>>2] = $11; //@line 2372 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return; //@line 2372 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN49__LT_usize_u20_as_u20_core__iter__range__Step_GT_9add_usize17h0cff4dd1ce46cac8E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_3 = 0, $n = 0, $n_as_t = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $1;
 $n = $2;
 $3 = $n; //@line 94 "/checkout/src/libcore/iter/range.rs"
 $4 = (__ZN53__LT_T_u20_as_u20_core__convert__TryFrom_LT_U_GT__GT_8try_from17h351f56b46b10e451E($3)|0); //@line 94 "/checkout/src/libcore/iter/range.rs"
 $_3 = $4; //@line 94 "/checkout/src/libcore/iter/range.rs"
 $5 = $_3; //@line 95 "/checkout/src/libcore/iter/range.rs"
 $n_as_t = $5; //@line 95 "/checkout/src/libcore/iter/range.rs"
 $6 = $self; //@line 95 "/checkout/src/libcore/iter/range.rs"
 $7 = HEAP32[$6>>2]|0; //@line 95 "/checkout/src/libcore/iter/range.rs"
 $8 = $n_as_t; //@line 95 "/checkout/src/libcore/iter/range.rs"
 __ZN4core3num23__LT_impl_u20_usize_GT_11checked_add17h00d1a99943b8f1ffE($0,$7,$8); //@line 95 "/checkout/src/libcore/iter/range.rs"
 STACKTOP = sp;return; //@line 98 "/checkout/src/libcore/iter/range.rs"
}
function __ZN53__LT_T_u20_as_u20_core__convert__TryFrom_LT_U_GT__GT_8try_from17h351f56b46b10e451E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $_0 = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $value = $0;
 $1 = $value; //@line 444 "/checkout/src/libcore/convert.rs"
 $2 = (__ZN50__LT_T_u20_as_u20_core__convert__From_LT_T_GT__GT_4from17he71993c4b8fc0247E($1)|0); //@line 444 "/checkout/src/libcore/convert.rs"
 $_0 = $2; //@line 444 "/checkout/src/libcore/convert.rs"
 $3 = $_0; //@line 445 "/checkout/src/libcore/convert.rs"
 STACKTOP = sp;return ($3|0); //@line 445 "/checkout/src/libcore/convert.rs"
}
function __ZN50__LT_T_u20_as_u20_core__convert__From_LT_T_GT__GT_4from17he71993c4b8fc0247E($0) {
 $0 = $0|0;
 var $1 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $t = $0;
 $1 = $t; //@line 422 "/checkout/src/libcore/convert.rs"
 STACKTOP = sp;return ($1|0); //@line 422 "/checkout/src/libcore/convert.rs"
}
function __ZN4core3fmt8builders9DebugList7entries17h65696111751be760E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sreg$field = 0, $$sreg$field8 = 0, $$sreg$index7 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_12 = 0, $_27 = 0, $__next = 0, $entries = 0, $entry = 0, $iter = 0, $personalityslot = 0, $self = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $personalityslot = sp + 48|0;
 $entry = sp + 44|0;
 $_12 = sp + 36|0;
 $iter = sp + 24|0;
 $entries = sp + 16|0;
 $self = $0;
 HEAP32[$entries>>2] = $1;
 $4 = ((($entries)) + 4|0);
 HEAP32[$4>>2] = $2;
 $_27 = 0; //@line 411 "/checkout/src/libcore/fmt/builders.rs"
 $5 = HEAP32[$entries>>2]|0; //@line 412 "/checkout/src/libcore/fmt/builders.rs"
 $6 = ((($entries)) + 4|0); //@line 412 "/checkout/src/libcore/fmt/builders.rs"
 $7 = HEAP32[$6>>2]|0; //@line 412 "/checkout/src/libcore/fmt/builders.rs"
 __ZN54__LT_I_u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17hbf55a45c25a54385E($3,$5,$7); //@line 412 "/checkout/src/libcore/fmt/builders.rs"
 $$sreg$field = HEAP32[$3>>2]|0; //@line 412 "/checkout/src/libcore/fmt/builders.rs"
 $$sreg$index7 = ((($3)) + 4|0); //@line 412 "/checkout/src/libcore/fmt/builders.rs"
 $$sreg$field8 = HEAP32[$$sreg$index7>>2]|0; //@line 412 "/checkout/src/libcore/fmt/builders.rs"
 HEAP32[$iter>>2] = $$sreg$field; //@line 412 "/checkout/src/libcore/fmt/builders.rs"
 $8 = ((($iter)) + 4|0); //@line 412 "/checkout/src/libcore/fmt/builders.rs"
 HEAP32[$8>>2] = $$sreg$field8; //@line 412 "/checkout/src/libcore/fmt/builders.rs"
 while(1) {
  __THREW__ = 0;
  $9 = (invoke_ii(284,($iter|0))|0); //@line 412 "/checkout/src/libcore/fmt/builders.rs"
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   break;
  }
  HEAP32[$_12>>2] = $9; //@line 412 "/checkout/src/libcore/fmt/builders.rs"
  $12 = HEAP32[$_12>>2]|0; //@line 412 "/checkout/src/libcore/fmt/builders.rs"
  $13 = ($12|0)==(0|0); //@line 412 "/checkout/src/libcore/fmt/builders.rs"
  if ($13) {
   label = 6;
   break;
  }
  $17 = HEAP32[$_12>>2]|0; //@line 412 "/checkout/src/libcore/fmt/builders.rs"
  $val = $17; //@line 412 "/checkout/src/libcore/fmt/builders.rs"
  $18 = $val; //@line 412 "/checkout/src/libcore/fmt/builders.rs"
  $_27 = 1; //@line 412 "/checkout/src/libcore/fmt/builders.rs"
  $__next = $18; //@line 412 "/checkout/src/libcore/fmt/builders.rs"
  $_27 = 0; //@line 412 "/checkout/src/libcore/fmt/builders.rs"
  $19 = $__next; //@line 412 "/checkout/src/libcore/fmt/builders.rs"
  HEAP32[$entry>>2] = $19; //@line 412 "/checkout/src/libcore/fmt/builders.rs"
  $20 = $self; //@line 413 "/checkout/src/libcore/fmt/builders.rs"
  __THREW__ = 0;
  (invoke_iiii(285,($20|0),($entry|0),(3892|0))|0); //@line 413 "/checkout/src/libcore/fmt/builders.rs"
  $21 = __THREW__; __THREW__ = 0;
  $22 = $21&1;
  if ($22) {
   break;
  }
  $_27 = 0; //@line 414 "/checkout/src/libcore/fmt/builders.rs"
 }
 if ((label|0) == 6) {
  $_27 = 0; //@line 414 "/checkout/src/libcore/fmt/builders.rs"
  $23 = $self; //@line 415 "/checkout/src/libcore/fmt/builders.rs"
  STACKTOP = sp;return ($23|0); //@line 416 "/checkout/src/libcore/fmt/builders.rs"
 }
 $24 = ___cxa_find_matching_catch_2()|0;
 $25 = tempRet0;
 HEAP32[$personalityslot>>2] = $24;
 $26 = ((($personalityslot)) + 4|0);
 HEAP32[$26>>2] = $25;
 $27 = $_27; //@line 414 "/checkout/src/libcore/fmt/builders.rs"
 $28 = $27&1; //@line 414 "/checkout/src/libcore/fmt/builders.rs"
 if (!($28)) {
  $14 = HEAP32[$personalityslot>>2]|0; //@line 408 "/checkout/src/libcore/fmt/builders.rs"
  $15 = ((($personalityslot)) + 4|0); //@line 408 "/checkout/src/libcore/fmt/builders.rs"
  $16 = HEAP32[$15>>2]|0; //@line 408 "/checkout/src/libcore/fmt/builders.rs"
  ___resumeException($14|0);
  // unreachable;
 }
 $_27 = 0; //@line 414 "/checkout/src/libcore/fmt/builders.rs"
 $14 = HEAP32[$personalityslot>>2]|0; //@line 408 "/checkout/src/libcore/fmt/builders.rs"
 $15 = ((($personalityslot)) + 4|0); //@line 408 "/checkout/src/libcore/fmt/builders.rs"
 $16 = HEAP32[$15>>2]|0; //@line 408 "/checkout/src/libcore/fmt/builders.rs"
 ___resumeException($14|0);
 // unreachable;
 return (0)|0;
}
function __ZN54__LT_I_u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17hbf55a45c25a54385E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $retVal$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp;
 HEAP32[$self>>2] = $0;
 $2 = ((($self)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$self>>2]|0; //@line 257 "/checkout/src/libcore/iter/traits.rs"
 $4 = ((($self)) + 4|0); //@line 257 "/checkout/src/libcore/iter/traits.rs"
 $5 = HEAP32[$4>>2]|0; //@line 257 "/checkout/src/libcore/iter/traits.rs"
 HEAP32[$retVal>>2] = $3; //@line 258 "/checkout/src/libcore/iter/traits.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 258 "/checkout/src/libcore/iter/traits.rs"
 HEAP32[$retVal$index1>>2] = $5; //@line 258 "/checkout/src/libcore/iter/traits.rs"
 STACKTOP = sp;return; //@line 258 "/checkout/src/libcore/iter/traits.rs"
}
function __ZN91__LT_core__slice__Iter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17hebb15704c3f43268E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_0$i$i = 0, $_16 = 0, $current$i = 0;
 var $i$i$i = 0, $ptr = 0, $ptr$i$i = 0, $self = 0, $self$i = 0, $self$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_0 = sp + 4|0;
 $self = $0;
 $1 = (__ZN4core3mem7size_of17h34f2235168088e08E()|0); //@line 1134 "/checkout/src/libcore/slice/mod.rs"
 $2 = ($1|0)!=(0); //@line 1134 "/checkout/src/libcore/slice/mod.rs"
 if ($2) {
  $3 = $self; //@line 1135 "/checkout/src/libcore/slice/mod.rs"
  $4 = HEAP32[$3>>2]|0; //@line 1135 "/checkout/src/libcore/slice/mod.rs"
  (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h5943771350e7aea2E($4)|0); //@line 1135 "/checkout/src/libcore/slice/mod.rs"
  $5 = $self; //@line 1136 "/checkout/src/libcore/slice/mod.rs"
  $6 = ((($5)) + 4|0); //@line 1136 "/checkout/src/libcore/slice/mod.rs"
  $7 = HEAP32[$6>>2]|0; //@line 1136 "/checkout/src/libcore/slice/mod.rs"
  (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h5943771350e7aea2E($7)|0); //@line 1136 "/checkout/src/libcore/slice/mod.rs"
 }
 $8 = $self; //@line 1138 "/checkout/src/libcore/slice/mod.rs"
 $9 = HEAP32[$8>>2]|0; //@line 1138 "/checkout/src/libcore/slice/mod.rs"
 $10 = $self; //@line 1138 "/checkout/src/libcore/slice/mod.rs"
 $11 = ((($10)) + 4|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
 $12 = HEAP32[$11>>2]|0; //@line 1138 "/checkout/src/libcore/slice/mod.rs"
 $13 = ($9|0)==($12|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
 if ($13) {
  HEAP32[$_0>>2] = 0; //@line 1139 "/checkout/src/libcore/slice/mod.rs"
  $36 = HEAP32[$_0>>2]|0; //@line 1144 "/checkout/src/libcore/slice/mod.rs"
  STACKTOP = sp;return ($36|0); //@line 1144 "/checkout/src/libcore/slice/mod.rs"
 }
 $14 = $self; //@line 1141 "/checkout/src/libcore/slice/mod.rs"
 $self$i = $14;
 $15 = $self$i; //@line 1531 "/checkout/src/libcore/slice/mod.rs"
 $16 = HEAP32[$15>>2]|0; //@line 1531 "/checkout/src/libcore/slice/mod.rs"
 $current$i = $16; //@line 1531 "/checkout/src/libcore/slice/mod.rs"
 $17 = $self$i; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
 $18 = HEAP32[$17>>2]|0; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
 $self$i$i = $18;
 $i$i$i = 1;
 $19 = $self$i$i; //@line 1547 "/checkout/src/libcore/slice/mod.rs"
 $ptr$i$i = $19; //@line 1547 "/checkout/src/libcore/slice/mod.rs"
 $20 = $ptr$i$i; //@line 233 "/checkout/src/libcore/slice/mod.rs"
 $21 = (__ZN4core5slice13size_from_ptr17h02aaf8e8f1a9a99bE($20)|0); //@line 233 "/checkout/src/libcore/slice/mod.rs"
 $22 = ($21|0)==(0); //@line 233 "/checkout/src/libcore/slice/mod.rs"
 $23 = $ptr$i$i;
 if ($22) {
  $24 = $i$i$i; //@line 1547 "/checkout/src/libcore/slice/mod.rs"
  $25 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_15wrapping_offset17ha6d8b6c64249cfb7E($23,$24)|0); //@line 234 "/checkout/src/libcore/slice/mod.rs"
  $_0$i$i = $25; //@line 234 "/checkout/src/libcore/slice/mod.rs"
 } else {
  $26 = $i$i$i; //@line 1547 "/checkout/src/libcore/slice/mod.rs"
  $27 = (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_6offset17hc45b0a90f73ce35eE($23,$26)|0); //@line 236 "/checkout/src/libcore/slice/mod.rs"
  $_0$i$i = $27; //@line 236 "/checkout/src/libcore/slice/mod.rs"
 }
 $28 = $_0$i$i; //@line 1548 "/checkout/src/libcore/slice/mod.rs"
 $29 = $self$i; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$29>>2] = $28; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
 $30 = $current$i; //@line 1533 "/checkout/src/libcore/slice/mod.rs"
 $ptr = $30; //@line 1141 "/checkout/src/libcore/slice/mod.rs"
 $31 = $ptr; //@line 245 "/checkout/src/libcore/slice/mod.rs"
 $32 = (__ZN4core5slice13size_from_ptr17h02aaf8e8f1a9a99bE($31)|0); //@line 245 "/checkout/src/libcore/slice/mod.rs"
 $33 = ($32|0)==(0); //@line 245 "/checkout/src/libcore/slice/mod.rs"
 if ($33) {
  $_16 = (1); //@line 247 "/checkout/src/libcore/slice/mod.rs"
 } else {
  $34 = $ptr; //@line 249 "/checkout/src/libcore/slice/mod.rs"
  $_16 = $34; //@line 249 "/checkout/src/libcore/slice/mod.rs"
 }
 $35 = $_16; //@line 1141 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$_0>>2] = $35; //@line 1141 "/checkout/src/libcore/slice/mod.rs"
 $36 = HEAP32[$_0>>2]|0; //@line 1144 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return ($36|0); //@line 1144 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN4core5slice13size_from_ptr17h02aaf8e8f1a9a99bE($0) {
 $0 = $0|0;
 var $1 = 0, $arg0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = (__ZN4core3mem7size_of17h34f2235168088e08E()|0); //@line 1120 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return ($1|0); //@line 1121 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN4core3fmt8builders9DebugList7entries17h8fcbcf38dc4d588aE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sreg$field = 0, $$sreg$field8 = 0, $$sreg$index7 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_12 = 0, $_27 = 0, $__next = 0, $entries = 0, $entry = 0, $iter = 0, $personalityslot = 0, $self = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $personalityslot = sp + 48|0;
 $entry = sp + 44|0;
 $_12 = sp + 36|0;
 $iter = sp + 24|0;
 $entries = sp + 16|0;
 $self = $0;
 HEAP32[$entries>>2] = $1;
 $4 = ((($entries)) + 4|0);
 HEAP32[$4>>2] = $2;
 $_27 = 0; //@line 411 "/checkout/src/libcore/fmt/builders.rs"
 $5 = HEAP32[$entries>>2]|0; //@line 412 "/checkout/src/libcore/fmt/builders.rs"
 $6 = ((($entries)) + 4|0); //@line 412 "/checkout/src/libcore/fmt/builders.rs"
 $7 = HEAP32[$6>>2]|0; //@line 412 "/checkout/src/libcore/fmt/builders.rs"
 __ZN54__LT_I_u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17hd9bca93f67af8eebE($3,$5,$7); //@line 412 "/checkout/src/libcore/fmt/builders.rs"
 $$sreg$field = HEAP32[$3>>2]|0; //@line 412 "/checkout/src/libcore/fmt/builders.rs"
 $$sreg$index7 = ((($3)) + 4|0); //@line 412 "/checkout/src/libcore/fmt/builders.rs"
 $$sreg$field8 = HEAP32[$$sreg$index7>>2]|0; //@line 412 "/checkout/src/libcore/fmt/builders.rs"
 HEAP32[$iter>>2] = $$sreg$field; //@line 412 "/checkout/src/libcore/fmt/builders.rs"
 $8 = ((($iter)) + 4|0); //@line 412 "/checkout/src/libcore/fmt/builders.rs"
 HEAP32[$8>>2] = $$sreg$field8; //@line 412 "/checkout/src/libcore/fmt/builders.rs"
 while(1) {
  __THREW__ = 0;
  $9 = (invoke_ii(286,($iter|0))|0); //@line 412 "/checkout/src/libcore/fmt/builders.rs"
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   break;
  }
  HEAP32[$_12>>2] = $9; //@line 412 "/checkout/src/libcore/fmt/builders.rs"
  $12 = HEAP32[$_12>>2]|0; //@line 412 "/checkout/src/libcore/fmt/builders.rs"
  $13 = ($12|0)==(0|0); //@line 412 "/checkout/src/libcore/fmt/builders.rs"
  if ($13) {
   label = 6;
   break;
  }
  $17 = HEAP32[$_12>>2]|0; //@line 412 "/checkout/src/libcore/fmt/builders.rs"
  $val = $17; //@line 412 "/checkout/src/libcore/fmt/builders.rs"
  $18 = $val; //@line 412 "/checkout/src/libcore/fmt/builders.rs"
  $_27 = 1; //@line 412 "/checkout/src/libcore/fmt/builders.rs"
  $__next = $18; //@line 412 "/checkout/src/libcore/fmt/builders.rs"
  $_27 = 0; //@line 412 "/checkout/src/libcore/fmt/builders.rs"
  $19 = $__next; //@line 412 "/checkout/src/libcore/fmt/builders.rs"
  HEAP32[$entry>>2] = $19; //@line 412 "/checkout/src/libcore/fmt/builders.rs"
  $20 = $self; //@line 413 "/checkout/src/libcore/fmt/builders.rs"
  __THREW__ = 0;
  (invoke_iiii(285,($20|0),($entry|0),(3908|0))|0); //@line 413 "/checkout/src/libcore/fmt/builders.rs"
  $21 = __THREW__; __THREW__ = 0;
  $22 = $21&1;
  if ($22) {
   break;
  }
  $_27 = 0; //@line 414 "/checkout/src/libcore/fmt/builders.rs"
 }
 if ((label|0) == 6) {
  $_27 = 0; //@line 414 "/checkout/src/libcore/fmt/builders.rs"
  $23 = $self; //@line 415 "/checkout/src/libcore/fmt/builders.rs"
  STACKTOP = sp;return ($23|0); //@line 416 "/checkout/src/libcore/fmt/builders.rs"
 }
 $24 = ___cxa_find_matching_catch_2()|0;
 $25 = tempRet0;
 HEAP32[$personalityslot>>2] = $24;
 $26 = ((($personalityslot)) + 4|0);
 HEAP32[$26>>2] = $25;
 $27 = $_27; //@line 414 "/checkout/src/libcore/fmt/builders.rs"
 $28 = $27&1; //@line 414 "/checkout/src/libcore/fmt/builders.rs"
 if (!($28)) {
  $14 = HEAP32[$personalityslot>>2]|0; //@line 408 "/checkout/src/libcore/fmt/builders.rs"
  $15 = ((($personalityslot)) + 4|0); //@line 408 "/checkout/src/libcore/fmt/builders.rs"
  $16 = HEAP32[$15>>2]|0; //@line 408 "/checkout/src/libcore/fmt/builders.rs"
  ___resumeException($14|0);
  // unreachable;
 }
 $_27 = 0; //@line 414 "/checkout/src/libcore/fmt/builders.rs"
 $14 = HEAP32[$personalityslot>>2]|0; //@line 408 "/checkout/src/libcore/fmt/builders.rs"
 $15 = ((($personalityslot)) + 4|0); //@line 408 "/checkout/src/libcore/fmt/builders.rs"
 $16 = HEAP32[$15>>2]|0; //@line 408 "/checkout/src/libcore/fmt/builders.rs"
 ___resumeException($14|0);
 // unreachable;
 return (0)|0;
}
function __ZN54__LT_I_u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17hd9bca93f67af8eebE($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $retVal$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp;
 HEAP32[$self>>2] = $0;
 $2 = ((($self)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$self>>2]|0; //@line 257 "/checkout/src/libcore/iter/traits.rs"
 $4 = ((($self)) + 4|0); //@line 257 "/checkout/src/libcore/iter/traits.rs"
 $5 = HEAP32[$4>>2]|0; //@line 257 "/checkout/src/libcore/iter/traits.rs"
 HEAP32[$retVal>>2] = $3; //@line 258 "/checkout/src/libcore/iter/traits.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 258 "/checkout/src/libcore/iter/traits.rs"
 HEAP32[$retVal$index1>>2] = $5; //@line 258 "/checkout/src/libcore/iter/traits.rs"
 STACKTOP = sp;return; //@line 258 "/checkout/src/libcore/iter/traits.rs"
}
function __ZN91__LT_core__slice__Iter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17h5340d2be0d3d36f5E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_0$i$i = 0, $_16 = 0, $current$i = 0;
 var $i$i$i = 0, $ptr = 0, $ptr$i$i = 0, $self = 0, $self$i = 0, $self$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_0 = sp + 4|0;
 $self = $0;
 $1 = (__ZN4core3mem7size_of17h975d444723173452E()|0); //@line 1134 "/checkout/src/libcore/slice/mod.rs"
 $2 = ($1|0)!=(0); //@line 1134 "/checkout/src/libcore/slice/mod.rs"
 if ($2) {
  $3 = $self; //@line 1135 "/checkout/src/libcore/slice/mod.rs"
  $4 = HEAP32[$3>>2]|0; //@line 1135 "/checkout/src/libcore/slice/mod.rs"
  (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17hb519a6910a0cefa8E($4)|0); //@line 1135 "/checkout/src/libcore/slice/mod.rs"
  $5 = $self; //@line 1136 "/checkout/src/libcore/slice/mod.rs"
  $6 = ((($5)) + 4|0); //@line 1136 "/checkout/src/libcore/slice/mod.rs"
  $7 = HEAP32[$6>>2]|0; //@line 1136 "/checkout/src/libcore/slice/mod.rs"
  (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17hb519a6910a0cefa8E($7)|0); //@line 1136 "/checkout/src/libcore/slice/mod.rs"
 }
 $8 = $self; //@line 1138 "/checkout/src/libcore/slice/mod.rs"
 $9 = HEAP32[$8>>2]|0; //@line 1138 "/checkout/src/libcore/slice/mod.rs"
 $10 = $self; //@line 1138 "/checkout/src/libcore/slice/mod.rs"
 $11 = ((($10)) + 4|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
 $12 = HEAP32[$11>>2]|0; //@line 1138 "/checkout/src/libcore/slice/mod.rs"
 $13 = ($9|0)==($12|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
 if ($13) {
  HEAP32[$_0>>2] = 0; //@line 1139 "/checkout/src/libcore/slice/mod.rs"
  $36 = HEAP32[$_0>>2]|0; //@line 1144 "/checkout/src/libcore/slice/mod.rs"
  STACKTOP = sp;return ($36|0); //@line 1144 "/checkout/src/libcore/slice/mod.rs"
 }
 $14 = $self; //@line 1141 "/checkout/src/libcore/slice/mod.rs"
 $self$i = $14;
 $15 = $self$i; //@line 1531 "/checkout/src/libcore/slice/mod.rs"
 $16 = HEAP32[$15>>2]|0; //@line 1531 "/checkout/src/libcore/slice/mod.rs"
 $current$i = $16; //@line 1531 "/checkout/src/libcore/slice/mod.rs"
 $17 = $self$i; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
 $18 = HEAP32[$17>>2]|0; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
 $self$i$i = $18;
 $i$i$i = 1;
 $19 = $self$i$i; //@line 1547 "/checkout/src/libcore/slice/mod.rs"
 $ptr$i$i = $19; //@line 1547 "/checkout/src/libcore/slice/mod.rs"
 $20 = $ptr$i$i; //@line 233 "/checkout/src/libcore/slice/mod.rs"
 $21 = (__ZN4core5slice13size_from_ptr17hf8558e1f9f621ce5E($20)|0); //@line 233 "/checkout/src/libcore/slice/mod.rs"
 $22 = ($21|0)==(0); //@line 233 "/checkout/src/libcore/slice/mod.rs"
 $23 = $ptr$i$i;
 if ($22) {
  $24 = $i$i$i; //@line 1547 "/checkout/src/libcore/slice/mod.rs"
  $25 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_15wrapping_offset17ha6d8b6c64249cfb7E($23,$24)|0); //@line 234 "/checkout/src/libcore/slice/mod.rs"
  $_0$i$i = $25; //@line 234 "/checkout/src/libcore/slice/mod.rs"
 } else {
  $26 = $i$i$i; //@line 1547 "/checkout/src/libcore/slice/mod.rs"
  $27 = (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_6offset17h84b833a1a70712c3E($23,$26)|0); //@line 236 "/checkout/src/libcore/slice/mod.rs"
  $_0$i$i = $27; //@line 236 "/checkout/src/libcore/slice/mod.rs"
 }
 $28 = $_0$i$i; //@line 1548 "/checkout/src/libcore/slice/mod.rs"
 $29 = $self$i; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$29>>2] = $28; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
 $30 = $current$i; //@line 1533 "/checkout/src/libcore/slice/mod.rs"
 $ptr = $30; //@line 1141 "/checkout/src/libcore/slice/mod.rs"
 $31 = $ptr; //@line 245 "/checkout/src/libcore/slice/mod.rs"
 $32 = (__ZN4core5slice13size_from_ptr17hf8558e1f9f621ce5E($31)|0); //@line 245 "/checkout/src/libcore/slice/mod.rs"
 $33 = ($32|0)==(0); //@line 245 "/checkout/src/libcore/slice/mod.rs"
 if ($33) {
  $_16 = (1); //@line 247 "/checkout/src/libcore/slice/mod.rs"
 } else {
  $34 = $ptr; //@line 249 "/checkout/src/libcore/slice/mod.rs"
  $_16 = $34; //@line 249 "/checkout/src/libcore/slice/mod.rs"
 }
 $35 = $_16; //@line 1141 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$_0>>2] = $35; //@line 1141 "/checkout/src/libcore/slice/mod.rs"
 $36 = HEAP32[$_0>>2]|0; //@line 1144 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return ($36|0); //@line 1144 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN4core5slice13size_from_ptr17hf8558e1f9f621ce5E($0) {
 $0 = $0|0;
 var $1 = 0, $arg0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = (__ZN4core3mem7size_of17h975d444723173452E()|0); //@line 1120 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return ($1|0); //@line 1121 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN4core4iter8iterator8Iterator9enumerate17h84e68f3ee0005e74E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp;
 HEAP32[$self>>2] = $1;
 $3 = ((($self)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$self>>2]|0; //@line 700 "/checkout/src/libcore/iter/iterator.rs"
 $5 = ((($self)) + 4|0); //@line 700 "/checkout/src/libcore/iter/iterator.rs"
 $6 = HEAP32[$5>>2]|0; //@line 700 "/checkout/src/libcore/iter/iterator.rs"
 HEAP32[$0>>2] = $4; //@line 700 "/checkout/src/libcore/iter/iterator.rs"
 $7 = ((($0)) + 4|0); //@line 700 "/checkout/src/libcore/iter/iterator.rs"
 HEAP32[$7>>2] = $6; //@line 700 "/checkout/src/libcore/iter/iterator.rs"
 $8 = ((($0)) + 8|0); //@line 700 "/checkout/src/libcore/iter/iterator.rs"
 HEAP32[$8>>2] = 0; //@line 700 "/checkout/src/libcore/iter/iterator.rs"
 STACKTOP = sp;return; //@line 701 "/checkout/src/libcore/iter/iterator.rs"
}
function __ZN4core5array97__LT_impl_u20_core__fmt__Debug_u20_for_u20__u5b_T_u3b__u20__LT_unevaluated_u5b__u5d__GT__u5d__GT_3fmt17he614c7c0d1dc53c6E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_5 = 0, $f = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $_5 = sp + 16|0;
 $self = $0;
 $f = $1;
 $3 = $self; //@line 189 "/checkout/src/libcore/array.rs"
 __ZN4core5slice74__LT_impl_u20_core__ops__index__Index_LT_I_GT__u20_for_u20__u5b_T_u5d__GT_5index17hc021943d0aa41e20E($2,$3,11); //@line 189 "/checkout/src/libcore/array.rs"
 $$sreg$field = HEAP32[$2>>2]|0; //@line 189 "/checkout/src/libcore/array.rs"
 $$sreg$index1 = ((($2)) + 4|0); //@line 189 "/checkout/src/libcore/array.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 189 "/checkout/src/libcore/array.rs"
 HEAP32[$_5>>2] = $$sreg$field; //@line 189 "/checkout/src/libcore/array.rs"
 $4 = ((($_5)) + 4|0); //@line 189 "/checkout/src/libcore/array.rs"
 HEAP32[$4>>2] = $$sreg$field2; //@line 189 "/checkout/src/libcore/array.rs"
 $5 = $f; //@line 189 "/checkout/src/libcore/array.rs"
 $6 = (__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h5ad2d3c111860cefE($_5,$5)|0); //@line 189 "/checkout/src/libcore/array.rs"
 STACKTOP = sp;return ($6|0); //@line 190 "/checkout/src/libcore/array.rs"
}
function __ZN4core5slice74__LT_impl_u20_core__ops__index__Index_LT_I_GT__u20_for_u20__u5b_T_u5d__GT_5index17hc021943d0aa41e20E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $self = sp + 8|0;
 HEAP32[$self>>2] = $0;
 $3 = ((($self)) + 4|0);
 HEAP32[$3>>2] = $1;
 $4 = HEAP32[$self>>2]|0; //@line 727 "/checkout/src/libcore/slice/mod.rs"
 $5 = ((($self)) + 4|0); //@line 727 "/checkout/src/libcore/slice/mod.rs"
 $6 = HEAP32[$5>>2]|0; //@line 727 "/checkout/src/libcore/slice/mod.rs"
 __ZN90__LT_core__ops__range__RangeFull_u20_as_u20_core__slice__SliceIndex_LT__u5b_T_u5d__GT__GT_5index17hc5d0f24f84b5ce01E($2,$4,$6); //@line 727 "/checkout/src/libcore/slice/mod.rs"
 $$sreg$field = HEAP32[$2>>2]|0; //@line 727 "/checkout/src/libcore/slice/mod.rs"
 $$sreg$index1 = ((($2)) + 4|0); //@line 727 "/checkout/src/libcore/slice/mod.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 727 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$retVal>>2] = $$sreg$field; //@line 728 "/checkout/src/libcore/slice/mod.rs"
 $retVal$index4 = ((($retVal)) + 4|0); //@line 728 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$retVal$index4>>2] = $$sreg$field2; //@line 728 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return; //@line 728 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN4core5slice13size_from_ptr17h6b66fad834101656E($0) {
 $0 = $0|0;
 var $1 = 0, $arg0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = (__ZN4core3mem7size_of17h85a290d02afca270E()|0); //@line 1120 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return ($1|0); //@line 1121 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN4core5slice14from_raw_parts17h4366bd528b42c550E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_3 = 0, $len = 0, $p = 0, $retVal$index1 = 0, $transmute_temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp = sp + 16|0;
 $_3 = sp + 8|0;
 $p = $0;
 $len = $1;
 $2 = $p; //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 $3 = $len; //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$_3>>2] = $2; //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 $4 = ((($_3)) + 4|0); //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$4>>2] = $3; //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 $5 = HEAP32[$_3>>2]|0; //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 $6 = ((($_3)) + 4|0); //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 $7 = HEAP32[$6>>2]|0; //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$transmute_temp>>2] = $5; //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 $8 = ((($transmute_temp)) + 4|0); //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$8>>2] = $7; //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 $9 = HEAP32[$transmute_temp>>2]|0; //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 $10 = ((($transmute_temp)) + 4|0); //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 $11 = HEAP32[$10>>2]|0; //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$retVal>>2] = $9; //@line 2372 "/checkout/src/libcore/slice/mod.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 2372 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$retVal$index1>>2] = $11; //@line 2372 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return; //@line 2372 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN4core5slice14from_raw_parts17h6aaa9646598cdd97E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_3 = 0, $len = 0, $p = 0, $retVal$index1 = 0, $transmute_temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp = sp + 16|0;
 $_3 = sp + 8|0;
 $p = $0;
 $len = $1;
 $2 = $p; //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 $3 = $len; //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$_3>>2] = $2; //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 $4 = ((($_3)) + 4|0); //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$4>>2] = $3; //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 $5 = HEAP32[$_3>>2]|0; //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 $6 = ((($_3)) + 4|0); //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 $7 = HEAP32[$6>>2]|0; //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$transmute_temp>>2] = $5; //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 $8 = ((($transmute_temp)) + 4|0); //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$8>>2] = $7; //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 $9 = HEAP32[$transmute_temp>>2]|0; //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 $10 = ((($transmute_temp)) + 4|0); //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 $11 = HEAP32[$10>>2]|0; //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$retVal>>2] = $9; //@line 2372 "/checkout/src/libcore/slice/mod.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 2372 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$retVal$index1>>2] = $11; //@line 2372 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return; //@line 2372 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN4core5slice14from_raw_parts17hcae5cfeed543b7e9E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_3 = 0, $len = 0, $p = 0, $retVal$index1 = 0, $transmute_temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp = sp + 16|0;
 $_3 = sp + 8|0;
 $p = $0;
 $len = $1;
 $2 = $p; //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 $3 = $len; //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$_3>>2] = $2; //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 $4 = ((($_3)) + 4|0); //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$4>>2] = $3; //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 $5 = HEAP32[$_3>>2]|0; //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 $6 = ((($_3)) + 4|0); //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 $7 = HEAP32[$6>>2]|0; //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$transmute_temp>>2] = $5; //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 $8 = ((($transmute_temp)) + 4|0); //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$8>>2] = $7; //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 $9 = HEAP32[$transmute_temp>>2]|0; //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 $10 = ((($transmute_temp)) + 4|0); //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 $11 = HEAP32[$10>>2]|0; //@line 2371 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$retVal>>2] = $9; //@line 2372 "/checkout/src/libcore/slice/mod.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 2372 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$retVal$index1>>2] = $11; //@line 2372 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return; //@line 2372 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN4core5slice18from_raw_parts_mut17h34aa92df9f572221E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_4 = 0, $len = 0, $p = 0, $retVal$index1 = 0, $transmute_temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp = sp + 16|0;
 $_4 = sp + 8|0;
 $p = $0;
 $len = $1;
 $2 = $p; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $3 = $len; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$_4>>2] = $2; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $4 = ((($_4)) + 4|0); //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$4>>2] = $3; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $5 = HEAP32[$_4>>2]|0; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $6 = ((($_4)) + 4|0); //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $7 = HEAP32[$6>>2]|0; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$transmute_temp>>2] = $5; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $8 = ((($transmute_temp)) + 4|0); //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$8>>2] = $7; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $9 = HEAP32[$transmute_temp>>2]|0; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $10 = ((($transmute_temp)) + 4|0); //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $11 = HEAP32[$10>>2]|0; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$retVal>>2] = $9; //@line 2385 "/checkout/src/libcore/slice/mod.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 2385 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$retVal$index1>>2] = $11; //@line 2385 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return; //@line 2385 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN4core5slice18from_raw_parts_mut17h3824d85fe3e081b3E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_4 = 0, $len = 0, $p = 0, $retVal$index1 = 0, $transmute_temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp = sp + 16|0;
 $_4 = sp + 8|0;
 $p = $0;
 $len = $1;
 $2 = $p; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $3 = $len; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$_4>>2] = $2; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $4 = ((($_4)) + 4|0); //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$4>>2] = $3; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $5 = HEAP32[$_4>>2]|0; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $6 = ((($_4)) + 4|0); //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $7 = HEAP32[$6>>2]|0; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$transmute_temp>>2] = $5; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $8 = ((($transmute_temp)) + 4|0); //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$8>>2] = $7; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $9 = HEAP32[$transmute_temp>>2]|0; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $10 = ((($transmute_temp)) + 4|0); //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $11 = HEAP32[$10>>2]|0; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$retVal>>2] = $9; //@line 2385 "/checkout/src/libcore/slice/mod.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 2385 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$retVal$index1>>2] = $11; //@line 2385 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return; //@line 2385 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN4core5slice18from_raw_parts_mut17hb4ceac10870c9537E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_4 = 0, $len = 0, $p = 0, $retVal$index1 = 0, $transmute_temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp = sp + 16|0;
 $_4 = sp + 8|0;
 $p = $0;
 $len = $1;
 $2 = $p; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $3 = $len; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$_4>>2] = $2; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $4 = ((($_4)) + 4|0); //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$4>>2] = $3; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $5 = HEAP32[$_4>>2]|0; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $6 = ((($_4)) + 4|0); //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $7 = HEAP32[$6>>2]|0; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$transmute_temp>>2] = $5; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $8 = ((($transmute_temp)) + 4|0); //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$8>>2] = $7; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $9 = HEAP32[$transmute_temp>>2]|0; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $10 = ((($transmute_temp)) + 4|0); //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $11 = HEAP32[$10>>2]|0; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$retVal>>2] = $9; //@line 2385 "/checkout/src/libcore/slice/mod.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 2385 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$retVal$index1>>2] = $11; //@line 2385 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return; //@line 2385 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN4core5slice18from_raw_parts_mut17hbb21e3bc1f3b1e2aE($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_4 = 0, $len = 0, $p = 0, $retVal$index1 = 0, $transmute_temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp = sp + 16|0;
 $_4 = sp + 8|0;
 $p = $0;
 $len = $1;
 $2 = $p; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $3 = $len; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$_4>>2] = $2; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $4 = ((($_4)) + 4|0); //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$4>>2] = $3; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $5 = HEAP32[$_4>>2]|0; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $6 = ((($_4)) + 4|0); //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $7 = HEAP32[$6>>2]|0; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$transmute_temp>>2] = $5; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $8 = ((($transmute_temp)) + 4|0); //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$8>>2] = $7; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $9 = HEAP32[$transmute_temp>>2]|0; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $10 = ((($transmute_temp)) + 4|0); //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $11 = HEAP32[$10>>2]|0; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$retVal>>2] = $9; //@line 2385 "/checkout/src/libcore/slice/mod.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 2385 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$retVal$index1>>2] = $11; //@line 2385 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return; //@line 2385 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN4core5slice18from_raw_parts_mut17hcb5f1a8c1e682d6cE($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_4 = 0, $len = 0, $p = 0, $retVal$index1 = 0, $transmute_temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp = sp + 16|0;
 $_4 = sp + 8|0;
 $p = $0;
 $len = $1;
 $2 = $p; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $3 = $len; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$_4>>2] = $2; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $4 = ((($_4)) + 4|0); //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$4>>2] = $3; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $5 = HEAP32[$_4>>2]|0; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $6 = ((($_4)) + 4|0); //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $7 = HEAP32[$6>>2]|0; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$transmute_temp>>2] = $5; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $8 = ((($transmute_temp)) + 4|0); //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$8>>2] = $7; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $9 = HEAP32[$transmute_temp>>2]|0; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $10 = ((($transmute_temp)) + 4|0); //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $11 = HEAP32[$10>>2]|0; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$retVal>>2] = $9; //@line 2385 "/checkout/src/libcore/slice/mod.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 2385 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$retVal$index1>>2] = $11; //@line 2385 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return; //@line 2385 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN4core5slice18from_raw_parts_mut17heb910a92df19ed2cE($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_4 = 0, $len = 0, $p = 0, $retVal$index1 = 0, $transmute_temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp = sp + 16|0;
 $_4 = sp + 8|0;
 $p = $0;
 $len = $1;
 $2 = $p; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $3 = $len; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$_4>>2] = $2; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $4 = ((($_4)) + 4|0); //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$4>>2] = $3; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $5 = HEAP32[$_4>>2]|0; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $6 = ((($_4)) + 4|0); //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $7 = HEAP32[$6>>2]|0; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$transmute_temp>>2] = $5; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $8 = ((($transmute_temp)) + 4|0); //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$8>>2] = $7; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $9 = HEAP32[$transmute_temp>>2]|0; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $10 = ((($transmute_temp)) + 4|0); //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $11 = HEAP32[$10>>2]|0; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$retVal>>2] = $9; //@line 2385 "/checkout/src/libcore/slice/mod.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 2385 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$retVal$index1>>2] = $11; //@line 2385 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return; //@line 2385 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN4core5slice18from_raw_parts_mut17hfa6a70cc44e5c718E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_4 = 0, $len = 0, $p = 0, $retVal$index1 = 0, $transmute_temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp = sp + 16|0;
 $_4 = sp + 8|0;
 $p = $0;
 $len = $1;
 $2 = $p; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $3 = $len; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$_4>>2] = $2; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $4 = ((($_4)) + 4|0); //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$4>>2] = $3; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $5 = HEAP32[$_4>>2]|0; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $6 = ((($_4)) + 4|0); //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $7 = HEAP32[$6>>2]|0; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$transmute_temp>>2] = $5; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $8 = ((($transmute_temp)) + 4|0); //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$8>>2] = $7; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $9 = HEAP32[$transmute_temp>>2]|0; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $10 = ((($transmute_temp)) + 4|0); //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 $11 = HEAP32[$10>>2]|0; //@line 2384 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$retVal>>2] = $9; //@line 2385 "/checkout/src/libcore/slice/mod.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 2385 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$retVal$index1>>2] = $11; //@line 2385 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return; //@line 2385 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17hc3466ec5c4a643f8E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $f = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $f = $1;
 $2 = $self; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$2>>2]|0; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $4 = $f; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $5 = (__ZN57__LT_core__str__Utf8Error_u20_as_u20_core__fmt__Debug_GT_3fmt17hf6ef5786446e3e0cE($3,$4)|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return ($5|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17hf743212a3ee09b0aE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $f = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $f = $1;
 $2 = $self; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$2>>2]|0; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $4 = ((($2)) + 4|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $5 = HEAP32[$4>>2]|0; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $6 = $f; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $7 = (__ZN58__LT_std__ffi__c_str__CStr_u20_as_u20_core__fmt__Debug_GT_3fmt17h192775d0d103df83E($3,$5,$6)|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return ($7|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17h898f1ba250b2d318E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp;
 HEAP32[$self>>2] = $0;
 $2 = ((($self)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$self>>2]|0; //@line 617 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return ($3|0); //@line 618 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17hfdc6b0e89d42ed58E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $self = 0, $transmute_temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $transmute_temp = sp + 8|0;
 $self = sp;
 HEAP32[$self>>2] = $0;
 $2 = ((($self)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$self>>2]|0; //@line 418 "/checkout/src/libcore/slice/mod.rs"
 $4 = ((($self)) + 4|0); //@line 418 "/checkout/src/libcore/slice/mod.rs"
 $5 = HEAP32[$4>>2]|0; //@line 418 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$transmute_temp>>2] = $3; //@line 418 "/checkout/src/libcore/slice/mod.rs"
 $6 = ((($transmute_temp)) + 4|0); //@line 418 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$6>>2] = $5; //@line 418 "/checkout/src/libcore/slice/mod.rs"
 $7 = ((($transmute_temp)) + 4|0); //@line 418 "/checkout/src/libcore/slice/mod.rs"
 $8 = HEAP32[$7>>2]|0; //@line 418 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return ($8|0); //@line 420 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_4iter17h6cc26cb8c0ed0e97E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_13 = 0, $p = 0, $p1 = 0, $ptr = 0, $retVal$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_0 = sp + 8|0;
 $self = sp;
 HEAP32[$self>>2] = $0;
 $2 = ((($self)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = (__ZN4core3mem7size_of17h34f2235168088e08E()|0); //@line 281 "/checkout/src/libcore/slice/mod.rs"
 $4 = ($3|0)==(0); //@line 281 "/checkout/src/libcore/slice/mod.rs"
 if ($4) {
  $p = (1); //@line 282 "/checkout/src/libcore/slice/mod.rs"
 } else {
  $5 = HEAP32[$self>>2]|0; //@line 284 "/checkout/src/libcore/slice/mod.rs"
  $6 = ((($self)) + 4|0); //@line 284 "/checkout/src/libcore/slice/mod.rs"
  $7 = HEAP32[$6>>2]|0; //@line 284 "/checkout/src/libcore/slice/mod.rs"
  $8 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_6as_ptr17h560927d17734f8dcE($5,$7)|0); //@line 284 "/checkout/src/libcore/slice/mod.rs"
  $p1 = $8; //@line 284 "/checkout/src/libcore/slice/mod.rs"
  $9 = $p1; //@line 285 "/checkout/src/libcore/slice/mod.rs"
  (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h5943771350e7aea2E($9)|0); //@line 285 "/checkout/src/libcore/slice/mod.rs"
  $10 = $p1; //@line 286 "/checkout/src/libcore/slice/mod.rs"
  $p = $10; //@line 286 "/checkout/src/libcore/slice/mod.rs"
 }
 $11 = $p; //@line 290 "/checkout/src/libcore/slice/mod.rs"
 $12 = $p; //@line 291 "/checkout/src/libcore/slice/mod.rs"
 $ptr = $12; //@line 291 "/checkout/src/libcore/slice/mod.rs"
 $13 = $ptr; //@line 233 "/checkout/src/libcore/slice/mod.rs"
 $14 = (__ZN4core5slice13size_from_ptr17h02aaf8e8f1a9a99bE($13)|0); //@line 233 "/checkout/src/libcore/slice/mod.rs"
 $15 = ($14|0)==(0); //@line 233 "/checkout/src/libcore/slice/mod.rs"
 $16 = $ptr;
 if ($15) {
  $17 = HEAP32[$self>>2]|0; //@line 291 "/checkout/src/libcore/slice/mod.rs"
  $18 = ((($self)) + 4|0); //@line 291 "/checkout/src/libcore/slice/mod.rs"
  $19 = HEAP32[$18>>2]|0; //@line 291 "/checkout/src/libcore/slice/mod.rs"
  $20 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17hdb4295627668697eE($17,$19)|0); //@line 291 "/checkout/src/libcore/slice/mod.rs"
  $21 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_15wrapping_offset17ha6d8b6c64249cfb7E($16,$20)|0); //@line 234 "/checkout/src/libcore/slice/mod.rs"
  $_13 = $21; //@line 234 "/checkout/src/libcore/slice/mod.rs"
 } else {
  $22 = HEAP32[$self>>2]|0; //@line 291 "/checkout/src/libcore/slice/mod.rs"
  $23 = ((($self)) + 4|0); //@line 291 "/checkout/src/libcore/slice/mod.rs"
  $24 = HEAP32[$23>>2]|0; //@line 291 "/checkout/src/libcore/slice/mod.rs"
  $25 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17hdb4295627668697eE($22,$24)|0); //@line 291 "/checkout/src/libcore/slice/mod.rs"
  $26 = (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_6offset17hc45b0a90f73ce35eE($16,$25)|0); //@line 236 "/checkout/src/libcore/slice/mod.rs"
  $_13 = $26; //@line 236 "/checkout/src/libcore/slice/mod.rs"
 }
 HEAP32[$_0>>2] = $11; //@line 289 "/checkout/src/libcore/slice/mod.rs"
 $27 = $_13; //@line 289 "/checkout/src/libcore/slice/mod.rs"
 $28 = ((($_0)) + 4|0); //@line 289 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$28>>2] = $27; //@line 289 "/checkout/src/libcore/slice/mod.rs"
 $29 = HEAP32[$_0>>2]|0; //@line 295 "/checkout/src/libcore/slice/mod.rs"
 $30 = ((($_0)) + 4|0); //@line 295 "/checkout/src/libcore/slice/mod.rs"
 $31 = HEAP32[$30>>2]|0; //@line 295 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$retVal>>2] = $29; //@line 295 "/checkout/src/libcore/slice/mod.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 295 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$retVal$index1>>2] = $31; //@line 295 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return; //@line 295 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_6as_ptr17h560927d17734f8dcE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp;
 HEAP32[$self>>2] = $0;
 $2 = ((($self)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$self>>2]|0; //@line 388 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return ($3|0); //@line 389 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17hdb4295627668697eE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $self = 0, $transmute_temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $transmute_temp = sp + 8|0;
 $self = sp;
 HEAP32[$self>>2] = $0;
 $2 = ((($self)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$self>>2]|0; //@line 418 "/checkout/src/libcore/slice/mod.rs"
 $4 = ((($self)) + 4|0); //@line 418 "/checkout/src/libcore/slice/mod.rs"
 $5 = HEAP32[$4>>2]|0; //@line 418 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$transmute_temp>>2] = $3; //@line 418 "/checkout/src/libcore/slice/mod.rs"
 $6 = ((($transmute_temp)) + 4|0); //@line 418 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$6>>2] = $5; //@line 418 "/checkout/src/libcore/slice/mod.rs"
 $7 = ((($transmute_temp)) + 4|0); //@line 418 "/checkout/src/libcore/slice/mod.rs"
 $8 = HEAP32[$7>>2]|0; //@line 418 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return ($8|0); //@line 420 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_4iter17hc8fcc8d911832325E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_13 = 0, $p = 0, $p1 = 0, $ptr = 0, $retVal$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_0 = sp + 8|0;
 $self = sp;
 HEAP32[$self>>2] = $0;
 $2 = ((($self)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = (__ZN4core3mem7size_of17h975d444723173452E()|0); //@line 281 "/checkout/src/libcore/slice/mod.rs"
 $4 = ($3|0)==(0); //@line 281 "/checkout/src/libcore/slice/mod.rs"
 if ($4) {
  $p = (1); //@line 282 "/checkout/src/libcore/slice/mod.rs"
 } else {
  $5 = HEAP32[$self>>2]|0; //@line 284 "/checkout/src/libcore/slice/mod.rs"
  $6 = ((($self)) + 4|0); //@line 284 "/checkout/src/libcore/slice/mod.rs"
  $7 = HEAP32[$6>>2]|0; //@line 284 "/checkout/src/libcore/slice/mod.rs"
  $8 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_6as_ptr17h4bb36a8d42d770e2E($5,$7)|0); //@line 284 "/checkout/src/libcore/slice/mod.rs"
  $p1 = $8; //@line 284 "/checkout/src/libcore/slice/mod.rs"
  $9 = $p1; //@line 285 "/checkout/src/libcore/slice/mod.rs"
  (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17hb519a6910a0cefa8E($9)|0); //@line 285 "/checkout/src/libcore/slice/mod.rs"
  $10 = $p1; //@line 286 "/checkout/src/libcore/slice/mod.rs"
  $p = $10; //@line 286 "/checkout/src/libcore/slice/mod.rs"
 }
 $11 = $p; //@line 290 "/checkout/src/libcore/slice/mod.rs"
 $12 = $p; //@line 291 "/checkout/src/libcore/slice/mod.rs"
 $ptr = $12; //@line 291 "/checkout/src/libcore/slice/mod.rs"
 $13 = $ptr; //@line 233 "/checkout/src/libcore/slice/mod.rs"
 $14 = (__ZN4core5slice13size_from_ptr17hf8558e1f9f621ce5E($13)|0); //@line 233 "/checkout/src/libcore/slice/mod.rs"
 $15 = ($14|0)==(0); //@line 233 "/checkout/src/libcore/slice/mod.rs"
 $16 = $ptr;
 if ($15) {
  $17 = HEAP32[$self>>2]|0; //@line 291 "/checkout/src/libcore/slice/mod.rs"
  $18 = ((($self)) + 4|0); //@line 291 "/checkout/src/libcore/slice/mod.rs"
  $19 = HEAP32[$18>>2]|0; //@line 291 "/checkout/src/libcore/slice/mod.rs"
  $20 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17h07838feab94c9373E($17,$19)|0); //@line 291 "/checkout/src/libcore/slice/mod.rs"
  $21 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_15wrapping_offset17ha6d8b6c64249cfb7E($16,$20)|0); //@line 234 "/checkout/src/libcore/slice/mod.rs"
  $_13 = $21; //@line 234 "/checkout/src/libcore/slice/mod.rs"
 } else {
  $22 = HEAP32[$self>>2]|0; //@line 291 "/checkout/src/libcore/slice/mod.rs"
  $23 = ((($self)) + 4|0); //@line 291 "/checkout/src/libcore/slice/mod.rs"
  $24 = HEAP32[$23>>2]|0; //@line 291 "/checkout/src/libcore/slice/mod.rs"
  $25 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17h07838feab94c9373E($22,$24)|0); //@line 291 "/checkout/src/libcore/slice/mod.rs"
  $26 = (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_6offset17h84b833a1a70712c3E($16,$25)|0); //@line 236 "/checkout/src/libcore/slice/mod.rs"
  $_13 = $26; //@line 236 "/checkout/src/libcore/slice/mod.rs"
 }
 HEAP32[$_0>>2] = $11; //@line 289 "/checkout/src/libcore/slice/mod.rs"
 $27 = $_13; //@line 289 "/checkout/src/libcore/slice/mod.rs"
 $28 = ((($_0)) + 4|0); //@line 289 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$28>>2] = $27; //@line 289 "/checkout/src/libcore/slice/mod.rs"
 $29 = HEAP32[$_0>>2]|0; //@line 295 "/checkout/src/libcore/slice/mod.rs"
 $30 = ((($_0)) + 4|0); //@line 295 "/checkout/src/libcore/slice/mod.rs"
 $31 = HEAP32[$30>>2]|0; //@line 295 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$retVal>>2] = $29; //@line 295 "/checkout/src/libcore/slice/mod.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 295 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$retVal$index1>>2] = $31; //@line 295 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return; //@line 295 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_6as_ptr17h4bb36a8d42d770e2E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp;
 HEAP32[$self>>2] = $0;
 $2 = ((($self)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$self>>2]|0; //@line 388 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return ($3|0); //@line 389 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17h07838feab94c9373E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $self = 0, $transmute_temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $transmute_temp = sp + 8|0;
 $self = sp;
 HEAP32[$self>>2] = $0;
 $2 = ((($self)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$self>>2]|0; //@line 418 "/checkout/src/libcore/slice/mod.rs"
 $4 = ((($self)) + 4|0); //@line 418 "/checkout/src/libcore/slice/mod.rs"
 $5 = HEAP32[$4>>2]|0; //@line 418 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$transmute_temp>>2] = $3; //@line 418 "/checkout/src/libcore/slice/mod.rs"
 $6 = ((($transmute_temp)) + 4|0); //@line 418 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$6>>2] = $5; //@line 418 "/checkout/src/libcore/slice/mod.rs"
 $7 = ((($transmute_temp)) + 4|0); //@line 418 "/checkout/src/libcore/slice/mod.rs"
 $8 = HEAP32[$7>>2]|0; //@line 418 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return ($8|0); //@line 420 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN54__LT_I_u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17h09b826f0f4787c5fE($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $retVal$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp;
 HEAP32[$self>>2] = $0;
 $2 = ((($self)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$self>>2]|0; //@line 257 "/checkout/src/libcore/iter/traits.rs"
 $4 = ((($self)) + 4|0); //@line 257 "/checkout/src/libcore/iter/traits.rs"
 $5 = HEAP32[$4>>2]|0; //@line 257 "/checkout/src/libcore/iter/traits.rs"
 HEAP32[$retVal>>2] = $3; //@line 258 "/checkout/src/libcore/iter/traits.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 258 "/checkout/src/libcore/iter/traits.rs"
 HEAP32[$retVal$index1>>2] = $5; //@line 258 "/checkout/src/libcore/iter/traits.rs"
 STACKTOP = sp;return; //@line 258 "/checkout/src/libcore/iter/traits.rs"
}
function __ZN58__LT_alloc__string__String_u20_as_u20_core__fmt__Debug_GT_3fmt17hcf59a2c5b4e720cbE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $f = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $self = $0;
 $f = $1;
 $3 = $self; //@line 1770 "/checkout/src/liballoc/string.rs"
 __ZN65__LT_alloc__string__String_u20_as_u20_core__ops__deref__Deref_GT_5deref17he1f2ef5c183904e0E($2,$3); //@line 1770 "/checkout/src/liballoc/string.rs"
 $$sreg$field = HEAP32[$2>>2]|0; //@line 1770 "/checkout/src/liballoc/string.rs"
 $$sreg$index1 = ((($2)) + 4|0); //@line 1770 "/checkout/src/liballoc/string.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 1770 "/checkout/src/liballoc/string.rs"
 $4 = $f; //@line 1770 "/checkout/src/liballoc/string.rs"
 $5 = (__ZN40__LT_str_u20_as_u20_core__fmt__Debug_GT_3fmt17h05cf80b836a24333E($$sreg$field,$$sreg$field2,$4)|0); //@line 1770 "/checkout/src/liballoc/string.rs"
 STACKTOP = sp;return ($5|0); //@line 1771 "/checkout/src/liballoc/string.rs"
}
function __ZN65__LT_alloc__string__String_u20_as_u20_core__ops__deref__Deref_GT_5deref17he1f2ef5c183904e0E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field3 = 0, $$sreg$index2 = 0, $$sreg1$field = 0, $$sreg1$field6 = 0, $$sreg1$index5 = 0, $1 = 0, $2 = 0, $3 = 0, $retVal$index8 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 16|0;
 $2 = sp;
 $self = $0;
 $3 = $self; //@line 1947 "/checkout/src/liballoc/string.rs"
 __ZN68__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__deref__Deref_GT_5deref17h25a904560602b6e3E($2,$3); //@line 1947 "/checkout/src/liballoc/string.rs"
 $$sreg$field = HEAP32[$2>>2]|0; //@line 1947 "/checkout/src/liballoc/string.rs"
 $$sreg$index2 = ((($2)) + 4|0); //@line 1947 "/checkout/src/liballoc/string.rs"
 $$sreg$field3 = HEAP32[$$sreg$index2>>2]|0; //@line 1947 "/checkout/src/liballoc/string.rs"
 __ZN4core3str19from_utf8_unchecked17hf60f3428189d195dE($1,$$sreg$field,$$sreg$field3); //@line 1947 "/checkout/src/liballoc/string.rs"
 $$sreg1$field = HEAP32[$1>>2]|0; //@line 1947 "/checkout/src/liballoc/string.rs"
 $$sreg1$index5 = ((($1)) + 4|0); //@line 1947 "/checkout/src/liballoc/string.rs"
 $$sreg1$field6 = HEAP32[$$sreg1$index5>>2]|0; //@line 1947 "/checkout/src/liballoc/string.rs"
 HEAP32[$retVal>>2] = $$sreg1$field; //@line 1948 "/checkout/src/liballoc/string.rs"
 $retVal$index8 = ((($retVal)) + 4|0); //@line 1948 "/checkout/src/liballoc/string.rs"
 HEAP32[$retVal$index8>>2] = $$sreg1$field6; //@line 1948 "/checkout/src/liballoc/string.rs"
 STACKTOP = sp;return; //@line 1948 "/checkout/src/liballoc/string.rs"
}
function __ZN4core3str19from_utf8_unchecked17hf60f3428189d195dE($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $retVal$index1 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $v = sp;
 HEAP32[$v>>2] = $0;
 $2 = ((($v)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$v>>2]|0; //@line 409 "/checkout/src/libcore/str/mod.rs"
 $4 = ((($v)) + 4|0); //@line 409 "/checkout/src/libcore/str/mod.rs"
 $5 = HEAP32[$4>>2]|0; //@line 409 "/checkout/src/libcore/str/mod.rs"
 HEAP32[$retVal>>2] = $3; //@line 410 "/checkout/src/libcore/str/mod.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 410 "/checkout/src/libcore/str/mod.rs"
 HEAP32[$retVal$index1>>2] = $5; //@line 410 "/checkout/src/libcore/str/mod.rs"
 STACKTOP = sp;return; //@line 410 "/checkout/src/libcore/str/mod.rs"
}
function __ZN5alloc3str21__LT_impl_u20_str_GT_3len17h80991aa095f3a65dE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp;
 HEAP32[$self>>2] = $0;
 $2 = ((($self)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$self>>2]|0; //@line 224 "/checkout/src/liballoc/str.rs"
 $4 = ((($self)) + 4|0); //@line 224 "/checkout/src/liballoc/str.rs"
 $5 = HEAP32[$4>>2]|0; //@line 224 "/checkout/src/liballoc/str.rs"
 $6 = (__ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_3len17had6041991ed4db22E($3,$5)|0); //@line 224 "/checkout/src/liballoc/str.rs"
 STACKTOP = sp;return ($6|0); //@line 225 "/checkout/src/liballoc/str.rs"
}
function __ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_3len17had6041991ed4db22E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $self = sp + 8|0;
 HEAP32[$self>>2] = $0;
 $3 = ((($self)) + 4|0);
 HEAP32[$3>>2] = $1;
 $4 = HEAP32[$self>>2]|0; //@line 2504 "/checkout/src/libcore/str/mod.rs"
 $5 = ((($self)) + 4|0); //@line 2504 "/checkout/src/libcore/str/mod.rs"
 $6 = HEAP32[$5>>2]|0; //@line 2504 "/checkout/src/libcore/str/mod.rs"
 __ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_8as_bytes17h506b5077ea36e922E($2,$4,$6); //@line 2504 "/checkout/src/libcore/str/mod.rs"
 $$sreg$field = HEAP32[$2>>2]|0; //@line 2504 "/checkout/src/libcore/str/mod.rs"
 $$sreg$index1 = ((($2)) + 4|0); //@line 2504 "/checkout/src/libcore/str/mod.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 2504 "/checkout/src/libcore/str/mod.rs"
 $7 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17hfdc6b0e89d42ed58E($$sreg$field,$$sreg$field2)|0); //@line 2504 "/checkout/src/libcore/str/mod.rs"
 STACKTOP = sp;return ($7|0); //@line 2505 "/checkout/src/libcore/str/mod.rs"
}
function __ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_8as_bytes17h506b5077ea36e922E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $retVal$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp;
 HEAP32[$self>>2] = $0;
 $2 = ((($self)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$self>>2]|0; //@line 2448 "/checkout/src/libcore/str/mod.rs"
 $4 = ((($self)) + 4|0); //@line 2448 "/checkout/src/libcore/str/mod.rs"
 $5 = HEAP32[$4>>2]|0; //@line 2448 "/checkout/src/libcore/str/mod.rs"
 HEAP32[$retVal>>2] = $3; //@line 2449 "/checkout/src/libcore/str/mod.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 2449 "/checkout/src/libcore/str/mod.rs"
 HEAP32[$retVal$index1>>2] = $5; //@line 2449 "/checkout/src/libcore/str/mod.rs"
 STACKTOP = sp;return; //@line 2449 "/checkout/src/libcore/str/mod.rs"
}
function __ZN5alloc3str21__LT_impl_u20_str_GT_6as_ptr17ha541499c65855fceE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp;
 HEAP32[$self>>2] = $0;
 $2 = ((($self)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$self>>2]|0; //@line 353 "/checkout/src/liballoc/str.rs"
 $4 = ((($self)) + 4|0); //@line 353 "/checkout/src/liballoc/str.rs"
 $5 = HEAP32[$4>>2]|0; //@line 353 "/checkout/src/liballoc/str.rs"
 $6 = (__ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_6as_ptr17hd70c352ce0c93d8aE($3,$5)|0); //@line 353 "/checkout/src/liballoc/str.rs"
 STACKTOP = sp;return ($6|0); //@line 354 "/checkout/src/liballoc/str.rs"
}
function __ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_6as_ptr17hd70c352ce0c93d8aE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp;
 HEAP32[$self>>2] = $0;
 $2 = ((($self)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$self>>2]|0; //@line 2499 "/checkout/src/libcore/str/mod.rs"
 STACKTOP = sp;return ($3|0); //@line 2500 "/checkout/src/libcore/str/mod.rs"
}
function __ZN5alloc5slice29__LT_impl_u20__u5b_T_u5d__GT_10as_mut_ptr17hf374ec1d0d0e56fbE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp;
 HEAP32[$self>>2] = $0;
 $2 = ((($self)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$self>>2]|0; //@line 499 "/checkout/src/liballoc/slice.rs"
 $4 = ((($self)) + 4|0); //@line 499 "/checkout/src/liballoc/slice.rs"
 $5 = HEAP32[$4>>2]|0; //@line 499 "/checkout/src/liballoc/slice.rs"
 $6 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17h842d3989038100c0E($3,$5)|0); //@line 499 "/checkout/src/liballoc/slice.rs"
 STACKTOP = sp;return ($6|0); //@line 500 "/checkout/src/liballoc/slice.rs"
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17h842d3989038100c0E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp;
 HEAP32[$self>>2] = $0;
 $2 = ((($self)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$self>>2]|0; //@line 617 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return ($3|0); //@line 618 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN5alloc5slice29__LT_impl_u20__u5b_T_u5d__GT_10as_mut_ptr17hf38e4218fd2f99c8E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp;
 HEAP32[$self>>2] = $0;
 $2 = ((($self)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$self>>2]|0; //@line 499 "/checkout/src/liballoc/slice.rs"
 $4 = ((($self)) + 4|0); //@line 499 "/checkout/src/liballoc/slice.rs"
 $5 = HEAP32[$4>>2]|0; //@line 499 "/checkout/src/liballoc/slice.rs"
 $6 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17h8f30e2886340ed6cE($3,$5)|0); //@line 499 "/checkout/src/liballoc/slice.rs"
 STACKTOP = sp;return ($6|0); //@line 500 "/checkout/src/liballoc/slice.rs"
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17h8f30e2886340ed6cE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp;
 HEAP32[$self>>2] = $0;
 $2 = ((($self)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$self>>2]|0; //@line 617 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return ($3|0); //@line 618 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN5alloc5slice29__LT_impl_u20__u5b_T_u5d__GT_15copy_from_slice17h0fd485dd03bdea37E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $self = 0, $src = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $src = sp + 8|0;
 $self = sp;
 HEAP32[$self>>2] = $0;
 $4 = ((($self)) + 4|0);
 HEAP32[$4>>2] = $1;
 HEAP32[$src>>2] = $2;
 $5 = ((($src)) + 4|0);
 HEAP32[$5>>2] = $3;
 $6 = HEAP32[$self>>2]|0; //@line 1528 "/checkout/src/liballoc/slice.rs"
 $7 = ((($self)) + 4|0); //@line 1528 "/checkout/src/liballoc/slice.rs"
 $8 = HEAP32[$7>>2]|0; //@line 1528 "/checkout/src/liballoc/slice.rs"
 $9 = HEAP32[$src>>2]|0; //@line 1528 "/checkout/src/liballoc/slice.rs"
 $10 = ((($src)) + 4|0); //@line 1528 "/checkout/src/liballoc/slice.rs"
 $11 = HEAP32[$10>>2]|0; //@line 1528 "/checkout/src/liballoc/slice.rs"
 __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_15copy_from_slice17h1c3eed56483d1238E($6,$8,$9,$11); //@line 1528 "/checkout/src/liballoc/slice.rs"
 STACKTOP = sp;return; //@line 1529 "/checkout/src/liballoc/slice.rs"
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_15copy_from_slice17h1c3eed56483d1238E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $self = 0, $src = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $src = sp + 8|0;
 $self = sp;
 HEAP32[$self>>2] = $0;
 $4 = ((($self)) + 4|0);
 HEAP32[$4>>2] = $1;
 HEAP32[$src>>2] = $2;
 $5 = ((($src)) + 4|0);
 HEAP32[$5>>2] = $3;
 $6 = HEAP32[$self>>2]|0; //@line 669 "/checkout/src/libcore/slice/mod.rs"
 $7 = ((($self)) + 4|0); //@line 669 "/checkout/src/libcore/slice/mod.rs"
 $8 = HEAP32[$7>>2]|0; //@line 669 "/checkout/src/libcore/slice/mod.rs"
 $9 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17hfdc6b0e89d42ed58E($6,$8)|0); //@line 669 "/checkout/src/libcore/slice/mod.rs"
 $10 = HEAP32[$src>>2]|0; //@line 669 "/checkout/src/libcore/slice/mod.rs"
 $11 = ((($src)) + 4|0); //@line 669 "/checkout/src/libcore/slice/mod.rs"
 $12 = HEAP32[$11>>2]|0; //@line 669 "/checkout/src/libcore/slice/mod.rs"
 $13 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17hfdc6b0e89d42ed58E($10,$12)|0); //@line 669 "/checkout/src/libcore/slice/mod.rs"
 $14 = ($9|0)==($13|0); //@line 669 "/checkout/src/libcore/slice/mod.rs"
 $15 = $14 ^ 1; //@line 83 "/checkout/src/libcore/macros.rs"
 if ($15) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(3924); //@line 20 "/checkout/src/libcore/macros.rs"
  // unreachable; //@line 20 "/checkout/src/libcore/macros.rs"
 } else {
  $16 = HEAP32[$src>>2]|0; //@line 673 "/checkout/src/libcore/slice/mod.rs"
  $17 = ((($src)) + 4|0); //@line 673 "/checkout/src/libcore/slice/mod.rs"
  $18 = HEAP32[$17>>2]|0; //@line 673 "/checkout/src/libcore/slice/mod.rs"
  $19 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_6as_ptr17h88273f0b43347311E($16,$18)|0); //@line 673 "/checkout/src/libcore/slice/mod.rs"
  $20 = HEAP32[$self>>2]|0; //@line 673 "/checkout/src/libcore/slice/mod.rs"
  $21 = ((($self)) + 4|0); //@line 673 "/checkout/src/libcore/slice/mod.rs"
  $22 = HEAP32[$21>>2]|0; //@line 673 "/checkout/src/libcore/slice/mod.rs"
  $23 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17h898f1ba250b2d318E($20,$22)|0); //@line 673 "/checkout/src/libcore/slice/mod.rs"
  $24 = HEAP32[$self>>2]|0; //@line 673 "/checkout/src/libcore/slice/mod.rs"
  $25 = ((($self)) + 4|0); //@line 673 "/checkout/src/libcore/slice/mod.rs"
  $26 = HEAP32[$25>>2]|0; //@line 673 "/checkout/src/libcore/slice/mod.rs"
  $27 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17hfdc6b0e89d42ed58E($24,$26)|0); //@line 673 "/checkout/src/libcore/slice/mod.rs"
  $28 = $27; //@line 672 "/checkout/src/libcore/slice/mod.rs"
  _memcpy(($23|0),($19|0),($28|0))|0; //@line 672 "/checkout/src/libcore/slice/mod.rs"
  STACKTOP = sp;return; //@line 675 "/checkout/src/libcore/slice/mod.rs"
 }
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_6as_ptr17h88273f0b43347311E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp;
 HEAP32[$self>>2] = $0;
 $2 = ((($self)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$self>>2]|0; //@line 388 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return ($3|0); //@line 389 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN5alloc5slice29__LT_impl_u20__u5b_T_u5d__GT_17get_unchecked_mut17hec018dbbf8c40e17E($retVal,$0,$1,$2) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $index = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $self = sp + 8|0;
 HEAP32[$self>>2] = $0;
 $4 = ((($self)) + 4|0);
 HEAP32[$4>>2] = $1;
 $index = $2;
 $5 = HEAP32[$self>>2]|0; //@line 446 "/checkout/src/liballoc/slice.rs"
 $6 = ((($self)) + 4|0); //@line 446 "/checkout/src/liballoc/slice.rs"
 $7 = HEAP32[$6>>2]|0; //@line 446 "/checkout/src/liballoc/slice.rs"
 $8 = $index; //@line 446 "/checkout/src/liballoc/slice.rs"
 __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_17get_unchecked_mut17ha52668337e9357e7E($3,$5,$7,$8); //@line 446 "/checkout/src/liballoc/slice.rs"
 $$sreg$field = HEAP32[$3>>2]|0; //@line 446 "/checkout/src/liballoc/slice.rs"
 $$sreg$index1 = ((($3)) + 4|0); //@line 446 "/checkout/src/liballoc/slice.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 446 "/checkout/src/liballoc/slice.rs"
 HEAP32[$retVal>>2] = $$sreg$field; //@line 447 "/checkout/src/liballoc/slice.rs"
 $retVal$index4 = ((($retVal)) + 4|0); //@line 447 "/checkout/src/liballoc/slice.rs"
 HEAP32[$retVal$index4>>2] = $$sreg$field2; //@line 447 "/checkout/src/liballoc/slice.rs"
 STACKTOP = sp;return; //@line 447 "/checkout/src/liballoc/slice.rs"
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_17get_unchecked_mut17ha52668337e9357e7E($retVal,$0,$1,$2) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $index = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $self = sp + 8|0;
 HEAP32[$self>>2] = $0;
 $4 = ((($self)) + 4|0);
 HEAP32[$4>>2] = $1;
 $index = $2;
 $5 = $index; //@line 612 "/checkout/src/libcore/slice/mod.rs"
 $6 = HEAP32[$self>>2]|0; //@line 612 "/checkout/src/libcore/slice/mod.rs"
 $7 = ((($self)) + 4|0); //@line 612 "/checkout/src/libcore/slice/mod.rs"
 $8 = HEAP32[$7>>2]|0; //@line 612 "/checkout/src/libcore/slice/mod.rs"
 __ZN103__LT_core__ops__range__RangeFrom_LT_usize_GT__u20_as_u20_core__slice__SliceIndex_LT__u5b_T_u5d__GT__GT_17get_unchecked_mut17hdba1959034ef629dE($3,$5,$6,$8); //@line 612 "/checkout/src/libcore/slice/mod.rs"
 $$sreg$field = HEAP32[$3>>2]|0; //@line 612 "/checkout/src/libcore/slice/mod.rs"
 $$sreg$index1 = ((($3)) + 4|0); //@line 612 "/checkout/src/libcore/slice/mod.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 612 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$retVal>>2] = $$sreg$field; //@line 613 "/checkout/src/libcore/slice/mod.rs"
 $retVal$index4 = ((($retVal)) + 4|0); //@line 613 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$retVal$index4>>2] = $$sreg$field2; //@line 613 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return; //@line 613 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN5alloc5slice29__LT_impl_u20__u5b_T_u5d__GT_3len17h3ab191dac78e517aE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp;
 HEAP32[$self>>2] = $0;
 $2 = ((($self)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$self>>2]|0; //@line 185 "/checkout/src/liballoc/slice.rs"
 $4 = ((($self)) + 4|0); //@line 185 "/checkout/src/liballoc/slice.rs"
 $5 = HEAP32[$4>>2]|0; //@line 185 "/checkout/src/liballoc/slice.rs"
 $6 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17hfdc6b0e89d42ed58E($3,$5)|0); //@line 185 "/checkout/src/liballoc/slice.rs"
 STACKTOP = sp;return ($6|0); //@line 186 "/checkout/src/liballoc/slice.rs"
}
function __ZN5alloc5slice29__LT_impl_u20__u5b_T_u5d__GT_3len17he093d11bcd98ee31E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp;
 HEAP32[$self>>2] = $0;
 $2 = ((($self)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$self>>2]|0; //@line 185 "/checkout/src/liballoc/slice.rs"
 $4 = ((($self)) + 4|0); //@line 185 "/checkout/src/liballoc/slice.rs"
 $5 = HEAP32[$4>>2]|0; //@line 185 "/checkout/src/liballoc/slice.rs"
 $6 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17hab88b217dba8e4deE($3,$5)|0); //@line 185 "/checkout/src/liballoc/slice.rs"
 STACKTOP = sp;return ($6|0); //@line 186 "/checkout/src/liballoc/slice.rs"
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17hab88b217dba8e4deE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $self = 0, $transmute_temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $transmute_temp = sp + 8|0;
 $self = sp;
 HEAP32[$self>>2] = $0;
 $2 = ((($self)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$self>>2]|0; //@line 418 "/checkout/src/libcore/slice/mod.rs"
 $4 = ((($self)) + 4|0); //@line 418 "/checkout/src/libcore/slice/mod.rs"
 $5 = HEAP32[$4>>2]|0; //@line 418 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$transmute_temp>>2] = $3; //@line 418 "/checkout/src/libcore/slice/mod.rs"
 $6 = ((($transmute_temp)) + 4|0); //@line 418 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$6>>2] = $5; //@line 418 "/checkout/src/libcore/slice/mod.rs"
 $7 = ((($transmute_temp)) + 4|0); //@line 418 "/checkout/src/libcore/slice/mod.rs"
 $8 = HEAP32[$7>>2]|0; //@line 418 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return ($8|0); //@line 420 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN5alloc5slice29__LT_impl_u20__u5b_T_u5d__GT_4iter17h5e55a3e9fd3f69e6E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $self = sp + 8|0;
 HEAP32[$self>>2] = $0;
 $3 = ((($self)) + 4|0);
 HEAP32[$3>>2] = $1;
 $4 = HEAP32[$self>>2]|0; //@line 557 "/checkout/src/liballoc/slice.rs"
 $5 = ((($self)) + 4|0); //@line 557 "/checkout/src/liballoc/slice.rs"
 $6 = HEAP32[$5>>2]|0; //@line 557 "/checkout/src/liballoc/slice.rs"
 __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_4iter17hc8fcc8d911832325E($2,$4,$6); //@line 557 "/checkout/src/liballoc/slice.rs"
 $$sreg$field = HEAP32[$2>>2]|0; //@line 557 "/checkout/src/liballoc/slice.rs"
 $$sreg$index1 = ((($2)) + 4|0); //@line 557 "/checkout/src/liballoc/slice.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 557 "/checkout/src/liballoc/slice.rs"
 HEAP32[$retVal>>2] = $$sreg$field; //@line 558 "/checkout/src/liballoc/slice.rs"
 $retVal$index4 = ((($retVal)) + 4|0); //@line 558 "/checkout/src/liballoc/slice.rs"
 HEAP32[$retVal$index4>>2] = $$sreg$field2; //@line 558 "/checkout/src/liballoc/slice.rs"
 STACKTOP = sp;return; //@line 558 "/checkout/src/liballoc/slice.rs"
}
function __ZN5alloc5slice29__LT_impl_u20__u5b_T_u5d__GT_4iter17hf6ec5a30a7f31009E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $self = sp + 8|0;
 HEAP32[$self>>2] = $0;
 $3 = ((($self)) + 4|0);
 HEAP32[$3>>2] = $1;
 $4 = HEAP32[$self>>2]|0; //@line 557 "/checkout/src/liballoc/slice.rs"
 $5 = ((($self)) + 4|0); //@line 557 "/checkout/src/liballoc/slice.rs"
 $6 = HEAP32[$5>>2]|0; //@line 557 "/checkout/src/liballoc/slice.rs"
 __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_4iter17h361dd67671f0ab73E($2,$4,$6); //@line 557 "/checkout/src/liballoc/slice.rs"
 $$sreg$field = HEAP32[$2>>2]|0; //@line 557 "/checkout/src/liballoc/slice.rs"
 $$sreg$index1 = ((($2)) + 4|0); //@line 557 "/checkout/src/liballoc/slice.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 557 "/checkout/src/liballoc/slice.rs"
 HEAP32[$retVal>>2] = $$sreg$field; //@line 558 "/checkout/src/liballoc/slice.rs"
 $retVal$index4 = ((($retVal)) + 4|0); //@line 558 "/checkout/src/liballoc/slice.rs"
 HEAP32[$retVal$index4>>2] = $$sreg$field2; //@line 558 "/checkout/src/liballoc/slice.rs"
 STACKTOP = sp;return; //@line 558 "/checkout/src/liballoc/slice.rs"
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_4iter17h361dd67671f0ab73E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_13 = 0, $p = 0, $p1 = 0, $ptr = 0, $retVal$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_0 = sp + 8|0;
 $self = sp;
 HEAP32[$self>>2] = $0;
 $2 = ((($self)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = (__ZN4core3mem7size_of17h809a29d4399807a6E()|0); //@line 281 "/checkout/src/libcore/slice/mod.rs"
 $4 = ($3|0)==(0); //@line 281 "/checkout/src/libcore/slice/mod.rs"
 if ($4) {
  $p = (1); //@line 282 "/checkout/src/libcore/slice/mod.rs"
 } else {
  $5 = HEAP32[$self>>2]|0; //@line 284 "/checkout/src/libcore/slice/mod.rs"
  $6 = ((($self)) + 4|0); //@line 284 "/checkout/src/libcore/slice/mod.rs"
  $7 = HEAP32[$6>>2]|0; //@line 284 "/checkout/src/libcore/slice/mod.rs"
  $8 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_6as_ptr17h88273f0b43347311E($5,$7)|0); //@line 284 "/checkout/src/libcore/slice/mod.rs"
  $p1 = $8; //@line 284 "/checkout/src/libcore/slice/mod.rs"
  $9 = $p1; //@line 285 "/checkout/src/libcore/slice/mod.rs"
  (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h7d9ca3e12c62cd11E($9)|0); //@line 285 "/checkout/src/libcore/slice/mod.rs"
  $10 = $p1; //@line 286 "/checkout/src/libcore/slice/mod.rs"
  $p = $10; //@line 286 "/checkout/src/libcore/slice/mod.rs"
 }
 $11 = $p; //@line 290 "/checkout/src/libcore/slice/mod.rs"
 $12 = $p; //@line 291 "/checkout/src/libcore/slice/mod.rs"
 $ptr = $12; //@line 291 "/checkout/src/libcore/slice/mod.rs"
 $13 = $ptr; //@line 233 "/checkout/src/libcore/slice/mod.rs"
 $14 = (__ZN4core5slice13size_from_ptr17he7942dc6838e0e45E($13)|0); //@line 233 "/checkout/src/libcore/slice/mod.rs"
 $15 = ($14|0)==(0); //@line 233 "/checkout/src/libcore/slice/mod.rs"
 $16 = $ptr;
 $17 = HEAP32[$self>>2]|0; //@line 291 "/checkout/src/libcore/slice/mod.rs"
 $18 = ((($self)) + 4|0); //@line 291 "/checkout/src/libcore/slice/mod.rs"
 $19 = HEAP32[$18>>2]|0; //@line 291 "/checkout/src/libcore/slice/mod.rs"
 $20 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17hfdc6b0e89d42ed58E($17,$19)|0); //@line 291 "/checkout/src/libcore/slice/mod.rs"
 if ($15) {
  $21 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_15wrapping_offset17ha6d8b6c64249cfb7E($16,$20)|0); //@line 234 "/checkout/src/libcore/slice/mod.rs"
  $_13 = $21; //@line 234 "/checkout/src/libcore/slice/mod.rs"
 } else {
  $22 = (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_6offset17h8a493778eead053fE($16,$20)|0); //@line 236 "/checkout/src/libcore/slice/mod.rs"
  $_13 = $22; //@line 236 "/checkout/src/libcore/slice/mod.rs"
 }
 HEAP32[$_0>>2] = $11; //@line 289 "/checkout/src/libcore/slice/mod.rs"
 $23 = $_13; //@line 289 "/checkout/src/libcore/slice/mod.rs"
 $24 = ((($_0)) + 4|0); //@line 289 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$24>>2] = $23; //@line 289 "/checkout/src/libcore/slice/mod.rs"
 $25 = HEAP32[$_0>>2]|0; //@line 295 "/checkout/src/libcore/slice/mod.rs"
 $26 = ((($_0)) + 4|0); //@line 295 "/checkout/src/libcore/slice/mod.rs"
 $27 = HEAP32[$26>>2]|0; //@line 295 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$retVal>>2] = $25; //@line 295 "/checkout/src/libcore/slice/mod.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 295 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$retVal$index1>>2] = $27; //@line 295 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return; //@line 295 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN5alloc5slice29__LT_impl_u20__u5b_T_u5d__GT_8into_vec17h53674b5f3662044aE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp;
 HEAP32[$self>>2] = $1;
 $3 = ((($self)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$self>>2]|0; //@line 1625 "/checkout/src/liballoc/slice.rs"
 $5 = ((($self)) + 4|0); //@line 1625 "/checkout/src/liballoc/slice.rs"
 $6 = HEAP32[$5>>2]|0; //@line 1625 "/checkout/src/liballoc/slice.rs"
 __ZN5alloc5slice4hack8into_vec17h32e5f67293e1a60dE($0,$4,$6); //@line 1625 "/checkout/src/liballoc/slice.rs"
 STACKTOP = sp;return; //@line 1626 "/checkout/src/liballoc/slice.rs"
}
function __ZN5alloc6string6String3new17h12c66b125e7bb509E($0) {
 $0 = $0|0;
 var $_1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_1 = sp;
 __ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_3new17h7ee9d7799dee01e4E($_1); //@line 384 "/checkout/src/liballoc/string.rs"
 ;HEAP32[$0>>2]=HEAP32[$_1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_1+8>>2]|0; //@line 384 "/checkout/src/liballoc/string.rs"
 STACKTOP = sp;return; //@line 385 "/checkout/src/liballoc/string.rs"
}
function __ZN5alloc6string6String6as_str17h57aeac851cf3b6c0E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $self = $0;
 $2 = $self; //@line 766 "/checkout/src/liballoc/string.rs"
 __ZN65__LT_alloc__string__String_u20_as_u20_core__ops__deref__Deref_GT_5deref17he1f2ef5c183904e0E($1,$2); //@line 766 "/checkout/src/liballoc/string.rs"
 $$sreg$field = HEAP32[$1>>2]|0; //@line 766 "/checkout/src/liballoc/string.rs"
 $$sreg$index1 = ((($1)) + 4|0); //@line 766 "/checkout/src/liballoc/string.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 766 "/checkout/src/liballoc/string.rs"
 HEAP32[$retVal>>2] = $$sreg$field; //@line 767 "/checkout/src/liballoc/string.rs"
 $retVal$index4 = ((($retVal)) + 4|0); //@line 767 "/checkout/src/liballoc/string.rs"
 HEAP32[$retVal$index4>>2] = $$sreg$field2; //@line 767 "/checkout/src/liballoc/string.rs"
 STACKTOP = sp;return; //@line 767 "/checkout/src/liballoc/string.rs"
}
function __ZN5alloc6string6String8push_str17h266b3b801824a55cE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $self = 0, $self$i = 0, $string = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $self$i = sp + 24|0;
 $string = sp + 16|0;
 $self = $0;
 HEAP32[$string>>2] = $1;
 $4 = ((($string)) + 4|0);
 HEAP32[$4>>2] = $2;
 $5 = $self; //@line 805 "/checkout/src/liballoc/string.rs"
 $6 = HEAP32[$string>>2]|0; //@line 805 "/checkout/src/liballoc/string.rs"
 $7 = ((($string)) + 4|0); //@line 805 "/checkout/src/liballoc/string.rs"
 $8 = HEAP32[$7>>2]|0; //@line 805 "/checkout/src/liballoc/string.rs"
 HEAP32[$self$i>>2] = $6;
 $9 = ((($self$i)) + 4|0);
 HEAP32[$9>>2] = $8;
 $10 = HEAP32[$self$i>>2]|0; //@line 292 "/checkout/src/liballoc/str.rs"
 $11 = ((($self$i)) + 4|0); //@line 292 "/checkout/src/liballoc/str.rs"
 $12 = HEAP32[$11>>2]|0; //@line 292 "/checkout/src/liballoc/str.rs"
 __ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_8as_bytes17h506b5077ea36e922E($3,$10,$12); //@line 292 "/checkout/src/liballoc/str.rs"
 $$sreg$field = HEAP32[$3>>2]|0; //@line 292 "/checkout/src/liballoc/str.rs"
 $$sreg$index1 = ((($3)) + 4|0); //@line 292 "/checkout/src/liballoc/str.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 292 "/checkout/src/liballoc/str.rs"
 __ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_17extend_from_slice17h505a1ac5c37472ecE($5,$$sreg$field,$$sreg$field2); //@line 805 "/checkout/src/liballoc/string.rs"
 STACKTOP = sp;return; //@line 806 "/checkout/src/liballoc/string.rs"
}
function __ZN91__LT_core__slice__Iter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17hb0b42a4bed87a0a7E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_0$i$i = 0, $_16 = 0, $current$i = 0;
 var $i$i$i = 0, $ptr = 0, $ptr$i$i = 0, $self = 0, $self$i = 0, $self$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_0 = sp + 4|0;
 $self = $0;
 $1 = (__ZN4core3mem7size_of17h85a290d02afca270E()|0); //@line 1134 "/checkout/src/libcore/slice/mod.rs"
 $2 = ($1|0)!=(0); //@line 1134 "/checkout/src/libcore/slice/mod.rs"
 if ($2) {
  $3 = $self; //@line 1135 "/checkout/src/libcore/slice/mod.rs"
  $4 = HEAP32[$3>>2]|0; //@line 1135 "/checkout/src/libcore/slice/mod.rs"
  (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h4515c270d1160b64E($4)|0); //@line 1135 "/checkout/src/libcore/slice/mod.rs"
  $5 = $self; //@line 1136 "/checkout/src/libcore/slice/mod.rs"
  $6 = ((($5)) + 4|0); //@line 1136 "/checkout/src/libcore/slice/mod.rs"
  $7 = HEAP32[$6>>2]|0; //@line 1136 "/checkout/src/libcore/slice/mod.rs"
  (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h4515c270d1160b64E($7)|0); //@line 1136 "/checkout/src/libcore/slice/mod.rs"
 }
 $8 = $self; //@line 1138 "/checkout/src/libcore/slice/mod.rs"
 $9 = HEAP32[$8>>2]|0; //@line 1138 "/checkout/src/libcore/slice/mod.rs"
 $10 = $self; //@line 1138 "/checkout/src/libcore/slice/mod.rs"
 $11 = ((($10)) + 4|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
 $12 = HEAP32[$11>>2]|0; //@line 1138 "/checkout/src/libcore/slice/mod.rs"
 $13 = ($9|0)==($12|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
 if ($13) {
  HEAP32[$_0>>2] = 0; //@line 1139 "/checkout/src/libcore/slice/mod.rs"
  $36 = HEAP32[$_0>>2]|0; //@line 1144 "/checkout/src/libcore/slice/mod.rs"
  STACKTOP = sp;return ($36|0); //@line 1144 "/checkout/src/libcore/slice/mod.rs"
 }
 $14 = $self; //@line 1141 "/checkout/src/libcore/slice/mod.rs"
 $self$i = $14;
 $15 = $self$i; //@line 1531 "/checkout/src/libcore/slice/mod.rs"
 $16 = HEAP32[$15>>2]|0; //@line 1531 "/checkout/src/libcore/slice/mod.rs"
 $current$i = $16; //@line 1531 "/checkout/src/libcore/slice/mod.rs"
 $17 = $self$i; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
 $18 = HEAP32[$17>>2]|0; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
 $self$i$i = $18;
 $i$i$i = 1;
 $19 = $self$i$i; //@line 1547 "/checkout/src/libcore/slice/mod.rs"
 $ptr$i$i = $19; //@line 1547 "/checkout/src/libcore/slice/mod.rs"
 $20 = $ptr$i$i; //@line 233 "/checkout/src/libcore/slice/mod.rs"
 $21 = (__ZN4core5slice13size_from_ptr17h6b66fad834101656E($20)|0); //@line 233 "/checkout/src/libcore/slice/mod.rs"
 $22 = ($21|0)==(0); //@line 233 "/checkout/src/libcore/slice/mod.rs"
 $23 = $ptr$i$i;
 if ($22) {
  $24 = $i$i$i; //@line 1547 "/checkout/src/libcore/slice/mod.rs"
  $25 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_15wrapping_offset17ha6d8b6c64249cfb7E($23,$24)|0); //@line 234 "/checkout/src/libcore/slice/mod.rs"
  $_0$i$i = $25; //@line 234 "/checkout/src/libcore/slice/mod.rs"
 } else {
  $26 = $i$i$i; //@line 1547 "/checkout/src/libcore/slice/mod.rs"
  $27 = (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_6offset17hd3d4f6defcfc53c2E($23,$26)|0); //@line 236 "/checkout/src/libcore/slice/mod.rs"
  $_0$i$i = $27; //@line 236 "/checkout/src/libcore/slice/mod.rs"
 }
 $28 = $_0$i$i; //@line 1548 "/checkout/src/libcore/slice/mod.rs"
 $29 = $self$i; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$29>>2] = $28; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
 $30 = $current$i; //@line 1533 "/checkout/src/libcore/slice/mod.rs"
 $ptr = $30; //@line 1141 "/checkout/src/libcore/slice/mod.rs"
 $31 = $ptr; //@line 245 "/checkout/src/libcore/slice/mod.rs"
 $32 = (__ZN4core5slice13size_from_ptr17h6b66fad834101656E($31)|0); //@line 245 "/checkout/src/libcore/slice/mod.rs"
 $33 = ($32|0)==(0); //@line 245 "/checkout/src/libcore/slice/mod.rs"
 if ($33) {
  $_16 = (1); //@line 247 "/checkout/src/libcore/slice/mod.rs"
 } else {
  $34 = $ptr; //@line 249 "/checkout/src/libcore/slice/mod.rs"
  $_16 = $34; //@line 249 "/checkout/src/libcore/slice/mod.rs"
 }
 $35 = $_16; //@line 1141 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$_0>>2] = $35; //@line 1141 "/checkout/src/libcore/slice/mod.rs"
 $36 = HEAP32[$_0>>2]|0; //@line 1144 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return ($36|0); //@line 1144 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN5rustv3r3d4draw11set_texture17hb489c8f1c147abe4E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$arith = 0, $$ispos = 0, $$negcheck = 0, $$negtemp = 0, $$poscheck = 0, $$postemp = 0, $$select = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $_5 = 0, $or$cond = 0, $tex_id = 0, $tex_unit = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tex_unit = $0;
 $tex_id = $1;
 $2 = $tex_unit; //@line 828 "r3d/draw.rs"
 $3 = ($2|0)>=(0); //@line 828 "r3d/draw.rs"
 $4 = $tex_unit; //@line 828 "r3d/draw.rs"
 $5 = ($4|0)<(16); //@line 828 "r3d/draw.rs"
 $or$cond = $3 & $5; //@line 828 "r3d/draw.rs"
 if ($or$cond) {
  $_5 = 1; //@line 828 "r3d/draw.rs"
 } else {
  $_5 = 0; //@line 828 "r3d/draw.rs"
 }
 $6 = $_5; //@line 828 "r3d/draw.rs"
 $7 = $6&1; //@line 828 "r3d/draw.rs"
 $8 = $7 ^ 1; //@line 828 "r3d/draw.rs"
 if ($8) {
  __ZN3std9panicking11begin_panic17h1a4c9be19e7ea39bE(14459,48,3948); //@line 828 "r3d/draw.rs"
  // unreachable; //@line 828 "r3d/draw.rs"
 }
 $9 = HEAP32[790]|0; //@line 829 "r3d/draw.rs"
 $10 = $tex_unit; //@line 829 "r3d/draw.rs"
 $$arith = (($9) + ($10))|0; //@line 829 "r3d/draw.rs"
 $$postemp = (($9) + -2147483648)|0; //@line 829 "r3d/draw.rs"
 $$negtemp = (($9) + 2147483647)|0; //@line 829 "r3d/draw.rs"
 $$poscheck = ($$arith|0)<($$postemp|0); //@line 829 "r3d/draw.rs"
 $$negcheck = ($$arith|0)>($$negtemp|0); //@line 829 "r3d/draw.rs"
 $$ispos = ($9|0)>=(0); //@line 829 "r3d/draw.rs"
 $$select = $$ispos ? $$poscheck : $$negcheck; //@line 829 "r3d/draw.rs"
 $11 = $$select; //@line 829 "r3d/draw.rs"
 if ($11) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(3964); //@line 829 "r3d/draw.rs"
  // unreachable; //@line 829 "r3d/draw.rs"
 }
 _glActiveTexture(($$arith|0)); //@line 829 "r3d/draw.rs"
 $12 = $tex_id; //@line 830 "r3d/draw.rs"
 $13 = ($12>>>0)>(0); //@line 830 "r3d/draw.rs"
 $14 = HEAP32[781]|0;
 if ($13) {
  _glEnable(($14|0)); //@line 831 "r3d/draw.rs"
  $15 = HEAP32[781]|0; //@line 832 "r3d/draw.rs"
  $16 = $tex_id; //@line 832 "r3d/draw.rs"
  _glBindTexture(($15|0),($16|0)); //@line 832 "r3d/draw.rs"
  STACKTOP = sp;return; //@line 836 "r3d/draw.rs"
 } else {
  _glDisable(($14|0)); //@line 834 "r3d/draw.rs"
  STACKTOP = sp;return; //@line 836 "r3d/draw.rs"
 }
}
function __ZN5rustv12android_logw17h6a03acd0e4e3677aE($0) {
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field3 = 0, $$sreg$index2 = 0, $$sreg1$field = 0, $$sreg1$field6 = 0, $$sreg1$index5 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $_10 = 0, $_11 = 0, $_13 = 0, $_3 = 0, $__arg0 = 0, $s = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $1 = sp + 16|0;
 $2 = sp;
 $_13 = sp + 68|0;
 $_11 = sp + 64|0;
 $_10 = sp + 56|0;
 $_3 = sp + 32|0;
 $s = $0;
 $3 = $s; //@line 55 "main.rs"
 __ZN3std3ffi5c_str4CStr8from_ptr17h0aba58b99886bb0bE($2,$3); //@line 55 "main.rs"
 $$sreg$field = HEAP32[$2>>2]|0; //@line 55 "main.rs"
 $$sreg$index2 = ((($2)) + 4|0); //@line 55 "main.rs"
 $$sreg$field3 = HEAP32[$$sreg$index2>>2]|0; //@line 55 "main.rs"
 __ZN3std3ffi5c_str4CStr6to_str17h6305959a7e7916fbE($_13,$$sreg$field,$$sreg$field3); //@line 55 "main.rs"
 HEAP32[$_11>>2] = $_13; //@line 55 "main.rs"
 $4 = HEAP32[$_11>>2]|0; //@line 55 "main.rs"
 $__arg0 = $4; //@line 55 "main.rs"
 $5 = $__arg0; //@line 55 "main.rs"
 __ZN4core3fmt10ArgumentV13new17h195d6d3c2eb76050E($1,$5,287); //@line 55 "main.rs"
 $$sreg1$field = HEAP32[$1>>2]|0; //@line 55 "main.rs"
 $$sreg1$index5 = ((($1)) + 4|0); //@line 55 "main.rs"
 $$sreg1$field6 = HEAP32[$$sreg1$index5>>2]|0; //@line 55 "main.rs"
 HEAP32[$_10>>2] = $$sreg1$field; //@line 55 "main.rs"
 $6 = ((($_10)) + 4|0); //@line 55 "main.rs"
 HEAP32[$6>>2] = $$sreg1$field6; //@line 55 "main.rs"
 $7 = HEAP32[1683]|0; //@line 55 "main.rs"
 __ZN4core3fmt9Arguments16new_v1_formatted17hd7921c86529aa3b1E($_3,3988,2,$_10,1,$7,1); //@line 55 "main.rs"
 __ZN3std2io5stdio6_print17h5e38a8ff46cfb3e1E($_3); //@line 55 "main.rs"
 STACKTOP = sp;return; //@line 56 "main.rs"
}
function __ZN5rustv16android_logw_str17h20b06566c03231beE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $s = sp;
 HEAP32[$s>>2] = $0;
 $2 = ((($s)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$s>>2]|0; //@line 59 "main.rs"
 $4 = ((($s)) + 4|0); //@line 59 "main.rs"
 $5 = HEAP32[$4>>2]|0; //@line 59 "main.rs"
 $6 = (__ZN5alloc3str21__LT_impl_u20_str_GT_6as_ptr17ha541499c65855fceE($3,$5)|0); //@line 59 "main.rs"
 __ZN5rustv12android_logw17h6a03acd0e4e3677aE($6); //@line 59 "main.rs"
 STACKTOP = sp;return; //@line 60 "main.rs"
}
function __ZN5rustv19android_logw_string17h84ea7b0122af4e4fE($0) {
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $s = $0;
 $2 = $s; //@line 62 "main.rs"
 __ZN65__LT_alloc__string__String_u20_as_u20_core__ops__deref__Deref_GT_5deref17he1f2ef5c183904e0E($1,$2); //@line 62 "main.rs"
 $$sreg$field = HEAP32[$1>>2]|0; //@line 62 "main.rs"
 $$sreg$index1 = ((($1)) + 4|0); //@line 62 "main.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 62 "main.rs"
 $3 = (__ZN5alloc3str21__LT_impl_u20_str_GT_6as_ptr17ha541499c65855fceE($$sreg$field,$$sreg$field2)|0); //@line 62 "main.rs"
 __ZN5rustv12android_logw17h6a03acd0e4e3677aE($3); //@line 62 "main.rs"
 STACKTOP = sp;return; //@line 64 "main.rs"
}
function __ZN5rustv4Mesh9new_torus28__u7b__u7b_closure_u7d__u7d_17hc09139ec76300eb3E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$arith = 0, $$arith18 = 0, $$arith27 = 0, $$arith36 = 0, $$arith39 = 0, $$arith9 = 0, $$denom = 0, $$div = 0, $$div40 = 0, $$ispos = 0, $$ispos14 = 0, $$ispos23 = 0, $$ispos32 = 0, $$iszero = 0, $$negcheck = 0, $$negcheck13 = 0, $$negcheck22 = 0, $$negcheck31 = 0, $$negtemp = 0, $$negtemp11 = 0;
 var $$negtemp20 = 0, $$negtemp29 = 0, $$overflow = 0, $$overflow42 = 0, $$poscheck = 0, $$poscheck12 = 0, $$poscheck21 = 0, $$poscheck30 = 0, $$postemp = 0, $$postemp10 = 0, $$postemp19 = 0, $$postemp28 = 0, $$same = 0, $$same41 = 0, $$select = 0, $$select15 = 0, $$select24 = 0, $$select33 = 0, $$sreg$field = 0, $$sreg$field3 = 0;
 var $$sreg$index2 = 0, $$sreg1$field = 0, $$sreg1$field6 = 0, $$sreg1$index5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $adj = 0, $ai = 0, $aj = 0, $arg0 = 0, $dj = 0;
 var $i = 0, $i1 = 0, $i2 = 0, $i3 = 0, $ij = 0, $ij_u = 0, $j = 0, $num0 = 0, $num1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $2 = sp + 16|0;
 $3 = sp;
 $arg0 = $0;
 $ij_u = $1;
 $4 = $ij_u; //@line 192 "main.rs"
 $ij = $4; //@line 192 "main.rs"
 $5 = $ij; //@line 193 "main.rs"
 $6 = $arg0; //@line 193 "main.rs"
 $7 = HEAP32[$6>>2]|0; //@line 193 "main.rs"
 $8 = HEAP32[$7>>2]|0; //@line 193 "main.rs"
 __ZN5rustv3r3d7div_rem17h805283f327a888d1E($3,$5,$8); //@line 193 "main.rs"
 $$sreg$field = HEAP32[$3>>2]|0; //@line 193 "main.rs"
 $$sreg$index2 = ((($3)) + 4|0); //@line 193 "main.rs"
 $$sreg$field3 = HEAP32[$$sreg$index2>>2]|0; //@line 193 "main.rs"
 $j = $$sreg$field; //@line 193 "main.rs"
 $i1 = $$sreg$field3; //@line 193 "main.rs"
 $9 = $i1; //@line 194 "main.rs"
 $i = $9; //@line 194 "main.rs"
 $10 = $arg0; //@line 195 "main.rs"
 $11 = ((($10)) + 4|0); //@line 195 "main.rs"
 $12 = HEAP32[$11>>2]|0; //@line 195 "main.rs"
 $13 = HEAP32[$12>>2]|0; //@line 195 "main.rs"
 $num0 = $13; //@line 195 "main.rs"
 $14 = $arg0; //@line 196 "main.rs"
 $15 = ((($14)) + 4|0); //@line 196 "main.rs"
 $16 = HEAP32[$15>>2]|0; //@line 196 "main.rs"
 $17 = ((($16)) + 4|0); //@line 196 "main.rs"
 $18 = HEAP32[$17>>2]|0; //@line 196 "main.rs"
 $num1 = $18; //@line 196 "main.rs"
 $19 = $i; //@line 197 "main.rs"
 $$arith27 = (($19) - 1)|0; //@line 197 "main.rs"
 $$postemp28 = (($19) + -2147483647)|0; //@line 197 "main.rs"
 $$negtemp29 = (($19) + -2147483648)|0; //@line 197 "main.rs"
 $$poscheck30 = ($$arith27|0)<($$postemp28|0); //@line 197 "main.rs"
 $$negcheck31 = ($$arith27|0)>($$negtemp29|0); //@line 197 "main.rs"
 $$ispos32 = ($19|0)>=(0); //@line 197 "main.rs"
 $$select33 = $$ispos32 ? $$poscheck30 : $$negcheck31; //@line 197 "main.rs"
 $20 = $$select33; //@line 197 "main.rs"
 if ($20) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(4004); //@line 197 "main.rs"
  // unreachable; //@line 197 "main.rs"
 }
 $21 = (__ZN4core3cmp3max17h4405a58e9b937f43E($$arith27,0)|0); //@line 197 "main.rs"
 $22 = $num0; //@line 197 "main.rs"
 $$arith39 = $22<<1; //@line 197 "main.rs"
 $$div40 = (($$arith39|0) / 2)&-1; //@line 197 "main.rs"
 $$same41 = ($$div40|0)!=($22|0); //@line 197 "main.rs"
 $$overflow42 = 0 ? 0 : $$same41; //@line 197 "main.rs"
 $23 = $$overflow42; //@line 197 "main.rs"
 if ($23) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(4028); //@line 197 "main.rs"
  // unreachable; //@line 197 "main.rs"
 }
 $$arith18 = (($$arith39) + 1)|0; //@line 197 "main.rs"
 $$postemp19 = (($$arith39) + -2147483648)|0; //@line 197 "main.rs"
 $$negtemp20 = (($$arith39) + 2147483647)|0; //@line 197 "main.rs"
 $$poscheck21 = ($$arith18|0)<($$postemp19|0); //@line 197 "main.rs"
 $$negcheck22 = ($$arith18|0)>($$negtemp20|0); //@line 197 "main.rs"
 $$ispos23 = ($$arith39|0)>=(0); //@line 197 "main.rs"
 $$select24 = $$ispos23 ? $$poscheck21 : $$negcheck22; //@line 197 "main.rs"
 $24 = $$select24; //@line 197 "main.rs"
 if ($24) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(4052); //@line 197 "main.rs"
  // unreachable; //@line 197 "main.rs"
 }
 $25 = (__ZN4core3cmp3min17h3d41c0830ab66801E($21,$$arith18)|0); //@line 197 "main.rs"
 $i2 = $25; //@line 197 "main.rs"
 $26 = $i2; //@line 198 "main.rs"
 __ZN5rustv3r3d7div_rem17h805283f327a888d1E($2,$26,2); //@line 198 "main.rs"
 $$sreg1$field = HEAP32[$2>>2]|0; //@line 198 "main.rs"
 $$sreg1$index5 = ((($2)) + 4|0); //@line 198 "main.rs"
 $$sreg1$field6 = HEAP32[$$sreg1$index5>>2]|0; //@line 198 "main.rs"
 $i3 = $$sreg1$field; //@line 198 "main.rs"
 $dj = $$sreg1$field6; //@line 198 "main.rs"
 $27 = $i3; //@line 199 "main.rs"
 $ai = $27; //@line 199 "main.rs"
 $28 = $dj; //@line 199 "main.rs"
 $adj = $28; //@line 199 "main.rs"
 $29 = $j; //@line 200 "main.rs"
 $aj = $29; //@line 200 "main.rs"
 $30 = $aj; //@line 201 "main.rs"
 $31 = $adj; //@line 201 "main.rs"
 $$arith9 = (($30) + ($31))|0; //@line 201 "main.rs"
 $$postemp10 = (($30) + -2147483648)|0; //@line 201 "main.rs"
 $$negtemp11 = (($30) + 2147483647)|0; //@line 201 "main.rs"
 $$poscheck12 = ($$arith9|0)<($$postemp10|0); //@line 201 "main.rs"
 $$negcheck13 = ($$arith9|0)>($$negtemp11|0); //@line 201 "main.rs"
 $$ispos14 = ($30|0)>=(0); //@line 201 "main.rs"
 $$select15 = $$ispos14 ? $$poscheck12 : $$negcheck13; //@line 201 "main.rs"
 $32 = $$select15; //@line 201 "main.rs"
 if ($32) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(4076); //@line 201 "main.rs"
  // unreachable; //@line 201 "main.rs"
 }
 $33 = $num1; //@line 201 "main.rs"
 $34 = ($33|0)==(0); //@line 201 "main.rs"
 $35 = $34; //@line 201 "main.rs"
 if ($35) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(4100); //@line 201 "main.rs"
  // unreachable; //@line 201 "main.rs"
 }
 $36 = ($33|0)==(-1); //@line 201 "main.rs"
 $37 = ($$arith9|0)==(-2147483648); //@line 201 "main.rs"
 $38 = $36 & $37; //@line 201 "main.rs"
 $39 = $38; //@line 201 "main.rs"
 if ($39) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(4124); //@line 201 "main.rs"
  // unreachable; //@line 201 "main.rs"
 }
 $40 = (($$arith9|0) % ($33|0))&-1; //@line 201 "main.rs"
 $41 = $num0; //@line 201 "main.rs"
 $$arith36 = Math_imul($40, $41)|0; //@line 201 "main.rs"
 $$iszero = ($41|0)==(0); //@line 201 "main.rs"
 $$denom = $$iszero ? 1 : $41; //@line 201 "main.rs"
 $$div = (($$arith36|0) / ($$denom|0))&-1; //@line 201 "main.rs"
 $$same = ($$div|0)!=($40|0); //@line 201 "main.rs"
 $$overflow = $$iszero ? 0 : $$same; //@line 201 "main.rs"
 $42 = $$overflow; //@line 201 "main.rs"
 if ($42) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(4148); //@line 201 "main.rs"
  // unreachable; //@line 201 "main.rs"
 }
 $43 = $i3; //@line 201 "main.rs"
 $44 = $num0; //@line 201 "main.rs"
 $45 = ($44|0)==(0); //@line 201 "main.rs"
 $46 = $45; //@line 201 "main.rs"
 if ($46) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(4172); //@line 201 "main.rs"
  // unreachable; //@line 201 "main.rs"
 }
 $47 = ($44|0)==(-1); //@line 201 "main.rs"
 $48 = ($43|0)==(-2147483648); //@line 201 "main.rs"
 $49 = $47 & $48; //@line 201 "main.rs"
 $50 = $49; //@line 201 "main.rs"
 if ($50) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(4196); //@line 201 "main.rs"
  // unreachable; //@line 201 "main.rs"
 }
 $51 = (($43|0) % ($44|0))&-1; //@line 201 "main.rs"
 $$arith = (($$arith36) + ($51))|0; //@line 201 "main.rs"
 $$postemp = (($$arith36) + -2147483648)|0; //@line 201 "main.rs"
 $$negtemp = (($$arith36) + 2147483647)|0; //@line 201 "main.rs"
 $$poscheck = ($$arith|0)<($$postemp|0); //@line 201 "main.rs"
 $$negcheck = ($$arith|0)>($$negtemp|0); //@line 201 "main.rs"
 $$ispos = ($$arith36|0)>=(0); //@line 201 "main.rs"
 $$select = $$ispos ? $$poscheck : $$negcheck; //@line 201 "main.rs"
 $52 = $$select; //@line 201 "main.rs"
 if ($52) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(4220); //@line 201 "main.rs"
  // unreachable; //@line 201 "main.rs"
 } else {
  STACKTOP = sp;return ($$arith|0); //@line 202 "main.rs"
 }
 return (0)|0;
}
function __ZN5rustv4Mesh9new_torus28__u7b__u7b_closure_u7d__u7d_17hc2fadd27fc5829f3E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $arg0 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $1;
 $i = $2;
 $3 = $i; //@line 206 "main.rs"
 $4 = $arg0; //@line 206 "main.rs"
 $5 = HEAP32[$4>>2]|0; //@line 206 "main.rs"
 $6 = HEAP32[$5>>2]|0; //@line 206 "main.rs"
 $7 = ((($5)) + 4|0); //@line 206 "main.rs"
 $8 = HEAP32[$7>>2]|0; //@line 206 "main.rs"
 __ZN5rustv21generate_torus_vertex17h62b94d086a327844E($0,$3,$6,$8); //@line 206 "main.rs"
 STACKTOP = sp;return; //@line 206 "main.rs"
}
function __ZN5rustv21generate_torus_vertex17h62b94d086a327844E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sreg$field = 0, $$sreg$field4 = 0, $$sreg$index3 = 0, $$sreg1$field = 0.0, $$sreg1$field7 = 0.0, $$sreg1$index6 = 0, $$sreg2$field = 0.0, $$sreg2$field10 = 0.0, $$sreg2$index9 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0;
 var $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0;
 var $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0;
 var $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0;
 var $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $_45 = 0, $_47 = 0, $_55 = 0, $_73 = 0, $_75 = 0, $_79 = 0, $arg1 = 0, $cx = 0.0, $cy = 0.0, $fi = 0.0, $fj = 0.0, $i = 0, $ij = 0;
 var $j = 0, $norm = 0, $num_u = 0, $num_v = 0, $pi = 0.0, $pi1 = 0.0, $rx = 0.0, $ry = 0.0, $sx = 0.0, $sy = 0.0, $tau = 0.0, $tau2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $4 = sp + 32|0;
 $5 = sp + 16|0;
 $6 = sp;
 $_79 = sp + 200|0;
 $_75 = sp + 184|0;
 $_73 = sp + 168|0;
 $_55 = sp + 156|0;
 $_47 = sp + 144|0;
 $_45 = sp + 132|0;
 $norm = sp + 120|0;
 $arg1 = sp + 48|0;
 $ij = $1;
 HEAP32[$arg1>>2] = $2;
 $7 = ((($arg1)) + 4|0);
 HEAP32[$7>>2] = $3;
 $8 = HEAP32[$arg1>>2]|0; //@line 136 "main.rs"
 $num_u = $8; //@line 136 "main.rs"
 $9 = ((($arg1)) + 4|0); //@line 136 "main.rs"
 $10 = HEAP32[$9>>2]|0; //@line 136 "main.rs"
 $num_v = $10; //@line 136 "main.rs"
 $pi = 3.1415927410125732; //@line 137 "main.rs"
 $11 = $pi; //@line 138 "main.rs"
 $12 = $11 * 2.0; //@line 138 "main.rs"
 $tau = $12; //@line 138 "main.rs"
 $13 = $ij; //@line 139 "main.rs"
 $14 = $num_u; //@line 139 "main.rs"
 __ZN5rustv3r3d7div_rem17hb7cb2fac6c5b1055E($6,$13,$14); //@line 139 "main.rs"
 $$sreg$field = HEAP32[$6>>2]|0; //@line 139 "main.rs"
 $$sreg$index3 = ((($6)) + 4|0); //@line 139 "main.rs"
 $$sreg$field4 = HEAP32[$$sreg$index3>>2]|0; //@line 139 "main.rs"
 $i = $$sreg$field; //@line 139 "main.rs"
 $j = $$sreg$field4; //@line 139 "main.rs"
 $15 = $i; //@line 140 "main.rs"
 $16 = (+($15>>>0)); //@line 140 "main.rs"
 $17 = $num_u; //@line 140 "main.rs"
 $18 = (+($17>>>0)); //@line 140 "main.rs"
 $19 = 1.0 / $18; //@line 140 "main.rs"
 $20 = $16 * $19; //@line 140 "main.rs"
 $fi = $20; //@line 140 "main.rs"
 $21 = $j; //@line 141 "main.rs"
 $22 = (+($21>>>0)); //@line 141 "main.rs"
 $23 = $num_v; //@line 141 "main.rs"
 $24 = (+($23>>>0)); //@line 141 "main.rs"
 $25 = 1.0 / $24; //@line 141 "main.rs"
 $26 = $22 * $25; //@line 141 "main.rs"
 $fj = $26; //@line 141 "main.rs"
 $rx = 0.125; //@line 143 "main.rs"
 $27 = $rx; //@line 144 "main.rs"
 $28 = $27 * 0.33000001311302185; //@line 144 "main.rs"
 $ry = $28; //@line 144 "main.rs"
 $pi1 = 3.1415927410125732; //@line 145 "main.rs"
 $29 = $pi1; //@line 146 "main.rs"
 $30 = $29 * 2.0; //@line 146 "main.rs"
 $tau2 = $30; //@line 146 "main.rs"
 $31 = $fi; //@line 147 "main.rs"
 $32 = $tau2; //@line 147 "main.rs"
 $33 = $31 * $32; //@line 147 "main.rs"
 __ZN5rustv3r3d7sin_cos17hdfd72834cc9b8d67E($5,$33); //@line 147 "main.rs"
 $$sreg1$field = +HEAPF32[$5>>2]; //@line 147 "main.rs"
 $$sreg1$index6 = ((($5)) + 4|0); //@line 147 "main.rs"
 $$sreg1$field7 = +HEAPF32[$$sreg1$index6>>2]; //@line 147 "main.rs"
 $sx = $$sreg1$field; //@line 147 "main.rs"
 $cx = $$sreg1$field7; //@line 147 "main.rs"
 $34 = $fj; //@line 148 "main.rs"
 $35 = $tau2; //@line 148 "main.rs"
 $36 = $34 * $35; //@line 148 "main.rs"
 __ZN5rustv3r3d7sin_cos17hdfd72834cc9b8d67E($4,$36); //@line 148 "main.rs"
 $$sreg2$field = +HEAPF32[$4>>2]; //@line 148 "main.rs"
 $$sreg2$index9 = ((($4)) + 4|0); //@line 148 "main.rs"
 $$sreg2$field10 = +HEAPF32[$$sreg2$index9>>2]; //@line 148 "main.rs"
 $sy = $$sreg2$field; //@line 148 "main.rs"
 $cy = $$sreg2$field10; //@line 148 "main.rs"
 $37 = $sy; //@line 149 "main.rs"
 $38 = $cx; //@line 149 "main.rs"
 $39 = $37 * $38; //@line 149 "main.rs"
 $40 = $sy; //@line 149 "main.rs"
 $41 = $sx; //@line 149 "main.rs"
 $42 = $40 * $41; //@line 149 "main.rs"
 $43 = $cy; //@line 149 "main.rs"
 __ZN5rustv3r3d6vector4Vec317h0bc26ddf46bf1859E($_47,$39,$42,$43); //@line 149 "main.rs"
 __ZN5rustv3r3d6vector6VecOps10vnormalize17hc3b63e8f5c50fcc5E($_45,$_47); //@line 149 "main.rs"
 __ZN48__LT_V_u20_as_u20_rustv__r3d__vector__VecOps_GT_6vscale17hcd8be07e1eb82ce2E($norm,$_45,0.10000000149011612); //@line 149 "main.rs"
 $44 = $rx; //@line 152 "main.rs"
 $45 = $sy; //@line 152 "main.rs"
 $46 = $ry; //@line 152 "main.rs"
 $47 = $45 * $46; //@line 152 "main.rs"
 $48 = $44 + $47; //@line 152 "main.rs"
 $49 = $cx; //@line 152 "main.rs"
 $50 = $48 * $49; //@line 152 "main.rs"
 $51 = $rx; //@line 152 "main.rs"
 $52 = $sy; //@line 152 "main.rs"
 $53 = $ry; //@line 152 "main.rs"
 $54 = $52 * $53; //@line 152 "main.rs"
 $55 = $51 + $54; //@line 152 "main.rs"
 $56 = $sx; //@line 152 "main.rs"
 $57 = $55 * $56; //@line 152 "main.rs"
 $58 = $ry; //@line 152 "main.rs"
 $59 = $cy; //@line 152 "main.rs"
 $60 = $58 * $59; //@line 152 "main.rs"
 HEAPF32[$_55>>2] = $50; //@line 152 "main.rs"
 $61 = ((($_55)) + 4|0); //@line 152 "main.rs"
 HEAPF32[$61>>2] = $57; //@line 152 "main.rs"
 $62 = ((($_55)) + 8|0); //@line 152 "main.rs"
 HEAPF32[$62>>2] = $60; //@line 152 "main.rs"
 $63 = $fj; //@line 153 "main.rs"
 HEAPF32[$_73>>2] = 1.0; //@line 153 "main.rs"
 $64 = ((($_73)) + 4|0); //@line 153 "main.rs"
 HEAPF32[$64>>2] = 1.0; //@line 153 "main.rs"
 $65 = ((($_73)) + 8|0); //@line 153 "main.rs"
 HEAPF32[$65>>2] = 1.0; //@line 153 "main.rs"
 $66 = ((($_73)) + 12|0); //@line 153 "main.rs"
 HEAPF32[$66>>2] = $63; //@line 153 "main.rs"
 $67 = +HEAPF32[$norm>>2]; //@line 154 "main.rs"
 $68 = ((($norm)) + 4|0); //@line 154 "main.rs"
 $69 = +HEAPF32[$68>>2]; //@line 154 "main.rs"
 $70 = ((($norm)) + 8|0); //@line 154 "main.rs"
 $71 = +HEAPF32[$70>>2]; //@line 154 "main.rs"
 HEAPF32[$_75>>2] = $67; //@line 154 "main.rs"
 $72 = ((($_75)) + 4|0); //@line 154 "main.rs"
 HEAPF32[$72>>2] = $69; //@line 154 "main.rs"
 $73 = ((($_75)) + 8|0); //@line 154 "main.rs"
 HEAPF32[$73>>2] = $71; //@line 154 "main.rs"
 $74 = $fi; //@line 155 "main.rs"
 $75 = $74 * 16.0; //@line 155 "main.rs"
 $76 = $fj; //@line 155 "main.rs"
 $77 = $76 * 2.0; //@line 155 "main.rs"
 HEAPF32[$_79>>2] = $75; //@line 155 "main.rs"
 $78 = ((($_79)) + 4|0); //@line 155 "main.rs"
 HEAPF32[$78>>2] = $77; //@line 155 "main.rs"
 ;HEAP32[$0>>2]=HEAP32[$_55>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_55+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_55+8>>2]|0; //@line 151 "main.rs"
 $79 = ((($0)) + 12|0); //@line 151 "main.rs"
 ;HEAP32[$79>>2]=HEAP32[$_73>>2]|0;HEAP32[$79+4>>2]=HEAP32[$_73+4>>2]|0;HEAP32[$79+8>>2]=HEAP32[$_73+8>>2]|0;HEAP32[$79+12>>2]=HEAP32[$_73+12>>2]|0; //@line 151 "main.rs"
 $80 = ((($0)) + 28|0); //@line 151 "main.rs"
 ;HEAP32[$80>>2]=HEAP32[$_75>>2]|0;HEAP32[$80+4>>2]=HEAP32[$_75+4>>2]|0;HEAP32[$80+8>>2]=HEAP32[$_75+8>>2]|0; //@line 151 "main.rs"
 $81 = ((($0)) + 40|0); //@line 151 "main.rs"
 ;HEAP32[$81>>2]=HEAP32[$_79>>2]|0;HEAP32[$81+4>>2]=HEAP32[$_79+4>>2]|0; //@line 151 "main.rs"
 STACKTOP = sp;return; //@line 157 "main.rs"
}
function __ZN5rustv14render_no_swap17h0ef764ee25a306efE($0) {
 $0 = $0|0;
 var $$arith = 0, $$arith13 = 0, $$arith9 = 0, $$ispos = 0, $$negcheck = 0, $$negtemp = 0, $$overflow = 0, $$overflow10 = 0, $$poscheck = 0, $$postemp = 0, $$select = 0, $$sreg$field = 0, $$sreg$field3 = 0, $$sreg$index2 = 0, $$sreg1$field = 0, $$sreg1$field6 = 0, $$sreg1$index5 = 0, $1 = 0, $10 = 0.0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0;
 var $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0;
 var $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0;
 var $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0;
 var $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0;
 var $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, $_136 = 0, $_15 = 0, $_16 = 0, $_76 = 0, $_8 = 0, $_82 = 0, $__arg0 = 0, $__next = 0, $a0 = 0.0, $a1 = 0.0, $a2 = 0.0, $a3 = 0.0, $a4 = 0.0;
 var $a5 = 0.0, $da0 = 0.0, $da1 = 0.0, $da2 = 0.0, $da3 = 0.0, $da4 = 0.0, $da5 = 0.0, $debug = 0, $i = 0, $ig = 0, $ig2 = 0, $ii = 0, $iter = 0, $matI = 0, $matMV = 0, $matP = 0, $matT = 0, $pi = 0.0, $r0 = 0.0, $r1 = 0.0;
 var $rmode = 0, $rot_trans = 0, $rot_x = 0, $rot_xy = 0, $rot_y = 0, $sda = 0.0, $switch = 0, $tau = 0.0, $val = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 784|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(784|0);
 $1 = sp + 16|0;
 $2 = sp;
 $_136 = sp + 696|0;
 $matMV = sp + 632|0;
 $rot_trans = sp + 568|0;
 $rot_xy = sp + 504|0;
 $rot_y = sp + 440|0;
 $rot_x = sp + 376|0;
 $matT = sp + 312|0;
 $_82 = sp + 296|0;
 $iter = sp + 280|0;
 $_76 = sp + 272|0;
 $matP = sp + 136|0;
 $matI = sp + 72|0;
 $_15 = sp + 56|0;
 $_8 = sp + 32|0;
 $debug = $0;
 __ZN5rustv21lazy_create_resources17hbaff888999bcb098E(); //@line 457 "main.rs"
 $3 = HEAP32[9574]|0; //@line 460 "main.rs"
 $4 = $3 & 31; //@line 460 "main.rs"
 $5 = (0)==($4|0); //@line 460 "main.rs"
 if ($5) {
  $_16 = 38296; //@line 460 "main.rs"
  $6 = $_16; //@line 460 "main.rs"
  $__arg0 = $6; //@line 460 "main.rs"
  $7 = $__arg0; //@line 460 "main.rs"
  __ZN4core3fmt10ArgumentV13new17h18c233152faad36eE($2,$7,288); //@line 460 "main.rs"
  $$sreg$field = HEAP32[$2>>2]|0; //@line 460 "main.rs"
  $$sreg$index2 = ((($2)) + 4|0); //@line 460 "main.rs"
  $$sreg$field3 = HEAP32[$$sreg$index2>>2]|0; //@line 460 "main.rs"
  HEAP32[$_15>>2] = $$sreg$field; //@line 460 "main.rs"
  $8 = ((($_15)) + 4|0); //@line 460 "main.rs"
  HEAP32[$8>>2] = $$sreg$field3; //@line 460 "main.rs"
  $9 = HEAP32[1683]|0; //@line 460 "main.rs"
  __ZN4core3fmt9Arguments16new_v1_formatted17hd7921c86529aa3b1E($_8,4244,2,$_15,1,$9,1); //@line 460 "main.rs"
  __ZN3std2io5stdio6_print17h5e38a8ff46cfb3e1E($_8); //@line 460 "main.rs"
 }
 $10 = +HEAPF32[9575]; //@line 463 "main.rs"
 $11 = $10 + 0.0024999999441206455; //@line 463 "main.rs"
 HEAPF32[9575] = $11; //@line 463 "main.rs"
 __ZN5rustv3r3d6matrix8identity17h81521b31795d776aE($matI); //@line 468 "main.rs"
 __ZN5rustv3r3d6matrix18projection_frustum17h3327eefb74ae67caE($matP,-0.5,0.5,-0.5,0.5,90.0,1.0,0.5,5.0); //@line 469 "main.rs"
 $pi = 3.1415927410125732; //@line 471 "main.rs"
 $12 = $pi; //@line 472 "main.rs"
 $13 = $12 * 2.0; //@line 472 "main.rs"
 $tau = $13; //@line 472 "main.rs"
 $r0 = 1.0; //@line 474 "main.rs"
 $r1 = 0.5; //@line 475 "main.rs"
 $sda = 0.25; //@line 476 "main.rs"
 $14 = +HEAPF32[9575]; //@line 477 "main.rs"
 $15 = $14 * 1.1000000238418579; //@line 477 "main.rs"
 $16 = $15 + 0.10000000149011612; //@line 477 "main.rs"
 $a0 = $16; //@line 477 "main.rs"
 $17 = +HEAPF32[9575]; //@line 478 "main.rs"
 $18 = $17 * 1.0900000333786011; //@line 478 "main.rs"
 $19 = $18 + 1.5; //@line 478 "main.rs"
 $a1 = $19; //@line 478 "main.rs"
 $20 = +HEAPF32[9575]; //@line 479 "main.rs"
 $21 = $20 * 1.0499999523162842; //@line 479 "main.rs"
 $22 = $21 + 0.5; //@line 479 "main.rs"
 $a2 = $22; //@line 479 "main.rs"
 $23 = +HEAPF32[9575]; //@line 480 "main.rs"
 $24 = $23 * 1.1100000143051147; //@line 480 "main.rs"
 $a3 = $24; //@line 480 "main.rs"
 $25 = +HEAPF32[9575]; //@line 481 "main.rs"
 $26 = $25 * 1.1100000143051147; //@line 481 "main.rs"
 $27 = $26 + 0.69999998807907104; //@line 481 "main.rs"
 $a4 = $27; //@line 481 "main.rs"
 $28 = +HEAPF32[9575]; //@line 482 "main.rs"
 $29 = $28 * 1.1050000190734863; //@line 482 "main.rs"
 $a5 = $29; //@line 482 "main.rs"
 $30 = $tau; //@line 483 "main.rs"
 $31 = $30 * 0.071000002324581146; //@line 483 "main.rs"
 $32 = $sda; //@line 483 "main.rs"
 $33 = $31 * $32; //@line 483 "main.rs"
 $da0 = $33; //@line 483 "main.rs"
 $34 = $tau; //@line 484 "main.rs"
 $35 = $34 * 0.041999999433755875; //@line 484 "main.rs"
 $36 = $sda; //@line 484 "main.rs"
 $37 = $35 * $36; //@line 484 "main.rs"
 $da1 = $37; //@line 484 "main.rs"
 $38 = $tau; //@line 485 "main.rs"
 $39 = $38 * 0.081000000238418579; //@line 485 "main.rs"
 $40 = $sda; //@line 485 "main.rs"
 $41 = $39 * $40; //@line 485 "main.rs"
 $da2 = $41; //@line 485 "main.rs"
 $42 = $tau; //@line 486 "main.rs"
 $43 = $42 * 0.090999998152256011; //@line 486 "main.rs"
 $44 = $sda; //@line 486 "main.rs"
 $45 = $43 * $44; //@line 486 "main.rs"
 $da3 = $45; //@line 486 "main.rs"
 $46 = $tau; //@line 487 "main.rs"
 $47 = $46 * 0.15299999713897705; //@line 487 "main.rs"
 $48 = $sda; //@line 487 "main.rs"
 $49 = $47 * $48; //@line 487 "main.rs"
 $da4 = $49; //@line 487 "main.rs"
 $50 = $tau; //@line 488 "main.rs"
 $51 = $50 * 0.16210000216960907; //@line 488 "main.rs"
 $52 = $sda; //@line 488 "main.rs"
 $53 = $51 * $52; //@line 488 "main.rs"
 $da5 = $53; //@line 488 "main.rs"
 HEAP32[$_76>>2] = 0; //@line 490 "main.rs"
 $54 = ((($_76)) + 4|0); //@line 490 "main.rs"
 HEAP32[$54>>2] = 256; //@line 490 "main.rs"
 $55 = HEAP32[$_76>>2]|0; //@line 490 "main.rs"
 $56 = ((($_76)) + 4|0); //@line 490 "main.rs"
 $57 = HEAP32[$56>>2]|0; //@line 490 "main.rs"
 __ZN54__LT_I_u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17hdbcc8e125fee3dc0E($1,$55,$57); //@line 490 "main.rs"
 $$sreg1$field = HEAP32[$1>>2]|0; //@line 490 "main.rs"
 $$sreg1$index5 = ((($1)) + 4|0); //@line 490 "main.rs"
 $$sreg1$field6 = HEAP32[$$sreg1$index5>>2]|0; //@line 490 "main.rs"
 HEAP32[$iter>>2] = $$sreg1$field; //@line 490 "main.rs"
 $58 = ((($iter)) + 4|0); //@line 490 "main.rs"
 HEAP32[$58>>2] = $$sreg1$field6; //@line 490 "main.rs"
 while(1) {
  __ZN4core4iter5range93__LT_impl_u20_core__iter__iterator__Iterator_u20_for_u20_core__ops__range__Range_LT_A_GT__GT_4next17h0721cb4ba09f53cdE($_82,$iter); //@line 490 "main.rs"
  $59 = HEAP32[$_82>>2]|0; //@line 490 "main.rs"
  $switch = ($59>>>0)<(1); //@line 490 "main.rs"
  if ($switch) {
   label = 5;
   break;
  }
  $62 = ((($_82)) + 4|0); //@line 490 "main.rs"
  $63 = HEAP32[$62>>2]|0; //@line 490 "main.rs"
  $val = $63; //@line 490 "main.rs"
  $64 = $val; //@line 490 "main.rs"
  $__next = $64; //@line 490 "main.rs"
  $65 = $__next; //@line 490 "main.rs"
  $i = $65; //@line 490 "main.rs"
  $66 = $a0; //@line 493 "main.rs"
  $67 = (+__ZN5rustv3r3d3cos17hecef639f5fcd4660E($66)); //@line 493 "main.rs"
  $68 = $r0; //@line 493 "main.rs"
  $69 = $67 * $68; //@line 493 "main.rs"
  $70 = $a3; //@line 493 "main.rs"
  $71 = (+__ZN5rustv3r3d3cos17hecef639f5fcd4660E($70)); //@line 493 "main.rs"
  $72 = $r1; //@line 493 "main.rs"
  $73 = $71 * $72; //@line 493 "main.rs"
  $74 = $69 + $73; //@line 493 "main.rs"
  $75 = $a1; //@line 494 "main.rs"
  $76 = (+__ZN5rustv3r3d3cos17hecef639f5fcd4660E($75)); //@line 494 "main.rs"
  $77 = $r0; //@line 494 "main.rs"
  $78 = $76 * $77; //@line 494 "main.rs"
  $79 = $a4; //@line 494 "main.rs"
  $80 = (+__ZN5rustv3r3d3cos17hecef639f5fcd4660E($79)); //@line 494 "main.rs"
  $81 = $r1; //@line 494 "main.rs"
  $82 = $80 * $81; //@line 494 "main.rs"
  $83 = $78 + $82; //@line 494 "main.rs"
  $84 = $a2; //@line 495 "main.rs"
  $85 = (+__ZN5rustv3r3d3cos17hecef639f5fcd4660E($84)); //@line 495 "main.rs"
  $86 = $r0; //@line 495 "main.rs"
  $87 = $85 * $86; //@line 495 "main.rs"
  $88 = $a5; //@line 495 "main.rs"
  $89 = (+__ZN5rustv3r3d3cos17hecef639f5fcd4660E($88)); //@line 495 "main.rs"
  $90 = $r1; //@line 495 "main.rs"
  $91 = $89 * $90; //@line 495 "main.rs"
  $92 = $87 + $91; //@line 495 "main.rs"
  $93 = $r0; //@line 495 "main.rs"
  $94 = 2.0 * $93; //@line 495 "main.rs"
  $95 = $92 - $94; //@line 495 "main.rs"
  __ZN5rustv3r3d6matrix13translate_xyz17h54c1fbdcca009604E($matT,$74,$83,$95); //@line 492 "main.rs"
  $96 = $a0; //@line 497 "main.rs"
  __ZN5rustv3r3d6matrix8rotate_x17h77749db493b14822E($rot_x,$96); //@line 497 "main.rs"
  $97 = $a1; //@line 498 "main.rs"
  $98 = $97 * 0.24500000476837158; //@line 498 "main.rs"
  __ZN5rustv3r3d6matrix8rotate_x17h77749db493b14822E($rot_y,$98); //@line 498 "main.rs"
  __ZN45__LT_rustv__r3d__matrix__Matrix4_LT_V_GT__GT_10mul_matrix17hf2e772cdbc84ba93E($rot_xy,$rot_x,$rot_y); //@line 499 "main.rs"
  __ZN45__LT_rustv__r3d__matrix__Matrix4_LT_V_GT__GT_10mul_matrix17hf2e772cdbc84ba93E($rot_trans,$matT,$rot_xy); //@line 500 "main.rs"
  dest=$_136; src=$matT; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0)); //@line 502 "main.rs"
  dest=$matMV; src=$_136; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0)); //@line 502 "main.rs"
  $99 = $i; //@line 507 "main.rs"
  $ii = $99; //@line 507 "main.rs"
  $100 = $ii; //@line 508 "main.rs"
  $101 = (($100>>>0) % 11)&-1; //@line 508 "main.rs"
  $rmode = $101; //@line 508 "main.rs"
  $102 = $ii; //@line 509 "main.rs"
  $103 = (($102>>>0) / 11)&-1; //@line 509 "main.rs"
  $ig = $103; //@line 509 "main.rs"
  $104 = $ig; //@line 510 "main.rs"
  $105 = (($104>>>0) / 11)&-1; //@line 510 "main.rs"
  $ig2 = $105; //@line 510 "main.rs"
  $106 = $rmode; //@line 513 "main.rs"
  $107 = $ig; //@line 513 "main.rs"
  $108 = (($107>>>0) % 4)&-1; //@line 513 "main.rs"
  $$arith9 = (1 + ($108))|0; //@line 513 "main.rs"
  $$overflow10 = ($108>>>0)>(4294967294); //@line 513 "main.rs"
  $109 = $$overflow10; //@line 513 "main.rs"
  if ($109) {
   label = 10;
   break;
  }
  $110 = $ig2; //@line 513 "main.rs"
  $111 = (($110>>>0) % 4)&-1; //@line 513 "main.rs"
  $$arith = (1 + ($111))|0; //@line 513 "main.rs"
  $$overflow = ($111>>>0)>(4294967294); //@line 513 "main.rs"
  $112 = $$overflow; //@line 513 "main.rs"
  if ($112) {
   label = 11;
   break;
  }
  __ZN5rustv4Mesh18render_mesh_shader17hdff5a9c34bedacbeE(4260,$matP,$rot_trans,$106,$$arith9,$$arith); //@line 513 "main.rs"
  $113 = $da0; //@line 517 "main.rs"
  $114 = $a0; //@line 517 "main.rs"
  $115 = $114 + $113; //@line 517 "main.rs"
  $a0 = $115; //@line 517 "main.rs"
  $116 = $da1; //@line 517 "main.rs"
  $117 = $a1; //@line 517 "main.rs"
  $118 = $117 + $116; //@line 517 "main.rs"
  $a1 = $118; //@line 517 "main.rs"
  $119 = $da2; //@line 517 "main.rs"
  $120 = $a2; //@line 517 "main.rs"
  $121 = $120 + $119; //@line 517 "main.rs"
  $a2 = $121; //@line 517 "main.rs"
  $122 = $da3; //@line 517 "main.rs"
  $123 = $a3; //@line 517 "main.rs"
  $124 = $123 + $122; //@line 517 "main.rs"
  $a3 = $124; //@line 517 "main.rs"
  $125 = $da4; //@line 517 "main.rs"
  $126 = $a4; //@line 517 "main.rs"
  $127 = $126 + $125; //@line 517 "main.rs"
  $a4 = $127; //@line 517 "main.rs"
  $128 = $da5; //@line 517 "main.rs"
  $129 = $a5; //@line 517 "main.rs"
  $130 = $129 + $128; //@line 517 "main.rs"
  $a5 = $130; //@line 517 "main.rs"
 }
 if ((label|0) == 5) {
  _glUseProgram(0); //@line 520 "main.rs"
  $60 = HEAP32[9574]|0; //@line 521 "main.rs"
  $$arith13 = (($60) + 1)|0; //@line 521 "main.rs"
  $$postemp = (($60) + -2147483648)|0; //@line 521 "main.rs"
  $$negtemp = (($60) + 2147483647)|0; //@line 521 "main.rs"
  $$poscheck = ($$arith13|0)<($$postemp|0); //@line 521 "main.rs"
  $$negcheck = ($$arith13|0)>($$negtemp|0); //@line 521 "main.rs"
  $$ispos = ($60|0)>=(0); //@line 521 "main.rs"
  $$select = $$ispos ? $$poscheck : $$negcheck; //@line 521 "main.rs"
  $61 = $$select; //@line 521 "main.rs"
  if ($61) {
   __ZN4core9panicking5panic17h9fa3414033a56a4dE(4328); //@line 521 "main.rs"
   // unreachable; //@line 521 "main.rs"
  } else {
   HEAP32[9574] = $$arith13; //@line 521 "main.rs"
   STACKTOP = sp;return; //@line 523 "main.rs"
  }
 }
 else if ((label|0) == 10) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(4280); //@line 513 "main.rs"
  // unreachable; //@line 513 "main.rs"
 }
 else if ((label|0) == 11) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(4304); //@line 513 "main.rs"
  // unreachable; //@line 513 "main.rs"
 }
}
function __ZN5rustv21lazy_create_resources17hbaff888999bcb098E() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_18 = 0, $_19 = 0, $_4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_19 = sp + 48|0;
 $_18 = sp + 24|0;
 $_4 = sp;
 $0 = HEAP8[39450]|0; //@line 547 "main.rs"
 $1 = $0&1; //@line 547 "main.rs"
 $2 = $1&1; //@line 547 "main.rs"
 $3 = ($2<<24>>24)==(0); //@line 547 "main.rs"
 if (!($3)) {
  STACKTOP = sp;return; //@line 557 "main.rs"
 }
 __ZN4core3fmt9Arguments6new_v117h1cedc7e123bae470E($_4,4528,1,38620,0); //@line 548 "main.rs"
 __ZN3std2io5stdio6_print17h5e38a8ff46cfb3e1E($_4); //@line 548 "main.rs"
 $4 = (__ZN5rustv3r3d5c_str17h24b9d36d97df309cE(14907,31)|0); //@line 549 "main.rs"
 __ZN5rustv12android_logw17h6a03acd0e4e3677aE($4); //@line 549 "main.rs"
 __ZN5rustv7shaders14create_shaders17h23dc65b275091cf2E(); //@line 550 "main.rs"
 __ZN5rustv7texture15create_textures17h285e46c68ac60e11E(); //@line 551 "main.rs"
 HEAP8[39450] = 1; //@line 552 "main.rs"
 HEAP32[$_19>>2] = 16; //@line 553 "main.rs"
 $5 = ((($_19)) + 4|0); //@line 553 "main.rs"
 HEAP32[$5>>2] = 16; //@line 553 "main.rs"
 $6 = HEAP32[$_19>>2]|0; //@line 553 "main.rs"
 $7 = ((($_19)) + 4|0); //@line 553 "main.rs"
 $8 = HEAP32[$7>>2]|0; //@line 553 "main.rs"
 __ZN5rustv4Mesh9new_torus17ha43dd615780c0141E($_18,$6,$8); //@line 553 "main.rs"
 ;HEAP32[4260>>2]=HEAP32[$_18>>2]|0;HEAP32[4260+4>>2]=HEAP32[$_18+4>>2]|0;HEAP32[4260+8>>2]=HEAP32[$_18+8>>2]|0;HEAP32[4260+12>>2]=HEAP32[$_18+12>>2]|0;HEAP32[4260+16>>2]=HEAP32[$_18+16>>2]|0; //@line 553 "main.rs"
 STACKTOP = sp;return; //@line 557 "main.rs"
}
function __ZN5rustv4Mesh18render_mesh_shader17hdff5a9c34bedacbeE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$sreg$field = 0, $$sreg$field4 = 0, $$sreg$index3 = 0, $$sreg1$field = 0, $$sreg1$field7 = 0, $$sreg1$index6 = 0, $$sreg2$field = 0, $$sreg2$field10 = 0, $$sreg2$index9 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_20 = 0, $_27 = 0, $_28 = 0, $_318 = 0;
 var $_393 = 0, $_472 = 0, $_485 = 0, $_528 = 0, $_579 = 0, $_622 = 0, $_673 = 0, $_716 = 0, $_770 = 0, $_775 = 0, $_780 = 0, $_785 = 0, $_790 = 0, $_795 = 0, $_804 = 0, $_863 = 0, $_870 = 0, $_871 = 0, $__arg0 = 0, $__arg080 = 0;
 var $__arg1 = 0, $baseVertex = 0, $clientState = 0, $err = 0, $err11 = 0, $err16 = 0, $err21 = 0, $err27 = 0, $err36 = 0, $err45 = 0, $err50 = 0, $err55 = 0, $err6 = 0, $err60 = 0, $err65 = 0, $err70 = 0, $err75 = 0, $matP = 0, $modei = 0, $prg = 0;
 var $rot_trans = 0, $self = 0, $shu = 0, $shu26 = 0, $tex0i = 0, $tex1i = 0, $vsa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(432|0);
 $6 = sp + 32|0;
 $7 = sp + 16|0;
 $8 = sp;
 $_870 = sp + 408|0;
 $_863 = sp + 384|0;
 $_804 = sp + 360|0;
 $_795 = sp + 344|0;
 $_790 = sp + 328|0;
 $_785 = sp + 312|0;
 $_780 = sp + 296|0;
 $_775 = sp + 280|0;
 $_770 = sp + 264|0;
 $_472 = sp + 192|0;
 $clientState = sp + 140|0;
 $_28 = sp + 112|0;
 $_27 = sp + 96|0;
 $_20 = sp + 72|0;
 $prg = sp + 68|0;
 $modei = sp + 52|0;
 $self = $0;
 $matP = $1;
 $rot_trans = $2;
 HEAP32[$modei>>2] = $3;
 $tex0i = $4;
 $tex1i = $5;
 $9 = HEAP32[$modei>>2]|0; //@line 300 "main.rs"
 $10 = ($9>>>0)<(11); //@line 300 "main.rs"
 $11 = $10; //@line 300 "main.rs"
 if (!($11)) {
  __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(4432,$9,11); //@line 300 "main.rs"
  // unreachable; //@line 300 "main.rs"
 }
 $12 = (5320 + (($9*80)|0)|0); //@line 300 "main.rs"
 $shu = $12; //@line 300 "main.rs"
 $13 = HEAP32[$modei>>2]|0; //@line 301 "main.rs"
 $14 = ($13>>>0)<(11); //@line 301 "main.rs"
 $15 = $14; //@line 301 "main.rs"
 if (!($15)) {
  __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(4448,$13,11); //@line 301 "main.rs"
  // unreachable; //@line 301 "main.rs"
 }
 $16 = (5276 + ($13<<2)|0); //@line 301 "main.rs"
 $17 = HEAP32[$16>>2]|0; //@line 301 "main.rs"
 HEAP32[$prg>>2] = $17; //@line 301 "main.rs"
 $18 = HEAP32[$prg>>2]|0; //@line 302 "main.rs"
 $19 = ($18|0)==(0); //@line 302 "main.rs"
 if ($19) {
  HEAP32[$_28>>2] = $modei; //@line 303 "main.rs"
  $20 = ((($_28)) + 4|0); //@line 303 "main.rs"
  HEAP32[$20>>2] = $prg; //@line 303 "main.rs"
  $21 = HEAP32[$_28>>2]|0; //@line 303 "main.rs"
  $__arg0 = $21; //@line 303 "main.rs"
  $22 = ((($_28)) + 4|0); //@line 303 "main.rs"
  $23 = HEAP32[$22>>2]|0; //@line 303 "main.rs"
  $__arg1 = $23; //@line 303 "main.rs"
  $24 = $__arg0; //@line 303 "main.rs"
  __ZN4core3fmt10ArgumentV13new17hba5d1e436503efc2E($8,$24,289); //@line 303 "main.rs"
  $$sreg$field = HEAP32[$8>>2]|0; //@line 303 "main.rs"
  $$sreg$index3 = ((($8)) + 4|0); //@line 303 "main.rs"
  $$sreg$field4 = HEAP32[$$sreg$index3>>2]|0; //@line 303 "main.rs"
  $25 = $__arg1; //@line 303 "main.rs"
  __ZN4core3fmt10ArgumentV13new17h0963b74890d3a7c4E($7,$25,290); //@line 303 "main.rs"
  $$sreg1$field = HEAP32[$7>>2]|0; //@line 303 "main.rs"
  $$sreg1$index6 = ((($7)) + 4|0); //@line 303 "main.rs"
  $$sreg1$field7 = HEAP32[$$sreg1$index6>>2]|0; //@line 303 "main.rs"
  HEAP32[$_27>>2] = $$sreg$field; //@line 303 "main.rs"
  $26 = ((($_27)) + 4|0); //@line 303 "main.rs"
  HEAP32[$26>>2] = $$sreg$field4; //@line 303 "main.rs"
  $27 = ((($_27)) + 8|0); //@line 303 "main.rs"
  HEAP32[$27>>2] = $$sreg1$field; //@line 303 "main.rs"
  $28 = ((($27)) + 4|0); //@line 303 "main.rs"
  HEAP32[$28>>2] = $$sreg1$field7; //@line 303 "main.rs"
  $29 = HEAP32[1819]|0; //@line 303 "main.rs"
  __ZN4core3fmt9Arguments16new_v1_formatted17hd7921c86529aa3b1E($_20,4352,3,$_27,2,$29,2); //@line 303 "main.rs"
  __ZN3std2io5stdio6_print17h5e38a8ff46cfb3e1E($_20); //@line 303 "main.rs"
  STACKTOP = sp;return; //@line 384 "main.rs"
 }
 $30 = HEAP32[$prg>>2]|0; //@line 306 "main.rs"
 _glUseProgram(($30|0)); //@line 306 "main.rs"
 $31 = (_glGetError()|0); //@line 306 "main.rs"
 $err = $31; //@line 306 "main.rs"
 $32 = $shu; //@line 307 "main.rs"
 $33 = HEAP32[$32>>2]|0; //@line 307 "main.rs"
 $34 = HEAP8[39192]|0; //@line 307 "main.rs"
 $35 = $matP; //@line 307 "main.rs"
 _glUniformMatrix4fv(($33|0),1,($34|0),($35|0)); //@line 307 "main.rs"
 $36 = (_glGetError()|0); //@line 307 "main.rs"
 $err6 = $36; //@line 307 "main.rs"
 $37 = $shu; //@line 308 "main.rs"
 $38 = ((($37)) + 4|0); //@line 308 "main.rs"
 $39 = HEAP32[$38>>2]|0; //@line 308 "main.rs"
 $40 = HEAP8[39192]|0; //@line 308 "main.rs"
 $41 = $rot_trans; //@line 308 "main.rs"
 _glUniformMatrix4fv(($39|0),1,($40|0),($41|0)); //@line 308 "main.rs"
 $42 = (_glGetError()|0); //@line 308 "main.rs"
 $err11 = $42; //@line 308 "main.rs"
 $43 = HEAP32[773]|0; //@line 310 "main.rs"
 $44 = HEAP32[774]|0; //@line 310 "main.rs"
 $45 = HEAP32[775]|0; //@line 310 "main.rs"
 HEAP32[$clientState>>2] = $43; //@line 310 "main.rs"
 $46 = ((($clientState)) + 4|0); //@line 310 "main.rs"
 HEAP32[$46>>2] = $44; //@line 310 "main.rs"
 $47 = ((($clientState)) + 8|0); //@line 310 "main.rs"
 HEAP32[$47>>2] = $45; //@line 310 "main.rs"
 $48 = HEAP32[760]|0; //@line 312 "main.rs"
 $49 = $self; //@line 312 "main.rs"
 $50 = ((($49)) + 4|0); //@line 312 "main.rs"
 $51 = HEAP32[$50>>2]|0; //@line 312 "main.rs"
 _glBindBuffer(($48|0),($51|0)); //@line 312 "main.rs"
 $52 = (_glGetError()|0); //@line 312 "main.rs"
 $err16 = $52; //@line 312 "main.rs"
 $53 = HEAP32[761]|0; //@line 313 "main.rs"
 $54 = $self; //@line 313 "main.rs"
 $55 = ((($54)) + 8|0); //@line 313 "main.rs"
 $56 = HEAP32[$55>>2]|0; //@line 313 "main.rs"
 _glBindBuffer(($53|0),($56|0)); //@line 313 "main.rs"
 $57 = (_glGetError()|0); //@line 313 "main.rs"
 $err21 = $57; //@line 313 "main.rs"
 $58 = HEAP32[$modei>>2]|0; //@line 315 "main.rs"
 $59 = ($58>>>0)<(11); //@line 315 "main.rs"
 $60 = $59; //@line 315 "main.rs"
 if (!($60)) {
  __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(4464,$58,11); //@line 315 "main.rs"
  // unreachable; //@line 315 "main.rs"
 }
 $61 = (6200 + (($58*36)|0)|0); //@line 315 "main.rs"
 $vsa = $61; //@line 315 "main.rs"
 $62 = HEAP32[$modei>>2]|0; //@line 316 "main.rs"
 $63 = ($62>>>0)<(11); //@line 316 "main.rs"
 $64 = $63; //@line 316 "main.rs"
 if (!($64)) {
  __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(4480,$62,11); //@line 316 "main.rs"
  // unreachable; //@line 316 "main.rs"
 }
 $65 = (5320 + (($62*80)|0)|0); //@line 316 "main.rs"
 $shu26 = $65; //@line 316 "main.rs"
 $baseVertex = 0; //@line 318 "main.rs"
 $66 = $vsa; //@line 319 "main.rs"
 $67 = HEAP32[$66>>2]|0; //@line 319 "main.rs"
 $68 = HEAP32[$prg>>2]|0; //@line 319 "main.rs"
 $69 = (__ZN5rustv3r3d5c_str17h24b9d36d97df309cE(14753,6)|0); //@line 319 "main.rs"
 $70 = (_glGetAttribLocation(($68|0),($69|0))|0); //@line 319 "main.rs"
 $71 = ($67|0)==($70|0); //@line 319 "main.rs"
 $72 = $71 ^ 1; //@line 319 "main.rs"
 if ($72) {
  __ZN3std9panicking11begin_panic17h1a4c9be19e7ea39bE(14759,74,4376); //@line 319 "main.rs"
  // unreachable; //@line 319 "main.rs"
 }
 $73 = $vsa; //@line 320 "main.rs"
 $74 = HEAP32[$73>>2]|0; //@line 320 "main.rs"
 $75 = ($74|0)>=(0); //@line 320 "main.rs"
 if ($75) {
  $_318 = 0; //@line 324 "main.rs"
  $76 = $_318; //@line 324 "main.rs"
  $77 = (__ZN82__LT_rustv__shaders__VertexAttrIndex_u20_as_u20_core__convert__Into_LT_u32_GT__GT_4into17hdb6bfec19c836631E($76)|0); //@line 324 "main.rs"
  _glEnableVertexAttribArray(($77|0)); //@line 324 "main.rs"
  $78 = (_glGetError()|0); //@line 321 "main.rs"
  $err27 = $78; //@line 321 "main.rs"
  $_393 = 0; //@line 325 "main.rs"
  $79 = $_393; //@line 325 "main.rs"
  $80 = (__ZN82__LT_rustv__shaders__VertexAttrIndex_u20_as_u20_core__convert__Into_LT_u32_GT__GT_4into17hdb6bfec19c836631E($79)|0); //@line 325 "main.rs"
  $81 = HEAP32[770]|0; //@line 325 "main.rs"
  $82 = HEAP8[39192]|0; //@line 325 "main.rs"
  $83 = $self; //@line 325 "main.rs"
  $84 = HEAP32[$83>>2]|0; //@line 325 "main.rs"
  $85 = $baseVertex; //@line 325 "main.rs"
  $86 = (__ZN5rustv3r3d11as_void_ptr17hedc27eafdc44b9c1E($85)|0); //@line 325 "main.rs"
  _glVertexAttribPointer(($80|0),3,($81|0),($82|0),($84|0),($86|0)); //@line 325 "main.rs"
  $87 = (_glGetError()|0); //@line 321 "main.rs"
  $err36 = $87; //@line 321 "main.rs"
 } else {
  __ZN4core3fmt9Arguments6new_v117h1cedc7e123bae470E($_472,4392,1,38620,0); //@line 329 "main.rs"
  __ZN3std2io5stdio6_print17h5e38a8ff46cfb3e1E($_472); //@line 329 "main.rs"
 }
 $88 = $vsa; //@line 331 "main.rs"
 $89 = ((($88)) + 4|0); //@line 331 "main.rs"
 $90 = HEAP32[$89>>2]|0; //@line 331 "main.rs"
 $91 = ($90|0)>=(0); //@line 331 "main.rs"
 if ($91) {
  $_485 = 1; //@line 333 "main.rs"
  $92 = $_485; //@line 333 "main.rs"
  $93 = (__ZN82__LT_rustv__shaders__VertexAttrIndex_u20_as_u20_core__convert__Into_LT_u32_GT__GT_4into17hdb6bfec19c836631E($92)|0); //@line 333 "main.rs"
  _glEnableVertexAttribArray(($93|0)); //@line 333 "main.rs"
  $94 = (_glGetError()|0); //@line 332 "main.rs"
  $err45 = $94; //@line 332 "main.rs"
  $_528 = 1; //@line 334 "main.rs"
  $95 = $_528; //@line 334 "main.rs"
  $96 = (__ZN82__LT_rustv__shaders__VertexAttrIndex_u20_as_u20_core__convert__Into_LT_u32_GT__GT_4into17hdb6bfec19c836631E($95)|0); //@line 334 "main.rs"
  $97 = HEAP32[770]|0; //@line 334 "main.rs"
  $98 = HEAP8[39192]|0; //@line 334 "main.rs"
  $99 = $self; //@line 334 "main.rs"
  $100 = HEAP32[$99>>2]|0; //@line 334 "main.rs"
  $101 = $baseVertex; //@line 334 "main.rs"
  $102 = ((($101)) + 12|0); //@line 334 "main.rs"
  $103 = (__ZN5rustv3r3d11as_void_ptr17h38a843d4402f9d65E($102)|0); //@line 334 "main.rs"
  _glVertexAttribPointer(($96|0),4,($97|0),($98|0),($100|0),($103|0)); //@line 334 "main.rs"
  $104 = (_glGetError()|0); //@line 332 "main.rs"
  $err50 = $104; //@line 332 "main.rs"
 }
 $105 = $vsa; //@line 337 "main.rs"
 $106 = ((($105)) + 12|0); //@line 337 "main.rs"
 $107 = HEAP32[$106>>2]|0; //@line 337 "main.rs"
 $108 = ($107|0)>=(0); //@line 337 "main.rs"
 if ($108) {
  $_579 = 3; //@line 339 "main.rs"
  $109 = $_579; //@line 339 "main.rs"
  $110 = (__ZN82__LT_rustv__shaders__VertexAttrIndex_u20_as_u20_core__convert__Into_LT_u32_GT__GT_4into17hdb6bfec19c836631E($109)|0); //@line 339 "main.rs"
  _glEnableVertexAttribArray(($110|0)); //@line 339 "main.rs"
  $111 = (_glGetError()|0); //@line 338 "main.rs"
  $err55 = $111; //@line 338 "main.rs"
  $_622 = 3; //@line 340 "main.rs"
  $112 = $_622; //@line 340 "main.rs"
  $113 = (__ZN82__LT_rustv__shaders__VertexAttrIndex_u20_as_u20_core__convert__Into_LT_u32_GT__GT_4into17hdb6bfec19c836631E($112)|0); //@line 340 "main.rs"
  $114 = HEAP32[770]|0; //@line 340 "main.rs"
  $115 = HEAP8[39192]|0; //@line 340 "main.rs"
  $116 = $self; //@line 340 "main.rs"
  $117 = HEAP32[$116>>2]|0; //@line 340 "main.rs"
  $118 = $baseVertex; //@line 340 "main.rs"
  $119 = ((($118)) + 40|0); //@line 340 "main.rs"
  $120 = (__ZN5rustv3r3d11as_void_ptr17h0b0ecd425b81d508E($119)|0); //@line 340 "main.rs"
  _glVertexAttribPointer(($113|0),2,($114|0),($115|0),($117|0),($120|0)); //@line 340 "main.rs"
  $121 = (_glGetError()|0); //@line 338 "main.rs"
  $err60 = $121; //@line 338 "main.rs"
 }
 $122 = $vsa; //@line 343 "main.rs"
 $123 = ((($122)) + 8|0); //@line 343 "main.rs"
 $124 = HEAP32[$123>>2]|0; //@line 343 "main.rs"
 $125 = ($124|0)>=(0); //@line 343 "main.rs"
 if ($125) {
  $_673 = 2; //@line 345 "main.rs"
  $126 = $_673; //@line 345 "main.rs"
  $127 = (__ZN82__LT_rustv__shaders__VertexAttrIndex_u20_as_u20_core__convert__Into_LT_u32_GT__GT_4into17hdb6bfec19c836631E($126)|0); //@line 345 "main.rs"
  _glEnableVertexAttribArray(($127|0)); //@line 345 "main.rs"
  $128 = (_glGetError()|0); //@line 344 "main.rs"
  $err65 = $128; //@line 344 "main.rs"
  $_716 = 2; //@line 346 "main.rs"
  $129 = $_716; //@line 346 "main.rs"
  $130 = (__ZN82__LT_rustv__shaders__VertexAttrIndex_u20_as_u20_core__convert__Into_LT_u32_GT__GT_4into17hdb6bfec19c836631E($129)|0); //@line 346 "main.rs"
  $131 = HEAP32[770]|0; //@line 346 "main.rs"
  $132 = HEAP8[39192]|0; //@line 346 "main.rs"
  $133 = $self; //@line 346 "main.rs"
  $134 = HEAP32[$133>>2]|0; //@line 346 "main.rs"
  $135 = $baseVertex; //@line 346 "main.rs"
  $136 = ((($135)) + 28|0); //@line 346 "main.rs"
  $137 = (__ZN5rustv3r3d11as_void_ptr17hedc27eafdc44b9c1E($136)|0); //@line 346 "main.rs"
  _glVertexAttribPointer(($130|0),3,($131|0),($132|0),($134|0),($137|0)); //@line 346 "main.rs"
  $138 = (_glGetError()|0); //@line 344 "main.rs"
  $err70 = $138; //@line 344 "main.rs"
 }
 $139 = $shu26; //@line 350 "main.rs"
 $140 = ((($139)) + 20|0); //@line 350 "main.rs"
 $141 = HEAP32[$140>>2]|0; //@line 350 "main.rs"
 __ZN5rustv18safe_set_uniform1i17ha2bd498c0a55e21aE($141,0); //@line 350 "main.rs"
 $142 = $shu26; //@line 351 "main.rs"
 $143 = ((($142)) + 24|0); //@line 351 "main.rs"
 $144 = HEAP32[$143>>2]|0; //@line 351 "main.rs"
 __ZN5rustv18safe_set_uniform1i17ha2bd498c0a55e21aE($144,1); //@line 351 "main.rs"
 $145 = $shu26; //@line 352 "main.rs"
 $146 = ((($145)) + 52|0); //@line 352 "main.rs"
 $147 = HEAP32[$146>>2]|0; //@line 352 "main.rs"
 __ZN5rustv3r3d6vector4Vec417h52c31fcc1e26f7b7E($_770,0.032000001519918442,0.7070000171661377,0.7070000171661377,0.0); //@line 352 "main.rs"
 __ZN5rustv16safe_set_uniform17h6fbb1ad01bf04af4E($147,$_770); //@line 352 "main.rs"
 $148 = $shu26; //@line 353 "main.rs"
 $149 = ((($148)) + 48|0); //@line 353 "main.rs"
 $150 = HEAP32[$149>>2]|0; //@line 353 "main.rs"
 __ZN5rustv3r3d6vector4Vec417h52c31fcc1e26f7b7E($_775,1.0,0.75,0.5,0.0); //@line 353 "main.rs"
 __ZN5rustv16safe_set_uniform17h6fbb1ad01bf04af4E($150,$_775); //@line 353 "main.rs"
 $151 = $shu26; //@line 354 "main.rs"
 $152 = ((($151)) + 32|0); //@line 354 "main.rs"
 $153 = HEAP32[$152>>2]|0; //@line 354 "main.rs"
 __ZN5rustv3r3d6vector4Vec417h52c31fcc1e26f7b7E($_780,0.25,0.25,0.25,1.0); //@line 354 "main.rs"
 __ZN5rustv16safe_set_uniform17h6fbb1ad01bf04af4E($153,$_780); //@line 354 "main.rs"
 $154 = $shu26; //@line 355 "main.rs"
 $155 = ((($154)) + 36|0); //@line 355 "main.rs"
 $156 = HEAP32[$155>>2]|0; //@line 355 "main.rs"
 __ZN5rustv3r3d6vector4Vec417h52c31fcc1e26f7b7E($_785,0.10000000149011612,0.0,0.25,0.0); //@line 355 "main.rs"
 __ZN5rustv16safe_set_uniform17h6fbb1ad01bf04af4E($156,$_785); //@line 355 "main.rs"
 $157 = $shu26; //@line 356 "main.rs"
 $158 = ((($157)) + 40|0); //@line 356 "main.rs"
 $159 = HEAP32[$158>>2]|0; //@line 356 "main.rs"
 __ZN5rustv3r3d6vector4Vec417h52c31fcc1e26f7b7E($_790,0.30000001192092896,0.25,0.5,0.0); //@line 356 "main.rs"
 __ZN5rustv16safe_set_uniform17h6fbb1ad01bf04af4E($159,$_790); //@line 356 "main.rs"
 $160 = $shu26; //@line 357 "main.rs"
 $161 = ((($160)) + 44|0); //@line 357 "main.rs"
 $162 = HEAP32[$161>>2]|0; //@line 357 "main.rs"
 __ZN5rustv3r3d6vector4Vec417h52c31fcc1e26f7b7E($_795,0.25,0.0,0.10000000149011612,0.0); //@line 357 "main.rs"
 __ZN5rustv16safe_set_uniform17h6fbb1ad01bf04af4E($162,$_795); //@line 357 "main.rs"
 $163 = $shu26; //@line 358 "main.rs"
 $164 = ((($163)) + 64|0); //@line 358 "main.rs"
 $165 = HEAP32[$164>>2]|0; //@line 358 "main.rs"
 __ZN5rustv16safe_set_uniform17h6fbb1ad01bf04af4E($165,4400); //@line 358 "main.rs"
 $166 = $shu26; //@line 359 "main.rs"
 $167 = ((($166)) + 68|0); //@line 359 "main.rs"
 $168 = HEAP32[$167>>2]|0; //@line 359 "main.rs"
 __ZN5rustv3r3d6vector4Vec417h52c31fcc1e26f7b7E($_804,0.5,0.25,0.0,0.0); //@line 359 "main.rs"
 __ZN5rustv16safe_set_uniform17h6fbb1ad01bf04af4E($168,$_804); //@line 359 "main.rs"
 $169 = $tex0i; //@line 364 "main.rs"
 $170 = ($169>>>0)<(5); //@line 364 "main.rs"
 $171 = $170; //@line 364 "main.rs"
 if (!($171)) {
  __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(4496,$169,5); //@line 364 "main.rs"
  // unreachable; //@line 364 "main.rs"
 }
 $172 = (38316 + ($169<<2)|0); //@line 364 "main.rs"
 $173 = HEAP32[$172>>2]|0; //@line 364 "main.rs"
 __ZN5rustv3r3d4draw11set_texture17hb489c8f1c147abe4E(0,$173); //@line 364 "main.rs"
 $174 = $tex1i; //@line 365 "main.rs"
 $175 = ($174>>>0)<(5); //@line 365 "main.rs"
 $176 = $175; //@line 365 "main.rs"
 if (!($176)) {
  __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(4512,$174,5); //@line 365 "main.rs"
  // unreachable; //@line 365 "main.rs"
 }
 $177 = (38316 + ($174<<2)|0); //@line 365 "main.rs"
 $178 = HEAP32[$177>>2]|0; //@line 365 "main.rs"
 __ZN5rustv3r3d4draw11set_texture17hb489c8f1c147abe4E(1,$178); //@line 365 "main.rs"
 $179 = $vsa; //@line 375 "main.rs"
 $180 = HEAP32[$179>>2]|0; //@line 375 "main.rs"
 $181 = ($180|0)>=(0); //@line 375 "main.rs"
 if ($181) {
  $182 = HEAP32[772]|0; //@line 377 "main.rs"
  $183 = $self; //@line 377 "main.rs"
  $184 = ((($183)) + 16|0); //@line 377 "main.rs"
  $185 = HEAP32[$184>>2]|0; //@line 377 "main.rs"
  $186 = HEAP32[769]|0; //@line 377 "main.rs"
  _glDrawElements(($182|0),($185|0),($186|0),(0|0)); //@line 377 "main.rs"
  $187 = (_glGetError()|0); //@line 376 "main.rs"
  $err75 = $187; //@line 376 "main.rs"
  STACKTOP = sp;return; //@line 384 "main.rs"
 } else {
  $188 = $vsa; //@line 381 "main.rs"
  $_871 = $188; //@line 381 "main.rs"
  $189 = $_871; //@line 381 "main.rs"
  $__arg080 = $189; //@line 381 "main.rs"
  $190 = $__arg080; //@line 381 "main.rs"
  __ZN4core3fmt10ArgumentV13new17h18c233152faad36eE($6,$190,288); //@line 381 "main.rs"
  $$sreg2$field = HEAP32[$6>>2]|0; //@line 381 "main.rs"
  $$sreg2$index9 = ((($6)) + 4|0); //@line 381 "main.rs"
  $$sreg2$field10 = HEAP32[$$sreg2$index9>>2]|0; //@line 381 "main.rs"
  HEAP32[$_870>>2] = $$sreg2$field; //@line 381 "main.rs"
  $191 = ((($_870)) + 4|0); //@line 381 "main.rs"
  HEAP32[$191>>2] = $$sreg2$field10; //@line 381 "main.rs"
  $192 = HEAP32[1683]|0; //@line 381 "main.rs"
  __ZN4core3fmt9Arguments16new_v1_formatted17hd7921c86529aa3b1E($_863,4416,2,$_870,1,$192,1); //@line 381 "main.rs"
  __ZN3std2io5stdio6_print17h5e38a8ff46cfb3e1E($_863); //@line 381 "main.rs"
  STACKTOP = sp;return; //@line 384 "main.rs"
 }
}
function __ZN5rustv18safe_set_uniform1i17ha2bd498c0a55e21aE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $loc = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $loc = $0;
 $value = $1;
 STACKTOP = sp;return; //@line 264 "main.rs"
}
function __ZN5rustv16safe_set_uniform17h6fbb1ad01bf04af4E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $loc = 0, $pvalue = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $loc = $0;
 $pvalue = $1;
 $2 = $loc; //@line 268 "main.rs"
 $3 = $pvalue; //@line 268 "main.rs"
 _glUniform4fv(($2|0),1,($3|0)); //@line 268 "main.rs"
 STACKTOP = sp;return; //@line 270 "main.rs"
}
function __ZN5rustv4Mesh9new_torus17ha43dd615780c0141E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$arith = 0, $$arith10 = 0, $$arith18 = 0, $$arith2 = 0, $$arith6 = 0, $$denom = 0, $$denom12 = 0, $$div = 0, $$div13 = 0, $$iszero = 0, $$iszero11 = 0, $$overflow = 0, $$overflow15 = 0, $$overflow19 = 0, $$overflow3 = 0, $$overflow7 = 0, $$same = 0, $$same14 = 0, $10 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_18 = 0, $_30 = 0, $indices = 0, $num = 0, $num_indices = 0, $num_vertices = 0, $personalityslot = 0, $strip_indices = 0, $vertices = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $personalityslot = sp + 64|0;
 $_30 = sp + 56|0;
 $vertices = sp + 44|0;
 $_18 = sp + 32|0;
 $indices = sp + 16|0;
 $strip_indices = sp + 8|0;
 $num = sp;
 HEAP32[$num>>2] = $1;
 $3 = ((($num)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$num>>2]|0; //@line 188 "main.rs"
 $$arith2 = (($4) + 1)|0; //@line 188 "main.rs"
 $$overflow3 = ($4>>>0)>(4294967294); //@line 188 "main.rs"
 $5 = $$overflow3; //@line 188 "main.rs"
 if ($5) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(4536); //@line 188 "main.rs"
  // unreachable; //@line 188 "main.rs"
 }
 $$arith18 = $$arith2<<1; //@line 188 "main.rs"
 $$overflow19 = ($$arith2>>>0)>(2147483647); //@line 188 "main.rs"
 $6 = $$overflow19; //@line 188 "main.rs"
 if ($6) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(4560); //@line 188 "main.rs"
  // unreachable; //@line 188 "main.rs"
 }
 $$arith = (($$arith18) + 2)|0; //@line 188 "main.rs"
 $$overflow = ($$arith18>>>0)>(4294967293); //@line 188 "main.rs"
 $7 = $$overflow; //@line 188 "main.rs"
 if ($7) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(4536); //@line 188 "main.rs"
  // unreachable; //@line 188 "main.rs"
 }
 HEAP32[$strip_indices>>2] = $$arith; //@line 188 "main.rs"
 $8 = ((($num)) + 4|0); //@line 189 "main.rs"
 $9 = HEAP32[$8>>2]|0; //@line 189 "main.rs"
 $10 = HEAP32[$strip_indices>>2]|0; //@line 189 "main.rs"
 $$arith10 = Math_imul($9, $10)|0; //@line 189 "main.rs"
 $$iszero11 = ($10|0)==(0); //@line 189 "main.rs"
 $$denom12 = $$iszero11 ? 1 : $10; //@line 189 "main.rs"
 $$div13 = (($$arith10>>>0) / ($$denom12>>>0))&-1; //@line 189 "main.rs"
 $$same14 = ($$div13|0)!=($9|0); //@line 189 "main.rs"
 $$overflow15 = $$iszero11 ? 0 : $$same14; //@line 189 "main.rs"
 $11 = $$overflow15; //@line 189 "main.rs"
 if ($11) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(4584); //@line 189 "main.rs"
  // unreachable; //@line 189 "main.rs"
 }
 $num_indices = $$arith10; //@line 189 "main.rs"
 $12 = $num_indices; //@line 190 "main.rs"
 HEAP32[$_18>>2] = $strip_indices; //@line 191 "main.rs"
 $13 = ((($_18)) + 4|0); //@line 191 "main.rs"
 HEAP32[$13>>2] = $num; //@line 191 "main.rs"
 __ZN5rustv3r3d11vec_from_fn17heb91aee15b727de8E($indices,$12,$_18); //@line 190 "main.rs"
 $14 = HEAP32[$num>>2]|0; //@line 205 "main.rs"
 $15 = ((($num)) + 4|0); //@line 205 "main.rs"
 $16 = HEAP32[$15>>2]|0; //@line 205 "main.rs"
 $$arith6 = Math_imul($14, $16)|0; //@line 205 "main.rs"
 $$iszero = ($16|0)==(0); //@line 205 "main.rs"
 $$denom = $$iszero ? 1 : $16; //@line 205 "main.rs"
 $$div = (($$arith6>>>0) / ($$denom>>>0))&-1; //@line 205 "main.rs"
 $$same = ($$div|0)!=($14|0); //@line 205 "main.rs"
 $$overflow7 = $$iszero ? 0 : $$same; //@line 205 "main.rs"
 $17 = $$overflow7; //@line 205 "main.rs"
 do {
  if ($17) {
   __THREW__ = 0;
   invoke_vi(297,(4608|0)); //@line 205 "main.rs"
   $44 = __THREW__; __THREW__ = 0;
  } else {
   $num_vertices = $$arith6; //@line 205 "main.rs"
   $18 = $num_vertices; //@line 206 "main.rs"
   HEAP32[$_30>>2] = $num; //@line 206 "main.rs"
   __THREW__ = 0;
   invoke_viii(291,($vertices|0),($18|0),($_30|0)); //@line 206 "main.rs"
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if (!($20)) {
    $24 = $num_vertices; //@line 210 "main.rs"
    $25 = $num_indices; //@line 211 "main.rs"
    __THREW__ = 0;
    $26 = (invoke_iii(292,($vertices|0),0)|0); //@line 212 "main.rs"
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if (!($28)) {
     __THREW__ = 0;
     $29 = (invoke_ii(293,($26|0))|0); //@line 212 "main.rs"
     $30 = __THREW__; __THREW__ = 0;
     $31 = $30&1;
     if (!($31)) {
      __THREW__ = 0;
      $32 = (invoke_ii(294,($vertices|0))|0); //@line 213 "main.rs"
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      if (!($34)) {
       __THREW__ = 0;
       $35 = (invoke_ii(295,($indices|0))|0); //@line 214 "main.rs"
       $36 = __THREW__; __THREW__ = 0;
       $37 = $36&1;
       if (!($37)) {
        HEAP32[$0>>2] = $29; //@line 209 "main.rs"
        $38 = ((($0)) + 4|0); //@line 209 "main.rs"
        HEAP32[$38>>2] = $32; //@line 209 "main.rs"
        $39 = ((($0)) + 8|0); //@line 209 "main.rs"
        HEAP32[$39>>2] = $35; //@line 209 "main.rs"
        $40 = ((($0)) + 12|0); //@line 209 "main.rs"
        HEAP32[$40>>2] = $24; //@line 209 "main.rs"
        $41 = ((($0)) + 16|0); //@line 209 "main.rs"
        HEAP32[$41>>2] = $25; //@line 209 "main.rs"
        __THREW__ = 0;
        invoke_vi(296,($vertices|0)); //@line 218 "main.rs"
        $42 = __THREW__; __THREW__ = 0;
        $43 = $42&1;
        if ($43) {
         break;
        }
        __ZN4core3ptr13drop_in_place17h567c71dce2ffe868E($indices); //@line 218 "main.rs"
        STACKTOP = sp;return; //@line 218 "main.rs"
       }
      }
     }
    }
    $48 = ___cxa_find_matching_catch_2()|0;
    $49 = tempRet0;
    HEAP32[$personalityslot>>2] = $48;
    $50 = ((($personalityslot)) + 4|0);
    HEAP32[$50>>2] = $49;
    __ZN4core3ptr13drop_in_place17h033be6a4eca0dd18E($vertices); //@line 218 "main.rs"
    __ZN4core3ptr13drop_in_place17h567c71dce2ffe868E($indices); //@line 218 "main.rs"
    $21 = HEAP32[$personalityslot>>2]|0; //@line 185 "main.rs"
    $22 = ((($personalityslot)) + 4|0); //@line 185 "main.rs"
    $23 = HEAP32[$22>>2]|0; //@line 185 "main.rs"
    ___resumeException($21|0);
    // unreachable;
   }
  }
 } while(0);
 $45 = ___cxa_find_matching_catch_2()|0;
 $46 = tempRet0;
 HEAP32[$personalityslot>>2] = $45;
 $47 = ((($personalityslot)) + 4|0);
 HEAP32[$47>>2] = $46;
 __ZN4core3ptr13drop_in_place17h567c71dce2ffe868E($indices); //@line 218 "main.rs"
 $21 = HEAP32[$personalityslot>>2]|0; //@line 185 "main.rs"
 $22 = ((($personalityslot)) + 4|0); //@line 185 "main.rs"
 $23 = HEAP32[$22>>2]|0; //@line 185 "main.rs"
 ___resumeException($21|0);
 // unreachable;
}
function __ZN5rustv20create_vertex_buffer17h043aadcdf4a4b65bE($0) {
 $0 = $0|0;
 var $$arith = 0, $$denom = 0, $$div = 0, $$iszero = 0, $$overflow = 0, $$same = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $data = $0;
 $1 = $data; //@line 177 "main.rs"
 $2 = (__ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_3len17h82e1661a72e8651bE($1)|0); //@line 177 "main.rs"
 $3 = (__ZN4core3mem7size_of17hd7a6698aeb9187d3E()|0); //@line 177 "main.rs"
 $$arith = Math_imul($2, $3)|0; //@line 177 "main.rs"
 $$iszero = ($3|0)==(0); //@line 177 "main.rs"
 $$denom = $$iszero ? 1 : $3; //@line 177 "main.rs"
 $$div = (($$arith|0) / ($$denom|0))&-1; //@line 177 "main.rs"
 $$same = ($$div|0)!=($2|0); //@line 177 "main.rs"
 $$overflow = $$iszero ? 0 : $$same; //@line 177 "main.rs"
 $4 = $$overflow; //@line 177 "main.rs"
 if ($4) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(4656); //@line 177 "main.rs"
  // unreachable; //@line 177 "main.rs"
 } else {
  $5 = $data; //@line 177 "main.rs"
  $6 = (__ZN81__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__index__Index_LT_usize_GT__GT_5index17h51b30c46da0176a3E($5,0)|0); //@line 177 "main.rs"
  $7 = (__ZN5rustv3r3d11as_void_ptr17h36ce78c479599264E($6)|0); //@line 177 "main.rs"
  $8 = HEAP32[760]|0; //@line 177 "main.rs"
  $9 = (__ZN5rustv13create_buffer17hc7d8674e6872e9acE($$arith,$7,$8)|0); //@line 177 "main.rs"
  STACKTOP = sp;return ($9|0); //@line 178 "main.rs"
 }
 return (0)|0;
}
function __ZN5rustv19create_index_buffer17he6189d4854b6bf52E($0) {
 $0 = $0|0;
 var $$arith = 0, $$denom = 0, $$div = 0, $$iszero = 0, $$overflow = 0, $$same = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $data = $0;
 $1 = $data; //@line 180 "main.rs"
 $2 = (__ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_3len17h4f8e732f00a3d54eE($1)|0); //@line 180 "main.rs"
 $3 = (__ZN4core3mem7size_of17h34f2235168088e08E()|0); //@line 180 "main.rs"
 $$arith = Math_imul($2, $3)|0; //@line 180 "main.rs"
 $$iszero = ($3|0)==(0); //@line 180 "main.rs"
 $$denom = $$iszero ? 1 : $3; //@line 180 "main.rs"
 $$div = (($$arith|0) / ($$denom|0))&-1; //@line 180 "main.rs"
 $$same = ($$div|0)!=($2|0); //@line 180 "main.rs"
 $$overflow = $$iszero ? 0 : $$same; //@line 180 "main.rs"
 $4 = $$overflow; //@line 180 "main.rs"
 if ($4) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(4632); //@line 180 "main.rs"
  // unreachable; //@line 180 "main.rs"
 } else {
  $5 = $data; //@line 180 "main.rs"
  $6 = (__ZN81__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__index__Index_LT_usize_GT__GT_5index17hc708425b720dd5c8E($5,0)|0); //@line 180 "main.rs"
  $7 = (__ZN5rustv3r3d11as_void_ptr17hdb8df238374e7195E($6)|0); //@line 180 "main.rs"
  $8 = HEAP32[761]|0; //@line 180 "main.rs"
  $9 = (__ZN5rustv13create_buffer17hc7d8674e6872e9acE($$arith,$7,$8)|0); //@line 180 "main.rs"
  STACKTOP = sp;return ($9|0); //@line 181 "main.rs"
 }
 return (0)|0;
}
function __ZN5rustv13create_buffer17hc7d8674e6872e9acE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer_type = 0, $data = 0, $id = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $id = sp + 12|0;
 $size = $0;
 $data = $1;
 $buffer_type = $2;
 HEAP32[$id>>2] = 0; //@line 160 "main.rs"
 _glGenBuffers(1,($id|0)); //@line 161 "main.rs"
 $3 = $buffer_type; //@line 162 "main.rs"
 $4 = HEAP32[$id>>2]|0; //@line 162 "main.rs"
 _glBindBuffer(($3|0),($4|0)); //@line 162 "main.rs"
 $5 = $buffer_type; //@line 164 "main.rs"
 $6 = $size; //@line 164 "main.rs"
 $7 = $data; //@line 164 "main.rs"
 $8 = HEAP32[762]|0; //@line 164 "main.rs"
 _glBufferData(($5|0),($6|0),($7|0),($8|0)); //@line 164 "main.rs"
 $9 = $buffer_type; //@line 166 "main.rs"
 _glBindBuffer(($9|0),0); //@line 166 "main.rs"
 $10 = HEAP32[$id>>2]|0; //@line 167 "main.rs"
 STACKTOP = sp;return ($10|0); //@line 168 "main.rs"
}
function _main($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[13344]|0;
 $3 = (__ZN3std2rt10lang_start17h05a5b20c84ed1060E(298,$0,$1)|0);
 return ($3|0);
}
function __ZN5rustv4main17h8f4d8484a42e1fa2E() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_13 = 0, $_16 = 0, $_19 = 0, $_22 = 0;
 var $_4 = 0, $personalityslot = 0, $x$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $personalityslot = sp + 48|0;
 $_22 = sp + 60|0;
 $_13 = sp + 24|0;
 $_4 = sp;
 __ZN5rustv14minimal_shader5mainr17hea6d9f5373a3b49bE(); //@line 660 "main.rs"
 __ZN4core3fmt9Arguments6new_v117h1cedc7e123bae470E($_4,4680,1,38620,0); //@line 665 "main.rs"
 __ZN3std2io5stdio6_print17h5e38a8ff46cfb3e1E($_4); //@line 665 "main.rs"
 $0 = (__ZN5alloc4heap15exchange_malloc17h2b3df7e8451de4ebE(8,4)|0); //@line 666 "main.rs"
 $_16 = $0; //@line 666 "main.rs"
 $_19 = 30000; //@line 666 "main.rs"
 $1 = $_19; //@line 666 "main.rs"
 $x$i = $1;
 __THREW__ = 0;
 $2 = (invoke_iii(195,4,4)|0); //@line 242 "/checkout/src/liballoc/boxed.rs"
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $9 = ___cxa_find_matching_catch_2()|0;
  $10 = tempRet0;
  HEAP32[$personalityslot>>2] = $9;
  $11 = ((($personalityslot)) + 4|0);
  HEAP32[$11>>2] = $10;
  $12 = $_16; //@line 666 "main.rs"
  __ZN5alloc4heap8box_free17h3e82427f99e50a82E($12); //@line 666 "main.rs"
  $13 = HEAP32[$personalityslot>>2]|0; //@line 656 "main.rs"
  $14 = ((($personalityslot)) + 4|0); //@line 656 "main.rs"
  $15 = HEAP32[$14>>2]|0; //@line 656 "main.rs"
  ___resumeException($13|0);
  // unreachable;
 } else {
  $5 = $x$i; //@line 242 "/checkout/src/liballoc/boxed.rs"
  HEAP32[$2>>2] = $5; //@line 242 "/checkout/src/liballoc/boxed.rs"
  $6 = $_16; //@line 666 "main.rs"
  HEAP32[$6>>2] = $2; //@line 666 "main.rs"
  $7 = ((($6)) + 4|0); //@line 666 "main.rs"
  HEAP32[$7>>2] = 4688; //@line 666 "main.rs"
  $8 = $_16; //@line 666 "main.rs"
  __ZN5alloc5slice29__LT_impl_u20__u5b_T_u5d__GT_8into_vec17h1874004f46d2c659E($_13,$8,1); //@line 666 "main.rs"
  __ZN5rustv6window8run_loop17hdde427d64c137fe3E($_13,$_22); //@line 666 "main.rs"
  STACKTOP = sp;return; //@line 682 "main.rs"
 }
}
function __ZN5rustv6window6Window8ask_size17hd1135c3c453e75ddE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $1;
 HEAP32[$0>>2] = 0; //@line 181 "window.rs"
 STACKTOP = sp;return; //@line 181 "window.rs"
}
function __ZN5rustv6window6Window4name17hc7e826f3ff10a3c2E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $retVal$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 HEAP32[$retVal>>2] = 15101; //@line 182 "window.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 182 "window.rs"
 HEAP32[$retVal$index1>>2] = 4; //@line 182 "window.rs"
 STACKTOP = sp;return; //@line 182 "window.rs"
}
function __ZN5rustv6window6Window11on_activate17h04b27160e23d2fc2E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $app = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $app = $1;
 STACKTOP = sp;return; //@line 183 "window.rs"
}
function __ZN5rustv6window6Window13on_deactivate17h52533d1c65774af0E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $app = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $app = $1;
 STACKTOP = sp;return; //@line 184 "window.rs"
}
function __ZN68__LT_rustv__ShaderTest_u20_as_u20_rustv__window__Window_LT_A_GT__GT_6render17ha24d527fca165840E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $_5 = 0, $a = 0, $arg2 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $a = $1;
 $arg2 = $2;
 $3 = $self; //@line 584 "main.rs"
 $4 = HEAP32[$3>>2]|0; //@line 584 "main.rs"
 $5 = $4 & 15; //@line 584 "main.rs"
 $6 = ($5|0)>(8); //@line 584 "main.rs"
 if ($6) {
  $_5 = 1; //@line 584 "main.rs"
 } else {
  $_5 = 0; //@line 584 "main.rs"
 }
 $7 = $_5; //@line 584 "main.rs"
 __ZN5rustv14render_no_swap17h0ef764ee25a306efE($7); //@line 584 "main.rs"
 STACKTOP = sp;return; //@line 585 "main.rs"
}
function __ZN5rustv6window6Window4info17h06efb8e97438bc18E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $1;
 __ZN5alloc6string6String3new17h12c66b125e7bb509E($0); //@line 186 "window.rs"
 STACKTOP = sp;return; //@line 186 "window.rs"
}
function __ZN68__LT_rustv__ShaderTest_u20_as_u20_rustv__window__Window_LT_A_GT__GT_6update17hb293f824ced58e41E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $$arith = 0, $$ispos = 0, $$negcheck = 0, $$negtemp = 0, $$poscheck = 0, $$postemp = 0, $$select = 0, $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $arg2 = 0.0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $1;
 $a = $2;
 $arg2 = $3;
 $4 = $self; //@line 576 "main.rs"
 $5 = HEAP32[$4>>2]|0; //@line 576 "main.rs"
 $$arith = (($5) - 1)|0; //@line 576 "main.rs"
 $$postemp = (($5) + -2147483647)|0; //@line 576 "main.rs"
 $$negtemp = (($5) + -2147483648)|0; //@line 576 "main.rs"
 $$poscheck = ($$arith|0)<($$postemp|0); //@line 576 "main.rs"
 $$negcheck = ($$arith|0)>($$negtemp|0); //@line 576 "main.rs"
 $$ispos = ($5|0)>=(0); //@line 576 "main.rs"
 $$select = $$ispos ? $$poscheck : $$negcheck; //@line 576 "main.rs"
 $6 = $$select; //@line 576 "main.rs"
 if ($6) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(5044); //@line 576 "main.rs"
  // unreachable; //@line 576 "main.rs"
 }
 $7 = $self; //@line 576 "main.rs"
 HEAP32[$7>>2] = $$arith; //@line 576 "main.rs"
 $8 = $self; //@line 577 "main.rs"
 $9 = HEAP32[$8>>2]|0; //@line 577 "main.rs"
 $10 = ($9|0)>(0); //@line 577 "main.rs"
 if ($10) {
  HEAP32[$0>>2] = 0; //@line 578 "main.rs"
  STACKTOP = sp;return; //@line 582 "main.rs"
 } else {
  HEAP32[$0>>2] = 5; //@line 580 "main.rs"
  STACKTOP = sp;return; //@line 582 "main.rs"
 }
}
function __ZN5rustv6window6Window12key_mappings17h3448e75f7a618426E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $kmf = 0, $owner = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $kmf = sp + 8|0;
 $self = $0;
 $owner = $1;
 HEAP32[$kmf>>2] = $2;
 $4 = ((($kmf)) + 4|0);
 HEAP32[$4>>2] = $3;
 STACKTOP = sp;return; //@line 199 "window.rs"
}
function __ZN5rustv6window6Window13on_mouse_move17h44f03937d14a22e5E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sreg$field = 0.0, $$sreg$field5 = 0.0, $$sreg$index4 = 0, $$sreg2$field = 0.0, $$sreg2$field9 = 0.0, $$sreg2$index8 = 0, $$sreg3$field = 0.0, $$sreg3$field12 = 0.0, $$sreg3$index11 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0;
 var $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $_10 = 0;
 var $_21 = 0, $_29 = 0, $_38 = 0, $_39 = 0, $_49 = 0, $_9 = 0, $cond = 0, $cond1 = 0, $d = 0, $d2 = 0, $delta = 0, $delta$index7 = 0, $ds = 0, $ds1 = 0, $owner = 0, $self = 0, $wc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $4 = sp + 32|0;
 $5 = sp + 16|0;
 $6 = sp;
 $_49 = sp + 216|0;
 $d2 = sp + 192|0;
 $ds1 = sp + 184|0;
 $_39 = sp + 172|0;
 $_38 = sp + 160|0;
 $_29 = sp + 144|0;
 $_21 = sp + 120|0;
 $d = sp + 96|0;
 $ds = sp + 88|0;
 $_10 = sp + 76|0;
 $_9 = sp + 64|0;
 $delta = sp + 56|0;
 $self = $1;
 $owner = $2;
 $wc = $3;
 $7 = $wc; //@line 202 "window.rs"
 $8 = ((($7)) + 40|0); //@line 202 "window.rs"
 $9 = $wc; //@line 202 "window.rs"
 $10 = ((($9)) + 32|0); //@line 202 "window.rs"
 __ZN5rustv3r3d5v2sub17h4003862951903751E($6,$8,$10); //@line 202 "window.rs"
 $$sreg$field = +HEAPF32[$6>>2]; //@line 202 "window.rs"
 $$sreg$index4 = ((($6)) + 4|0); //@line 202 "window.rs"
 $$sreg$field5 = +HEAPF32[$$sreg$index4>>2]; //@line 202 "window.rs"
 HEAPF32[$delta>>2] = $$sreg$field; //@line 202 "window.rs"
 $delta$index7 = ((($delta)) + 4|0); //@line 202 "window.rs"
 HEAPF32[$delta$index7>>2] = $$sreg$field5; //@line 202 "window.rs"
 ;HEAP32[$_10>>2]=HEAP32[31080>>2]|0;HEAP32[$_10+4>>2]=HEAP32[31080+4>>2]|0;HEAP32[$_10+8>>2]=HEAP32[31080+8>>2]|0; //@line 204 "window.rs"
 ;HEAP32[$_9>>2]=HEAP32[$_10>>2]|0;HEAP32[$_9+4>>2]=HEAP32[$_10+4>>2]|0;HEAP32[$_9+8>>2]=HEAP32[$_10+8>>2]|0; //@line 204 "window.rs"
 $11 = HEAP32[$_9>>2]|0; //@line 204 "window.rs"
 $cond = ($11|0)==(1); //@line 204 "window.rs"
 if ($cond) {
  $13 = ((($_9)) + 4|0); //@line 204 "window.rs"
  $14 = HEAP32[$13>>2]|0; //@line 204 "window.rs"
  $15 = ((($13)) + 4|0); //@line 204 "window.rs"
  $16 = HEAP32[$15>>2]|0; //@line 204 "window.rs"
  HEAP32[$ds>>2] = $14; //@line 204 "window.rs"
  $17 = ((($ds)) + 4|0); //@line 204 "window.rs"
  HEAP32[$17>>2] = $16; //@line 204 "window.rs"
  $18 = HEAP32[$ds>>2]|0; //@line 206 "window.rs"
  $19 = ((($ds)) + 4|0); //@line 206 "window.rs"
  $20 = HEAP32[$19>>2]|0; //@line 206 "window.rs"
  __ZN5rustv6window12to_screenpos17h4d298ea930c2bb34E($5,$18,$20); //@line 206 "window.rs"
  $$sreg2$field = +HEAPF32[$5>>2]; //@line 206 "window.rs"
  $$sreg2$index8 = ((($5)) + 4|0); //@line 206 "window.rs"
  $$sreg2$field9 = +HEAPF32[$$sreg2$index8>>2]; //@line 206 "window.rs"
  $21 = +HEAPF32[$delta>>2]; //@line 207 "window.rs"
  $22 = ((($delta)) + 4|0); //@line 207 "window.rs"
  $23 = +HEAPF32[$22>>2]; //@line 207 "window.rs"
  $24 = $wc; //@line 208 "window.rs"
  $25 = ((($24)) + 40|0); //@line 208 "window.rs"
  $26 = +HEAPF32[$25>>2]; //@line 208 "window.rs"
  $27 = ((($25)) + 4|0); //@line 208 "window.rs"
  $28 = +HEAPF32[$27>>2]; //@line 208 "window.rs"
  HEAPF32[$d>>2] = $$sreg2$field; //@line 205 "window.rs"
  $29 = ((($d)) + 4|0); //@line 205 "window.rs"
  HEAPF32[$29>>2] = $$sreg2$field9; //@line 205 "window.rs"
  $30 = ((($d)) + 8|0); //@line 205 "window.rs"
  HEAPF32[$30>>2] = $21; //@line 205 "window.rs"
  $31 = ((($30)) + 4|0); //@line 205 "window.rs"
  HEAPF32[$31>>2] = $23; //@line 205 "window.rs"
  $32 = ((($d)) + 16|0); //@line 205 "window.rs"
  HEAPF32[$32>>2] = $26; //@line 205 "window.rs"
  $33 = ((($32)) + 4|0); //@line 205 "window.rs"
  HEAPF32[$33>>2] = $28; //@line 205 "window.rs"
  $34 = HEAP8[39193]|0; //@line 213 "window.rs"
  $35 = $34&1; //@line 213 "window.rs"
  if ($35) {
   __ZN4core3fmt9Arguments6new_v117h1cedc7e123bae470E($_21,5036,1,38620,0); //@line 214 "window.rs"
   __ZN3std2io5stdio6_print17h5e38a8ff46cfb3e1E($_21); //@line 214 "window.rs"
   $36 = $self; //@line 215 "window.rs"
   $37 = $owner; //@line 215 "window.rs"
   $38 = $wc; //@line 215 "window.rs"
   __ZN5rustv6window6Window14on_ldrag_begin17hcc0d78a362757b13E($_29,$36,$37,$38); //@line 215 "window.rs"
   __ZN4core3ptr13drop_in_place17h16f8c2c72dff7d4bE($_29); //@line 215 "window.rs"
   HEAP8[39193] = 0; //@line 216 "window.rs"
  }
  $39 = $self; //@line 219 "window.rs"
  $40 = $owner; //@line 219 "window.rs"
  $41 = $wc; //@line 219 "window.rs"
  __ZN5rustv6window6Window12on_ldragging17hbc5a86b84d6a0356E($0,$39,$40,$d,$41); //@line 219 "window.rs"
  STACKTOP = sp;return; //@line 237 "window.rs"
 }
 ;HEAP32[$_39>>2]=HEAP32[31092>>2]|0;HEAP32[$_39+4>>2]=HEAP32[31092+4>>2]|0;HEAP32[$_39+8>>2]=HEAP32[31092+8>>2]|0; //@line 221 "window.rs"
 ;HEAP32[$_38>>2]=HEAP32[$_39>>2]|0;HEAP32[$_38+4>>2]=HEAP32[$_39+4>>2]|0;HEAP32[$_38+8>>2]=HEAP32[$_39+8>>2]|0; //@line 221 "window.rs"
 $12 = HEAP32[$_38>>2]|0; //@line 221 "window.rs"
 $cond1 = ($12|0)==(1); //@line 221 "window.rs"
 if (!($cond1)) {
  $42 = $self; //@line 235 "window.rs"
  $43 = $owner; //@line 235 "window.rs"
  $44 = $wc; //@line 235 "window.rs"
  __ZN5rustv6window6Window15on_passive_move17ha50fc340093a4d82E($0,$42,$43,$44); //@line 235 "window.rs"
  STACKTOP = sp;return; //@line 237 "window.rs"
 }
 $45 = ((($_38)) + 4|0); //@line 221 "window.rs"
 $46 = HEAP32[$45>>2]|0; //@line 221 "window.rs"
 $47 = ((($45)) + 4|0); //@line 221 "window.rs"
 $48 = HEAP32[$47>>2]|0; //@line 221 "window.rs"
 HEAP32[$ds1>>2] = $46; //@line 221 "window.rs"
 $49 = ((($ds1)) + 4|0); //@line 221 "window.rs"
 HEAP32[$49>>2] = $48; //@line 221 "window.rs"
 $50 = HEAP32[$ds1>>2]|0; //@line 223 "window.rs"
 $51 = ((($ds1)) + 4|0); //@line 223 "window.rs"
 $52 = HEAP32[$51>>2]|0; //@line 223 "window.rs"
 __ZN5rustv6window12to_screenpos17h4d298ea930c2bb34E($4,$50,$52); //@line 223 "window.rs"
 $$sreg3$field = +HEAPF32[$4>>2]; //@line 223 "window.rs"
 $$sreg3$index11 = ((($4)) + 4|0); //@line 223 "window.rs"
 $$sreg3$field12 = +HEAPF32[$$sreg3$index11>>2]; //@line 223 "window.rs"
 $53 = +HEAPF32[$delta>>2]; //@line 224 "window.rs"
 $54 = ((($delta)) + 4|0); //@line 224 "window.rs"
 $55 = +HEAPF32[$54>>2]; //@line 224 "window.rs"
 $56 = $wc; //@line 225 "window.rs"
 $57 = ((($56)) + 40|0); //@line 225 "window.rs"
 $58 = +HEAPF32[$57>>2]; //@line 225 "window.rs"
 $59 = ((($57)) + 4|0); //@line 225 "window.rs"
 $60 = +HEAPF32[$59>>2]; //@line 225 "window.rs"
 HEAPF32[$d2>>2] = $$sreg3$field; //@line 222 "window.rs"
 $61 = ((($d2)) + 4|0); //@line 222 "window.rs"
 HEAPF32[$61>>2] = $$sreg3$field12; //@line 222 "window.rs"
 $62 = ((($d2)) + 8|0); //@line 222 "window.rs"
 HEAPF32[$62>>2] = $53; //@line 222 "window.rs"
 $63 = ((($62)) + 4|0); //@line 222 "window.rs"
 HEAPF32[$63>>2] = $55; //@line 222 "window.rs"
 $64 = ((($d2)) + 16|0); //@line 222 "window.rs"
 HEAPF32[$64>>2] = $58; //@line 222 "window.rs"
 $65 = ((($64)) + 4|0); //@line 222 "window.rs"
 HEAPF32[$65>>2] = $60; //@line 222 "window.rs"
 $66 = HEAP8[39193]|0; //@line 228 "window.rs"
 $67 = $66&1; //@line 228 "window.rs"
 if ($67) {
  $68 = $self; //@line 229 "window.rs"
  $69 = $owner; //@line 229 "window.rs"
  $70 = $wc; //@line 229 "window.rs"
  __ZN5rustv6window6Window14on_rdrag_begin17h2ba1dc489dacd5e9E($_49,$68,$69,$70); //@line 229 "window.rs"
  __ZN4core3ptr13drop_in_place17h16f8c2c72dff7d4bE($_49); //@line 229 "window.rs"
  HEAP8[39193] = 0; //@line 230 "window.rs"
 }
 $71 = $self; //@line 233 "window.rs"
 $72 = $owner; //@line 233 "window.rs"
 $73 = $wc; //@line 233 "window.rs"
 __ZN5rustv6window6Window12on_rdragging17h1d7e07ee0908bcb5E($0,$71,$72,$d2,$73); //@line 233 "window.rs"
 STACKTOP = sp;return; //@line 237 "window.rs"
}
function __ZN5rustv6window6Window15on_passive_move17ha50fc340093a4d82E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $arg2 = 0, $owner = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $1;
 $owner = $2;
 $arg2 = $3;
 HEAP32[$0>>2] = 4; //@line 240 "window.rs"
 STACKTOP = sp;return; //@line 240 "window.rs"
}
function __ZN5rustv6window6Window14on_ldrag_begin17hcc0d78a362757b13E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $arg2 = 0, $owner = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $1;
 $owner = $2;
 $arg2 = $3;
 HEAP32[$0>>2] = 4; //@line 242 "window.rs"
 STACKTOP = sp;return; //@line 242 "window.rs"
}
function __ZN5rustv6window6Window14on_mdrag_begin17h1bea2666975b203dE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $arg2 = 0, $owner = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $1;
 $owner = $2;
 $arg2 = $3;
 HEAP32[$0>>2] = 4; //@line 243 "window.rs"
 STACKTOP = sp;return; //@line 243 "window.rs"
}
function __ZN5rustv6window6Window14on_rdrag_begin17h2ba1dc489dacd5e9E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $arg2 = 0, $owner = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $1;
 $owner = $2;
 $arg2 = $3;
 HEAP32[$0>>2] = 4; //@line 244 "window.rs"
 STACKTOP = sp;return; //@line 244 "window.rs"
}
function __ZN5rustv6window6Window12on_ldrag_end17hbb5f295f63099cb3E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $arg2 = 0, $owner = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $1;
 $owner = $2;
 $arg2 = $3;
 HEAP32[$0>>2] = 4; //@line 245 "window.rs"
 STACKTOP = sp;return; //@line 245 "window.rs"
}
function __ZN5rustv6window6Window12on_mdrag_end17h67c337bd137314d0E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $arg2 = 0, $owner = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $1;
 $owner = $2;
 $arg2 = $3;
 HEAP32[$0>>2] = 4; //@line 246 "window.rs"
 STACKTOP = sp;return; //@line 246 "window.rs"
}
function __ZN5rustv6window6Window12on_rdrag_end17h289852f83fdd38a4E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $arg2 = 0, $owner = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $1;
 $owner = $2;
 $arg2 = $3;
 HEAP32[$0>>2] = 4; //@line 247 "window.rs"
 STACKTOP = sp;return; //@line 247 "window.rs"
}
function __ZN5rustv6window6Window12on_ldragging17hbc5a86b84d6a0356E($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $d = 0, $owner = 0, $self = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $1;
 $owner = $2;
 $d = $3;
 $w = $4;
 HEAP32[$0>>2] = 4; //@line 248 "window.rs"
 STACKTOP = sp;return; //@line 248 "window.rs"
}
function __ZN5rustv6window6Window12on_mdragging17hc729ed35455a29e5E($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $d = 0, $owner = 0, $self = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $1;
 $owner = $2;
 $d = $3;
 $w = $4;
 HEAP32[$0>>2] = 4; //@line 249 "window.rs"
 STACKTOP = sp;return; //@line 249 "window.rs"
}
function __ZN5rustv6window6Window12on_rdragging17h1d7e07ee0908bcb5E($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $d = 0, $owner = 0, $self = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $1;
 $owner = $2;
 $d = $3;
 $w = $4;
 HEAP32[$0>>2] = 4; //@line 250 "window.rs"
 STACKTOP = sp;return; //@line 250 "window.rs"
}
function __ZN5rustv6window6Window11on_wheel_up17ha9d4853f64489f04E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $arg2 = 0, $owner = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $1;
 $owner = $2;
 $arg2 = $3;
 HEAP32[$0>>2] = 4; //@line 251 "window.rs"
 STACKTOP = sp;return; //@line 251 "window.rs"
}
function __ZN5rustv6window6Window13on_wheel_down17h51b8ab97eb3f665eE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $arg2 = 0, $owner = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $1;
 $owner = $2;
 $arg2 = $3;
 HEAP32[$0>>2] = 4; //@line 252 "window.rs"
 STACKTOP = sp;return; //@line 252 "window.rs"
}
function __ZN5rustv6window6Window9on_lclick17h5ae1a86096c852b7E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_12 = 0, $_13 = 0, $_5 = 0, $__arg0 = 0, $owner = 0, $self = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp;
 $_13 = sp + 56|0;
 $_12 = sp + 48|0;
 $_5 = sp + 24|0;
 $w = sp + 16|0;
 $self = $1;
 $owner = $2;
 HEAP32[$w>>2] = $3;
 HEAP32[$_13>>2] = $w; //@line 254 "window.rs"
 $5 = HEAP32[$_13>>2]|0; //@line 254 "window.rs"
 $__arg0 = $5; //@line 254 "window.rs"
 $6 = $__arg0; //@line 254 "window.rs"
 __ZN4core3fmt10ArgumentV13new17hfaae784bb293ef1aE($4,$6,299); //@line 254 "window.rs"
 $$sreg$field = HEAP32[$4>>2]|0; //@line 254 "window.rs"
 $$sreg$index1 = ((($4)) + 4|0); //@line 254 "window.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 254 "window.rs"
 HEAP32[$_12>>2] = $$sreg$field; //@line 254 "window.rs"
 $7 = ((($_12)) + 4|0); //@line 254 "window.rs"
 HEAP32[$7>>2] = $$sreg$field2; //@line 254 "window.rs"
 $8 = HEAP32[1683]|0; //@line 254 "window.rs"
 __ZN4core3fmt9Arguments16new_v1_formatted17hd7921c86529aa3b1E($_5,5020,2,$_12,1,$8,1); //@line 254 "window.rs"
 __ZN3std2io5stdio6_print17h5e38a8ff46cfb3e1E($_5); //@line 254 "window.rs"
 HEAP32[$0>>2] = 4; //@line 254 "window.rs"
 STACKTOP = sp;return; //@line 254 "window.rs"
}
function __ZN5rustv6window6Window9on_rclick17h89d65ee936bd4aa9E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_12 = 0, $_13 = 0, $_5 = 0, $__arg0 = 0, $owner = 0, $self = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp;
 $_13 = sp + 56|0;
 $_12 = sp + 48|0;
 $_5 = sp + 24|0;
 $w = sp + 16|0;
 $self = $1;
 $owner = $2;
 HEAP32[$w>>2] = $3;
 HEAP32[$_13>>2] = $w; //@line 255 "window.rs"
 $5 = HEAP32[$_13>>2]|0; //@line 255 "window.rs"
 $__arg0 = $5; //@line 255 "window.rs"
 $6 = $__arg0; //@line 255 "window.rs"
 __ZN4core3fmt10ArgumentV13new17hfaae784bb293ef1aE($4,$6,299); //@line 255 "window.rs"
 $$sreg$field = HEAP32[$4>>2]|0; //@line 255 "window.rs"
 $$sreg$index1 = ((($4)) + 4|0); //@line 255 "window.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 255 "window.rs"
 HEAP32[$_12>>2] = $$sreg$field; //@line 255 "window.rs"
 $7 = ((($_12)) + 4|0); //@line 255 "window.rs"
 HEAP32[$7>>2] = $$sreg$field2; //@line 255 "window.rs"
 $8 = HEAP32[1683]|0; //@line 255 "window.rs"
 __ZN4core3fmt9Arguments16new_v1_formatted17hd7921c86529aa3b1E($_5,5004,2,$_12,1,$8,1); //@line 255 "window.rs"
 __ZN3std2io5stdio6_print17h5e38a8ff46cfb3e1E($_5); //@line 255 "window.rs"
 HEAP32[$0>>2] = 4; //@line 255 "window.rs"
 STACKTOP = sp;return; //@line 255 "window.rs"
}
function __ZN5rustv6window6Window9on_mclick17h217bdd201b8723a8E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_12 = 0, $_13 = 0, $_5 = 0, $__arg0 = 0, $owner = 0, $self = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp;
 $_13 = sp + 56|0;
 $_12 = sp + 48|0;
 $_5 = sp + 24|0;
 $w = sp + 16|0;
 $self = $1;
 $owner = $2;
 HEAP32[$w>>2] = $3;
 HEAP32[$_13>>2] = $w; //@line 256 "window.rs"
 $5 = HEAP32[$_13>>2]|0; //@line 256 "window.rs"
 $__arg0 = $5; //@line 256 "window.rs"
 $6 = $__arg0; //@line 256 "window.rs"
 __ZN4core3fmt10ArgumentV13new17hfaae784bb293ef1aE($4,$6,299); //@line 256 "window.rs"
 $$sreg$field = HEAP32[$4>>2]|0; //@line 256 "window.rs"
 $$sreg$index1 = ((($4)) + 4|0); //@line 256 "window.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 256 "window.rs"
 HEAP32[$_12>>2] = $$sreg$field; //@line 256 "window.rs"
 $7 = ((($_12)) + 4|0); //@line 256 "window.rs"
 HEAP32[$7>>2] = $$sreg$field2; //@line 256 "window.rs"
 $8 = HEAP32[1683]|0; //@line 256 "window.rs"
 __ZN4core3fmt9Arguments16new_v1_formatted17hd7921c86529aa3b1E($_5,4988,2,$_12,1,$8,1); //@line 256 "window.rs"
 __ZN3std2io5stdio6_print17h5e38a8ff46cfb3e1E($_5); //@line 256 "window.rs"
 HEAP32[$0>>2] = 4; //@line 256 "window.rs"
 STACKTOP = sp;return; //@line 256 "window.rs"
}
function __ZN5rustv6window6Window16on_mouse_dragged17h67f25591ab4cdf64E($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$sreg$field = 0, $$sreg$field4 = 0, $$sreg$index3 = 0, $$sreg1$field = 0, $$sreg1$field7 = 0, $$sreg1$index6 = 0, $$sreg2$field = 0, $$sreg2$field10 = 0, $$sreg2$index9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $LeftButton = 0, $_14 = 0, $_15 = 0, $_7 = 0;
 var $__arg0 = 0, $__arg1 = 0, $__arg2 = 0, $mb = 0, $mode = 0, $owner = 0, $self = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $6 = sp + 32|0;
 $7 = sp + 16|0;
 $8 = sp;
 $_15 = sp + 112|0;
 $_14 = sp + 88|0;
 $_7 = sp + 64|0;
 $mode = sp + 56|0;
 $self = $1;
 $owner = $2;
 $mb = $3;
 $w = $4;
 HEAP32[$mode>>2] = $5;
 $9 = $w; //@line 259 "window.rs"
 $10 = ((($9)) + 20|0); //@line 259 "window.rs"
 $11 = $w; //@line 259 "window.rs"
 $12 = ((($11)) + 40|0); //@line 259 "window.rs"
 HEAP32[$_15>>2] = $10; //@line 259 "window.rs"
 $13 = ((($_15)) + 4|0); //@line 259 "window.rs"
 HEAP32[$13>>2] = $12; //@line 259 "window.rs"
 $14 = ((($_15)) + 8|0); //@line 259 "window.rs"
 HEAP32[$14>>2] = $mode; //@line 259 "window.rs"
 $15 = HEAP32[$_15>>2]|0; //@line 259 "window.rs"
 $__arg0 = $15; //@line 259 "window.rs"
 $16 = ((($_15)) + 4|0); //@line 259 "window.rs"
 $17 = HEAP32[$16>>2]|0; //@line 259 "window.rs"
 $__arg1 = $17; //@line 259 "window.rs"
 $18 = ((($_15)) + 8|0); //@line 259 "window.rs"
 $19 = HEAP32[$18>>2]|0; //@line 259 "window.rs"
 $__arg2 = $19; //@line 259 "window.rs"
 $20 = $__arg0; //@line 259 "window.rs"
 __ZN4core3fmt10ArgumentV13new17h3d78367c24d4579cE($8,$20,300); //@line 259 "window.rs"
 $$sreg$field = HEAP32[$8>>2]|0; //@line 259 "window.rs"
 $$sreg$index3 = ((($8)) + 4|0); //@line 259 "window.rs"
 $$sreg$field4 = HEAP32[$$sreg$index3>>2]|0; //@line 259 "window.rs"
 $21 = $__arg1; //@line 259 "window.rs"
 __ZN4core3fmt10ArgumentV13new17hc364d5c14a780bfcE($7,$21,301); //@line 259 "window.rs"
 $$sreg1$field = HEAP32[$7>>2]|0; //@line 259 "window.rs"
 $$sreg1$index6 = ((($7)) + 4|0); //@line 259 "window.rs"
 $$sreg1$field7 = HEAP32[$$sreg1$index6>>2]|0; //@line 259 "window.rs"
 $22 = $__arg2; //@line 259 "window.rs"
 __ZN4core3fmt10ArgumentV13new17h37e1e49ec138400bE($6,$22,302); //@line 259 "window.rs"
 $$sreg2$field = HEAP32[$6>>2]|0; //@line 259 "window.rs"
 $$sreg2$index9 = ((($6)) + 4|0); //@line 259 "window.rs"
 $$sreg2$field10 = HEAP32[$$sreg2$index9>>2]|0; //@line 259 "window.rs"
 HEAP32[$_14>>2] = $$sreg$field; //@line 259 "window.rs"
 $23 = ((($_14)) + 4|0); //@line 259 "window.rs"
 HEAP32[$23>>2] = $$sreg$field4; //@line 259 "window.rs"
 $24 = ((($_14)) + 8|0); //@line 259 "window.rs"
 HEAP32[$24>>2] = $$sreg1$field; //@line 259 "window.rs"
 $25 = ((($24)) + 4|0); //@line 259 "window.rs"
 HEAP32[$25>>2] = $$sreg1$field7; //@line 259 "window.rs"
 $26 = ((($_14)) + 16|0); //@line 259 "window.rs"
 HEAP32[$26>>2] = $$sreg2$field; //@line 259 "window.rs"
 $27 = ((($26)) + 4|0); //@line 259 "window.rs"
 HEAP32[$27>>2] = $$sreg2$field10; //@line 259 "window.rs"
 $28 = HEAP32[1863]|0; //@line 259 "window.rs"
 __ZN4core3fmt9Arguments16new_v1_formatted17hd7921c86529aa3b1E($_7,4956,4,$_14,3,$28,3); //@line 259 "window.rs"
 __ZN3std2io5stdio6_print17h5e38a8ff46cfb3e1E($_7); //@line 259 "window.rs"
 $29 = $mb; //@line 261 "window.rs"
 $LeftButton = $29; //@line 261 "window.rs"
 $30 = $self; //@line 261 "window.rs"
 $31 = $owner; //@line 261 "window.rs"
 $32 = $w; //@line 261 "window.rs"
 __ZN5rustv6window6Window12on_ldrag_end17hbb5f295f63099cb3E($0,$30,$31,$32); //@line 261 "window.rs"
 STACKTOP = sp;return; //@line 268 "window.rs"
}
function __ZN5rustv6window6Window17on_mouse_dragging17hb400c807619ed27cE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$sreg$field = 0.0, $$sreg$field5 = 0.0, $$sreg$index4 = 0, $$sreg1$field = 0.0, $$sreg1$field8 = 0.0, $$sreg1$index7 = 0, $$sreg2$field = 0.0, $$sreg2$field12 = 0.0, $$sreg2$index11 = 0, $$sreg3$field = 0.0, $$sreg3$field16 = 0.0, $$sreg3$index15 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $LeftButton = 0, $_12 = 0, $_12$index10 = 0, $_17 = 0, $_17$index14 = 0, $_26 = 0, $_34 = 0, $_8 = 0, $d = 0, $mb = 0, $mode = 0, $owner = 0, $self = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $6 = sp + 48|0;
 $7 = sp + 32|0;
 $8 = sp + 16|0;
 $9 = sp;
 $_34 = sp + 168|0;
 $_26 = sp + 144|0;
 $_17 = sp + 128|0;
 $_12 = sp + 120|0;
 $_8 = sp + 104|0;
 $d = sp + 80|0;
 $self = $1;
 $owner = $2;
 $mb = $3;
 $w = $4;
 $mode = $5;
 $10 = $w; //@line 273 "window.rs"
 $11 = ((($10)) + 20|0); //@line 273 "window.rs"
 ;HEAP32[$_8>>2]=HEAP32[$11>>2]|0;HEAP32[$_8+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$_8+8>>2]=HEAP32[$11+8>>2]|0; //@line 273 "window.rs"
 __ZN38__LT_core__option__Option_LT_T_GT__GT_6unwrap17h2c39f0c3fc4408a2E($9,$_8); //@line 273 "window.rs"
 $$sreg$field = +HEAPF32[$9>>2]; //@line 273 "window.rs"
 $$sreg$index4 = ((($9)) + 4|0); //@line 273 "window.rs"
 $$sreg$field5 = +HEAPF32[$$sreg$index4>>2]; //@line 273 "window.rs"
 $12 = HEAP32[7765]|0; //@line 274 "window.rs"
 $13 = HEAP32[(31064)>>2]|0; //@line 274 "window.rs"
 __ZN5rustv6window12to_screenpos17h4d298ea930c2bb34E($8,$12,$13); //@line 274 "window.rs"
 $$sreg1$field = +HEAPF32[$8>>2]; //@line 274 "window.rs"
 $$sreg1$index7 = ((($8)) + 4|0); //@line 274 "window.rs"
 $$sreg1$field8 = +HEAPF32[$$sreg1$index7>>2]; //@line 274 "window.rs"
 HEAPF32[$_12>>2] = $$sreg1$field; //@line 274 "window.rs"
 $_12$index10 = ((($_12)) + 4|0); //@line 274 "window.rs"
 HEAPF32[$_12$index10>>2] = $$sreg1$field8; //@line 274 "window.rs"
 $14 = HEAP32[7767]|0; //@line 274 "window.rs"
 $15 = HEAP32[(31072)>>2]|0; //@line 274 "window.rs"
 __ZN5rustv6window12to_screenpos17h4d298ea930c2bb34E($7,$14,$15); //@line 274 "window.rs"
 $$sreg2$field = +HEAPF32[$7>>2]; //@line 274 "window.rs"
 $$sreg2$index11 = ((($7)) + 4|0); //@line 274 "window.rs"
 $$sreg2$field12 = +HEAPF32[$$sreg2$index11>>2]; //@line 274 "window.rs"
 HEAPF32[$_17>>2] = $$sreg2$field; //@line 274 "window.rs"
 $_17$index14 = ((($_17)) + 4|0); //@line 274 "window.rs"
 HEAPF32[$_17$index14>>2] = $$sreg2$field12; //@line 274 "window.rs"
 __ZN5rustv3r3d5v2sub17h4003862951903751E($6,$_12,$_17); //@line 274 "window.rs"
 $$sreg3$field = +HEAPF32[$6>>2]; //@line 274 "window.rs"
 $$sreg3$index15 = ((($6)) + 4|0); //@line 274 "window.rs"
 $$sreg3$field16 = +HEAPF32[$$sreg3$index15>>2]; //@line 274 "window.rs"
 $16 = $w; //@line 275 "window.rs"
 $17 = ((($16)) + 40|0); //@line 275 "window.rs"
 $18 = +HEAPF32[$17>>2]; //@line 275 "window.rs"
 $19 = ((($17)) + 4|0); //@line 275 "window.rs"
 $20 = +HEAPF32[$19>>2]; //@line 275 "window.rs"
 HEAPF32[$d>>2] = $$sreg$field; //@line 272 "window.rs"
 $21 = ((($d)) + 4|0); //@line 272 "window.rs"
 HEAPF32[$21>>2] = $$sreg$field5; //@line 272 "window.rs"
 $22 = ((($d)) + 8|0); //@line 272 "window.rs"
 HEAPF32[$22>>2] = $$sreg3$field; //@line 272 "window.rs"
 $23 = ((($22)) + 4|0); //@line 272 "window.rs"
 HEAPF32[$23>>2] = $$sreg3$field16; //@line 272 "window.rs"
 $24 = ((($d)) + 16|0); //@line 272 "window.rs"
 HEAPF32[$24>>2] = $18; //@line 272 "window.rs"
 $25 = ((($24)) + 4|0); //@line 272 "window.rs"
 HEAPF32[$25>>2] = $20; //@line 272 "window.rs"
 $26 = $mb; //@line 278 "window.rs"
 $LeftButton = $26; //@line 278 "window.rs"
 $27 = HEAP8[39193]|0; //@line 279 "window.rs"
 $28 = $27&1; //@line 279 "window.rs"
 if (!($28)) {
  $32 = $self; //@line 284 "window.rs"
  $33 = $owner; //@line 284 "window.rs"
  $34 = $w; //@line 284 "window.rs"
  __ZN5rustv6window6Window12on_ldragging17hbc5a86b84d6a0356E($0,$32,$33,$d,$34); //@line 284 "window.rs"
  STACKTOP = sp;return; //@line 290 "window.rs"
 }
 __ZN4core3fmt9Arguments6new_v117h1cedc7e123bae470E($_26,4948,1,38620,0); //@line 280 "window.rs"
 __ZN3std2io5stdio6_print17h5e38a8ff46cfb3e1E($_26); //@line 280 "window.rs"
 $29 = $self; //@line 281 "window.rs"
 $30 = $owner; //@line 281 "window.rs"
 $31 = $w; //@line 281 "window.rs"
 __ZN5rustv6window6Window14on_ldrag_begin17hcc0d78a362757b13E($_34,$29,$30,$31); //@line 281 "window.rs"
 __ZN4core3ptr13drop_in_place17h16f8c2c72dff7d4bE($_34); //@line 281 "window.rs"
 HEAP8[39193] = 0; //@line 282 "window.rs"
 $32 = $self; //@line 284 "window.rs"
 $33 = $owner; //@line 284 "window.rs"
 $34 = $w; //@line 284 "window.rs"
 __ZN5rustv6window6Window12on_ldragging17hbc5a86b84d6a0356E($0,$32,$33,$d,$34); //@line 284 "window.rs"
 STACKTOP = sp;return; //@line 290 "window.rs"
}
function __ZN5rustv6window6Window15on_lbutton_down17hdde66eb2e56b9befE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $owner = 0, $self = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $1;
 $owner = $2;
 $w = $3;
 HEAP32[$0>>2] = 4; //@line 292 "window.rs"
 STACKTOP = sp;return; //@line 292 "window.rs"
}
function __ZN5rustv6window6Window15on_rbutton_down17hebc1ae63bddb0aaeE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $owner = 0, $self = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $1;
 $owner = $2;
 $w = $3;
 HEAP32[$0>>2] = 4; //@line 293 "window.rs"
 STACKTOP = sp;return; //@line 293 "window.rs"
}
function __ZN5rustv6window6Window13on_lbutton_up17hc9b15287eadb07f2E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_19 = 0, $_5 = 0, $_6 = 0, $owner = 0, $prev = 0, $self = 0, $switch = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $_19 = sp + 72|0;
 $_10 = sp + 48|0;
 $prev = sp + 40|0;
 $_6 = sp + 24|0;
 $_5 = sp + 12|0;
 $self = $1;
 $owner = $2;
 $w = $3;
 ;HEAP32[$_6>>2]=HEAP32[31080>>2]|0;HEAP32[$_6+4>>2]=HEAP32[31080+4>>2]|0;HEAP32[$_6+8>>2]=HEAP32[31080+8>>2]|0; //@line 295 "window.rs"
 ;HEAP32[$_5>>2]=HEAP32[$_6>>2]|0;HEAP32[$_5+4>>2]=HEAP32[$_6+4>>2]|0;HEAP32[$_5+8>>2]=HEAP32[$_6+8>>2]|0; //@line 295 "window.rs"
 $4 = HEAP32[$_5>>2]|0; //@line 296 "window.rs"
 $switch = ($4>>>0)<(1); //@line 296 "window.rs"
 if ($switch) {
  __ZN4core3fmt9Arguments6new_v117h1cedc7e123bae470E($_19,4932,1,38620,0); //@line 297 "window.rs"
  __ZN3std2io5stdio6_print17h5e38a8ff46cfb3e1E($_19); //@line 297 "window.rs"
  HEAP32[$0>>2] = 4; //@line 299 "window.rs"
  STACKTOP = sp;return; //@line 300 "window.rs"
 } else {
  $5 = ((($_5)) + 4|0); //@line 296 "window.rs"
  $6 = HEAP32[$5>>2]|0; //@line 296 "window.rs"
  $7 = ((($5)) + 4|0); //@line 296 "window.rs"
  $8 = HEAP32[$7>>2]|0; //@line 296 "window.rs"
  HEAP32[$prev>>2] = $6; //@line 296 "window.rs"
  $9 = ((($prev)) + 4|0); //@line 296 "window.rs"
  HEAP32[$9>>2] = $8; //@line 296 "window.rs"
  __ZN4core3fmt9Arguments6new_v117h1cedc7e123bae470E($_10,4940,1,38620,0); //@line 296 "window.rs"
  __ZN3std2io5stdio6_print17h5e38a8ff46cfb3e1E($_10); //@line 296 "window.rs"
  HEAP32[$0>>2] = 4; //@line 299 "window.rs"
  STACKTOP = sp;return; //@line 300 "window.rs"
 }
}
function __ZN5rustv6window6Window13on_rbutton_up17h00955861f0f02f0dE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $arg2 = 0, $owner = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $1;
 $owner = $2;
 $arg2 = $3;
 HEAP32[$0>>2] = 4; //@line 301 "window.rs"
 STACKTOP = sp;return; //@line 301 "window.rs"
}
function __ZN5rustv6window6Window15on_mbutton_down17hfe0ae7df57cf87bfE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $arg2 = 0, $owner = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $1;
 $owner = $2;
 $arg2 = $3;
 HEAP32[$0>>2] = 4; //@line 302 "window.rs"
 STACKTOP = sp;return; //@line 302 "window.rs"
}
function __ZN5rustv6window6Window13on_mbutton_up17h382c7d11e55c6d64E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $arg2 = 0, $owner = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $1;
 $owner = $2;
 $arg2 = $3;
 HEAP32[$0>>2] = 4; //@line 303 "window.rs"
 STACKTOP = sp;return; //@line 303 "window.rs"
}
function __ZN5rustv6window6Window15on_mouse_button17h8648eb4123f6d127E($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_6 = 0, $mb = 0, $owner = 0;
 var $s = 0, $self = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_6 = sp + 16|0;
 $self = $1;
 $owner = $2;
 $mb = $3;
 $6 = $4&1;
 $s = $6;
 $w = $5;
 $7 = $mb; //@line 305 "window.rs"
 $8 = $s; //@line 305 "window.rs"
 $9 = $8&1; //@line 305 "window.rs"
 HEAP32[$_6>>2] = $7; //@line 305 "window.rs"
 $10 = ((($_6)) + 4|0); //@line 305 "window.rs"
 $11 = $9&1; //@line 305 "window.rs"
 HEAP8[$10>>0] = $11; //@line 305 "window.rs"
 $12 = HEAP32[$_6>>2]|0; //@line 306 "window.rs"
 switch ($12|0) {
 case 1:  {
  $28 = ((($_6)) + 4|0); //@line 306 "window.rs"
  $29 = HEAP8[$28>>0]|0; //@line 306 "window.rs"
  $30 = $29&1; //@line 306 "window.rs"
  $13 = $self;
  $14 = $owner;
  $15 = $w;
  if ($30) {
   __ZN5rustv6window6Window15on_lbutton_down17hdde66eb2e56b9befE($0,$13,$14,$15); //@line 306 "window.rs"
   STACKTOP = sp;return; //@line 316 "window.rs"
  } else {
   __ZN5rustv6window6Window13on_lbutton_up17hc9b15287eadb07f2E($0,$13,$14,$15); //@line 307 "window.rs"
   STACKTOP = sp;return; //@line 316 "window.rs"
  }
  break;
 }
 case 2:  {
  $31 = ((($_6)) + 4|0); //@line 310 "window.rs"
  $32 = HEAP8[$31>>0]|0; //@line 310 "window.rs"
  $33 = $32&1; //@line 310 "window.rs"
  $19 = $self;
  $20 = $owner;
  $21 = $w;
  if ($33) {
   __ZN5rustv6window6Window15on_mbutton_down17hfe0ae7df57cf87bfE($0,$19,$20,$21); //@line 310 "window.rs"
   STACKTOP = sp;return; //@line 316 "window.rs"
  } else {
   __ZN5rustv6window6Window13on_mbutton_up17h382c7d11e55c6d64E($0,$19,$20,$21); //@line 311 "window.rs"
   STACKTOP = sp;return; //@line 316 "window.rs"
  }
  break;
 }
 case 4:  {
  $34 = ((($_6)) + 4|0); //@line 308 "window.rs"
  $35 = HEAP8[$34>>0]|0; //@line 308 "window.rs"
  $36 = $35&1; //@line 308 "window.rs"
  $16 = $self;
  $17 = $owner;
  $18 = $w;
  if ($36) {
   __ZN5rustv6window6Window15on_lbutton_down17hdde66eb2e56b9befE($0,$16,$17,$18); //@line 308 "window.rs"
   STACKTOP = sp;return; //@line 316 "window.rs"
  } else {
   __ZN5rustv6window6Window13on_rbutton_up17h00955861f0f02f0dE($0,$16,$17,$18); //@line 309 "window.rs"
   STACKTOP = sp;return; //@line 316 "window.rs"
  }
  break;
 }
 case 8:  {
  $37 = ((($_6)) + 4|0); //@line 312 "window.rs"
  $38 = HEAP8[$37>>0]|0; //@line 312 "window.rs"
  $39 = $38&1; //@line 312 "window.rs"
  if ($39) {
   $22 = $self; //@line 312 "window.rs"
   $23 = $owner; //@line 312 "window.rs"
   $24 = $w; //@line 312 "window.rs"
   __ZN5rustv6window6Window11on_wheel_up17ha9d4853f64489f04E($0,$22,$23,$24); //@line 312 "window.rs"
   STACKTOP = sp;return; //@line 316 "window.rs"
  }
  break;
 }
 case 16:  {
  $40 = ((($_6)) + 4|0); //@line 313 "window.rs"
  $41 = HEAP8[$40>>0]|0; //@line 313 "window.rs"
  $42 = $41&1; //@line 313 "window.rs"
  if ($42) {
   $25 = $self; //@line 313 "window.rs"
   $26 = $owner; //@line 313 "window.rs"
   $27 = $w; //@line 313 "window.rs"
   __ZN5rustv6window6Window13on_wheel_down17h51b8ab97eb3f665eE($0,$25,$26,$27); //@line 313 "window.rs"
   STACKTOP = sp;return; //@line 316 "window.rs"
  }
  break;
 }
 default: {
 }
 }
 HEAP32[$0>>2] = 4; //@line 314 "window.rs"
 STACKTOP = sp;return; //@line 316 "window.rs"
}
function __ZN5rustv6window6Window8try_drag17h2bccd75bd8d64446E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sreg$field = 0, $$sreg$field3 = 0, $$sreg$index2 = 0, $$sreg1$field = 0, $$sreg1$field6 = 0, $$sreg1$index5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0;
 var $_13 = 0, $_14 = 0, $_6 = 0, $__arg0 = 0, $__arg1 = 0, $mbpos = 0, $owner = 0, $self = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $4 = sp + 16|0;
 $5 = sp;
 $_14 = sp + 88|0;
 $_13 = sp + 72|0;
 $_6 = sp + 48|0;
 $self = $0;
 $owner = $1;
 $mbpos = $2;
 $w = $3;
 HEAP32[$_14>>2] = 4868; //@line 318 "window.rs"
 $6 = ((($_14)) + 4|0); //@line 318 "window.rs"
 HEAP32[$6>>2] = 4904; //@line 318 "window.rs"
 $7 = HEAP32[$_14>>2]|0; //@line 318 "window.rs"
 $__arg0 = $7; //@line 318 "window.rs"
 $8 = ((($_14)) + 4|0); //@line 318 "window.rs"
 $9 = HEAP32[$8>>2]|0; //@line 318 "window.rs"
 $__arg1 = $9; //@line 318 "window.rs"
 $10 = $__arg0; //@line 318 "window.rs"
 __ZN4core3fmt10ArgumentV13new17heecba43e0c9da516E($5,$10,303); //@line 318 "window.rs"
 $$sreg$field = HEAP32[$5>>2]|0; //@line 318 "window.rs"
 $$sreg$index2 = ((($5)) + 4|0); //@line 318 "window.rs"
 $$sreg$field3 = HEAP32[$$sreg$index2>>2]|0; //@line 318 "window.rs"
 $11 = $__arg1; //@line 318 "window.rs"
 __ZN4core3fmt10ArgumentV13new17h0963b74890d3a7c4E($4,$11,180); //@line 318 "window.rs"
 $$sreg1$field = HEAP32[$4>>2]|0; //@line 318 "window.rs"
 $$sreg1$index5 = ((($4)) + 4|0); //@line 318 "window.rs"
 $$sreg1$field6 = HEAP32[$$sreg1$index5>>2]|0; //@line 318 "window.rs"
 HEAP32[$_13>>2] = $$sreg$field; //@line 318 "window.rs"
 $12 = ((($_13)) + 4|0); //@line 318 "window.rs"
 HEAP32[$12>>2] = $$sreg$field3; //@line 318 "window.rs"
 $13 = ((($_13)) + 8|0); //@line 318 "window.rs"
 HEAP32[$13>>2] = $$sreg1$field; //@line 318 "window.rs"
 $14 = ((($13)) + 4|0); //@line 318 "window.rs"
 HEAP32[$14>>2] = $$sreg1$field6; //@line 318 "window.rs"
 $15 = HEAP32[1819]|0; //@line 318 "window.rs"
 __ZN4core3fmt9Arguments16new_v1_formatted17hd7921c86529aa3b1E($_6,4908,3,$_13,2,$15,2); //@line 318 "window.rs"
 __ZN3std2io5stdio6_print17h5e38a8ff46cfb3e1E($_6); //@line 318 "window.rs"
 $_0 = 2; //@line 319 "window.rs"
 $16 = $_0; //@line 320 "window.rs"
 STACKTOP = sp;return ($16|0); //@line 320 "window.rs"
}
function __ZN5rustv6window6Window8on_click17h105657d36752464bE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sreg$field = 0, $$sreg$field3 = 0, $$sreg$index2 = 0, $$sreg1$field = 0, $$sreg1$field6 = 0, $$sreg1$index5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_16 = 0, $_23 = 0, $_24 = 0, $__arg0 = 0, $__arg1 = 0, $mb = 0, $owner = 0, $self = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $5 = sp + 16|0;
 $6 = sp;
 $_24 = sp + 80|0;
 $_23 = sp + 64|0;
 $_16 = sp + 40|0;
 $self = $1;
 $owner = $2;
 $mb = $3;
 $w = $4;
 $7 = $mb; //@line 324 "window.rs"
 switch ($7|0) {
 case 1:  {
  $8 = $self; //@line 324 "window.rs"
  $9 = $owner; //@line 324 "window.rs"
  $10 = $w; //@line 324 "window.rs"
  __ZN5rustv6window6Window9on_lclick17h5ae1a86096c852b7E($0,$8,$9,$10); //@line 324 "window.rs"
  STACKTOP = sp;return; //@line 329 "window.rs"
  break;
 }
 case 2:  {
  $14 = $self; //@line 326 "window.rs"
  $15 = $owner; //@line 326 "window.rs"
  $16 = $w; //@line 326 "window.rs"
  __ZN5rustv6window6Window9on_mclick17h217bdd201b8723a8E($0,$14,$15,$16); //@line 326 "window.rs"
  STACKTOP = sp;return; //@line 329 "window.rs"
  break;
 }
 case 4:  {
  $11 = $self; //@line 325 "window.rs"
  $12 = $owner; //@line 325 "window.rs"
  $13 = $w; //@line 325 "window.rs"
  __ZN5rustv6window6Window9on_rclick17h89d65ee936bd4aa9E($0,$11,$12,$13); //@line 325 "window.rs"
  STACKTOP = sp;return; //@line 329 "window.rs"
  break;
 }
 default: {
  HEAP32[$_24>>2] = 4868; //@line 327 "window.rs"
  $17 = ((($_24)) + 4|0); //@line 327 "window.rs"
  HEAP32[$17>>2] = 4876; //@line 327 "window.rs"
  $18 = HEAP32[$_24>>2]|0; //@line 327 "window.rs"
  $__arg0 = $18; //@line 327 "window.rs"
  $19 = ((($_24)) + 4|0); //@line 327 "window.rs"
  $20 = HEAP32[$19>>2]|0; //@line 327 "window.rs"
  $__arg1 = $20; //@line 327 "window.rs"
  $21 = $__arg0; //@line 327 "window.rs"
  __ZN4core3fmt10ArgumentV13new17heecba43e0c9da516E($6,$21,303); //@line 327 "window.rs"
  $$sreg$field = HEAP32[$6>>2]|0; //@line 327 "window.rs"
  $$sreg$index2 = ((($6)) + 4|0); //@line 327 "window.rs"
  $$sreg$field3 = HEAP32[$$sreg$index2>>2]|0; //@line 327 "window.rs"
  $22 = $__arg1; //@line 327 "window.rs"
  __ZN4core3fmt10ArgumentV13new17h0963b74890d3a7c4E($5,$22,180); //@line 327 "window.rs"
  $$sreg1$field = HEAP32[$5>>2]|0; //@line 327 "window.rs"
  $$sreg1$index5 = ((($5)) + 4|0); //@line 327 "window.rs"
  $$sreg1$field6 = HEAP32[$$sreg1$index5>>2]|0; //@line 327 "window.rs"
  HEAP32[$_23>>2] = $$sreg$field; //@line 327 "window.rs"
  $23 = ((($_23)) + 4|0); //@line 327 "window.rs"
  HEAP32[$23>>2] = $$sreg$field3; //@line 327 "window.rs"
  $24 = ((($_23)) + 8|0); //@line 327 "window.rs"
  HEAP32[$24>>2] = $$sreg1$field; //@line 327 "window.rs"
  $25 = ((($24)) + 4|0); //@line 327 "window.rs"
  HEAP32[$25>>2] = $$sreg1$field6; //@line 327 "window.rs"
  $26 = HEAP32[1819]|0; //@line 327 "window.rs"
  __ZN4core3fmt9Arguments16new_v1_formatted17hd7921c86529aa3b1E($_16,4880,3,$_23,2,$26,2); //@line 327 "window.rs"
  __ZN3std2io5stdio6_print17h5e38a8ff46cfb3e1E($_16); //@line 327 "window.rs"
  HEAP32[$0>>2] = 0; //@line 327 "window.rs"
  STACKTOP = sp;return; //@line 329 "window.rs"
 }
 }
}
function __ZN5rustv6window6Window11on_key_down17hb6f59d4443e7e866E($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $k = 0, $modifiers = 0, $owner = 0, $self = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $self = $1;
 $owner = $2;
 $k = $3;
 $modifiers = $4;
 $w = $5;
 HEAP32[$0>>2] = 4; //@line 330 "window.rs"
 STACKTOP = sp;return; //@line 330 "window.rs"
}
function __ZN5rustv6window6Window9on_key_up17h7a10f89db52bbf32E($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $k = 0, $owner = 0, $self = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $1;
 $owner = $2;
 $k = $3;
 $w = $4;
 HEAP32[$0>>2] = 4; //@line 331 "window.rs"
 STACKTOP = sp;return; //@line 331 "window.rs"
}
function __ZN5rustv6window6Window6on_key17hd076ab7108f7f0c1E($0,$1,$2,$k,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $k = $k|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $keycode = 0, $modk = 0, $owner = 0, $pos = 0, $self = 0, $state = 0, $switch = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $pos = sp + 24|0;
 $self = $1;
 $owner = $2;
 $w = $3;
 $4 = HEAP32[$k>>2]|0; //@line 333 "window.rs"
 $keycode = $4; //@line 333 "window.rs"
 $5 = ((($k)) + 4|0); //@line 333 "window.rs"
 $6 = HEAP32[$5>>2]|0; //@line 333 "window.rs"
 $modk = $6; //@line 333 "window.rs"
 $7 = ((($k)) + 16|0); //@line 333 "window.rs"
 $8 = HEAP8[$7>>0]|0; //@line 333 "window.rs"
 $9 = $8&1; //@line 333 "window.rs"
 $10 = $9&1; //@line 333 "window.rs"
 $state = $10; //@line 333 "window.rs"
 $11 = ((($k)) + 8|0); //@line 333 "window.rs"
 $12 = +HEAPF32[$11>>2]; //@line 333 "window.rs"
 $13 = ((($11)) + 4|0); //@line 333 "window.rs"
 $14 = +HEAPF32[$13>>2]; //@line 333 "window.rs"
 HEAPF32[$pos>>2] = $12; //@line 333 "window.rs"
 $15 = ((($pos)) + 4|0); //@line 333 "window.rs"
 HEAPF32[$15>>2] = $14; //@line 333 "window.rs"
 $16 = $state; //@line 336 "window.rs"
 $17 = $16&1; //@line 336 "window.rs"
 $18 = $17&1; //@line 336 "window.rs"
 $switch = ($18>>>0)<(1); //@line 336 "window.rs"
 $19 = $self;
 $20 = $owner;
 $21 = $keycode;
 if ($switch) {
  $22 = $modk; //@line 336 "window.rs"
  $23 = $w; //@line 336 "window.rs"
  __ZN5rustv6window6Window11on_key_down17hb6f59d4443e7e866E($0,$19,$20,$21,$22,$23); //@line 336 "window.rs"
  STACKTOP = sp;return; //@line 338 "window.rs"
 } else {
  $24 = $w; //@line 337 "window.rs"
  __ZN5rustv6window6Window9on_key_up17h7a10f89db52bbf32E($0,$19,$20,$21,$24); //@line 337 "window.rs"
  STACKTOP = sp;return; //@line 338 "window.rs"
 }
}
function __ZN5rustv6window6Window7on_drop17h5c548d570c69c29fE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $f = 0, $self = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $f = sp + 8|0;
 $self = $0;
 HEAP32[$f>>2] = $1;
 $4 = ((($f)) + 4|0);
 HEAP32[$4>>2] = $2;
 $w = $3;
 STACKTOP = sp;return; //@line 339 "window.rs"
}
function __ZN5rustv6window6Window7command17h87f6e8c8d3fb79f1E($0,$1,$2,$c) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $c = $c|0;
 var $owner = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $1;
 $owner = $2;
 HEAP32[$0>>2] = 4; //@line 340 "window.rs"
 __ZN4core3ptr13drop_in_place17h6df0224222932d18E($c); //@line 340 "window.rs"
 STACKTOP = sp;return; //@line 340 "window.rs"
}
function __ZN5rustv6window6Window14event_dispatch17hf838975b92ed8ba4E($0,$1,$2,$e,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $e = $e|0;
 $3 = $3|0;
 var $$sreg$field = 0.0, $$sreg$field5 = 0.0, $$sreg$index4 = 0, $$sreg1$field = 0.0, $$sreg1$field8 = 0.0, $$sreg1$index7 = 0, $$sreg2$field = 0.0, $$sreg2$field11 = 0.0, $$sreg2$index10 = 0, $$sreg3$field = 0.0, $$sreg3$field15 = 0.0, $$sreg3$index14 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0;
 var $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0.0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_107 = 0, $_120 = 0, $_25 = 0, $_34 = 0, $_35 = 0, $_39 = 0, $_49 = 0, $_52 = 0;
 var $_56 = 0, $_56$index13 = 0, $_61 = 0, $_67 = 0, $_67$index17 = 0, $_69 = 0, $_77 = 0, $_86 = 0, $_95 = 0, $cond = 0, $current = 0, $current8 = 0, $dmode = 0, $dmode9 = 0, $dt = 0.0, $k = 0, $mb = 0, $mb10 = 0, $mb2 = 0, $mb4 = 0;
 var $mb6 = 0, $owner = 0, $pos = 0, $pos1 = 0, $pos11 = 0, $pos3 = 0, $r = 0, $s = 0, $self = 0, $start5 = 0, $start7 = 0, $t = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 720|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(720|0);
 $4 = sp + 48|0;
 $5 = sp + 32|0;
 $6 = sp + 16|0;
 $7 = sp;
 $_120 = sp + 660|0;
 $_107 = sp + 608|0;
 $_95 = sp + 556|0;
 $_86 = sp + 504|0;
 $_77 = sp + 452|0;
 $_67 = sp + 440|0;
 $_61 = sp + 384|0;
 $_56 = sp + 376|0;
 $_52 = sp + 320|0;
 $_49 = sp + 300|0;
 $_39 = sp + 288|0;
 $_35 = sp + 272|0;
 $_34 = sp + 216|0;
 $_25 = sp + 200|0;
 $pos11 = sp + 192|0;
 $current8 = sp + 176|0;
 $start7 = sp + 168|0;
 $current = sp + 152|0;
 $start5 = sp + 144|0;
 $pos3 = sp + 128|0;
 $pos1 = sp + 112|0;
 $pos = sp + 96|0;
 $k = sp + 76|0;
 $self = $1;
 $owner = $2;
 $r = $3;
 $8 = HEAP8[$e>>0]|0; //@line 346 "window.rs"
 $9 = $8&255; //@line 346 "window.rs"
 do {
  switch ($9|0) {
  case 1:  {
   $14 = ((($e)) + 4|0); //@line 347 "window.rs"
   $15 = +HEAPF32[$14>>2]; //@line 347 "window.rs"
   $t = $15; //@line 347 "window.rs"
   $16 = $self; //@line 348 "window.rs"
   $17 = $owner; //@line 348 "window.rs"
   $18 = $r; //@line 351 "window.rs"
   __ZN73__LT_rustv__r3d__geom__Extents_LT_T_GT__u20_as_u20_core__clone__Clone_GT_5clone17h687e78722686f5f7E($_35,$18); //@line 351 "window.rs"
   __ZN5rustv6window15get_mouse_ovpos17h6dc6f712cac0c3f4E($7); //@line 352 "window.rs"
   $$sreg$field = +HEAPF32[$7>>2]; //@line 352 "window.rs"
   $$sreg$index4 = ((($7)) + 4|0); //@line 352 "window.rs"
   $$sreg$field5 = +HEAPF32[$$sreg$index4>>2]; //@line 352 "window.rs"
   __ZN5rustv6window14get_mouse_vpos17h4b4bafae429f8560E($6); //@line 353 "window.rs"
   $$sreg1$field = +HEAPF32[$6>>2]; //@line 353 "window.rs"
   $$sreg1$index7 = ((($6)) + 4|0); //@line 353 "window.rs"
   $$sreg1$field8 = +HEAPF32[$$sreg1$index7>>2]; //@line 353 "window.rs"
   __ZN5rustv6window14get_drag_start17h5e85640b6e39274cE($_39); //@line 354 "window.rs"
   $19 = (+__ZN5rustv6window16get_aspect_ratio17hec5c79d4b08fa3aaE()); //@line 355 "window.rs"
   ;HEAP32[$_34>>2]=HEAP32[$_35>>2]|0;HEAP32[$_34+4>>2]=HEAP32[$_35+4>>2]|0;HEAP32[$_34+8>>2]=HEAP32[$_35+8>>2]|0;HEAP32[$_34+12>>2]=HEAP32[$_35+12>>2]|0; //@line 349 "window.rs"
   $20 = ((($_34)) + 16|0); //@line 349 "window.rs"
   HEAPF32[$20>>2] = $19; //@line 349 "window.rs"
   $21 = ((($_34)) + 20|0); //@line 349 "window.rs"
   ;HEAP32[$21>>2]=HEAP32[$_39>>2]|0;HEAP32[$21+4>>2]=HEAP32[$_39+4>>2]|0;HEAP32[$21+8>>2]=HEAP32[$_39+8>>2]|0; //@line 349 "window.rs"
   $22 = ((($_34)) + 32|0); //@line 349 "window.rs"
   HEAPF32[$22>>2] = $$sreg$field; //@line 349 "window.rs"
   $23 = ((($22)) + 4|0); //@line 349 "window.rs"
   HEAPF32[$23>>2] = $$sreg$field5; //@line 349 "window.rs"
   $24 = ((($_34)) + 40|0); //@line 349 "window.rs"
   HEAPF32[$24>>2] = $$sreg1$field; //@line 349 "window.rs"
   $25 = ((($24)) + 4|0); //@line 349 "window.rs"
   HEAPF32[$25>>2] = $$sreg1$field8; //@line 349 "window.rs"
   $26 = ((($_34)) + 48|0); //@line 349 "window.rs"
   HEAPF32[$26>>2] = 0.0; //@line 349 "window.rs"
   __ZN68__LT_rustv__ShaderTest_u20_as_u20_rustv__window__Window_LT_A_GT__GT_6render17ha24d527fca165840E($16,$17,$_34); //@line 348 "window.rs"
   HEAP32[$0>>2] = 0; //@line 357 "window.rs"
   STACKTOP = sp;return; //@line 380 "window.rs"
   break;
  }
  case 2:  {
   $27 = ((($e)) + 4|0); //@line 346 "window.rs"
   $28 = +HEAPF32[$27>>2]; //@line 346 "window.rs"
   $dt = $28; //@line 346 "window.rs"
   $29 = $self; //@line 346 "window.rs"
   $30 = $owner; //@line 346 "window.rs"
   $31 = $dt; //@line 346 "window.rs"
   __ZN68__LT_rustv__ShaderTest_u20_as_u20_rustv__window__Window_LT_A_GT__GT_6update17hb293f824ced58e41E($_25,$29,$30,$31); //@line 346 "window.rs"
   __ZN4core3ptr13drop_in_place17h16f8c2c72dff7d4bE($_25); //@line 346 "window.rs"
   HEAP32[$0>>2] = 0; //@line 346 "window.rs"
   STACKTOP = sp;return; //@line 380 "window.rs"
   break;
  }
  case 3:  {
   $10 = $self; //@line 359 "window.rs"
   $11 = $owner; //@line 359 "window.rs"
   __ZN5rustv6window6Window11on_activate17h04b27160e23d2fc2E($10,$11); //@line 359 "window.rs"
   HEAP32[$0>>2] = 0; //@line 359 "window.rs"
   STACKTOP = sp;return; //@line 380 "window.rs"
   break;
  }
  case 4:  {
   $12 = $self; //@line 360 "window.rs"
   $13 = $owner; //@line 360 "window.rs"
   __ZN5rustv6window6Window13on_deactivate17h52533d1c65774af0E($12,$13); //@line 360 "window.rs"
   HEAP32[$0>>2] = 0; //@line 360 "window.rs"
   STACKTOP = sp;return; //@line 380 "window.rs"
   break;
  }
  case 5:  {
   $32 = ((($e)) + 4|0); //@line 361 "window.rs"
   ;HEAP32[$k>>2]=HEAP32[$32>>2]|0;HEAP32[$k+4>>2]=HEAP32[$32+4>>2]|0;HEAP32[$k+8>>2]=HEAP32[$32+8>>2]|0;HEAP32[$k+12>>2]=HEAP32[$32+12>>2]|0;HEAP32[$k+16>>2]=HEAP32[$32+16>>2]|0; //@line 361 "window.rs"
   $33 = $self; //@line 361 "window.rs"
   $34 = $owner; //@line 361 "window.rs"
   ;HEAP32[$_49>>2]=HEAP32[$k>>2]|0;HEAP32[$_49+4>>2]=HEAP32[$k+4>>2]|0;HEAP32[$_49+8>>2]=HEAP32[$k+8>>2]|0;HEAP32[$_49+12>>2]=HEAP32[$k+12>>2]|0;HEAP32[$_49+16>>2]=HEAP32[$k+16>>2]|0; //@line 361 "window.rs"
   $35 = $r; //@line 361 "window.rs"
   __ZN5rustv6window14get_mouse_vpos17h4b4bafae429f8560E($5); //@line 361 "window.rs"
   $$sreg2$field = +HEAPF32[$5>>2]; //@line 361 "window.rs"
   $$sreg2$index10 = ((($5)) + 4|0); //@line 361 "window.rs"
   $$sreg2$field11 = +HEAPF32[$$sreg2$index10>>2]; //@line 361 "window.rs"
   HEAPF32[$_56>>2] = $$sreg2$field; //@line 361 "window.rs"
   $_56$index13 = ((($_56)) + 4|0); //@line 361 "window.rs"
   HEAPF32[$_56$index13>>2] = $$sreg2$field11; //@line 361 "window.rs"
   __ZN5rustv6window4mkwc17h76e0112b41ab3701E($_52,$35,$_56); //@line 361 "window.rs"
   __ZN5rustv6window6Window6on_key17hd076ab7108f7f0c1E($0,$33,$34,$_49,$_52); //@line 361 "window.rs"
   STACKTOP = sp;return; //@line 380 "window.rs"
   break;
  }
  case 6:  {
   $36 = ((($e)) + 4|0); //@line 362 "window.rs"
   $37 = +HEAPF32[$36>>2]; //@line 362 "window.rs"
   $38 = ((($36)) + 4|0); //@line 362 "window.rs"
   $39 = +HEAPF32[$38>>2]; //@line 362 "window.rs"
   HEAPF32[$pos>>2] = $37; //@line 362 "window.rs"
   $40 = ((($pos)) + 4|0); //@line 362 "window.rs"
   HEAPF32[$40>>2] = $39; //@line 362 "window.rs"
   $41 = $self; //@line 362 "window.rs"
   $42 = $owner; //@line 362 "window.rs"
   $43 = $r; //@line 362 "window.rs"
   __ZN5rustv6window15get_mouse_ovpos17h6dc6f712cac0c3f4E($4); //@line 362 "window.rs"
   $$sreg3$field = +HEAPF32[$4>>2]; //@line 362 "window.rs"
   $$sreg3$index14 = ((($4)) + 4|0); //@line 362 "window.rs"
   $$sreg3$field15 = +HEAPF32[$$sreg3$index14>>2]; //@line 362 "window.rs"
   HEAPF32[$_67>>2] = $$sreg3$field; //@line 362 "window.rs"
   $_67$index17 = ((($_67)) + 4|0); //@line 362 "window.rs"
   HEAPF32[$_67$index17>>2] = $$sreg3$field15; //@line 362 "window.rs"
   __ZN5rustv6window5mkwcm17hed9614c411b3ce1bE($_61,$43,$pos,$_67); //@line 362 "window.rs"
   __ZN5rustv6window6Window13on_mouse_move17h44f03937d14a22e5E($0,$41,$42,$_61); //@line 362 "window.rs"
   STACKTOP = sp;return; //@line 380 "window.rs"
   break;
  }
  case 7:  {
   $44 = ((($e)) + 4|0); //@line 370 "window.rs"
   $45 = HEAP32[$44>>2]|0; //@line 370 "window.rs"
   $mb2 = $45; //@line 370 "window.rs"
   $46 = ((($e)) + 8|0); //@line 370 "window.rs"
   $47 = +HEAPF32[$46>>2]; //@line 370 "window.rs"
   $48 = ((($46)) + 4|0); //@line 370 "window.rs"
   $49 = +HEAPF32[$48>>2]; //@line 370 "window.rs"
   HEAPF32[$pos3>>2] = $47; //@line 370 "window.rs"
   $50 = ((($pos3)) + 4|0); //@line 370 "window.rs"
   HEAPF32[$50>>2] = $49; //@line 370 "window.rs"
   $51 = $self; //@line 370 "window.rs"
   $52 = $owner; //@line 370 "window.rs"
   $53 = $mb2; //@line 370 "window.rs"
   $54 = $r; //@line 370 "window.rs"
   __ZN5rustv6window4mkwc17h76e0112b41ab3701E($_86,$54,$pos3); //@line 370 "window.rs"
   __ZN5rustv6window6Window8on_click17h105657d36752464bE($0,$51,$52,$53,$_86); //@line 370 "window.rs"
   STACKTOP = sp;return; //@line 380 "window.rs"
   break;
  }
  case 8:  {
   $55 = ((($e)) + 4|0); //@line 363 "window.rs"
   $56 = HEAP32[$55>>2]|0; //@line 363 "window.rs"
   $mb = $56; //@line 363 "window.rs"
   $57 = ((($e)) + 8|0); //@line 363 "window.rs"
   $58 = +HEAPF32[$57>>2]; //@line 363 "window.rs"
   $59 = ((($57)) + 4|0); //@line 363 "window.rs"
   $60 = +HEAPF32[$59>>2]; //@line 363 "window.rs"
   HEAPF32[$pos1>>2] = $58; //@line 363 "window.rs"
   $61 = ((($pos1)) + 4|0); //@line 363 "window.rs"
   HEAPF32[$61>>2] = $60; //@line 363 "window.rs"
   $62 = (__ZN5rustv6window12get_dragmode17h00e5007a3f4c85eaE()|0); //@line 364 "window.rs"
   $_69 = $62; //@line 364 "window.rs"
   $63 = $_69; //@line 365 "window.rs"
   $cond = ($63|0)==(0); //@line 365 "window.rs"
   if ($cond) {
    $119 = $self; //@line 365 "window.rs"
    $120 = $owner; //@line 365 "window.rs"
    $121 = $mb; //@line 365 "window.rs"
    $122 = $r; //@line 365 "window.rs"
    __ZN5rustv6window4mkwc17h76e0112b41ab3701E($_77,$122,$pos1); //@line 365 "window.rs"
    $123 = (__ZN5rustv6window6Window8try_drag17h2bccd75bd8d64446E($119,$120,$121,$_77)|0); //@line 365 "window.rs"
    __ZN5rustv6window12set_dragmode17hb2b14aa1a94a54f8E($123); //@line 365 "window.rs"
   }
   HEAP32[$0>>2] = 0; //@line 368 "window.rs"
   STACKTOP = sp;return; //@line 380 "window.rs"
   break;
  }
  case 9:  {
   $64 = ((($e)) + 4|0); //@line 372 "window.rs"
   $65 = HEAP32[$64>>2]|0; //@line 372 "window.rs"
   $mb4 = $65; //@line 372 "window.rs"
   $66 = ((($e)) + 8|0); //@line 372 "window.rs"
   $67 = +HEAPF32[$66>>2]; //@line 372 "window.rs"
   $68 = ((($66)) + 4|0); //@line 372 "window.rs"
   $69 = +HEAPF32[$68>>2]; //@line 372 "window.rs"
   HEAPF32[$start5>>2] = $67; //@line 372 "window.rs"
   $70 = ((($start5)) + 4|0); //@line 372 "window.rs"
   HEAPF32[$70>>2] = $69; //@line 372 "window.rs"
   $71 = ((($e)) + 16|0); //@line 372 "window.rs"
   $72 = +HEAPF32[$71>>2]; //@line 372 "window.rs"
   $73 = ((($71)) + 4|0); //@line 372 "window.rs"
   $74 = +HEAPF32[$73>>2]; //@line 372 "window.rs"
   HEAPF32[$current>>2] = $72; //@line 372 "window.rs"
   $75 = ((($current)) + 4|0); //@line 372 "window.rs"
   HEAPF32[$75>>2] = $74; //@line 372 "window.rs"
   $76 = ((($e)) + 24|0); //@line 372 "window.rs"
   $77 = HEAP32[$76>>2]|0; //@line 372 "window.rs"
   $dmode = $77; //@line 372 "window.rs"
   $78 = $self; //@line 373 "window.rs"
   $79 = $owner; //@line 373 "window.rs"
   $80 = $mb4; //@line 373 "window.rs"
   $81 = $r; //@line 373 "window.rs"
   __ZN5rustv6window5mkwcd17h9e3be5218fa50858E($_95,$81,$current,$start5); //@line 373 "window.rs"
   $82 = $dmode; //@line 373 "window.rs"
   __ZN5rustv6window6Window17on_mouse_dragging17hb400c807619ed27cE($0,$78,$79,$80,$_95,$82); //@line 373 "window.rs"
   STACKTOP = sp;return; //@line 380 "window.rs"
   break;
  }
  case 10:  {
   $83 = ((($e)) + 4|0); //@line 375 "window.rs"
   $84 = HEAP32[$83>>2]|0; //@line 375 "window.rs"
   $mb6 = $84; //@line 375 "window.rs"
   $85 = ((($e)) + 8|0); //@line 375 "window.rs"
   $86 = +HEAPF32[$85>>2]; //@line 375 "window.rs"
   $87 = ((($85)) + 4|0); //@line 375 "window.rs"
   $88 = +HEAPF32[$87>>2]; //@line 375 "window.rs"
   HEAPF32[$start7>>2] = $86; //@line 375 "window.rs"
   $89 = ((($start7)) + 4|0); //@line 375 "window.rs"
   HEAPF32[$89>>2] = $88; //@line 375 "window.rs"
   $90 = ((($e)) + 16|0); //@line 375 "window.rs"
   $91 = +HEAPF32[$90>>2]; //@line 375 "window.rs"
   $92 = ((($90)) + 4|0); //@line 375 "window.rs"
   $93 = +HEAPF32[$92>>2]; //@line 375 "window.rs"
   HEAPF32[$current8>>2] = $91; //@line 375 "window.rs"
   $94 = ((($current8)) + 4|0); //@line 375 "window.rs"
   HEAPF32[$94>>2] = $93; //@line 375 "window.rs"
   $95 = ((($e)) + 24|0); //@line 375 "window.rs"
   $96 = HEAP32[$95>>2]|0; //@line 375 "window.rs"
   $dmode9 = $96; //@line 375 "window.rs"
   $97 = $self; //@line 376 "window.rs"
   $98 = $owner; //@line 376 "window.rs"
   $99 = $mb6; //@line 376 "window.rs"
   $100 = $r; //@line 376 "window.rs"
   __ZN5rustv6window5mkwcd17h9e3be5218fa50858E($_107,$100,$current8,$start7); //@line 376 "window.rs"
   $101 = $dmode9; //@line 376 "window.rs"
   __ZN5rustv6window6Window16on_mouse_dragged17h67f25591ab4cdf64E($0,$97,$98,$99,$_107,$101); //@line 376 "window.rs"
   STACKTOP = sp;return; //@line 380 "window.rs"
   break;
  }
  case 11:  {
   $102 = ((($e)) + 4|0); //@line 377 "window.rs"
   $103 = HEAP32[$102>>2]|0; //@line 377 "window.rs"
   $mb10 = $103; //@line 377 "window.rs"
   $104 = ((($e)) + 1|0); //@line 377 "window.rs"
   $105 = HEAP8[$104>>0]|0; //@line 377 "window.rs"
   $106 = $105&1; //@line 377 "window.rs"
   $107 = $106&1; //@line 377 "window.rs"
   $s = $107; //@line 377 "window.rs"
   $108 = ((($e)) + 8|0); //@line 377 "window.rs"
   $109 = +HEAPF32[$108>>2]; //@line 377 "window.rs"
   $110 = ((($108)) + 4|0); //@line 377 "window.rs"
   $111 = +HEAPF32[$110>>2]; //@line 377 "window.rs"
   HEAPF32[$pos11>>2] = $109; //@line 377 "window.rs"
   $112 = ((($pos11)) + 4|0); //@line 377 "window.rs"
   HEAPF32[$112>>2] = $111; //@line 377 "window.rs"
   $113 = $self; //@line 377 "window.rs"
   $114 = $owner; //@line 377 "window.rs"
   $115 = $mb10; //@line 377 "window.rs"
   $116 = $s; //@line 377 "window.rs"
   $117 = $116&1; //@line 377 "window.rs"
   $118 = $r; //@line 377 "window.rs"
   __ZN5rustv6window4mkwc17h76e0112b41ab3701E($_120,$118,$pos11); //@line 377 "window.rs"
   __ZN5rustv6window6Window15on_mouse_button17h8648eb4123f6d127E($0,$113,$114,$115,$117,$_120); //@line 377 "window.rs"
   STACKTOP = sp;return; //@line 380 "window.rs"
   break;
  }
  default: {
   HEAP32[$0>>2] = 0; //@line 378 "window.rs"
   STACKTOP = sp;return; //@line 380 "window.rs"
  }
  }
 } while(0);
}
function __ZN5rustv6window6Window5event17hb822614ab60a783bE($0,$1,$2,$e,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $e = $e|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $_7 = 0, $owner = 0, $r = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_7 = sp + 12|0;
 $self = $1;
 $owner = $2;
 $r = $3;
 $4 = $self; //@line 385 "window.rs"
 $5 = $owner; //@line 385 "window.rs"
 ;HEAP32[$_7>>2]=HEAP32[$e>>2]|0;HEAP32[$_7+4>>2]=HEAP32[$e+4>>2]|0;HEAP32[$_7+8>>2]=HEAP32[$e+8>>2]|0;HEAP32[$_7+12>>2]=HEAP32[$e+12>>2]|0;HEAP32[$_7+16>>2]=HEAP32[$e+16>>2]|0;HEAP32[$_7+20>>2]=HEAP32[$e+20>>2]|0;HEAP32[$_7+24>>2]=HEAP32[$e+24>>2]|0; //@line 385 "window.rs"
 $6 = $r; //@line 385 "window.rs"
 __ZN5rustv6window6Window14event_dispatch17hf838975b92ed8ba4E($0,$4,$5,$_7,$6); //@line 385 "window.rs"
 STACKTOP = sp;return; //@line 386 "window.rs"
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17hfb7325ce693b0755E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $f = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $f = $1;
 $2 = $self; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$2>>2]|0; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $4 = $f; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $5 = (__ZN79__LT_rustv__r3d__vector__Vec2_LT_X_C__u20_Y_GT__u20_as_u20_core__fmt__Debug_GT_3fmt17hda8c9cb0f735ffd0E($3,$4)|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return ($5|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN79__LT_rustv__r3d__vector__Vec2_LT_X_C__u20_Y_GT__u20_as_u20_core__fmt__Debug_GT_3fmt17hda8c9cb0f735ffd0E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_16 = 0, $_24 = 0, $__arg_0 = 0, $__self_0_0 = 0, $__self_0_1 = 0, $builder = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_24 = sp + 28|0;
 $_16 = sp + 24|0;
 $builder = sp + 16|0;
 $self = $0;
 $__arg_0 = $1;
 $2 = $self; //@line 455 "r3d/vector.rs"
 $__self_0_0 = $2; //@line 455 "r3d/vector.rs"
 $3 = $self; //@line 455 "r3d/vector.rs"
 $4 = ((($3)) + 4|0); //@line 455 "r3d/vector.rs"
 $__self_0_1 = $4; //@line 455 "r3d/vector.rs"
 $5 = $__arg_0; //@line 453 "r3d/vector.rs"
 __ZN4core3fmt9Formatter12debug_struct17h2d24fc5dad9395cdE($builder,$5,15116,4); //@line 453 "r3d/vector.rs"
 $6 = $__self_0_0; //@line 455 "r3d/vector.rs"
 HEAP32[$_16>>2] = $6; //@line 455 "r3d/vector.rs"
 (__ZN4core3fmt8builders11DebugStruct5field17h5f57368d80e04997E($builder,15120,1,$_16,5068)|0); //@line 453 "r3d/vector.rs"
 $7 = $__self_0_1; //@line 455 "r3d/vector.rs"
 HEAP32[$_24>>2] = $7; //@line 455 "r3d/vector.rs"
 (__ZN4core3fmt8builders11DebugStruct5field17h5f57368d80e04997E($builder,15121,1,$_24,5068)|0); //@line 453 "r3d/vector.rs"
 $8 = (__ZN4core3fmt8builders11DebugStruct6finish17h63c8c54de379106dE($builder)|0); //@line 453 "r3d/vector.rs"
 STACKTOP = sp;return ($8|0); //@line 453 "r3d/vector.rs"
}
function __ZN5alloc4heap15exchange_malloc17h2b3df7e8451de4ebE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_11 = 0, $_9 = 0, $align = 0, $layout = 0;
 var $layout$index4 = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = sp;
 $_11 = sp + 48|0;
 $_9 = sp + 32|0;
 $layout = sp + 24|0;
 $size = $0;
 $align = $1;
 $3 = $size; //@line 245 "/checkout/src/liballoc/heap.rs"
 $4 = ($3|0)==(0); //@line 245 "/checkout/src/liballoc/heap.rs"
 if ($4) {
  $5 = $align; //@line 246 "/checkout/src/liballoc/heap.rs"
  $6 = $5; //@line 246 "/checkout/src/liballoc/heap.rs"
  $_0 = $6; //@line 246 "/checkout/src/liballoc/heap.rs"
  $13 = $_0; //@line 253 "/checkout/src/liballoc/heap.rs"
  STACKTOP = sp;return ($13|0); //@line 253 "/checkout/src/liballoc/heap.rs"
 } else {
  $7 = $size; //@line 248 "/checkout/src/liballoc/heap.rs"
  $8 = $align; //@line 248 "/checkout/src/liballoc/heap.rs"
  __ZN5alloc9allocator6Layout25from_size_align_unchecked17h1f4c5097bb0a95f9E($2,$7,$8); //@line 248 "/checkout/src/liballoc/heap.rs"
  $$sreg$field = HEAP32[$2>>2]|0; //@line 248 "/checkout/src/liballoc/heap.rs"
  $$sreg$index1 = ((($2)) + 4|0); //@line 248 "/checkout/src/liballoc/heap.rs"
  $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 248 "/checkout/src/liballoc/heap.rs"
  HEAP32[$layout>>2] = $$sreg$field; //@line 248 "/checkout/src/liballoc/heap.rs"
  $layout$index4 = ((($layout)) + 4|0); //@line 248 "/checkout/src/liballoc/heap.rs"
  HEAP32[$layout$index4>>2] = $$sreg$field2; //@line 248 "/checkout/src/liballoc/heap.rs"
  $9 = HEAP32[$layout>>2]|0; //@line 249 "/checkout/src/liballoc/heap.rs"
  $10 = ((($layout)) + 4|0); //@line 249 "/checkout/src/liballoc/heap.rs"
  $11 = HEAP32[$10>>2]|0; //@line 249 "/checkout/src/liballoc/heap.rs"
  __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_5alloc17h1df6c2188654da5aE($_9,$_11,$9,$11); //@line 249 "/checkout/src/liballoc/heap.rs"
  $12 = (__ZN47__LT_core__result__Result_LT_T_C__u20_E_GT__GT_14unwrap_or_else17h902c3f54ce7aa72aE($_9)|0); //@line 249 "/checkout/src/liballoc/heap.rs"
  $_0 = $12; //@line 249 "/checkout/src/liballoc/heap.rs"
  $13 = $_0; //@line 253 "/checkout/src/liballoc/heap.rs"
  STACKTOP = sp;return ($13|0); //@line 253 "/checkout/src/liballoc/heap.rs"
 }
 return (0)|0;
}
function __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_5alloc17h1df6c2188654da5aE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_19 = 0, $_20 = 0, $_4 = 0, $err = 0, $layout = 0, $ptr = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $_20 = sp + 56|0;
 $_19 = sp + 44|0;
 $_4 = sp + 28|0;
 $err = sp + 16|0;
 $layout = sp + 8|0;
 $self = $1;
 HEAP32[$layout>>2] = $2;
 $4 = ((($layout)) + 4|0);
 HEAP32[$4>>2] = $3;
 __ZN4core3mem13uninitialized17h207771a6410a72eaE($_4); //@line 83 "/checkout/src/liballoc/heap.rs"
 __ZN41__LT_core__mem__ManuallyDrop_LT_T_GT__GT_3new17hd38fa85c3ed08875E($err,$_4); //@line 83 "/checkout/src/liballoc/heap.rs"
 $5 = (__ZN5alloc9allocator6Layout4size17hf21f6297eca498a6E($layout)|0); //@line 84 "/checkout/src/liballoc/heap.rs"
 $6 = (__ZN5alloc9allocator6Layout5align17h2a1da598a1c292caE($layout)|0); //@line 85 "/checkout/src/liballoc/heap.rs"
 $7 = (__ZN79__LT_core__mem__ManuallyDrop_LT_T_GT__u20_as_u20_core__ops__deref__DerefMut_GT_9deref_mut17h84408d281bd43844E($err)|0); //@line 86 "/checkout/src/liballoc/heap.rs"
 $8 = (___rust_alloc($5,$6,$7)|0); //@line 84 "/checkout/src/liballoc/heap.rs"
 $ptr = $8; //@line 84 "/checkout/src/liballoc/heap.rs"
 $9 = $ptr; //@line 87 "/checkout/src/liballoc/heap.rs"
 $10 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h29fb7da4258afde7E($9)|0); //@line 87 "/checkout/src/liballoc/heap.rs"
 if ($10) {
  ;HEAP32[$_20>>2]=HEAP32[$err>>2]|0;HEAP32[$_20+4>>2]=HEAP32[$err+4>>2]|0;HEAP32[$_20+8>>2]=HEAP32[$err+8>>2]|0; //@line 88 "/checkout/src/liballoc/heap.rs"
  __ZN41__LT_core__mem__ManuallyDrop_LT_T_GT__GT_10into_inner17ha408edfe4da19cb5E($_19,$_20); //@line 88 "/checkout/src/liballoc/heap.rs"
  HEAP32[$0>>2] = 1; //@line 88 "/checkout/src/liballoc/heap.rs"
  $11 = ((($0)) + 4|0); //@line 88 "/checkout/src/liballoc/heap.rs"
  ;HEAP32[$11>>2]=HEAP32[$_19>>2]|0;HEAP32[$11+4>>2]=HEAP32[$_19+4>>2]|0;HEAP32[$11+8>>2]=HEAP32[$_19+8>>2]|0; //@line 88 "/checkout/src/liballoc/heap.rs"
  STACKTOP = sp;return; //@line 92 "/checkout/src/liballoc/heap.rs"
 } else {
  $12 = $ptr; //@line 90 "/checkout/src/liballoc/heap.rs"
  HEAP32[$0>>2] = 0; //@line 90 "/checkout/src/liballoc/heap.rs"
  $13 = ((($0)) + 4|0); //@line 90 "/checkout/src/liballoc/heap.rs"
  HEAP32[$13>>2] = $12; //@line 90 "/checkout/src/liballoc/heap.rs"
  STACKTOP = sp;return; //@line 92 "/checkout/src/liballoc/heap.rs"
 }
}
function __ZN5alloc4heap15exchange_malloc28__u7b__u7b_closure_u7d__u7d_17h28c821926009efd3E($err) {
 $err = $err|0;
 var $_4 = 0, $_5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_5 = sp;
 $_4 = sp + 12|0;
 ;HEAP32[$_5>>2]=HEAP32[$err>>2]|0;HEAP32[$_5+4>>2]=HEAP32[$err+4>>2]|0;HEAP32[$_5+8>>2]=HEAP32[$err+8>>2]|0; //@line 250 "/checkout/src/liballoc/heap.rs"
 __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h4a74d63357c934f6E($_4,$_5); //@line 250 "/checkout/src/liballoc/heap.rs"
 // unreachable; //@line 250 "/checkout/src/liballoc/heap.rs"
 return (0)|0;
}
function __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h4a74d63357c934f6E($0,$err) {
 $0 = $0|0;
 $err = $err|0;
 var $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 ___rust_oom($err); //@line 98 "/checkout/src/liballoc/heap.rs"
 // unreachable; //@line 98 "/checkout/src/liballoc/heap.rs"
}
function __ZN5alloc4heap8box_free17h20558b8626b21c9cE($0) {
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_15 = 0, $align = 0, $layout = 0, $layout$index4 = 0, $ptr = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $_15 = sp + 32|0;
 $layout = sp + 24|0;
 $ptr = $0;
 $size = 16; //@line 258 "/checkout/src/liballoc/heap.rs"
 $align = 4; //@line 259 "/checkout/src/liballoc/heap.rs"
 $2 = $size; //@line 261 "/checkout/src/liballoc/heap.rs"
 $3 = ($2|0)!=(0); //@line 261 "/checkout/src/liballoc/heap.rs"
 if (!($3)) {
  STACKTOP = sp;return; //@line 265 "/checkout/src/liballoc/heap.rs"
 }
 $4 = $size; //@line 262 "/checkout/src/liballoc/heap.rs"
 $5 = $align; //@line 262 "/checkout/src/liballoc/heap.rs"
 __ZN5alloc9allocator6Layout25from_size_align_unchecked17h1f4c5097bb0a95f9E($1,$4,$5); //@line 262 "/checkout/src/liballoc/heap.rs"
 $$sreg$field = HEAP32[$1>>2]|0; //@line 262 "/checkout/src/liballoc/heap.rs"
 $$sreg$index1 = ((($1)) + 4|0); //@line 262 "/checkout/src/liballoc/heap.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 262 "/checkout/src/liballoc/heap.rs"
 HEAP32[$layout>>2] = $$sreg$field; //@line 262 "/checkout/src/liballoc/heap.rs"
 $layout$index4 = ((($layout)) + 4|0); //@line 262 "/checkout/src/liballoc/heap.rs"
 HEAP32[$layout$index4>>2] = $$sreg$field2; //@line 262 "/checkout/src/liballoc/heap.rs"
 $6 = $ptr; //@line 263 "/checkout/src/liballoc/heap.rs"
 $7 = HEAP32[$layout>>2]|0; //@line 263 "/checkout/src/liballoc/heap.rs"
 $8 = ((($layout)) + 4|0); //@line 263 "/checkout/src/liballoc/heap.rs"
 $9 = HEAP32[$8>>2]|0; //@line 263 "/checkout/src/liballoc/heap.rs"
 __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_7dealloc17h10f2588a340aefeeE($_15,$6,$7,$9); //@line 263 "/checkout/src/liballoc/heap.rs"
 STACKTOP = sp;return; //@line 265 "/checkout/src/liballoc/heap.rs"
}
function __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_7dealloc17h10f2588a340aefeeE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $layout = 0, $ptr = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $layout = sp + 8|0;
 $self = $0;
 $ptr = $1;
 HEAP32[$layout>>2] = $2;
 $4 = ((($layout)) + 4|0);
 HEAP32[$4>>2] = $3;
 $5 = $ptr; //@line 104 "/checkout/src/liballoc/heap.rs"
 $6 = (__ZN5alloc9allocator6Layout4size17hf21f6297eca498a6E($layout)|0); //@line 104 "/checkout/src/liballoc/heap.rs"
 $7 = (__ZN5alloc9allocator6Layout5align17h2a1da598a1c292caE($layout)|0); //@line 104 "/checkout/src/liballoc/heap.rs"
 ___rust_dealloc($5,$6,$7); //@line 104 "/checkout/src/liballoc/heap.rs"
 STACKTOP = sp;return; //@line 105 "/checkout/src/liballoc/heap.rs"
}
function __ZN5alloc4heap8box_free17h3e82427f99e50a82E($0) {
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_15 = 0, $align = 0, $layout = 0, $layout$index4 = 0, $ptr = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $_15 = sp + 32|0;
 $layout = sp + 24|0;
 $ptr = $0;
 $size = 8; //@line 258 "/checkout/src/liballoc/heap.rs"
 $align = 4; //@line 259 "/checkout/src/liballoc/heap.rs"
 $2 = $size; //@line 261 "/checkout/src/liballoc/heap.rs"
 $3 = ($2|0)!=(0); //@line 261 "/checkout/src/liballoc/heap.rs"
 if (!($3)) {
  STACKTOP = sp;return; //@line 265 "/checkout/src/liballoc/heap.rs"
 }
 $4 = $size; //@line 262 "/checkout/src/liballoc/heap.rs"
 $5 = $align; //@line 262 "/checkout/src/liballoc/heap.rs"
 __ZN5alloc9allocator6Layout25from_size_align_unchecked17h1f4c5097bb0a95f9E($1,$4,$5); //@line 262 "/checkout/src/liballoc/heap.rs"
 $$sreg$field = HEAP32[$1>>2]|0; //@line 262 "/checkout/src/liballoc/heap.rs"
 $$sreg$index1 = ((($1)) + 4|0); //@line 262 "/checkout/src/liballoc/heap.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 262 "/checkout/src/liballoc/heap.rs"
 HEAP32[$layout>>2] = $$sreg$field; //@line 262 "/checkout/src/liballoc/heap.rs"
 $layout$index4 = ((($layout)) + 4|0); //@line 262 "/checkout/src/liballoc/heap.rs"
 HEAP32[$layout$index4>>2] = $$sreg$field2; //@line 262 "/checkout/src/liballoc/heap.rs"
 $6 = $ptr; //@line 263 "/checkout/src/liballoc/heap.rs"
 $7 = HEAP32[$layout>>2]|0; //@line 263 "/checkout/src/liballoc/heap.rs"
 $8 = ((($layout)) + 4|0); //@line 263 "/checkout/src/liballoc/heap.rs"
 $9 = HEAP32[$8>>2]|0; //@line 263 "/checkout/src/liballoc/heap.rs"
 __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_7dealloc17h10f2588a340aefeeE($_15,$6,$7,$9); //@line 263 "/checkout/src/liballoc/heap.rs"
 STACKTOP = sp;return; //@line 265 "/checkout/src/liballoc/heap.rs"
}
function __ZN5alloc4heap8box_free17h42c932a9e0b09cc3E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_15 = 0, $align = 0, $layout = 0, $layout$index4 = 0;
 var $ptr = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $_15 = sp + 32|0;
 $layout = sp + 24|0;
 $ptr = sp + 8|0;
 HEAP32[$ptr>>2] = $0;
 $3 = ((($ptr)) + 4|0);
 HEAP32[$3>>2] = $1;
 $4 = ((($ptr)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $5 = HEAP32[$4>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
 $6 = $5<<2; //@line 258 "/checkout/src/liballoc/heap.rs"
 $size = $6; //@line 258 "/checkout/src/liballoc/heap.rs"
 $align = 4; //@line 259 "/checkout/src/liballoc/heap.rs"
 $7 = $size; //@line 261 "/checkout/src/liballoc/heap.rs"
 $8 = ($7|0)!=(0); //@line 261 "/checkout/src/liballoc/heap.rs"
 if (!($8)) {
  STACKTOP = sp;return; //@line 265 "/checkout/src/liballoc/heap.rs"
 }
 $9 = $size; //@line 262 "/checkout/src/liballoc/heap.rs"
 $10 = $align; //@line 262 "/checkout/src/liballoc/heap.rs"
 __ZN5alloc9allocator6Layout25from_size_align_unchecked17h1f4c5097bb0a95f9E($2,$9,$10); //@line 262 "/checkout/src/liballoc/heap.rs"
 $$sreg$field = HEAP32[$2>>2]|0; //@line 262 "/checkout/src/liballoc/heap.rs"
 $$sreg$index1 = ((($2)) + 4|0); //@line 262 "/checkout/src/liballoc/heap.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 262 "/checkout/src/liballoc/heap.rs"
 HEAP32[$layout>>2] = $$sreg$field; //@line 262 "/checkout/src/liballoc/heap.rs"
 $layout$index4 = ((($layout)) + 4|0); //@line 262 "/checkout/src/liballoc/heap.rs"
 HEAP32[$layout$index4>>2] = $$sreg$field2; //@line 262 "/checkout/src/liballoc/heap.rs"
 $11 = HEAP32[$ptr>>2]|0; //@line 263 "/checkout/src/liballoc/heap.rs"
 $12 = HEAP32[$layout>>2]|0; //@line 263 "/checkout/src/liballoc/heap.rs"
 $13 = ((($layout)) + 4|0); //@line 263 "/checkout/src/liballoc/heap.rs"
 $14 = HEAP32[$13>>2]|0; //@line 263 "/checkout/src/liballoc/heap.rs"
 __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_7dealloc17h10f2588a340aefeeE($_15,$11,$12,$14); //@line 263 "/checkout/src/liballoc/heap.rs"
 STACKTOP = sp;return; //@line 265 "/checkout/src/liballoc/heap.rs"
}
function __ZN5alloc4heap8box_free17h546f4f6e40057b73E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_15 = 0, $align = 0, $layout = 0, $layout$index4 = 0;
 var $ptr = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $_15 = sp + 32|0;
 $layout = sp + 24|0;
 $ptr = sp + 8|0;
 HEAP32[$ptr>>2] = $0;
 $3 = ((($ptr)) + 4|0);
 HEAP32[$3>>2] = $1;
 $4 = ((($ptr)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $5 = HEAP32[$4>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
 $6 = $5<<3; //@line 258 "/checkout/src/liballoc/heap.rs"
 $size = $6; //@line 258 "/checkout/src/liballoc/heap.rs"
 $align = 4; //@line 259 "/checkout/src/liballoc/heap.rs"
 $7 = $size; //@line 261 "/checkout/src/liballoc/heap.rs"
 $8 = ($7|0)!=(0); //@line 261 "/checkout/src/liballoc/heap.rs"
 if (!($8)) {
  STACKTOP = sp;return; //@line 265 "/checkout/src/liballoc/heap.rs"
 }
 $9 = $size; //@line 262 "/checkout/src/liballoc/heap.rs"
 $10 = $align; //@line 262 "/checkout/src/liballoc/heap.rs"
 __ZN5alloc9allocator6Layout25from_size_align_unchecked17h1f4c5097bb0a95f9E($2,$9,$10); //@line 262 "/checkout/src/liballoc/heap.rs"
 $$sreg$field = HEAP32[$2>>2]|0; //@line 262 "/checkout/src/liballoc/heap.rs"
 $$sreg$index1 = ((($2)) + 4|0); //@line 262 "/checkout/src/liballoc/heap.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 262 "/checkout/src/liballoc/heap.rs"
 HEAP32[$layout>>2] = $$sreg$field; //@line 262 "/checkout/src/liballoc/heap.rs"
 $layout$index4 = ((($layout)) + 4|0); //@line 262 "/checkout/src/liballoc/heap.rs"
 HEAP32[$layout$index4>>2] = $$sreg$field2; //@line 262 "/checkout/src/liballoc/heap.rs"
 $11 = HEAP32[$ptr>>2]|0; //@line 263 "/checkout/src/liballoc/heap.rs"
 $12 = HEAP32[$layout>>2]|0; //@line 263 "/checkout/src/liballoc/heap.rs"
 $13 = ((($layout)) + 4|0); //@line 263 "/checkout/src/liballoc/heap.rs"
 $14 = HEAP32[$13>>2]|0; //@line 263 "/checkout/src/liballoc/heap.rs"
 __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_7dealloc17h10f2588a340aefeeE($_15,$11,$12,$14); //@line 263 "/checkout/src/liballoc/heap.rs"
 STACKTOP = sp;return; //@line 265 "/checkout/src/liballoc/heap.rs"
}
function __ZN5alloc4heap8box_free17hd0c03be837d4e9ccE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_15 = 0, $align = 0, $layout = 0, $layout$index4 = 0, $ptr = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $_15 = sp + 32|0;
 $layout = sp + 24|0;
 $ptr = sp + 8|0;
 HEAP32[$ptr>>2] = $0;
 $3 = ((($ptr)) + 4|0);
 HEAP32[$3>>2] = $1;
 $4 = ((($ptr)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $5 = HEAP32[$4>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
 $6 = ((($5)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $7 = HEAP32[$6>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
 $size = $7; //@line 258 "/checkout/src/liballoc/heap.rs"
 $8 = ((($ptr)) + 4|0); //@line 259 "/checkout/src/liballoc/heap.rs"
 $9 = HEAP32[$8>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
 $10 = ((($9)) + 8|0); //@line 259 "/checkout/src/liballoc/heap.rs"
 $11 = HEAP32[$10>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
 $align = $11; //@line 259 "/checkout/src/liballoc/heap.rs"
 $12 = $size; //@line 261 "/checkout/src/liballoc/heap.rs"
 $13 = ($12|0)!=(0); //@line 261 "/checkout/src/liballoc/heap.rs"
 if (!($13)) {
  STACKTOP = sp;return; //@line 265 "/checkout/src/liballoc/heap.rs"
 }
 $14 = $size; //@line 262 "/checkout/src/liballoc/heap.rs"
 $15 = $align; //@line 262 "/checkout/src/liballoc/heap.rs"
 __ZN5alloc9allocator6Layout25from_size_align_unchecked17h1f4c5097bb0a95f9E($2,$14,$15); //@line 262 "/checkout/src/liballoc/heap.rs"
 $$sreg$field = HEAP32[$2>>2]|0; //@line 262 "/checkout/src/liballoc/heap.rs"
 $$sreg$index1 = ((($2)) + 4|0); //@line 262 "/checkout/src/liballoc/heap.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 262 "/checkout/src/liballoc/heap.rs"
 HEAP32[$layout>>2] = $$sreg$field; //@line 262 "/checkout/src/liballoc/heap.rs"
 $layout$index4 = ((($layout)) + 4|0); //@line 262 "/checkout/src/liballoc/heap.rs"
 HEAP32[$layout$index4>>2] = $$sreg$field2; //@line 262 "/checkout/src/liballoc/heap.rs"
 $16 = HEAP32[$ptr>>2]|0; //@line 263 "/checkout/src/liballoc/heap.rs"
 $17 = HEAP32[$layout>>2]|0; //@line 263 "/checkout/src/liballoc/heap.rs"
 $18 = ((($layout)) + 4|0); //@line 263 "/checkout/src/liballoc/heap.rs"
 $19 = HEAP32[$18>>2]|0; //@line 263 "/checkout/src/liballoc/heap.rs"
 __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_7dealloc17h10f2588a340aefeeE($_15,$16,$17,$19); //@line 263 "/checkout/src/liballoc/heap.rs"
 STACKTOP = sp;return; //@line 265 "/checkout/src/liballoc/heap.rs"
}
function __ZN5alloc4heap8box_free17he9a97f96773fb35cE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_15 = 0, $align = 0, $layout = 0, $layout$index4 = 0;
 var $ptr = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $_15 = sp + 32|0;
 $layout = sp + 24|0;
 $ptr = sp + 8|0;
 HEAP32[$ptr>>2] = $0;
 $3 = ((($ptr)) + 4|0);
 HEAP32[$3>>2] = $1;
 $4 = ((($ptr)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $5 = HEAP32[$4>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
 $6 = ($5*12)|0; //@line 258 "/checkout/src/liballoc/heap.rs"
 $size = $6; //@line 258 "/checkout/src/liballoc/heap.rs"
 $align = 4; //@line 259 "/checkout/src/liballoc/heap.rs"
 $7 = $size; //@line 261 "/checkout/src/liballoc/heap.rs"
 $8 = ($7|0)!=(0); //@line 261 "/checkout/src/liballoc/heap.rs"
 if (!($8)) {
  STACKTOP = sp;return; //@line 265 "/checkout/src/liballoc/heap.rs"
 }
 $9 = $size; //@line 262 "/checkout/src/liballoc/heap.rs"
 $10 = $align; //@line 262 "/checkout/src/liballoc/heap.rs"
 __ZN5alloc9allocator6Layout25from_size_align_unchecked17h1f4c5097bb0a95f9E($2,$9,$10); //@line 262 "/checkout/src/liballoc/heap.rs"
 $$sreg$field = HEAP32[$2>>2]|0; //@line 262 "/checkout/src/liballoc/heap.rs"
 $$sreg$index1 = ((($2)) + 4|0); //@line 262 "/checkout/src/liballoc/heap.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 262 "/checkout/src/liballoc/heap.rs"
 HEAP32[$layout>>2] = $$sreg$field; //@line 262 "/checkout/src/liballoc/heap.rs"
 $layout$index4 = ((($layout)) + 4|0); //@line 262 "/checkout/src/liballoc/heap.rs"
 HEAP32[$layout$index4>>2] = $$sreg$field2; //@line 262 "/checkout/src/liballoc/heap.rs"
 $11 = HEAP32[$ptr>>2]|0; //@line 263 "/checkout/src/liballoc/heap.rs"
 $12 = HEAP32[$layout>>2]|0; //@line 263 "/checkout/src/liballoc/heap.rs"
 $13 = ((($layout)) + 4|0); //@line 263 "/checkout/src/liballoc/heap.rs"
 $14 = HEAP32[$13>>2]|0; //@line 263 "/checkout/src/liballoc/heap.rs"
 __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_7dealloc17h10f2588a340aefeeE($_15,$11,$12,$14); //@line 263 "/checkout/src/liballoc/heap.rs"
 STACKTOP = sp;return; //@line 265 "/checkout/src/liballoc/heap.rs"
}
function __ZN5alloc9allocator5Alloc11alloc_array17h7e9776e5f88bd715E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_15 = 0, $_3 = 0, $cond = 0, $layout = 0, $n = 0, $self = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $_15 = sp + 48|0;
 $_10 = sp + 32|0;
 $_3 = sp + 16|0;
 $self = $1;
 $n = $2;
 $4 = $n; //@line 969 "/checkout/src/liballoc/allocator.rs"
 __ZN5alloc9allocator6Layout5array17h400e7ec2b99ceddfE($_3,$4); //@line 969 "/checkout/src/liballoc/allocator.rs"
 $5 = HEAP32[$_3>>2]|0; //@line 970 "/checkout/src/liballoc/allocator.rs"
 $cond = ($5|0)==(1); //@line 970 "/checkout/src/liballoc/allocator.rs"
 if ($cond) {
  $9 = ((($_3)) + 4|0); //@line 970 "/checkout/src/liballoc/allocator.rs"
  $layout = $9; //@line 970 "/checkout/src/liballoc/allocator.rs"
  $10 = $layout; //@line 970 "/checkout/src/liballoc/allocator.rs"
  $11 = (__ZN5alloc9allocator6Layout4size17hf21f6297eca498a6E($10)|0); //@line 970 "/checkout/src/liballoc/allocator.rs"
  $12 = ($11>>>0)>(0); //@line 970 "/checkout/src/liballoc/allocator.rs"
  if ($12) {
   $6 = $self; //@line 972 "/checkout/src/liballoc/allocator.rs"
   $7 = $layout; //@line 972 "/checkout/src/liballoc/allocator.rs"
   __ZN63__LT_alloc__allocator__Layout_u20_as_u20_core__clone__Clone_GT_5clone17h2b8724cfff8cb0c8E($3,$7); //@line 972 "/checkout/src/liballoc/allocator.rs"
   $$sreg$field = HEAP32[$3>>2]|0; //@line 972 "/checkout/src/liballoc/allocator.rs"
   $$sreg$index1 = ((($3)) + 4|0); //@line 972 "/checkout/src/liballoc/allocator.rs"
   $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 972 "/checkout/src/liballoc/allocator.rs"
   __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_5alloc17h1df6c2188654da5aE($_10,$6,$$sreg$field,$$sreg$field2); //@line 972 "/checkout/src/liballoc/allocator.rs"
   __ZN47__LT_core__result__Result_LT_T_C__u20_E_GT__GT_3map17h63e7db712b2f2e4bE($0,$_10); //@line 972 "/checkout/src/liballoc/allocator.rs"
   STACKTOP = sp;return; //@line 980 "/checkout/src/liballoc/allocator.rs"
  }
 }
 __ZN5alloc9allocator8AllocErr13invalid_input17ha7d0785dd9ae539aE($_15,15122,30); //@line 978 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$0>>2] = 1; //@line 978 "/checkout/src/liballoc/allocator.rs"
 $8 = ((($0)) + 4|0); //@line 978 "/checkout/src/liballoc/allocator.rs"
 ;HEAP32[$8>>2]=HEAP32[$_15>>2]|0;HEAP32[$8+4>>2]=HEAP32[$_15+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$_15+8>>2]|0; //@line 978 "/checkout/src/liballoc/allocator.rs"
 STACKTOP = sp;return; //@line 980 "/checkout/src/liballoc/allocator.rs"
}
function __ZN5alloc9allocator5Alloc11alloc_array17h8794b61fba216641E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_15 = 0, $_3 = 0, $cond = 0, $layout = 0, $n = 0, $self = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $_15 = sp + 48|0;
 $_10 = sp + 32|0;
 $_3 = sp + 16|0;
 $self = $1;
 $n = $2;
 $4 = $n; //@line 969 "/checkout/src/liballoc/allocator.rs"
 __ZN5alloc9allocator6Layout5array17h2fe3026d0ba14cafE($_3,$4); //@line 969 "/checkout/src/liballoc/allocator.rs"
 $5 = HEAP32[$_3>>2]|0; //@line 970 "/checkout/src/liballoc/allocator.rs"
 $cond = ($5|0)==(1); //@line 970 "/checkout/src/liballoc/allocator.rs"
 if ($cond) {
  $9 = ((($_3)) + 4|0); //@line 970 "/checkout/src/liballoc/allocator.rs"
  $layout = $9; //@line 970 "/checkout/src/liballoc/allocator.rs"
  $10 = $layout; //@line 970 "/checkout/src/liballoc/allocator.rs"
  $11 = (__ZN5alloc9allocator6Layout4size17hf21f6297eca498a6E($10)|0); //@line 970 "/checkout/src/liballoc/allocator.rs"
  $12 = ($11>>>0)>(0); //@line 970 "/checkout/src/liballoc/allocator.rs"
  if ($12) {
   $6 = $self; //@line 972 "/checkout/src/liballoc/allocator.rs"
   $7 = $layout; //@line 972 "/checkout/src/liballoc/allocator.rs"
   __ZN63__LT_alloc__allocator__Layout_u20_as_u20_core__clone__Clone_GT_5clone17h2b8724cfff8cb0c8E($3,$7); //@line 972 "/checkout/src/liballoc/allocator.rs"
   $$sreg$field = HEAP32[$3>>2]|0; //@line 972 "/checkout/src/liballoc/allocator.rs"
   $$sreg$index1 = ((($3)) + 4|0); //@line 972 "/checkout/src/liballoc/allocator.rs"
   $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 972 "/checkout/src/liballoc/allocator.rs"
   __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_5alloc17h1df6c2188654da5aE($_10,$6,$$sreg$field,$$sreg$field2); //@line 972 "/checkout/src/liballoc/allocator.rs"
   __ZN47__LT_core__result__Result_LT_T_C__u20_E_GT__GT_3map17h91d241b6f5bb9943E($0,$_10); //@line 972 "/checkout/src/liballoc/allocator.rs"
   STACKTOP = sp;return; //@line 980 "/checkout/src/liballoc/allocator.rs"
  }
 }
 __ZN5alloc9allocator8AllocErr13invalid_input17ha7d0785dd9ae539aE($_15,15122,30); //@line 978 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$0>>2] = 1; //@line 978 "/checkout/src/liballoc/allocator.rs"
 $8 = ((($0)) + 4|0); //@line 978 "/checkout/src/liballoc/allocator.rs"
 ;HEAP32[$8>>2]=HEAP32[$_15>>2]|0;HEAP32[$8+4>>2]=HEAP32[$_15+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$_15+8>>2]|0; //@line 978 "/checkout/src/liballoc/allocator.rs"
 STACKTOP = sp;return; //@line 980 "/checkout/src/liballoc/allocator.rs"
}
function __ZN5alloc9allocator5Alloc11alloc_array17h8ab62f40d63c8786E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_15 = 0, $_3 = 0, $cond = 0, $layout = 0, $n = 0, $self = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $_15 = sp + 48|0;
 $_10 = sp + 32|0;
 $_3 = sp + 16|0;
 $self = $1;
 $n = $2;
 $4 = $n; //@line 969 "/checkout/src/liballoc/allocator.rs"
 __ZN5alloc9allocator6Layout5array17hab185e20db305362E($_3,$4); //@line 969 "/checkout/src/liballoc/allocator.rs"
 $5 = HEAP32[$_3>>2]|0; //@line 970 "/checkout/src/liballoc/allocator.rs"
 $cond = ($5|0)==(1); //@line 970 "/checkout/src/liballoc/allocator.rs"
 if ($cond) {
  $9 = ((($_3)) + 4|0); //@line 970 "/checkout/src/liballoc/allocator.rs"
  $layout = $9; //@line 970 "/checkout/src/liballoc/allocator.rs"
  $10 = $layout; //@line 970 "/checkout/src/liballoc/allocator.rs"
  $11 = (__ZN5alloc9allocator6Layout4size17hf21f6297eca498a6E($10)|0); //@line 970 "/checkout/src/liballoc/allocator.rs"
  $12 = ($11>>>0)>(0); //@line 970 "/checkout/src/liballoc/allocator.rs"
  if ($12) {
   $6 = $self; //@line 972 "/checkout/src/liballoc/allocator.rs"
   $7 = $layout; //@line 972 "/checkout/src/liballoc/allocator.rs"
   __ZN63__LT_alloc__allocator__Layout_u20_as_u20_core__clone__Clone_GT_5clone17h2b8724cfff8cb0c8E($3,$7); //@line 972 "/checkout/src/liballoc/allocator.rs"
   $$sreg$field = HEAP32[$3>>2]|0; //@line 972 "/checkout/src/liballoc/allocator.rs"
   $$sreg$index1 = ((($3)) + 4|0); //@line 972 "/checkout/src/liballoc/allocator.rs"
   $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 972 "/checkout/src/liballoc/allocator.rs"
   __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_5alloc17h1df6c2188654da5aE($_10,$6,$$sreg$field,$$sreg$field2); //@line 972 "/checkout/src/liballoc/allocator.rs"
   __ZN47__LT_core__result__Result_LT_T_C__u20_E_GT__GT_3map17h8f564d7bef5b07b3E($0,$_10); //@line 972 "/checkout/src/liballoc/allocator.rs"
   STACKTOP = sp;return; //@line 980 "/checkout/src/liballoc/allocator.rs"
  }
 }
 __ZN5alloc9allocator8AllocErr13invalid_input17ha7d0785dd9ae539aE($_15,15122,30); //@line 978 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$0>>2] = 1; //@line 978 "/checkout/src/liballoc/allocator.rs"
 $8 = ((($0)) + 4|0); //@line 978 "/checkout/src/liballoc/allocator.rs"
 ;HEAP32[$8>>2]=HEAP32[$_15>>2]|0;HEAP32[$8+4>>2]=HEAP32[$_15+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$_15+8>>2]|0; //@line 978 "/checkout/src/liballoc/allocator.rs"
 STACKTOP = sp;return; //@line 980 "/checkout/src/liballoc/allocator.rs"
}
function __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_7realloc17h42923a80abd93e7aE($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $7 = 0, $8 = 0, $9 = 0, $_26 = 0, $_27 = 0, $_29 = 0, $_6 = 0, $err = 0, $layout = 0;
 var $new_layout = 0, $ptr = 0, $ptr1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $_29 = sp + 76|0;
 $_27 = sp + 64|0;
 $_26 = sp + 52|0;
 $_6 = sp + 36|0;
 $err = sp + 24|0;
 $new_layout = sp + 16|0;
 $layout = sp + 8|0;
 $self = $1;
 $ptr = $2;
 HEAP32[$layout>>2] = $3;
 $7 = ((($layout)) + 4|0);
 HEAP32[$7>>2] = $4;
 HEAP32[$new_layout>>2] = $5;
 $8 = ((($new_layout)) + 4|0);
 HEAP32[$8>>2] = $6;
 __ZN4core3mem13uninitialized17h207771a6410a72eaE($_6); //@line 126 "/checkout/src/liballoc/heap.rs"
 __ZN41__LT_core__mem__ManuallyDrop_LT_T_GT__GT_3new17hd38fa85c3ed08875E($err,$_6); //@line 126 "/checkout/src/liballoc/heap.rs"
 $9 = $ptr; //@line 127 "/checkout/src/liballoc/heap.rs"
 $10 = (__ZN5alloc9allocator6Layout4size17hf21f6297eca498a6E($layout)|0); //@line 128 "/checkout/src/liballoc/heap.rs"
 $11 = (__ZN5alloc9allocator6Layout5align17h2a1da598a1c292caE($layout)|0); //@line 129 "/checkout/src/liballoc/heap.rs"
 $12 = (__ZN5alloc9allocator6Layout4size17hf21f6297eca498a6E($new_layout)|0); //@line 130 "/checkout/src/liballoc/heap.rs"
 $13 = (__ZN5alloc9allocator6Layout5align17h2a1da598a1c292caE($new_layout)|0); //@line 131 "/checkout/src/liballoc/heap.rs"
 $14 = (__ZN79__LT_core__mem__ManuallyDrop_LT_T_GT__u20_as_u20_core__ops__deref__DerefMut_GT_9deref_mut17h84408d281bd43844E($err)|0); //@line 132 "/checkout/src/liballoc/heap.rs"
 $15 = (___rust_realloc($9,$10,$11,$12,$13,$14)|0); //@line 127 "/checkout/src/liballoc/heap.rs"
 $ptr1 = $15; //@line 127 "/checkout/src/liballoc/heap.rs"
 $16 = $ptr1; //@line 133 "/checkout/src/liballoc/heap.rs"
 $17 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h29fb7da4258afde7E($16)|0); //@line 133 "/checkout/src/liballoc/heap.rs"
 if ($17) {
  ;HEAP32[$_27>>2]=HEAP32[$err>>2]|0;HEAP32[$_27+4>>2]=HEAP32[$err+4>>2]|0;HEAP32[$_27+8>>2]=HEAP32[$err+8>>2]|0; //@line 134 "/checkout/src/liballoc/heap.rs"
  __ZN41__LT_core__mem__ManuallyDrop_LT_T_GT__GT_10into_inner17ha408edfe4da19cb5E($_26,$_27); //@line 134 "/checkout/src/liballoc/heap.rs"
  HEAP32[$0>>2] = 1; //@line 134 "/checkout/src/liballoc/heap.rs"
  $18 = ((($0)) + 4|0); //@line 134 "/checkout/src/liballoc/heap.rs"
  ;HEAP32[$18>>2]=HEAP32[$_26>>2]|0;HEAP32[$18+4>>2]=HEAP32[$_26+4>>2]|0;HEAP32[$18+8>>2]=HEAP32[$_26+8>>2]|0; //@line 134 "/checkout/src/liballoc/heap.rs"
  STACKTOP = sp;return; //@line 139 "/checkout/src/liballoc/heap.rs"
 } else {
  ;HEAP32[$_29>>2]=HEAP32[$err>>2]|0;HEAP32[$_29+4>>2]=HEAP32[$err+4>>2]|0;HEAP32[$_29+8>>2]=HEAP32[$err+8>>2]|0; //@line 136 "/checkout/src/liballoc/heap.rs"
  __ZN4core3mem6forget17h474ca36a5433ec61E($_29); //@line 136 "/checkout/src/liballoc/heap.rs"
  $19 = $ptr1; //@line 137 "/checkout/src/liballoc/heap.rs"
  HEAP32[$0>>2] = 0; //@line 137 "/checkout/src/liballoc/heap.rs"
  $20 = ((($0)) + 4|0); //@line 137 "/checkout/src/liballoc/heap.rs"
  HEAP32[$20>>2] = $19; //@line 137 "/checkout/src/liballoc/heap.rs"
  STACKTOP = sp;return; //@line 139 "/checkout/src/liballoc/heap.rs"
 }
}
function __ZN5rustv3r3d6vector4Vec417h52c31fcc1e26f7b7E($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $10 = 0, $11 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $w = 0.0, $x = 0.0, $y = 0.0, $z = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x = $1;
 $y = $2;
 $z = $3;
 $w = $4;
 $5 = $x; //@line 596 "r3d/vector.rs"
 $6 = $y; //@line 596 "r3d/vector.rs"
 $7 = $z; //@line 596 "r3d/vector.rs"
 $8 = $w; //@line 596 "r3d/vector.rs"
 HEAPF32[$0>>2] = $5; //@line 596 "r3d/vector.rs"
 $9 = ((($0)) + 4|0); //@line 596 "r3d/vector.rs"
 HEAPF32[$9>>2] = $6; //@line 596 "r3d/vector.rs"
 $10 = ((($0)) + 8|0); //@line 596 "r3d/vector.rs"
 HEAPF32[$10>>2] = $7; //@line 596 "r3d/vector.rs"
 $11 = ((($0)) + 12|0); //@line 596 "r3d/vector.rs"
 HEAPF32[$11>>2] = $8; //@line 596 "r3d/vector.rs"
 STACKTOP = sp;return; //@line 596 "r3d/vector.rs"
}
function __ZN5rustv3r3d6vector4Vec317h0bc26ddf46bf1859E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $x = 0.0, $y = 0.0, $z = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x = $1;
 $y = $2;
 $z = $3;
 $4 = $x; //@line 597 "r3d/vector.rs"
 $5 = $y; //@line 597 "r3d/vector.rs"
 $6 = $z; //@line 597 "r3d/vector.rs"
 HEAPF32[$0>>2] = $4; //@line 597 "r3d/vector.rs"
 $7 = ((($0)) + 4|0); //@line 597 "r3d/vector.rs"
 HEAPF32[$7>>2] = $5; //@line 597 "r3d/vector.rs"
 $8 = ((($0)) + 8|0); //@line 597 "r3d/vector.rs"
 HEAPF32[$8>>2] = $6; //@line 597 "r3d/vector.rs"
 STACKTOP = sp;return; //@line 597 "r3d/vector.rs"
}
function __ZN5rustv3r3d6vector4Vec217h13338ae8e54872e4E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $_0 = 0, $retVal$index1 = 0, $x = 0.0, $y = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_0 = sp + 8|0;
 $x = $0;
 $y = $1;
 $2 = $x; //@line 598 "r3d/vector.rs"
 $3 = $y; //@line 598 "r3d/vector.rs"
 HEAPF32[$_0>>2] = $2; //@line 598 "r3d/vector.rs"
 $4 = ((($_0)) + 4|0); //@line 598 "r3d/vector.rs"
 HEAPF32[$4>>2] = $3; //@line 598 "r3d/vector.rs"
 $5 = +HEAPF32[$_0>>2]; //@line 598 "r3d/vector.rs"
 $6 = ((($_0)) + 4|0); //@line 598 "r3d/vector.rs"
 $7 = +HEAPF32[$6>>2]; //@line 598 "r3d/vector.rs"
 HEAPF32[$retVal>>2] = $5; //@line 598 "r3d/vector.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 598 "r3d/vector.rs"
 HEAPF32[$retVal$index1>>2] = $7; //@line 598 "r3d/vector.rs"
 STACKTOP = sp;return; //@line 598 "r3d/vector.rs"
}
function __ZN5rustv3r3d6vector6VecOps10vnormalize17hc3b63e8f5c50fcc5E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $1;
 $2 = $self; //@line 1629 "r3d/vector.rs"
 $3 = (+__ZN5rustv3r3d3one17had807af2f7293135E()); //@line 1629 "r3d/vector.rs"
 $4 = $self; //@line 1629 "r3d/vector.rs"
 $5 = (+__ZN5rustv3r3d6vector6VecOps4vsqr17h106f922faa9d8f4cE($4)); //@line 1629 "r3d/vector.rs"
 $6 = (+__ZN48__LT_f32_u20_as_u20_rustv__r3d__vector__Sqrt_GT_4sqrt17h84e9c6c2ec939bd9E($5)); //@line 1629 "r3d/vector.rs"
 $7 = (+__ZN45__LT_f32_u20_as_u20_core__ops__arith__Div_GT_3div17ha905544e578c4868E($3,$6)); //@line 1629 "r3d/vector.rs"
 __ZN48__LT_V_u20_as_u20_rustv__r3d__vector__VecOps_GT_6vscale17hcd8be07e1eb82ce2E($0,$2,$7); //@line 1629 "r3d/vector.rs"
 STACKTOP = sp;return; //@line 1629 "r3d/vector.rs"
}
function __ZN5rustv3r3d6vector6VecOps4vsqr17h106f922faa9d8f4cE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0.0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 1624 "r3d/vector.rs"
 $2 = $self; //@line 1624 "r3d/vector.rs"
 $3 = (+__ZN5rustv3r3d6vector6VecOps4vdot17h632cdfc3ebcb2aa7E($1,$2)); //@line 1624 "r3d/vector.rs"
 STACKTOP = sp;return (+$3); //@line 1624 "r3d/vector.rs"
}
function __ZN48__LT_f32_u20_as_u20_rustv__r3d__vector__Sqrt_GT_4sqrt17h84e9c6c2ec939bd9E($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $self = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 358 "r3d/vector.rs"
 $2 = (+__ZN3std3f3221__LT_impl_u20_f32_GT_4sqrt17hbb28710c3caffed0E($1)); //@line 358 "r3d/vector.rs"
 STACKTOP = sp;return (+$2); //@line 358 "r3d/vector.rs"
}
function __ZN48__LT_V_u20_as_u20_rustv__r3d__vector__VecOps_GT_6vscale17hcd8be07e1eb82ce2E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $f = 0.0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $1;
 $f = $2;
 $3 = $self; //@line 2008 "r3d/vector.rs"
 $4 = (+__ZN72__LT_rustv__r3d__vector__Vec3_LT_T_GT__u20_as_u20_rustv__r3d__HasXYZ_GT_1x17he96d562258a94965E($3)); //@line 2008 "r3d/vector.rs"
 $5 = $f; //@line 2008 "r3d/vector.rs"
 $6 = (+__ZN45__LT_f32_u20_as_u20_core__ops__arith__Mul_GT_3mul17h85d76a03b8e09b50E($4,$5)); //@line 2008 "r3d/vector.rs"
 $7 = $self; //@line 2008 "r3d/vector.rs"
 $8 = (+__ZN72__LT_rustv__r3d__vector__Vec3_LT_T_GT__u20_as_u20_rustv__r3d__HasXYZ_GT_1y17hc1a3b0d5cbe8c983E($7)); //@line 2008 "r3d/vector.rs"
 $9 = $f; //@line 2008 "r3d/vector.rs"
 $10 = (+__ZN45__LT_f32_u20_as_u20_core__ops__arith__Mul_GT_3mul17h85d76a03b8e09b50E($8,$9)); //@line 2008 "r3d/vector.rs"
 $11 = $self; //@line 2008 "r3d/vector.rs"
 $12 = (+__ZN72__LT_rustv__r3d__vector__Vec3_LT_T_GT__u20_as_u20_rustv__r3d__HasXYZ_GT_1z17h5d0a14e1a19fab19E($11)); //@line 2008 "r3d/vector.rs"
 $13 = $f; //@line 2008 "r3d/vector.rs"
 $14 = (+__ZN45__LT_f32_u20_as_u20_core__ops__arith__Mul_GT_3mul17h85d76a03b8e09b50E($12,$13)); //@line 2008 "r3d/vector.rs"
 __ZN72__LT_rustv__r3d__vector__Vec3_LT_T_GT__u20_as_u20_rustv__r3d__HasXYZ_GT_8from_xyz17h76b8cebd14af9c83E($0,$6,$10,$14); //@line 2008 "r3d/vector.rs"
 STACKTOP = sp;return; //@line 2008 "r3d/vector.rs"
}
function __ZN72__LT_rustv__r3d__vector__Vec3_LT_T_GT__u20_as_u20_rustv__r3d__HasXYZ_GT_1x17he96d562258a94965E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 1951 "r3d/vector.rs"
 $2 = (+__ZN4core5clone5Clone5clone17h74371fa23fb4a621E($1)); //@line 1951 "r3d/vector.rs"
 STACKTOP = sp;return (+$2); //@line 1951 "r3d/vector.rs"
}
function __ZN72__LT_rustv__r3d__vector__Vec3_LT_T_GT__u20_as_u20_rustv__r3d__HasXYZ_GT_1y17hc1a3b0d5cbe8c983E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0.0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 1952 "r3d/vector.rs"
 $2 = ((($1)) + 4|0); //@line 1952 "r3d/vector.rs"
 $3 = (+__ZN4core5clone5Clone5clone17h74371fa23fb4a621E($2)); //@line 1952 "r3d/vector.rs"
 STACKTOP = sp;return (+$3); //@line 1952 "r3d/vector.rs"
}
function __ZN72__LT_rustv__r3d__vector__Vec3_LT_T_GT__u20_as_u20_rustv__r3d__HasXYZ_GT_1z17h5d0a14e1a19fab19E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0.0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 1953 "r3d/vector.rs"
 $2 = ((($1)) + 8|0); //@line 1953 "r3d/vector.rs"
 $3 = (+__ZN4core5clone5Clone5clone17h74371fa23fb4a621E($2)); //@line 1953 "r3d/vector.rs"
 STACKTOP = sp;return (+$3); //@line 1953 "r3d/vector.rs"
}
function __ZN72__LT_rustv__r3d__vector__Vec3_LT_T_GT__u20_as_u20_rustv__r3d__HasXYZ_GT_8from_xyz17h76b8cebd14af9c83E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $x = 0, $y = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $z = sp + 8|0;
 $y = sp + 4|0;
 $x = sp;
 HEAPF32[$x>>2] = $1;
 HEAPF32[$y>>2] = $2;
 HEAPF32[$z>>2] = $3;
 $4 = (+__ZN4core5clone5Clone5clone17h74371fa23fb4a621E($x)); //@line 1954 "r3d/vector.rs"
 $5 = (+__ZN4core5clone5Clone5clone17h74371fa23fb4a621E($y)); //@line 1954 "r3d/vector.rs"
 $6 = (+__ZN4core5clone5Clone5clone17h74371fa23fb4a621E($z)); //@line 1954 "r3d/vector.rs"
 HEAPF32[$0>>2] = $4; //@line 1954 "r3d/vector.rs"
 $7 = ((($0)) + 4|0); //@line 1954 "r3d/vector.rs"
 HEAPF32[$7>>2] = $5; //@line 1954 "r3d/vector.rs"
 $8 = ((($0)) + 8|0); //@line 1954 "r3d/vector.rs"
 HEAPF32[$8>>2] = $6; //@line 1954 "r3d/vector.rs"
 STACKTOP = sp;return; //@line 1954 "r3d/vector.rs"
}
function __ZN5rustv3r3d6vector6VecOps4vdot17h632cdfc3ebcb2aa7E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_4 = 0, $b = 0, $personalityslot = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $personalityslot = sp + 24|0;
 $_4 = sp + 8|0;
 $self = $0;
 $b = $1;
 $2 = $self; //@line 1610 "r3d/vector.rs"
 $3 = $b; //@line 1610 "r3d/vector.rs"
 __ZN48__LT_V_u20_as_u20_rustv__r3d__vector__VecOps_GT_4vmul17h63b919a47e2f2351E($_4,$2,$3); //@line 1610 "r3d/vector.rs"
 __THREW__ = 0;
 $4 = (+invoke_di(304,($_4|0))); //@line 1610 "r3d/vector.rs"
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  HEAP32[$personalityslot>>2] = $7;
  $9 = ((($personalityslot)) + 4|0);
  HEAP32[$9>>2] = $8;
  $10 = HEAP32[$personalityslot>>2]|0; //@line 1610 "r3d/vector.rs"
  $11 = ((($personalityslot)) + 4|0); //@line 1610 "r3d/vector.rs"
  $12 = HEAP32[$11>>2]|0; //@line 1610 "r3d/vector.rs"
  ___resumeException($10|0);
  // unreachable;
 } else {
  STACKTOP = sp;return (+$4); //@line 1610 "r3d/vector.rs"
 }
 return +(0.0);
}
function __ZN48__LT_V_u20_as_u20_rustv__r3d__vector__VecOps_GT_4vmul17h63b919a47e2f2351E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $b = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $1;
 $b = $2;
 $3 = $self; //@line 2009 "r3d/vector.rs"
 $4 = (+__ZN72__LT_rustv__r3d__vector__Vec3_LT_T_GT__u20_as_u20_rustv__r3d__HasXYZ_GT_1x17he96d562258a94965E($3)); //@line 2009 "r3d/vector.rs"
 $5 = $b; //@line 2009 "r3d/vector.rs"
 $6 = (+__ZN72__LT_rustv__r3d__vector__Vec3_LT_T_GT__u20_as_u20_rustv__r3d__HasXYZ_GT_1x17he96d562258a94965E($5)); //@line 2009 "r3d/vector.rs"
 $7 = (+__ZN45__LT_f32_u20_as_u20_core__ops__arith__Mul_GT_3mul17h85d76a03b8e09b50E($4,$6)); //@line 2009 "r3d/vector.rs"
 $8 = $self; //@line 2009 "r3d/vector.rs"
 $9 = (+__ZN72__LT_rustv__r3d__vector__Vec3_LT_T_GT__u20_as_u20_rustv__r3d__HasXYZ_GT_1y17hc1a3b0d5cbe8c983E($8)); //@line 2009 "r3d/vector.rs"
 $10 = $b; //@line 2009 "r3d/vector.rs"
 $11 = (+__ZN72__LT_rustv__r3d__vector__Vec3_LT_T_GT__u20_as_u20_rustv__r3d__HasXYZ_GT_1y17hc1a3b0d5cbe8c983E($10)); //@line 2009 "r3d/vector.rs"
 $12 = (+__ZN45__LT_f32_u20_as_u20_core__ops__arith__Mul_GT_3mul17h85d76a03b8e09b50E($9,$11)); //@line 2009 "r3d/vector.rs"
 $13 = $self; //@line 2009 "r3d/vector.rs"
 $14 = (+__ZN72__LT_rustv__r3d__vector__Vec3_LT_T_GT__u20_as_u20_rustv__r3d__HasXYZ_GT_1z17h5d0a14e1a19fab19E($13)); //@line 2009 "r3d/vector.rs"
 $15 = $b; //@line 2009 "r3d/vector.rs"
 $16 = (+__ZN72__LT_rustv__r3d__vector__Vec3_LT_T_GT__u20_as_u20_rustv__r3d__HasXYZ_GT_1z17h5d0a14e1a19fab19E($15)); //@line 2009 "r3d/vector.rs"
 $17 = (+__ZN45__LT_f32_u20_as_u20_core__ops__arith__Mul_GT_3mul17h85d76a03b8e09b50E($14,$16)); //@line 2009 "r3d/vector.rs"
 __ZN72__LT_rustv__r3d__vector__Vec3_LT_T_GT__u20_as_u20_rustv__r3d__HasXYZ_GT_8from_xyz17h76b8cebd14af9c83E($0,$7,$12,$17); //@line 2009 "r3d/vector.rs"
 STACKTOP = sp;return; //@line 2009 "r3d/vector.rs"
}
function __ZN48__LT_V_u20_as_u20_rustv__r3d__vector__VecOps_GT_10vsum_elems17hfea8d82c634e23c5E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 2010 "r3d/vector.rs"
 $2 = (+__ZN72__LT_rustv__r3d__vector__Vec3_LT_T_GT__u20_as_u20_rustv__r3d__HasXYZ_GT_1x17he96d562258a94965E($1)); //@line 2010 "r3d/vector.rs"
 $3 = $self; //@line 2010 "r3d/vector.rs"
 $4 = (+__ZN72__LT_rustv__r3d__vector__Vec3_LT_T_GT__u20_as_u20_rustv__r3d__HasXYZ_GT_1y17hc1a3b0d5cbe8c983E($3)); //@line 2010 "r3d/vector.rs"
 $5 = (+__ZN45__LT_f32_u20_as_u20_core__ops__arith__Add_GT_3add17h815deb0ce4b370b5E($2,$4)); //@line 2010 "r3d/vector.rs"
 $6 = $self; //@line 2010 "r3d/vector.rs"
 $7 = (+__ZN72__LT_rustv__r3d__vector__Vec3_LT_T_GT__u20_as_u20_rustv__r3d__HasXYZ_GT_1z17h5d0a14e1a19fab19E($6)); //@line 2010 "r3d/vector.rs"
 $8 = (+__ZN45__LT_f32_u20_as_u20_core__ops__arith__Add_GT_3add17h815deb0ce4b370b5E($5,$7)); //@line 2010 "r3d/vector.rs"
 STACKTOP = sp;return (+$8); //@line 2010 "r3d/vector.rs"
}
function __ZN71__LT_rustv__r3d__vector__Vec2_LT_T_GT__u20_as_u20_rustv__r3d__HasXY_GT_1x17h71b0c38254f0a90cE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 1943 "r3d/vector.rs"
 $2 = (+__ZN4core5clone5Clone5clone17h74371fa23fb4a621E($1)); //@line 1943 "r3d/vector.rs"
 STACKTOP = sp;return (+$2); //@line 1943 "r3d/vector.rs"
}
function __ZN71__LT_rustv__r3d__vector__Vec2_LT_T_GT__u20_as_u20_rustv__r3d__HasXY_GT_1y17h506fed29d306cdc2E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0.0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 1944 "r3d/vector.rs"
 $2 = ((($1)) + 4|0); //@line 1944 "r3d/vector.rs"
 $3 = (+__ZN4core5clone5Clone5clone17h74371fa23fb4a621E($2)); //@line 1944 "r3d/vector.rs"
 STACKTOP = sp;return (+$3); //@line 1944 "r3d/vector.rs"
}
function __ZN71__LT_rustv__r3d__vector__Vec2_LT_T_GT__u20_as_u20_rustv__r3d__HasXY_GT_7from_xy17h0401f7dcd09296b6E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $_0 = 0, $retVal$index1 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_0 = sp + 8|0;
 $y = sp + 4|0;
 $x = sp;
 HEAPF32[$x>>2] = $0;
 HEAPF32[$y>>2] = $1;
 $2 = (+__ZN4core5clone5Clone5clone17h74371fa23fb4a621E($x)); //@line 1945 "r3d/vector.rs"
 $3 = (+__ZN4core5clone5Clone5clone17h74371fa23fb4a621E($y)); //@line 1945 "r3d/vector.rs"
 HEAPF32[$_0>>2] = $2; //@line 1945 "r3d/vector.rs"
 $4 = ((($_0)) + 4|0); //@line 1945 "r3d/vector.rs"
 HEAPF32[$4>>2] = $3; //@line 1945 "r3d/vector.rs"
 $5 = +HEAPF32[$_0>>2]; //@line 1945 "r3d/vector.rs"
 $6 = ((($_0)) + 4|0); //@line 1945 "r3d/vector.rs"
 $7 = +HEAPF32[$6>>2]; //@line 1945 "r3d/vector.rs"
 HEAPF32[$retVal>>2] = $5; //@line 1945 "r3d/vector.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 1945 "r3d/vector.rs"
 HEAPF32[$retVal$index1>>2] = $7; //@line 1945 "r3d/vector.rs"
 STACKTOP = sp;return; //@line 1945 "r3d/vector.rs"
}
function __ZN45__LT_rustv__r3d__matrix__Matrix4_LT_V_GT__GT_10mul_matrix17hf2e772cdbc84ba93E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_11 = 0, $_17 = 0, $_23 = 0, $_5 = 0, $other = 0, $personalityslot = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $personalityslot = sp + 72|0;
 $_23 = sp + 56|0;
 $_17 = sp + 40|0;
 $_11 = sp + 24|0;
 $_5 = sp + 8|0;
 $self = $1;
 $other = $2;
 $3 = $self; //@line 313 "r3d/matrix.rs"
 $4 = $other; //@line 313 "r3d/matrix.rs"
 __ZN45__LT_rustv__r3d__matrix__Matrix4_LT_V_GT__GT_8mul_vec417h72dc91b60d9736acE($_5,$3,$4); //@line 313 "r3d/matrix.rs"
 $5 = $self; //@line 314 "r3d/matrix.rs"
 $6 = $other; //@line 314 "r3d/matrix.rs"
 $7 = ((($6)) + 16|0); //@line 314 "r3d/matrix.rs"
 __THREW__ = 0;
 invoke_viii(305,($_11|0),($5|0),($7|0)); //@line 314 "r3d/matrix.rs"
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  $10 = $self; //@line 315 "r3d/matrix.rs"
  $11 = $other; //@line 315 "r3d/matrix.rs"
  $12 = ((($11)) + 32|0); //@line 315 "r3d/matrix.rs"
  __THREW__ = 0;
  invoke_viii(305,($_17|0),($10|0),($12|0)); //@line 315 "r3d/matrix.rs"
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if (!($14)) {
   $21 = $self; //@line 316 "r3d/matrix.rs"
   $22 = $other; //@line 316 "r3d/matrix.rs"
   $23 = ((($22)) + 48|0); //@line 316 "r3d/matrix.rs"
   __THREW__ = 0;
   invoke_viii(305,($_23|0),($21|0),($23|0)); //@line 316 "r3d/matrix.rs"
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if (!($25)) {
    __THREW__ = 0;
    invoke_viiiii(306,($0|0),($_5|0),($_11|0),($_17|0),($_23|0)); //@line 312 "r3d/matrix.rs"
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if (!($27)) {
     STACKTOP = sp;return; //@line 317 "r3d/matrix.rs"
    }
   }
  }
 }
 $15 = ___cxa_find_matching_catch_2()|0;
 $16 = tempRet0;
 HEAP32[$personalityslot>>2] = $15;
 $17 = ((($personalityslot)) + 4|0);
 HEAP32[$17>>2] = $16;
 $18 = HEAP32[$personalityslot>>2]|0; //@line 311 "r3d/matrix.rs"
 $19 = ((($personalityslot)) + 4|0); //@line 311 "r3d/matrix.rs"
 $20 = HEAP32[$19>>2]|0; //@line 311 "r3d/matrix.rs"
 ___resumeException($18|0);
 // unreachable;
}
function __ZN45__LT_rustv__r3d__matrix__Matrix4_LT_V_GT__GT_8mul_vec417h72dc91b60d9736acE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $_4 = 0, $_6 = 0, $_8 = 0, $personalityslot = 0, $pt = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $personalityslot = sp + 56|0;
 $_8 = sp + 40|0;
 $_6 = sp + 24|0;
 $_4 = sp + 8|0;
 $self = $1;
 $pt = $2;
 $3 = $self; //@line 309 "r3d/matrix.rs"
 $4 = $pt; //@line 309 "r3d/matrix.rs"
 __ZN57__LT_V_u20_as_u20_rustv__r3d__vector__VecBroadcastOps_GT_6vmul_x17hb4fb452d43f2b4d1E($_8,$3,$4); //@line 309 "r3d/matrix.rs"
 $5 = $self; //@line 309 "r3d/matrix.rs"
 $6 = ((($5)) + 16|0); //@line 309 "r3d/matrix.rs"
 $7 = $pt; //@line 309 "r3d/matrix.rs"
 __THREW__ = 0;
 invoke_viiii(307,($_6|0),($_8|0),($6|0),($7|0)); //@line 309 "r3d/matrix.rs"
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  $10 = $self; //@line 309 "r3d/matrix.rs"
  $11 = ((($10)) + 32|0); //@line 309 "r3d/matrix.rs"
  $12 = $pt; //@line 309 "r3d/matrix.rs"
  __THREW__ = 0;
  invoke_viiii(308,($_4|0),($_6|0),($11|0),($12|0)); //@line 309 "r3d/matrix.rs"
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if (!($14)) {
   $21 = $self; //@line 309 "r3d/matrix.rs"
   $22 = ((($21)) + 48|0); //@line 309 "r3d/matrix.rs"
   $23 = $pt; //@line 309 "r3d/matrix.rs"
   __THREW__ = 0;
   invoke_viiii(309,($0|0),($_4|0),($22|0),($23|0)); //@line 309 "r3d/matrix.rs"
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if (!($25)) {
    STACKTOP = sp;return; //@line 310 "r3d/matrix.rs"
   }
  }
 }
 $15 = ___cxa_find_matching_catch_2()|0;
 $16 = tempRet0;
 HEAP32[$personalityslot>>2] = $15;
 $17 = ((($personalityslot)) + 4|0);
 HEAP32[$17>>2] = $16;
 $18 = HEAP32[$personalityslot>>2]|0; //@line 308 "r3d/matrix.rs"
 $19 = ((($personalityslot)) + 4|0); //@line 308 "r3d/matrix.rs"
 $20 = HEAP32[$19>>2]|0; //@line 308 "r3d/matrix.rs"
 ___resumeException($18|0);
 // unreachable;
}
function __ZN5rustv3r3d6matrix7Matrix417h01ef493098028131E($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_11 = 0;
 var $_5 = 0, $_7 = 0, $_9 = 0, $aw = 0, $ax = 0, $ay = 0, $az = 0, $personalityslot = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $personalityslot = sp + 80|0;
 $_11 = sp + 64|0;
 $_9 = sp + 48|0;
 $_7 = sp + 32|0;
 $_5 = sp + 16|0;
 $ax = $1;
 $ay = $2;
 $az = $3;
 $aw = $4;
 $5 = $ax; //@line 110 "r3d/matrix.rs"
 __ZN99__LT_rustv__r3d__vector__Vec4_LT_X_C__u20_Y_C__u20_Z_C__u20_W_GT__u20_as_u20_core__clone__Clone_GT_5clone17h704c555dac9a7208E($_5,$5); //@line 110 "r3d/matrix.rs"
 $6 = $ay; //@line 110 "r3d/matrix.rs"
 __THREW__ = 0;
 invoke_vii(310,($_7|0),($6|0)); //@line 110 "r3d/matrix.rs"
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if (!($8)) {
  $9 = $az; //@line 110 "r3d/matrix.rs"
  __THREW__ = 0;
  invoke_vii(310,($_9|0),($9|0)); //@line 110 "r3d/matrix.rs"
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   $18 = $aw; //@line 110 "r3d/matrix.rs"
   __THREW__ = 0;
   invoke_vii(310,($_11|0),($18|0)); //@line 110 "r3d/matrix.rs"
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if (!($20)) {
    ;HEAP32[$0>>2]=HEAP32[$_5>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_5+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_5+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$_5+12>>2]|0; //@line 110 "r3d/matrix.rs"
    $21 = ((($0)) + 16|0); //@line 110 "r3d/matrix.rs"
    ;HEAP32[$21>>2]=HEAP32[$_7>>2]|0;HEAP32[$21+4>>2]=HEAP32[$_7+4>>2]|0;HEAP32[$21+8>>2]=HEAP32[$_7+8>>2]|0;HEAP32[$21+12>>2]=HEAP32[$_7+12>>2]|0; //@line 110 "r3d/matrix.rs"
    $22 = ((($0)) + 32|0); //@line 110 "r3d/matrix.rs"
    ;HEAP32[$22>>2]=HEAP32[$_9>>2]|0;HEAP32[$22+4>>2]=HEAP32[$_9+4>>2]|0;HEAP32[$22+8>>2]=HEAP32[$_9+8>>2]|0;HEAP32[$22+12>>2]=HEAP32[$_9+12>>2]|0; //@line 110 "r3d/matrix.rs"
    $23 = ((($0)) + 48|0); //@line 110 "r3d/matrix.rs"
    ;HEAP32[$23>>2]=HEAP32[$_11>>2]|0;HEAP32[$23+4>>2]=HEAP32[$_11+4>>2]|0;HEAP32[$23+8>>2]=HEAP32[$_11+8>>2]|0;HEAP32[$23+12>>2]=HEAP32[$_11+12>>2]|0; //@line 110 "r3d/matrix.rs"
    STACKTOP = sp;return; //@line 111 "r3d/matrix.rs"
   }
  }
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 HEAP32[$personalityslot>>2] = $12;
 $14 = ((($personalityslot)) + 4|0);
 HEAP32[$14>>2] = $13;
 $15 = HEAP32[$personalityslot>>2]|0; //@line 109 "r3d/matrix.rs"
 $16 = ((($personalityslot)) + 4|0); //@line 109 "r3d/matrix.rs"
 $17 = HEAP32[$16>>2]|0; //@line 109 "r3d/matrix.rs"
 ___resumeException($15|0);
 // unreachable;
}
function __ZN99__LT_rustv__r3d__vector__Vec4_LT_X_C__u20_Y_C__u20_Z_C__u20_W_GT__u20_as_u20_core__clone__Clone_GT_5clone17h704c555dac9a7208E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__self_0_0 = 0, $__self_0_1 = 0, $__self_0_2 = 0, $__self_0_3 = 0, $personalityslot = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $personalityslot = sp + 24|0;
 $self = $1;
 $2 = $self; //@line 469 "r3d/vector.rs"
 $__self_0_0 = $2; //@line 469 "r3d/vector.rs"
 $3 = $self; //@line 469 "r3d/vector.rs"
 $4 = ((($3)) + 4|0); //@line 469 "r3d/vector.rs"
 $__self_0_1 = $4; //@line 469 "r3d/vector.rs"
 $5 = $self; //@line 469 "r3d/vector.rs"
 $6 = ((($5)) + 8|0); //@line 469 "r3d/vector.rs"
 $__self_0_2 = $6; //@line 469 "r3d/vector.rs"
 $7 = $self; //@line 469 "r3d/vector.rs"
 $8 = ((($7)) + 12|0); //@line 469 "r3d/vector.rs"
 $__self_0_3 = $8; //@line 469 "r3d/vector.rs"
 $9 = $__self_0_0; //@line 469 "r3d/vector.rs"
 $10 = (+__ZN4core5clone5Clone5clone17h74371fa23fb4a621E($9)); //@line 469 "r3d/vector.rs"
 $11 = $__self_0_1; //@line 469 "r3d/vector.rs"
 __THREW__ = 0;
 $12 = (+invoke_di(311,($11|0))); //@line 469 "r3d/vector.rs"
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if (!($14)) {
  $15 = $__self_0_2; //@line 469 "r3d/vector.rs"
  __THREW__ = 0;
  $16 = (+invoke_di(311,($15|0))); //@line 469 "r3d/vector.rs"
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  if (!($18)) {
   $25 = $__self_0_3; //@line 469 "r3d/vector.rs"
   __THREW__ = 0;
   $26 = (+invoke_di(311,($25|0))); //@line 469 "r3d/vector.rs"
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if (!($28)) {
    HEAPF32[$0>>2] = $10; //@line 467 "r3d/vector.rs"
    $29 = ((($0)) + 4|0); //@line 467 "r3d/vector.rs"
    HEAPF32[$29>>2] = $12; //@line 467 "r3d/vector.rs"
    $30 = ((($0)) + 8|0); //@line 467 "r3d/vector.rs"
    HEAPF32[$30>>2] = $16; //@line 467 "r3d/vector.rs"
    $31 = ((($0)) + 12|0); //@line 467 "r3d/vector.rs"
    HEAPF32[$31>>2] = $26; //@line 467 "r3d/vector.rs"
    STACKTOP = sp;return; //@line 467 "r3d/vector.rs"
   }
  }
 }
 $19 = ___cxa_find_matching_catch_2()|0;
 $20 = tempRet0;
 HEAP32[$personalityslot>>2] = $19;
 $21 = ((($personalityslot)) + 4|0);
 HEAP32[$21>>2] = $20;
 $22 = HEAP32[$personalityslot>>2]|0; //@line 467 "r3d/vector.rs"
 $23 = ((($personalityslot)) + 4|0); //@line 467 "r3d/vector.rs"
 $24 = HEAP32[$23>>2]|0; //@line 467 "r3d/vector.rs"
 ___resumeException($22|0);
 // unreachable;
}
function __ZN57__LT_V_u20_as_u20_rustv__r3d__vector__VecBroadcastOps_GT_6vmul_x17hb4fb452d43f2b4d1E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0.0, $b = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $1;
 $b = $2;
 $3 = $self; //@line 1910 "r3d/vector.rs"
 $4 = $b; //@line 1910 "r3d/vector.rs"
 $5 = (+__ZN91__LT_rustv__r3d__vector__Vec4_LT_T_GT__u20_as_u20_rustv__r3d__vector__VecFloatAccessors_GT_2vx17h1e01ab20d978d5c3E($4)); //@line 1910 "r3d/vector.rs"
 __ZN80__LT_rustv__r3d__vector__Vec4_LT_T_GT__u20_as_u20_rustv__r3d__vector__VecOps_GT_6vscale17h9435edec11430017E($0,$3,$5); //@line 1910 "r3d/vector.rs"
 STACKTOP = sp;return; //@line 1910 "r3d/vector.rs"
}
function __ZN57__LT_V_u20_as_u20_rustv__r3d__vector__VecBroadcastOps_GT_6vmad_y17he43c7a85a42d13d3E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $b = 0, $c = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $1;
 $b = $2;
 $c = $3;
 $4 = $self; //@line 1915 "r3d/vector.rs"
 $5 = $b; //@line 1915 "r3d/vector.rs"
 $6 = $c; //@line 1915 "r3d/vector.rs"
 $7 = (+__ZN91__LT_rustv__r3d__vector__Vec4_LT_T_GT__u20_as_u20_rustv__r3d__vector__VecFloatAccessors_GT_2vy17h98f04b7a8f75b1f4E($6)); //@line 1915 "r3d/vector.rs"
 __ZN5rustv3r3d6vector6VecOps4vmad17h6782494a3c519d87E($0,$4,$5,$7); //@line 1915 "r3d/vector.rs"
 STACKTOP = sp;return; //@line 1915 "r3d/vector.rs"
}
function __ZN57__LT_V_u20_as_u20_rustv__r3d__vector__VecBroadcastOps_GT_6vmad_z17hb32a8cd5fb918ac4E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $b = 0, $c = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $1;
 $b = $2;
 $c = $3;
 $4 = $self; //@line 1916 "r3d/vector.rs"
 $5 = $b; //@line 1916 "r3d/vector.rs"
 $6 = $c; //@line 1916 "r3d/vector.rs"
 $7 = (+__ZN91__LT_rustv__r3d__vector__Vec4_LT_T_GT__u20_as_u20_rustv__r3d__vector__VecFloatAccessors_GT_2vz17h3d61a8238de5512eE($6)); //@line 1916 "r3d/vector.rs"
 __ZN5rustv3r3d6vector6VecOps4vmad17h6782494a3c519d87E($0,$4,$5,$7); //@line 1916 "r3d/vector.rs"
 STACKTOP = sp;return; //@line 1916 "r3d/vector.rs"
}
function __ZN57__LT_V_u20_as_u20_rustv__r3d__vector__VecBroadcastOps_GT_6vmad_w17h311cd3cf44864ef7E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $b = 0, $c = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $1;
 $b = $2;
 $c = $3;
 $4 = $self; //@line 1917 "r3d/vector.rs"
 $5 = $b; //@line 1917 "r3d/vector.rs"
 $6 = $c; //@line 1917 "r3d/vector.rs"
 $7 = (+__ZN91__LT_rustv__r3d__vector__Vec4_LT_T_GT__u20_as_u20_rustv__r3d__vector__VecFloatAccessors_GT_2vw17h53e68ea68fd12686E($6)); //@line 1917 "r3d/vector.rs"
 __ZN5rustv3r3d6vector6VecOps4vmad17h6782494a3c519d87E($0,$4,$5,$7); //@line 1917 "r3d/vector.rs"
 STACKTOP = sp;return; //@line 1917 "r3d/vector.rs"
}
function __ZN91__LT_rustv__r3d__vector__Vec4_LT_T_GT__u20_as_u20_rustv__r3d__vector__VecFloatAccessors_GT_2vw17h53e68ea68fd12686E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0.0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 2113 "r3d/vector.rs"
 $2 = ((($1)) + 12|0); //@line 2113 "r3d/vector.rs"
 $3 = (+__ZN4core5clone5Clone5clone17h74371fa23fb4a621E($2)); //@line 2113 "r3d/vector.rs"
 STACKTOP = sp;return (+$3); //@line 2113 "r3d/vector.rs"
}
function __ZN5rustv3r3d6vector6VecOps4vmad17h6782494a3c519d87E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $_7 = 0, $b = 0, $f = 0.0, $personalityslot = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $personalityslot = sp + 32|0;
 $_7 = sp + 16|0;
 $self = $1;
 $b = $2;
 $f = $3;
 $4 = $self; //@line 1612 "r3d/vector.rs"
 $5 = $b; //@line 1612 "r3d/vector.rs"
 $6 = $f; //@line 1612 "r3d/vector.rs"
 __ZN80__LT_rustv__r3d__vector__Vec4_LT_T_GT__u20_as_u20_rustv__r3d__vector__VecOps_GT_6vscale17h9435edec11430017E($_7,$5,$6); //@line 1612 "r3d/vector.rs"
 __THREW__ = 0;
 invoke_viii(312,($0|0),($4|0),($_7|0)); //@line 1612 "r3d/vector.rs"
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch_2()|0;
  $10 = tempRet0;
  HEAP32[$personalityslot>>2] = $9;
  $11 = ((($personalityslot)) + 4|0);
  HEAP32[$11>>2] = $10;
  $12 = HEAP32[$personalityslot>>2]|0; //@line 1612 "r3d/vector.rs"
  $13 = ((($personalityslot)) + 4|0); //@line 1612 "r3d/vector.rs"
  $14 = HEAP32[$13>>2]|0; //@line 1612 "r3d/vector.rs"
  ___resumeException($12|0);
  // unreachable;
 } else {
  STACKTOP = sp;return; //@line 1612 "r3d/vector.rs"
 }
}
function __ZN80__LT_rustv__r3d__vector__Vec4_LT_T_GT__u20_as_u20_rustv__r3d__vector__VecOps_GT_6vscale17h9435edec11430017E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, $f = 0.0;
 var $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $1;
 $f = $2;
 $3 = $self; //@line 2308 "r3d/vector.rs"
 $4 = +HEAPF32[$3>>2]; //@line 2308 "r3d/vector.rs"
 $5 = $f; //@line 2308 "r3d/vector.rs"
 $6 = (+__ZN45__LT_f32_u20_as_u20_core__ops__arith__Mul_GT_3mul17h85d76a03b8e09b50E($4,$5)); //@line 2308 "r3d/vector.rs"
 $7 = $self; //@line 2308 "r3d/vector.rs"
 $8 = ((($7)) + 4|0); //@line 2308 "r3d/vector.rs"
 $9 = +HEAPF32[$8>>2]; //@line 2308 "r3d/vector.rs"
 $10 = $f; //@line 2308 "r3d/vector.rs"
 $11 = (+__ZN45__LT_f32_u20_as_u20_core__ops__arith__Mul_GT_3mul17h85d76a03b8e09b50E($9,$10)); //@line 2308 "r3d/vector.rs"
 $12 = $self; //@line 2308 "r3d/vector.rs"
 $13 = ((($12)) + 8|0); //@line 2308 "r3d/vector.rs"
 $14 = +HEAPF32[$13>>2]; //@line 2308 "r3d/vector.rs"
 $15 = $f; //@line 2308 "r3d/vector.rs"
 $16 = (+__ZN45__LT_f32_u20_as_u20_core__ops__arith__Mul_GT_3mul17h85d76a03b8e09b50E($14,$15)); //@line 2308 "r3d/vector.rs"
 $17 = $self; //@line 2308 "r3d/vector.rs"
 $18 = ((($17)) + 12|0); //@line 2308 "r3d/vector.rs"
 $19 = +HEAPF32[$18>>2]; //@line 2308 "r3d/vector.rs"
 $20 = $f; //@line 2308 "r3d/vector.rs"
 $21 = (+__ZN45__LT_f32_u20_as_u20_core__ops__arith__Mul_GT_3mul17h85d76a03b8e09b50E($19,$20)); //@line 2308 "r3d/vector.rs"
 __ZN5rustv3r3d6vector4Vec417h52c31fcc1e26f7b7E($0,$6,$11,$16,$21); //@line 2308 "r3d/vector.rs"
 STACKTOP = sp;return; //@line 2308 "r3d/vector.rs"
}
function __ZN83__LT_rustv__r3d__vector__Vec4_LT_T_GT__u20_as_u20_rustv__r3d__vector__VecNumOps_GT_4vadd17heead0a1b309e9b1bE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $3 = 0;
 var $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $b = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $1;
 $b = $2;
 $3 = $self; //@line 2273 "r3d/vector.rs"
 $4 = +HEAPF32[$3>>2]; //@line 2273 "r3d/vector.rs"
 $5 = $b; //@line 2273 "r3d/vector.rs"
 $6 = +HEAPF32[$5>>2]; //@line 2273 "r3d/vector.rs"
 $7 = (+__ZN45__LT_f32_u20_as_u20_core__ops__arith__Add_GT_3add17h815deb0ce4b370b5E($4,$6)); //@line 2273 "r3d/vector.rs"
 $8 = $self; //@line 2273 "r3d/vector.rs"
 $9 = ((($8)) + 4|0); //@line 2273 "r3d/vector.rs"
 $10 = +HEAPF32[$9>>2]; //@line 2273 "r3d/vector.rs"
 $11 = $b; //@line 2273 "r3d/vector.rs"
 $12 = ((($11)) + 4|0); //@line 2273 "r3d/vector.rs"
 $13 = +HEAPF32[$12>>2]; //@line 2273 "r3d/vector.rs"
 $14 = (+__ZN45__LT_f32_u20_as_u20_core__ops__arith__Add_GT_3add17h815deb0ce4b370b5E($10,$13)); //@line 2273 "r3d/vector.rs"
 $15 = $self; //@line 2273 "r3d/vector.rs"
 $16 = ((($15)) + 8|0); //@line 2273 "r3d/vector.rs"
 $17 = +HEAPF32[$16>>2]; //@line 2273 "r3d/vector.rs"
 $18 = $b; //@line 2273 "r3d/vector.rs"
 $19 = ((($18)) + 8|0); //@line 2273 "r3d/vector.rs"
 $20 = +HEAPF32[$19>>2]; //@line 2273 "r3d/vector.rs"
 $21 = (+__ZN45__LT_f32_u20_as_u20_core__ops__arith__Add_GT_3add17h815deb0ce4b370b5E($17,$20)); //@line 2273 "r3d/vector.rs"
 $22 = $self; //@line 2273 "r3d/vector.rs"
 $23 = ((($22)) + 12|0); //@line 2273 "r3d/vector.rs"
 $24 = +HEAPF32[$23>>2]; //@line 2273 "r3d/vector.rs"
 $25 = $b; //@line 2273 "r3d/vector.rs"
 $26 = ((($25)) + 12|0); //@line 2273 "r3d/vector.rs"
 $27 = +HEAPF32[$26>>2]; //@line 2273 "r3d/vector.rs"
 $28 = (+__ZN45__LT_f32_u20_as_u20_core__ops__arith__Add_GT_3add17h815deb0ce4b370b5E($24,$27)); //@line 2273 "r3d/vector.rs"
 __ZN5rustv3r3d6vector4Vec417h52c31fcc1e26f7b7E($0,$7,$14,$21,$28); //@line 2273 "r3d/vector.rs"
 STACKTOP = sp;return; //@line 2273 "r3d/vector.rs"
}
function __ZN91__LT_rustv__r3d__vector__Vec4_LT_T_GT__u20_as_u20_rustv__r3d__vector__VecFloatAccessors_GT_2vz17h3d61a8238de5512eE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0.0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 2112 "r3d/vector.rs"
 $2 = ((($1)) + 8|0); //@line 2112 "r3d/vector.rs"
 $3 = (+__ZN4core5clone5Clone5clone17h74371fa23fb4a621E($2)); //@line 2112 "r3d/vector.rs"
 STACKTOP = sp;return (+$3); //@line 2112 "r3d/vector.rs"
}
function __ZN91__LT_rustv__r3d__vector__Vec4_LT_T_GT__u20_as_u20_rustv__r3d__vector__VecFloatAccessors_GT_2vy17h98f04b7a8f75b1f4E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0.0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 2111 "r3d/vector.rs"
 $2 = ((($1)) + 4|0); //@line 2111 "r3d/vector.rs"
 $3 = (+__ZN4core5clone5Clone5clone17h74371fa23fb4a621E($2)); //@line 2111 "r3d/vector.rs"
 STACKTOP = sp;return (+$3); //@line 2111 "r3d/vector.rs"
}
function __ZN91__LT_rustv__r3d__vector__Vec4_LT_T_GT__u20_as_u20_rustv__r3d__vector__VecFloatAccessors_GT_2vx17h1e01ab20d978d5c3E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 2110 "r3d/vector.rs"
 $2 = (+__ZN4core5clone5Clone5clone17h74371fa23fb4a621E($1)); //@line 2110 "r3d/vector.rs"
 STACKTOP = sp;return (+$2); //@line 2110 "r3d/vector.rs"
}
function __ZN5rustv3r3d6matrix8identity17h81521b31795d776aE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN45__LT_rustv__r3d__matrix__Matrix4_LT_V_GT__GT_8identity17hf9e2d1cf88a8c76cE($0); //@line 448 "r3d/matrix.rs"
 return; //@line 449 "r3d/matrix.rs"
}
function __ZN45__LT_rustv__r3d__matrix__Matrix4_LT_V_GT__GT_8identity17hf9e2d1cf88a8c76cE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_12 = 0, $_3 = 0, $_6 = 0, $_9 = 0, $personalityslot = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $personalityslot = sp + 64|0;
 $_12 = sp + 48|0;
 $_9 = sp + 32|0;
 $_6 = sp + 16|0;
 $_3 = sp;
 __ZN83__LT_rustv__r3d__vector__Vec4_LT_T_GT__u20_as_u20_rustv__r3d__vector__VecConsts_GT_5vaxis17habfdd3f147079d65E($_3,0); //@line 269 "r3d/matrix.rs"
 __THREW__ = 0;
 invoke_vii(313,($_6|0),1); //@line 270 "r3d/matrix.rs"
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  __THREW__ = 0;
  invoke_vii(313,($_9|0),2); //@line 271 "r3d/matrix.rs"
  $3 = __THREW__; __THREW__ = 0;
  $4 = $3&1;
  if (!($4)) {
   __THREW__ = 0;
   invoke_vii(313,($_12|0),3); //@line 272 "r3d/matrix.rs"
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if (!($12)) {
    __THREW__ = 0;
    invoke_viiiii(306,($0|0),($_3|0),($_6|0),($_9|0),($_12|0)); //@line 268 "r3d/matrix.rs"
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if (!($14)) {
     STACKTOP = sp;return; //@line 273 "r3d/matrix.rs"
    }
   }
  }
 }
 $5 = ___cxa_find_matching_catch_2()|0;
 $6 = tempRet0;
 HEAP32[$personalityslot>>2] = $5;
 $7 = ((($personalityslot)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$personalityslot>>2]|0; //@line 267 "r3d/matrix.rs"
 $9 = ((($personalityslot)) + 4|0); //@line 267 "r3d/matrix.rs"
 $10 = HEAP32[$9>>2]|0; //@line 267 "r3d/matrix.rs"
 ___resumeException($8|0);
 // unreachable;
}
function __ZN83__LT_rustv__r3d__vector__Vec4_LT_T_GT__u20_as_u20_rustv__r3d__vector__VecConsts_GT_5vaxis17habfdd3f147079d65E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0;
 var $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_22 = 0;
 var $_23 = 0, $_24 = 0, $_25 = 0, $_26 = 0, $_27 = 0, $_28 = 0, $_29 = 0, $_30 = 0, $_31 = 0, $_32 = 0, $_33 = 0, $_34 = 0, $_35 = 0, $_36 = 0, $i = 0, $personalityslot = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $personalityslot = sp + 8|0;
 $i = $1;
 $_35 = 0; //@line 2256 "r3d/vector.rs"
 $_33 = 0; //@line 2256 "r3d/vector.rs"
 $_28 = 0; //@line 2256 "r3d/vector.rs"
 $_26 = 0; //@line 2256 "r3d/vector.rs"
 $_24 = 0; //@line 2256 "r3d/vector.rs"
 $_34 = 0; //@line 2256 "r3d/vector.rs"
 $_32 = 0; //@line 2256 "r3d/vector.rs"
 $_30 = 0; //@line 2256 "r3d/vector.rs"
 $_25 = 0; //@line 2256 "r3d/vector.rs"
 $_23 = 0; //@line 2256 "r3d/vector.rs"
 $_36 = 0; //@line 2256 "r3d/vector.rs"
 $_31 = 0; //@line 2256 "r3d/vector.rs"
 $_29 = 0; //@line 2256 "r3d/vector.rs"
 $_27 = 0; //@line 2256 "r3d/vector.rs"
 $_22 = 0; //@line 2256 "r3d/vector.rs"
 $2 = $i; //@line 2256 "r3d/vector.rs"
 switch ($2|0) {
 case 0:  {
  $_22 = 1; //@line 2256 "r3d/vector.rs"
  $6 = (+__ZN5rustv3r3d3one17had807af2f7293135E()); //@line 2256 "r3d/vector.rs"
  __THREW__ = 0;
  $7 = (+invoke_d(314)); //@line 2256 "r3d/vector.rs"
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if ($9) {
   $130 = ___cxa_find_matching_catch_2()|0;
   $131 = tempRet0;
   HEAP32[$personalityslot>>2] = $130;
   $132 = ((($personalityslot)) + 4|0);
   HEAP32[$132>>2] = $131;
  } else {
   $_23 = 1; //@line 2256 "r3d/vector.rs"
   __THREW__ = 0;
   $26 = (+invoke_d(314)); //@line 2256 "r3d/vector.rs"
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if ($28) {
    $133 = ___cxa_find_matching_catch_2()|0;
    $134 = tempRet0;
    HEAP32[$personalityslot>>2] = $133;
    $135 = ((($personalityslot)) + 4|0);
    HEAP32[$135>>2] = $134;
   } else {
    $_24 = 1; //@line 2256 "r3d/vector.rs"
    __THREW__ = 0;
    $29 = (+invoke_d(314)); //@line 2256 "r3d/vector.rs"
    $30 = __THREW__; __THREW__ = 0;
    $31 = $30&1;
    if (!($31)) {
     $_22 = 0; //@line 2256 "r3d/vector.rs"
     $_23 = 0; //@line 2256 "r3d/vector.rs"
     $_24 = 0; //@line 2256 "r3d/vector.rs"
     __THREW__ = 0;
     invoke_vidddd(316,($0|0),(+$6),(+$7),(+$26),(+$29)); //@line 2256 "r3d/vector.rs"
     $32 = __THREW__; __THREW__ = 0;
     $33 = $32&1;
     if (!($33)) {
      $_24 = 0; //@line 2256 "r3d/vector.rs"
      $_23 = 0; //@line 2256 "r3d/vector.rs"
      $_22 = 0; //@line 2256 "r3d/vector.rs"
      STACKTOP = sp;return; //@line 2262 "r3d/vector.rs"
     }
    }
    $136 = ___cxa_find_matching_catch_2()|0;
    $137 = tempRet0;
    HEAP32[$personalityslot>>2] = $136;
    $138 = ((($personalityslot)) + 4|0);
    HEAP32[$138>>2] = $137;
    $139 = $_24; //@line 2256 "r3d/vector.rs"
    $140 = $139&1; //@line 2256 "r3d/vector.rs"
    if ($140) {
     $_24 = 0; //@line 2256 "r3d/vector.rs"
    }
   }
   $68 = $_23; //@line 2256 "r3d/vector.rs"
   $69 = $68&1; //@line 2256 "r3d/vector.rs"
   if ($69) {
    $_23 = 0; //@line 2256 "r3d/vector.rs"
   }
  }
  $66 = $_22; //@line 2256 "r3d/vector.rs"
  $67 = $66&1; //@line 2256 "r3d/vector.rs"
  if ($67) {
   $_22 = 0; //@line 2256 "r3d/vector.rs"
  }
  break;
 }
 case 1:  {
  $_25 = 1; //@line 2257 "r3d/vector.rs"
  $10 = (+__ZN5rustv3r3d4zero17hccc9cde42a9b40adE()); //@line 2257 "r3d/vector.rs"
  __THREW__ = 0;
  $11 = (+invoke_d(315)); //@line 2257 "r3d/vector.rs"
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if ($13) {
   $119 = ___cxa_find_matching_catch_2()|0;
   $120 = tempRet0;
   HEAP32[$personalityslot>>2] = $119;
   $121 = ((($personalityslot)) + 4|0);
   HEAP32[$121>>2] = $120;
  } else {
   $_26 = 1; //@line 2257 "r3d/vector.rs"
   __THREW__ = 0;
   $34 = (+invoke_d(314)); //@line 2257 "r3d/vector.rs"
   $35 = __THREW__; __THREW__ = 0;
   $36 = $35&1;
   if ($36) {
    $122 = ___cxa_find_matching_catch_2()|0;
    $123 = tempRet0;
    HEAP32[$personalityslot>>2] = $122;
    $124 = ((($personalityslot)) + 4|0);
    HEAP32[$124>>2] = $123;
   } else {
    $_27 = 1; //@line 2257 "r3d/vector.rs"
    __THREW__ = 0;
    $37 = (+invoke_d(314)); //@line 2257 "r3d/vector.rs"
    $38 = __THREW__; __THREW__ = 0;
    $39 = $38&1;
    if (!($39)) {
     $_25 = 0; //@line 2257 "r3d/vector.rs"
     $_26 = 0; //@line 2257 "r3d/vector.rs"
     $_27 = 0; //@line 2257 "r3d/vector.rs"
     __THREW__ = 0;
     invoke_vidddd(316,($0|0),(+$10),(+$11),(+$34),(+$37)); //@line 2257 "r3d/vector.rs"
     $40 = __THREW__; __THREW__ = 0;
     $41 = $40&1;
     if (!($41)) {
      $_27 = 0; //@line 2257 "r3d/vector.rs"
      $_26 = 0; //@line 2257 "r3d/vector.rs"
      $_25 = 0; //@line 2257 "r3d/vector.rs"
      STACKTOP = sp;return; //@line 2262 "r3d/vector.rs"
     }
    }
    $125 = ___cxa_find_matching_catch_2()|0;
    $126 = tempRet0;
    HEAP32[$personalityslot>>2] = $125;
    $127 = ((($personalityslot)) + 4|0);
    HEAP32[$127>>2] = $126;
    $128 = $_27; //@line 2257 "r3d/vector.rs"
    $129 = $128&1; //@line 2257 "r3d/vector.rs"
    if ($129) {
     $_27 = 0; //@line 2257 "r3d/vector.rs"
    }
   }
   $72 = $_26; //@line 2257 "r3d/vector.rs"
   $73 = $72&1; //@line 2257 "r3d/vector.rs"
   if ($73) {
    $_26 = 0; //@line 2257 "r3d/vector.rs"
   }
  }
  $70 = $_25; //@line 2257 "r3d/vector.rs"
  $71 = $70&1; //@line 2257 "r3d/vector.rs"
  if ($71) {
   $_25 = 0; //@line 2257 "r3d/vector.rs"
  }
  break;
 }
 case 2:  {
  $_28 = 1; //@line 2258 "r3d/vector.rs"
  $14 = (+__ZN5rustv3r3d4zero17hccc9cde42a9b40adE()); //@line 2258 "r3d/vector.rs"
  __THREW__ = 0;
  $15 = (+invoke_d(314)); //@line 2258 "r3d/vector.rs"
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if ($17) {
   $108 = ___cxa_find_matching_catch_2()|0;
   $109 = tempRet0;
   HEAP32[$personalityslot>>2] = $108;
   $110 = ((($personalityslot)) + 4|0);
   HEAP32[$110>>2] = $109;
  } else {
   $_29 = 1; //@line 2258 "r3d/vector.rs"
   __THREW__ = 0;
   $42 = (+invoke_d(315)); //@line 2258 "r3d/vector.rs"
   $43 = __THREW__; __THREW__ = 0;
   $44 = $43&1;
   if ($44) {
    $111 = ___cxa_find_matching_catch_2()|0;
    $112 = tempRet0;
    HEAP32[$personalityslot>>2] = $111;
    $113 = ((($personalityslot)) + 4|0);
    HEAP32[$113>>2] = $112;
   } else {
    $_30 = 1; //@line 2258 "r3d/vector.rs"
    __THREW__ = 0;
    $45 = (+invoke_d(314)); //@line 2258 "r3d/vector.rs"
    $46 = __THREW__; __THREW__ = 0;
    $47 = $46&1;
    if (!($47)) {
     $_28 = 0; //@line 2258 "r3d/vector.rs"
     $_29 = 0; //@line 2258 "r3d/vector.rs"
     $_30 = 0; //@line 2258 "r3d/vector.rs"
     __THREW__ = 0;
     invoke_vidddd(316,($0|0),(+$14),(+$15),(+$42),(+$45)); //@line 2258 "r3d/vector.rs"
     $48 = __THREW__; __THREW__ = 0;
     $49 = $48&1;
     if (!($49)) {
      $_30 = 0; //@line 2258 "r3d/vector.rs"
      $_29 = 0; //@line 2258 "r3d/vector.rs"
      $_28 = 0; //@line 2258 "r3d/vector.rs"
      STACKTOP = sp;return; //@line 2262 "r3d/vector.rs"
     }
    }
    $114 = ___cxa_find_matching_catch_2()|0;
    $115 = tempRet0;
    HEAP32[$personalityslot>>2] = $114;
    $116 = ((($personalityslot)) + 4|0);
    HEAP32[$116>>2] = $115;
    $117 = $_30; //@line 2258 "r3d/vector.rs"
    $118 = $117&1; //@line 2258 "r3d/vector.rs"
    if ($118) {
     $_30 = 0; //@line 2258 "r3d/vector.rs"
    }
   }
   $76 = $_29; //@line 2258 "r3d/vector.rs"
   $77 = $76&1; //@line 2258 "r3d/vector.rs"
   if ($77) {
    $_29 = 0; //@line 2258 "r3d/vector.rs"
   }
  }
  $74 = $_28; //@line 2258 "r3d/vector.rs"
  $75 = $74&1; //@line 2258 "r3d/vector.rs"
  if ($75) {
   $_28 = 0; //@line 2258 "r3d/vector.rs"
  }
  break;
 }
 case 3:  {
  $_31 = 1; //@line 2259 "r3d/vector.rs"
  $18 = (+__ZN5rustv3r3d4zero17hccc9cde42a9b40adE()); //@line 2259 "r3d/vector.rs"
  __THREW__ = 0;
  $19 = (+invoke_d(314)); //@line 2259 "r3d/vector.rs"
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if ($21) {
   $97 = ___cxa_find_matching_catch_2()|0;
   $98 = tempRet0;
   HEAP32[$personalityslot>>2] = $97;
   $99 = ((($personalityslot)) + 4|0);
   HEAP32[$99>>2] = $98;
  } else {
   $_32 = 1; //@line 2259 "r3d/vector.rs"
   __THREW__ = 0;
   $50 = (+invoke_d(314)); //@line 2259 "r3d/vector.rs"
   $51 = __THREW__; __THREW__ = 0;
   $52 = $51&1;
   if ($52) {
    $100 = ___cxa_find_matching_catch_2()|0;
    $101 = tempRet0;
    HEAP32[$personalityslot>>2] = $100;
    $102 = ((($personalityslot)) + 4|0);
    HEAP32[$102>>2] = $101;
   } else {
    $_33 = 1; //@line 2259 "r3d/vector.rs"
    __THREW__ = 0;
    $53 = (+invoke_d(315)); //@line 2259 "r3d/vector.rs"
    $54 = __THREW__; __THREW__ = 0;
    $55 = $54&1;
    if (!($55)) {
     $_31 = 0; //@line 2259 "r3d/vector.rs"
     $_32 = 0; //@line 2259 "r3d/vector.rs"
     $_33 = 0; //@line 2259 "r3d/vector.rs"
     __THREW__ = 0;
     invoke_vidddd(316,($0|0),(+$18),(+$19),(+$50),(+$53)); //@line 2259 "r3d/vector.rs"
     $56 = __THREW__; __THREW__ = 0;
     $57 = $56&1;
     if (!($57)) {
      $_33 = 0; //@line 2259 "r3d/vector.rs"
      $_32 = 0; //@line 2259 "r3d/vector.rs"
      $_31 = 0; //@line 2259 "r3d/vector.rs"
      STACKTOP = sp;return; //@line 2262 "r3d/vector.rs"
     }
    }
    $103 = ___cxa_find_matching_catch_2()|0;
    $104 = tempRet0;
    HEAP32[$personalityslot>>2] = $103;
    $105 = ((($personalityslot)) + 4|0);
    HEAP32[$105>>2] = $104;
    $106 = $_33; //@line 2259 "r3d/vector.rs"
    $107 = $106&1; //@line 2259 "r3d/vector.rs"
    if ($107) {
     $_33 = 0; //@line 2259 "r3d/vector.rs"
    }
   }
   $80 = $_32; //@line 2259 "r3d/vector.rs"
   $81 = $80&1; //@line 2259 "r3d/vector.rs"
   if ($81) {
    $_32 = 0; //@line 2259 "r3d/vector.rs"
   }
  }
  $78 = $_31; //@line 2259 "r3d/vector.rs"
  $79 = $78&1; //@line 2259 "r3d/vector.rs"
  if ($79) {
   $_31 = 0; //@line 2259 "r3d/vector.rs"
  }
  break;
 }
 default: {
  $_34 = 1; //@line 2260 "r3d/vector.rs"
  $22 = (+__ZN5rustv3r3d4zero17hccc9cde42a9b40adE()); //@line 2260 "r3d/vector.rs"
  __THREW__ = 0;
  $23 = (+invoke_d(314)); //@line 2260 "r3d/vector.rs"
  $24 = __THREW__; __THREW__ = 0;
  $25 = $24&1;
  if ($25) {
   $86 = ___cxa_find_matching_catch_2()|0;
   $87 = tempRet0;
   HEAP32[$personalityslot>>2] = $86;
   $88 = ((($personalityslot)) + 4|0);
   HEAP32[$88>>2] = $87;
  } else {
   $_35 = 1; //@line 2260 "r3d/vector.rs"
   __THREW__ = 0;
   $58 = (+invoke_d(314)); //@line 2260 "r3d/vector.rs"
   $59 = __THREW__; __THREW__ = 0;
   $60 = $59&1;
   if ($60) {
    $89 = ___cxa_find_matching_catch_2()|0;
    $90 = tempRet0;
    HEAP32[$personalityslot>>2] = $89;
    $91 = ((($personalityslot)) + 4|0);
    HEAP32[$91>>2] = $90;
   } else {
    $_36 = 1; //@line 2260 "r3d/vector.rs"
    __THREW__ = 0;
    $61 = (+invoke_d(314)); //@line 2260 "r3d/vector.rs"
    $62 = __THREW__; __THREW__ = 0;
    $63 = $62&1;
    if (!($63)) {
     $_34 = 0; //@line 2260 "r3d/vector.rs"
     $_35 = 0; //@line 2260 "r3d/vector.rs"
     $_36 = 0; //@line 2260 "r3d/vector.rs"
     __THREW__ = 0;
     invoke_vidddd(316,($0|0),(+$22),(+$23),(+$58),(+$61)); //@line 2260 "r3d/vector.rs"
     $64 = __THREW__; __THREW__ = 0;
     $65 = $64&1;
     if (!($65)) {
      $_36 = 0; //@line 2260 "r3d/vector.rs"
      $_35 = 0; //@line 2260 "r3d/vector.rs"
      $_34 = 0; //@line 2260 "r3d/vector.rs"
      STACKTOP = sp;return; //@line 2262 "r3d/vector.rs"
     }
    }
    $92 = ___cxa_find_matching_catch_2()|0;
    $93 = tempRet0;
    HEAP32[$personalityslot>>2] = $92;
    $94 = ((($personalityslot)) + 4|0);
    HEAP32[$94>>2] = $93;
    $95 = $_36; //@line 2260 "r3d/vector.rs"
    $96 = $95&1; //@line 2260 "r3d/vector.rs"
    if ($96) {
     $_36 = 0; //@line 2260 "r3d/vector.rs"
    }
   }
   $84 = $_35; //@line 2260 "r3d/vector.rs"
   $85 = $84&1; //@line 2260 "r3d/vector.rs"
   if ($85) {
    $_35 = 0; //@line 2260 "r3d/vector.rs"
   }
  }
  $82 = $_34; //@line 2260 "r3d/vector.rs"
  $83 = $82&1; //@line 2260 "r3d/vector.rs"
  if ($83) {
   $_34 = 0; //@line 2260 "r3d/vector.rs"
  }
 }
 }
 $3 = HEAP32[$personalityslot>>2]|0; //@line 2254 "r3d/vector.rs"
 $4 = ((($personalityslot)) + 4|0); //@line 2254 "r3d/vector.rs"
 $5 = HEAP32[$4>>2]|0; //@line 2254 "r3d/vector.rs"
 ___resumeException($3|0);
 // unreachable;
}
function __ZN5rustv3r3d6matrix8rotate_x17h77749db493b14822E($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $$sreg$field = 0.0, $$sreg$field2 = 0.0, $$sreg$index1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0;
 var $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $_10 = 0, $_17 = 0, $_24 = 0, $_32 = 0, $a = 0.0, $c = 0.0, $one = 0.0, $s = 0.0, $zero = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $2 = sp;
 $_32 = sp + 80|0;
 $_24 = sp + 64|0;
 $_17 = sp + 48|0;
 $_10 = sp + 32|0;
 $a = $1;
 $3 = $a; //@line 539 "r3d/matrix.rs"
 __ZN41__LT_f32_u20_as_u20_rustv__r3d__Float_GT_7sin_cos17h23cde6307aafff78E($2,$3); //@line 539 "r3d/matrix.rs"
 $$sreg$field = +HEAPF32[$2>>2]; //@line 539 "r3d/matrix.rs"
 $$sreg$index1 = ((($2)) + 4|0); //@line 539 "r3d/matrix.rs"
 $$sreg$field2 = +HEAPF32[$$sreg$index1>>2]; //@line 539 "r3d/matrix.rs"
 $s = $$sreg$field; //@line 539 "r3d/matrix.rs"
 $c = $$sreg$field2; //@line 539 "r3d/matrix.rs"
 $4 = (+__ZN5rustv3r3d3one17had807af2f7293135E()); //@line 539 "r3d/matrix.rs"
 $one = $4; //@line 539 "r3d/matrix.rs"
 $5 = (+__ZN5rustv3r3d4zero17hccc9cde42a9b40adE()); //@line 539 "r3d/matrix.rs"
 $zero = $5; //@line 539 "r3d/matrix.rs"
 $6 = $one; //@line 541 "r3d/matrix.rs"
 $7 = $zero; //@line 541 "r3d/matrix.rs"
 $8 = $zero; //@line 541 "r3d/matrix.rs"
 $9 = $zero; //@line 541 "r3d/matrix.rs"
 __ZN5rustv3r3d6vector4Vec417h52c31fcc1e26f7b7E($_10,$6,$7,$8,$9); //@line 541 "r3d/matrix.rs"
 $10 = $zero; //@line 542 "r3d/matrix.rs"
 $11 = $c; //@line 542 "r3d/matrix.rs"
 $12 = $s; //@line 542 "r3d/matrix.rs"
 $13 = $zero; //@line 542 "r3d/matrix.rs"
 __ZN5rustv3r3d6vector4Vec417h52c31fcc1e26f7b7E($_17,$10,$11,$12,$13); //@line 542 "r3d/matrix.rs"
 $14 = $zero; //@line 543 "r3d/matrix.rs"
 $15 = $s; //@line 543 "r3d/matrix.rs"
 $16 = (+__ZN45__LT_f32_u20_as_u20_core__ops__arith__Neg_GT_3neg17h695fa36ec0cbefdfE($15)); //@line 543 "r3d/matrix.rs"
 $17 = $c; //@line 543 "r3d/matrix.rs"
 $18 = $zero; //@line 543 "r3d/matrix.rs"
 __ZN5rustv3r3d6vector4Vec417h52c31fcc1e26f7b7E($_24,$14,$16,$17,$18); //@line 543 "r3d/matrix.rs"
 $19 = $zero; //@line 544 "r3d/matrix.rs"
 $20 = $zero; //@line 544 "r3d/matrix.rs"
 $21 = $zero; //@line 544 "r3d/matrix.rs"
 $22 = $one; //@line 544 "r3d/matrix.rs"
 __ZN5rustv3r3d6vector4Vec417h52c31fcc1e26f7b7E($_32,$19,$20,$21,$22); //@line 544 "r3d/matrix.rs"
 __ZN5rustv3r3d6matrix7Matrix417h01ef493098028131E($0,$_10,$_17,$_24,$_32); //@line 540 "r3d/matrix.rs"
 STACKTOP = sp;return; //@line 545 "r3d/matrix.rs"
}
function __ZN5rustv3r3d6matrix13translate_xyz17h54c1fbdcca009604E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $_15 = 0, $_22 = 0;
 var $_29 = 0, $_8 = 0, $one = 0.0, $x = 0.0, $y = 0.0, $z = 0.0, $zero = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $_29 = sp + 72|0;
 $_22 = sp + 56|0;
 $_15 = sp + 40|0;
 $_8 = sp + 24|0;
 $x = $1;
 $y = $2;
 $z = $3;
 $4 = (+__ZN5rustv3r3d3one17had807af2f7293135E()); //@line 563 "r3d/matrix.rs"
 $one = $4; //@line 563 "r3d/matrix.rs"
 $5 = (+__ZN5rustv3r3d4zero17hccc9cde42a9b40adE()); //@line 563 "r3d/matrix.rs"
 $zero = $5; //@line 563 "r3d/matrix.rs"
 $6 = $one; //@line 565 "r3d/matrix.rs"
 $7 = $zero; //@line 565 "r3d/matrix.rs"
 $8 = $zero; //@line 565 "r3d/matrix.rs"
 $9 = $zero; //@line 565 "r3d/matrix.rs"
 __ZN5rustv3r3d6vector4Vec417h52c31fcc1e26f7b7E($_8,$6,$7,$8,$9); //@line 565 "r3d/matrix.rs"
 $10 = $zero; //@line 566 "r3d/matrix.rs"
 $11 = $one; //@line 566 "r3d/matrix.rs"
 $12 = $zero; //@line 566 "r3d/matrix.rs"
 $13 = $zero; //@line 566 "r3d/matrix.rs"
 __ZN5rustv3r3d6vector4Vec417h52c31fcc1e26f7b7E($_15,$10,$11,$12,$13); //@line 566 "r3d/matrix.rs"
 $14 = $zero; //@line 567 "r3d/matrix.rs"
 $15 = $zero; //@line 567 "r3d/matrix.rs"
 $16 = $one; //@line 567 "r3d/matrix.rs"
 $17 = $zero; //@line 567 "r3d/matrix.rs"
 __ZN5rustv3r3d6vector4Vec417h52c31fcc1e26f7b7E($_22,$14,$15,$16,$17); //@line 567 "r3d/matrix.rs"
 $18 = $x; //@line 568 "r3d/matrix.rs"
 $19 = $y; //@line 568 "r3d/matrix.rs"
 $20 = $z; //@line 568 "r3d/matrix.rs"
 $21 = $one; //@line 568 "r3d/matrix.rs"
 __ZN5rustv3r3d6vector4Vec417h52c31fcc1e26f7b7E($_29,$18,$19,$20,$21); //@line 568 "r3d/matrix.rs"
 __ZN5rustv3r3d6matrix7Matrix417h01ef493098028131E($0,$_8,$_15,$_22,$_29); //@line 564 "r3d/matrix.rs"
 STACKTOP = sp;return; //@line 569 "r3d/matrix.rs"
}
function __ZN5rustv3r3d6matrix18projection_frustum17h3327eefb74ae67caE($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 $8 = +$8;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0;
 var $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $9 = 0.0, $_48 = 0, $_61 = 0, $_74 = 0, $_82 = 0, $a = 0.0, $aspect = 0.0, $b = 0.0, $bottom = 0.0, $c = 0.0, $d = 0.0, $ffar = 0.0, $fnear = 0.0, $fov_radians = 0.0, $left = 0.0;
 var $one = 0.0, $right = 0.0, $top = 0.0, $two = 0.0, $zero = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $_82 = sp + 112|0;
 $_74 = sp + 96|0;
 $_61 = sp + 80|0;
 $_48 = sp + 64|0;
 $left = $1;
 $right = $2;
 $bottom = $3;
 $top = $4;
 $fov_radians = $5;
 $aspect = $6;
 $fnear = $7;
 $ffar = $8;
 $9 = (+__ZN5rustv3r3d3one17had807af2f7293135E()); //@line 590 "r3d/matrix.rs"
 $one = $9; //@line 590 "r3d/matrix.rs"
 $10 = (+__ZN5rustv3r3d4zero17hccc9cde42a9b40adE()); //@line 591 "r3d/matrix.rs"
 $zero = $10; //@line 591 "r3d/matrix.rs"
 $11 = $one; //@line 592 "r3d/matrix.rs"
 $12 = $one; //@line 592 "r3d/matrix.rs"
 $13 = (+__ZN45__LT_f32_u20_as_u20_core__ops__arith__Add_GT_3add17h815deb0ce4b370b5E($11,$12)); //@line 592 "r3d/matrix.rs"
 $two = $13; //@line 592 "r3d/matrix.rs"
 $14 = $right; //@line 593 "r3d/matrix.rs"
 $15 = $left; //@line 593 "r3d/matrix.rs"
 $16 = (+__ZN45__LT_f32_u20_as_u20_core__ops__arith__Add_GT_3add17h815deb0ce4b370b5E($14,$15)); //@line 593 "r3d/matrix.rs"
 $17 = $right; //@line 593 "r3d/matrix.rs"
 $18 = $left; //@line 593 "r3d/matrix.rs"
 $19 = (+__ZN45__LT_f32_u20_as_u20_core__ops__arith__Sub_GT_3sub17he0a1eb3f9d1069c3E($17,$18)); //@line 593 "r3d/matrix.rs"
 $20 = (+__ZN45__LT_f32_u20_as_u20_core__ops__arith__Div_GT_3div17ha905544e578c4868E($16,$19)); //@line 593 "r3d/matrix.rs"
 $a = $20; //@line 593 "r3d/matrix.rs"
 $21 = $top; //@line 594 "r3d/matrix.rs"
 $22 = $bottom; //@line 594 "r3d/matrix.rs"
 $23 = (+__ZN45__LT_f32_u20_as_u20_core__ops__arith__Add_GT_3add17h815deb0ce4b370b5E($21,$22)); //@line 594 "r3d/matrix.rs"
 $24 = $top; //@line 594 "r3d/matrix.rs"
 $25 = $bottom; //@line 594 "r3d/matrix.rs"
 $26 = (+__ZN45__LT_f32_u20_as_u20_core__ops__arith__Sub_GT_3sub17he0a1eb3f9d1069c3E($24,$25)); //@line 594 "r3d/matrix.rs"
 $27 = (+__ZN45__LT_f32_u20_as_u20_core__ops__arith__Div_GT_3div17ha905544e578c4868E($23,$26)); //@line 594 "r3d/matrix.rs"
 $b = $27; //@line 594 "r3d/matrix.rs"
 $28 = $ffar; //@line 595 "r3d/matrix.rs"
 $29 = $fnear; //@line 595 "r3d/matrix.rs"
 $30 = (+__ZN45__LT_f32_u20_as_u20_core__ops__arith__Add_GT_3add17h815deb0ce4b370b5E($28,$29)); //@line 595 "r3d/matrix.rs"
 $31 = (+__ZN45__LT_f32_u20_as_u20_core__ops__arith__Neg_GT_3neg17h695fa36ec0cbefdfE($30)); //@line 595 "r3d/matrix.rs"
 $32 = $ffar; //@line 595 "r3d/matrix.rs"
 $33 = $fnear; //@line 595 "r3d/matrix.rs"
 $34 = (+__ZN45__LT_f32_u20_as_u20_core__ops__arith__Sub_GT_3sub17he0a1eb3f9d1069c3E($32,$33)); //@line 595 "r3d/matrix.rs"
 $35 = (+__ZN45__LT_f32_u20_as_u20_core__ops__arith__Div_GT_3div17ha905544e578c4868E($31,$34)); //@line 595 "r3d/matrix.rs"
 $c = $35; //@line 595 "r3d/matrix.rs"
 $36 = $two; //@line 596 "r3d/matrix.rs"
 $37 = $ffar; //@line 596 "r3d/matrix.rs"
 $38 = (+__ZN45__LT_f32_u20_as_u20_core__ops__arith__Mul_GT_3mul17h85d76a03b8e09b50E($36,$37)); //@line 596 "r3d/matrix.rs"
 $39 = $fnear; //@line 596 "r3d/matrix.rs"
 $40 = (+__ZN45__LT_f32_u20_as_u20_core__ops__arith__Mul_GT_3mul17h85d76a03b8e09b50E($38,$39)); //@line 596 "r3d/matrix.rs"
 $41 = $ffar; //@line 596 "r3d/matrix.rs"
 $42 = $fnear; //@line 596 "r3d/matrix.rs"
 $43 = (+__ZN45__LT_f32_u20_as_u20_core__ops__arith__Sub_GT_3sub17he0a1eb3f9d1069c3E($41,$42)); //@line 596 "r3d/matrix.rs"
 $44 = (+__ZN45__LT_f32_u20_as_u20_core__ops__arith__Div_GT_3div17ha905544e578c4868E($40,$43)); //@line 596 "r3d/matrix.rs"
 $45 = (+__ZN45__LT_f32_u20_as_u20_core__ops__arith__Neg_GT_3neg17h695fa36ec0cbefdfE($44)); //@line 596 "r3d/matrix.rs"
 $d = $45; //@line 596 "r3d/matrix.rs"
 $46 = $two; //@line 598 "r3d/matrix.rs"
 $47 = $fnear; //@line 598 "r3d/matrix.rs"
 $48 = (+__ZN45__LT_f32_u20_as_u20_core__ops__arith__Mul_GT_3mul17h85d76a03b8e09b50E($46,$47)); //@line 598 "r3d/matrix.rs"
 $49 = $right; //@line 598 "r3d/matrix.rs"
 $50 = $left; //@line 598 "r3d/matrix.rs"
 $51 = (+__ZN45__LT_f32_u20_as_u20_core__ops__arith__Sub_GT_3sub17he0a1eb3f9d1069c3E($49,$50)); //@line 598 "r3d/matrix.rs"
 $52 = (+__ZN45__LT_f32_u20_as_u20_core__ops__arith__Div_GT_3div17ha905544e578c4868E($48,$51)); //@line 598 "r3d/matrix.rs"
 $53 = $zero; //@line 598 "r3d/matrix.rs"
 $54 = $zero; //@line 598 "r3d/matrix.rs"
 $55 = $zero; //@line 598 "r3d/matrix.rs"
 __ZN5rustv3r3d6vector4Vec417h52c31fcc1e26f7b7E($_48,$52,$53,$54,$55); //@line 598 "r3d/matrix.rs"
 $56 = $zero; //@line 599 "r3d/matrix.rs"
 $57 = $two; //@line 599 "r3d/matrix.rs"
 $58 = $fnear; //@line 599 "r3d/matrix.rs"
 $59 = (+__ZN45__LT_f32_u20_as_u20_core__ops__arith__Mul_GT_3mul17h85d76a03b8e09b50E($57,$58)); //@line 599 "r3d/matrix.rs"
 $60 = $top; //@line 599 "r3d/matrix.rs"
 $61 = $bottom; //@line 599 "r3d/matrix.rs"
 $62 = (+__ZN45__LT_f32_u20_as_u20_core__ops__arith__Sub_GT_3sub17he0a1eb3f9d1069c3E($60,$61)); //@line 599 "r3d/matrix.rs"
 $63 = (+__ZN45__LT_f32_u20_as_u20_core__ops__arith__Div_GT_3div17ha905544e578c4868E($59,$62)); //@line 599 "r3d/matrix.rs"
 $64 = $zero; //@line 599 "r3d/matrix.rs"
 $65 = $zero; //@line 599 "r3d/matrix.rs"
 __ZN5rustv3r3d6vector4Vec417h52c31fcc1e26f7b7E($_61,$56,$63,$64,$65); //@line 599 "r3d/matrix.rs"
 $66 = $a; //@line 600 "r3d/matrix.rs"
 $67 = $b; //@line 600 "r3d/matrix.rs"
 $68 = $c; //@line 600 "r3d/matrix.rs"
 $69 = $one; //@line 600 "r3d/matrix.rs"
 $70 = (+__ZN45__LT_f32_u20_as_u20_core__ops__arith__Neg_GT_3neg17h695fa36ec0cbefdfE($69)); //@line 600 "r3d/matrix.rs"
 __ZN5rustv3r3d6vector4Vec417h52c31fcc1e26f7b7E($_74,$66,$67,$68,$70); //@line 600 "r3d/matrix.rs"
 $71 = $zero; //@line 601 "r3d/matrix.rs"
 $72 = $zero; //@line 601 "r3d/matrix.rs"
 $73 = $d; //@line 601 "r3d/matrix.rs"
 $74 = $zero; //@line 601 "r3d/matrix.rs"
 __ZN5rustv3r3d6vector4Vec417h52c31fcc1e26f7b7E($_82,$71,$72,$73,$74); //@line 601 "r3d/matrix.rs"
 __ZN5rustv3r3d6matrix7Matrix417h01ef493098028131E($0,$_48,$_61,$_74,$_82); //@line 597 "r3d/matrix.rs"
 STACKTOP = sp;return; //@line 603 "r3d/matrix.rs"
}
function __ZN5rustv14minimal_shader5mainr17hea6d9f5373a3b49bE() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5rustv14minimal_shader4subr17hdd3fa9ec7751dbcbE(); //@line 25 "minimal_shader.rs"
 return; //@line 26 "minimal_shader.rs"
}
function __ZN5rustv14minimal_shader4subr17hdd3fa9ec7751dbcbE() {
 var $$sreg$field = 0, $$sreg$field48 = 0, $$sreg$index47 = 0, $$sreg1$field = 0, $$sreg1$field51 = 0, $$sreg1$index50 = 0, $$sreg10$field = 0, $$sreg10$field78 = 0, $$sreg10$index77 = 0, $$sreg11$field = 0, $$sreg11$field81 = 0, $$sreg11$index80 = 0, $$sreg12$field = 0, $$sreg12$field84 = 0, $$sreg12$index83 = 0, $$sreg13$field = 0, $$sreg13$field87 = 0, $$sreg13$index86 = 0, $$sreg14$field = 0, $$sreg14$field90 = 0;
 var $$sreg14$index89 = 0, $$sreg15$field = 0, $$sreg15$field93 = 0, $$sreg15$index92 = 0, $$sreg16$field = 0, $$sreg16$field96 = 0, $$sreg16$index95 = 0, $$sreg17$field = 0, $$sreg17$field99 = 0, $$sreg17$index98 = 0, $$sreg18$field = 0, $$sreg18$field102 = 0, $$sreg18$index101 = 0, $$sreg19$field = 0, $$sreg19$field105 = 0, $$sreg19$index104 = 0, $$sreg2$field = 0, $$sreg2$field54 = 0, $$sreg2$index53 = 0, $$sreg20$field = 0;
 var $$sreg20$field108 = 0, $$sreg20$index107 = 0, $$sreg21$field = 0, $$sreg21$field111 = 0, $$sreg21$index110 = 0, $$sreg22$field = 0, $$sreg22$field114 = 0, $$sreg22$index113 = 0, $$sreg23$field = 0, $$sreg23$field117 = 0, $$sreg23$index116 = 0, $$sreg24$field = 0, $$sreg24$field120 = 0, $$sreg24$index119 = 0, $$sreg25$field = 0, $$sreg25$field123 = 0, $$sreg25$index122 = 0, $$sreg26$field = 0, $$sreg26$field126 = 0, $$sreg26$index125 = 0;
 var $$sreg27$field = 0, $$sreg27$field129 = 0, $$sreg27$index128 = 0, $$sreg28$field = 0, $$sreg28$field132 = 0, $$sreg28$index131 = 0, $$sreg29$field = 0, $$sreg29$field135 = 0, $$sreg29$index134 = 0, $$sreg3$field = 0, $$sreg3$field57 = 0, $$sreg3$index56 = 0, $$sreg30$field = 0, $$sreg30$field138 = 0, $$sreg30$index137 = 0, $$sreg31$field = 0, $$sreg31$field141 = 0, $$sreg31$index140 = 0, $$sreg32$field = 0, $$sreg32$field144 = 0;
 var $$sreg32$index143 = 0, $$sreg33$field = 0, $$sreg33$field147 = 0, $$sreg33$index146 = 0, $$sreg34$field = 0, $$sreg34$field150 = 0, $$sreg34$index149 = 0, $$sreg35$field = 0, $$sreg35$field153 = 0, $$sreg35$index152 = 0, $$sreg36$field = 0, $$sreg36$field156 = 0, $$sreg36$index155 = 0, $$sreg37$field = 0, $$sreg37$field159 = 0, $$sreg37$index158 = 0, $$sreg38$field = 0, $$sreg38$field162 = 0, $$sreg38$index161 = 0, $$sreg39$field = 0;
 var $$sreg39$field165 = 0, $$sreg39$index164 = 0, $$sreg4$field = 0, $$sreg4$field60 = 0, $$sreg4$index59 = 0, $$sreg40$field = 0, $$sreg40$field168 = 0, $$sreg40$index167 = 0, $$sreg41$field = 0, $$sreg41$field171 = 0, $$sreg41$index170 = 0, $$sreg42$field = 0, $$sreg42$field174 = 0, $$sreg42$index173 = 0, $$sreg43$field = 0, $$sreg43$field177 = 0, $$sreg43$index176 = 0, $$sreg44$field = 0, $$sreg44$field180 = 0, $$sreg44$index179 = 0;
 var $$sreg45$field = 0, $$sreg45$field183 = 0, $$sreg45$index182 = 0, $$sreg46$field = 0, $$sreg46$field186 = 0, $$sreg46$index185 = 0, $$sreg5$field = 0, $$sreg5$field63 = 0, $$sreg5$index62 = 0, $$sreg6$field = 0, $$sreg6$field66 = 0, $$sreg6$index65 = 0, $$sreg7$field = 0, $$sreg7$field69 = 0, $$sreg7$index68 = 0, $$sreg8$field = 0, $$sreg8$field72 = 0, $$sreg8$index71 = 0, $$sreg9$field = 0, $$sreg9$field75 = 0;
 var $$sreg9$index74 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_10 = 0, $_107 = 0, $_108 = 0, $_115 = 0, $_116 = 0, $_132 = 0, $_139 = 0;
 var $_140 = 0, $_160 = 0, $_167 = 0, $_168 = 0, $_183 = 0, $_190 = 0, $_191 = 0, $_2 = 0, $_236 = 0, $_243 = 0, $_244 = 0, $_26 = 0, $_28 = 0, $_30 = 0, $_32 = 0, $_34 = 0, $_357 = 0, $_358 = 0, $_36 = 0, $_365 = 0;
 var $_366 = 0, $_38 = 0, $_382 = 0, $_389 = 0, $_390 = 0, $_40 = 0, $_411 = 0, $_418 = 0, $_419 = 0, $_439 = 0, $_446 = 0, $_447 = 0, $_47 = 0, $_48 = 0, $_544 = 0, $_551 = 0, $_552 = 0, $_68 = 0, $_741 = 0, $_748 = 0;
 var $_749 = 0, $_75 = 0, $_76 = 0, $_775 = 0, $_776 = 0, $_783 = 0, $_784 = 0, $_800 = 0, $_807 = 0, $_808 = 0, $_828 = 0, $_835 = 0, $_836 = 0, $_857 = 0, $_864 = 0, $_865 = 0, $_886 = 0, $_887 = 0, $_894 = 0, $_895 = 0;
 var $_9 = 0, $_911 = 0, $_918 = 0, $_919 = 0, $_939 = 0, $_946 = 0, $_947 = 0, $__arg0 = 0, $__arg01 = 0, $__arg010 = 0, $__arg012 = 0, $__arg022 = 0, $__arg025 = 0, $__arg028 = 0, $__arg03 = 0, $__arg030 = 0, $__arg041 = 0, $__arg05 = 0, $__arg063 = 0, $__arg066 = 0;
 var $__arg069 = 0, $__arg07 = 0, $__arg071 = 0, $__arg072 = 0, $__arg075 = 0, $__arg078 = 0, $__arg080 = 0, $__arg09 = 0, $__arg1 = 0, $__arg111 = 0, $__arg113 = 0, $__arg12 = 0, $__arg123 = 0, $__arg126 = 0, $__arg129 = 0, $__arg14 = 0, $__arg142 = 0, $__arg16 = 0, $__arg164 = 0, $__arg167 = 0;
 var $__arg170 = 0, $__arg173 = 0, $__arg176 = 0, $__arg179 = 0, $__arg18 = 0, $a_pos = 0, $err = 0, $err16 = 0, $err31 = 0, $err36 = 0, $err43 = 0, $err48 = 0, $err53 = 0, $err58 = 0, $fs = 0, $fss = 0, $h = 0, $personalityslot = 0, $s = 0, $s24 = 0;
 var $s27 = 0, $s68 = 0, $s77 = 0, $sp = 0, $txt = 0, $txt21 = 0, $txt65 = 0, $txt74 = 0, $vao = 0, $vao1 = 0, $vbo = 0, $vertices = 0, $vs = 0, $vss = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2176|0);
 $0 = sp + 736|0;
 $1 = sp + 720|0;
 $2 = sp + 704|0;
 $3 = sp + 688|0;
 $4 = sp + 672|0;
 $5 = sp + 656|0;
 $6 = sp + 640|0;
 $7 = sp + 624|0;
 $8 = sp + 608|0;
 $9 = sp + 592|0;
 $10 = sp + 576|0;
 $11 = sp + 560|0;
 $12 = sp + 544|0;
 $13 = sp + 528|0;
 $14 = sp + 512|0;
 $15 = sp + 496|0;
 $16 = sp + 480|0;
 $17 = sp + 464|0;
 $18 = sp + 448|0;
 $19 = sp + 432|0;
 $20 = sp + 416|0;
 $21 = sp + 400|0;
 $22 = sp + 384|0;
 $23 = sp + 368|0;
 $24 = sp + 352|0;
 $25 = sp + 336|0;
 $26 = sp + 320|0;
 $27 = sp + 304|0;
 $28 = sp + 288|0;
 $29 = sp + 272|0;
 $30 = sp + 256|0;
 $31 = sp + 240|0;
 $32 = sp + 224|0;
 $33 = sp + 208|0;
 $34 = sp + 192|0;
 $35 = sp + 176|0;
 $36 = sp + 160|0;
 $37 = sp + 144|0;
 $38 = sp + 128|0;
 $39 = sp + 112|0;
 $40 = sp + 96|0;
 $41 = sp + 80|0;
 $42 = sp + 64|0;
 $43 = sp + 48|0;
 $44 = sp + 32|0;
 $45 = sp + 16|0;
 $46 = sp;
 $personalityslot = sp + 2168|0;
 $_947 = sp + 2160|0;
 $_946 = sp + 2152|0;
 $_939 = sp + 2128|0;
 $_919 = sp + 2112|0;
 $_918 = sp + 2096|0;
 $_911 = sp + 2072|0;
 $s77 = sp + 2056|0;
 $_895 = sp + 2040|0;
 $_894 = sp + 2024|0;
 $_887 = sp + 2000|0;
 $_886 = sp + 1988|0;
 $txt74 = sp + 1976|0;
 $_865 = sp + 1960|0;
 $_864 = sp + 1944|0;
 $_857 = sp + 1920|0;
 $_836 = sp + 1912|0;
 $_835 = sp + 1904|0;
 $_828 = sp + 1880|0;
 $_808 = sp + 1864|0;
 $_807 = sp + 1848|0;
 $_800 = sp + 1824|0;
 $s68 = sp + 1808|0;
 $_784 = sp + 1792|0;
 $_783 = sp + 1776|0;
 $_776 = sp + 1752|0;
 $_775 = sp + 1736|0;
 $txt65 = sp + 1724|0;
 $a_pos = sp + 1720|0;
 $_749 = sp + 1704|0;
 $_748 = sp + 1688|0;
 $_741 = sp + 1664|0;
 $_552 = sp + 1624|0;
 $_551 = sp + 1608|0;
 $_544 = sp + 1584|0;
 $_447 = sp + 1568|0;
 $_446 = sp + 1560|0;
 $_439 = sp + 1536|0;
 $_419 = sp + 1520|0;
 $_418 = sp + 1504|0;
 $_411 = sp + 1480|0;
 $s27 = sp + 1464|0;
 $_390 = sp + 1448|0;
 $_389 = sp + 1432|0;
 $_382 = sp + 1408|0;
 $s24 = sp + 1392|0;
 $_366 = sp + 1376|0;
 $_365 = sp + 1360|0;
 $_358 = sp + 1336|0;
 $_357 = sp + 1324|0;
 $txt21 = sp + 1312|0;
 $fs = sp + 1308|0;
 $fss = sp + 1304|0;
 $_244 = sp + 1280|0;
 $_243 = sp + 1264|0;
 $_236 = sp + 1240|0;
 $vss = sp + 1232|0;
 $vs = sp + 1228|0;
 $vertices = sp + 1216|0;
 $_191 = sp + 1200|0;
 $_190 = sp + 1184|0;
 $_183 = sp + 1160|0;
 $vbo = sp + 1152|0;
 $_168 = sp + 1144|0;
 $_167 = sp + 1136|0;
 $_160 = sp + 1112|0;
 $_140 = sp + 1096|0;
 $_139 = sp + 1080|0;
 $_132 = sp + 1056|0;
 $s = sp + 1040|0;
 $_116 = sp + 1024|0;
 $_115 = sp + 1008|0;
 $_108 = sp + 984|0;
 $_107 = sp + 972|0;
 $txt = sp + 960|0;
 $vao1 = sp + 956|0;
 $vao = sp + 952|0;
 $_76 = sp + 936|0;
 $_75 = sp + 920|0;
 $_68 = sp + 896|0;
 $_48 = sp + 872|0;
 $_47 = sp + 856|0;
 $_40 = sp + 832|0;
 $_10 = sp + 784|0;
 $_9 = sp + 768|0;
 $_2 = sp + 744|0;
 HEAP32[$_10>>2] = 5084; //@line 32 "minimal_shader.rs"
 $47 = ((($_10)) + 4|0); //@line 32 "minimal_shader.rs"
 HEAP32[$47>>2] = 5092; //@line 32 "minimal_shader.rs"
 $48 = HEAP32[$_10>>2]|0; //@line 32 "minimal_shader.rs"
 $__arg0 = $48; //@line 32 "minimal_shader.rs"
 $49 = ((($_10)) + 4|0); //@line 32 "minimal_shader.rs"
 $50 = HEAP32[$49>>2]|0; //@line 32 "minimal_shader.rs"
 $__arg1 = $50; //@line 32 "minimal_shader.rs"
 $51 = $__arg0; //@line 32 "minimal_shader.rs"
 __ZN4core3fmt10ArgumentV13new17heecba43e0c9da516E($46,$51,303); //@line 32 "minimal_shader.rs"
 $$sreg$field = HEAP32[$46>>2]|0; //@line 32 "minimal_shader.rs"
 $$sreg$index47 = ((($46)) + 4|0); //@line 32 "minimal_shader.rs"
 $$sreg$field48 = HEAP32[$$sreg$index47>>2]|0; //@line 32 "minimal_shader.rs"
 $52 = $__arg1; //@line 32 "minimal_shader.rs"
 __ZN4core3fmt10ArgumentV13new17h0963b74890d3a7c4E($45,$52,180); //@line 32 "minimal_shader.rs"
 $$sreg1$field = HEAP32[$45>>2]|0; //@line 32 "minimal_shader.rs"
 $$sreg1$index50 = ((($45)) + 4|0); //@line 32 "minimal_shader.rs"
 $$sreg1$field51 = HEAP32[$$sreg1$index50>>2]|0; //@line 32 "minimal_shader.rs"
 HEAP32[$_9>>2] = $$sreg$field; //@line 32 "minimal_shader.rs"
 $53 = ((($_9)) + 4|0); //@line 32 "minimal_shader.rs"
 HEAP32[$53>>2] = $$sreg$field48; //@line 32 "minimal_shader.rs"
 $54 = ((($_9)) + 8|0); //@line 32 "minimal_shader.rs"
 HEAP32[$54>>2] = $$sreg1$field; //@line 32 "minimal_shader.rs"
 $55 = ((($54)) + 4|0); //@line 32 "minimal_shader.rs"
 HEAP32[$55>>2] = $$sreg1$field51; //@line 32 "minimal_shader.rs"
 $56 = HEAP32[1819]|0; //@line 32 "minimal_shader.rs"
 __ZN4core3fmt9Arguments16new_v1_formatted17hd7921c86529aa3b1E($_2,5096,3,$_9,2,$56,2); //@line 32 "minimal_shader.rs"
 __ZN3std2io5stdio6_print17h5e38a8ff46cfb3e1E($_2); //@line 32 "minimal_shader.rs"
 (_SDL_Init(32)|0); //@line 33 "minimal_shader.rs"
 $_26 = 17; //@line 34 "minimal_shader.rs"
 $57 = $_26; //@line 34 "minimal_shader.rs"
 _SDL_GL_SetAttribute(($57|0),2); //@line 34 "minimal_shader.rs"
 $_28 = 18; //@line 35 "minimal_shader.rs"
 $58 = $_28; //@line 35 "minimal_shader.rs"
 _SDL_GL_SetAttribute(($58|0),0); //@line 35 "minimal_shader.rs"
 $_30 = 0; //@line 37 "minimal_shader.rs"
 $59 = $_30; //@line 37 "minimal_shader.rs"
 _SDL_GL_SetAttribute(($59|0),5); //@line 37 "minimal_shader.rs"
 $_32 = 1; //@line 38 "minimal_shader.rs"
 $60 = $_32; //@line 38 "minimal_shader.rs"
 _SDL_GL_SetAttribute(($60|0),5); //@line 38 "minimal_shader.rs"
 $_34 = 2; //@line 39 "minimal_shader.rs"
 $61 = $_34; //@line 39 "minimal_shader.rs"
 _SDL_GL_SetAttribute(($61|0),5); //@line 39 "minimal_shader.rs"
 $_36 = 6; //@line 40 "minimal_shader.rs"
 $62 = $_36; //@line 40 "minimal_shader.rs"
 _SDL_GL_SetAttribute(($62|0),24); //@line 40 "minimal_shader.rs"
 $_38 = 5; //@line 41 "minimal_shader.rs"
 $63 = $_38; //@line 41 "minimal_shader.rs"
 _SDL_GL_SetAttribute(($63|0),1); //@line 41 "minimal_shader.rs"
 HEAP32[$_48>>2] = 5084; //@line 42 "minimal_shader.rs"
 $64 = ((($_48)) + 4|0); //@line 42 "minimal_shader.rs"
 HEAP32[$64>>2] = 5120; //@line 42 "minimal_shader.rs"
 $65 = HEAP32[$_48>>2]|0; //@line 42 "minimal_shader.rs"
 $__arg01 = $65; //@line 42 "minimal_shader.rs"
 $66 = ((($_48)) + 4|0); //@line 42 "minimal_shader.rs"
 $67 = HEAP32[$66>>2]|0; //@line 42 "minimal_shader.rs"
 $__arg12 = $67; //@line 42 "minimal_shader.rs"
 $68 = $__arg01; //@line 42 "minimal_shader.rs"
 __ZN4core3fmt10ArgumentV13new17heecba43e0c9da516E($44,$68,303); //@line 42 "minimal_shader.rs"
 $$sreg2$field = HEAP32[$44>>2]|0; //@line 42 "minimal_shader.rs"
 $$sreg2$index53 = ((($44)) + 4|0); //@line 42 "minimal_shader.rs"
 $$sreg2$field54 = HEAP32[$$sreg2$index53>>2]|0; //@line 42 "minimal_shader.rs"
 $69 = $__arg12; //@line 42 "minimal_shader.rs"
 __ZN4core3fmt10ArgumentV13new17h0963b74890d3a7c4E($43,$69,180); //@line 42 "minimal_shader.rs"
 $$sreg3$field = HEAP32[$43>>2]|0; //@line 42 "minimal_shader.rs"
 $$sreg3$index56 = ((($43)) + 4|0); //@line 42 "minimal_shader.rs"
 $$sreg3$field57 = HEAP32[$$sreg3$index56>>2]|0; //@line 42 "minimal_shader.rs"
 HEAP32[$_47>>2] = $$sreg2$field; //@line 42 "minimal_shader.rs"
 $70 = ((($_47)) + 4|0); //@line 42 "minimal_shader.rs"
 HEAP32[$70>>2] = $$sreg2$field54; //@line 42 "minimal_shader.rs"
 $71 = ((($_47)) + 8|0); //@line 42 "minimal_shader.rs"
 HEAP32[$71>>2] = $$sreg3$field; //@line 42 "minimal_shader.rs"
 $72 = ((($71)) + 4|0); //@line 42 "minimal_shader.rs"
 HEAP32[$72>>2] = $$sreg3$field57; //@line 42 "minimal_shader.rs"
 $73 = HEAP32[1819]|0; //@line 42 "minimal_shader.rs"
 __ZN4core3fmt9Arguments16new_v1_formatted17hd7921c86529aa3b1E($_40,5096,3,$_47,2,$73,2); //@line 42 "minimal_shader.rs"
 __ZN3std2io5stdio6_print17h5e38a8ff46cfb3e1E($_40); //@line 42 "minimal_shader.rs"
 $w = 512; //@line 44 "minimal_shader.rs"
 $h = 384; //@line 44 "minimal_shader.rs"
 $74 = $w; //@line 45 "minimal_shader.rs"
 $75 = $h; //@line 45 "minimal_shader.rs"
 (_SDL_SetVideoMode(($74|0),($75|0),16,67108864)|0); //@line 45 "minimal_shader.rs"
 HEAP32[$_76>>2] = 5084; //@line 47 "minimal_shader.rs"
 $76 = ((($_76)) + 4|0); //@line 47 "minimal_shader.rs"
 HEAP32[$76>>2] = 5124; //@line 47 "minimal_shader.rs"
 $77 = HEAP32[$_76>>2]|0; //@line 47 "minimal_shader.rs"
 $__arg03 = $77; //@line 47 "minimal_shader.rs"
 $78 = ((($_76)) + 4|0); //@line 47 "minimal_shader.rs"
 $79 = HEAP32[$78>>2]|0; //@line 47 "minimal_shader.rs"
 $__arg14 = $79; //@line 47 "minimal_shader.rs"
 $80 = $__arg03; //@line 47 "minimal_shader.rs"
 __ZN4core3fmt10ArgumentV13new17heecba43e0c9da516E($42,$80,303); //@line 47 "minimal_shader.rs"
 $$sreg4$field = HEAP32[$42>>2]|0; //@line 47 "minimal_shader.rs"
 $$sreg4$index59 = ((($42)) + 4|0); //@line 47 "minimal_shader.rs"
 $$sreg4$field60 = HEAP32[$$sreg4$index59>>2]|0; //@line 47 "minimal_shader.rs"
 $81 = $__arg14; //@line 47 "minimal_shader.rs"
 __ZN4core3fmt10ArgumentV13new17h0963b74890d3a7c4E($41,$81,180); //@line 47 "minimal_shader.rs"
 $$sreg5$field = HEAP32[$41>>2]|0; //@line 47 "minimal_shader.rs"
 $$sreg5$index62 = ((($41)) + 4|0); //@line 47 "minimal_shader.rs"
 $$sreg5$field63 = HEAP32[$$sreg5$index62>>2]|0; //@line 47 "minimal_shader.rs"
 HEAP32[$_75>>2] = $$sreg4$field; //@line 47 "minimal_shader.rs"
 $82 = ((($_75)) + 4|0); //@line 47 "minimal_shader.rs"
 HEAP32[$82>>2] = $$sreg4$field60; //@line 47 "minimal_shader.rs"
 $83 = ((($_75)) + 8|0); //@line 47 "minimal_shader.rs"
 HEAP32[$83>>2] = $$sreg5$field; //@line 47 "minimal_shader.rs"
 $84 = ((($83)) + 4|0); //@line 47 "minimal_shader.rs"
 HEAP32[$84>>2] = $$sreg5$field63; //@line 47 "minimal_shader.rs"
 $85 = HEAP32[1819]|0; //@line 47 "minimal_shader.rs"
 __ZN4core3fmt9Arguments16new_v1_formatted17hd7921c86529aa3b1E($_68,5096,3,$_75,2,$85,2); //@line 47 "minimal_shader.rs"
 __ZN3std2io5stdio6_print17h5e38a8ff46cfb3e1E($_68); //@line 47 "minimal_shader.rs"
 HEAP32[$vao>>2] = 0; //@line 48 "minimal_shader.rs"
 HEAP32[$vao1>>2] = 0; //@line 49 "minimal_shader.rs"
 _glGenVertexArrays(1,($vao|0)); //@line 50 "minimal_shader.rs"
 _glGenVertexArrays(1,($vao1|0)); //@line 51 "minimal_shader.rs"
 __ZN5alloc6string6String3new17h12c66b125e7bb509E($txt); //@line 52 "minimal_shader.rs"
 HEAP32[$_116>>2] = 5084; //@line 52 "minimal_shader.rs"
 $86 = ((($_116)) + 4|0); //@line 52 "minimal_shader.rs"
 HEAP32[$86>>2] = 5128; //@line 52 "minimal_shader.rs"
 $87 = HEAP32[$_116>>2]|0; //@line 52 "minimal_shader.rs"
 $__arg05 = $87; //@line 52 "minimal_shader.rs"
 $88 = ((($_116)) + 4|0); //@line 52 "minimal_shader.rs"
 $89 = HEAP32[$88>>2]|0; //@line 52 "minimal_shader.rs"
 $__arg16 = $89; //@line 52 "minimal_shader.rs"
 $90 = $__arg05; //@line 52 "minimal_shader.rs"
 __THREW__ = 0;
 invoke_viii(317,($40|0),($90|0),(303|0)); //@line 52 "minimal_shader.rs"
 $$sreg6$field = HEAP32[$40>>2]|0; //@line 52 "minimal_shader.rs"
 $$sreg6$index65 = ((($40)) + 4|0); //@line 52 "minimal_shader.rs"
 $$sreg6$field66 = HEAP32[$$sreg6$index65>>2]|0; //@line 52 "minimal_shader.rs"
 $91 = __THREW__; __THREW__ = 0;
 $92 = $91&1;
 do {
  if ($92) {
   label = 143;
  } else {
   $96 = $__arg16; //@line 52 "minimal_shader.rs"
   __THREW__ = 0;
   invoke_viii(318,($39|0),($96|0),(180|0)); //@line 52 "minimal_shader.rs"
   $$sreg7$field = HEAP32[$39>>2]|0; //@line 52 "minimal_shader.rs"
   $$sreg7$index68 = ((($39)) + 4|0); //@line 52 "minimal_shader.rs"
   $$sreg7$field69 = HEAP32[$$sreg7$index68>>2]|0; //@line 52 "minimal_shader.rs"
   $97 = __THREW__; __THREW__ = 0;
   $98 = $97&1;
   if ($98) {
    label = 143;
   } else {
    HEAP32[$_115>>2] = $$sreg6$field; //@line 52 "minimal_shader.rs"
    $99 = ((($_115)) + 4|0); //@line 52 "minimal_shader.rs"
    HEAP32[$99>>2] = $$sreg6$field66; //@line 52 "minimal_shader.rs"
    $100 = ((($_115)) + 8|0); //@line 52 "minimal_shader.rs"
    HEAP32[$100>>2] = $$sreg7$field; //@line 52 "minimal_shader.rs"
    $101 = ((($100)) + 4|0); //@line 52 "minimal_shader.rs"
    HEAP32[$101>>2] = $$sreg7$field69; //@line 52 "minimal_shader.rs"
    $102 = HEAP32[1819]|0; //@line 52 "minimal_shader.rs"
    __THREW__ = 0;
    invoke_viiiiiii(169,($_108|0),(5132|0),2,($_115|0),2,($102|0),2); //@line 52 "minimal_shader.rs"
    $103 = __THREW__; __THREW__ = 0;
    $104 = $103&1;
    if ($104) {
     label = 143;
    } else {
     __THREW__ = 0;
     invoke_vii(319,($_107|0),($_108|0)); //@line 52 "minimal_shader.rs"
     $105 = __THREW__; __THREW__ = 0;
     $106 = $105&1;
     if ($106) {
      label = 143;
     } else {
      __THREW__ = 0;
      invoke_vii(181,($38|0),($_107|0)); //@line 52 "minimal_shader.rs"
      $$sreg8$field = HEAP32[$38>>2]|0; //@line 52 "minimal_shader.rs"
      $$sreg8$index71 = ((($38)) + 4|0); //@line 52 "minimal_shader.rs"
      $$sreg8$field72 = HEAP32[$$sreg8$index71>>2]|0; //@line 52 "minimal_shader.rs"
      $107 = __THREW__; __THREW__ = 0;
      $108 = $107&1;
      if (!($108)) {
       __THREW__ = 0;
       invoke_viii(320,($txt|0),($$sreg8$field|0),($$sreg8$field72|0)); //@line 52 "minimal_shader.rs"
       $109 = __THREW__; __THREW__ = 0;
       $110 = $109&1;
       if (!($110)) {
        __THREW__ = 0;
        invoke_vi(245,($_107|0)); //@line 52 "minimal_shader.rs"
        $111 = __THREW__; __THREW__ = 0;
        $112 = $111&1;
        if ($112) {
         label = 143;
         break;
        }
        HEAP32[$_140>>2] = 5148; //@line 52 "minimal_shader.rs"
        $113 = ((($_140)) + 4|0); //@line 52 "minimal_shader.rs"
        HEAP32[$113>>2] = $vao; //@line 52 "minimal_shader.rs"
        $114 = HEAP32[$_140>>2]|0; //@line 52 "minimal_shader.rs"
        $__arg07 = $114; //@line 52 "minimal_shader.rs"
        $115 = ((($_140)) + 4|0); //@line 52 "minimal_shader.rs"
        $116 = HEAP32[$115>>2]|0; //@line 52 "minimal_shader.rs"
        $__arg18 = $116; //@line 52 "minimal_shader.rs"
        $117 = $__arg07; //@line 52 "minimal_shader.rs"
        __THREW__ = 0;
        invoke_viii(317,($37|0),($117|0),(162|0)); //@line 52 "minimal_shader.rs"
        $$sreg9$field = HEAP32[$37>>2]|0; //@line 52 "minimal_shader.rs"
        $$sreg9$index74 = ((($37)) + 4|0); //@line 52 "minimal_shader.rs"
        $$sreg9$field75 = HEAP32[$$sreg9$index74>>2]|0; //@line 52 "minimal_shader.rs"
        $118 = __THREW__; __THREW__ = 0;
        $119 = $118&1;
        if ($119) {
         label = 143;
         break;
        }
        $120 = $__arg18; //@line 52 "minimal_shader.rs"
        __THREW__ = 0;
        invoke_viii(318,($36|0),($120|0),(180|0)); //@line 52 "minimal_shader.rs"
        $$sreg10$field = HEAP32[$36>>2]|0; //@line 52 "minimal_shader.rs"
        $$sreg10$index77 = ((($36)) + 4|0); //@line 52 "minimal_shader.rs"
        $$sreg10$field78 = HEAP32[$$sreg10$index77>>2]|0; //@line 52 "minimal_shader.rs"
        $121 = __THREW__; __THREW__ = 0;
        $122 = $121&1;
        if ($122) {
         label = 143;
         break;
        }
        HEAP32[$_139>>2] = $$sreg9$field; //@line 52 "minimal_shader.rs"
        $123 = ((($_139)) + 4|0); //@line 52 "minimal_shader.rs"
        HEAP32[$123>>2] = $$sreg9$field75; //@line 52 "minimal_shader.rs"
        $124 = ((($_139)) + 8|0); //@line 52 "minimal_shader.rs"
        HEAP32[$124>>2] = $$sreg10$field; //@line 52 "minimal_shader.rs"
        $125 = ((($124)) + 4|0); //@line 52 "minimal_shader.rs"
        HEAP32[$125>>2] = $$sreg10$field78; //@line 52 "minimal_shader.rs"
        $126 = HEAP32[1819]|0; //@line 52 "minimal_shader.rs"
        __THREW__ = 0;
        invoke_viiiiiii(169,($_132|0),(5156|0),3,($_139|0),2,($126|0),2); //@line 52 "minimal_shader.rs"
        $127 = __THREW__; __THREW__ = 0;
        $128 = $127&1;
        if ($128) {
         label = 143;
         break;
        }
        __THREW__ = 0;
        invoke_vii(319,($s|0),($_132|0)); //@line 52 "minimal_shader.rs"
        $129 = __THREW__; __THREW__ = 0;
        $130 = $129&1;
        if ($130) {
         label = 143;
         break;
        }
        __THREW__ = 0;
        invoke_vii(181,($35|0),($s|0)); //@line 52 "minimal_shader.rs"
        $$sreg11$field = HEAP32[$35>>2]|0; //@line 52 "minimal_shader.rs"
        $$sreg11$index80 = ((($35)) + 4|0); //@line 52 "minimal_shader.rs"
        $$sreg11$field81 = HEAP32[$$sreg11$index80>>2]|0; //@line 52 "minimal_shader.rs"
        $131 = __THREW__; __THREW__ = 0;
        $132 = $131&1;
        if (!($132)) {
         __THREW__ = 0;
         invoke_viii(320,($txt|0),($$sreg11$field|0),($$sreg11$field81|0)); //@line 52 "minimal_shader.rs"
         $133 = __THREW__; __THREW__ = 0;
         $134 = $133&1;
         if (!($134)) {
          __THREW__ = 0;
          invoke_vi(245,($s|0)); //@line 52 "minimal_shader.rs"
          $135 = __THREW__; __THREW__ = 0;
          $136 = $135&1;
          if ($136) {
           label = 143;
           break;
          }
          HEAP32[$_168>>2] = $txt; //@line 52 "minimal_shader.rs"
          $137 = HEAP32[$_168>>2]|0; //@line 52 "minimal_shader.rs"
          $__arg09 = $137; //@line 52 "minimal_shader.rs"
          $138 = $__arg09; //@line 52 "minimal_shader.rs"
          __THREW__ = 0;
          invoke_viii(321,($34|0),($138|0),(322|0)); //@line 52 "minimal_shader.rs"
          $$sreg12$field = HEAP32[$34>>2]|0; //@line 52 "minimal_shader.rs"
          $$sreg12$index83 = ((($34)) + 4|0); //@line 52 "minimal_shader.rs"
          $$sreg12$field84 = HEAP32[$$sreg12$index83>>2]|0; //@line 52 "minimal_shader.rs"
          $139 = __THREW__; __THREW__ = 0;
          $140 = $139&1;
          if ($140) {
           label = 143;
           break;
          }
          HEAP32[$_167>>2] = $$sreg12$field; //@line 52 "minimal_shader.rs"
          $141 = ((($_167)) + 4|0); //@line 52 "minimal_shader.rs"
          HEAP32[$141>>2] = $$sreg12$field84; //@line 52 "minimal_shader.rs"
          $142 = HEAP32[1683]|0; //@line 52 "minimal_shader.rs"
          __THREW__ = 0;
          invoke_viiiiiii(169,($_160|0),(5180|0),2,($_167|0),1,($142|0),1); //@line 52 "minimal_shader.rs"
          $143 = __THREW__; __THREW__ = 0;
          $144 = $143&1;
          if ($144) {
           label = 143;
           break;
          }
          __THREW__ = 0;
          invoke_vi(170,($_160|0)); //@line 52 "minimal_shader.rs"
          $145 = __THREW__; __THREW__ = 0;
          $146 = $145&1;
          if ($146) {
           label = 143;
           break;
          }
          __ZN4core3ptr13drop_in_place17hcdb5cdbc316a5a16E($txt); //@line 52 "minimal_shader.rs"
          $147 = HEAP32[$vao1>>2]|0; //@line 53 "minimal_shader.rs"
          _glBindVertexArray(($147|0)); //@line 53 "minimal_shader.rs"
          $148 = HEAP32[$vao>>2]|0; //@line 54 "minimal_shader.rs"
          _glBindVertexArray(($148|0)); //@line 54 "minimal_shader.rs"
          HEAP32[$vbo>>2] = 0; //@line 55 "minimal_shader.rs"
          HEAP32[$_191>>2] = 5084; //@line 56 "minimal_shader.rs"
          $149 = ((($_191)) + 4|0); //@line 56 "minimal_shader.rs"
          HEAP32[$149>>2] = 5196; //@line 56 "minimal_shader.rs"
          $150 = HEAP32[$_191>>2]|0; //@line 56 "minimal_shader.rs"
          $__arg010 = $150; //@line 56 "minimal_shader.rs"
          $151 = ((($_191)) + 4|0); //@line 56 "minimal_shader.rs"
          $152 = HEAP32[$151>>2]|0; //@line 56 "minimal_shader.rs"
          $__arg111 = $152; //@line 56 "minimal_shader.rs"
          $153 = $__arg010; //@line 56 "minimal_shader.rs"
          __ZN4core3fmt10ArgumentV13new17heecba43e0c9da516E($33,$153,303); //@line 56 "minimal_shader.rs"
          $$sreg13$field = HEAP32[$33>>2]|0; //@line 56 "minimal_shader.rs"
          $$sreg13$index86 = ((($33)) + 4|0); //@line 56 "minimal_shader.rs"
          $$sreg13$field87 = HEAP32[$$sreg13$index86>>2]|0; //@line 56 "minimal_shader.rs"
          $154 = $__arg111; //@line 56 "minimal_shader.rs"
          __ZN4core3fmt10ArgumentV13new17h0963b74890d3a7c4E($32,$154,180); //@line 56 "minimal_shader.rs"
          $$sreg14$field = HEAP32[$32>>2]|0; //@line 56 "minimal_shader.rs"
          $$sreg14$index89 = ((($32)) + 4|0); //@line 56 "minimal_shader.rs"
          $$sreg14$field90 = HEAP32[$$sreg14$index89>>2]|0; //@line 56 "minimal_shader.rs"
          HEAP32[$_190>>2] = $$sreg13$field; //@line 56 "minimal_shader.rs"
          $155 = ((($_190)) + 4|0); //@line 56 "minimal_shader.rs"
          HEAP32[$155>>2] = $$sreg13$field87; //@line 56 "minimal_shader.rs"
          $156 = ((($_190)) + 8|0); //@line 56 "minimal_shader.rs"
          HEAP32[$156>>2] = $$sreg14$field; //@line 56 "minimal_shader.rs"
          $157 = ((($156)) + 4|0); //@line 56 "minimal_shader.rs"
          HEAP32[$157>>2] = $$sreg14$field90; //@line 56 "minimal_shader.rs"
          $158 = HEAP32[1819]|0; //@line 56 "minimal_shader.rs"
          __ZN4core3fmt9Arguments16new_v1_formatted17hd7921c86529aa3b1E($_183,5096,3,$_190,2,$158,2); //@line 56 "minimal_shader.rs"
          __ZN3std2io5stdio6_print17h5e38a8ff46cfb3e1E($_183); //@line 56 "minimal_shader.rs"
          _glGenBuffers(1,($vbo|0)); //@line 57 "minimal_shader.rs"
          $159 = (__ZN5alloc4heap15exchange_malloc17h2b3df7e8451de4ebE(36,4)|0); //@line 58 "minimal_shader.rs"
          HEAPF32[$159>>2] = 0.0; //@line 58 "minimal_shader.rs"
          $160 = ((($159)) + 4|0); //@line 58 "minimal_shader.rs"
          HEAPF32[$160>>2] = 0.5; //@line 58 "minimal_shader.rs"
          $161 = ((($159)) + 8|0); //@line 58 "minimal_shader.rs"
          HEAPF32[$161>>2] = 0.0; //@line 58 "minimal_shader.rs"
          $162 = ((($159)) + 12|0); //@line 58 "minimal_shader.rs"
          HEAPF32[$162>>2] = 0.5; //@line 58 "minimal_shader.rs"
          $163 = ((($159)) + 16|0); //@line 58 "minimal_shader.rs"
          HEAPF32[$163>>2] = -0.5; //@line 58 "minimal_shader.rs"
          $164 = ((($159)) + 20|0); //@line 58 "minimal_shader.rs"
          HEAPF32[$164>>2] = 0.0; //@line 58 "minimal_shader.rs"
          $165 = ((($159)) + 24|0); //@line 58 "minimal_shader.rs"
          HEAPF32[$165>>2] = -0.5; //@line 58 "minimal_shader.rs"
          $166 = ((($159)) + 28|0); //@line 58 "minimal_shader.rs"
          HEAPF32[$166>>2] = -0.5; //@line 58 "minimal_shader.rs"
          $167 = ((($159)) + 32|0); //@line 58 "minimal_shader.rs"
          HEAPF32[$167>>2] = 0.0; //@line 58 "minimal_shader.rs"
          __ZN5alloc5slice29__LT_impl_u20__u5b_T_u5d__GT_8into_vec17h53674b5f3662044aE($vertices,$159,9); //@line 58 "minimal_shader.rs"
          $168 = HEAP32[760]|0; //@line 59 "minimal_shader.rs"
          $169 = HEAP32[$vbo>>2]|0; //@line 59 "minimal_shader.rs"
          __THREW__ = 0;
          invoke_vii(323,($168|0),($169|0)); //@line 59 "minimal_shader.rs"
          $170 = __THREW__; __THREW__ = 0;
          $171 = $170&1;
          L21: do {
           if ($171) {
            label = 146;
           } else {
            $172 = HEAP32[760]|0; //@line 60 "minimal_shader.rs"
            __THREW__ = 0;
            $173 = (invoke_iii(324,($vertices|0),0)|0); //@line 61 "minimal_shader.rs"
            $174 = __THREW__; __THREW__ = 0;
            $175 = $174&1;
            if ($175) {
             label = 146;
             break;
            }
            $176 = HEAP32[762]|0; //@line 62 "minimal_shader.rs"
            __THREW__ = 0;
            invoke_viiii(325,($172|0),36,($173|0),($176|0)); //@line 60 "minimal_shader.rs"
            $177 = __THREW__; __THREW__ = 0;
            $178 = $177&1;
            if ($178) {
             label = 146;
             break;
            }
            $179 = HEAP32[764]|0; //@line 63 "minimal_shader.rs"
            __THREW__ = 0;
            $180 = (invoke_ii(326,($179|0))|0); //@line 63 "minimal_shader.rs"
            $181 = __THREW__; __THREW__ = 0;
            $182 = $181&1;
            if ($182) {
             label = 146;
             break;
            }
            HEAP32[$vs>>2] = $180; //@line 63 "minimal_shader.rs"
            $183 = HEAP32[1300]|0; //@line 64 "minimal_shader.rs"
            $184 = HEAP32[(5204)>>2]|0; //@line 64 "minimal_shader.rs"
            __THREW__ = 0;
            $185 = (invoke_iii(182,($183|0),($184|0))|0); //@line 64 "minimal_shader.rs"
            $186 = __THREW__; __THREW__ = 0;
            $187 = $186&1;
            if ($187) {
             label = 146;
             break;
            }
            HEAP32[$vss>>2] = $185; //@line 64 "minimal_shader.rs"
            HEAP32[$_244>>2] = 5084; //@line 65 "minimal_shader.rs"
            $188 = ((($_244)) + 4|0); //@line 65 "minimal_shader.rs"
            HEAP32[$188>>2] = 5208; //@line 65 "minimal_shader.rs"
            $189 = HEAP32[$_244>>2]|0; //@line 65 "minimal_shader.rs"
            $__arg012 = $189; //@line 65 "minimal_shader.rs"
            $190 = ((($_244)) + 4|0); //@line 65 "minimal_shader.rs"
            $191 = HEAP32[$190>>2]|0; //@line 65 "minimal_shader.rs"
            $__arg113 = $191; //@line 65 "minimal_shader.rs"
            $192 = $__arg012; //@line 65 "minimal_shader.rs"
            __THREW__ = 0;
            invoke_viii(317,($31|0),($192|0),(303|0)); //@line 65 "minimal_shader.rs"
            $$sreg15$field = HEAP32[$31>>2]|0; //@line 65 "minimal_shader.rs"
            $$sreg15$index92 = ((($31)) + 4|0); //@line 65 "minimal_shader.rs"
            $$sreg15$field93 = HEAP32[$$sreg15$index92>>2]|0; //@line 65 "minimal_shader.rs"
            $193 = __THREW__; __THREW__ = 0;
            $194 = $193&1;
            if ($194) {
             label = 146;
             break;
            }
            $195 = $__arg113; //@line 65 "minimal_shader.rs"
            __THREW__ = 0;
            invoke_viii(318,($30|0),($195|0),(180|0)); //@line 65 "minimal_shader.rs"
            $$sreg16$field = HEAP32[$30>>2]|0; //@line 65 "minimal_shader.rs"
            $$sreg16$index95 = ((($30)) + 4|0); //@line 65 "minimal_shader.rs"
            $$sreg16$field96 = HEAP32[$$sreg16$index95>>2]|0; //@line 65 "minimal_shader.rs"
            $196 = __THREW__; __THREW__ = 0;
            $197 = $196&1;
            if ($197) {
             label = 146;
             break;
            }
            HEAP32[$_243>>2] = $$sreg15$field; //@line 65 "minimal_shader.rs"
            $198 = ((($_243)) + 4|0); //@line 65 "minimal_shader.rs"
            HEAP32[$198>>2] = $$sreg15$field93; //@line 65 "minimal_shader.rs"
            $199 = ((($_243)) + 8|0); //@line 65 "minimal_shader.rs"
            HEAP32[$199>>2] = $$sreg16$field; //@line 65 "minimal_shader.rs"
            $200 = ((($199)) + 4|0); //@line 65 "minimal_shader.rs"
            HEAP32[$200>>2] = $$sreg16$field96; //@line 65 "minimal_shader.rs"
            $201 = HEAP32[1819]|0; //@line 65 "minimal_shader.rs"
            __THREW__ = 0;
            invoke_viiiiiii(169,($_236|0),(5096|0),3,($_243|0),2,($201|0),2); //@line 65 "minimal_shader.rs"
            $202 = __THREW__; __THREW__ = 0;
            $203 = $202&1;
            if ($203) {
             label = 146;
             break;
            }
            __THREW__ = 0;
            invoke_vi(170,($_236|0)); //@line 65 "minimal_shader.rs"
            $204 = __THREW__; __THREW__ = 0;
            $205 = $204&1;
            if ($205) {
             label = 146;
             break;
            }
            $206 = HEAP32[$vs>>2]|0; //@line 66 "minimal_shader.rs"
            __THREW__ = 0;
            invoke_viiii(327,($206|0),1,($vss|0),(0|0)); //@line 66 "minimal_shader.rs"
            $207 = __THREW__; __THREW__ = 0;
            $208 = $207&1;
            if ($208) {
             label = 146;
             break;
            }
            __THREW__ = 0;
            $209 = (invoke_i(328)|0); //@line 66 "minimal_shader.rs"
            $210 = __THREW__; __THREW__ = 0;
            $211 = $210&1;
            if ($211) {
             label = 146;
             break;
            }
            $err = $209; //@line 66 "minimal_shader.rs"
            $212 = HEAP32[$vs>>2]|0; //@line 67 "minimal_shader.rs"
            __THREW__ = 0;
            invoke_vi(329,($212|0)); //@line 67 "minimal_shader.rs"
            $213 = __THREW__; __THREW__ = 0;
            $214 = $213&1;
            if ($214) {
             label = 146;
             break;
            }
            __THREW__ = 0;
            $215 = (invoke_i(328)|0); //@line 67 "minimal_shader.rs"
            $216 = __THREW__; __THREW__ = 0;
            $217 = $216&1;
            if ($217) {
             label = 146;
             break;
            }
            $err16 = $215; //@line 67 "minimal_shader.rs"
            $218 = HEAP32[1303]|0; //@line 68 "minimal_shader.rs"
            $219 = HEAP32[(5216)>>2]|0; //@line 68 "minimal_shader.rs"
            __THREW__ = 0;
            $220 = (invoke_iii(182,($218|0),($219|0))|0); //@line 68 "minimal_shader.rs"
            $221 = __THREW__; __THREW__ = 0;
            $222 = $221&1;
            if ($222) {
             label = 146;
             break;
            }
            HEAP32[$fss>>2] = $220; //@line 68 "minimal_shader.rs"
            $223 = HEAP32[763]|0; //@line 69 "minimal_shader.rs"
            __THREW__ = 0;
            $224 = (invoke_ii(326,($223|0))|0); //@line 69 "minimal_shader.rs"
            $225 = __THREW__; __THREW__ = 0;
            $226 = $225&1;
            if ($226) {
             label = 146;
             break;
            }
            HEAP32[$fs>>2] = $224; //@line 69 "minimal_shader.rs"
            __THREW__ = 0;
            invoke_vi(330,($txt21|0)); //@line 70 "minimal_shader.rs"
            $227 = __THREW__; __THREW__ = 0;
            $228 = $227&1;
            if ($228) {
             label = 146;
             break;
            }
            HEAP32[$_366>>2] = 5084; //@line 70 "minimal_shader.rs"
            $229 = ((($_366)) + 4|0); //@line 70 "minimal_shader.rs"
            HEAP32[$229>>2] = 5220; //@line 70 "minimal_shader.rs"
            $230 = HEAP32[$_366>>2]|0; //@line 70 "minimal_shader.rs"
            $__arg022 = $230; //@line 70 "minimal_shader.rs"
            $231 = ((($_366)) + 4|0); //@line 70 "minimal_shader.rs"
            $232 = HEAP32[$231>>2]|0; //@line 70 "minimal_shader.rs"
            $__arg123 = $232; //@line 70 "minimal_shader.rs"
            $233 = $__arg022; //@line 70 "minimal_shader.rs"
            __THREW__ = 0;
            invoke_viii(317,($29|0),($233|0),(303|0)); //@line 70 "minimal_shader.rs"
            $$sreg17$field = HEAP32[$29>>2]|0; //@line 70 "minimal_shader.rs"
            $$sreg17$index98 = ((($29)) + 4|0); //@line 70 "minimal_shader.rs"
            $$sreg17$field99 = HEAP32[$$sreg17$index98>>2]|0; //@line 70 "minimal_shader.rs"
            $234 = __THREW__; __THREW__ = 0;
            $235 = $234&1;
            L38: do {
             if ($235) {
              label = 147;
             } else {
              $236 = $__arg123; //@line 70 "minimal_shader.rs"
              __THREW__ = 0;
              invoke_viii(318,($28|0),($236|0),(180|0)); //@line 70 "minimal_shader.rs"
              $$sreg18$field = HEAP32[$28>>2]|0; //@line 70 "minimal_shader.rs"
              $$sreg18$index101 = ((($28)) + 4|0); //@line 70 "minimal_shader.rs"
              $$sreg18$field102 = HEAP32[$$sreg18$index101>>2]|0; //@line 70 "minimal_shader.rs"
              $237 = __THREW__; __THREW__ = 0;
              $238 = $237&1;
              if ($238) {
               label = 147;
               break;
              }
              HEAP32[$_365>>2] = $$sreg17$field; //@line 70 "minimal_shader.rs"
              $239 = ((($_365)) + 4|0); //@line 70 "minimal_shader.rs"
              HEAP32[$239>>2] = $$sreg17$field99; //@line 70 "minimal_shader.rs"
              $240 = ((($_365)) + 8|0); //@line 70 "minimal_shader.rs"
              HEAP32[$240>>2] = $$sreg18$field; //@line 70 "minimal_shader.rs"
              $241 = ((($240)) + 4|0); //@line 70 "minimal_shader.rs"
              HEAP32[$241>>2] = $$sreg18$field102; //@line 70 "minimal_shader.rs"
              $242 = HEAP32[1819]|0; //@line 70 "minimal_shader.rs"
              __THREW__ = 0;
              invoke_viiiiiii(169,($_358|0),(5132|0),2,($_365|0),2,($242|0),2); //@line 70 "minimal_shader.rs"
              $243 = __THREW__; __THREW__ = 0;
              $244 = $243&1;
              if ($244) {
               label = 147;
               break;
              }
              __THREW__ = 0;
              invoke_vii(319,($_357|0),($_358|0)); //@line 70 "minimal_shader.rs"
              $245 = __THREW__; __THREW__ = 0;
              $246 = $245&1;
              if ($246) {
               label = 147;
               break;
              }
              __THREW__ = 0;
              invoke_vii(181,($27|0),($_357|0)); //@line 70 "minimal_shader.rs"
              $$sreg19$field = HEAP32[$27>>2]|0; //@line 70 "minimal_shader.rs"
              $$sreg19$index104 = ((($27)) + 4|0); //@line 70 "minimal_shader.rs"
              $$sreg19$field105 = HEAP32[$$sreg19$index104>>2]|0; //@line 70 "minimal_shader.rs"
              $247 = __THREW__; __THREW__ = 0;
              $248 = $247&1;
              do {
               if (!($248)) {
                __THREW__ = 0;
                invoke_viii(320,($txt21|0),($$sreg19$field|0),($$sreg19$field105|0)); //@line 70 "minimal_shader.rs"
                $249 = __THREW__; __THREW__ = 0;
                $250 = $249&1;
                if ($250) {
                 break;
                }
                __THREW__ = 0;
                invoke_vi(245,($_357|0)); //@line 70 "minimal_shader.rs"
                $251 = __THREW__; __THREW__ = 0;
                $252 = $251&1;
                if ($252) {
                 label = 147;
                 break L38;
                }
                HEAP32[$_390>>2] = 5224; //@line 70 "minimal_shader.rs"
                $253 = ((($_390)) + 4|0); //@line 70 "minimal_shader.rs"
                HEAP32[$253>>2] = $vs; //@line 70 "minimal_shader.rs"
                $254 = HEAP32[$_390>>2]|0; //@line 70 "minimal_shader.rs"
                $__arg025 = $254; //@line 70 "minimal_shader.rs"
                $255 = ((($_390)) + 4|0); //@line 70 "minimal_shader.rs"
                $256 = HEAP32[$255>>2]|0; //@line 70 "minimal_shader.rs"
                $__arg126 = $256; //@line 70 "minimal_shader.rs"
                $257 = $__arg025; //@line 70 "minimal_shader.rs"
                __THREW__ = 0;
                invoke_viii(317,($26|0),($257|0),(162|0)); //@line 70 "minimal_shader.rs"
                $$sreg20$field = HEAP32[$26>>2]|0; //@line 70 "minimal_shader.rs"
                $$sreg20$index107 = ((($26)) + 4|0); //@line 70 "minimal_shader.rs"
                $$sreg20$field108 = HEAP32[$$sreg20$index107>>2]|0; //@line 70 "minimal_shader.rs"
                $258 = __THREW__; __THREW__ = 0;
                $259 = $258&1;
                if ($259) {
                 label = 147;
                 break L38;
                }
                $260 = $__arg126; //@line 70 "minimal_shader.rs"
                __THREW__ = 0;
                invoke_viii(318,($25|0),($260|0),(180|0)); //@line 70 "minimal_shader.rs"
                $$sreg21$field = HEAP32[$25>>2]|0; //@line 70 "minimal_shader.rs"
                $$sreg21$index110 = ((($25)) + 4|0); //@line 70 "minimal_shader.rs"
                $$sreg21$field111 = HEAP32[$$sreg21$index110>>2]|0; //@line 70 "minimal_shader.rs"
                $261 = __THREW__; __THREW__ = 0;
                $262 = $261&1;
                if ($262) {
                 label = 147;
                 break L38;
                }
                HEAP32[$_389>>2] = $$sreg20$field; //@line 70 "minimal_shader.rs"
                $263 = ((($_389)) + 4|0); //@line 70 "minimal_shader.rs"
                HEAP32[$263>>2] = $$sreg20$field108; //@line 70 "minimal_shader.rs"
                $264 = ((($_389)) + 8|0); //@line 70 "minimal_shader.rs"
                HEAP32[$264>>2] = $$sreg21$field; //@line 70 "minimal_shader.rs"
                $265 = ((($264)) + 4|0); //@line 70 "minimal_shader.rs"
                HEAP32[$265>>2] = $$sreg21$field111; //@line 70 "minimal_shader.rs"
                $266 = HEAP32[1819]|0; //@line 70 "minimal_shader.rs"
                __THREW__ = 0;
                invoke_viiiiiii(169,($_382|0),(5156|0),3,($_389|0),2,($266|0),2); //@line 70 "minimal_shader.rs"
                $267 = __THREW__; __THREW__ = 0;
                $268 = $267&1;
                if ($268) {
                 label = 147;
                 break L38;
                }
                __THREW__ = 0;
                invoke_vii(319,($s24|0),($_382|0)); //@line 70 "minimal_shader.rs"
                $269 = __THREW__; __THREW__ = 0;
                $270 = $269&1;
                if ($270) {
                 label = 147;
                 break L38;
                }
                __THREW__ = 0;
                invoke_vii(181,($24|0),($s24|0)); //@line 70 "minimal_shader.rs"
                $$sreg22$field = HEAP32[$24>>2]|0; //@line 70 "minimal_shader.rs"
                $$sreg22$index113 = ((($24)) + 4|0); //@line 70 "minimal_shader.rs"
                $$sreg22$field114 = HEAP32[$$sreg22$index113>>2]|0; //@line 70 "minimal_shader.rs"
                $271 = __THREW__; __THREW__ = 0;
                $272 = $271&1;
                do {
                 if (!($272)) {
                  __THREW__ = 0;
                  invoke_viii(320,($txt21|0),($$sreg22$field|0),($$sreg22$field114|0)); //@line 70 "minimal_shader.rs"
                  $273 = __THREW__; __THREW__ = 0;
                  $274 = $273&1;
                  if ($274) {
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vi(245,($s24|0)); //@line 70 "minimal_shader.rs"
                  $275 = __THREW__; __THREW__ = 0;
                  $276 = $275&1;
                  if ($276) {
                   label = 147;
                   break L38;
                  }
                  HEAP32[$_419>>2] = 5232; //@line 70 "minimal_shader.rs"
                  $277 = ((($_419)) + 4|0); //@line 70 "minimal_shader.rs"
                  HEAP32[$277>>2] = $fs; //@line 70 "minimal_shader.rs"
                  $278 = HEAP32[$_419>>2]|0; //@line 70 "minimal_shader.rs"
                  $__arg028 = $278; //@line 70 "minimal_shader.rs"
                  $279 = ((($_419)) + 4|0); //@line 70 "minimal_shader.rs"
                  $280 = HEAP32[$279>>2]|0; //@line 70 "minimal_shader.rs"
                  $__arg129 = $280; //@line 70 "minimal_shader.rs"
                  $281 = $__arg028; //@line 70 "minimal_shader.rs"
                  __THREW__ = 0;
                  invoke_viii(317,($23|0),($281|0),(162|0)); //@line 70 "minimal_shader.rs"
                  $$sreg23$field = HEAP32[$23>>2]|0; //@line 70 "minimal_shader.rs"
                  $$sreg23$index116 = ((($23)) + 4|0); //@line 70 "minimal_shader.rs"
                  $$sreg23$field117 = HEAP32[$$sreg23$index116>>2]|0; //@line 70 "minimal_shader.rs"
                  $282 = __THREW__; __THREW__ = 0;
                  $283 = $282&1;
                  if ($283) {
                   label = 147;
                   break L38;
                  }
                  $284 = $__arg129; //@line 70 "minimal_shader.rs"
                  __THREW__ = 0;
                  invoke_viii(318,($22|0),($284|0),(180|0)); //@line 70 "minimal_shader.rs"
                  $$sreg24$field = HEAP32[$22>>2]|0; //@line 70 "minimal_shader.rs"
                  $$sreg24$index119 = ((($22)) + 4|0); //@line 70 "minimal_shader.rs"
                  $$sreg24$field120 = HEAP32[$$sreg24$index119>>2]|0; //@line 70 "minimal_shader.rs"
                  $285 = __THREW__; __THREW__ = 0;
                  $286 = $285&1;
                  if ($286) {
                   label = 147;
                   break L38;
                  }
                  HEAP32[$_418>>2] = $$sreg23$field; //@line 70 "minimal_shader.rs"
                  $287 = ((($_418)) + 4|0); //@line 70 "minimal_shader.rs"
                  HEAP32[$287>>2] = $$sreg23$field117; //@line 70 "minimal_shader.rs"
                  $288 = ((($_418)) + 8|0); //@line 70 "minimal_shader.rs"
                  HEAP32[$288>>2] = $$sreg24$field; //@line 70 "minimal_shader.rs"
                  $289 = ((($288)) + 4|0); //@line 70 "minimal_shader.rs"
                  HEAP32[$289>>2] = $$sreg24$field120; //@line 70 "minimal_shader.rs"
                  $290 = HEAP32[1819]|0; //@line 70 "minimal_shader.rs"
                  __THREW__ = 0;
                  invoke_viiiiiii(169,($_411|0),(5156|0),3,($_418|0),2,($290|0),2); //@line 70 "minimal_shader.rs"
                  $291 = __THREW__; __THREW__ = 0;
                  $292 = $291&1;
                  if ($292) {
                   label = 147;
                   break L38;
                  }
                  __THREW__ = 0;
                  invoke_vii(319,($s27|0),($_411|0)); //@line 70 "minimal_shader.rs"
                  $293 = __THREW__; __THREW__ = 0;
                  $294 = $293&1;
                  if ($294) {
                   label = 147;
                   break L38;
                  }
                  __THREW__ = 0;
                  invoke_vii(181,($21|0),($s27|0)); //@line 70 "minimal_shader.rs"
                  $$sreg25$field = HEAP32[$21>>2]|0; //@line 70 "minimal_shader.rs"
                  $$sreg25$index122 = ((($21)) + 4|0); //@line 70 "minimal_shader.rs"
                  $$sreg25$field123 = HEAP32[$$sreg25$index122>>2]|0; //@line 70 "minimal_shader.rs"
                  $295 = __THREW__; __THREW__ = 0;
                  $296 = $295&1;
                  do {
                   if (!($296)) {
                    __THREW__ = 0;
                    invoke_viii(320,($txt21|0),($$sreg25$field|0),($$sreg25$field123|0)); //@line 70 "minimal_shader.rs"
                    $297 = __THREW__; __THREW__ = 0;
                    $298 = $297&1;
                    if ($298) {
                     break;
                    }
                    __THREW__ = 0;
                    invoke_vi(245,($s27|0)); //@line 70 "minimal_shader.rs"
                    $299 = __THREW__; __THREW__ = 0;
                    $300 = $299&1;
                    if ($300) {
                     label = 147;
                     break L38;
                    }
                    HEAP32[$_447>>2] = $txt21; //@line 70 "minimal_shader.rs"
                    $301 = HEAP32[$_447>>2]|0; //@line 70 "minimal_shader.rs"
                    $__arg030 = $301; //@line 70 "minimal_shader.rs"
                    $302 = $__arg030; //@line 70 "minimal_shader.rs"
                    __THREW__ = 0;
                    invoke_viii(321,($20|0),($302|0),(322|0)); //@line 70 "minimal_shader.rs"
                    $$sreg26$field = HEAP32[$20>>2]|0; //@line 70 "minimal_shader.rs"
                    $$sreg26$index125 = ((($20)) + 4|0); //@line 70 "minimal_shader.rs"
                    $$sreg26$field126 = HEAP32[$$sreg26$index125>>2]|0; //@line 70 "minimal_shader.rs"
                    $303 = __THREW__; __THREW__ = 0;
                    $304 = $303&1;
                    if ($304) {
                     label = 147;
                     break L38;
                    }
                    HEAP32[$_446>>2] = $$sreg26$field; //@line 70 "minimal_shader.rs"
                    $305 = ((($_446)) + 4|0); //@line 70 "minimal_shader.rs"
                    HEAP32[$305>>2] = $$sreg26$field126; //@line 70 "minimal_shader.rs"
                    $306 = HEAP32[1683]|0; //@line 70 "minimal_shader.rs"
                    __THREW__ = 0;
                    invoke_viiiiiii(169,($_439|0),(5180|0),2,($_446|0),1,($306|0),1); //@line 70 "minimal_shader.rs"
                    $307 = __THREW__; __THREW__ = 0;
                    $308 = $307&1;
                    if ($308) {
                     label = 147;
                     break L38;
                    }
                    __THREW__ = 0;
                    invoke_vi(170,($_439|0)); //@line 70 "minimal_shader.rs"
                    $309 = __THREW__; __THREW__ = 0;
                    $310 = $309&1;
                    if ($310) {
                     label = 147;
                     break L38;
                    }
                    __THREW__ = 0;
                    invoke_vi(245,($txt21|0)); //@line 70 "minimal_shader.rs"
                    $311 = __THREW__; __THREW__ = 0;
                    $312 = $311&1;
                    if ($312) {
                     label = 146;
                     break L21;
                    }
                    $313 = HEAP32[$fs>>2]|0; //@line 71 "minimal_shader.rs"
                    __THREW__ = 0;
                    invoke_viiii(327,($313|0),1,($fss|0),(0|0)); //@line 71 "minimal_shader.rs"
                    $314 = __THREW__; __THREW__ = 0;
                    $315 = $314&1;
                    if ($315) {
                     label = 146;
                     break L21;
                    }
                    __THREW__ = 0;
                    $316 = (invoke_i(328)|0); //@line 71 "minimal_shader.rs"
                    $317 = __THREW__; __THREW__ = 0;
                    $318 = $317&1;
                    if ($318) {
                     label = 146;
                     break L21;
                    }
                    $err31 = $316; //@line 71 "minimal_shader.rs"
                    $319 = HEAP32[$fs>>2]|0; //@line 72 "minimal_shader.rs"
                    __THREW__ = 0;
                    invoke_vi(329,($319|0)); //@line 72 "minimal_shader.rs"
                    $320 = __THREW__; __THREW__ = 0;
                    $321 = $320&1;
                    if ($321) {
                     label = 146;
                     break L21;
                    }
                    __THREW__ = 0;
                    $322 = (invoke_i(328)|0); //@line 72 "minimal_shader.rs"
                    $323 = __THREW__; __THREW__ = 0;
                    $324 = $323&1;
                    if ($324) {
                     label = 146;
                     break L21;
                    }
                    $err36 = $322; //@line 72 "minimal_shader.rs"
                    HEAP32[$_552>>2] = 5084; //@line 73 "minimal_shader.rs"
                    $325 = ((($_552)) + 4|0); //@line 73 "minimal_shader.rs"
                    HEAP32[$325>>2] = 5240; //@line 73 "minimal_shader.rs"
                    $326 = HEAP32[$_552>>2]|0; //@line 73 "minimal_shader.rs"
                    $__arg041 = $326; //@line 73 "minimal_shader.rs"
                    $327 = ((($_552)) + 4|0); //@line 73 "minimal_shader.rs"
                    $328 = HEAP32[$327>>2]|0; //@line 73 "minimal_shader.rs"
                    $__arg142 = $328; //@line 73 "minimal_shader.rs"
                    $329 = $__arg041; //@line 73 "minimal_shader.rs"
                    __THREW__ = 0;
                    invoke_viii(317,($19|0),($329|0),(303|0)); //@line 73 "minimal_shader.rs"
                    $$sreg27$field = HEAP32[$19>>2]|0; //@line 73 "minimal_shader.rs"
                    $$sreg27$index128 = ((($19)) + 4|0); //@line 73 "minimal_shader.rs"
                    $$sreg27$field129 = HEAP32[$$sreg27$index128>>2]|0; //@line 73 "minimal_shader.rs"
                    $330 = __THREW__; __THREW__ = 0;
                    $331 = $330&1;
                    if ($331) {
                     label = 146;
                     break L21;
                    }
                    $332 = $__arg142; //@line 73 "minimal_shader.rs"
                    __THREW__ = 0;
                    invoke_viii(318,($18|0),($332|0),(180|0)); //@line 73 "minimal_shader.rs"
                    $$sreg28$field = HEAP32[$18>>2]|0; //@line 73 "minimal_shader.rs"
                    $$sreg28$index131 = ((($18)) + 4|0); //@line 73 "minimal_shader.rs"
                    $$sreg28$field132 = HEAP32[$$sreg28$index131>>2]|0; //@line 73 "minimal_shader.rs"
                    $333 = __THREW__; __THREW__ = 0;
                    $334 = $333&1;
                    if ($334) {
                     label = 146;
                     break L21;
                    }
                    HEAP32[$_551>>2] = $$sreg27$field; //@line 73 "minimal_shader.rs"
                    $335 = ((($_551)) + 4|0); //@line 73 "minimal_shader.rs"
                    HEAP32[$335>>2] = $$sreg27$field129; //@line 73 "minimal_shader.rs"
                    $336 = ((($_551)) + 8|0); //@line 73 "minimal_shader.rs"
                    HEAP32[$336>>2] = $$sreg28$field; //@line 73 "minimal_shader.rs"
                    $337 = ((($336)) + 4|0); //@line 73 "minimal_shader.rs"
                    HEAP32[$337>>2] = $$sreg28$field132; //@line 73 "minimal_shader.rs"
                    $338 = HEAP32[1819]|0; //@line 73 "minimal_shader.rs"
                    __THREW__ = 0;
                    invoke_viiiiiii(169,($_544|0),(5096|0),3,($_551|0),2,($338|0),2); //@line 73 "minimal_shader.rs"
                    $339 = __THREW__; __THREW__ = 0;
                    $340 = $339&1;
                    if ($340) {
                     label = 146;
                     break L21;
                    }
                    __THREW__ = 0;
                    invoke_vi(170,($_544|0)); //@line 73 "minimal_shader.rs"
                    $341 = __THREW__; __THREW__ = 0;
                    $342 = $341&1;
                    if ($342) {
                     label = 146;
                     break L21;
                    }
                    __THREW__ = 0;
                    $343 = (invoke_i(331)|0); //@line 74 "minimal_shader.rs"
                    $344 = __THREW__; __THREW__ = 0;
                    $345 = $344&1;
                    if ($345) {
                     label = 146;
                     break L21;
                    }
                    $sp = $343; //@line 74 "minimal_shader.rs"
                    $346 = $sp; //@line 75 "minimal_shader.rs"
                    $347 = HEAP32[$vs>>2]|0; //@line 75 "minimal_shader.rs"
                    __THREW__ = 0;
                    invoke_vii(332,($346|0),($347|0)); //@line 75 "minimal_shader.rs"
                    $348 = __THREW__; __THREW__ = 0;
                    $349 = $348&1;
                    if ($349) {
                     label = 146;
                     break L21;
                    }
                    __THREW__ = 0;
                    $350 = (invoke_i(328)|0); //@line 75 "minimal_shader.rs"
                    $351 = __THREW__; __THREW__ = 0;
                    $352 = $351&1;
                    if ($352) {
                     label = 146;
                     break L21;
                    }
                    $err43 = $350; //@line 75 "minimal_shader.rs"
                    $353 = $sp; //@line 76 "minimal_shader.rs"
                    $354 = HEAP32[$fs>>2]|0; //@line 76 "minimal_shader.rs"
                    __THREW__ = 0;
                    invoke_vii(332,($353|0),($354|0)); //@line 76 "minimal_shader.rs"
                    $355 = __THREW__; __THREW__ = 0;
                    $356 = $355&1;
                    if ($356) {
                     label = 146;
                     break L21;
                    }
                    __THREW__ = 0;
                    $357 = (invoke_i(328)|0); //@line 76 "minimal_shader.rs"
                    $358 = __THREW__; __THREW__ = 0;
                    $359 = $358&1;
                    if ($359) {
                     label = 146;
                     break L21;
                    }
                    $err48 = $357; //@line 76 "minimal_shader.rs"
                    $360 = $sp; //@line 77 "minimal_shader.rs"
                    __THREW__ = 0;
                    invoke_vi(333,($360|0)); //@line 77 "minimal_shader.rs"
                    $361 = __THREW__; __THREW__ = 0;
                    $362 = $361&1;
                    if ($362) {
                     label = 146;
                     break L21;
                    }
                    __THREW__ = 0;
                    $363 = (invoke_i(328)|0); //@line 77 "minimal_shader.rs"
                    $364 = __THREW__; __THREW__ = 0;
                    $365 = $364&1;
                    if ($365) {
                     label = 146;
                     break L21;
                    }
                    $err53 = $363; //@line 77 "minimal_shader.rs"
                    $366 = $sp; //@line 78 "minimal_shader.rs"
                    __THREW__ = 0;
                    invoke_vi(334,($366|0)); //@line 78 "minimal_shader.rs"
                    $367 = __THREW__; __THREW__ = 0;
                    $368 = $367&1;
                    if ($368) {
                     label = 146;
                     break L21;
                    }
                    __THREW__ = 0;
                    $369 = (invoke_i(328)|0); //@line 78 "minimal_shader.rs"
                    $370 = __THREW__; __THREW__ = 0;
                    $371 = $370&1;
                    if ($371) {
                     label = 146;
                     break L21;
                    }
                    $err58 = $369; //@line 78 "minimal_shader.rs"
                    $372 = HEAP32[$vao>>2]|0; //@line 79 "minimal_shader.rs"
                    HEAP32[9576] = $372; //@line 79 "minimal_shader.rs"
                    $373 = HEAP32[$vbo>>2]|0; //@line 79 "minimal_shader.rs"
                    HEAP32[9577] = $373; //@line 79 "minimal_shader.rs"
                    $374 = $sp; //@line 79 "minimal_shader.rs"
                    HEAP32[9578] = $374; //@line 79 "minimal_shader.rs"
                    HEAP32[$_749>>2] = 5084; //@line 81 "minimal_shader.rs"
                    $375 = ((($_749)) + 4|0); //@line 81 "minimal_shader.rs"
                    HEAP32[$375>>2] = 5244; //@line 81 "minimal_shader.rs"
                    $376 = HEAP32[$_749>>2]|0; //@line 81 "minimal_shader.rs"
                    $__arg063 = $376; //@line 81 "minimal_shader.rs"
                    $377 = ((($_749)) + 4|0); //@line 81 "minimal_shader.rs"
                    $378 = HEAP32[$377>>2]|0; //@line 81 "minimal_shader.rs"
                    $__arg164 = $378; //@line 81 "minimal_shader.rs"
                    $379 = $__arg063; //@line 81 "minimal_shader.rs"
                    __THREW__ = 0;
                    invoke_viii(317,($17|0),($379|0),(303|0)); //@line 81 "minimal_shader.rs"
                    $$sreg29$field = HEAP32[$17>>2]|0; //@line 81 "minimal_shader.rs"
                    $$sreg29$index134 = ((($17)) + 4|0); //@line 81 "minimal_shader.rs"
                    $$sreg29$field135 = HEAP32[$$sreg29$index134>>2]|0; //@line 81 "minimal_shader.rs"
                    $380 = __THREW__; __THREW__ = 0;
                    $381 = $380&1;
                    if ($381) {
                     label = 146;
                     break L21;
                    }
                    $382 = $__arg164; //@line 81 "minimal_shader.rs"
                    __THREW__ = 0;
                    invoke_viii(318,($16|0),($382|0),(180|0)); //@line 81 "minimal_shader.rs"
                    $$sreg30$field = HEAP32[$16>>2]|0; //@line 81 "minimal_shader.rs"
                    $$sreg30$index137 = ((($16)) + 4|0); //@line 81 "minimal_shader.rs"
                    $$sreg30$field138 = HEAP32[$$sreg30$index137>>2]|0; //@line 81 "minimal_shader.rs"
                    $383 = __THREW__; __THREW__ = 0;
                    $384 = $383&1;
                    if ($384) {
                     label = 146;
                     break L21;
                    }
                    HEAP32[$_748>>2] = $$sreg29$field; //@line 81 "minimal_shader.rs"
                    $385 = ((($_748)) + 4|0); //@line 81 "minimal_shader.rs"
                    HEAP32[$385>>2] = $$sreg29$field135; //@line 81 "minimal_shader.rs"
                    $386 = ((($_748)) + 8|0); //@line 81 "minimal_shader.rs"
                    HEAP32[$386>>2] = $$sreg30$field; //@line 81 "minimal_shader.rs"
                    $387 = ((($386)) + 4|0); //@line 81 "minimal_shader.rs"
                    HEAP32[$387>>2] = $$sreg30$field138; //@line 81 "minimal_shader.rs"
                    $388 = HEAP32[1819]|0; //@line 81 "minimal_shader.rs"
                    __THREW__ = 0;
                    invoke_viiiiiii(169,($_741|0),(5096|0),3,($_748|0),2,($388|0),2); //@line 81 "minimal_shader.rs"
                    $389 = __THREW__; __THREW__ = 0;
                    $390 = $389&1;
                    if ($390) {
                     label = 146;
                     break L21;
                    }
                    __THREW__ = 0;
                    invoke_vi(170,($_741|0)); //@line 81 "minimal_shader.rs"
                    $391 = __THREW__; __THREW__ = 0;
                    $392 = $391&1;
                    if ($392) {
                     label = 146;
                     break L21;
                    }
                    $393 = $sp; //@line 82 "minimal_shader.rs"
                    __THREW__ = 0;
                    $394 = (invoke_iii(182,(15152|0),9)|0); //@line 82 "minimal_shader.rs"
                    $395 = __THREW__; __THREW__ = 0;
                    $396 = $395&1;
                    if ($396) {
                     label = 146;
                     break L21;
                    }
                    __THREW__ = 0;
                    $397 = (invoke_iii(335,($393|0),($394|0))|0); //@line 82 "minimal_shader.rs"
                    $398 = __THREW__; __THREW__ = 0;
                    $399 = $398&1;
                    if ($399) {
                     label = 146;
                     break L21;
                    }
                    HEAP32[$a_pos>>2] = $397; //@line 82 "minimal_shader.rs"
                    __THREW__ = 0;
                    invoke_vi(330,($txt65|0)); //@line 83 "minimal_shader.rs"
                    $400 = __THREW__; __THREW__ = 0;
                    $401 = $400&1;
                    if ($401) {
                     label = 146;
                     break L21;
                    }
                    HEAP32[$_784>>2] = 5084; //@line 83 "minimal_shader.rs"
                    $402 = ((($_784)) + 4|0); //@line 83 "minimal_shader.rs"
                    HEAP32[$402>>2] = 5248; //@line 83 "minimal_shader.rs"
                    $403 = HEAP32[$_784>>2]|0; //@line 83 "minimal_shader.rs"
                    $__arg066 = $403; //@line 83 "minimal_shader.rs"
                    $404 = ((($_784)) + 4|0); //@line 83 "minimal_shader.rs"
                    $405 = HEAP32[$404>>2]|0; //@line 83 "minimal_shader.rs"
                    $__arg167 = $405; //@line 83 "minimal_shader.rs"
                    $406 = $__arg066; //@line 83 "minimal_shader.rs"
                    __THREW__ = 0;
                    invoke_viii(317,($15|0),($406|0),(303|0)); //@line 83 "minimal_shader.rs"
                    $$sreg31$field = HEAP32[$15>>2]|0; //@line 83 "minimal_shader.rs"
                    $$sreg31$index140 = ((($15)) + 4|0); //@line 83 "minimal_shader.rs"
                    $$sreg31$field141 = HEAP32[$$sreg31$index140>>2]|0; //@line 83 "minimal_shader.rs"
                    $407 = __THREW__; __THREW__ = 0;
                    $408 = $407&1;
                    L91: do {
                     if ($408) {
                      label = 151;
                     } else {
                      $409 = $__arg167; //@line 83 "minimal_shader.rs"
                      __THREW__ = 0;
                      invoke_viii(318,($14|0),($409|0),(180|0)); //@line 83 "minimal_shader.rs"
                      $$sreg32$field = HEAP32[$14>>2]|0; //@line 83 "minimal_shader.rs"
                      $$sreg32$index143 = ((($14)) + 4|0); //@line 83 "minimal_shader.rs"
                      $$sreg32$field144 = HEAP32[$$sreg32$index143>>2]|0; //@line 83 "minimal_shader.rs"
                      $410 = __THREW__; __THREW__ = 0;
                      $411 = $410&1;
                      if ($411) {
                       label = 151;
                       break;
                      }
                      HEAP32[$_783>>2] = $$sreg31$field; //@line 83 "minimal_shader.rs"
                      $412 = ((($_783)) + 4|0); //@line 83 "minimal_shader.rs"
                      HEAP32[$412>>2] = $$sreg31$field141; //@line 83 "minimal_shader.rs"
                      $413 = ((($_783)) + 8|0); //@line 83 "minimal_shader.rs"
                      HEAP32[$413>>2] = $$sreg32$field; //@line 83 "minimal_shader.rs"
                      $414 = ((($413)) + 4|0); //@line 83 "minimal_shader.rs"
                      HEAP32[$414>>2] = $$sreg32$field144; //@line 83 "minimal_shader.rs"
                      $415 = HEAP32[1819]|0; //@line 83 "minimal_shader.rs"
                      __THREW__ = 0;
                      invoke_viiiiiii(169,($_776|0),(5132|0),2,($_783|0),2,($415|0),2); //@line 83 "minimal_shader.rs"
                      $416 = __THREW__; __THREW__ = 0;
                      $417 = $416&1;
                      if ($417) {
                       label = 151;
                       break;
                      }
                      __THREW__ = 0;
                      invoke_vii(319,($_775|0),($_776|0)); //@line 83 "minimal_shader.rs"
                      $418 = __THREW__; __THREW__ = 0;
                      $419 = $418&1;
                      if ($419) {
                       label = 151;
                       break;
                      }
                      __THREW__ = 0;
                      invoke_vii(181,($13|0),($_775|0)); //@line 83 "minimal_shader.rs"
                      $$sreg33$field = HEAP32[$13>>2]|0; //@line 83 "minimal_shader.rs"
                      $$sreg33$index146 = ((($13)) + 4|0); //@line 83 "minimal_shader.rs"
                      $$sreg33$field147 = HEAP32[$$sreg33$index146>>2]|0; //@line 83 "minimal_shader.rs"
                      $420 = __THREW__; __THREW__ = 0;
                      $421 = $420&1;
                      do {
                       if (!($421)) {
                        __THREW__ = 0;
                        invoke_viii(320,($txt65|0),($$sreg33$field|0),($$sreg33$field147|0)); //@line 83 "minimal_shader.rs"
                        $422 = __THREW__; __THREW__ = 0;
                        $423 = $422&1;
                        if ($423) {
                         break;
                        }
                        __THREW__ = 0;
                        invoke_vi(245,($_775|0)); //@line 83 "minimal_shader.rs"
                        $424 = __THREW__; __THREW__ = 0;
                        $425 = $424&1;
                        if ($425) {
                         label = 151;
                         break L91;
                        }
                        HEAP32[$_808>>2] = 5252; //@line 83 "minimal_shader.rs"
                        $426 = ((($_808)) + 4|0); //@line 83 "minimal_shader.rs"
                        HEAP32[$426>>2] = $a_pos; //@line 83 "minimal_shader.rs"
                        $427 = HEAP32[$_808>>2]|0; //@line 83 "minimal_shader.rs"
                        $__arg069 = $427; //@line 83 "minimal_shader.rs"
                        $428 = ((($_808)) + 4|0); //@line 83 "minimal_shader.rs"
                        $429 = HEAP32[$428>>2]|0; //@line 83 "minimal_shader.rs"
                        $__arg170 = $429; //@line 83 "minimal_shader.rs"
                        $430 = $__arg069; //@line 83 "minimal_shader.rs"
                        __THREW__ = 0;
                        invoke_viii(317,($12|0),($430|0),(162|0)); //@line 83 "minimal_shader.rs"
                        $$sreg34$field = HEAP32[$12>>2]|0; //@line 83 "minimal_shader.rs"
                        $$sreg34$index149 = ((($12)) + 4|0); //@line 83 "minimal_shader.rs"
                        $$sreg34$field150 = HEAP32[$$sreg34$index149>>2]|0; //@line 83 "minimal_shader.rs"
                        $431 = __THREW__; __THREW__ = 0;
                        $432 = $431&1;
                        if ($432) {
                         label = 151;
                         break L91;
                        }
                        $433 = $__arg170; //@line 83 "minimal_shader.rs"
                        __THREW__ = 0;
                        invoke_viii(207,($11|0),($433|0),(179|0)); //@line 83 "minimal_shader.rs"
                        $$sreg35$field = HEAP32[$11>>2]|0; //@line 83 "minimal_shader.rs"
                        $$sreg35$index152 = ((($11)) + 4|0); //@line 83 "minimal_shader.rs"
                        $$sreg35$field153 = HEAP32[$$sreg35$index152>>2]|0; //@line 83 "minimal_shader.rs"
                        $434 = __THREW__; __THREW__ = 0;
                        $435 = $434&1;
                        if ($435) {
                         label = 151;
                         break L91;
                        }
                        HEAP32[$_807>>2] = $$sreg34$field; //@line 83 "minimal_shader.rs"
                        $436 = ((($_807)) + 4|0); //@line 83 "minimal_shader.rs"
                        HEAP32[$436>>2] = $$sreg34$field150; //@line 83 "minimal_shader.rs"
                        $437 = ((($_807)) + 8|0); //@line 83 "minimal_shader.rs"
                        HEAP32[$437>>2] = $$sreg35$field; //@line 83 "minimal_shader.rs"
                        $438 = ((($437)) + 4|0); //@line 83 "minimal_shader.rs"
                        HEAP32[$438>>2] = $$sreg35$field153; //@line 83 "minimal_shader.rs"
                        $439 = HEAP32[1819]|0; //@line 83 "minimal_shader.rs"
                        __THREW__ = 0;
                        invoke_viiiiiii(169,($_800|0),(5156|0),3,($_807|0),2,($439|0),2); //@line 83 "minimal_shader.rs"
                        $440 = __THREW__; __THREW__ = 0;
                        $441 = $440&1;
                        if ($441) {
                         label = 151;
                         break L91;
                        }
                        __THREW__ = 0;
                        invoke_vii(319,($s68|0),($_800|0)); //@line 83 "minimal_shader.rs"
                        $442 = __THREW__; __THREW__ = 0;
                        $443 = $442&1;
                        if ($443) {
                         label = 151;
                         break L91;
                        }
                        __THREW__ = 0;
                        invoke_vii(181,($10|0),($s68|0)); //@line 83 "minimal_shader.rs"
                        $$sreg36$field = HEAP32[$10>>2]|0; //@line 83 "minimal_shader.rs"
                        $$sreg36$index155 = ((($10)) + 4|0); //@line 83 "minimal_shader.rs"
                        $$sreg36$field156 = HEAP32[$$sreg36$index155>>2]|0; //@line 83 "minimal_shader.rs"
                        $444 = __THREW__; __THREW__ = 0;
                        $445 = $444&1;
                        do {
                         if (!($445)) {
                          __THREW__ = 0;
                          invoke_viii(320,($txt65|0),($$sreg36$field|0),($$sreg36$field156|0)); //@line 83 "minimal_shader.rs"
                          $446 = __THREW__; __THREW__ = 0;
                          $447 = $446&1;
                          if ($447) {
                           break;
                          }
                          __THREW__ = 0;
                          invoke_vi(245,($s68|0)); //@line 83 "minimal_shader.rs"
                          $448 = __THREW__; __THREW__ = 0;
                          $449 = $448&1;
                          if ($449) {
                           label = 151;
                           break L91;
                          }
                          HEAP32[$_836>>2] = $txt65; //@line 83 "minimal_shader.rs"
                          $450 = HEAP32[$_836>>2]|0; //@line 83 "minimal_shader.rs"
                          $__arg071 = $450; //@line 83 "minimal_shader.rs"
                          $451 = $__arg071; //@line 83 "minimal_shader.rs"
                          __THREW__ = 0;
                          invoke_viii(321,($9|0),($451|0),(322|0)); //@line 83 "minimal_shader.rs"
                          $$sreg37$field = HEAP32[$9>>2]|0; //@line 83 "minimal_shader.rs"
                          $$sreg37$index158 = ((($9)) + 4|0); //@line 83 "minimal_shader.rs"
                          $$sreg37$field159 = HEAP32[$$sreg37$index158>>2]|0; //@line 83 "minimal_shader.rs"
                          $452 = __THREW__; __THREW__ = 0;
                          $453 = $452&1;
                          if ($453) {
                           label = 151;
                           break L91;
                          }
                          HEAP32[$_835>>2] = $$sreg37$field; //@line 83 "minimal_shader.rs"
                          $454 = ((($_835)) + 4|0); //@line 83 "minimal_shader.rs"
                          HEAP32[$454>>2] = $$sreg37$field159; //@line 83 "minimal_shader.rs"
                          $455 = HEAP32[1683]|0; //@line 83 "minimal_shader.rs"
                          __THREW__ = 0;
                          invoke_viiiiiii(169,($_828|0),(5180|0),2,($_835|0),1,($455|0),1); //@line 83 "minimal_shader.rs"
                          $456 = __THREW__; __THREW__ = 0;
                          $457 = $456&1;
                          if ($457) {
                           label = 151;
                           break L91;
                          }
                          __THREW__ = 0;
                          invoke_vi(170,($_828|0)); //@line 83 "minimal_shader.rs"
                          $458 = __THREW__; __THREW__ = 0;
                          $459 = $458&1;
                          if ($459) {
                           label = 151;
                           break L91;
                          }
                          __THREW__ = 0;
                          invoke_vi(245,($txt65|0)); //@line 83 "minimal_shader.rs"
                          $460 = __THREW__; __THREW__ = 0;
                          $461 = $460&1;
                          if ($461) {
                           label = 146;
                           break L21;
                          }
                          $462 = $w; //@line 84 "minimal_shader.rs"
                          $463 = $h; //@line 84 "minimal_shader.rs"
                          __THREW__ = 0;
                          invoke_viiii(209,0,0,($462|0),($463|0)); //@line 84 "minimal_shader.rs"
                          $464 = __THREW__; __THREW__ = 0;
                          $465 = $464&1;
                          if ($465) {
                           label = 146;
                           break L21;
                          }
                          __THREW__ = 0;
                          invoke_vdddd(232,0.0,1.0,0.0,0.0); //@line 85 "minimal_shader.rs"
                          $466 = __THREW__; __THREW__ = 0;
                          $467 = $466&1;
                          if ($467) {
                           label = 146;
                           break L21;
                          }
                          $468 = HEAP32[789]|0; //@line 86 "minimal_shader.rs"
                          __THREW__ = 0;
                          invoke_vi(233,($468|0)); //@line 86 "minimal_shader.rs"
                          $469 = __THREW__; __THREW__ = 0;
                          $470 = $469&1;
                          if ($470) {
                           label = 146;
                           break L21;
                          }
                          __THREW__ = 0;
                          invoke_v(336); //@line 88 "minimal_shader.rs"
                          $471 = __THREW__; __THREW__ = 0;
                          $472 = $471&1;
                          if ($472) {
                           label = 146;
                           break L21;
                          }
                          __THREW__ = 0;
                          invoke_vdddd(232,0.0,1.0,1.0,0.0); //@line 89 "minimal_shader.rs"
                          $473 = __THREW__; __THREW__ = 0;
                          $474 = $473&1;
                          if ($474) {
                           label = 146;
                           break L21;
                          }
                          $475 = HEAP32[789]|0; //@line 90 "minimal_shader.rs"
                          __THREW__ = 0;
                          invoke_vi(233,($475|0)); //@line 90 "minimal_shader.rs"
                          $476 = __THREW__; __THREW__ = 0;
                          $477 = $476&1;
                          if ($477) {
                           label = 146;
                           break L21;
                          }
                          __THREW__ = 0;
                          invoke_v(336); //@line 92 "minimal_shader.rs"
                          $478 = __THREW__; __THREW__ = 0;
                          $479 = $478&1;
                          if ($479) {
                           label = 146;
                           break L21;
                          }
                          HEAP32[$_865>>2] = 5084; //@line 93 "minimal_shader.rs"
                          $480 = ((($_865)) + 4|0); //@line 93 "minimal_shader.rs"
                          HEAP32[$480>>2] = 5260; //@line 93 "minimal_shader.rs"
                          $481 = HEAP32[$_865>>2]|0; //@line 93 "minimal_shader.rs"
                          $__arg072 = $481; //@line 93 "minimal_shader.rs"
                          $482 = ((($_865)) + 4|0); //@line 93 "minimal_shader.rs"
                          $483 = HEAP32[$482>>2]|0; //@line 93 "minimal_shader.rs"
                          $__arg173 = $483; //@line 93 "minimal_shader.rs"
                          $484 = $__arg072; //@line 93 "minimal_shader.rs"
                          __THREW__ = 0;
                          invoke_viii(317,($8|0),($484|0),(303|0)); //@line 93 "minimal_shader.rs"
                          $$sreg38$field = HEAP32[$8>>2]|0; //@line 93 "minimal_shader.rs"
                          $$sreg38$index161 = ((($8)) + 4|0); //@line 93 "minimal_shader.rs"
                          $$sreg38$field162 = HEAP32[$$sreg38$index161>>2]|0; //@line 93 "minimal_shader.rs"
                          $485 = __THREW__; __THREW__ = 0;
                          $486 = $485&1;
                          if ($486) {
                           label = 146;
                           break L21;
                          }
                          $487 = $__arg173; //@line 93 "minimal_shader.rs"
                          __THREW__ = 0;
                          invoke_viii(318,($7|0),($487|0),(180|0)); //@line 93 "minimal_shader.rs"
                          $$sreg39$field = HEAP32[$7>>2]|0; //@line 93 "minimal_shader.rs"
                          $$sreg39$index164 = ((($7)) + 4|0); //@line 93 "minimal_shader.rs"
                          $$sreg39$field165 = HEAP32[$$sreg39$index164>>2]|0; //@line 93 "minimal_shader.rs"
                          $488 = __THREW__; __THREW__ = 0;
                          $489 = $488&1;
                          if ($489) {
                           label = 146;
                           break L21;
                          }
                          HEAP32[$_864>>2] = $$sreg38$field; //@line 93 "minimal_shader.rs"
                          $490 = ((($_864)) + 4|0); //@line 93 "minimal_shader.rs"
                          HEAP32[$490>>2] = $$sreg38$field162; //@line 93 "minimal_shader.rs"
                          $491 = ((($_864)) + 8|0); //@line 93 "minimal_shader.rs"
                          HEAP32[$491>>2] = $$sreg39$field; //@line 93 "minimal_shader.rs"
                          $492 = ((($491)) + 4|0); //@line 93 "minimal_shader.rs"
                          HEAP32[$492>>2] = $$sreg39$field165; //@line 93 "minimal_shader.rs"
                          $493 = HEAP32[1819]|0; //@line 93 "minimal_shader.rs"
                          __THREW__ = 0;
                          invoke_viiiiiii(169,($_857|0),(5096|0),3,($_864|0),2,($493|0),2); //@line 93 "minimal_shader.rs"
                          $494 = __THREW__; __THREW__ = 0;
                          $495 = $494&1;
                          if ($495) {
                           label = 146;
                           break L21;
                          }
                          __THREW__ = 0;
                          invoke_vi(170,($_857|0)); //@line 93 "minimal_shader.rs"
                          $496 = __THREW__; __THREW__ = 0;
                          $497 = $496&1;
                          if ($497) {
                           label = 146;
                           break L21;
                          }
                          __THREW__ = 0;
                          invoke_vi(330,($txt74|0)); //@line 94 "minimal_shader.rs"
                          $498 = __THREW__; __THREW__ = 0;
                          $499 = $498&1;
                          if ($499) {
                           label = 146;
                           break L21;
                          }
                          HEAP32[$_895>>2] = 5084; //@line 94 "minimal_shader.rs"
                          $500 = ((($_895)) + 4|0); //@line 94 "minimal_shader.rs"
                          HEAP32[$500>>2] = 5264; //@line 94 "minimal_shader.rs"
                          $501 = HEAP32[$_895>>2]|0; //@line 94 "minimal_shader.rs"
                          $__arg075 = $501; //@line 94 "minimal_shader.rs"
                          $502 = ((($_895)) + 4|0); //@line 94 "minimal_shader.rs"
                          $503 = HEAP32[$502>>2]|0; //@line 94 "minimal_shader.rs"
                          $__arg176 = $503; //@line 94 "minimal_shader.rs"
                          $504 = $__arg075; //@line 94 "minimal_shader.rs"
                          __THREW__ = 0;
                          invoke_viii(317,($6|0),($504|0),(303|0)); //@line 94 "minimal_shader.rs"
                          $$sreg40$field = HEAP32[$6>>2]|0; //@line 94 "minimal_shader.rs"
                          $$sreg40$index167 = ((($6)) + 4|0); //@line 94 "minimal_shader.rs"
                          $$sreg40$field168 = HEAP32[$$sreg40$index167>>2]|0; //@line 94 "minimal_shader.rs"
                          $505 = __THREW__; __THREW__ = 0;
                          $506 = $505&1;
                          L124: do {
                           if ($506) {
                            label = 154;
                           } else {
                            $507 = $__arg176; //@line 94 "minimal_shader.rs"
                            __THREW__ = 0;
                            invoke_viii(318,($5|0),($507|0),(180|0)); //@line 94 "minimal_shader.rs"
                            $$sreg41$field = HEAP32[$5>>2]|0; //@line 94 "minimal_shader.rs"
                            $$sreg41$index170 = ((($5)) + 4|0); //@line 94 "minimal_shader.rs"
                            $$sreg41$field171 = HEAP32[$$sreg41$index170>>2]|0; //@line 94 "minimal_shader.rs"
                            $508 = __THREW__; __THREW__ = 0;
                            $509 = $508&1;
                            if ($509) {
                             label = 154;
                             break;
                            }
                            HEAP32[$_894>>2] = $$sreg40$field; //@line 94 "minimal_shader.rs"
                            $510 = ((($_894)) + 4|0); //@line 94 "minimal_shader.rs"
                            HEAP32[$510>>2] = $$sreg40$field168; //@line 94 "minimal_shader.rs"
                            $511 = ((($_894)) + 8|0); //@line 94 "minimal_shader.rs"
                            HEAP32[$511>>2] = $$sreg41$field; //@line 94 "minimal_shader.rs"
                            $512 = ((($511)) + 4|0); //@line 94 "minimal_shader.rs"
                            HEAP32[$512>>2] = $$sreg41$field171; //@line 94 "minimal_shader.rs"
                            $513 = HEAP32[1819]|0; //@line 94 "minimal_shader.rs"
                            __THREW__ = 0;
                            invoke_viiiiiii(169,($_887|0),(5132|0),2,($_894|0),2,($513|0),2); //@line 94 "minimal_shader.rs"
                            $514 = __THREW__; __THREW__ = 0;
                            $515 = $514&1;
                            if ($515) {
                             label = 154;
                             break;
                            }
                            __THREW__ = 0;
                            invoke_vii(319,($_886|0),($_887|0)); //@line 94 "minimal_shader.rs"
                            $516 = __THREW__; __THREW__ = 0;
                            $517 = $516&1;
                            if ($517) {
                             label = 154;
                             break;
                            }
                            __THREW__ = 0;
                            invoke_vii(181,($4|0),($_886|0)); //@line 94 "minimal_shader.rs"
                            $$sreg42$field = HEAP32[$4>>2]|0; //@line 94 "minimal_shader.rs"
                            $$sreg42$index173 = ((($4)) + 4|0); //@line 94 "minimal_shader.rs"
                            $$sreg42$field174 = HEAP32[$$sreg42$index173>>2]|0; //@line 94 "minimal_shader.rs"
                            $518 = __THREW__; __THREW__ = 0;
                            $519 = $518&1;
                            do {
                             if (!($519)) {
                              __THREW__ = 0;
                              invoke_viii(320,($txt74|0),($$sreg42$field|0),($$sreg42$field174|0)); //@line 94 "minimal_shader.rs"
                              $520 = __THREW__; __THREW__ = 0;
                              $521 = $520&1;
                              if ($521) {
                               break;
                              }
                              __THREW__ = 0;
                              invoke_vi(245,($_886|0)); //@line 94 "minimal_shader.rs"
                              $522 = __THREW__; __THREW__ = 0;
                              $523 = $522&1;
                              if ($523) {
                               label = 154;
                               break L124;
                              }
                              HEAP32[$_919>>2] = 5268; //@line 94 "minimal_shader.rs"
                              $524 = ((($_919)) + 4|0); //@line 94 "minimal_shader.rs"
                              HEAP32[$524>>2] = 5276; //@line 94 "minimal_shader.rs"
                              $525 = HEAP32[$_919>>2]|0; //@line 94 "minimal_shader.rs"
                              $__arg078 = $525; //@line 94 "minimal_shader.rs"
                              $526 = ((($_919)) + 4|0); //@line 94 "minimal_shader.rs"
                              $527 = HEAP32[$526>>2]|0; //@line 94 "minimal_shader.rs"
                              $__arg179 = $527; //@line 94 "minimal_shader.rs"
                              $528 = $__arg078; //@line 94 "minimal_shader.rs"
                              __THREW__ = 0;
                              invoke_viii(317,($3|0),($528|0),(162|0)); //@line 94 "minimal_shader.rs"
                              $$sreg43$field = HEAP32[$3>>2]|0; //@line 94 "minimal_shader.rs"
                              $$sreg43$index176 = ((($3)) + 4|0); //@line 94 "minimal_shader.rs"
                              $$sreg43$field177 = HEAP32[$$sreg43$index176>>2]|0; //@line 94 "minimal_shader.rs"
                              $529 = __THREW__; __THREW__ = 0;
                              $530 = $529&1;
                              if ($530) {
                               label = 154;
                               break L124;
                              }
                              $531 = $__arg179; //@line 94 "minimal_shader.rs"
                              __THREW__ = 0;
                              invoke_viii(337,($2|0),($531|0),(338|0)); //@line 94 "minimal_shader.rs"
                              $$sreg44$field = HEAP32[$2>>2]|0; //@line 94 "minimal_shader.rs"
                              $$sreg44$index179 = ((($2)) + 4|0); //@line 94 "minimal_shader.rs"
                              $$sreg44$field180 = HEAP32[$$sreg44$index179>>2]|0; //@line 94 "minimal_shader.rs"
                              $532 = __THREW__; __THREW__ = 0;
                              $533 = $532&1;
                              if ($533) {
                               label = 154;
                               break L124;
                              }
                              HEAP32[$_918>>2] = $$sreg43$field; //@line 94 "minimal_shader.rs"
                              $534 = ((($_918)) + 4|0); //@line 94 "minimal_shader.rs"
                              HEAP32[$534>>2] = $$sreg43$field177; //@line 94 "minimal_shader.rs"
                              $535 = ((($_918)) + 8|0); //@line 94 "minimal_shader.rs"
                              HEAP32[$535>>2] = $$sreg44$field; //@line 94 "minimal_shader.rs"
                              $536 = ((($535)) + 4|0); //@line 94 "minimal_shader.rs"
                              HEAP32[$536>>2] = $$sreg44$field180; //@line 94 "minimal_shader.rs"
                              $537 = HEAP32[1819]|0; //@line 94 "minimal_shader.rs"
                              __THREW__ = 0;
                              invoke_viiiiiii(169,($_911|0),(5156|0),3,($_918|0),2,($537|0),2); //@line 94 "minimal_shader.rs"
                              $538 = __THREW__; __THREW__ = 0;
                              $539 = $538&1;
                              if ($539) {
                               label = 154;
                               break L124;
                              }
                              __THREW__ = 0;
                              invoke_vii(319,($s77|0),($_911|0)); //@line 94 "minimal_shader.rs"
                              $540 = __THREW__; __THREW__ = 0;
                              $541 = $540&1;
                              if ($541) {
                               label = 154;
                               break L124;
                              }
                              __THREW__ = 0;
                              invoke_vii(181,($1|0),($s77|0)); //@line 94 "minimal_shader.rs"
                              $$sreg45$field = HEAP32[$1>>2]|0; //@line 94 "minimal_shader.rs"
                              $$sreg45$index182 = ((($1)) + 4|0); //@line 94 "minimal_shader.rs"
                              $$sreg45$field183 = HEAP32[$$sreg45$index182>>2]|0; //@line 94 "minimal_shader.rs"
                              $542 = __THREW__; __THREW__ = 0;
                              $543 = $542&1;
                              do {
                               if (!($543)) {
                                __THREW__ = 0;
                                invoke_viii(320,($txt74|0),($$sreg45$field|0),($$sreg45$field183|0)); //@line 94 "minimal_shader.rs"
                                $544 = __THREW__; __THREW__ = 0;
                                $545 = $544&1;
                                if ($545) {
                                 break;
                                }
                                __THREW__ = 0;
                                invoke_vi(245,($s77|0)); //@line 94 "minimal_shader.rs"
                                $546 = __THREW__; __THREW__ = 0;
                                $547 = $546&1;
                                if ($547) {
                                 label = 154;
                                 break L124;
                                }
                                HEAP32[$_947>>2] = $txt74; //@line 94 "minimal_shader.rs"
                                $548 = HEAP32[$_947>>2]|0; //@line 94 "minimal_shader.rs"
                                $__arg080 = $548; //@line 94 "minimal_shader.rs"
                                $549 = $__arg080; //@line 94 "minimal_shader.rs"
                                __THREW__ = 0;
                                invoke_viii(321,($0|0),($549|0),(322|0)); //@line 94 "minimal_shader.rs"
                                $$sreg46$field = HEAP32[$0>>2]|0; //@line 94 "minimal_shader.rs"
                                $$sreg46$index185 = ((($0)) + 4|0); //@line 94 "minimal_shader.rs"
                                $$sreg46$field186 = HEAP32[$$sreg46$index185>>2]|0; //@line 94 "minimal_shader.rs"
                                $550 = __THREW__; __THREW__ = 0;
                                $551 = $550&1;
                                if ($551) {
                                 label = 154;
                                 break L124;
                                }
                                HEAP32[$_946>>2] = $$sreg46$field; //@line 94 "minimal_shader.rs"
                                $552 = ((($_946)) + 4|0); //@line 94 "minimal_shader.rs"
                                HEAP32[$552>>2] = $$sreg46$field186; //@line 94 "minimal_shader.rs"
                                $553 = HEAP32[1683]|0; //@line 94 "minimal_shader.rs"
                                __THREW__ = 0;
                                invoke_viiiiiii(169,($_939|0),(5180|0),2,($_946|0),1,($553|0),1); //@line 94 "minimal_shader.rs"
                                $554 = __THREW__; __THREW__ = 0;
                                $555 = $554&1;
                                if ($555) {
                                 label = 154;
                                 break L124;
                                }
                                __THREW__ = 0;
                                invoke_vi(170,($_939|0)); //@line 94 "minimal_shader.rs"
                                $556 = __THREW__; __THREW__ = 0;
                                $557 = $556&1;
                                if ($557) {
                                 label = 154;
                                 break L124;
                                }
                                __THREW__ = 0;
                                invoke_vi(245,($txt74|0)); //@line 94 "minimal_shader.rs"
                                $558 = __THREW__; __THREW__ = 0;
                                $559 = $558&1;
                                if ($559) {
                                 label = 146;
                                 break L21;
                                }
                                __THREW__ = 0;
                                invoke_v(339); //@line 95 "minimal_shader.rs"
                                $560 = __THREW__; __THREW__ = 0;
                                $561 = $560&1;
                                if ($561) {
                                 label = 146;
                                 break L21;
                                }
                                __THREW__ = 0;
                                invoke_v(339); //@line 96 "minimal_shader.rs"
                                $562 = __THREW__; __THREW__ = 0;
                                $563 = $562&1;
                                if ($563) {
                                 label = 146;
                                 break L21;
                                }
                                __THREW__ = 0;
                                invoke_v(339); //@line 97 "minimal_shader.rs"
                                $564 = __THREW__; __THREW__ = 0;
                                $565 = $564&1;
                                if ($565) {
                                 label = 146;
                                 break L21;
                                }
                                __THREW__ = 0;
                                invoke_v(339); //@line 98 "minimal_shader.rs"
                                $566 = __THREW__; __THREW__ = 0;
                                $567 = $566&1;
                                if ($567) {
                                 label = 146;
                                 break L21;
                                }
                                __THREW__ = 0;
                                invoke_viii(340,(339|0),0,1); //@line 99 "minimal_shader.rs"
                                $568 = __THREW__; __THREW__ = 0;
                                $569 = $568&1;
                                if ($569) {
                                 label = 146;
                                 break L21;
                                }
                                __ZN4core3ptr13drop_in_place17h2ae92ba27d02d527E($vertices); //@line 100 "minimal_shader.rs"
                                STACKTOP = sp;return; //@line 100 "minimal_shader.rs"
                               }
                              } while(0);
                              $609 = ___cxa_find_matching_catch_2()|0;
                              $610 = tempRet0;
                              HEAP32[$personalityslot>>2] = $609;
                              $611 = ((($personalityslot)) + 4|0);
                              HEAP32[$611>>2] = $610;
                              __ZN4core3ptr13drop_in_place17hcdb5cdbc316a5a16E($s77); //@line 94 "minimal_shader.rs"
                              break L124;
                             }
                            } while(0);
                            $606 = ___cxa_find_matching_catch_2()|0;
                            $607 = tempRet0;
                            HEAP32[$personalityslot>>2] = $606;
                            $608 = ((($personalityslot)) + 4|0);
                            HEAP32[$608>>2] = $607;
                            __ZN4core3ptr13drop_in_place17hcdb5cdbc316a5a16E($_886); //@line 94 "minimal_shader.rs"
                           }
                          } while(0);
                          if ((label|0) == 154) {
                           $603 = ___cxa_find_matching_catch_2()|0;
                           $604 = tempRet0;
                           HEAP32[$personalityslot>>2] = $603;
                           $605 = ((($personalityslot)) + 4|0);
                           HEAP32[$605>>2] = $604;
                          }
                          __ZN4core3ptr13drop_in_place17hcdb5cdbc316a5a16E($txt74); //@line 94 "minimal_shader.rs"
                          break L21;
                         }
                        } while(0);
                        $600 = ___cxa_find_matching_catch_2()|0;
                        $601 = tempRet0;
                        HEAP32[$personalityslot>>2] = $600;
                        $602 = ((($personalityslot)) + 4|0);
                        HEAP32[$602>>2] = $601;
                        __ZN4core3ptr13drop_in_place17hcdb5cdbc316a5a16E($s68); //@line 83 "minimal_shader.rs"
                        break L91;
                       }
                      } while(0);
                      $597 = ___cxa_find_matching_catch_2()|0;
                      $598 = tempRet0;
                      HEAP32[$personalityslot>>2] = $597;
                      $599 = ((($personalityslot)) + 4|0);
                      HEAP32[$599>>2] = $598;
                      __ZN4core3ptr13drop_in_place17hcdb5cdbc316a5a16E($_775); //@line 83 "minimal_shader.rs"
                     }
                    } while(0);
                    if ((label|0) == 151) {
                     $594 = ___cxa_find_matching_catch_2()|0;
                     $595 = tempRet0;
                     HEAP32[$personalityslot>>2] = $594;
                     $596 = ((($personalityslot)) + 4|0);
                     HEAP32[$596>>2] = $595;
                    }
                    __ZN4core3ptr13drop_in_place17hcdb5cdbc316a5a16E($txt65); //@line 83 "minimal_shader.rs"
                    break L21;
                   }
                  } while(0);
                  $591 = ___cxa_find_matching_catch_2()|0;
                  $592 = tempRet0;
                  HEAP32[$personalityslot>>2] = $591;
                  $593 = ((($personalityslot)) + 4|0);
                  HEAP32[$593>>2] = $592;
                  __ZN4core3ptr13drop_in_place17hcdb5cdbc316a5a16E($s27); //@line 70 "minimal_shader.rs"
                  break L38;
                 }
                } while(0);
                $588 = ___cxa_find_matching_catch_2()|0;
                $589 = tempRet0;
                HEAP32[$personalityslot>>2] = $588;
                $590 = ((($personalityslot)) + 4|0);
                HEAP32[$590>>2] = $589;
                __ZN4core3ptr13drop_in_place17hcdb5cdbc316a5a16E($s24); //@line 70 "minimal_shader.rs"
                break L38;
               }
              } while(0);
              $585 = ___cxa_find_matching_catch_2()|0;
              $586 = tempRet0;
              HEAP32[$personalityslot>>2] = $585;
              $587 = ((($personalityslot)) + 4|0);
              HEAP32[$587>>2] = $586;
              __ZN4core3ptr13drop_in_place17hcdb5cdbc316a5a16E($_357); //@line 70 "minimal_shader.rs"
             }
            } while(0);
            if ((label|0) == 147) {
             $582 = ___cxa_find_matching_catch_2()|0;
             $583 = tempRet0;
             HEAP32[$personalityslot>>2] = $582;
             $584 = ((($personalityslot)) + 4|0);
             HEAP32[$584>>2] = $583;
            }
            __ZN4core3ptr13drop_in_place17hcdb5cdbc316a5a16E($txt21); //@line 70 "minimal_shader.rs"
           }
          } while(0);
          if ((label|0) == 146) {
           $579 = ___cxa_find_matching_catch_2()|0;
           $580 = tempRet0;
           HEAP32[$personalityslot>>2] = $579;
           $581 = ((($personalityslot)) + 4|0);
           HEAP32[$581>>2] = $580;
          }
          __ZN4core3ptr13drop_in_place17h2ae92ba27d02d527E($vertices); //@line 100 "minimal_shader.rs"
          $93 = HEAP32[$personalityslot>>2]|0; //@line 31 "minimal_shader.rs"
          $94 = ((($personalityslot)) + 4|0); //@line 31 "minimal_shader.rs"
          $95 = HEAP32[$94>>2]|0; //@line 31 "minimal_shader.rs"
          ___resumeException($93|0);
          // unreachable;
         }
        }
        $576 = ___cxa_find_matching_catch_2()|0;
        $577 = tempRet0;
        HEAP32[$personalityslot>>2] = $576;
        $578 = ((($personalityslot)) + 4|0);
        HEAP32[$578>>2] = $577;
        __ZN4core3ptr13drop_in_place17hcdb5cdbc316a5a16E($s); //@line 52 "minimal_shader.rs"
        break;
       }
      }
      $573 = ___cxa_find_matching_catch_2()|0;
      $574 = tempRet0;
      HEAP32[$personalityslot>>2] = $573;
      $575 = ((($personalityslot)) + 4|0);
      HEAP32[$575>>2] = $574;
      __ZN4core3ptr13drop_in_place17hcdb5cdbc316a5a16E($_107); //@line 52 "minimal_shader.rs"
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 143) {
  $570 = ___cxa_find_matching_catch_2()|0;
  $571 = tempRet0;
  HEAP32[$personalityslot>>2] = $570;
  $572 = ((($personalityslot)) + 4|0);
  HEAP32[$572>>2] = $571;
 }
 __ZN4core3ptr13drop_in_place17hcdb5cdbc316a5a16E($txt); //@line 52 "minimal_shader.rs"
 $93 = HEAP32[$personalityslot>>2]|0; //@line 31 "minimal_shader.rs"
 $94 = ((($personalityslot)) + 4|0); //@line 31 "minimal_shader.rs"
 $95 = HEAP32[$94>>2]|0; //@line 31 "minimal_shader.rs"
 ___resumeException($93|0);
 // unreachable;
}
function __ZN5rustv14minimal_shader8mainloop17hc41baa1b8bfd45a0E() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a_pos = 0, $err = 0, $err1 = 0, $imat = 0, $mmv = 0, $mp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $imat = sp + 24|0;
 _glClearColor(0.5,0.40000000596046448,0.60000002384185791,0.0); //@line 104 "minimal_shader.rs"
 $0 = HEAP32[776]|0; //@line 105 "minimal_shader.rs"
 _glEnable(($0|0)); //@line 105 "minimal_shader.rs"
 $1 = HEAP32[789]|0; //@line 106 "minimal_shader.rs"
 $2 = HEAP32[788]|0; //@line 106 "minimal_shader.rs"
 $3 = $1 | $2; //@line 106 "minimal_shader.rs"
 _glClear(($3|0)); //@line 106 "minimal_shader.rs"
 $4 = HEAP32[9578]|0; //@line 108 "minimal_shader.rs"
 _glUseProgram(($4|0)); //@line 108 "minimal_shader.rs"
 $5 = HEAP32[9576]|0; //@line 109 "minimal_shader.rs"
 _glBindVertexArray(($5|0)); //@line 109 "minimal_shader.rs"
 $6 = HEAP32[760]|0; //@line 110 "minimal_shader.rs"
 $7 = HEAP32[9577]|0; //@line 110 "minimal_shader.rs"
 _glBindBuffer(($6|0),($7|0)); //@line 110 "minimal_shader.rs"
 $8 = HEAP32[9578]|0; //@line 111 "minimal_shader.rs"
 $9 = (__ZN5rustv3r3d5c_str17h24b9d36d97df309cE(15152,9)|0); //@line 111 "minimal_shader.rs"
 $10 = (_glGetAttribLocation(($8|0),($9|0))|0); //@line 111 "minimal_shader.rs"
 $a_pos = $10; //@line 111 "minimal_shader.rs"
 $11 = $a_pos; //@line 112 "minimal_shader.rs"
 _glEnableVertexAttribArray(($11|0)); //@line 112 "minimal_shader.rs"
 $12 = (_glGetError()|0); //@line 112 "minimal_shader.rs"
 $err = $12; //@line 112 "minimal_shader.rs"
 $13 = $a_pos; //@line 113 "minimal_shader.rs"
 $14 = HEAP32[770]|0; //@line 113 "minimal_shader.rs"
 $15 = HEAP8[39192]|0; //@line 113 "minimal_shader.rs"
 _glVertexAttribPointer(($13|0),3,($14|0),($15|0),12,(0|0)); //@line 113 "minimal_shader.rs"
 $16 = (_glGetError()|0); //@line 113 "minimal_shader.rs"
 $err1 = $16; //@line 113 "minimal_shader.rs"
 $17 = HEAP32[9578]|0; //@line 115 "minimal_shader.rs"
 $18 = (__ZN5rustv3r3d5c_str17h24b9d36d97df309cE(15161,9)|0); //@line 115 "minimal_shader.rs"
 $19 = (_glGetUniformLocation(($17|0),($18|0))|0); //@line 115 "minimal_shader.rs"
 $mp = $19; //@line 115 "minimal_shader.rs"
 $20 = HEAP32[9578]|0; //@line 116 "minimal_shader.rs"
 $21 = (__ZN5rustv3r3d5c_str17h24b9d36d97df309cE(15170,14)|0); //@line 116 "minimal_shader.rs"
 $22 = (_glGetUniformLocation(($20|0),($21|0))|0); //@line 116 "minimal_shader.rs"
 $mmv = $22; //@line 116 "minimal_shader.rs"
 HEAPF32[$imat>>2] = 1.0; //@line 119 "minimal_shader.rs"
 $23 = ((($imat)) + 4|0); //@line 119 "minimal_shader.rs"
 HEAPF32[$23>>2] = 0.0; //@line 119 "minimal_shader.rs"
 $24 = ((($imat)) + 8|0); //@line 119 "minimal_shader.rs"
 HEAPF32[$24>>2] = 0.0; //@line 119 "minimal_shader.rs"
 $25 = ((($imat)) + 12|0); //@line 119 "minimal_shader.rs"
 HEAPF32[$25>>2] = 0.0; //@line 119 "minimal_shader.rs"
 $26 = ((($imat)) + 16|0); //@line 119 "minimal_shader.rs"
 HEAPF32[$26>>2] = 0.0; //@line 119 "minimal_shader.rs"
 $27 = ((($imat)) + 20|0); //@line 119 "minimal_shader.rs"
 HEAPF32[$27>>2] = 1.0; //@line 119 "minimal_shader.rs"
 $28 = ((($imat)) + 24|0); //@line 119 "minimal_shader.rs"
 HEAPF32[$28>>2] = 0.0; //@line 119 "minimal_shader.rs"
 $29 = ((($imat)) + 28|0); //@line 119 "minimal_shader.rs"
 HEAPF32[$29>>2] = 0.0; //@line 119 "minimal_shader.rs"
 $30 = ((($imat)) + 32|0); //@line 119 "minimal_shader.rs"
 HEAPF32[$30>>2] = 0.0; //@line 119 "minimal_shader.rs"
 $31 = ((($imat)) + 36|0); //@line 119 "minimal_shader.rs"
 HEAPF32[$31>>2] = 0.0; //@line 119 "minimal_shader.rs"
 $32 = ((($imat)) + 40|0); //@line 119 "minimal_shader.rs"
 HEAPF32[$32>>2] = 1.0; //@line 119 "minimal_shader.rs"
 $33 = ((($imat)) + 44|0); //@line 119 "minimal_shader.rs"
 HEAPF32[$33>>2] = 0.0; //@line 119 "minimal_shader.rs"
 $34 = ((($imat)) + 48|0); //@line 119 "minimal_shader.rs"
 HEAPF32[$34>>2] = 0.0; //@line 119 "minimal_shader.rs"
 $35 = ((($imat)) + 52|0); //@line 119 "minimal_shader.rs"
 HEAPF32[$35>>2] = 0.0; //@line 119 "minimal_shader.rs"
 $36 = ((($imat)) + 56|0); //@line 119 "minimal_shader.rs"
 HEAPF32[$36>>2] = 0.0; //@line 119 "minimal_shader.rs"
 $37 = ((($imat)) + 60|0); //@line 119 "minimal_shader.rs"
 HEAPF32[$37>>2] = 1.0; //@line 119 "minimal_shader.rs"
 $38 = $mp; //@line 124 "minimal_shader.rs"
 $39 = HEAP8[39192]|0; //@line 124 "minimal_shader.rs"
 _glUniformMatrix4fv(($38|0),1,($39|0),($imat|0)); //@line 124 "minimal_shader.rs"
 $40 = $mmv; //@line 125 "minimal_shader.rs"
 $41 = HEAP8[39192]|0; //@line 125 "minimal_shader.rs"
 _glUniformMatrix4fv(($40|0),1,($41|0),($imat|0)); //@line 125 "minimal_shader.rs"
 $42 = HEAP32[771]|0; //@line 127 "minimal_shader.rs"
 _glDrawArrays(($42|0),0,3); //@line 127 "minimal_shader.rs"
 _glBindVertexArray(0); //@line 128 "minimal_shader.rs"
 $43 = HEAP32[760]|0; //@line 129 "minimal_shader.rs"
 _glBindBuffer(($43|0),0); //@line 129 "minimal_shader.rs"
 __ZN5rustv14render_no_swap17h0ef764ee25a306efE(0); //@line 131 "minimal_shader.rs"
 _glFlush(); //@line 132 "minimal_shader.rs"
 _SDL_GL_SwapBuffers(); //@line 133 "minimal_shader.rs"
 STACKTOP = sp;return; //@line 135 "minimal_shader.rs"
}
function __ZN81__LT_rustv__r3d__vector__Vec2_LT_X_C__u20_Y_GT__u20_as_u20_core__clone__Clone_GT_5clone17h0f20656a3ab1ae05E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $_0 = 0;
 var $__self_0_0 = 0, $__self_0_1 = 0, $personalityslot = 0, $retVal$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $personalityslot = sp + 24|0;
 $_0 = sp + 8|0;
 $self = $0;
 $1 = $self; //@line 455 "r3d/vector.rs"
 $__self_0_0 = $1; //@line 455 "r3d/vector.rs"
 $2 = $self; //@line 455 "r3d/vector.rs"
 $3 = ((($2)) + 4|0); //@line 455 "r3d/vector.rs"
 $__self_0_1 = $3; //@line 455 "r3d/vector.rs"
 $4 = $__self_0_0; //@line 455 "r3d/vector.rs"
 $5 = (+__ZN4core5clone5Clone5clone17h74371fa23fb4a621E($4)); //@line 455 "r3d/vector.rs"
 $6 = $__self_0_1; //@line 455 "r3d/vector.rs"
 __THREW__ = 0;
 $7 = (+invoke_di(311,($6|0))); //@line 455 "r3d/vector.rs"
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  HEAP32[$personalityslot>>2] = $14;
  $16 = ((($personalityslot)) + 4|0);
  HEAP32[$16>>2] = $15;
  $17 = HEAP32[$personalityslot>>2]|0; //@line 453 "r3d/vector.rs"
  $18 = ((($personalityslot)) + 4|0); //@line 453 "r3d/vector.rs"
  $19 = HEAP32[$18>>2]|0; //@line 453 "r3d/vector.rs"
  ___resumeException($17|0);
  // unreachable;
 } else {
  HEAPF32[$_0>>2] = $5; //@line 453 "r3d/vector.rs"
  $10 = ((($_0)) + 4|0); //@line 453 "r3d/vector.rs"
  HEAPF32[$10>>2] = $7; //@line 453 "r3d/vector.rs"
  $11 = +HEAPF32[$_0>>2]; //@line 453 "r3d/vector.rs"
  $12 = ((($_0)) + 4|0); //@line 453 "r3d/vector.rs"
  $13 = +HEAPF32[$12>>2]; //@line 453 "r3d/vector.rs"
  HEAPF32[$retVal>>2] = $11; //@line 453 "r3d/vector.rs"
  $retVal$index1 = ((($retVal)) + 4|0); //@line 453 "r3d/vector.rs"
  HEAPF32[$retVal$index1>>2] = $13; //@line 453 "r3d/vector.rs"
  STACKTOP = sp;return; //@line 453 "r3d/vector.rs"
 }
}
function __ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_6offset17hd3d4f6defcfc53c2E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $count = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $count = $1;
 $2 = $self; //@line 623 "/checkout/src/libcore/ptr.rs"
 $3 = $count; //@line 623 "/checkout/src/libcore/ptr.rs"
 $4 = (($2) + (($3*12)|0)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
 $tmp_ret = $4; //@line 623 "/checkout/src/libcore/ptr.rs"
 $5 = $tmp_ret; //@line 623 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return ($5|0); //@line 624 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h4515c270d1160b64E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 532 "/checkout/src/libcore/ptr.rs"
 $2 = (__ZN4core3ptr4null17h9e9ea5d63ed0f801E()|0); //@line 532 "/checkout/src/libcore/ptr.rs"
 $3 = ($1|0)==($2|0); //@line 532 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return ($3|0); //@line 533 "/checkout/src/libcore/ptr.rs"
}
function __ZN82__LT_rustv__shaders__VertexAttrIndex_u20_as_u20_core__convert__Into_LT_u32_GT__GT_4into17hdb6bfec19c836631E($0) {
 $0 = $0|0;
 var $1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 65 "shaders.rs"
 STACKTOP = sp;return ($1|0); //@line 65 "shaders.rs"
}
function __ZN5rustv7shaders14create_shaders17h23dc65b275091cf2E() {
 var $$sreg$field = 0, $$sreg$field3 = 0, $$sreg$index2 = 0, $$sreg1$field = 0, $$sreg1$field6 = 0, $$sreg1$index5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $_11 = 0, $_15 = 0, $_18 = 0, $_2 = 0, $_26 = 0;
 var $_29 = 0, $_35 = 0, $_38 = 0, $_41 = 0, $_44 = 0, $_47 = 0, $_50 = 0, $_53 = 0, $_56 = 0, $_59 = 0, $_62 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $0 = sp + 16|0;
 $1 = sp;
 $_26 = sp + 88|0;
 $_15 = sp + 48|0;
 $_2 = sp + 24|0;
 __ZN4core3fmt9Arguments6new_v117h1cedc7e123bae470E($_2,6596,1,38620,0); //@line 869 "shaders.rs"
 __ZN3std2io5stdio6_print17h5e38a8ff46cfb3e1E($_2); //@line 869 "shaders.rs"
 $_11 = 0; //@line 874 "shaders.rs"
 $_18 = 0; //@line 875 "shaders.rs"
 $2 = $_18; //@line 875 "shaders.rs"
 __ZN5rustv7shaders17get_shader_prefix17h53fa1b7031930ee0E($1,$2); //@line 875 "shaders.rs"
 $$sreg$field = HEAP32[$1>>2]|0; //@line 875 "shaders.rs"
 $$sreg$index2 = ((($1)) + 4|0); //@line 875 "shaders.rs"
 $$sreg$field3 = HEAP32[$$sreg$index2>>2]|0; //@line 875 "shaders.rs"
 $3 = HEAP32[1651]|0; //@line 876 "shaders.rs"
 $4 = HEAP32[(6608)>>2]|0; //@line 876 "shaders.rs"
 $5 = HEAP32[1653]|0; //@line 877 "shaders.rs"
 $6 = HEAP32[(6616)>>2]|0; //@line 877 "shaders.rs"
 $7 = HEAP32[1655]|0; //@line 878 "shaders.rs"
 $8 = HEAP32[(6624)>>2]|0; //@line 878 "shaders.rs"
 $9 = HEAP32[1657]|0; //@line 879 "shaders.rs"
 $10 = HEAP32[(6632)>>2]|0; //@line 879 "shaders.rs"
 HEAP32[$_15>>2] = $$sreg$field; //@line 875 "shaders.rs"
 $11 = ((($_15)) + 4|0); //@line 875 "shaders.rs"
 HEAP32[$11>>2] = $$sreg$field3; //@line 875 "shaders.rs"
 $12 = ((($_15)) + 8|0); //@line 875 "shaders.rs"
 HEAP32[$12>>2] = $3; //@line 875 "shaders.rs"
 $13 = ((($12)) + 4|0); //@line 875 "shaders.rs"
 HEAP32[$13>>2] = $4; //@line 875 "shaders.rs"
 $14 = ((($_15)) + 16|0); //@line 875 "shaders.rs"
 HEAP32[$14>>2] = $5; //@line 875 "shaders.rs"
 $15 = ((($14)) + 4|0); //@line 875 "shaders.rs"
 HEAP32[$15>>2] = $6; //@line 875 "shaders.rs"
 $16 = ((($_15)) + 24|0); //@line 875 "shaders.rs"
 HEAP32[$16>>2] = $7; //@line 875 "shaders.rs"
 $17 = ((($16)) + 4|0); //@line 875 "shaders.rs"
 HEAP32[$17>>2] = $8; //@line 875 "shaders.rs"
 $18 = ((($_15)) + 32|0); //@line 875 "shaders.rs"
 HEAP32[$18>>2] = $9; //@line 875 "shaders.rs"
 $19 = ((($18)) + 4|0); //@line 875 "shaders.rs"
 HEAP32[$19>>2] = $10; //@line 875 "shaders.rs"
 $_29 = 1; //@line 881 "shaders.rs"
 $20 = $_29; //@line 881 "shaders.rs"
 __ZN5rustv7shaders17get_shader_prefix17h53fa1b7031930ee0E($0,$20); //@line 881 "shaders.rs"
 $$sreg1$field = HEAP32[$0>>2]|0; //@line 881 "shaders.rs"
 $$sreg1$index5 = ((($0)) + 4|0); //@line 881 "shaders.rs"
 $$sreg1$field6 = HEAP32[$$sreg1$index5>>2]|0; //@line 881 "shaders.rs"
 $21 = HEAP32[1659]|0; //@line 882 "shaders.rs"
 $22 = HEAP32[(6640)>>2]|0; //@line 882 "shaders.rs"
 $23 = HEAP32[1661]|0; //@line 883 "shaders.rs"
 $24 = HEAP32[(6648)>>2]|0; //@line 883 "shaders.rs"
 $25 = HEAP32[1653]|0; //@line 884 "shaders.rs"
 $26 = HEAP32[(6616)>>2]|0; //@line 884 "shaders.rs"
 $27 = HEAP32[1663]|0; //@line 885 "shaders.rs"
 $28 = HEAP32[(6656)>>2]|0; //@line 885 "shaders.rs"
 HEAP32[$_26>>2] = $$sreg1$field; //@line 881 "shaders.rs"
 $29 = ((($_26)) + 4|0); //@line 881 "shaders.rs"
 HEAP32[$29>>2] = $$sreg1$field6; //@line 881 "shaders.rs"
 $30 = ((($_26)) + 8|0); //@line 881 "shaders.rs"
 HEAP32[$30>>2] = $21; //@line 881 "shaders.rs"
 $31 = ((($30)) + 4|0); //@line 881 "shaders.rs"
 HEAP32[$31>>2] = $22; //@line 881 "shaders.rs"
 $32 = ((($_26)) + 16|0); //@line 881 "shaders.rs"
 HEAP32[$32>>2] = $23; //@line 881 "shaders.rs"
 $33 = ((($32)) + 4|0); //@line 881 "shaders.rs"
 HEAP32[$33>>2] = $24; //@line 881 "shaders.rs"
 $34 = ((($_26)) + 24|0); //@line 881 "shaders.rs"
 HEAP32[$34>>2] = $25; //@line 881 "shaders.rs"
 $35 = ((($34)) + 4|0); //@line 881 "shaders.rs"
 HEAP32[$35>>2] = $26; //@line 881 "shaders.rs"
 $36 = ((($_26)) + 32|0); //@line 881 "shaders.rs"
 HEAP32[$36>>2] = $27; //@line 881 "shaders.rs"
 $37 = ((($36)) + 4|0); //@line 881 "shaders.rs"
 HEAP32[$37>>2] = $28; //@line 881 "shaders.rs"
 $38 = $_11; //@line 873 "shaders.rs"
 __ZN5rustv7shaders17create_shader_sub17h9237f2165d5effcfE($38,$_15,5,$_26,5); //@line 873 "shaders.rs"
 $_35 = 2; //@line 889 "shaders.rs"
 $39 = HEAP32[1665]|0; //@line 890 "shaders.rs"
 $40 = HEAP32[(6664)>>2]|0; //@line 890 "shaders.rs"
 $41 = $_35; //@line 888 "shaders.rs"
 __ZN5rustv7shaders18create_shader_sub217h769bfd914bd2bd37E($41,$39,$40); //@line 888 "shaders.rs"
 $_38 = 3; //@line 893 "shaders.rs"
 $42 = HEAP32[1665]|0; //@line 894 "shaders.rs"
 $43 = HEAP32[(6664)>>2]|0; //@line 894 "shaders.rs"
 $44 = $_38; //@line 892 "shaders.rs"
 __ZN5rustv7shaders18create_shader_sub217h769bfd914bd2bd37E($44,$42,$43); //@line 892 "shaders.rs"
 $_41 = 4; //@line 897 "shaders.rs"
 $45 = HEAP32[1667]|0; //@line 898 "shaders.rs"
 $46 = HEAP32[(6672)>>2]|0; //@line 898 "shaders.rs"
 $47 = $_41; //@line 896 "shaders.rs"
 __ZN5rustv7shaders18create_shader_sub217h769bfd914bd2bd37E($47,$45,$46); //@line 896 "shaders.rs"
 $_44 = 5; //@line 900 "shaders.rs"
 $48 = HEAP32[1667]|0; //@line 901 "shaders.rs"
 $49 = HEAP32[(6672)>>2]|0; //@line 901 "shaders.rs"
 $50 = $_44; //@line 899 "shaders.rs"
 __ZN5rustv7shaders18create_shader_sub217h769bfd914bd2bd37E($50,$48,$49); //@line 899 "shaders.rs"
 $_47 = 8; //@line 903 "shaders.rs"
 $51 = HEAP32[1669]|0; //@line 904 "shaders.rs"
 $52 = HEAP32[(6680)>>2]|0; //@line 904 "shaders.rs"
 $53 = $_47; //@line 902 "shaders.rs"
 __ZN5rustv7shaders18create_shader_sub217h769bfd914bd2bd37E($53,$51,$52); //@line 902 "shaders.rs"
 $_50 = 9; //@line 906 "shaders.rs"
 $54 = HEAP32[1671]|0; //@line 907 "shaders.rs"
 $55 = HEAP32[(6688)>>2]|0; //@line 907 "shaders.rs"
 $56 = $_50; //@line 905 "shaders.rs"
 __ZN5rustv7shaders18create_shader_sub217h769bfd914bd2bd37E($56,$54,$55); //@line 905 "shaders.rs"
 $_53 = 10; //@line 909 "shaders.rs"
 $57 = HEAP32[1673]|0; //@line 910 "shaders.rs"
 $58 = HEAP32[(6696)>>2]|0; //@line 910 "shaders.rs"
 $59 = $_53; //@line 908 "shaders.rs"
 __ZN5rustv7shaders18create_shader_sub217h769bfd914bd2bd37E($59,$57,$58); //@line 908 "shaders.rs"
 $_56 = 1; //@line 912 "shaders.rs"
 $60 = HEAP32[1675]|0; //@line 913 "shaders.rs"
 $61 = HEAP32[(6704)>>2]|0; //@line 913 "shaders.rs"
 $62 = $_56; //@line 911 "shaders.rs"
 __ZN5rustv7shaders18create_shader_sub217h769bfd914bd2bd37E($62,$60,$61); //@line 911 "shaders.rs"
 $_59 = 6; //@line 915 "shaders.rs"
 $63 = HEAP32[1677]|0; //@line 916 "shaders.rs"
 $64 = HEAP32[(6712)>>2]|0; //@line 916 "shaders.rs"
 $65 = $_59; //@line 914 "shaders.rs"
 __ZN5rustv7shaders18create_shader_sub217h769bfd914bd2bd37E($65,$63,$64); //@line 914 "shaders.rs"
 $_62 = 7; //@line 918 "shaders.rs"
 $66 = HEAP32[1679]|0; //@line 919 "shaders.rs"
 $67 = HEAP32[(6720)>>2]|0; //@line 919 "shaders.rs"
 $68 = $_62; //@line 917 "shaders.rs"
 __ZN5rustv7shaders18create_shader_sub217h769bfd914bd2bd37E($68,$66,$67); //@line 917 "shaders.rs"
 STACKTOP = sp;return; //@line 920 "shaders.rs"
}
function __ZN5rustv7shaders17get_shader_prefix17h53fa1b7031930ee0E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sink = 0, $$sink4 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_0 = 0, $retVal$index1 = 0, $st = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_0 = sp;
 $st = $0;
 $1 = $st; //@line 804 "shaders.rs"
 $2 = $1&255; //@line 804 "shaders.rs"
 switch ($2|0) {
 case 0:  {
  $$sink = 7752;$$sink4 = (7756);
  break;
 }
 case 1:  {
  $$sink = 7760;$$sink4 = (7764);
  break;
 }
 default: {
  __ZN3std9panicking11begin_panic17h1a4c9be19e7ea39bE(20364,25,7768); //@line 806 "shaders.rs"
  // unreachable; //@line 806 "shaders.rs"
 }
 }
 $3 = HEAP32[$$sink>>2]|0;
 $4 = HEAP32[$$sink4>>2]|0;
 HEAP32[$_0>>2] = $3;
 $5 = ((($_0)) + 4|0);
 HEAP32[$5>>2] = $4;
 $6 = HEAP32[$_0>>2]|0; //@line 808 "shaders.rs"
 $7 = ((($_0)) + 4|0); //@line 808 "shaders.rs"
 $8 = HEAP32[$7>>2]|0; //@line 808 "shaders.rs"
 HEAP32[$retVal>>2] = $6; //@line 808 "shaders.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 808 "shaders.rs"
 HEAP32[$retVal$index1>>2] = $8; //@line 808 "shaders.rs"
 STACKTOP = sp;return; //@line 808 "shaders.rs"
}
function __ZN5rustv7shaders17create_shader_sub17h9237f2165d5effcfE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sreg$field = 0, $$sreg$field7 = 0, $$sreg$index6 = 0, $$sreg1$field = 0, $$sreg1$field10 = 0, $$sreg1$index9 = 0, $$sreg2$field = 0, $$sreg2$field13 = 0, $$sreg2$index12 = 0, $$sreg3$field = 0, $$sreg3$field16 = 0, $$sreg3$index15 = 0, $$sreg4$field = 0, $$sreg4$field19 = 0, $$sreg4$index18 = 0, $$sreg5$field = 0, $$sreg5$field22 = 0, $$sreg5$index21 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_102 = 0, $_109 = 0, $_110 = 0, $_12 = 0, $_13 = 0, $_29 = 0, $_40 = 0, $_43 = 0, $_5 = 0, $_50 = 0, $_51 = 0, $_61 = 0, $_68 = 0, $_69 = 0, $_93 = 0, $_97 = 0;
 var $__arg0 = 0, $__arg01 = 0, $__arg02 = 0, $__arg03 = 0, $mode = 0, $modei = 0, $personalityslot = 0, $prg = 0, $ps = 0, $psconcat = 0, $psh = 0, $su = 0, $vs = 0, $vsa = 0, $vsconcat = 0, $vsh = 0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 704|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(704|0);
 $5 = sp + 80|0;
 $6 = sp + 64|0;
 $7 = sp + 48|0;
 $8 = sp + 32|0;
 $9 = sp + 16|0;
 $10 = sp;
 $personalityslot = sp + 680|0;
 $_109 = sp + 664|0;
 $_102 = sp + 640|0;
 $_97 = sp + 600|0;
 $_93 = sp + 520|0;
 $_69 = sp + 504|0;
 $_68 = sp + 496|0;
 $_61 = sp + 472|0;
 $_51 = sp + 464|0;
 $_50 = sp + 456|0;
 $_43 = sp + 432|0;
 $_40 = sp + 312|0;
 $su = sp + 232|0;
 $vsa = sp + 192|0;
 $_29 = sp + 180|0;
 $vsconcat = sp + 156|0;
 $psconcat = sp + 144|0;
 $_12 = sp + 128|0;
 $_5 = sp + 104|0;
 $vs = sp + 96|0;
 $ps = sp + 88|0;
 $mode = sp + 688|0;
 HEAP8[$mode>>0] = $0;
 HEAP32[$ps>>2] = $1;
 $11 = ((($ps)) + 4|0);
 HEAP32[$11>>2] = $2;
 HEAP32[$vs>>2] = $3;
 $12 = ((($vs)) + 4|0);
 HEAP32[$12>>2] = $4;
 $_13 = $mode; //@line 833 "shaders.rs"
 $13 = $_13; //@line 833 "shaders.rs"
 $__arg0 = $13; //@line 833 "shaders.rs"
 $14 = $__arg0; //@line 833 "shaders.rs"
 __ZN4core3fmt10ArgumentV13new17heff68ddf9489a9aaE($10,$14,341); //@line 833 "shaders.rs"
 $$sreg$field = HEAP32[$10>>2]|0; //@line 833 "shaders.rs"
 $$sreg$index6 = ((($10)) + 4|0); //@line 833 "shaders.rs"
 $$sreg$field7 = HEAP32[$$sreg$index6>>2]|0; //@line 833 "shaders.rs"
 HEAP32[$_12>>2] = $$sreg$field; //@line 833 "shaders.rs"
 $15 = ((($_12)) + 4|0); //@line 833 "shaders.rs"
 HEAP32[$15>>2] = $$sreg$field7; //@line 833 "shaders.rs"
 $16 = HEAP32[1683]|0; //@line 833 "shaders.rs"
 __ZN4core3fmt9Arguments16new_v1_formatted17hd7921c86529aa3b1E($_5,6736,2,$_12,1,$16,1); //@line 833 "shaders.rs"
 __ZN3std2io5stdio6_print17h5e38a8ff46cfb3e1E($_5); //@line 833 "shaders.rs"
 $17 = HEAP32[$ps>>2]|0; //@line 834 "shaders.rs"
 $18 = ((($ps)) + 4|0); //@line 834 "shaders.rs"
 $19 = HEAP32[$18>>2]|0; //@line 834 "shaders.rs"
 __ZN5rustv7shaders13concat_shader17h5a1ffa7d0dd4f242E($psconcat,$17,$19); //@line 834 "shaders.rs"
 $20 = HEAP32[$vs>>2]|0; //@line 835 "shaders.rs"
 $21 = ((($vs)) + 4|0); //@line 835 "shaders.rs"
 $22 = HEAP32[$21>>2]|0; //@line 835 "shaders.rs"
 __THREW__ = 0;
 invoke_viii(342,($vsconcat|0),($20|0),($22|0)); //@line 835 "shaders.rs"
 $23 = __THREW__; __THREW__ = 0;
 $24 = $23&1;
 L1: do {
  if (!($24)) {
   __THREW__ = 0;
   invoke_vii(343,($9|0),($psconcat|0)); //@line 837 "shaders.rs"
   $$sreg1$field = HEAP32[$9>>2]|0; //@line 837 "shaders.rs"
   $$sreg1$index9 = ((($9)) + 4|0); //@line 837 "shaders.rs"
   $$sreg1$field10 = HEAP32[$$sreg1$index9>>2]|0; //@line 837 "shaders.rs"
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   do {
    if (!($26)) {
     __THREW__ = 0;
     invoke_vii(343,($8|0),($vsconcat|0)); //@line 837 "shaders.rs"
     $$sreg2$field = HEAP32[$8>>2]|0; //@line 837 "shaders.rs"
     $$sreg2$index12 = ((($8)) + 4|0); //@line 837 "shaders.rs"
     $$sreg2$field13 = HEAP32[$$sreg2$index12>>2]|0; //@line 837 "shaders.rs"
     $30 = __THREW__; __THREW__ = 0;
     $31 = $30&1;
     if (!($31)) {
      __THREW__ = 0;
      invoke_viiiii(344,($_29|0),($$sreg1$field|0),($$sreg1$field10|0),($$sreg2$field|0),($$sreg2$field13|0)); //@line 837 "shaders.rs"
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if (!($33)) {
       $34 = HEAP32[$_29>>2]|0; //@line 836 "shaders.rs"
       $vsh = $34; //@line 836 "shaders.rs"
       $35 = ((($_29)) + 4|0); //@line 836 "shaders.rs"
       $36 = HEAP32[$35>>2]|0; //@line 836 "shaders.rs"
       $psh = $36; //@line 836 "shaders.rs"
       $37 = ((($_29)) + 8|0); //@line 836 "shaders.rs"
       $38 = HEAP32[$37>>2]|0; //@line 836 "shaders.rs"
       $prg = $38; //@line 836 "shaders.rs"
       $39 = $prg; //@line 839 "shaders.rs"
       __THREW__ = 0;
       invoke_vii(345,($_40|0),($39|0)); //@line 839 "shaders.rs"
       $40 = __THREW__; __THREW__ = 0;
       $41 = $40&1;
       if (!($41)) {
        dest=$vsa; src=$_40; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0)); //@line 839 "shaders.rs"
        $42 = ((($_40)) + 36|0); //@line 839 "shaders.rs"
        dest=$su; src=$42; stop=dest+80|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0)); //@line 839 "shaders.rs"
        HEAP32[$_51>>2] = $vs; //@line 840 "shaders.rs"
        $43 = HEAP32[$_51>>2]|0; //@line 840 "shaders.rs"
        $__arg01 = $43; //@line 840 "shaders.rs"
        $44 = $__arg01; //@line 840 "shaders.rs"
        __THREW__ = 0;
        invoke_viii(346,($7|0),($44|0),(347|0)); //@line 840 "shaders.rs"
        $$sreg3$field = HEAP32[$7>>2]|0; //@line 840 "shaders.rs"
        $$sreg3$index15 = ((($7)) + 4|0); //@line 840 "shaders.rs"
        $$sreg3$field16 = HEAP32[$$sreg3$index15>>2]|0; //@line 840 "shaders.rs"
        $45 = __THREW__; __THREW__ = 0;
        $46 = $45&1;
        if (!($46)) {
         HEAP32[$_50>>2] = $$sreg3$field; //@line 840 "shaders.rs"
         $47 = ((($_50)) + 4|0); //@line 840 "shaders.rs"
         HEAP32[$47>>2] = $$sreg3$field16; //@line 840 "shaders.rs"
         $48 = HEAP32[1683]|0; //@line 840 "shaders.rs"
         __THREW__ = 0;
         invoke_viiiiiii(169,($_43|0),(6752|0),2,($_50|0),1,($48|0),1); //@line 840 "shaders.rs"
         $49 = __THREW__; __THREW__ = 0;
         $50 = $49&1;
         if (!($50)) {
          __THREW__ = 0;
          invoke_vi(170,($_43|0)); //@line 840 "shaders.rs"
          $51 = __THREW__; __THREW__ = 0;
          $52 = $51&1;
          if (!($52)) {
           HEAP32[$_69>>2] = $su; //@line 841 "shaders.rs"
           $53 = HEAP32[$_69>>2]|0; //@line 841 "shaders.rs"
           $__arg02 = $53; //@line 841 "shaders.rs"
           $54 = $__arg02; //@line 841 "shaders.rs"
           __THREW__ = 0;
           invoke_viii(348,($6|0),($54|0),(349|0)); //@line 841 "shaders.rs"
           $$sreg4$field = HEAP32[$6>>2]|0; //@line 841 "shaders.rs"
           $$sreg4$index18 = ((($6)) + 4|0); //@line 841 "shaders.rs"
           $$sreg4$field19 = HEAP32[$$sreg4$index18>>2]|0; //@line 841 "shaders.rs"
           $55 = __THREW__; __THREW__ = 0;
           $56 = $55&1;
           if (!($56)) {
            HEAP32[$_68>>2] = $$sreg4$field; //@line 841 "shaders.rs"
            $57 = ((($_68)) + 4|0); //@line 841 "shaders.rs"
            HEAP32[$57>>2] = $$sreg4$field19; //@line 841 "shaders.rs"
            $58 = HEAP32[1683]|0; //@line 841 "shaders.rs"
            __THREW__ = 0;
            invoke_viiiiiii(169,($_61|0),(6768|0),2,($_68|0),1,($58|0),1); //@line 841 "shaders.rs"
            $59 = __THREW__; __THREW__ = 0;
            $60 = $59&1;
            if (!($60)) {
             __THREW__ = 0;
             invoke_vi(170,($_61|0)); //@line 841 "shaders.rs"
             $61 = __THREW__; __THREW__ = 0;
             $62 = $61&1;
             if (!($62)) {
              $63 = HEAP8[$mode>>0]|0; //@line 842 "shaders.rs"
              $64 = $63&255; //@line 842 "shaders.rs"
              $modei = $64; //@line 842 "shaders.rs"
              $65 = $prg; //@line 844 "shaders.rs"
              $66 = $modei; //@line 844 "shaders.rs"
              $67 = ($66>>>0)<(11); //@line 844 "shaders.rs"
              $68 = $67; //@line 844 "shaders.rs"
              if (!($68)) {
               __THREW__ = 0;
               invoke_viii(351,(6888|0),($66|0),11); //@line 844 "shaders.rs"
               $106 = __THREW__; __THREW__ = 0;
               break;
              }
              $69 = (5276 + ($66<<2)|0); //@line 844 "shaders.rs"
              HEAP32[$69>>2] = $65; //@line 844 "shaders.rs"
              $70 = $vsh; //@line 845 "shaders.rs"
              $71 = $modei; //@line 845 "shaders.rs"
              $72 = ($71>>>0)<(11); //@line 845 "shaders.rs"
              $73 = $72; //@line 845 "shaders.rs"
              if (!($73)) {
               __THREW__ = 0;
               invoke_viii(351,(6904|0),($71|0),11); //@line 845 "shaders.rs"
               $107 = __THREW__; __THREW__ = 0;
               break;
              }
              $74 = (6784 + ($71<<2)|0); //@line 845 "shaders.rs"
              HEAP32[$74>>2] = $70; //@line 845 "shaders.rs"
              $75 = $psh; //@line 846 "shaders.rs"
              $76 = $modei; //@line 846 "shaders.rs"
              $77 = ($76>>>0)<(11); //@line 846 "shaders.rs"
              $78 = $77; //@line 846 "shaders.rs"
              if (!($78)) {
               __THREW__ = 0;
               invoke_viii(351,(6920|0),($76|0),11); //@line 846 "shaders.rs"
               $108 = __THREW__; __THREW__ = 0;
               break;
              }
              $79 = (6828 + ($76<<2)|0); //@line 846 "shaders.rs"
              HEAP32[$79>>2] = $75; //@line 846 "shaders.rs"
              dest=$_93; src=$su; stop=dest+80|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0)); //@line 847 "shaders.rs"
              $80 = $modei; //@line 847 "shaders.rs"
              $81 = ($80>>>0)<(11); //@line 847 "shaders.rs"
              $82 = $81; //@line 847 "shaders.rs"
              if (!($82)) {
               __THREW__ = 0;
               invoke_viii(351,(6936|0),($80|0),11); //@line 847 "shaders.rs"
               $109 = __THREW__; __THREW__ = 0;
               break;
              }
              $83 = (5320 + (($80*80)|0)|0); //@line 847 "shaders.rs"
              dest=$83; src=$_93; stop=dest+80|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0)); //@line 847 "shaders.rs"
              dest=$_97; src=$vsa; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0)); //@line 848 "shaders.rs"
              $84 = $modei; //@line 848 "shaders.rs"
              $85 = ($84>>>0)<(11); //@line 848 "shaders.rs"
              $86 = $85; //@line 848 "shaders.rs"
              if (!($86)) {
               __THREW__ = 0;
               invoke_viii(351,(6952|0),($84|0),11); //@line 848 "shaders.rs"
               $110 = __THREW__; __THREW__ = 0;
               break;
              }
              $87 = (6200 + (($84*36)|0)|0); //@line 848 "shaders.rs"
              dest=$87; src=$_97; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0)); //@line 848 "shaders.rs"
              $_110 = $mode; //@line 850 "shaders.rs"
              $88 = $_110; //@line 850 "shaders.rs"
              $__arg03 = $88; //@line 850 "shaders.rs"
              $89 = $__arg03; //@line 850 "shaders.rs"
              __THREW__ = 0;
              invoke_viii(350,($5|0),($89|0),(341|0)); //@line 850 "shaders.rs"
              $$sreg5$field = HEAP32[$5>>2]|0; //@line 850 "shaders.rs"
              $$sreg5$index21 = ((($5)) + 4|0); //@line 850 "shaders.rs"
              $$sreg5$field22 = HEAP32[$$sreg5$index21>>2]|0; //@line 850 "shaders.rs"
              $90 = __THREW__; __THREW__ = 0;
              $91 = $90&1;
              if (!($91)) {
               HEAP32[$_109>>2] = $$sreg5$field; //@line 850 "shaders.rs"
               $92 = ((($_109)) + 4|0); //@line 850 "shaders.rs"
               HEAP32[$92>>2] = $$sreg5$field22; //@line 850 "shaders.rs"
               $93 = HEAP32[1683]|0; //@line 850 "shaders.rs"
               __THREW__ = 0;
               invoke_viiiiiii(169,($_102|0),(6872|0),2,($_109|0),1,($93|0),1); //@line 850 "shaders.rs"
               $94 = __THREW__; __THREW__ = 0;
               $95 = $94&1;
               if (!($95)) {
                __THREW__ = 0;
                invoke_vi(170,($_102|0)); //@line 850 "shaders.rs"
                $96 = __THREW__; __THREW__ = 0;
                $97 = $96&1;
                if ($97) {
                 break;
                }
                __THREW__ = 0;
                invoke_vi(245,($vsconcat|0)); //@line 851 "shaders.rs"
                $98 = __THREW__; __THREW__ = 0;
                $99 = $98&1;
                if ($99) {
                 break L1;
                }
                __ZN4core3ptr13drop_in_place17hcdb5cdbc316a5a16E($psconcat); //@line 851 "shaders.rs"
                STACKTOP = sp;return; //@line 851 "shaders.rs"
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   } while(0);
   $103 = ___cxa_find_matching_catch_2()|0;
   $104 = tempRet0;
   HEAP32[$personalityslot>>2] = $103;
   $105 = ((($personalityslot)) + 4|0);
   HEAP32[$105>>2] = $104;
   __ZN4core3ptr13drop_in_place17hcdb5cdbc316a5a16E($vsconcat); //@line 851 "shaders.rs"
   __ZN4core3ptr13drop_in_place17hcdb5cdbc316a5a16E($psconcat); //@line 851 "shaders.rs"
   $27 = HEAP32[$personalityslot>>2]|0; //@line 832 "shaders.rs"
   $28 = ((($personalityslot)) + 4|0); //@line 832 "shaders.rs"
   $29 = HEAP32[$28>>2]|0; //@line 832 "shaders.rs"
   ___resumeException($27|0);
   // unreachable;
  }
 } while(0);
 $100 = ___cxa_find_matching_catch_2()|0;
 $101 = tempRet0;
 HEAP32[$personalityslot>>2] = $100;
 $102 = ((($personalityslot)) + 4|0);
 HEAP32[$102>>2] = $101;
 __ZN4core3ptr13drop_in_place17hcdb5cdbc316a5a16E($psconcat); //@line 851 "shaders.rs"
 $27 = HEAP32[$personalityslot>>2]|0; //@line 832 "shaders.rs"
 $28 = ((($personalityslot)) + 4|0); //@line 832 "shaders.rs"
 $29 = HEAP32[$28>>2]|0; //@line 832 "shaders.rs"
 ___resumeException($27|0);
 // unreachable;
}
function __ZN5rustv7shaders18create_shader_sub217h769bfd914bd2bd37E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sreg$field = 0, $$sreg$field3 = 0, $$sreg$index2 = 0, $$sreg1$field = 0, $$sreg1$field6 = 0, $$sreg1$index5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_11 = 0, $_19 = 0, $_22 = 0, $_8 = 0, $mode = 0, $ps_main = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $3 = sp + 16|0;
 $4 = sp;
 $_19 = sp + 72|0;
 $_8 = sp + 32|0;
 $ps_main = sp + 24|0;
 $mode = $0;
 HEAP32[$ps_main>>2] = $1;
 $5 = ((($ps_main)) + 4|0);
 HEAP32[$5>>2] = $2;
 $6 = $mode; //@line 854 "shaders.rs"
 $_11 = 0; //@line 855 "shaders.rs"
 $7 = $_11; //@line 855 "shaders.rs"
 __ZN5rustv7shaders17get_shader_prefix17h53fa1b7031930ee0E($4,$7); //@line 855 "shaders.rs"
 $$sreg$field = HEAP32[$4>>2]|0; //@line 855 "shaders.rs"
 $$sreg$index2 = ((($4)) + 4|0); //@line 855 "shaders.rs"
 $$sreg$field3 = HEAP32[$$sreg$index2>>2]|0; //@line 855 "shaders.rs"
 $8 = HEAP32[1651]|0; //@line 856 "shaders.rs"
 $9 = HEAP32[(6608)>>2]|0; //@line 856 "shaders.rs"
 $10 = HEAP32[1653]|0; //@line 857 "shaders.rs"
 $11 = HEAP32[(6616)>>2]|0; //@line 857 "shaders.rs"
 $12 = HEAP32[1655]|0; //@line 858 "shaders.rs"
 $13 = HEAP32[(6624)>>2]|0; //@line 858 "shaders.rs"
 $14 = HEAP32[$ps_main>>2]|0; //@line 859 "shaders.rs"
 $15 = ((($ps_main)) + 4|0); //@line 859 "shaders.rs"
 $16 = HEAP32[$15>>2]|0; //@line 859 "shaders.rs"
 HEAP32[$_8>>2] = $$sreg$field; //@line 855 "shaders.rs"
 $17 = ((($_8)) + 4|0); //@line 855 "shaders.rs"
 HEAP32[$17>>2] = $$sreg$field3; //@line 855 "shaders.rs"
 $18 = ((($_8)) + 8|0); //@line 855 "shaders.rs"
 HEAP32[$18>>2] = $8; //@line 855 "shaders.rs"
 $19 = ((($18)) + 4|0); //@line 855 "shaders.rs"
 HEAP32[$19>>2] = $9; //@line 855 "shaders.rs"
 $20 = ((($_8)) + 16|0); //@line 855 "shaders.rs"
 HEAP32[$20>>2] = $10; //@line 855 "shaders.rs"
 $21 = ((($20)) + 4|0); //@line 855 "shaders.rs"
 HEAP32[$21>>2] = $11; //@line 855 "shaders.rs"
 $22 = ((($_8)) + 24|0); //@line 855 "shaders.rs"
 HEAP32[$22>>2] = $12; //@line 855 "shaders.rs"
 $23 = ((($22)) + 4|0); //@line 855 "shaders.rs"
 HEAP32[$23>>2] = $13; //@line 855 "shaders.rs"
 $24 = ((($_8)) + 32|0); //@line 855 "shaders.rs"
 HEAP32[$24>>2] = $14; //@line 855 "shaders.rs"
 $25 = ((($24)) + 4|0); //@line 855 "shaders.rs"
 HEAP32[$25>>2] = $16; //@line 855 "shaders.rs"
 $_22 = 1; //@line 860 "shaders.rs"
 $26 = $_22; //@line 860 "shaders.rs"
 __ZN5rustv7shaders17get_shader_prefix17h53fa1b7031930ee0E($3,$26); //@line 860 "shaders.rs"
 $$sreg1$field = HEAP32[$3>>2]|0; //@line 860 "shaders.rs"
 $$sreg1$index5 = ((($3)) + 4|0); //@line 860 "shaders.rs"
 $$sreg1$field6 = HEAP32[$$sreg1$index5>>2]|0; //@line 860 "shaders.rs"
 $27 = HEAP32[1659]|0; //@line 861 "shaders.rs"
 $28 = HEAP32[(6640)>>2]|0; //@line 861 "shaders.rs"
 $29 = HEAP32[1661]|0; //@line 862 "shaders.rs"
 $30 = HEAP32[(6648)>>2]|0; //@line 862 "shaders.rs"
 $31 = HEAP32[1653]|0; //@line 863 "shaders.rs"
 $32 = HEAP32[(6616)>>2]|0; //@line 863 "shaders.rs"
 $33 = HEAP32[1681]|0; //@line 864 "shaders.rs"
 $34 = HEAP32[(6728)>>2]|0; //@line 864 "shaders.rs"
 HEAP32[$_19>>2] = $$sreg1$field; //@line 860 "shaders.rs"
 $35 = ((($_19)) + 4|0); //@line 860 "shaders.rs"
 HEAP32[$35>>2] = $$sreg1$field6; //@line 860 "shaders.rs"
 $36 = ((($_19)) + 8|0); //@line 860 "shaders.rs"
 HEAP32[$36>>2] = $27; //@line 860 "shaders.rs"
 $37 = ((($36)) + 4|0); //@line 860 "shaders.rs"
 HEAP32[$37>>2] = $28; //@line 860 "shaders.rs"
 $38 = ((($_19)) + 16|0); //@line 860 "shaders.rs"
 HEAP32[$38>>2] = $29; //@line 860 "shaders.rs"
 $39 = ((($38)) + 4|0); //@line 860 "shaders.rs"
 HEAP32[$39>>2] = $30; //@line 860 "shaders.rs"
 $40 = ((($_19)) + 24|0); //@line 860 "shaders.rs"
 HEAP32[$40>>2] = $31; //@line 860 "shaders.rs"
 $41 = ((($40)) + 4|0); //@line 860 "shaders.rs"
 HEAP32[$41>>2] = $32; //@line 860 "shaders.rs"
 $42 = ((($_19)) + 32|0); //@line 860 "shaders.rs"
 HEAP32[$42>>2] = $33; //@line 860 "shaders.rs"
 $43 = ((($42)) + 4|0); //@line 860 "shaders.rs"
 HEAP32[$43>>2] = $34; //@line 860 "shaders.rs"
 __ZN5rustv7shaders17create_shader_sub17h9237f2165d5effcfE($6,$_8,5,$_19,5); //@line 853 "shaders.rs"
 STACKTOP = sp;return; //@line 865 "shaders.rs"
}
function __ZN63__LT_rustv__shaders__RenderMode_u20_as_u20_core__fmt__Debug_GT_3fmt17hf4241f7b6e56674eE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $_0 = 0, $_3 = 0, $__arg_0 = 0, $builder = 0, $builder1 = 0, $builder10 = 0, $builder11 = 0, $builder2 = 0, $builder3 = 0, $builder4 = 0, $builder5 = 0, $builder6 = 0, $builder7 = 0, $builder8 = 0, $builder9 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $builder11 = sp + 144|0;
 $builder10 = sp + 132|0;
 $builder9 = sp + 120|0;
 $builder8 = sp + 108|0;
 $builder7 = sp + 96|0;
 $builder6 = sp + 84|0;
 $builder5 = sp + 72|0;
 $builder4 = sp + 60|0;
 $builder3 = sp + 48|0;
 $builder2 = sp + 36|0;
 $builder1 = sp + 24|0;
 $builder = sp + 12|0;
 $self = $0;
 $__arg_0 = $1;
 $2 = $self; //@line 3 "shaders.rs"
 $_3 = $2; //@line 3 "shaders.rs"
 $3 = $_3; //@line 3 "shaders.rs"
 $4 = HEAP8[$3>>0]|0; //@line 3 "shaders.rs"
 $5 = $4&255; //@line 3 "shaders.rs"
 do {
  switch ($5|0) {
  case 0:  {
   $6 = $__arg_0; //@line 3 "shaders.rs"
   __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder,$6,17694,7); //@line 3 "shaders.rs"
   $7 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder)|0); //@line 3 "shaders.rs"
   $8 = $7&1; //@line 3 "shaders.rs"
   $_0 = $8; //@line 3 "shaders.rs"
   break;
  }
  case 1:  {
   $9 = $__arg_0; //@line 3 "shaders.rs"
   __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder1,$9,17701,5); //@line 3 "shaders.rs"
   $10 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder1)|0); //@line 3 "shaders.rs"
   $11 = $10&1; //@line 3 "shaders.rs"
   $_0 = $11; //@line 3 "shaders.rs"
   break;
  }
  case 2:  {
   $12 = $__arg_0; //@line 3 "shaders.rs"
   __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder2,$12,17706,4); //@line 3 "shaders.rs"
   $13 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder2)|0); //@line 3 "shaders.rs"
   $14 = $13&1; //@line 3 "shaders.rs"
   $_0 = $14; //@line 3 "shaders.rs"
   break;
  }
  case 3:  {
   $15 = $__arg_0; //@line 3 "shaders.rs"
   __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder3,$15,17710,4); //@line 3 "shaders.rs"
   $16 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder3)|0); //@line 3 "shaders.rs"
   $17 = $16&1; //@line 3 "shaders.rs"
   $_0 = $17; //@line 3 "shaders.rs"
   break;
  }
  case 4:  {
   $18 = $__arg_0; //@line 3 "shaders.rs"
   __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder4,$18,17714,11); //@line 3 "shaders.rs"
   $19 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder4)|0); //@line 3 "shaders.rs"
   $20 = $19&1; //@line 3 "shaders.rs"
   $_0 = $20; //@line 3 "shaders.rs"
   break;
  }
  case 5:  {
   $21 = $__arg_0; //@line 3 "shaders.rs"
   __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder5,$21,17725,13); //@line 3 "shaders.rs"
   $22 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder5)|0); //@line 3 "shaders.rs"
   $23 = $22&1; //@line 3 "shaders.rs"
   $_0 = $23; //@line 3 "shaders.rs"
   break;
  }
  case 6:  {
   $24 = $__arg_0; //@line 3 "shaders.rs"
   __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder6,$24,17738,6); //@line 3 "shaders.rs"
   $25 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder6)|0); //@line 3 "shaders.rs"
   $26 = $25&1; //@line 3 "shaders.rs"
   $_0 = $26; //@line 3 "shaders.rs"
   break;
  }
  case 7:  {
   $27 = $__arg_0; //@line 3 "shaders.rs"
   __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder7,$27,17744,9); //@line 3 "shaders.rs"
   $28 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder7)|0); //@line 3 "shaders.rs"
   $29 = $28&1; //@line 3 "shaders.rs"
   $_0 = $29; //@line 3 "shaders.rs"
   break;
  }
  case 8:  {
   $30 = $__arg_0; //@line 3 "shaders.rs"
   __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder8,$30,17753,5); //@line 3 "shaders.rs"
   $31 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder8)|0); //@line 3 "shaders.rs"
   $32 = $31&1; //@line 3 "shaders.rs"
   $_0 = $32; //@line 3 "shaders.rs"
   break;
  }
  case 9:  {
   $33 = $__arg_0; //@line 3 "shaders.rs"
   __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder9,$33,17758,22); //@line 3 "shaders.rs"
   $34 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder9)|0); //@line 3 "shaders.rs"
   $35 = $34&1; //@line 3 "shaders.rs"
   $_0 = $35; //@line 3 "shaders.rs"
   break;
  }
  case 10:  {
   $36 = $__arg_0; //@line 3 "shaders.rs"
   __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder10,$36,17780,7); //@line 3 "shaders.rs"
   $37 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder10)|0); //@line 3 "shaders.rs"
   $38 = $37&1; //@line 3 "shaders.rs"
   $_0 = $38; //@line 3 "shaders.rs"
   break;
  }
  case 11:  {
   $39 = $__arg_0; //@line 3 "shaders.rs"
   __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder11,$39,17787,5); //@line 3 "shaders.rs"
   $40 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder11)|0); //@line 3 "shaders.rs"
   $41 = $40&1; //@line 3 "shaders.rs"
   $_0 = $41; //@line 3 "shaders.rs"
   break;
  }
  default: {
   // unreachable; //@line 3 "shaders.rs"
  }
  }
 } while(0);
 $42 = $_0; //@line 3 "shaders.rs"
 $43 = $42&1; //@line 3 "shaders.rs"
 STACKTOP = sp;return ($43|0); //@line 3 "shaders.rs"
}
function __ZN5rustv7shaders13concat_shader17h5a1ffa7d0dd4f242E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sreg$field = 0, $$sreg$field4 = 0, $$sreg$index3 = 0, $$sreg1$field = 0, $$sreg1$field7 = 0, $$sreg1$index6 = 0, $$sreg2$field = 0, $$sreg2$field10 = 0, $$sreg2$index9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $_13 = 0, $_27 = 0, $_28 = 0, $_35 = 0, $_36 = 0, $_5 = 0, $_57 = 0;
 var $_6 = 0, $__arg0 = 0, $__next = 0, $i = 0, $iter = 0, $personalityslot = 0, $ret = 0, $src = 0, $val = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $3 = sp + 32|0;
 $4 = sp + 16|0;
 $5 = sp;
 $personalityslot = sp + 200|0;
 $_57 = sp + 184|0;
 $_35 = sp + 168|0;
 $_28 = sp + 144|0;
 $_27 = sp + 128|0;
 $i = sp + 120|0;
 $val = sp + 112|0;
 $_13 = sp + 104|0;
 $__next = sp + 96|0;
 $iter = sp + 84|0;
 $_6 = sp + 72|0;
 $_5 = sp + 60|0;
 $ret = sp + 48|0;
 $src = sp + 40|0;
 HEAP32[$src>>2] = $1;
 $6 = ((($src)) + 4|0);
 HEAP32[$6>>2] = $2;
 __ZN5alloc6string6String3new17h12c66b125e7bb509E($ret); //@line 822 "shaders.rs"
 $7 = HEAP32[$src>>2]|0; //@line 824 "shaders.rs"
 $8 = ((($src)) + 4|0); //@line 824 "shaders.rs"
 $9 = HEAP32[$8>>2]|0; //@line 824 "shaders.rs"
 __THREW__ = 0;
 invoke_viii(352,($5|0),($7|0),($9|0)); //@line 824 "shaders.rs"
 $$sreg$field = HEAP32[$5>>2]|0; //@line 824 "shaders.rs"
 $$sreg$index3 = ((($5)) + 4|0); //@line 824 "shaders.rs"
 $$sreg$field4 = HEAP32[$$sreg$index3>>2]|0; //@line 824 "shaders.rs"
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 L1: do {
  if (!($11)) {
   __THREW__ = 0;
   invoke_viii(353,($_6|0),($$sreg$field|0),($$sreg$field4|0)); //@line 824 "shaders.rs"
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    __THREW__ = 0;
    invoke_vii(354,($_5|0),($_6|0)); //@line 824 "shaders.rs"
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if (!($18)) {
     ;HEAP32[$iter>>2]=HEAP32[$_5>>2]|0;HEAP32[$iter+4>>2]=HEAP32[$_5+4>>2]|0;HEAP32[$iter+8>>2]=HEAP32[$_5+8>>2]|0; //@line 824 "shaders.rs"
     while(1) {
      __THREW__ = 0;
      invoke_vii(355,($_13|0),($iter|0)); //@line 824 "shaders.rs"
      $19 = __THREW__; __THREW__ = 0;
      $20 = $19&1;
      if ($20) {
       break L1;
      }
      $21 = ((($_13)) + 4|0); //@line 824 "shaders.rs"
      $22 = HEAP32[$21>>2]|0; //@line 824 "shaders.rs"
      $23 = ($22|0)==(0|0); //@line 824 "shaders.rs"
      if ($23) {
       label = 8;
       break;
      }
      $26 = HEAP32[$_13>>2]|0; //@line 824 "shaders.rs"
      $27 = ((($_13)) + 4|0); //@line 824 "shaders.rs"
      $28 = HEAP32[$27>>2]|0; //@line 824 "shaders.rs"
      HEAP32[$val>>2] = $26; //@line 824 "shaders.rs"
      $29 = ((($val)) + 4|0); //@line 824 "shaders.rs"
      HEAP32[$29>>2] = $28; //@line 824 "shaders.rs"
      $30 = HEAP32[$val>>2]|0; //@line 824 "shaders.rs"
      $31 = ((($val)) + 4|0); //@line 824 "shaders.rs"
      $32 = HEAP32[$31>>2]|0; //@line 824 "shaders.rs"
      HEAP32[$__next>>2] = $30; //@line 824 "shaders.rs"
      $33 = ((($__next)) + 4|0); //@line 824 "shaders.rs"
      HEAP32[$33>>2] = $32; //@line 824 "shaders.rs"
      $34 = HEAP32[$__next>>2]|0; //@line 824 "shaders.rs"
      HEAP32[$i>>2] = $34; //@line 824 "shaders.rs"
      $35 = ((($__next)) + 4|0); //@line 824 "shaders.rs"
      $36 = HEAP32[$35>>2]|0; //@line 824 "shaders.rs"
      $x = $36; //@line 824 "shaders.rs"
      $_36 = $i; //@line 825 "shaders.rs"
      $37 = $_36; //@line 825 "shaders.rs"
      $__arg0 = $37; //@line 825 "shaders.rs"
      $38 = $__arg0; //@line 825 "shaders.rs"
      __THREW__ = 0;
      invoke_viii(167,($4|0),($38|0),(289|0)); //@line 825 "shaders.rs"
      $$sreg1$field = HEAP32[$4>>2]|0; //@line 825 "shaders.rs"
      $$sreg1$index6 = ((($4)) + 4|0); //@line 825 "shaders.rs"
      $$sreg1$field7 = HEAP32[$$sreg1$index6>>2]|0; //@line 825 "shaders.rs"
      $39 = __THREW__; __THREW__ = 0;
      $40 = $39&1;
      if ($40) {
       break L1;
      }
      HEAP32[$_35>>2] = $$sreg1$field; //@line 825 "shaders.rs"
      $41 = ((($_35)) + 4|0); //@line 825 "shaders.rs"
      HEAP32[$41>>2] = $$sreg1$field7; //@line 825 "shaders.rs"
      $42 = HEAP32[1683]|0; //@line 825 "shaders.rs"
      __THREW__ = 0;
      invoke_viiiiiii(169,($_28|0),(7736|0),2,($_35|0),1,($42|0),1); //@line 825 "shaders.rs"
      $43 = __THREW__; __THREW__ = 0;
      $44 = $43&1;
      if ($44) {
       break L1;
      }
      __THREW__ = 0;
      invoke_vii(319,($_27|0),($_28|0)); //@line 825 "shaders.rs"
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       break L1;
      }
      __THREW__ = 0;
      invoke_vii(181,($3|0),($_27|0)); //@line 825 "shaders.rs"
      $$sreg2$field = HEAP32[$3>>2]|0; //@line 825 "shaders.rs"
      $$sreg2$index9 = ((($3)) + 4|0); //@line 825 "shaders.rs"
      $$sreg2$field10 = HEAP32[$$sreg2$index9>>2]|0; //@line 825 "shaders.rs"
      $47 = __THREW__; __THREW__ = 0;
      $48 = $47&1;
      if ($48) {
       label = 19;
       break;
      }
      __THREW__ = 0;
      invoke_viii(320,($ret|0),($$sreg2$field|0),($$sreg2$field10|0)); //@line 825 "shaders.rs"
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       label = 19;
       break;
      }
      __THREW__ = 0;
      invoke_vi(245,($_27|0)); //@line 825 "shaders.rs"
      $51 = __THREW__; __THREW__ = 0;
      $52 = $51&1;
      if ($52) {
       break L1;
      }
      $53 = $x; //@line 826 "shaders.rs"
      $54 = HEAP32[$53>>2]|0; //@line 826 "shaders.rs"
      $55 = ((($53)) + 4|0); //@line 826 "shaders.rs"
      $56 = HEAP32[$55>>2]|0; //@line 826 "shaders.rs"
      __THREW__ = 0;
      invoke_viii(320,($ret|0),($54|0),($56|0)); //@line 826 "shaders.rs"
      $57 = __THREW__; __THREW__ = 0;
      $58 = $57&1;
      if ($58) {
       break L1;
      }
      __THREW__ = 0;
      invoke_viii(320,($ret|0),(16658|0),1); //@line 827 "shaders.rs"
      $59 = __THREW__; __THREW__ = 0;
      $60 = $59&1;
      if ($60) {
       break L1;
      }
     }
     if ((label|0) == 8) {
      __THREW__ = 0;
      invoke_viii(320,($ret|0),(39451|0),1); //@line 829 "shaders.rs"
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       break;
      }
      ;HEAP32[$_57>>2]=HEAP32[$ret>>2]|0;HEAP32[$_57+4>>2]=HEAP32[$ret+4>>2]|0;HEAP32[$_57+8>>2]=HEAP32[$ret+8>>2]|0; //@line 830 "shaders.rs"
      ;HEAP32[$0>>2]=HEAP32[$_57>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_57+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_57+8>>2]|0; //@line 830 "shaders.rs"
      STACKTOP = sp;return; //@line 831 "shaders.rs"
     }
     else if ((label|0) == 19) {
      $64 = ___cxa_find_matching_catch_2()|0;
      $65 = tempRet0;
      HEAP32[$personalityslot>>2] = $64;
      $66 = ((($personalityslot)) + 4|0);
      HEAP32[$66>>2] = $65;
      __ZN4core3ptr13drop_in_place17hcdb5cdbc316a5a16E($_27); //@line 825 "shaders.rs"
      __ZN4core3ptr13drop_in_place17hcdb5cdbc316a5a16E($ret); //@line 831 "shaders.rs"
      $14 = HEAP32[$personalityslot>>2]|0; //@line 821 "shaders.rs"
      $15 = ((($personalityslot)) + 4|0); //@line 821 "shaders.rs"
      $16 = HEAP32[$15>>2]|0; //@line 821 "shaders.rs"
      ___resumeException($14|0);
      // unreachable;
     }
    }
   }
  }
 } while(0);
 $61 = ___cxa_find_matching_catch_2()|0;
 $62 = tempRet0;
 HEAP32[$personalityslot>>2] = $61;
 $63 = ((($personalityslot)) + 4|0);
 HEAP32[$63>>2] = $62;
 __ZN4core3ptr13drop_in_place17hcdb5cdbc316a5a16E($ret); //@line 831 "shaders.rs"
 $14 = HEAP32[$personalityslot>>2]|0; //@line 821 "shaders.rs"
 $15 = ((($personalityslot)) + 4|0); //@line 821 "shaders.rs"
 $16 = HEAP32[$15>>2]|0; //@line 821 "shaders.rs"
 ___resumeException($14|0);
 // unreachable;
}
function __ZN5rustv7shaders21create_shader_program17h9849a4ef5499797fE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sreg$field = 0, $$sreg$field7 = 0, $$sreg$index6 = 0, $$sreg1$field = 0, $$sreg1$field10 = 0, $$sreg1$index9 = 0, $$sreg2$field = 0, $$sreg2$field13 = 0, $$sreg2$index12 = 0, $$sreg3$field = 0, $$sreg3$field16 = 0, $$sreg3$index15 = 0, $$sreg4$field = 0, $$sreg4$field19 = 0, $$sreg4$index18 = 0, $$sreg5$field = 0, $$sreg5$field22 = 0, $$sreg5$index21 = 0, $10 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $_113 = 0, $_120 = 0;
 var $_121 = 0, $_131 = 0, $_150 = 0, $_34 = 0, $_56 = 0, $_63 = 0, $_64 = 0, $__arg0 = 0, $__arg01 = 0, $__arg1 = 0, $__arg2 = 0, $__next = 0, $buffer = 0, $iter = 0, $len = 0, $lstatus = 0, $pixelShaderOut = 0, $pixelShaderSource = 0, $prog = 0, $val = 0;
 var $vertexShaderOut = 0, $vertexShaderSource = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1344|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1344|0);
 $5 = sp + 80|0;
 $6 = sp + 64|0;
 $7 = sp + 48|0;
 $8 = sp + 32|0;
 $9 = sp + 16|0;
 $10 = sp;
 $_150 = sp + 296|0;
 $_131 = sp + 272|0;
 $_120 = sp + 256|0;
 $_113 = sp + 232|0;
 $len = sp + 228|0;
 $buffer = sp + 320|0;
 $lstatus = sp + 224|0;
 $_64 = sp + 200|0;
 $_63 = sp + 176|0;
 $_56 = sp + 152|0;
 $x = sp + 140|0;
 $_34 = sp + 132|0;
 $iter = sp + 120|0;
 $prog = sp + 112|0;
 $vertexShaderOut = sp + 108|0;
 $pixelShaderOut = sp + 104|0;
 $vertexShaderSource = sp + 96|0;
 $pixelShaderSource = sp + 88|0;
 HEAP32[$pixelShaderSource>>2] = $1;
 $11 = ((($pixelShaderSource)) + 4|0);
 HEAP32[$11>>2] = $2;
 HEAP32[$vertexShaderSource>>2] = $3;
 $12 = ((($vertexShaderSource)) + 4|0);
 HEAP32[$12>>2] = $4;
 $13 = (__ZN5rustv3r3d5c_str17h24b9d36d97df309cE(17169,22)|0); //@line 216 "shaders.rs"
 __ZN5rustv12android_logw17h6a03acd0e4e3677aE($13); //@line 216 "shaders.rs"
 $14 = HEAP32[763]|0; //@line 218 "shaders.rs"
 $15 = HEAP32[$pixelShaderSource>>2]|0; //@line 218 "shaders.rs"
 $16 = ((($pixelShaderSource)) + 4|0); //@line 218 "shaders.rs"
 $17 = HEAP32[$16>>2]|0; //@line 218 "shaders.rs"
 $18 = (__ZN5rustv7shaders25create_and_compile_shader17he95bff97df8e1b7dE($14,$15,$17)|0); //@line 218 "shaders.rs"
 HEAP32[$pixelShaderOut>>2] = $18; //@line 218 "shaders.rs"
 $19 = HEAP32[764]|0; //@line 219 "shaders.rs"
 $20 = HEAP32[$vertexShaderSource>>2]|0; //@line 219 "shaders.rs"
 $21 = ((($vertexShaderSource)) + 4|0); //@line 219 "shaders.rs"
 $22 = HEAP32[$21>>2]|0; //@line 219 "shaders.rs"
 $23 = (__ZN5rustv7shaders25create_and_compile_shader17he95bff97df8e1b7dE($19,$20,$22)|0); //@line 219 "shaders.rs"
 HEAP32[$vertexShaderOut>>2] = $23; //@line 219 "shaders.rs"
 $24 = (_glCreateProgram()|0); //@line 220 "shaders.rs"
 HEAP32[$prog>>2] = $24; //@line 220 "shaders.rs"
 $25 = HEAP32[$prog>>2]|0; //@line 221 "shaders.rs"
 $26 = ($25>>>0)>=(0); //@line 221 "shaders.rs"
 $27 = $26 ^ 1; //@line 221 "shaders.rs"
 if ($27) {
  __ZN3std9panicking11begin_panic17h1a4c9be19e7ea39bE(17191,27,7328); //@line 221 "shaders.rs"
  // unreachable; //@line 221 "shaders.rs"
 }
 $28 = (__ZN5rustv3r3d5c_str17h24b9d36d97df309cE(17218,22)|0); //@line 222 "shaders.rs"
 __ZN5rustv12android_logw17h6a03acd0e4e3677aE($28); //@line 222 "shaders.rs"
 __ZN5alloc5slice29__LT_impl_u20__u5b_T_u5d__GT_4iter17hf98f6bd542dbf791E($10,7344,9); //@line 225 "shaders.rs"
 $$sreg$field = HEAP32[$10>>2]|0; //@line 225 "shaders.rs"
 $$sreg$index6 = ((($10)) + 4|0); //@line 225 "shaders.rs"
 $$sreg$field7 = HEAP32[$$sreg$index6>>2]|0; //@line 225 "shaders.rs"
 __ZN54__LT_I_u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17h09b826f0f4787c5fE($9,$$sreg$field,$$sreg$field7); //@line 225 "shaders.rs"
 $$sreg1$field = HEAP32[$9>>2]|0; //@line 225 "shaders.rs"
 $$sreg1$index9 = ((($9)) + 4|0); //@line 225 "shaders.rs"
 $$sreg1$field10 = HEAP32[$$sreg1$index9>>2]|0; //@line 225 "shaders.rs"
 HEAP32[$iter>>2] = $$sreg1$field; //@line 225 "shaders.rs"
 $29 = ((($iter)) + 4|0); //@line 225 "shaders.rs"
 HEAP32[$29>>2] = $$sreg1$field10; //@line 225 "shaders.rs"
 while(1) {
  $30 = (__ZN91__LT_core__slice__Iter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17hb0b42a4bed87a0a7E($iter)|0); //@line 225 "shaders.rs"
  HEAP32[$_34>>2] = $30; //@line 225 "shaders.rs"
  $31 = HEAP32[$_34>>2]|0; //@line 225 "shaders.rs"
  $32 = ($31|0)==(0|0); //@line 225 "shaders.rs"
  if ($32) {
   break;
  }
  $60 = HEAP32[$_34>>2]|0; //@line 225 "shaders.rs"
  $val = $60; //@line 225 "shaders.rs"
  $61 = $val; //@line 225 "shaders.rs"
  $__next = $61; //@line 225 "shaders.rs"
  $62 = $__next; //@line 225 "shaders.rs"
  ;HEAP32[$x>>2]=HEAP32[$62>>2]|0;HEAP32[$x+4>>2]=HEAP32[$62+4>>2]|0;HEAP32[$x+8>>2]=HEAP32[$62+8>>2]|0; //@line 225 "shaders.rs"
  $63 = HEAP32[$prog>>2]|0; //@line 236 "shaders.rs"
  $64 = HEAP32[$x>>2]|0; //@line 236 "shaders.rs"
  $65 = ((($x)) + 4|0); //@line 236 "shaders.rs"
  $66 = HEAP32[$65>>2]|0; //@line 236 "shaders.rs"
  $67 = ((($65)) + 4|0); //@line 236 "shaders.rs"
  $68 = HEAP32[$67>>2]|0; //@line 236 "shaders.rs"
  $69 = (__ZN5rustv3r3d5c_str17h24b9d36d97df309cE($66,$68)|0); //@line 236 "shaders.rs"
  _glBindAttribLocation(($63|0),($64|0),($69|0)); //@line 236 "shaders.rs"
 }
 $33 = HEAP32[$prog>>2]|0; //@line 238 "shaders.rs"
 $34 = HEAP32[$pixelShaderOut>>2]|0; //@line 238 "shaders.rs"
 _glAttachShader(($33|0),($34|0)); //@line 238 "shaders.rs"
 $35 = HEAP32[$prog>>2]|0; //@line 239 "shaders.rs"
 $36 = HEAP32[$vertexShaderOut>>2]|0; //@line 239 "shaders.rs"
 _glAttachShader(($35|0),($36|0)); //@line 239 "shaders.rs"
 HEAP32[$_64>>2] = $vertexShaderOut; //@line 241 "shaders.rs"
 $37 = ((($_64)) + 4|0); //@line 241 "shaders.rs"
 HEAP32[$37>>2] = $pixelShaderOut; //@line 241 "shaders.rs"
 $38 = ((($_64)) + 8|0); //@line 241 "shaders.rs"
 HEAP32[$38>>2] = $prog; //@line 241 "shaders.rs"
 $39 = HEAP32[$_64>>2]|0; //@line 241 "shaders.rs"
 $__arg0 = $39; //@line 241 "shaders.rs"
 $40 = ((($_64)) + 4|0); //@line 241 "shaders.rs"
 $41 = HEAP32[$40>>2]|0; //@line 241 "shaders.rs"
 $__arg1 = $41; //@line 241 "shaders.rs"
 $42 = ((($_64)) + 8|0); //@line 241 "shaders.rs"
 $43 = HEAP32[$42>>2]|0; //@line 241 "shaders.rs"
 $__arg2 = $43; //@line 241 "shaders.rs"
 $44 = $__arg0; //@line 241 "shaders.rs"
 __ZN4core3fmt10ArgumentV13new17h0963b74890d3a7c4E($8,$44,180); //@line 241 "shaders.rs"
 $$sreg2$field = HEAP32[$8>>2]|0; //@line 241 "shaders.rs"
 $$sreg2$index12 = ((($8)) + 4|0); //@line 241 "shaders.rs"
 $$sreg2$field13 = HEAP32[$$sreg2$index12>>2]|0; //@line 241 "shaders.rs"
 $45 = $__arg1; //@line 241 "shaders.rs"
 __ZN4core3fmt10ArgumentV13new17h0963b74890d3a7c4E($7,$45,180); //@line 241 "shaders.rs"
 $$sreg3$field = HEAP32[$7>>2]|0; //@line 241 "shaders.rs"
 $$sreg3$index15 = ((($7)) + 4|0); //@line 241 "shaders.rs"
 $$sreg3$field16 = HEAP32[$$sreg3$index15>>2]|0; //@line 241 "shaders.rs"
 $46 = $__arg2; //@line 241 "shaders.rs"
 __ZN4core3fmt10ArgumentV13new17h0963b74890d3a7c4E($6,$46,180); //@line 241 "shaders.rs"
 $$sreg4$field = HEAP32[$6>>2]|0; //@line 241 "shaders.rs"
 $$sreg4$index18 = ((($6)) + 4|0); //@line 241 "shaders.rs"
 $$sreg4$field19 = HEAP32[$$sreg4$index18>>2]|0; //@line 241 "shaders.rs"
 HEAP32[$_63>>2] = $$sreg2$field; //@line 241 "shaders.rs"
 $47 = ((($_63)) + 4|0); //@line 241 "shaders.rs"
 HEAP32[$47>>2] = $$sreg2$field13; //@line 241 "shaders.rs"
 $48 = ((($_63)) + 8|0); //@line 241 "shaders.rs"
 HEAP32[$48>>2] = $$sreg3$field; //@line 241 "shaders.rs"
 $49 = ((($48)) + 4|0); //@line 241 "shaders.rs"
 HEAP32[$49>>2] = $$sreg3$field16; //@line 241 "shaders.rs"
 $50 = ((($_63)) + 16|0); //@line 241 "shaders.rs"
 HEAP32[$50>>2] = $$sreg4$field; //@line 241 "shaders.rs"
 $51 = ((($50)) + 4|0); //@line 241 "shaders.rs"
 HEAP32[$51>>2] = $$sreg4$field19; //@line 241 "shaders.rs"
 $52 = HEAP32[1863]|0; //@line 241 "shaders.rs"
 __ZN4core3fmt9Arguments16new_v1_formatted17hd7921c86529aa3b1E($_56,7456,4,$_63,3,$52,3); //@line 241 "shaders.rs"
 __ZN3std2io5stdio6_print17h5e38a8ff46cfb3e1E($_56); //@line 241 "shaders.rs"
 $53 = HEAP32[$prog>>2]|0; //@line 242 "shaders.rs"
 _glLinkProgram(($53|0)); //@line 242 "shaders.rs"
 HEAP32[$lstatus>>2] = 0; //@line 243 "shaders.rs"
 $54 = HEAP32[$prog>>2]|0; //@line 244 "shaders.rs"
 $55 = HEAP32[766]|0; //@line 244 "shaders.rs"
 _glGetProgramiv(($54|0),($55|0),($lstatus|0)); //@line 244 "shaders.rs"
 $56 = HEAP32[$lstatus>>2]|0; //@line 248 "shaders.rs"
 $57 = HEAP8[39192]|0; //@line 248 "shaders.rs"
 $58 = $57&255; //@line 248 "shaders.rs"
 $59 = ($56|0)==($58|0); //@line 248 "shaders.rs"
 if ($59) {
  _memset(($buffer|0),0,1024)|0; //@line 250 "shaders.rs"
  HEAP32[$len>>2] = 0; //@line 251 "shaders.rs"
  $70 = HEAP32[$prog>>2]|0; //@line 252 "shaders.rs"
  _glGetProgramInfoLog(($70|0),1024,($len|0),($buffer|0)); //@line 252 "shaders.rs"
  $_121 = $lstatus; //@line 253 "shaders.rs"
  $71 = $_121; //@line 253 "shaders.rs"
  $__arg01 = $71; //@line 253 "shaders.rs"
  $72 = $__arg01; //@line 253 "shaders.rs"
  __ZN4core3fmt10ArgumentV13new17h18c233152faad36eE($5,$72,179); //@line 253 "shaders.rs"
  $$sreg5$field = HEAP32[$5>>2]|0; //@line 253 "shaders.rs"
  $$sreg5$index21 = ((($5)) + 4|0); //@line 253 "shaders.rs"
  $$sreg5$field22 = HEAP32[$$sreg5$index21>>2]|0; //@line 253 "shaders.rs"
  HEAP32[$_120>>2] = $$sreg5$field; //@line 253 "shaders.rs"
  $73 = ((($_120)) + 4|0); //@line 253 "shaders.rs"
  HEAP32[$73>>2] = $$sreg5$field22; //@line 253 "shaders.rs"
  $74 = HEAP32[1683]|0; //@line 253 "shaders.rs"
  __ZN4core3fmt9Arguments16new_v1_formatted17hd7921c86529aa3b1E($_113,7488,2,$_120,1,$74,1); //@line 253 "shaders.rs"
  __ZN3std2io5stdio6_print17h5e38a8ff46cfb3e1E($_113); //@line 253 "shaders.rs"
  __ZN4core3fmt9Arguments6new_v117h1cedc7e123bae470E($_131,7504,1,38620,0); //@line 254 "shaders.rs"
  __ZN3std2io5stdio6_print17h5e38a8ff46cfb3e1E($_131); //@line 254 "shaders.rs"
  __ZN3std9panicking11begin_panic17h1a4c9be19e7ea39bE(17240,14,7512); //@line 256 "shaders.rs"
  // unreachable; //@line 256 "shaders.rs"
 }
 $75 = HEAP32[$lstatus>>2]|0; //@line 258 "shaders.rs"
 $76 = HEAP8[13378]|0; //@line 258 "shaders.rs"
 $77 = $76&255; //@line 258 "shaders.rs"
 $78 = ($75|0)==($77|0); //@line 258 "shaders.rs"
 $79 = $78 ^ 1; //@line 258 "shaders.rs"
 if ($79) {
  __ZN3std9panicking11begin_panic17h1a4c9be19e7ea39bE(17254,45,7528); //@line 258 "shaders.rs"
  // unreachable; //@line 258 "shaders.rs"
 } else {
  __ZN4core3fmt9Arguments6new_v117h1cedc7e123bae470E($_150,7544,1,38620,0); //@line 259 "shaders.rs"
  __ZN3std2io5stdio6_print17h5e38a8ff46cfb3e1E($_150); //@line 259 "shaders.rs"
  $80 = HEAP32[$pixelShaderOut>>2]|0; //@line 262 "shaders.rs"
  $81 = HEAP32[$vertexShaderOut>>2]|0; //@line 262 "shaders.rs"
  $82 = HEAP32[$prog>>2]|0; //@line 262 "shaders.rs"
  HEAP32[$0>>2] = $80; //@line 262 "shaders.rs"
  $83 = ((($0)) + 4|0); //@line 262 "shaders.rs"
  HEAP32[$83>>2] = $81; //@line 262 "shaders.rs"
  $84 = ((($0)) + 8|0); //@line 262 "shaders.rs"
  HEAP32[$84>>2] = $82; //@line 262 "shaders.rs"
  STACKTOP = sp;return; //@line 263 "shaders.rs"
 }
}
function __ZN5rustv7shaders17map_shader_params17h9a0a7598ab747bb8E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field7 = 0, $$sreg$index6 = 0, $$sreg1$field = 0, $$sreg1$field10 = 0, $$sreg1$index9 = 0, $$sreg2$field = 0, $$sreg2$field14 = 0, $$sreg2$index13 = 0, $$sreg3$field = 0, $$sreg3$field17 = 0, $$sreg3$index16 = 0, $$sreg4$field = 0, $$sreg4$field20 = 0, $$sreg4$index19 = 0, $$sreg5$field = 0, $$sreg5$field23 = 0, $$sreg5$index22 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $_12 = 0, $_132 = 0, $_18 = 0, $_55 = 0, $_62 = 0, $_63 = 0, $_66 = 0, $_66$index12 = 0, $_95 = 0, $__arg0 = 0, $__arg1 = 0, $__arg2 = 0, $__arg3 = 0, $__next = 0, $i = 0, $iter = 0, $name_len = 0;
 var $num_uniforms = 0, $prog = 0, $switch = 0, $uindexr = 0, $uname = 0, $unisize = 0, $utype = 0, $val = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(624|0);
 $2 = sp + 80|0;
 $3 = sp + 64|0;
 $4 = sp + 48|0;
 $5 = sp + 32|0;
 $6 = sp + 16|0;
 $7 = sp;
 $_132 = sp + 288|0;
 $_95 = sp + 248|0;
 $_66 = sp + 224|0;
 $_63 = sp + 208|0;
 $_62 = sp + 176|0;
 $_55 = sp + 152|0;
 $uindexr = sp + 148|0;
 $utype = sp + 144|0;
 $unisize = sp + 140|0;
 $name_len = sp + 136|0;
 $uname = sp + 368|0;
 $_18 = sp + 120|0;
 $iter = sp + 104|0;
 $_12 = sp + 96|0;
 $num_uniforms = sp + 92|0;
 $prog = $1;
 HEAP32[$num_uniforms>>2] = 0; //@line 757 "shaders.rs"
 $8 = $prog; //@line 758 "shaders.rs"
 $9 = HEAP32[767]|0; //@line 758 "shaders.rs"
 _glGetProgramiv(($8|0),($9|0),($num_uniforms|0)); //@line 758 "shaders.rs"
 $10 = HEAP32[$num_uniforms>>2]|0; //@line 759 "shaders.rs"
 HEAP32[$_12>>2] = 0; //@line 759 "shaders.rs"
 $11 = ((($_12)) + 4|0); //@line 759 "shaders.rs"
 HEAP32[$11>>2] = $10; //@line 759 "shaders.rs"
 $12 = HEAP32[$_12>>2]|0; //@line 759 "shaders.rs"
 $13 = ((($_12)) + 4|0); //@line 759 "shaders.rs"
 $14 = HEAP32[$13>>2]|0; //@line 759 "shaders.rs"
 __ZN54__LT_I_u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17hdbcc8e125fee3dc0E($7,$12,$14); //@line 759 "shaders.rs"
 $$sreg$field = HEAP32[$7>>2]|0; //@line 759 "shaders.rs"
 $$sreg$index6 = ((($7)) + 4|0); //@line 759 "shaders.rs"
 $$sreg$field7 = HEAP32[$$sreg$index6>>2]|0; //@line 759 "shaders.rs"
 HEAP32[$iter>>2] = $$sreg$field; //@line 759 "shaders.rs"
 $15 = ((($iter)) + 4|0); //@line 759 "shaders.rs"
 HEAP32[$15>>2] = $$sreg$field7; //@line 759 "shaders.rs"
 while(1) {
  __ZN4core4iter5range93__LT_impl_u20_core__iter__iterator__Iterator_u20_for_u20_core__ops__range__Range_LT_A_GT__GT_4next17h0721cb4ba09f53cdE($_18,$iter); //@line 759 "shaders.rs"
  $16 = HEAP32[$_18>>2]|0; //@line 759 "shaders.rs"
  $switch = ($16>>>0)<(1); //@line 759 "shaders.rs"
  if ($switch) {
   break;
  }
  $137 = ((($_18)) + 4|0); //@line 759 "shaders.rs"
  $138 = HEAP32[$137>>2]|0; //@line 759 "shaders.rs"
  $val = $138; //@line 759 "shaders.rs"
  $139 = $val; //@line 759 "shaders.rs"
  $__next = $139; //@line 759 "shaders.rs"
  $140 = $__next; //@line 759 "shaders.rs"
  $i = $140; //@line 759 "shaders.rs"
  _memset(($uname|0),0,256)|0; //@line 760 "shaders.rs"
  HEAP32[$name_len>>2] = 0; //@line 761 "shaders.rs"
  HEAP32[$unisize>>2] = 0; //@line 762 "shaders.rs"
  HEAP32[$utype>>2] = 0; //@line 763 "shaders.rs"
  $141 = $prog; //@line 764 "shaders.rs"
  $142 = $i; //@line 764 "shaders.rs"
  _glGetActiveUniform(($141|0),($142|0),255,($name_len|0),($unisize|0),($utype|0),($uname|0)); //@line 764 "shaders.rs"
  $143 = $prog; //@line 765 "shaders.rs"
  $144 = (_glGetUniformLocation(($143|0),($uname|0))|0); //@line 765 "shaders.rs"
  HEAP32[$uindexr>>2] = $144; //@line 765 "shaders.rs"
  __ZN3std3ffi5c_str4CStr8from_ptr17h0aba58b99886bb0bE($6,$uname); //@line 766 "shaders.rs"
  $$sreg1$field = HEAP32[$6>>2]|0; //@line 766 "shaders.rs"
  $$sreg1$index9 = ((($6)) + 4|0); //@line 766 "shaders.rs"
  $$sreg1$field10 = HEAP32[$$sreg1$index9>>2]|0; //@line 766 "shaders.rs"
  HEAP32[$_66>>2] = $$sreg1$field; //@line 766 "shaders.rs"
  $_66$index12 = ((($_66)) + 4|0); //@line 766 "shaders.rs"
  HEAP32[$_66$index12>>2] = $$sreg1$field10; //@line 766 "shaders.rs"
  HEAP32[$_63>>2] = $uindexr; //@line 766 "shaders.rs"
  $145 = ((($_63)) + 4|0); //@line 766 "shaders.rs"
  HEAP32[$145>>2] = $_66; //@line 766 "shaders.rs"
  $146 = ((($_63)) + 8|0); //@line 766 "shaders.rs"
  HEAP32[$146>>2] = $unisize; //@line 766 "shaders.rs"
  $147 = ((($_63)) + 12|0); //@line 766 "shaders.rs"
  HEAP32[$147>>2] = $utype; //@line 766 "shaders.rs"
  $148 = HEAP32[$_63>>2]|0; //@line 766 "shaders.rs"
  $__arg0 = $148; //@line 766 "shaders.rs"
  $149 = ((($_63)) + 4|0); //@line 766 "shaders.rs"
  $150 = HEAP32[$149>>2]|0; //@line 766 "shaders.rs"
  $__arg1 = $150; //@line 766 "shaders.rs"
  $151 = ((($_63)) + 8|0); //@line 766 "shaders.rs"
  $152 = HEAP32[$151>>2]|0; //@line 766 "shaders.rs"
  $__arg2 = $152; //@line 766 "shaders.rs"
  $153 = ((($_63)) + 12|0); //@line 766 "shaders.rs"
  $154 = HEAP32[$153>>2]|0; //@line 766 "shaders.rs"
  $__arg3 = $154; //@line 766 "shaders.rs"
  $155 = $__arg0; //@line 766 "shaders.rs"
  __ZN4core3fmt10ArgumentV13new17h18c233152faad36eE($5,$155,179); //@line 766 "shaders.rs"
  $$sreg2$field = HEAP32[$5>>2]|0; //@line 766 "shaders.rs"
  $$sreg2$index13 = ((($5)) + 4|0); //@line 766 "shaders.rs"
  $$sreg2$field14 = HEAP32[$$sreg2$index13>>2]|0; //@line 766 "shaders.rs"
  $156 = $__arg1; //@line 766 "shaders.rs"
  __ZN4core3fmt10ArgumentV13new17h4de5cb633051a86aE($4,$156,356); //@line 766 "shaders.rs"
  $$sreg3$field = HEAP32[$4>>2]|0; //@line 766 "shaders.rs"
  $$sreg3$index16 = ((($4)) + 4|0); //@line 766 "shaders.rs"
  $$sreg3$field17 = HEAP32[$$sreg3$index16>>2]|0; //@line 766 "shaders.rs"
  $157 = $__arg2; //@line 766 "shaders.rs"
  __ZN4core3fmt10ArgumentV13new17h18c233152faad36eE($3,$157,179); //@line 766 "shaders.rs"
  $$sreg4$field = HEAP32[$3>>2]|0; //@line 766 "shaders.rs"
  $$sreg4$index19 = ((($3)) + 4|0); //@line 766 "shaders.rs"
  $$sreg4$field20 = HEAP32[$$sreg4$index19>>2]|0; //@line 766 "shaders.rs"
  $158 = $__arg3; //@line 766 "shaders.rs"
  __ZN4core3fmt10ArgumentV13new17h0963b74890d3a7c4E($2,$158,180); //@line 766 "shaders.rs"
  $$sreg5$field = HEAP32[$2>>2]|0; //@line 766 "shaders.rs"
  $$sreg5$index22 = ((($2)) + 4|0); //@line 766 "shaders.rs"
  $$sreg5$field23 = HEAP32[$$sreg5$index22>>2]|0; //@line 766 "shaders.rs"
  HEAP32[$_62>>2] = $$sreg2$field; //@line 766 "shaders.rs"
  $159 = ((($_62)) + 4|0); //@line 766 "shaders.rs"
  HEAP32[$159>>2] = $$sreg2$field14; //@line 766 "shaders.rs"
  $160 = ((($_62)) + 8|0); //@line 766 "shaders.rs"
  HEAP32[$160>>2] = $$sreg3$field; //@line 766 "shaders.rs"
  $161 = ((($160)) + 4|0); //@line 766 "shaders.rs"
  HEAP32[$161>>2] = $$sreg3$field17; //@line 766 "shaders.rs"
  $162 = ((($_62)) + 16|0); //@line 766 "shaders.rs"
  HEAP32[$162>>2] = $$sreg4$field; //@line 766 "shaders.rs"
  $163 = ((($162)) + 4|0); //@line 766 "shaders.rs"
  HEAP32[$163>>2] = $$sreg4$field20; //@line 766 "shaders.rs"
  $164 = ((($_62)) + 24|0); //@line 766 "shaders.rs"
  HEAP32[$164>>2] = $$sreg5$field; //@line 766 "shaders.rs"
  $165 = ((($164)) + 4|0); //@line 766 "shaders.rs"
  HEAP32[$165>>2] = $$sreg5$field23; //@line 766 "shaders.rs"
  $166 = HEAP32[1748]|0; //@line 766 "shaders.rs"
  __ZN4core3fmt9Arguments16new_v1_formatted17hd7921c86529aa3b1E($_55,6996,5,$_62,4,$166,4); //@line 766 "shaders.rs"
  __ZN3std2io5stdio6_print17h5e38a8ff46cfb3e1E($_55); //@line 766 "shaders.rs"
 }
 $17 = $prog; //@line 771 "shaders.rs"
 $18 = HEAP32[1746]|0; //@line 771 "shaders.rs"
 $19 = HEAP32[(6988)>>2]|0; //@line 771 "shaders.rs"
 $20 = (__ZN5rustv7shaders19get_attrib_location17h1d603aea0f3ed4a0E($17,$18,$19)|0); //@line 771 "shaders.rs"
 $21 = $prog; //@line 772 "shaders.rs"
 $22 = HEAP32[1759]|0; //@line 772 "shaders.rs"
 $23 = HEAP32[(7040)>>2]|0; //@line 772 "shaders.rs"
 $24 = (__ZN5rustv7shaders19get_attrib_location17h1d603aea0f3ed4a0E($21,$22,$23)|0); //@line 772 "shaders.rs"
 $25 = $prog; //@line 773 "shaders.rs"
 $26 = HEAP32[1761]|0; //@line 773 "shaders.rs"
 $27 = HEAP32[(7048)>>2]|0; //@line 773 "shaders.rs"
 $28 = (__ZN5rustv7shaders19get_attrib_location17h1d603aea0f3ed4a0E($25,$26,$27)|0); //@line 773 "shaders.rs"
 $29 = $prog; //@line 774 "shaders.rs"
 $30 = HEAP32[1763]|0; //@line 774 "shaders.rs"
 $31 = HEAP32[(7056)>>2]|0; //@line 774 "shaders.rs"
 $32 = (__ZN5rustv7shaders19get_attrib_location17h1d603aea0f3ed4a0E($29,$30,$31)|0); //@line 774 "shaders.rs"
 $33 = $prog; //@line 775 "shaders.rs"
 $34 = HEAP32[1765]|0; //@line 775 "shaders.rs"
 $35 = HEAP32[(7064)>>2]|0; //@line 775 "shaders.rs"
 $36 = (__ZN5rustv7shaders19get_attrib_location17h1d603aea0f3ed4a0E($33,$34,$35)|0); //@line 775 "shaders.rs"
 $37 = $prog; //@line 776 "shaders.rs"
 $38 = HEAP32[1767]|0; //@line 776 "shaders.rs"
 $39 = HEAP32[(7072)>>2]|0; //@line 776 "shaders.rs"
 $40 = (__ZN5rustv7shaders19get_attrib_location17h1d603aea0f3ed4a0E($37,$38,$39)|0); //@line 776 "shaders.rs"
 $41 = $prog; //@line 777 "shaders.rs"
 $42 = HEAP32[1769]|0; //@line 777 "shaders.rs"
 $43 = HEAP32[(7080)>>2]|0; //@line 777 "shaders.rs"
 $44 = (__ZN5rustv7shaders19get_attrib_location17h1d603aea0f3ed4a0E($41,$42,$43)|0); //@line 777 "shaders.rs"
 $45 = $prog; //@line 778 "shaders.rs"
 $46 = HEAP32[1771]|0; //@line 778 "shaders.rs"
 $47 = HEAP32[(7088)>>2]|0; //@line 778 "shaders.rs"
 $48 = (__ZN5rustv7shaders19get_attrib_location17h1d603aea0f3ed4a0E($45,$46,$47)|0); //@line 778 "shaders.rs"
 $49 = $prog; //@line 779 "shaders.rs"
 $50 = HEAP32[1773]|0; //@line 779 "shaders.rs"
 $51 = HEAP32[(7096)>>2]|0; //@line 779 "shaders.rs"
 $52 = (__ZN5rustv7shaders19get_attrib_location17h1d603aea0f3ed4a0E($49,$50,$51)|0); //@line 779 "shaders.rs"
 HEAP32[$_95>>2] = $20; //@line 770 "shaders.rs"
 $53 = ((($_95)) + 4|0); //@line 770 "shaders.rs"
 HEAP32[$53>>2] = $24; //@line 770 "shaders.rs"
 $54 = ((($_95)) + 8|0); //@line 770 "shaders.rs"
 HEAP32[$54>>2] = $28; //@line 770 "shaders.rs"
 $55 = ((($_95)) + 12|0); //@line 770 "shaders.rs"
 HEAP32[$55>>2] = $32; //@line 770 "shaders.rs"
 $56 = ((($_95)) + 16|0); //@line 770 "shaders.rs"
 HEAP32[$56>>2] = $36; //@line 770 "shaders.rs"
 $57 = ((($_95)) + 20|0); //@line 770 "shaders.rs"
 HEAP32[$57>>2] = $40; //@line 770 "shaders.rs"
 $58 = ((($_95)) + 24|0); //@line 770 "shaders.rs"
 HEAP32[$58>>2] = $44; //@line 770 "shaders.rs"
 $59 = ((($_95)) + 28|0); //@line 770 "shaders.rs"
 HEAP32[$59>>2] = $48; //@line 770 "shaders.rs"
 $60 = ((($_95)) + 32|0); //@line 770 "shaders.rs"
 HEAP32[$60>>2] = $52; //@line 770 "shaders.rs"
 $61 = $prog; //@line 783 "shaders.rs"
 $62 = HEAP32[1775]|0; //@line 783 "shaders.rs"
 $63 = HEAP32[(7104)>>2]|0; //@line 783 "shaders.rs"
 $64 = (__ZN5rustv7shaders20get_uniform_location17h86f4ab0c14430bfaE($61,$62,$63)|0); //@line 783 "shaders.rs"
 $65 = $prog; //@line 784 "shaders.rs"
 $66 = HEAP32[1777]|0; //@line 784 "shaders.rs"
 $67 = HEAP32[(7112)>>2]|0; //@line 784 "shaders.rs"
 $68 = (__ZN5rustv7shaders20get_uniform_location17h86f4ab0c14430bfaE($65,$66,$67)|0); //@line 784 "shaders.rs"
 $69 = $prog; //@line 785 "shaders.rs"
 $70 = HEAP32[1779]|0; //@line 785 "shaders.rs"
 $71 = HEAP32[(7120)>>2]|0; //@line 785 "shaders.rs"
 $72 = (__ZN5rustv7shaders20get_uniform_location17h86f4ab0c14430bfaE($69,$70,$71)|0); //@line 785 "shaders.rs"
 $73 = $prog; //@line 786 "shaders.rs"
 $74 = HEAP32[1781]|0; //@line 786 "shaders.rs"
 $75 = HEAP32[(7128)>>2]|0; //@line 786 "shaders.rs"
 $76 = (__ZN5rustv7shaders20get_uniform_location17h86f4ab0c14430bfaE($73,$74,$75)|0); //@line 786 "shaders.rs"
 $77 = $prog; //@line 787 "shaders.rs"
 $78 = HEAP32[1783]|0; //@line 787 "shaders.rs"
 $79 = HEAP32[(7136)>>2]|0; //@line 787 "shaders.rs"
 $80 = (__ZN5rustv7shaders20get_uniform_location17h86f4ab0c14430bfaE($77,$78,$79)|0); //@line 787 "shaders.rs"
 $81 = $prog; //@line 788 "shaders.rs"
 $82 = HEAP32[1785]|0; //@line 788 "shaders.rs"
 $83 = HEAP32[(7144)>>2]|0; //@line 788 "shaders.rs"
 $84 = (__ZN5rustv7shaders20get_uniform_location17h86f4ab0c14430bfaE($81,$82,$83)|0); //@line 788 "shaders.rs"
 $85 = $prog; //@line 789 "shaders.rs"
 $86 = HEAP32[1787]|0; //@line 789 "shaders.rs"
 $87 = HEAP32[(7152)>>2]|0; //@line 789 "shaders.rs"
 $88 = (__ZN5rustv7shaders20get_uniform_location17h86f4ab0c14430bfaE($85,$86,$87)|0); //@line 789 "shaders.rs"
 $89 = $prog; //@line 790 "shaders.rs"
 $90 = HEAP32[1789]|0; //@line 790 "shaders.rs"
 $91 = HEAP32[(7160)>>2]|0; //@line 790 "shaders.rs"
 $92 = (__ZN5rustv7shaders20get_uniform_location17h86f4ab0c14430bfaE($89,$90,$91)|0); //@line 790 "shaders.rs"
 $93 = $prog; //@line 791 "shaders.rs"
 $94 = HEAP32[1791]|0; //@line 791 "shaders.rs"
 $95 = HEAP32[(7168)>>2]|0; //@line 791 "shaders.rs"
 $96 = (__ZN5rustv7shaders20get_uniform_location17h86f4ab0c14430bfaE($93,$94,$95)|0); //@line 791 "shaders.rs"
 $97 = $prog; //@line 792 "shaders.rs"
 $98 = HEAP32[1793]|0; //@line 792 "shaders.rs"
 $99 = HEAP32[(7176)>>2]|0; //@line 792 "shaders.rs"
 $100 = (__ZN5rustv7shaders20get_uniform_location17h86f4ab0c14430bfaE($97,$98,$99)|0); //@line 792 "shaders.rs"
 $101 = $prog; //@line 793 "shaders.rs"
 $102 = HEAP32[1795]|0; //@line 793 "shaders.rs"
 $103 = HEAP32[(7184)>>2]|0; //@line 793 "shaders.rs"
 $104 = (__ZN5rustv7shaders20get_uniform_location17h86f4ab0c14430bfaE($101,$102,$103)|0); //@line 793 "shaders.rs"
 $105 = $prog; //@line 794 "shaders.rs"
 $106 = HEAP32[1797]|0; //@line 794 "shaders.rs"
 $107 = HEAP32[(7192)>>2]|0; //@line 794 "shaders.rs"
 $108 = (__ZN5rustv7shaders20get_uniform_location17h86f4ab0c14430bfaE($105,$106,$107)|0); //@line 794 "shaders.rs"
 HEAP32[$_132>>2] = $64; //@line 782 "shaders.rs"
 $109 = ((($_132)) + 4|0); //@line 782 "shaders.rs"
 HEAP32[$109>>2] = $68; //@line 782 "shaders.rs"
 $110 = HEAP32[(7204)>>2]|0; //@line 782 "shaders.rs"
 $111 = ((($_132)) + 8|0); //@line 782 "shaders.rs"
 HEAP32[$111>>2] = $110; //@line 782 "shaders.rs"
 $112 = HEAP32[(7208)>>2]|0; //@line 782 "shaders.rs"
 $113 = ((($_132)) + 12|0); //@line 782 "shaders.rs"
 HEAP32[$113>>2] = $112; //@line 782 "shaders.rs"
 $114 = HEAP32[(7212)>>2]|0; //@line 782 "shaders.rs"
 $115 = ((($_132)) + 16|0); //@line 782 "shaders.rs"
 HEAP32[$115>>2] = $114; //@line 782 "shaders.rs"
 $116 = HEAP32[(7216)>>2]|0; //@line 782 "shaders.rs"
 $117 = ((($_132)) + 20|0); //@line 782 "shaders.rs"
 HEAP32[$117>>2] = $116; //@line 782 "shaders.rs"
 $118 = HEAP32[(7220)>>2]|0; //@line 782 "shaders.rs"
 $119 = ((($_132)) + 24|0); //@line 782 "shaders.rs"
 HEAP32[$119>>2] = $118; //@line 782 "shaders.rs"
 $120 = HEAP32[(7224)>>2]|0; //@line 782 "shaders.rs"
 $121 = ((($_132)) + 28|0); //@line 782 "shaders.rs"
 HEAP32[$121>>2] = $120; //@line 782 "shaders.rs"
 $122 = ((($_132)) + 32|0); //@line 782 "shaders.rs"
 HEAP32[$122>>2] = $80; //@line 782 "shaders.rs"
 $123 = ((($_132)) + 36|0); //@line 782 "shaders.rs"
 HEAP32[$123>>2] = $84; //@line 782 "shaders.rs"
 $124 = ((($_132)) + 40|0); //@line 782 "shaders.rs"
 HEAP32[$124>>2] = $88; //@line 782 "shaders.rs"
 $125 = ((($_132)) + 44|0); //@line 782 "shaders.rs"
 HEAP32[$125>>2] = $92; //@line 782 "shaders.rs"
 $126 = ((($_132)) + 48|0); //@line 782 "shaders.rs"
 HEAP32[$126>>2] = $72; //@line 782 "shaders.rs"
 $127 = ((($_132)) + 52|0); //@line 782 "shaders.rs"
 HEAP32[$127>>2] = $76; //@line 782 "shaders.rs"
 $128 = HEAP32[(7252)>>2]|0; //@line 782 "shaders.rs"
 $129 = ((($_132)) + 56|0); //@line 782 "shaders.rs"
 HEAP32[$129>>2] = $128; //@line 782 "shaders.rs"
 $130 = HEAP32[(7256)>>2]|0; //@line 782 "shaders.rs"
 $131 = ((($_132)) + 60|0); //@line 782 "shaders.rs"
 HEAP32[$131>>2] = $130; //@line 782 "shaders.rs"
 $132 = ((($_132)) + 64|0); //@line 782 "shaders.rs"
 HEAP32[$132>>2] = $96; //@line 782 "shaders.rs"
 $133 = ((($_132)) + 68|0); //@line 782 "shaders.rs"
 HEAP32[$133>>2] = $100; //@line 782 "shaders.rs"
 $134 = ((($_132)) + 72|0); //@line 782 "shaders.rs"
 HEAP32[$134>>2] = $104; //@line 782 "shaders.rs"
 $135 = ((($_132)) + 76|0); //@line 782 "shaders.rs"
 HEAP32[$135>>2] = $108; //@line 782 "shaders.rs"
 dest=$0; src=$_95; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0)); //@line 769 "shaders.rs"
 $136 = ((($0)) + 36|0); //@line 769 "shaders.rs"
 dest=$136; src=$_132; stop=dest+80|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0)); //@line 769 "shaders.rs"
 STACKTOP = sp;return; //@line 799 "shaders.rs"
}
function __ZN65__LT_rustv__shaders__UniformTable_u20_as_u20_core__fmt__Debug_GT_3fmt17h9e920268054d6667E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_106 = 0, $_114 = 0, $_122 = 0, $_130 = 0, $_138 = 0, $_146 = 0, $_154 = 0, $_162 = 0, $_170 = 0, $_178 = 0, $_186 = 0, $_34 = 0, $_42 = 0, $_50 = 0, $_58 = 0, $_66 = 0, $_74 = 0, $_82 = 0, $_90 = 0;
 var $_98 = 0, $__arg_0 = 0, $__self_0_0 = 0, $__self_0_1 = 0, $__self_0_10 = 0, $__self_0_11 = 0, $__self_0_12 = 0, $__self_0_13 = 0, $__self_0_14 = 0, $__self_0_15 = 0, $__self_0_16 = 0, $__self_0_17 = 0, $__self_0_18 = 0, $__self_0_19 = 0, $__self_0_2 = 0, $__self_0_3 = 0, $__self_0_4 = 0, $__self_0_5 = 0, $__self_0_6 = 0, $__self_0_7 = 0;
 var $__self_0_8 = 0, $__self_0_9 = 0, $builder = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $_186 = sp + 172|0;
 $_178 = sp + 168|0;
 $_170 = sp + 164|0;
 $_162 = sp + 160|0;
 $_154 = sp + 156|0;
 $_146 = sp + 152|0;
 $_138 = sp + 148|0;
 $_130 = sp + 144|0;
 $_122 = sp + 140|0;
 $_114 = sp + 136|0;
 $_106 = sp + 132|0;
 $_98 = sp + 128|0;
 $_90 = sp + 124|0;
 $_82 = sp + 120|0;
 $_74 = sp + 116|0;
 $_66 = sp + 112|0;
 $_58 = sp + 108|0;
 $_50 = sp + 104|0;
 $_42 = sp + 100|0;
 $_34 = sp + 96|0;
 $builder = sp + 88|0;
 $self = $0;
 $__arg_0 = $1;
 $2 = $self; //@line 702 "shaders.rs"
 $__self_0_0 = $2; //@line 702 "shaders.rs"
 $3 = $self; //@line 703 "shaders.rs"
 $4 = ((($3)) + 4|0); //@line 703 "shaders.rs"
 $__self_0_1 = $4; //@line 703 "shaders.rs"
 $5 = $self; //@line 704 "shaders.rs"
 $6 = ((($5)) + 8|0); //@line 704 "shaders.rs"
 $__self_0_2 = $6; //@line 704 "shaders.rs"
 $7 = $self; //@line 705 "shaders.rs"
 $8 = ((($7)) + 12|0); //@line 705 "shaders.rs"
 $__self_0_3 = $8; //@line 705 "shaders.rs"
 $9 = $self; //@line 706 "shaders.rs"
 $10 = ((($9)) + 16|0); //@line 706 "shaders.rs"
 $__self_0_4 = $10; //@line 706 "shaders.rs"
 $11 = $self; //@line 707 "shaders.rs"
 $12 = ((($11)) + 20|0); //@line 707 "shaders.rs"
 $__self_0_5 = $12; //@line 707 "shaders.rs"
 $13 = $self; //@line 708 "shaders.rs"
 $14 = ((($13)) + 24|0); //@line 708 "shaders.rs"
 $__self_0_6 = $14; //@line 708 "shaders.rs"
 $15 = $self; //@line 709 "shaders.rs"
 $16 = ((($15)) + 28|0); //@line 709 "shaders.rs"
 $__self_0_7 = $16; //@line 709 "shaders.rs"
 $17 = $self; //@line 710 "shaders.rs"
 $18 = ((($17)) + 32|0); //@line 710 "shaders.rs"
 $__self_0_8 = $18; //@line 710 "shaders.rs"
 $19 = $self; //@line 711 "shaders.rs"
 $20 = ((($19)) + 36|0); //@line 711 "shaders.rs"
 $__self_0_9 = $20; //@line 711 "shaders.rs"
 $21 = $self; //@line 712 "shaders.rs"
 $22 = ((($21)) + 40|0); //@line 712 "shaders.rs"
 $__self_0_10 = $22; //@line 712 "shaders.rs"
 $23 = $self; //@line 713 "shaders.rs"
 $24 = ((($23)) + 44|0); //@line 713 "shaders.rs"
 $__self_0_11 = $24; //@line 713 "shaders.rs"
 $25 = $self; //@line 714 "shaders.rs"
 $26 = ((($25)) + 48|0); //@line 714 "shaders.rs"
 $__self_0_12 = $26; //@line 714 "shaders.rs"
 $27 = $self; //@line 715 "shaders.rs"
 $28 = ((($27)) + 52|0); //@line 715 "shaders.rs"
 $__self_0_13 = $28; //@line 715 "shaders.rs"
 $29 = $self; //@line 716 "shaders.rs"
 $30 = ((($29)) + 56|0); //@line 716 "shaders.rs"
 $__self_0_14 = $30; //@line 716 "shaders.rs"
 $31 = $self; //@line 717 "shaders.rs"
 $32 = ((($31)) + 60|0); //@line 717 "shaders.rs"
 $__self_0_15 = $32; //@line 717 "shaders.rs"
 $33 = $self; //@line 718 "shaders.rs"
 $34 = ((($33)) + 64|0); //@line 718 "shaders.rs"
 $__self_0_16 = $34; //@line 718 "shaders.rs"
 $35 = $self; //@line 719 "shaders.rs"
 $36 = ((($35)) + 68|0); //@line 719 "shaders.rs"
 $__self_0_17 = $36; //@line 719 "shaders.rs"
 $37 = $self; //@line 720 "shaders.rs"
 $38 = ((($37)) + 72|0); //@line 720 "shaders.rs"
 $__self_0_18 = $38; //@line 720 "shaders.rs"
 $39 = $self; //@line 721 "shaders.rs"
 $40 = ((($39)) + 76|0); //@line 721 "shaders.rs"
 $__self_0_19 = $40; //@line 721 "shaders.rs"
 $41 = $__arg_0; //@line 700 "shaders.rs"
 __ZN4core3fmt9Formatter12debug_struct17h2d24fc5dad9395cdE($builder,$41,16659,12); //@line 700 "shaders.rs"
 $42 = $__self_0_0; //@line 702 "shaders.rs"
 HEAP32[$_34>>2] = $42; //@line 702 "shaders.rs"
 (__ZN4core3fmt8builders11DebugStruct5field17h5f57368d80e04997E($builder,16671,8,$_34,6968)|0); //@line 700 "shaders.rs"
 $43 = $__self_0_1; //@line 703 "shaders.rs"
 HEAP32[$_42>>2] = $43; //@line 703 "shaders.rs"
 (__ZN4core3fmt8builders11DebugStruct5field17h5f57368d80e04997E($builder,16679,14,$_42,6968)|0); //@line 700 "shaders.rs"
 $44 = $__self_0_2; //@line 704 "shaders.rs"
 HEAP32[$_50>>2] = $44; //@line 704 "shaders.rs"
 (__ZN4core3fmt8builders11DebugStruct5field17h5f57368d80e04997E($builder,16693,19,$_50,6968)|0); //@line 700 "shaders.rs"
 $45 = $__self_0_3; //@line 705 "shaders.rs"
 HEAP32[$_58>>2] = $45; //@line 705 "shaders.rs"
 (__ZN4core3fmt8builders11DebugStruct5field17h5f57368d80e04997E($builder,16712,9,$_58,6968)|0); //@line 700 "shaders.rs"
 $46 = $__self_0_4; //@line 706 "shaders.rs"
 HEAP32[$_66>>2] = $46; //@line 706 "shaders.rs"
 (__ZN4core3fmt8builders11DebugStruct5field17h5f57368d80e04997E($builder,16721,11,$_66,6968)|0); //@line 700 "shaders.rs"
 $47 = $__self_0_5; //@line 707 "shaders.rs"
 HEAP32[$_74>>2] = $47; //@line 707 "shaders.rs"
 (__ZN4core3fmt8builders11DebugStruct5field17h5f57368d80e04997E($builder,16732,4,$_74,6968)|0); //@line 700 "shaders.rs"
 $48 = $__self_0_6; //@line 708 "shaders.rs"
 HEAP32[$_82>>2] = $48; //@line 708 "shaders.rs"
 (__ZN4core3fmt8builders11DebugStruct5field17h5f57368d80e04997E($builder,16736,4,$_82,6968)|0); //@line 700 "shaders.rs"
 $49 = $__self_0_7; //@line 709 "shaders.rs"
 HEAP32[$_90>>2] = $49; //@line 709 "shaders.rs"
 (__ZN4core3fmt8builders11DebugStruct5field17h5f57368d80e04997E($builder,16740,10,$_90,6968)|0); //@line 700 "shaders.rs"
 $50 = $__self_0_8; //@line 710 "shaders.rs"
 HEAP32[$_98>>2] = $50; //@line 710 "shaders.rs"
 (__ZN4core3fmt8builders11DebugStruct5field17h5f57368d80e04997E($builder,16750,7,$_98,6968)|0); //@line 700 "shaders.rs"
 $51 = $__self_0_9; //@line 711 "shaders.rs"
 HEAP32[$_106>>2] = $51; //@line 711 "shaders.rs"
 (__ZN4core3fmt8builders11DebugStruct5field17h5f57368d80e04997E($builder,16757,10,$_106,6968)|0); //@line 700 "shaders.rs"
 $52 = $__self_0_10; //@line 712 "shaders.rs"
 HEAP32[$_114>>2] = $52; //@line 712 "shaders.rs"
 (__ZN4core3fmt8builders11DebugStruct5field17h5f57368d80e04997E($builder,16767,10,$_114,6968)|0); //@line 700 "shaders.rs"
 $53 = $__self_0_11; //@line 713 "shaders.rs"
 HEAP32[$_122>>2] = $53; //@line 713 "shaders.rs"
 (__ZN4core3fmt8builders11DebugStruct5field17h5f57368d80e04997E($builder,16777,10,$_122,6968)|0); //@line 700 "shaders.rs"
 $54 = $__self_0_12; //@line 714 "shaders.rs"
 HEAP32[$_130>>2] = $54; //@line 714 "shaders.rs"
 (__ZN4core3fmt8builders11DebugStruct5field17h5f57368d80e04997E($builder,16787,14,$_130,6968)|0); //@line 700 "shaders.rs"
 $55 = $__self_0_13; //@line 715 "shaders.rs"
 HEAP32[$_138>>2] = $55; //@line 715 "shaders.rs"
 (__ZN4core3fmt8builders11DebugStruct5field17h5f57368d80e04997E($builder,16801,12,$_138,6968)|0); //@line 700 "shaders.rs"
 $56 = $__self_0_14; //@line 716 "shaders.rs"
 HEAP32[$_146>>2] = $56; //@line 716 "shaders.rs"
 (__ZN4core3fmt8builders11DebugStruct5field17h5f57368d80e04997E($builder,16813,7,$_146,6968)|0); //@line 700 "shaders.rs"
 $57 = $__self_0_15; //@line 717 "shaders.rs"
 HEAP32[$_154>>2] = $57; //@line 717 "shaders.rs"
 (__ZN4core3fmt8builders11DebugStruct5field17h5f57368d80e04997E($builder,16820,10,$_154,6968)|0); //@line 700 "shaders.rs"
 $58 = $__self_0_16; //@line 718 "shaders.rs"
 HEAP32[$_162>>2] = $58; //@line 718 "shaders.rs"
 (__ZN4core3fmt8builders11DebugStruct5field17h5f57368d80e04997E($builder,16830,9,$_162,6968)|0); //@line 700 "shaders.rs"
 $59 = $__self_0_17; //@line 719 "shaders.rs"
 HEAP32[$_170>>2] = $59; //@line 719 "shaders.rs"
 (__ZN4core3fmt8builders11DebugStruct5field17h5f57368d80e04997E($builder,16839,11,$_170,6968)|0); //@line 700 "shaders.rs"
 $60 = $__self_0_18; //@line 720 "shaders.rs"
 HEAP32[$_178>>2] = $60; //@line 720 "shaders.rs"
 (__ZN4core3fmt8builders11DebugStruct5field17h5f57368d80e04997E($builder,16850,12,$_178,6968)|0); //@line 700 "shaders.rs"
 $61 = $__self_0_19; //@line 721 "shaders.rs"
 HEAP32[$_186>>2] = $61; //@line 721 "shaders.rs"
 (__ZN4core3fmt8builders11DebugStruct5field17h5f57368d80e04997E($builder,16862,12,$_186,6968)|0); //@line 700 "shaders.rs"
 $62 = (__ZN4core3fmt8builders11DebugStruct6finish17h63c8c54de379106dE($builder)|0); //@line 700 "shaders.rs"
 STACKTOP = sp;return ($62|0); //@line 700 "shaders.rs"
}
function __ZN5rustv7shaders19get_attrib_location17h1d603aea0f3ed4a0E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sreg$field = 0, $$sreg$field3 = 0, $$sreg$index2 = 0, $$sreg1$field = 0, $$sreg1$field6 = 0, $$sreg1$index5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_15 = 0, $_16 = 0, $_8 = 0, $__arg0 = 0, $__arg1 = 0, $name = 0, $r = 0, $shader_prog = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $3 = sp + 16|0;
 $4 = sp;
 $_16 = sp + 88|0;
 $_15 = sp + 72|0;
 $_8 = sp + 48|0;
 $r = sp + 40|0;
 $name = sp + 32|0;
 $shader_prog = $0;
 HEAP32[$name>>2] = $1;
 $5 = ((($name)) + 4|0);
 HEAP32[$5>>2] = $2;
 $6 = $shader_prog; //@line 72 "shaders.rs"
 $7 = HEAP32[$name>>2]|0; //@line 72 "shaders.rs"
 $8 = ((($name)) + 4|0); //@line 72 "shaders.rs"
 $9 = HEAP32[$8>>2]|0; //@line 72 "shaders.rs"
 $10 = (__ZN5rustv3r3d5c_str17h24b9d36d97df309cE($7,$9)|0); //@line 72 "shaders.rs"
 $11 = (_glGetAttribLocation(($6|0),($10|0))|0); //@line 72 "shaders.rs"
 HEAP32[$r>>2] = $11; //@line 72 "shaders.rs"
 HEAP32[$_16>>2] = $name; //@line 73 "shaders.rs"
 $12 = ((($_16)) + 4|0); //@line 73 "shaders.rs"
 HEAP32[$12>>2] = $r; //@line 73 "shaders.rs"
 $13 = HEAP32[$_16>>2]|0; //@line 73 "shaders.rs"
 $__arg0 = $13; //@line 73 "shaders.rs"
 $14 = ((($_16)) + 4|0); //@line 73 "shaders.rs"
 $15 = HEAP32[$14>>2]|0; //@line 73 "shaders.rs"
 $__arg1 = $15; //@line 73 "shaders.rs"
 $16 = $__arg0; //@line 73 "shaders.rs"
 __ZN4core3fmt10ArgumentV13new17heecba43e0c9da516E($4,$16,303); //@line 73 "shaders.rs"
 $$sreg$field = HEAP32[$4>>2]|0; //@line 73 "shaders.rs"
 $$sreg$index2 = ((($4)) + 4|0); //@line 73 "shaders.rs"
 $$sreg$field3 = HEAP32[$$sreg$index2>>2]|0; //@line 73 "shaders.rs"
 $17 = $__arg1; //@line 73 "shaders.rs"
 __ZN4core3fmt10ArgumentV13new17h18c233152faad36eE($3,$17,179); //@line 73 "shaders.rs"
 $$sreg1$field = HEAP32[$3>>2]|0; //@line 73 "shaders.rs"
 $$sreg1$index5 = ((($3)) + 4|0); //@line 73 "shaders.rs"
 $$sreg1$field6 = HEAP32[$$sreg1$index5>>2]|0; //@line 73 "shaders.rs"
 HEAP32[$_15>>2] = $$sreg$field; //@line 73 "shaders.rs"
 $18 = ((($_15)) + 4|0); //@line 73 "shaders.rs"
 HEAP32[$18>>2] = $$sreg$field3; //@line 73 "shaders.rs"
 $19 = ((($_15)) + 8|0); //@line 73 "shaders.rs"
 HEAP32[$19>>2] = $$sreg1$field; //@line 73 "shaders.rs"
 $20 = ((($19)) + 4|0); //@line 73 "shaders.rs"
 HEAP32[$20>>2] = $$sreg1$field6; //@line 73 "shaders.rs"
 $21 = HEAP32[1819]|0; //@line 73 "shaders.rs"
 __ZN4core3fmt9Arguments16new_v1_formatted17hd7921c86529aa3b1E($_8,7304,3,$_15,2,$21,2); //@line 73 "shaders.rs"
 __ZN3std2io5stdio6_print17h5e38a8ff46cfb3e1E($_8); //@line 73 "shaders.rs"
 $22 = HEAP32[$r>>2]|0; //@line 74 "shaders.rs"
 STACKTOP = sp;return ($22|0); //@line 75 "shaders.rs"
}
function __ZN5rustv7shaders20get_uniform_location17h86f4ab0c14430bfaE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sreg$field = 0, $$sreg$field3 = 0, $$sreg$index2 = 0, $$sreg1$field = 0, $$sreg1$field6 = 0, $$sreg1$index5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_15 = 0, $_16 = 0, $_8 = 0, $__arg0 = 0, $__arg1 = 0, $name = 0, $r = 0, $shader_prog = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $3 = sp + 16|0;
 $4 = sp;
 $_16 = sp + 88|0;
 $_15 = sp + 72|0;
 $_8 = sp + 48|0;
 $r = sp + 40|0;
 $name = sp + 32|0;
 $shader_prog = $0;
 HEAP32[$name>>2] = $1;
 $5 = ((($name)) + 4|0);
 HEAP32[$5>>2] = $2;
 $6 = $shader_prog; //@line 77 "shaders.rs"
 $7 = HEAP32[$name>>2]|0; //@line 77 "shaders.rs"
 $8 = ((($name)) + 4|0); //@line 77 "shaders.rs"
 $9 = HEAP32[$8>>2]|0; //@line 77 "shaders.rs"
 $10 = (__ZN5rustv3r3d5c_str17h24b9d36d97df309cE($7,$9)|0); //@line 77 "shaders.rs"
 $11 = (_glGetUniformLocation(($6|0),($10|0))|0); //@line 77 "shaders.rs"
 HEAP32[$r>>2] = $11; //@line 77 "shaders.rs"
 HEAP32[$_16>>2] = $name; //@line 78 "shaders.rs"
 $12 = ((($_16)) + 4|0); //@line 78 "shaders.rs"
 HEAP32[$12>>2] = $r; //@line 78 "shaders.rs"
 $13 = HEAP32[$_16>>2]|0; //@line 78 "shaders.rs"
 $__arg0 = $13; //@line 78 "shaders.rs"
 $14 = ((($_16)) + 4|0); //@line 78 "shaders.rs"
 $15 = HEAP32[$14>>2]|0; //@line 78 "shaders.rs"
 $__arg1 = $15; //@line 78 "shaders.rs"
 $16 = $__arg0; //@line 78 "shaders.rs"
 __ZN4core3fmt10ArgumentV13new17heecba43e0c9da516E($4,$16,303); //@line 78 "shaders.rs"
 $$sreg$field = HEAP32[$4>>2]|0; //@line 78 "shaders.rs"
 $$sreg$index2 = ((($4)) + 4|0); //@line 78 "shaders.rs"
 $$sreg$field3 = HEAP32[$$sreg$index2>>2]|0; //@line 78 "shaders.rs"
 $17 = $__arg1; //@line 78 "shaders.rs"
 __ZN4core3fmt10ArgumentV13new17h18c233152faad36eE($3,$17,179); //@line 78 "shaders.rs"
 $$sreg1$field = HEAP32[$3>>2]|0; //@line 78 "shaders.rs"
 $$sreg1$index5 = ((($3)) + 4|0); //@line 78 "shaders.rs"
 $$sreg1$field6 = HEAP32[$$sreg1$index5>>2]|0; //@line 78 "shaders.rs"
 HEAP32[$_15>>2] = $$sreg$field; //@line 78 "shaders.rs"
 $18 = ((($_15)) + 4|0); //@line 78 "shaders.rs"
 HEAP32[$18>>2] = $$sreg$field3; //@line 78 "shaders.rs"
 $19 = ((($_15)) + 8|0); //@line 78 "shaders.rs"
 HEAP32[$19>>2] = $$sreg1$field; //@line 78 "shaders.rs"
 $20 = ((($19)) + 4|0); //@line 78 "shaders.rs"
 HEAP32[$20>>2] = $$sreg1$field6; //@line 78 "shaders.rs"
 $21 = HEAP32[1819]|0; //@line 78 "shaders.rs"
 __ZN4core3fmt9Arguments16new_v1_formatted17hd7921c86529aa3b1E($_8,7280,3,$_15,2,$21,2); //@line 78 "shaders.rs"
 __ZN3std2io5stdio6_print17h5e38a8ff46cfb3e1E($_8); //@line 78 "shaders.rs"
 $22 = HEAP32[$r>>2]|0; //@line 79 "shaders.rs"
 STACKTOP = sp;return ($22|0); //@line 80 "shaders.rs"
}
function __ZN5rustv7shaders25create_and_compile_shader17he95bff97df8e1b7dE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sreg$field = 0, $$sreg$field14 = 0, $$sreg$index13 = 0, $$sreg1$field = 0, $$sreg1$field17 = 0, $$sreg1$index16 = 0, $$sreg10$field = 0, $$sreg10$field45 = 0, $$sreg10$index44 = 0, $$sreg11$field = 0, $$sreg11$field48 = 0, $$sreg11$index47 = 0, $$sreg12$field = 0, $$sreg12$field51 = 0, $$sreg12$index50 = 0, $$sreg2$field = 0, $$sreg2$field20 = 0, $$sreg2$index19 = 0, $$sreg3$field = 0, $$sreg3$field23 = 0;
 var $$sreg3$index22 = 0, $$sreg4$field = 0, $$sreg4$field26 = 0, $$sreg4$index25 = 0, $$sreg5$field = 0, $$sreg5$field29 = 0, $$sreg5$index28 = 0, $$sreg6$field = 0, $$sreg6$field32 = 0, $$sreg6$index31 = 0, $$sreg7$field = 0, $$sreg7$field35 = 0, $$sreg7$index34 = 0, $$sreg8$field = 0, $$sreg8$field38 = 0, $$sreg8$index37 = 0, $$sreg9$field = 0, $$sreg9$field42 = 0, $$sreg9$index41 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_11 = 0, $_115 = 0, $_116 = 0;
 var $_12 = 0, $_123 = 0, $_124 = 0, $_134 = 0, $_141 = 0, $_142 = 0, $_160 = 0, $_169 = 0, $_176 = 0, $_177 = 0, $_187 = 0, $_19 = 0, $_194 = 0, $_195 = 0, $_197 = 0, $_197$index40 = 0, $_20 = 0, $_214 = 0, $_220 = 0, $_235 = 0;
 var $_236 = 0, $_243 = 0, $_244 = 0, $_256 = 0, $_263 = 0, $_264 = 0, $_276 = 0, $_277 = 0, $_284 = 0, $_285 = 0, $_62 = 0, $_63 = 0, $_70 = 0, $_71 = 0, $_88 = 0, $_89 = 0, $__arg0 = 0, $__arg01 = 0, $__arg02 = 0, $__arg03 = 0;
 var $__arg04 = 0, $__arg05 = 0, $__arg06 = 0, $__arg07 = 0, $__arg08 = 0, $__arg1 = 0, $__next = 0, $compile_log = 0, $i = 0, $iter = 0, $log_len = 0, $personalityslot = 0, $shader = 0, $shader_type = 0, $source = 0, $sources_as_c_str = 0, $status = 0, $switch = 0, $val = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1328|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1328|0);
 $3 = sp + 192|0;
 $4 = sp + 176|0;
 $5 = sp + 160|0;
 $6 = sp + 144|0;
 $7 = sp + 128|0;
 $8 = sp + 112|0;
 $9 = sp + 96|0;
 $10 = sp + 80|0;
 $11 = sp + 64|0;
 $12 = sp + 48|0;
 $13 = sp + 32|0;
 $14 = sp + 16|0;
 $15 = sp;
 $personalityslot = sp + 800|0;
 $_284 = sp + 784|0;
 $_277 = sp + 760|0;
 $_276 = sp + 744|0;
 $_263 = sp + 728|0;
 $_256 = sp + 704|0;
 $_244 = sp + 696|0;
 $_243 = sp + 688|0;
 $_236 = sp + 664|0;
 $_235 = sp + 648|0;
 $_220 = sp + 632|0;
 $iter = sp + 616|0;
 $_214 = sp + 608|0;
 $_197 = sp + 592|0;
 $_195 = sp + 584|0;
 $_194 = sp + 576|0;
 $_187 = sp + 552|0;
 $_177 = sp + 544|0;
 $_176 = sp + 536|0;
 $_169 = sp + 512|0;
 $_160 = sp + 488|0;
 $_142 = sp + 472|0;
 $_141 = sp + 456|0;
 $_134 = sp + 432|0;
 $_123 = sp + 416|0;
 $_116 = sp + 392|0;
 $_115 = sp + 380|0;
 $log_len = sp + 376|0;
 $compile_log = sp + 808|0;
 $_89 = sp + 352|0;
 $_88 = sp + 336|0;
 $_70 = sp + 320|0;
 $_63 = sp + 296|0;
 $_62 = sp + 280|0;
 $status = sp + 276|0;
 $sources_as_c_str = sp + 272|0;
 $_19 = sp + 256|0;
 $_12 = sp + 232|0;
 $_11 = sp + 220|0;
 $shader = sp + 216|0;
 $source = sp + 208|0;
 $shader_type = $0;
 HEAP32[$source>>2] = $1;
 $16 = ((($source)) + 4|0);
 HEAP32[$16>>2] = $2;
 __ZN5rustv16android_logw_str17h20b06566c03231beE(17379,26); //@line 84 "shaders.rs"
 $17 = $shader_type; //@line 85 "shaders.rs"
 $18 = (_glCreateShader(($17|0))|0); //@line 85 "shaders.rs"
 HEAP32[$shader>>2] = $18; //@line 85 "shaders.rs"
 $_20 = $shader; //@line 86 "shaders.rs"
 $19 = $_20; //@line 86 "shaders.rs"
 $__arg0 = $19; //@line 86 "shaders.rs"
 $20 = $__arg0; //@line 86 "shaders.rs"
 __ZN4core3fmt10ArgumentV13new17h0963b74890d3a7c4E($15,$20,180); //@line 86 "shaders.rs"
 $$sreg$field = HEAP32[$15>>2]|0; //@line 86 "shaders.rs"
 $$sreg$index13 = ((($15)) + 4|0); //@line 86 "shaders.rs"
 $$sreg$field14 = HEAP32[$$sreg$index13>>2]|0; //@line 86 "shaders.rs"
 HEAP32[$_19>>2] = $$sreg$field; //@line 86 "shaders.rs"
 $21 = ((($_19)) + 4|0); //@line 86 "shaders.rs"
 HEAP32[$21>>2] = $$sreg$field14; //@line 86 "shaders.rs"
 $22 = HEAP32[1683]|0; //@line 86 "shaders.rs"
 __ZN4core3fmt9Arguments16new_v1_formatted17hd7921c86529aa3b1E($_12,7552,2,$_19,1,$22,1); //@line 86 "shaders.rs"
 __ZN5alloc3fmt6format17h9b28a0d324b081e9E($_11,$_12); //@line 86 "shaders.rs"
 __THREW__ = 0;
 invoke_vi(357,($_11|0)); //@line 86 "shaders.rs"
 $23 = __THREW__; __THREW__ = 0;
 $24 = $23&1;
 if ($24) {
  $103 = ___cxa_find_matching_catch_2()|0;
  $104 = tempRet0;
  HEAP32[$personalityslot>>2] = $103;
  $105 = ((($personalityslot)) + 4|0);
  HEAP32[$105>>2] = $104;
  __ZN4core3ptr13drop_in_place17hcdb5cdbc316a5a16E($_11); //@line 86 "shaders.rs"
  $25 = HEAP32[$personalityslot>>2]|0; //@line 82 "shaders.rs"
  $26 = ((($personalityslot)) + 4|0); //@line 82 "shaders.rs"
  $27 = HEAP32[$26>>2]|0; //@line 82 "shaders.rs"
  ___resumeException($25|0);
  // unreachable;
 }
 __ZN4core3ptr13drop_in_place17hcdb5cdbc316a5a16E($_11); //@line 86 "shaders.rs"
 $28 = HEAP32[$source>>2]|0; //@line 88 "shaders.rs"
 $29 = ((($source)) + 4|0); //@line 88 "shaders.rs"
 $30 = HEAP32[$29>>2]|0; //@line 88 "shaders.rs"
 $31 = (__ZN5rustv3r3d5c_str17h24b9d36d97df309cE($28,$30)|0); //@line 88 "shaders.rs"
 HEAP32[$sources_as_c_str>>2] = $31; //@line 88 "shaders.rs"
 __ZN5rustv16android_logw_str17h20b06566c03231beE(17405,20); //@line 90 "shaders.rs"
 $32 = HEAP32[$shader>>2]|0; //@line 91 "shaders.rs"
 _glShaderSource(($32|0),1,($sources_as_c_str|0),(0|0)); //@line 91 "shaders.rs"
 __ZN5rustv16android_logw_str17h20b06566c03231beE(17425,10); //@line 92 "shaders.rs"
 $33 = HEAP32[$shader>>2]|0; //@line 93 "shaders.rs"
 _glCompileShader(($33|0)); //@line 93 "shaders.rs"
 HEAP32[$status>>2] = 0; //@line 94 "shaders.rs"
 __ZN5rustv16android_logw_str17h20b06566c03231beE(17435,13); //@line 95 "shaders.rs"
 $34 = HEAP32[$shader>>2]|0; //@line 96 "shaders.rs"
 $35 = HEAP32[765]|0; //@line 96 "shaders.rs"
 _glGetShaderiv(($34|0),($35|0),($status|0)); //@line 96 "shaders.rs"
 __ZN5rustv16android_logw_str17h20b06566c03231beE(17448,11); //@line 97 "shaders.rs"
 $_71 = $status; //@line 98 "shaders.rs"
 $36 = $_71; //@line 98 "shaders.rs"
 $__arg01 = $36; //@line 98 "shaders.rs"
 $37 = $__arg01; //@line 98 "shaders.rs"
 __ZN4core3fmt10ArgumentV13new17h18c233152faad36eE($14,$37,179); //@line 98 "shaders.rs"
 $$sreg1$field = HEAP32[$14>>2]|0; //@line 98 "shaders.rs"
 $$sreg1$index16 = ((($14)) + 4|0); //@line 98 "shaders.rs"
 $$sreg1$field17 = HEAP32[$$sreg1$index16>>2]|0; //@line 98 "shaders.rs"
 HEAP32[$_70>>2] = $$sreg1$field; //@line 98 "shaders.rs"
 $38 = ((($_70)) + 4|0); //@line 98 "shaders.rs"
 HEAP32[$38>>2] = $$sreg1$field17; //@line 98 "shaders.rs"
 $39 = HEAP32[1683]|0; //@line 98 "shaders.rs"
 __ZN4core3fmt9Arguments16new_v1_formatted17hd7921c86529aa3b1E($_63,7568,2,$_70,1,$39,1); //@line 98 "shaders.rs"
 __ZN5alloc3fmt6format17h9b28a0d324b081e9E($_62,$_63); //@line 98 "shaders.rs"
 __THREW__ = 0;
 invoke_vi(357,($_62|0)); //@line 98 "shaders.rs"
 $40 = __THREW__; __THREW__ = 0;
 $41 = $40&1;
 if ($41) {
  $106 = ___cxa_find_matching_catch_2()|0;
  $107 = tempRet0;
  HEAP32[$personalityslot>>2] = $106;
  $108 = ((($personalityslot)) + 4|0);
  HEAP32[$108>>2] = $107;
  __ZN4core3ptr13drop_in_place17hcdb5cdbc316a5a16E($_62); //@line 98 "shaders.rs"
  $25 = HEAP32[$personalityslot>>2]|0; //@line 82 "shaders.rs"
  $26 = ((($personalityslot)) + 4|0); //@line 82 "shaders.rs"
  $27 = HEAP32[$26>>2]|0; //@line 82 "shaders.rs"
  ___resumeException($25|0);
  // unreachable;
 }
 __ZN4core3ptr13drop_in_place17hcdb5cdbc316a5a16E($_62); //@line 98 "shaders.rs"
 $42 = HEAP32[$status>>2]|0; //@line 99 "shaders.rs"
 $43 = HEAP8[39192]|0; //@line 99 "shaders.rs"
 $44 = $43&255; //@line 99 "shaders.rs"
 $45 = ($42|0)==($44|0); //@line 99 "shaders.rs"
 if (!($45)) {
  $_264 = $shader; //@line 132 "shaders.rs"
  $48 = $_264; //@line 132 "shaders.rs"
  $__arg07 = $48; //@line 132 "shaders.rs"
  $49 = $__arg07; //@line 132 "shaders.rs"
  __ZN4core3fmt10ArgumentV13new17h0963b74890d3a7c4E($13,$49,180); //@line 132 "shaders.rs"
  $$sreg2$field = HEAP32[$13>>2]|0; //@line 132 "shaders.rs"
  $$sreg2$index19 = ((($13)) + 4|0); //@line 132 "shaders.rs"
  $$sreg2$field20 = HEAP32[$$sreg2$index19>>2]|0; //@line 132 "shaders.rs"
  HEAP32[$_263>>2] = $$sreg2$field; //@line 132 "shaders.rs"
  $50 = ((($_263)) + 4|0); //@line 132 "shaders.rs"
  HEAP32[$50>>2] = $$sreg2$field20; //@line 132 "shaders.rs"
  $51 = HEAP32[1683]|0; //@line 132 "shaders.rs"
  __ZN4core3fmt9Arguments16new_v1_formatted17hd7921c86529aa3b1E($_256,7704,2,$_263,1,$51,1); //@line 132 "shaders.rs"
  __ZN3std2io5stdio6_print17h5e38a8ff46cfb3e1E($_256); //@line 132 "shaders.rs"
  $_285 = $shader; //@line 133 "shaders.rs"
  $52 = $_285; //@line 133 "shaders.rs"
  $__arg08 = $52; //@line 133 "shaders.rs"
  $53 = $__arg08; //@line 133 "shaders.rs"
  __ZN4core3fmt10ArgumentV13new17h0963b74890d3a7c4E($12,$53,180); //@line 133 "shaders.rs"
  $$sreg3$field = HEAP32[$12>>2]|0; //@line 133 "shaders.rs"
  $$sreg3$index22 = ((($12)) + 4|0); //@line 133 "shaders.rs"
  $$sreg3$field23 = HEAP32[$$sreg3$index22>>2]|0; //@line 133 "shaders.rs"
  HEAP32[$_284>>2] = $$sreg3$field; //@line 133 "shaders.rs"
  $54 = ((($_284)) + 4|0); //@line 133 "shaders.rs"
  HEAP32[$54>>2] = $$sreg3$field23; //@line 133 "shaders.rs"
  $55 = HEAP32[1683]|0; //@line 133 "shaders.rs"
  __ZN4core3fmt9Arguments16new_v1_formatted17hd7921c86529aa3b1E($_277,7720,2,$_284,1,$55,1); //@line 133 "shaders.rs"
  __ZN5alloc3fmt6format17h9b28a0d324b081e9E($_276,$_277); //@line 133 "shaders.rs"
  __THREW__ = 0;
  invoke_vi(357,($_276|0)); //@line 133 "shaders.rs"
  $56 = __THREW__; __THREW__ = 0;
  $57 = $56&1;
  if (!($57)) {
   __ZN4core3ptr13drop_in_place17hcdb5cdbc316a5a16E($_276); //@line 133 "shaders.rs"
   __ZN5rustv16android_logw_str17h20b06566c03231beE(17459,19); //@line 135 "shaders.rs"
   $102 = HEAP32[$shader>>2]|0; //@line 136 "shaders.rs"
   STACKTOP = sp;return ($102|0); //@line 137 "shaders.rs"
  }
  $118 = ___cxa_find_matching_catch_2()|0;
  $119 = tempRet0;
  HEAP32[$personalityslot>>2] = $118;
  $120 = ((($personalityslot)) + 4|0);
  HEAP32[$120>>2] = $119;
  __ZN4core3ptr13drop_in_place17hcdb5cdbc316a5a16E($_276); //@line 133 "shaders.rs"
  $25 = HEAP32[$personalityslot>>2]|0; //@line 82 "shaders.rs"
  $26 = ((($personalityslot)) + 4|0); //@line 82 "shaders.rs"
  $27 = HEAP32[$26>>2]|0; //@line 82 "shaders.rs"
  ___resumeException($25|0);
  // unreachable;
 }
 __ZN4core3fmt9Arguments6new_v117h1cedc7e123bae470E($_89,7584,1,38620,0); //@line 101 "shaders.rs"
 __ZN5alloc3fmt6format17h9b28a0d324b081e9E($_88,$_89); //@line 101 "shaders.rs"
 __THREW__ = 0;
 invoke_vi(357,($_88|0)); //@line 101 "shaders.rs"
 $46 = __THREW__; __THREW__ = 0;
 $47 = $46&1;
 if ($47) {
  $109 = ___cxa_find_matching_catch_2()|0;
  $110 = tempRet0;
  HEAP32[$personalityslot>>2] = $109;
  $111 = ((($personalityslot)) + 4|0);
  HEAP32[$111>>2] = $110;
  __ZN4core3ptr13drop_in_place17hcdb5cdbc316a5a16E($_88); //@line 101 "shaders.rs"
  $25 = HEAP32[$personalityslot>>2]|0; //@line 82 "shaders.rs"
  $26 = ((($personalityslot)) + 4|0); //@line 82 "shaders.rs"
  $27 = HEAP32[$26>>2]|0; //@line 82 "shaders.rs"
  ___resumeException($25|0);
  // unreachable;
 }
 __ZN4core3ptr13drop_in_place17hcdb5cdbc316a5a16E($_88); //@line 101 "shaders.rs"
 _memset(($compile_log|0),0,512)|0; //@line 102 "shaders.rs"
 HEAP32[$log_len>>2] = 0; //@line 104 "shaders.rs"
 $58 = HEAP32[$shader>>2]|0; //@line 105 "shaders.rs"
 _glGetShaderInfoLog(($58|0),512,($log_len|0),($compile_log|0)); //@line 105 "shaders.rs"
 $_124 = $log_len; //@line 106 "shaders.rs"
 $59 = $_124; //@line 106 "shaders.rs"
 $__arg02 = $59; //@line 106 "shaders.rs"
 $60 = $__arg02; //@line 106 "shaders.rs"
 __ZN4core3fmt10ArgumentV13new17h18c233152faad36eE($11,$60,179); //@line 106 "shaders.rs"
 $$sreg4$field = HEAP32[$11>>2]|0; //@line 106 "shaders.rs"
 $$sreg4$index25 = ((($11)) + 4|0); //@line 106 "shaders.rs"
 $$sreg4$field26 = HEAP32[$$sreg4$index25>>2]|0; //@line 106 "shaders.rs"
 HEAP32[$_123>>2] = $$sreg4$field; //@line 106 "shaders.rs"
 $61 = ((($_123)) + 4|0); //@line 106 "shaders.rs"
 HEAP32[$61>>2] = $$sreg4$field26; //@line 106 "shaders.rs"
 $62 = HEAP32[1683]|0; //@line 106 "shaders.rs"
 __ZN4core3fmt9Arguments16new_v1_formatted17hd7921c86529aa3b1E($_116,7592,2,$_123,1,$62,1); //@line 106 "shaders.rs"
 __ZN5alloc3fmt6format17h9b28a0d324b081e9E($_115,$_116); //@line 106 "shaders.rs"
 __THREW__ = 0;
 invoke_vi(357,($_115|0)); //@line 106 "shaders.rs"
 $63 = __THREW__; __THREW__ = 0;
 $64 = $63&1;
 if ($64) {
  $112 = ___cxa_find_matching_catch_2()|0;
  $113 = tempRet0;
  HEAP32[$personalityslot>>2] = $112;
  $114 = ((($personalityslot)) + 4|0);
  HEAP32[$114>>2] = $113;
  __ZN4core3ptr13drop_in_place17hcdb5cdbc316a5a16E($_115); //@line 107 "shaders.rs"
  $25 = HEAP32[$personalityslot>>2]|0; //@line 82 "shaders.rs"
  $26 = ((($personalityslot)) + 4|0); //@line 82 "shaders.rs"
  $27 = HEAP32[$26>>2]|0; //@line 82 "shaders.rs"
  ___resumeException($25|0);
  // unreachable;
 }
 __ZN4core3ptr13drop_in_place17hcdb5cdbc316a5a16E($_115); //@line 107 "shaders.rs"
 HEAP32[$_142>>2] = $shader; //@line 109 "shaders.rs"
 $65 = ((($_142)) + 4|0); //@line 109 "shaders.rs"
 HEAP32[$65>>2] = $compile_log; //@line 109 "shaders.rs"
 $66 = HEAP32[$_142>>2]|0; //@line 109 "shaders.rs"
 $__arg03 = $66; //@line 109 "shaders.rs"
 $67 = ((($_142)) + 4|0); //@line 109 "shaders.rs"
 $68 = HEAP32[$67>>2]|0; //@line 109 "shaders.rs"
 $__arg1 = $68; //@line 109 "shaders.rs"
 $69 = $__arg03; //@line 109 "shaders.rs"
 __ZN4core3fmt10ArgumentV13new17h0963b74890d3a7c4E($10,$69,180); //@line 109 "shaders.rs"
 $$sreg5$field = HEAP32[$10>>2]|0; //@line 109 "shaders.rs"
 $$sreg5$index28 = ((($10)) + 4|0); //@line 109 "shaders.rs"
 $$sreg5$field29 = HEAP32[$$sreg5$index28>>2]|0; //@line 109 "shaders.rs"
 $70 = $__arg1; //@line 109 "shaders.rs"
 __ZN4core3fmt10ArgumentV13new17hf7be953a10f1c908E($9,$70,165); //@line 109 "shaders.rs"
 $$sreg6$field = HEAP32[$9>>2]|0; //@line 109 "shaders.rs"
 $$sreg6$index31 = ((($9)) + 4|0); //@line 109 "shaders.rs"
 $$sreg6$field32 = HEAP32[$$sreg6$index31>>2]|0; //@line 109 "shaders.rs"
 HEAP32[$_141>>2] = $$sreg5$field; //@line 109 "shaders.rs"
 $71 = ((($_141)) + 4|0); //@line 109 "shaders.rs"
 HEAP32[$71>>2] = $$sreg5$field29; //@line 109 "shaders.rs"
 $72 = ((($_141)) + 8|0); //@line 109 "shaders.rs"
 HEAP32[$72>>2] = $$sreg6$field; //@line 109 "shaders.rs"
 $73 = ((($72)) + 4|0); //@line 109 "shaders.rs"
 HEAP32[$73>>2] = $$sreg6$field32; //@line 109 "shaders.rs"
 $74 = HEAP32[1819]|0; //@line 109 "shaders.rs"
 __ZN4core3fmt9Arguments16new_v1_formatted17hd7921c86529aa3b1E($_134,7608,3,$_141,2,$74,2); //@line 109 "shaders.rs"
 __ZN3std2io5stdio6_print17h5e38a8ff46cfb3e1E($_134); //@line 109 "shaders.rs"
 __ZN4core3fmt9Arguments6new_v117h1cedc7e123bae470E($_160,7632,1,38620,0); //@line 113 "shaders.rs"
 __ZN3std2io5stdio6_print17h5e38a8ff46cfb3e1E($_160); //@line 113 "shaders.rs"
 HEAP32[$_177>>2] = $source; //@line 114 "shaders.rs"
 $75 = HEAP32[$_177>>2]|0; //@line 114 "shaders.rs"
 $__arg04 = $75; //@line 114 "shaders.rs"
 $76 = $__arg04; //@line 114 "shaders.rs"
 __ZN4core3fmt10ArgumentV13new17heecba43e0c9da516E($8,$76,162); //@line 114 "shaders.rs"
 $$sreg7$field = HEAP32[$8>>2]|0; //@line 114 "shaders.rs"
 $$sreg7$index34 = ((($8)) + 4|0); //@line 114 "shaders.rs"
 $$sreg7$field35 = HEAP32[$$sreg7$index34>>2]|0; //@line 114 "shaders.rs"
 HEAP32[$_176>>2] = $$sreg7$field; //@line 114 "shaders.rs"
 $77 = ((($_176)) + 4|0); //@line 114 "shaders.rs"
 HEAP32[$77>>2] = $$sreg7$field35; //@line 114 "shaders.rs"
 $78 = HEAP32[1683]|0; //@line 114 "shaders.rs"
 __ZN4core3fmt9Arguments16new_v1_formatted17hd7921c86529aa3b1E($_169,7640,2,$_176,1,$78,1); //@line 114 "shaders.rs"
 __ZN3std2io5stdio6_print17h5e38a8ff46cfb3e1E($_169); //@line 114 "shaders.rs"
 __ZN3std3ffi5c_str4CStr8from_ptr17h0aba58b99886bb0bE($7,$compile_log); //@line 115 "shaders.rs"
 $$sreg8$field = HEAP32[$7>>2]|0; //@line 115 "shaders.rs"
 $$sreg8$index37 = ((($7)) + 4|0); //@line 115 "shaders.rs"
 $$sreg8$field38 = HEAP32[$$sreg8$index37>>2]|0; //@line 115 "shaders.rs"
 HEAP32[$_197>>2] = $$sreg8$field; //@line 115 "shaders.rs"
 $_197$index40 = ((($_197)) + 4|0); //@line 115 "shaders.rs"
 HEAP32[$_197$index40>>2] = $$sreg8$field38; //@line 115 "shaders.rs"
 HEAP32[$_195>>2] = $_197; //@line 115 "shaders.rs"
 $79 = HEAP32[$_195>>2]|0; //@line 115 "shaders.rs"
 $__arg05 = $79; //@line 115 "shaders.rs"
 $80 = $__arg05; //@line 115 "shaders.rs"
 __ZN4core3fmt10ArgumentV13new17h4de5cb633051a86aE($6,$80,356); //@line 115 "shaders.rs"
 $$sreg9$field = HEAP32[$6>>2]|0; //@line 115 "shaders.rs"
 $$sreg9$index41 = ((($6)) + 4|0); //@line 115 "shaders.rs"
 $$sreg9$field42 = HEAP32[$$sreg9$index41>>2]|0; //@line 115 "shaders.rs"
 HEAP32[$_194>>2] = $$sreg9$field; //@line 115 "shaders.rs"
 $81 = ((($_194)) + 4|0); //@line 115 "shaders.rs"
 HEAP32[$81>>2] = $$sreg9$field42; //@line 115 "shaders.rs"
 $82 = HEAP32[1683]|0; //@line 115 "shaders.rs"
 __ZN4core3fmt9Arguments16new_v1_formatted17hd7921c86529aa3b1E($_187,7656,2,$_194,1,$82,1); //@line 115 "shaders.rs"
 __ZN3std2io5stdio6_print17h5e38a8ff46cfb3e1E($_187); //@line 115 "shaders.rs"
 $83 = HEAP32[$log_len>>2]|0; //@line 123 "shaders.rs"
 HEAP32[$_214>>2] = 0; //@line 123 "shaders.rs"
 $84 = ((($_214)) + 4|0); //@line 123 "shaders.rs"
 HEAP32[$84>>2] = $83; //@line 123 "shaders.rs"
 $85 = HEAP32[$_214>>2]|0; //@line 123 "shaders.rs"
 $86 = ((($_214)) + 4|0); //@line 123 "shaders.rs"
 $87 = HEAP32[$86>>2]|0; //@line 123 "shaders.rs"
 __ZN54__LT_I_u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17hdbcc8e125fee3dc0E($5,$85,$87); //@line 123 "shaders.rs"
 $$sreg10$field = HEAP32[$5>>2]|0; //@line 123 "shaders.rs"
 $$sreg10$index44 = ((($5)) + 4|0); //@line 123 "shaders.rs"
 $$sreg10$field45 = HEAP32[$$sreg10$index44>>2]|0; //@line 123 "shaders.rs"
 HEAP32[$iter>>2] = $$sreg10$field; //@line 123 "shaders.rs"
 $88 = ((($iter)) + 4|0); //@line 123 "shaders.rs"
 HEAP32[$88>>2] = $$sreg10$field45; //@line 123 "shaders.rs"
 while(1) {
  __ZN4core4iter5range93__LT_impl_u20_core__iter__iterator__Iterator_u20_for_u20_core__ops__range__Range_LT_A_GT__GT_4next17h0721cb4ba09f53cdE($_220,$iter); //@line 123 "shaders.rs"
  $89 = HEAP32[$_220>>2]|0; //@line 123 "shaders.rs"
  $switch = ($89>>>0)<(1); //@line 123 "shaders.rs"
  if ($switch) {
   break;
  }
  $96 = ((($_220)) + 4|0); //@line 123 "shaders.rs"
  $97 = HEAP32[$96>>2]|0; //@line 123 "shaders.rs"
  $val = $97; //@line 123 "shaders.rs"
  $98 = $val; //@line 123 "shaders.rs"
  $__next = $98; //@line 123 "shaders.rs"
  $99 = $__next; //@line 123 "shaders.rs"
  $i = $99; //@line 123 "shaders.rs"
 }
 HEAP32[$_244>>2] = $source; //@line 126 "shaders.rs"
 $90 = HEAP32[$_244>>2]|0; //@line 126 "shaders.rs"
 $__arg06 = $90; //@line 126 "shaders.rs"
 $91 = $__arg06; //@line 126 "shaders.rs"
 __ZN4core3fmt10ArgumentV13new17heecba43e0c9da516E($4,$91,162); //@line 126 "shaders.rs"
 $$sreg11$field = HEAP32[$4>>2]|0; //@line 126 "shaders.rs"
 $$sreg11$index47 = ((($4)) + 4|0); //@line 126 "shaders.rs"
 $$sreg11$field48 = HEAP32[$$sreg11$index47>>2]|0; //@line 126 "shaders.rs"
 HEAP32[$_243>>2] = $$sreg11$field; //@line 126 "shaders.rs"
 $92 = ((($_243)) + 4|0); //@line 126 "shaders.rs"
 HEAP32[$92>>2] = $$sreg11$field48; //@line 126 "shaders.rs"
 $93 = HEAP32[1683]|0; //@line 126 "shaders.rs"
 __ZN4core3fmt9Arguments16new_v1_formatted17hd7921c86529aa3b1E($_236,7672,2,$_243,1,$93,1); //@line 126 "shaders.rs"
 __ZN5alloc3fmt6format17h9b28a0d324b081e9E($_235,$_236); //@line 126 "shaders.rs"
 __THREW__ = 0;
 invoke_vii(343,($3|0),($_235|0)); //@line 126 "shaders.rs"
 $$sreg12$field = HEAP32[$3>>2]|0; //@line 126 "shaders.rs"
 $$sreg12$index50 = ((($3)) + 4|0); //@line 126 "shaders.rs"
 $$sreg12$field51 = HEAP32[$$sreg12$index50>>2]|0; //@line 126 "shaders.rs"
 $94 = __THREW__; __THREW__ = 0;
 $95 = $94&1;
 if (!($95)) {
  __THREW__ = 0;
  invoke_vii(358,($$sreg12$field|0),($$sreg12$field51|0)); //@line 126 "shaders.rs"
  $100 = __THREW__; __THREW__ = 0;
  $101 = $100&1;
  if (!($101)) {
   __ZN4core3ptr13drop_in_place17hcdb5cdbc316a5a16E($_235); //@line 126 "shaders.rs"
   __ZN3std9panicking11begin_panic17h1a4c9be19e7ea39bE(17240,14,7688); //@line 127 "shaders.rs"
   // unreachable; //@line 127 "shaders.rs"
  }
 }
 $115 = ___cxa_find_matching_catch_2()|0;
 $116 = tempRet0;
 HEAP32[$personalityslot>>2] = $115;
 $117 = ((($personalityslot)) + 4|0);
 HEAP32[$117>>2] = $116;
 __ZN4core3ptr13drop_in_place17hcdb5cdbc316a5a16E($_235); //@line 126 "shaders.rs"
 $25 = HEAP32[$personalityslot>>2]|0; //@line 82 "shaders.rs"
 $26 = ((($personalityslot)) + 4|0); //@line 82 "shaders.rs"
 $27 = HEAP32[$26>>2]|0; //@line 82 "shaders.rs"
 ___resumeException($25|0);
 // unreachable;
 return (0)|0;
}
function __ZN5alloc5slice29__LT_impl_u20__u5b_T_u5d__GT_4iter17hf98f6bd542dbf791E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $self = sp + 8|0;
 HEAP32[$self>>2] = $0;
 $3 = ((($self)) + 4|0);
 HEAP32[$3>>2] = $1;
 $4 = HEAP32[$self>>2]|0; //@line 557 "/checkout/src/liballoc/slice.rs"
 $5 = ((($self)) + 4|0); //@line 557 "/checkout/src/liballoc/slice.rs"
 $6 = HEAP32[$5>>2]|0; //@line 557 "/checkout/src/liballoc/slice.rs"
 __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_4iter17h0fb63e2bbec255cdE($2,$4,$6); //@line 557 "/checkout/src/liballoc/slice.rs"
 $$sreg$field = HEAP32[$2>>2]|0; //@line 557 "/checkout/src/liballoc/slice.rs"
 $$sreg$index1 = ((($2)) + 4|0); //@line 557 "/checkout/src/liballoc/slice.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 557 "/checkout/src/liballoc/slice.rs"
 HEAP32[$retVal>>2] = $$sreg$field; //@line 558 "/checkout/src/liballoc/slice.rs"
 $retVal$index4 = ((($retVal)) + 4|0); //@line 558 "/checkout/src/liballoc/slice.rs"
 HEAP32[$retVal$index4>>2] = $$sreg$field2; //@line 558 "/checkout/src/liballoc/slice.rs"
 STACKTOP = sp;return; //@line 558 "/checkout/src/liballoc/slice.rs"
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_4iter17h0fb63e2bbec255cdE($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_13 = 0, $p = 0, $p1 = 0, $ptr = 0, $retVal$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_0 = sp + 8|0;
 $self = sp;
 HEAP32[$self>>2] = $0;
 $2 = ((($self)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = (__ZN4core3mem7size_of17h85a290d02afca270E()|0); //@line 281 "/checkout/src/libcore/slice/mod.rs"
 $4 = ($3|0)==(0); //@line 281 "/checkout/src/libcore/slice/mod.rs"
 if ($4) {
  $p = (1); //@line 282 "/checkout/src/libcore/slice/mod.rs"
 } else {
  $5 = HEAP32[$self>>2]|0; //@line 284 "/checkout/src/libcore/slice/mod.rs"
  $6 = ((($self)) + 4|0); //@line 284 "/checkout/src/libcore/slice/mod.rs"
  $7 = HEAP32[$6>>2]|0; //@line 284 "/checkout/src/libcore/slice/mod.rs"
  $8 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_6as_ptr17h97b4adfca9c46ca5E($5,$7)|0); //@line 284 "/checkout/src/libcore/slice/mod.rs"
  $p1 = $8; //@line 284 "/checkout/src/libcore/slice/mod.rs"
  $9 = $p1; //@line 285 "/checkout/src/libcore/slice/mod.rs"
  (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h4515c270d1160b64E($9)|0); //@line 285 "/checkout/src/libcore/slice/mod.rs"
  $10 = $p1; //@line 286 "/checkout/src/libcore/slice/mod.rs"
  $p = $10; //@line 286 "/checkout/src/libcore/slice/mod.rs"
 }
 $11 = $p; //@line 290 "/checkout/src/libcore/slice/mod.rs"
 $12 = $p; //@line 291 "/checkout/src/libcore/slice/mod.rs"
 $ptr = $12; //@line 291 "/checkout/src/libcore/slice/mod.rs"
 $13 = $ptr; //@line 233 "/checkout/src/libcore/slice/mod.rs"
 $14 = (__ZN4core5slice13size_from_ptr17h6b66fad834101656E($13)|0); //@line 233 "/checkout/src/libcore/slice/mod.rs"
 $15 = ($14|0)==(0); //@line 233 "/checkout/src/libcore/slice/mod.rs"
 $16 = $ptr;
 if ($15) {
  $17 = HEAP32[$self>>2]|0; //@line 291 "/checkout/src/libcore/slice/mod.rs"
  $18 = ((($self)) + 4|0); //@line 291 "/checkout/src/libcore/slice/mod.rs"
  $19 = HEAP32[$18>>2]|0; //@line 291 "/checkout/src/libcore/slice/mod.rs"
  $20 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17h910b2016d1ad6f7fE($17,$19)|0); //@line 291 "/checkout/src/libcore/slice/mod.rs"
  $21 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_15wrapping_offset17ha6d8b6c64249cfb7E($16,$20)|0); //@line 234 "/checkout/src/libcore/slice/mod.rs"
  $_13 = $21; //@line 234 "/checkout/src/libcore/slice/mod.rs"
 } else {
  $22 = HEAP32[$self>>2]|0; //@line 291 "/checkout/src/libcore/slice/mod.rs"
  $23 = ((($self)) + 4|0); //@line 291 "/checkout/src/libcore/slice/mod.rs"
  $24 = HEAP32[$23>>2]|0; //@line 291 "/checkout/src/libcore/slice/mod.rs"
  $25 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17h910b2016d1ad6f7fE($22,$24)|0); //@line 291 "/checkout/src/libcore/slice/mod.rs"
  $26 = (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_6offset17hd3d4f6defcfc53c2E($16,$25)|0); //@line 236 "/checkout/src/libcore/slice/mod.rs"
  $_13 = $26; //@line 236 "/checkout/src/libcore/slice/mod.rs"
 }
 HEAP32[$_0>>2] = $11; //@line 289 "/checkout/src/libcore/slice/mod.rs"
 $27 = $_13; //@line 289 "/checkout/src/libcore/slice/mod.rs"
 $28 = ((($_0)) + 4|0); //@line 289 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$28>>2] = $27; //@line 289 "/checkout/src/libcore/slice/mod.rs"
 $29 = HEAP32[$_0>>2]|0; //@line 295 "/checkout/src/libcore/slice/mod.rs"
 $30 = ((($_0)) + 4|0); //@line 295 "/checkout/src/libcore/slice/mod.rs"
 $31 = HEAP32[$30>>2]|0; //@line 295 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$retVal>>2] = $29; //@line 295 "/checkout/src/libcore/slice/mod.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 295 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$retVal$index1>>2] = $31; //@line 295 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return; //@line 295 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_6as_ptr17h97b4adfca9c46ca5E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp;
 HEAP32[$self>>2] = $0;
 $2 = ((($self)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$self>>2]|0; //@line 388 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return ($3|0); //@line 389 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17h910b2016d1ad6f7fE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $self = 0, $transmute_temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $transmute_temp = sp + 8|0;
 $self = sp;
 HEAP32[$self>>2] = $0;
 $2 = ((($self)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$self>>2]|0; //@line 418 "/checkout/src/libcore/slice/mod.rs"
 $4 = ((($self)) + 4|0); //@line 418 "/checkout/src/libcore/slice/mod.rs"
 $5 = HEAP32[$4>>2]|0; //@line 418 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$transmute_temp>>2] = $3; //@line 418 "/checkout/src/libcore/slice/mod.rs"
 $6 = ((($transmute_temp)) + 4|0); //@line 418 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$6>>2] = $5; //@line 418 "/checkout/src/libcore/slice/mod.rs"
 $7 = ((($transmute_temp)) + 4|0); //@line 418 "/checkout/src/libcore/slice/mod.rs"
 $8 = HEAP32[$7>>2]|0; //@line 418 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return ($8|0); //@line 420 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN68__LT_rustv__shaders__VertexAttrIndex_u20_as_u20_core__fmt__Debug_GT_3fmt17h0e6deaa7c8d33abaE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_3 = 0, $__arg_0 = 0, $builder = 0, $builder1 = 0;
 var $builder2 = 0, $builder3 = 0, $builder4 = 0, $builder5 = 0, $builder6 = 0, $builder7 = 0, $builder8 = 0, $builder9 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $builder9 = sp + 120|0;
 $builder8 = sp + 108|0;
 $builder7 = sp + 96|0;
 $builder6 = sp + 84|0;
 $builder5 = sp + 72|0;
 $builder4 = sp + 60|0;
 $builder3 = sp + 48|0;
 $builder2 = sp + 36|0;
 $builder1 = sp + 24|0;
 $builder = sp + 12|0;
 $self = $0;
 $__arg_0 = $1;
 $2 = $self; //@line 49 "shaders.rs"
 $_3 = $2; //@line 49 "shaders.rs"
 $3 = $_3; //@line 49 "shaders.rs"
 $4 = HEAP32[$3>>2]|0; //@line 49 "shaders.rs"
 do {
  switch ($4|0) {
  case 0:  {
   $5 = $__arg_0; //@line 49 "shaders.rs"
   __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder,$5,20470,7); //@line 49 "shaders.rs"
   $6 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder)|0); //@line 49 "shaders.rs"
   $7 = $6&1; //@line 49 "shaders.rs"
   $_0 = $7; //@line 49 "shaders.rs"
   break;
  }
  case 1:  {
   $8 = $__arg_0; //@line 49 "shaders.rs"
   __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder1,$8,20477,9); //@line 49 "shaders.rs"
   $9 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder1)|0); //@line 49 "shaders.rs"
   $10 = $9&1; //@line 49 "shaders.rs"
   $_0 = $10; //@line 49 "shaders.rs"
   break;
  }
  case 2:  {
   $11 = $__arg_0; //@line 49 "shaders.rs"
   __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder2,$11,20486,8); //@line 49 "shaders.rs"
   $12 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder2)|0); //@line 49 "shaders.rs"
   $13 = $12&1; //@line 49 "shaders.rs"
   $_0 = $13; //@line 49 "shaders.rs"
   break;
  }
  case 3:  {
   $14 = $__arg_0; //@line 49 "shaders.rs"
   __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder3,$14,20494,8); //@line 49 "shaders.rs"
   $15 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder3)|0); //@line 49 "shaders.rs"
   $16 = $15&1; //@line 49 "shaders.rs"
   $_0 = $16; //@line 49 "shaders.rs"
   break;
  }
  case 4:  {
   $17 = $__arg_0; //@line 49 "shaders.rs"
   __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder4,$17,20502,8); //@line 49 "shaders.rs"
   $18 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder4)|0); //@line 49 "shaders.rs"
   $19 = $18&1; //@line 49 "shaders.rs"
   $_0 = $19; //@line 49 "shaders.rs"
   break;
  }
  case 5:  {
   $20 = $__arg_0; //@line 49 "shaders.rs"
   __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder5,$20,20510,10); //@line 49 "shaders.rs"
   $21 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder5)|0); //@line 49 "shaders.rs"
   $22 = $21&1; //@line 49 "shaders.rs"
   $_0 = $22; //@line 49 "shaders.rs"
   break;
  }
  case 6:  {
   $23 = $__arg_0; //@line 49 "shaders.rs"
   __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder6,$23,20520,11); //@line 49 "shaders.rs"
   $24 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder6)|0); //@line 49 "shaders.rs"
   $25 = $24&1; //@line 49 "shaders.rs"
   $_0 = $25; //@line 49 "shaders.rs"
   break;
  }
  case 7:  {
   $26 = $__arg_0; //@line 49 "shaders.rs"
   __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder7,$26,20531,11); //@line 49 "shaders.rs"
   $27 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder7)|0); //@line 49 "shaders.rs"
   $28 = $27&1; //@line 49 "shaders.rs"
   $_0 = $28; //@line 49 "shaders.rs"
   break;
  }
  case 8:  {
   $29 = $__arg_0; //@line 49 "shaders.rs"
   __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder8,$29,20542,12); //@line 49 "shaders.rs"
   $30 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder8)|0); //@line 49 "shaders.rs"
   $31 = $30&1; //@line 49 "shaders.rs"
   $_0 = $31; //@line 49 "shaders.rs"
   break;
  }
  case 9:  {
   $32 = $__arg_0; //@line 49 "shaders.rs"
   __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder9,$32,20554,9); //@line 49 "shaders.rs"
   $33 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder9)|0); //@line 49 "shaders.rs"
   $34 = $33&1; //@line 49 "shaders.rs"
   $_0 = $34; //@line 49 "shaders.rs"
   break;
  }
  default: {
   // unreachable; //@line 49 "shaders.rs"
  }
  }
 } while(0);
 $35 = $_0; //@line 49 "shaders.rs"
 $36 = $35&1; //@line 49 "shaders.rs"
 STACKTOP = sp;return ($36|0); //@line 49 "shaders.rs"
}
function __ZN38__LT_core__option__Option_LT_T_GT__GT_3map17h3a04c52c361fc5bdE($0,$self) {
 $0 = $0|0;
 $self = $self|0;
 var $$sreg$field = 0, $$sreg$field3 = 0, $$sreg$index2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_7 = 0, $_8 = 0, $_9 = 0, $cond = 0, $cond1 = 0, $personalityslot = 0, $switch = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $1 = sp; //@line 1 "/checkout/src/libcore/option.rs"
 $personalityslot = sp + 48|0; //@line 1 "/checkout/src/libcore/option.rs"
 $_8 = sp + 32|0; //@line 1 "/checkout/src/libcore/option.rs"
 $_7 = sp + 20|0; //@line 1 "/checkout/src/libcore/option.rs"
 $x = sp + 8|0; //@line 1 "/checkout/src/libcore/option.rs"
 $_9 = 0; //@line 404 "/checkout/src/libcore/option.rs"
 $_10 = 0; //@line 404 "/checkout/src/libcore/option.rs"
 $_9 = 1; //@line 404 "/checkout/src/libcore/option.rs"
 $_10 = 1; //@line 404 "/checkout/src/libcore/option.rs"
 $2 = HEAP32[$self>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
 $switch = ($2>>>0)<(1); //@line 404 "/checkout/src/libcore/option.rs"
 do {
  if ($switch) {
   HEAP32[$0>>2] = 0; //@line 405 "/checkout/src/libcore/option.rs"
  } else {
   $_9 = 0; //@line 404 "/checkout/src/libcore/option.rs"
   $6 = ((($self)) + 4|0); //@line 404 "/checkout/src/libcore/option.rs"
   ;HEAP32[$x>>2]=HEAP32[$6>>2]|0;HEAP32[$x+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$x+8>>2]=HEAP32[$6+8>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
   $_10 = 0; //@line 404 "/checkout/src/libcore/option.rs"
   ;HEAP32[$_8>>2]=HEAP32[$x>>2]|0;HEAP32[$_8+4>>2]=HEAP32[$x+4>>2]|0;HEAP32[$_8+8>>2]=HEAP32[$x+8>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
   ;HEAP32[$_7>>2]=HEAP32[$_8>>2]|0;HEAP32[$_7+4>>2]=HEAP32[$_8+4>>2]|0;HEAP32[$_7+8>>2]=HEAP32[$_8+8>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
   __THREW__ = 0;
   invoke_vii(359,($1|0),($_7|0)); //@line 404 "/checkout/src/libcore/option.rs"
   $$sreg$field = HEAP32[$1>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
   $$sreg$index2 = ((($1)) + 4|0); //@line 404 "/checkout/src/libcore/option.rs"
   $$sreg$field3 = HEAP32[$$sreg$index2>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if (!($8)) {
    HEAP32[$0>>2] = 1; //@line 404 "/checkout/src/libcore/option.rs"
    $9 = ((($0)) + 4|0); //@line 404 "/checkout/src/libcore/option.rs"
    HEAP32[$9>>2] = $$sreg$field; //@line 404 "/checkout/src/libcore/option.rs"
    $10 = ((($9)) + 4|0); //@line 404 "/checkout/src/libcore/option.rs"
    HEAP32[$10>>2] = $$sreg$field3; //@line 404 "/checkout/src/libcore/option.rs"
    break;
   }
   $18 = ___cxa_find_matching_catch_2()|0;
   $19 = tempRet0;
   HEAP32[$personalityslot>>2] = $18;
   $20 = ((($personalityslot)) + 4|0);
   HEAP32[$20>>2] = $19;
   $21 = HEAP32[$self>>2]|0; //@line 407 "/checkout/src/libcore/option.rs"
   $cond1 = ($21|0)==(1); //@line 407 "/checkout/src/libcore/option.rs"
   if (!($cond1)) {
    $3 = HEAP32[$personalityslot>>2]|0; //@line 402 "/checkout/src/libcore/option.rs"
    $4 = ((($personalityslot)) + 4|0); //@line 402 "/checkout/src/libcore/option.rs"
    $5 = HEAP32[$4>>2]|0; //@line 402 "/checkout/src/libcore/option.rs"
    ___resumeException($3|0);
    // unreachable;
   }
   $14 = $_9; //@line 407 "/checkout/src/libcore/option.rs"
   $15 = $14&1; //@line 407 "/checkout/src/libcore/option.rs"
   if (!($15)) {
    $3 = HEAP32[$personalityslot>>2]|0; //@line 402 "/checkout/src/libcore/option.rs"
    $4 = ((($personalityslot)) + 4|0); //@line 402 "/checkout/src/libcore/option.rs"
    $5 = HEAP32[$4>>2]|0; //@line 402 "/checkout/src/libcore/option.rs"
    ___resumeException($3|0);
    // unreachable;
   }
   $_9 = 0; //@line 407 "/checkout/src/libcore/option.rs"
   $3 = HEAP32[$personalityslot>>2]|0; //@line 402 "/checkout/src/libcore/option.rs"
   $4 = ((($personalityslot)) + 4|0); //@line 402 "/checkout/src/libcore/option.rs"
   $5 = HEAP32[$4>>2]|0; //@line 402 "/checkout/src/libcore/option.rs"
   ___resumeException($3|0);
   // unreachable;
  }
 } while(0);
 $11 = $_10; //@line 407 "/checkout/src/libcore/option.rs"
 $12 = $11&1; //@line 407 "/checkout/src/libcore/option.rs"
 if ($12) {
  $_10 = 0; //@line 407 "/checkout/src/libcore/option.rs"
 }
 $13 = HEAP32[$self>>2]|0; //@line 407 "/checkout/src/libcore/option.rs"
 $cond = ($13|0)==(1); //@line 407 "/checkout/src/libcore/option.rs"
 if (!($cond)) {
  STACKTOP = sp;return; //@line 407 "/checkout/src/libcore/option.rs"
 }
 $16 = $_9; //@line 407 "/checkout/src/libcore/option.rs"
 $17 = $16&1; //@line 407 "/checkout/src/libcore/option.rs"
 if (!($17)) {
  STACKTOP = sp;return; //@line 407 "/checkout/src/libcore/option.rs"
 }
 $_9 = 0; //@line 407 "/checkout/src/libcore/option.rs"
 STACKTOP = sp;return; //@line 407 "/checkout/src/libcore/option.rs"
}
function __ZN38__LT_core__option__Option_LT_T_GT__GT_3map17hc31566c163133cf1E($0,$self) {
 $0 = $0|0;
 $self = $self|0;
 var $$sreg$field = 0, $$sreg$field3 = 0, $$sreg$index2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_7 = 0, $_8 = 0, $_9 = 0, $cond = 0, $cond1 = 0, $personalityslot = 0, $switch = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $1 = sp; //@line 1 "/checkout/src/libcore/option.rs"
 $personalityslot = sp + 48|0; //@line 1 "/checkout/src/libcore/option.rs"
 $_8 = sp + 32|0; //@line 1 "/checkout/src/libcore/option.rs"
 $_7 = sp + 20|0; //@line 1 "/checkout/src/libcore/option.rs"
 $x = sp + 8|0; //@line 1 "/checkout/src/libcore/option.rs"
 $_9 = 0; //@line 404 "/checkout/src/libcore/option.rs"
 $_10 = 0; //@line 404 "/checkout/src/libcore/option.rs"
 $_9 = 1; //@line 404 "/checkout/src/libcore/option.rs"
 $_10 = 1; //@line 404 "/checkout/src/libcore/option.rs"
 $2 = HEAP32[$self>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
 $switch = ($2>>>0)<(1); //@line 404 "/checkout/src/libcore/option.rs"
 do {
  if ($switch) {
   HEAP32[$0>>2] = 0; //@line 405 "/checkout/src/libcore/option.rs"
  } else {
   $_9 = 0; //@line 404 "/checkout/src/libcore/option.rs"
   $6 = ((($self)) + 4|0); //@line 404 "/checkout/src/libcore/option.rs"
   ;HEAP32[$x>>2]=HEAP32[$6>>2]|0;HEAP32[$x+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$x+8>>2]=HEAP32[$6+8>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
   $_10 = 0; //@line 404 "/checkout/src/libcore/option.rs"
   ;HEAP32[$_8>>2]=HEAP32[$x>>2]|0;HEAP32[$_8+4>>2]=HEAP32[$x+4>>2]|0;HEAP32[$_8+8>>2]=HEAP32[$x+8>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
   ;HEAP32[$_7>>2]=HEAP32[$_8>>2]|0;HEAP32[$_7+4>>2]=HEAP32[$_8+4>>2]|0;HEAP32[$_7+8>>2]=HEAP32[$_8+8>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
   __THREW__ = 0;
   invoke_vii(360,($1|0),($_7|0)); //@line 404 "/checkout/src/libcore/option.rs"
   $$sreg$field = HEAP32[$1>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
   $$sreg$index2 = ((($1)) + 4|0); //@line 404 "/checkout/src/libcore/option.rs"
   $$sreg$field3 = HEAP32[$$sreg$index2>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if (!($8)) {
    HEAP32[$0>>2] = 1; //@line 404 "/checkout/src/libcore/option.rs"
    $9 = ((($0)) + 4|0); //@line 404 "/checkout/src/libcore/option.rs"
    HEAP32[$9>>2] = $$sreg$field; //@line 404 "/checkout/src/libcore/option.rs"
    $10 = ((($9)) + 4|0); //@line 404 "/checkout/src/libcore/option.rs"
    HEAP32[$10>>2] = $$sreg$field3; //@line 404 "/checkout/src/libcore/option.rs"
    break;
   }
   $18 = ___cxa_find_matching_catch_2()|0;
   $19 = tempRet0;
   HEAP32[$personalityslot>>2] = $18;
   $20 = ((($personalityslot)) + 4|0);
   HEAP32[$20>>2] = $19;
   $21 = HEAP32[$self>>2]|0; //@line 407 "/checkout/src/libcore/option.rs"
   $cond1 = ($21|0)==(1); //@line 407 "/checkout/src/libcore/option.rs"
   if (!($cond1)) {
    $3 = HEAP32[$personalityslot>>2]|0; //@line 402 "/checkout/src/libcore/option.rs"
    $4 = ((($personalityslot)) + 4|0); //@line 402 "/checkout/src/libcore/option.rs"
    $5 = HEAP32[$4>>2]|0; //@line 402 "/checkout/src/libcore/option.rs"
    ___resumeException($3|0);
    // unreachable;
   }
   $14 = $_9; //@line 407 "/checkout/src/libcore/option.rs"
   $15 = $14&1; //@line 407 "/checkout/src/libcore/option.rs"
   if (!($15)) {
    $3 = HEAP32[$personalityslot>>2]|0; //@line 402 "/checkout/src/libcore/option.rs"
    $4 = ((($personalityslot)) + 4|0); //@line 402 "/checkout/src/libcore/option.rs"
    $5 = HEAP32[$4>>2]|0; //@line 402 "/checkout/src/libcore/option.rs"
    ___resumeException($3|0);
    // unreachable;
   }
   $_9 = 0; //@line 407 "/checkout/src/libcore/option.rs"
   $3 = HEAP32[$personalityslot>>2]|0; //@line 402 "/checkout/src/libcore/option.rs"
   $4 = ((($personalityslot)) + 4|0); //@line 402 "/checkout/src/libcore/option.rs"
   $5 = HEAP32[$4>>2]|0; //@line 402 "/checkout/src/libcore/option.rs"
   ___resumeException($3|0);
   // unreachable;
  }
 } while(0);
 $11 = $_10; //@line 407 "/checkout/src/libcore/option.rs"
 $12 = $11&1; //@line 407 "/checkout/src/libcore/option.rs"
 if ($12) {
  $_10 = 0; //@line 407 "/checkout/src/libcore/option.rs"
 }
 $13 = HEAP32[$self>>2]|0; //@line 407 "/checkout/src/libcore/option.rs"
 $cond = ($13|0)==(1); //@line 407 "/checkout/src/libcore/option.rs"
 if (!($cond)) {
  STACKTOP = sp;return; //@line 407 "/checkout/src/libcore/option.rs"
 }
 $16 = $_9; //@line 407 "/checkout/src/libcore/option.rs"
 $17 = $16&1; //@line 407 "/checkout/src/libcore/option.rs"
 if (!($17)) {
  STACKTOP = sp;return; //@line 407 "/checkout/src/libcore/option.rs"
 }
 $_9 = 0; //@line 407 "/checkout/src/libcore/option.rs"
 STACKTOP = sp;return; //@line 407 "/checkout/src/libcore/option.rs"
}
function __ZN38__LT_core__option__Option_LT_T_GT__GT_3map17hc6c6d0594a7d19ceE($0,$self) {
 $0 = $0|0;
 $self = $self|0;
 var $$sreg$field = 0, $$sreg$field3 = 0, $$sreg$index2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_7 = 0, $_8 = 0, $_9 = 0, $cond = 0, $cond1 = 0, $personalityslot = 0, $switch = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $1 = sp; //@line 1 "/checkout/src/libcore/option.rs"
 $personalityslot = sp + 48|0; //@line 1 "/checkout/src/libcore/option.rs"
 $_8 = sp + 32|0; //@line 1 "/checkout/src/libcore/option.rs"
 $_7 = sp + 20|0; //@line 1 "/checkout/src/libcore/option.rs"
 $x = sp + 8|0; //@line 1 "/checkout/src/libcore/option.rs"
 $_9 = 0; //@line 404 "/checkout/src/libcore/option.rs"
 $_10 = 0; //@line 404 "/checkout/src/libcore/option.rs"
 $_9 = 1; //@line 404 "/checkout/src/libcore/option.rs"
 $_10 = 1; //@line 404 "/checkout/src/libcore/option.rs"
 $2 = HEAP32[$self>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
 $switch = ($2>>>0)<(1); //@line 404 "/checkout/src/libcore/option.rs"
 do {
  if ($switch) {
   HEAP32[$0>>2] = 0; //@line 405 "/checkout/src/libcore/option.rs"
  } else {
   $_9 = 0; //@line 404 "/checkout/src/libcore/option.rs"
   $6 = ((($self)) + 4|0); //@line 404 "/checkout/src/libcore/option.rs"
   ;HEAP32[$x>>2]=HEAP32[$6>>2]|0;HEAP32[$x+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$x+8>>2]=HEAP32[$6+8>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
   $_10 = 0; //@line 404 "/checkout/src/libcore/option.rs"
   ;HEAP32[$_8>>2]=HEAP32[$x>>2]|0;HEAP32[$_8+4>>2]=HEAP32[$x+4>>2]|0;HEAP32[$_8+8>>2]=HEAP32[$x+8>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
   ;HEAP32[$_7>>2]=HEAP32[$_8>>2]|0;HEAP32[$_7+4>>2]=HEAP32[$_8+4>>2]|0;HEAP32[$_7+8>>2]=HEAP32[$_8+8>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
   __THREW__ = 0;
   invoke_vii(361,($1|0),($_7|0)); //@line 404 "/checkout/src/libcore/option.rs"
   $$sreg$field = HEAP32[$1>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
   $$sreg$index2 = ((($1)) + 4|0); //@line 404 "/checkout/src/libcore/option.rs"
   $$sreg$field3 = HEAP32[$$sreg$index2>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if (!($8)) {
    HEAP32[$0>>2] = 1; //@line 404 "/checkout/src/libcore/option.rs"
    $9 = ((($0)) + 4|0); //@line 404 "/checkout/src/libcore/option.rs"
    HEAP32[$9>>2] = $$sreg$field; //@line 404 "/checkout/src/libcore/option.rs"
    $10 = ((($9)) + 4|0); //@line 404 "/checkout/src/libcore/option.rs"
    HEAP32[$10>>2] = $$sreg$field3; //@line 404 "/checkout/src/libcore/option.rs"
    break;
   }
   $18 = ___cxa_find_matching_catch_2()|0;
   $19 = tempRet0;
   HEAP32[$personalityslot>>2] = $18;
   $20 = ((($personalityslot)) + 4|0);
   HEAP32[$20>>2] = $19;
   $21 = HEAP32[$self>>2]|0; //@line 407 "/checkout/src/libcore/option.rs"
   $cond1 = ($21|0)==(1); //@line 407 "/checkout/src/libcore/option.rs"
   if (!($cond1)) {
    $3 = HEAP32[$personalityslot>>2]|0; //@line 402 "/checkout/src/libcore/option.rs"
    $4 = ((($personalityslot)) + 4|0); //@line 402 "/checkout/src/libcore/option.rs"
    $5 = HEAP32[$4>>2]|0; //@line 402 "/checkout/src/libcore/option.rs"
    ___resumeException($3|0);
    // unreachable;
   }
   $14 = $_9; //@line 407 "/checkout/src/libcore/option.rs"
   $15 = $14&1; //@line 407 "/checkout/src/libcore/option.rs"
   if (!($15)) {
    $3 = HEAP32[$personalityslot>>2]|0; //@line 402 "/checkout/src/libcore/option.rs"
    $4 = ((($personalityslot)) + 4|0); //@line 402 "/checkout/src/libcore/option.rs"
    $5 = HEAP32[$4>>2]|0; //@line 402 "/checkout/src/libcore/option.rs"
    ___resumeException($3|0);
    // unreachable;
   }
   $_9 = 0; //@line 407 "/checkout/src/libcore/option.rs"
   $3 = HEAP32[$personalityslot>>2]|0; //@line 402 "/checkout/src/libcore/option.rs"
   $4 = ((($personalityslot)) + 4|0); //@line 402 "/checkout/src/libcore/option.rs"
   $5 = HEAP32[$4>>2]|0; //@line 402 "/checkout/src/libcore/option.rs"
   ___resumeException($3|0);
   // unreachable;
  }
 } while(0);
 $11 = $_10; //@line 407 "/checkout/src/libcore/option.rs"
 $12 = $11&1; //@line 407 "/checkout/src/libcore/option.rs"
 if ($12) {
  $_10 = 0; //@line 407 "/checkout/src/libcore/option.rs"
 }
 $13 = HEAP32[$self>>2]|0; //@line 407 "/checkout/src/libcore/option.rs"
 $cond = ($13|0)==(1); //@line 407 "/checkout/src/libcore/option.rs"
 if (!($cond)) {
  STACKTOP = sp;return; //@line 407 "/checkout/src/libcore/option.rs"
 }
 $16 = $_9; //@line 407 "/checkout/src/libcore/option.rs"
 $17 = $16&1; //@line 407 "/checkout/src/libcore/option.rs"
 if (!($17)) {
  STACKTOP = sp;return; //@line 407 "/checkout/src/libcore/option.rs"
 }
 $_9 = 0; //@line 407 "/checkout/src/libcore/option.rs"
 STACKTOP = sp;return; //@line 407 "/checkout/src/libcore/option.rs"
}
function __ZN38__LT_core__option__Option_LT_T_GT__GT_3map17hfa191bd37428f645E($0,$self) {
 $0 = $0|0;
 $self = $self|0;
 var $$sreg$field = 0, $$sreg$field3 = 0, $$sreg$index2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_7 = 0, $_8 = 0, $_9 = 0, $cond = 0, $cond1 = 0, $personalityslot = 0, $switch = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $1 = sp; //@line 1 "/checkout/src/libcore/option.rs"
 $personalityslot = sp + 48|0; //@line 1 "/checkout/src/libcore/option.rs"
 $_8 = sp + 32|0; //@line 1 "/checkout/src/libcore/option.rs"
 $_7 = sp + 20|0; //@line 1 "/checkout/src/libcore/option.rs"
 $x = sp + 8|0; //@line 1 "/checkout/src/libcore/option.rs"
 $_9 = 0; //@line 404 "/checkout/src/libcore/option.rs"
 $_10 = 0; //@line 404 "/checkout/src/libcore/option.rs"
 $_9 = 1; //@line 404 "/checkout/src/libcore/option.rs"
 $_10 = 1; //@line 404 "/checkout/src/libcore/option.rs"
 $2 = HEAP32[$self>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
 $switch = ($2>>>0)<(1); //@line 404 "/checkout/src/libcore/option.rs"
 do {
  if ($switch) {
   HEAP32[$0>>2] = 0; //@line 405 "/checkout/src/libcore/option.rs"
  } else {
   $_9 = 0; //@line 404 "/checkout/src/libcore/option.rs"
   $6 = ((($self)) + 4|0); //@line 404 "/checkout/src/libcore/option.rs"
   ;HEAP32[$x>>2]=HEAP32[$6>>2]|0;HEAP32[$x+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$x+8>>2]=HEAP32[$6+8>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
   $_10 = 0; //@line 404 "/checkout/src/libcore/option.rs"
   ;HEAP32[$_8>>2]=HEAP32[$x>>2]|0;HEAP32[$_8+4>>2]=HEAP32[$x+4>>2]|0;HEAP32[$_8+8>>2]=HEAP32[$x+8>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
   ;HEAP32[$_7>>2]=HEAP32[$_8>>2]|0;HEAP32[$_7+4>>2]=HEAP32[$_8+4>>2]|0;HEAP32[$_7+8>>2]=HEAP32[$_8+8>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
   __THREW__ = 0;
   invoke_vii(362,($1|0),($_7|0)); //@line 404 "/checkout/src/libcore/option.rs"
   $$sreg$field = HEAP32[$1>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
   $$sreg$index2 = ((($1)) + 4|0); //@line 404 "/checkout/src/libcore/option.rs"
   $$sreg$field3 = HEAP32[$$sreg$index2>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if (!($8)) {
    HEAP32[$0>>2] = 1; //@line 404 "/checkout/src/libcore/option.rs"
    $9 = ((($0)) + 4|0); //@line 404 "/checkout/src/libcore/option.rs"
    HEAP32[$9>>2] = $$sreg$field; //@line 404 "/checkout/src/libcore/option.rs"
    $10 = ((($9)) + 4|0); //@line 404 "/checkout/src/libcore/option.rs"
    HEAP32[$10>>2] = $$sreg$field3; //@line 404 "/checkout/src/libcore/option.rs"
    break;
   }
   $18 = ___cxa_find_matching_catch_2()|0;
   $19 = tempRet0;
   HEAP32[$personalityslot>>2] = $18;
   $20 = ((($personalityslot)) + 4|0);
   HEAP32[$20>>2] = $19;
   $21 = HEAP32[$self>>2]|0; //@line 407 "/checkout/src/libcore/option.rs"
   $cond1 = ($21|0)==(1); //@line 407 "/checkout/src/libcore/option.rs"
   if (!($cond1)) {
    $3 = HEAP32[$personalityslot>>2]|0; //@line 402 "/checkout/src/libcore/option.rs"
    $4 = ((($personalityslot)) + 4|0); //@line 402 "/checkout/src/libcore/option.rs"
    $5 = HEAP32[$4>>2]|0; //@line 402 "/checkout/src/libcore/option.rs"
    ___resumeException($3|0);
    // unreachable;
   }
   $14 = $_9; //@line 407 "/checkout/src/libcore/option.rs"
   $15 = $14&1; //@line 407 "/checkout/src/libcore/option.rs"
   if (!($15)) {
    $3 = HEAP32[$personalityslot>>2]|0; //@line 402 "/checkout/src/libcore/option.rs"
    $4 = ((($personalityslot)) + 4|0); //@line 402 "/checkout/src/libcore/option.rs"
    $5 = HEAP32[$4>>2]|0; //@line 402 "/checkout/src/libcore/option.rs"
    ___resumeException($3|0);
    // unreachable;
   }
   $_9 = 0; //@line 407 "/checkout/src/libcore/option.rs"
   $3 = HEAP32[$personalityslot>>2]|0; //@line 402 "/checkout/src/libcore/option.rs"
   $4 = ((($personalityslot)) + 4|0); //@line 402 "/checkout/src/libcore/option.rs"
   $5 = HEAP32[$4>>2]|0; //@line 402 "/checkout/src/libcore/option.rs"
   ___resumeException($3|0);
   // unreachable;
  }
 } while(0);
 $11 = $_10; //@line 407 "/checkout/src/libcore/option.rs"
 $12 = $11&1; //@line 407 "/checkout/src/libcore/option.rs"
 if ($12) {
  $_10 = 0; //@line 407 "/checkout/src/libcore/option.rs"
 }
 $13 = HEAP32[$self>>2]|0; //@line 407 "/checkout/src/libcore/option.rs"
 $cond = ($13|0)==(1); //@line 407 "/checkout/src/libcore/option.rs"
 if (!($cond)) {
  STACKTOP = sp;return; //@line 407 "/checkout/src/libcore/option.rs"
 }
 $16 = $_9; //@line 407 "/checkout/src/libcore/option.rs"
 $17 = $16&1; //@line 407 "/checkout/src/libcore/option.rs"
 if (!($17)) {
  STACKTOP = sp;return; //@line 407 "/checkout/src/libcore/option.rs"
 }
 $_9 = 0; //@line 407 "/checkout/src/libcore/option.rs"
 STACKTOP = sp;return; //@line 407 "/checkout/src/libcore/option.rs"
}
function __ZN38__LT_core__option__Option_LT_T_GT__GT_3map17hfccc543f12303d69E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sreg$field = 0, $$sreg$field3 = 0, $$sreg$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_7 = 0, $_9 = 0, $cond = 0, $cond1 = 0, $f = 0, $personalityslot = 0, $self = 0;
 var $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp;
 $personalityslot = sp + 24|0;
 $_7 = sp + 20|0;
 $self = sp + 8|0;
 HEAP32[$self>>2] = $1;
 $f = $2;
 $_9 = 0; //@line 404 "/checkout/src/libcore/option.rs"
 $_10 = 0; //@line 404 "/checkout/src/libcore/option.rs"
 $_9 = 1; //@line 404 "/checkout/src/libcore/option.rs"
 $_10 = 1; //@line 404 "/checkout/src/libcore/option.rs"
 $4 = HEAP32[$self>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
 $5 = ($4|0)==(0|0); //@line 404 "/checkout/src/libcore/option.rs"
 do {
  if ($5) {
   $9 = ((($0)) + 4|0); //@line 405 "/checkout/src/libcore/option.rs"
   HEAP32[$9>>2] = 0; //@line 405 "/checkout/src/libcore/option.rs"
  } else {
   $_9 = 0; //@line 404 "/checkout/src/libcore/option.rs"
   $10 = HEAP32[$self>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
   $x = $10; //@line 404 "/checkout/src/libcore/option.rs"
   $_10 = 0; //@line 404 "/checkout/src/libcore/option.rs"
   $11 = $f; //@line 404 "/checkout/src/libcore/option.rs"
   $12 = $x; //@line 404 "/checkout/src/libcore/option.rs"
   HEAP32[$_7>>2] = $12; //@line 404 "/checkout/src/libcore/option.rs"
   $13 = HEAP32[$_7>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
   __THREW__ = 0;
   invoke_viii(363,($3|0),($11|0),($13|0)); //@line 404 "/checkout/src/libcore/option.rs"
   $$sreg$field = HEAP32[$3>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
   $$sreg$index2 = ((($3)) + 4|0); //@line 404 "/checkout/src/libcore/option.rs"
   $$sreg$field3 = HEAP32[$$sreg$index2>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if (!($15)) {
    HEAP32[$0>>2] = $$sreg$field; //@line 404 "/checkout/src/libcore/option.rs"
    $16 = ((($0)) + 4|0); //@line 404 "/checkout/src/libcore/option.rs"
    HEAP32[$16>>2] = $$sreg$field3; //@line 404 "/checkout/src/libcore/option.rs"
    break;
   }
   $26 = ___cxa_find_matching_catch_2()|0;
   $27 = tempRet0;
   HEAP32[$personalityslot>>2] = $26;
   $28 = ((($personalityslot)) + 4|0);
   HEAP32[$28>>2] = $27;
   $29 = HEAP32[$self>>2]|0; //@line 407 "/checkout/src/libcore/option.rs"
   $30 = ($29|0)==(0|0); //@line 407 "/checkout/src/libcore/option.rs"
   $31 = $30 ? 0 : 1; //@line 407 "/checkout/src/libcore/option.rs"
   $cond1 = ($31|0)==(1); //@line 407 "/checkout/src/libcore/option.rs"
   if (!($cond1)) {
    $6 = HEAP32[$personalityslot>>2]|0; //@line 402 "/checkout/src/libcore/option.rs"
    $7 = ((($personalityslot)) + 4|0); //@line 402 "/checkout/src/libcore/option.rs"
    $8 = HEAP32[$7>>2]|0; //@line 402 "/checkout/src/libcore/option.rs"
    ___resumeException($6|0);
    // unreachable;
   }
   $22 = $_9; //@line 407 "/checkout/src/libcore/option.rs"
   $23 = $22&1; //@line 407 "/checkout/src/libcore/option.rs"
   if (!($23)) {
    $6 = HEAP32[$personalityslot>>2]|0; //@line 402 "/checkout/src/libcore/option.rs"
    $7 = ((($personalityslot)) + 4|0); //@line 402 "/checkout/src/libcore/option.rs"
    $8 = HEAP32[$7>>2]|0; //@line 402 "/checkout/src/libcore/option.rs"
    ___resumeException($6|0);
    // unreachable;
   }
   $_9 = 0; //@line 407 "/checkout/src/libcore/option.rs"
   $6 = HEAP32[$personalityslot>>2]|0; //@line 402 "/checkout/src/libcore/option.rs"
   $7 = ((($personalityslot)) + 4|0); //@line 402 "/checkout/src/libcore/option.rs"
   $8 = HEAP32[$7>>2]|0; //@line 402 "/checkout/src/libcore/option.rs"
   ___resumeException($6|0);
   // unreachable;
  }
 } while(0);
 $17 = $_10; //@line 407 "/checkout/src/libcore/option.rs"
 $18 = $17&1; //@line 407 "/checkout/src/libcore/option.rs"
 if ($18) {
  $_10 = 0; //@line 407 "/checkout/src/libcore/option.rs"
 }
 $19 = HEAP32[$self>>2]|0; //@line 407 "/checkout/src/libcore/option.rs"
 $20 = ($19|0)==(0|0); //@line 407 "/checkout/src/libcore/option.rs"
 $21 = $20 ? 0 : 1; //@line 407 "/checkout/src/libcore/option.rs"
 $cond = ($21|0)==(1); //@line 407 "/checkout/src/libcore/option.rs"
 if (!($cond)) {
  STACKTOP = sp;return; //@line 407 "/checkout/src/libcore/option.rs"
 }
 $24 = $_9; //@line 407 "/checkout/src/libcore/option.rs"
 $25 = $24&1; //@line 407 "/checkout/src/libcore/option.rs"
 if (!($25)) {
  STACKTOP = sp;return; //@line 407 "/checkout/src/libcore/option.rs"
 }
 $_9 = 0; //@line 407 "/checkout/src/libcore/option.rs"
 STACKTOP = sp;return; //@line 407 "/checkout/src/libcore/option.rs"
}
function __ZN38__LT_core__option__Option_LT_T_GT__GT_6expect17h309912bdbe900737E($self,$0,$1) {
 $self = $self|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $msg = 0, $personalityslot = 0, $switch = 0, $val = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $personalityslot = sp + 16|0; //@line 1 "/checkout/src/libcore/option.rs"
 $msg = sp; //@line 1 "/checkout/src/libcore/option.rs"
 HEAP32[$msg>>2] = $0;
 $2 = ((($msg)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$self>>2]|0; //@line 301 "/checkout/src/libcore/option.rs"
 $switch = ($3>>>0)<(1); //@line 301 "/checkout/src/libcore/option.rs"
 if ($switch) {
  $4 = HEAP32[$msg>>2]|0; //@line 302 "/checkout/src/libcore/option.rs"
  $5 = ((($msg)) + 4|0); //@line 302 "/checkout/src/libcore/option.rs"
  $6 = HEAP32[$5>>2]|0; //@line 302 "/checkout/src/libcore/option.rs"
  __THREW__ = 0;
  invoke_vii(364,($4|0),($6|0)); //@line 302 "/checkout/src/libcore/option.rs"
  $7 = __THREW__; __THREW__ = 0;
  $8 = ___cxa_find_matching_catch_2()|0;
  $9 = tempRet0;
  HEAP32[$personalityslot>>2] = $8;
  $10 = ((($personalityslot)) + 4|0);
  HEAP32[$10>>2] = $9;
  $11 = HEAP32[$personalityslot>>2]|0; //@line 299 "/checkout/src/libcore/option.rs"
  $12 = ((($personalityslot)) + 4|0); //@line 299 "/checkout/src/libcore/option.rs"
  $13 = HEAP32[$12>>2]|0; //@line 299 "/checkout/src/libcore/option.rs"
  ___resumeException($11|0);
  // unreachable;
 } else {
  $14 = ((($self)) + 4|0); //@line 301 "/checkout/src/libcore/option.rs"
  $15 = HEAP32[$14>>2]|0; //@line 301 "/checkout/src/libcore/option.rs"
  $val = $15; //@line 301 "/checkout/src/libcore/option.rs"
  $16 = $val; //@line 301 "/checkout/src/libcore/option.rs"
  STACKTOP = sp;return ($16|0); //@line 304 "/checkout/src/libcore/option.rs"
 }
 return (0)|0;
}
function __ZN38__LT_core__option__Option_LT_T_GT__GT_6unwrap17h2c39f0c3fc4408a2E($retVal,$self) {
 $retVal = $retVal|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $personalityslot = 0, $retVal$index1 = 0, $switch = 0, $val = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $personalityslot = sp + 8|0; //@line 1 "/checkout/src/libcore/option.rs"
 $val = sp; //@line 1 "/checkout/src/libcore/option.rs"
 $0 = HEAP32[$self>>2]|0; //@line 334 "/checkout/src/libcore/option.rs"
 $switch = ($0>>>0)<(1); //@line 334 "/checkout/src/libcore/option.rs"
 if ($switch) {
  __THREW__ = 0;
  invoke_vi(297,(7784|0)); //@line 20 "/checkout/src/libcore/macros.rs"
  $1 = __THREW__; __THREW__ = 0;
  $2 = ___cxa_find_matching_catch_2()|0;
  $3 = tempRet0;
  HEAP32[$personalityslot>>2] = $2;
  $4 = ((($personalityslot)) + 4|0);
  HEAP32[$4>>2] = $3;
  $5 = HEAP32[$personalityslot>>2]|0; //@line 332 "/checkout/src/libcore/option.rs"
  $6 = ((($personalityslot)) + 4|0); //@line 332 "/checkout/src/libcore/option.rs"
  $7 = HEAP32[$6>>2]|0; //@line 332 "/checkout/src/libcore/option.rs"
  ___resumeException($5|0);
  // unreachable;
 } else {
  $8 = ((($self)) + 4|0); //@line 334 "/checkout/src/libcore/option.rs"
  $9 = +HEAPF32[$8>>2]; //@line 334 "/checkout/src/libcore/option.rs"
  $10 = ((($8)) + 4|0); //@line 334 "/checkout/src/libcore/option.rs"
  $11 = +HEAPF32[$10>>2]; //@line 334 "/checkout/src/libcore/option.rs"
  HEAPF32[$val>>2] = $9; //@line 334 "/checkout/src/libcore/option.rs"
  $12 = ((($val)) + 4|0); //@line 334 "/checkout/src/libcore/option.rs"
  HEAPF32[$12>>2] = $11; //@line 334 "/checkout/src/libcore/option.rs"
  $13 = +HEAPF32[$val>>2]; //@line 334 "/checkout/src/libcore/option.rs"
  $14 = ((($val)) + 4|0); //@line 334 "/checkout/src/libcore/option.rs"
  $15 = +HEAPF32[$14>>2]; //@line 334 "/checkout/src/libcore/option.rs"
  HEAPF32[$retVal>>2] = $13; //@line 337 "/checkout/src/libcore/option.rs"
  $retVal$index1 = ((($retVal)) + 4|0); //@line 337 "/checkout/src/libcore/option.rs"
  HEAPF32[$retVal$index1>>2] = $15; //@line 337 "/checkout/src/libcore/option.rs"
  STACKTOP = sp;return; //@line 337 "/checkout/src/libcore/option.rs"
 }
}
function __ZN38__LT_core__option__Option_LT_T_GT__GT_6unwrap17h303cd54fcfc19e6eE($retVal,$self) {
 $retVal = $retVal|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $personalityslot = 0, $retVal$index1 = 0, $switch = 0, $val = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $personalityslot = sp + 8|0; //@line 1 "/checkout/src/libcore/option.rs"
 $val = sp; //@line 1 "/checkout/src/libcore/option.rs"
 $0 = HEAP32[$self>>2]|0; //@line 334 "/checkout/src/libcore/option.rs"
 $switch = ($0>>>0)<(1); //@line 334 "/checkout/src/libcore/option.rs"
 if ($switch) {
  __THREW__ = 0;
  invoke_vi(297,(7784|0)); //@line 20 "/checkout/src/libcore/macros.rs"
  $1 = __THREW__; __THREW__ = 0;
  $2 = ___cxa_find_matching_catch_2()|0;
  $3 = tempRet0;
  HEAP32[$personalityslot>>2] = $2;
  $4 = ((($personalityslot)) + 4|0);
  HEAP32[$4>>2] = $3;
  $5 = HEAP32[$personalityslot>>2]|0; //@line 332 "/checkout/src/libcore/option.rs"
  $6 = ((($personalityslot)) + 4|0); //@line 332 "/checkout/src/libcore/option.rs"
  $7 = HEAP32[$6>>2]|0; //@line 332 "/checkout/src/libcore/option.rs"
  ___resumeException($5|0);
  // unreachable;
 } else {
  $8 = ((($self)) + 4|0); //@line 334 "/checkout/src/libcore/option.rs"
  $9 = HEAP32[$8>>2]|0; //@line 334 "/checkout/src/libcore/option.rs"
  $10 = ((($8)) + 4|0); //@line 334 "/checkout/src/libcore/option.rs"
  $11 = HEAP32[$10>>2]|0; //@line 334 "/checkout/src/libcore/option.rs"
  HEAP32[$val>>2] = $9; //@line 334 "/checkout/src/libcore/option.rs"
  $12 = ((($val)) + 4|0); //@line 334 "/checkout/src/libcore/option.rs"
  HEAP32[$12>>2] = $11; //@line 334 "/checkout/src/libcore/option.rs"
  $13 = HEAP32[$val>>2]|0; //@line 334 "/checkout/src/libcore/option.rs"
  $14 = ((($val)) + 4|0); //@line 334 "/checkout/src/libcore/option.rs"
  $15 = HEAP32[$14>>2]|0; //@line 334 "/checkout/src/libcore/option.rs"
  HEAP32[$retVal>>2] = $13; //@line 337 "/checkout/src/libcore/option.rs"
  $retVal$index1 = ((($retVal)) + 4|0); //@line 337 "/checkout/src/libcore/option.rs"
  HEAP32[$retVal$index1>>2] = $15; //@line 337 "/checkout/src/libcore/option.rs"
  STACKTOP = sp;return; //@line 337 "/checkout/src/libcore/option.rs"
 }
}
function __ZN38__LT_core__option__Option_LT_T_GT__GT_6unwrap17hdadeb6d41ce553b5E($retVal,$self) {
 $retVal = $retVal|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $personalityslot = 0, $retVal$index1 = 0, $switch = 0, $val = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $personalityslot = sp + 8|0; //@line 1 "/checkout/src/libcore/option.rs"
 $val = sp; //@line 1 "/checkout/src/libcore/option.rs"
 $0 = HEAP32[$self>>2]|0; //@line 334 "/checkout/src/libcore/option.rs"
 $switch = ($0>>>0)<(1); //@line 334 "/checkout/src/libcore/option.rs"
 if ($switch) {
  __THREW__ = 0;
  invoke_vi(297,(7784|0)); //@line 20 "/checkout/src/libcore/macros.rs"
  $1 = __THREW__; __THREW__ = 0;
  $2 = ___cxa_find_matching_catch_2()|0;
  $3 = tempRet0;
  HEAP32[$personalityslot>>2] = $2;
  $4 = ((($personalityslot)) + 4|0);
  HEAP32[$4>>2] = $3;
  $5 = HEAP32[$personalityslot>>2]|0; //@line 332 "/checkout/src/libcore/option.rs"
  $6 = ((($personalityslot)) + 4|0); //@line 332 "/checkout/src/libcore/option.rs"
  $7 = HEAP32[$6>>2]|0; //@line 332 "/checkout/src/libcore/option.rs"
  ___resumeException($5|0);
  // unreachable;
 } else {
  $8 = ((($self)) + 4|0); //@line 334 "/checkout/src/libcore/option.rs"
  $9 = HEAP32[$8>>2]|0; //@line 334 "/checkout/src/libcore/option.rs"
  $10 = ((($8)) + 4|0); //@line 334 "/checkout/src/libcore/option.rs"
  $11 = HEAP32[$10>>2]|0; //@line 334 "/checkout/src/libcore/option.rs"
  HEAP32[$val>>2] = $9; //@line 334 "/checkout/src/libcore/option.rs"
  $12 = ((($val)) + 4|0); //@line 334 "/checkout/src/libcore/option.rs"
  HEAP32[$12>>2] = $11; //@line 334 "/checkout/src/libcore/option.rs"
  $13 = HEAP32[$val>>2]|0; //@line 334 "/checkout/src/libcore/option.rs"
  $14 = ((($val)) + 4|0); //@line 334 "/checkout/src/libcore/option.rs"
  $15 = HEAP32[$14>>2]|0; //@line 334 "/checkout/src/libcore/option.rs"
  HEAP32[$retVal>>2] = $13; //@line 337 "/checkout/src/libcore/option.rs"
  $retVal$index1 = ((($retVal)) + 4|0); //@line 337 "/checkout/src/libcore/option.rs"
  HEAP32[$retVal$index1>>2] = $15; //@line 337 "/checkout/src/libcore/option.rs"
  STACKTOP = sp;return; //@line 337 "/checkout/src/libcore/option.rs"
 }
}
function __ZN4core3fmt10ArgumentV13new17h015bb9f1401d5999E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $f = 0, $retVal$index1 = 0, $transmute_temp = 0, $transmute_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp1 = sp + 20|0;
 $transmute_temp = sp + 16|0;
 $_0 = sp + 8|0;
 $x = $0;
 $f = $1;
 $2 = $f; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$transmute_temp>>2] = $2; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$transmute_temp>>2]|0; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 $4 = $x; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$transmute_temp1>>2] = $4; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 $5 = HEAP32[$transmute_temp1>>2]|0; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_0>>2] = $5; //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 $6 = ((($_0)) + 4|0); //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$6>>2] = $3; //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 $7 = HEAP32[$_0>>2]|0; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $8 = ((($_0)) + 4|0); //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $9 = HEAP32[$8>>2]|0; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$retVal>>2] = $7; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$retVal$index1>>2] = $9; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN4core3fmt10ArgumentV13new17h0963b74890d3a7c4E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $f = 0, $retVal$index1 = 0, $transmute_temp = 0, $transmute_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp1 = sp + 20|0;
 $transmute_temp = sp + 16|0;
 $_0 = sp + 8|0;
 $x = $0;
 $f = $1;
 $2 = $f; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$transmute_temp>>2] = $2; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$transmute_temp>>2]|0; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 $4 = $x; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$transmute_temp1>>2] = $4; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 $5 = HEAP32[$transmute_temp1>>2]|0; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_0>>2] = $5; //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 $6 = ((($_0)) + 4|0); //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$6>>2] = $3; //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 $7 = HEAP32[$_0>>2]|0; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $8 = ((($_0)) + 4|0); //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $9 = HEAP32[$8>>2]|0; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$retVal>>2] = $7; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$retVal$index1>>2] = $9; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN4core3fmt10ArgumentV13new17h0faa44f18fc9a722E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $f = 0, $retVal$index1 = 0, $transmute_temp = 0, $transmute_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp1 = sp + 20|0;
 $transmute_temp = sp + 16|0;
 $_0 = sp + 8|0;
 $x = $0;
 $f = $1;
 $2 = $f; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$transmute_temp>>2] = $2; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$transmute_temp>>2]|0; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 $4 = $x; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$transmute_temp1>>2] = $4; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 $5 = HEAP32[$transmute_temp1>>2]|0; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_0>>2] = $5; //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 $6 = ((($_0)) + 4|0); //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$6>>2] = $3; //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 $7 = HEAP32[$_0>>2]|0; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $8 = ((($_0)) + 4|0); //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $9 = HEAP32[$8>>2]|0; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$retVal>>2] = $7; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$retVal$index1>>2] = $9; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN4core3fmt10ArgumentV13new17h18c233152faad36eE($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $f = 0, $retVal$index1 = 0, $transmute_temp = 0, $transmute_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp1 = sp + 20|0;
 $transmute_temp = sp + 16|0;
 $_0 = sp + 8|0;
 $x = $0;
 $f = $1;
 $2 = $f; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$transmute_temp>>2] = $2; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$transmute_temp>>2]|0; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 $4 = $x; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$transmute_temp1>>2] = $4; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 $5 = HEAP32[$transmute_temp1>>2]|0; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_0>>2] = $5; //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 $6 = ((($_0)) + 4|0); //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$6>>2] = $3; //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 $7 = HEAP32[$_0>>2]|0; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $8 = ((($_0)) + 4|0); //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $9 = HEAP32[$8>>2]|0; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$retVal>>2] = $7; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$retVal$index1>>2] = $9; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN4core3fmt10ArgumentV13new17h195d6d3c2eb76050E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $f = 0, $retVal$index1 = 0, $transmute_temp = 0, $transmute_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp1 = sp + 20|0;
 $transmute_temp = sp + 16|0;
 $_0 = sp + 8|0;
 $x = $0;
 $f = $1;
 $2 = $f; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$transmute_temp>>2] = $2; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$transmute_temp>>2]|0; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 $4 = $x; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$transmute_temp1>>2] = $4; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 $5 = HEAP32[$transmute_temp1>>2]|0; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_0>>2] = $5; //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 $6 = ((($_0)) + 4|0); //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$6>>2] = $3; //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 $7 = HEAP32[$_0>>2]|0; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $8 = ((($_0)) + 4|0); //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $9 = HEAP32[$8>>2]|0; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$retVal>>2] = $7; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$retVal$index1>>2] = $9; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN4core3fmt10ArgumentV13new17h37e1e49ec138400bE($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $f = 0, $retVal$index1 = 0, $transmute_temp = 0, $transmute_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp1 = sp + 20|0;
 $transmute_temp = sp + 16|0;
 $_0 = sp + 8|0;
 $x = $0;
 $f = $1;
 $2 = $f; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$transmute_temp>>2] = $2; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$transmute_temp>>2]|0; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 $4 = $x; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$transmute_temp1>>2] = $4; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 $5 = HEAP32[$transmute_temp1>>2]|0; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_0>>2] = $5; //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 $6 = ((($_0)) + 4|0); //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$6>>2] = $3; //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 $7 = HEAP32[$_0>>2]|0; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $8 = ((($_0)) + 4|0); //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $9 = HEAP32[$8>>2]|0; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$retVal>>2] = $7; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$retVal$index1>>2] = $9; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN4core3fmt10ArgumentV13new17h3d78367c24d4579cE($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $f = 0, $retVal$index1 = 0, $transmute_temp = 0, $transmute_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp1 = sp + 20|0;
 $transmute_temp = sp + 16|0;
 $_0 = sp + 8|0;
 $x = $0;
 $f = $1;
 $2 = $f; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$transmute_temp>>2] = $2; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$transmute_temp>>2]|0; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 $4 = $x; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$transmute_temp1>>2] = $4; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 $5 = HEAP32[$transmute_temp1>>2]|0; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_0>>2] = $5; //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 $6 = ((($_0)) + 4|0); //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$6>>2] = $3; //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 $7 = HEAP32[$_0>>2]|0; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $8 = ((($_0)) + 4|0); //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $9 = HEAP32[$8>>2]|0; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$retVal>>2] = $7; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$retVal$index1>>2] = $9; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN4core3fmt10ArgumentV13new17h3f6d5d21b2b0a960E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $f = 0, $retVal$index1 = 0, $transmute_temp = 0, $transmute_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp1 = sp + 20|0;
 $transmute_temp = sp + 16|0;
 $_0 = sp + 8|0;
 $x = $0;
 $f = $1;
 $2 = $f; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$transmute_temp>>2] = $2; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$transmute_temp>>2]|0; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 $4 = $x; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$transmute_temp1>>2] = $4; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 $5 = HEAP32[$transmute_temp1>>2]|0; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_0>>2] = $5; //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 $6 = ((($_0)) + 4|0); //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$6>>2] = $3; //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 $7 = HEAP32[$_0>>2]|0; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $8 = ((($_0)) + 4|0); //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $9 = HEAP32[$8>>2]|0; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$retVal>>2] = $7; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$retVal$index1>>2] = $9; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN4core3fmt10ArgumentV13new17h4de5cb633051a86aE($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $f = 0, $retVal$index1 = 0, $transmute_temp = 0, $transmute_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp1 = sp + 20|0;
 $transmute_temp = sp + 16|0;
 $_0 = sp + 8|0;
 $x = $0;
 $f = $1;
 $2 = $f; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$transmute_temp>>2] = $2; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$transmute_temp>>2]|0; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 $4 = $x; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$transmute_temp1>>2] = $4; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 $5 = HEAP32[$transmute_temp1>>2]|0; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_0>>2] = $5; //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 $6 = ((($_0)) + 4|0); //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$6>>2] = $3; //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 $7 = HEAP32[$_0>>2]|0; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $8 = ((($_0)) + 4|0); //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $9 = HEAP32[$8>>2]|0; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$retVal>>2] = $7; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$retVal$index1>>2] = $9; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN4core3fmt10ArgumentV13new17hab1dce820bb2a465E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $f = 0, $retVal$index1 = 0, $transmute_temp = 0, $transmute_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp1 = sp + 20|0;
 $transmute_temp = sp + 16|0;
 $_0 = sp + 8|0;
 $x = $0;
 $f = $1;
 $2 = $f; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$transmute_temp>>2] = $2; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$transmute_temp>>2]|0; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 $4 = $x; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$transmute_temp1>>2] = $4; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 $5 = HEAP32[$transmute_temp1>>2]|0; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_0>>2] = $5; //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 $6 = ((($_0)) + 4|0); //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$6>>2] = $3; //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 $7 = HEAP32[$_0>>2]|0; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $8 = ((($_0)) + 4|0); //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $9 = HEAP32[$8>>2]|0; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$retVal>>2] = $7; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$retVal$index1>>2] = $9; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN4core3fmt10ArgumentV13new17hb4a40daac4d87cfcE($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $f = 0, $retVal$index1 = 0, $transmute_temp = 0, $transmute_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp1 = sp + 20|0;
 $transmute_temp = sp + 16|0;
 $_0 = sp + 8|0;
 $x = $0;
 $f = $1;
 $2 = $f; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$transmute_temp>>2] = $2; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$transmute_temp>>2]|0; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 $4 = $x; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$transmute_temp1>>2] = $4; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 $5 = HEAP32[$transmute_temp1>>2]|0; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_0>>2] = $5; //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 $6 = ((($_0)) + 4|0); //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$6>>2] = $3; //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 $7 = HEAP32[$_0>>2]|0; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $8 = ((($_0)) + 4|0); //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $9 = HEAP32[$8>>2]|0; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$retVal>>2] = $7; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$retVal$index1>>2] = $9; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN4core3fmt10ArgumentV13new17hba5d1e436503efc2E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $f = 0, $retVal$index1 = 0, $transmute_temp = 0, $transmute_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp1 = sp + 20|0;
 $transmute_temp = sp + 16|0;
 $_0 = sp + 8|0;
 $x = $0;
 $f = $1;
 $2 = $f; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$transmute_temp>>2] = $2; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$transmute_temp>>2]|0; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 $4 = $x; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$transmute_temp1>>2] = $4; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 $5 = HEAP32[$transmute_temp1>>2]|0; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_0>>2] = $5; //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 $6 = ((($_0)) + 4|0); //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$6>>2] = $3; //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 $7 = HEAP32[$_0>>2]|0; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $8 = ((($_0)) + 4|0); //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $9 = HEAP32[$8>>2]|0; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$retVal>>2] = $7; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$retVal$index1>>2] = $9; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN4core3fmt10ArgumentV13new17hc364d5c14a780bfcE($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $f = 0, $retVal$index1 = 0, $transmute_temp = 0, $transmute_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp1 = sp + 20|0;
 $transmute_temp = sp + 16|0;
 $_0 = sp + 8|0;
 $x = $0;
 $f = $1;
 $2 = $f; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$transmute_temp>>2] = $2; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$transmute_temp>>2]|0; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 $4 = $x; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$transmute_temp1>>2] = $4; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 $5 = HEAP32[$transmute_temp1>>2]|0; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_0>>2] = $5; //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 $6 = ((($_0)) + 4|0); //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$6>>2] = $3; //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 $7 = HEAP32[$_0>>2]|0; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $8 = ((($_0)) + 4|0); //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $9 = HEAP32[$8>>2]|0; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$retVal>>2] = $7; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$retVal$index1>>2] = $9; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN4core3fmt10ArgumentV13new17hce4e39221511378dE($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $f = 0, $retVal$index1 = 0, $transmute_temp = 0, $transmute_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp1 = sp + 20|0;
 $transmute_temp = sp + 16|0;
 $_0 = sp + 8|0;
 $x = $0;
 $f = $1;
 $2 = $f; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$transmute_temp>>2] = $2; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$transmute_temp>>2]|0; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 $4 = $x; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$transmute_temp1>>2] = $4; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 $5 = HEAP32[$transmute_temp1>>2]|0; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_0>>2] = $5; //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 $6 = ((($_0)) + 4|0); //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$6>>2] = $3; //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 $7 = HEAP32[$_0>>2]|0; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $8 = ((($_0)) + 4|0); //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $9 = HEAP32[$8>>2]|0; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$retVal>>2] = $7; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$retVal$index1>>2] = $9; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN4core3fmt10ArgumentV13new17heecba43e0c9da516E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $f = 0, $retVal$index1 = 0, $transmute_temp = 0, $transmute_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp1 = sp + 20|0;
 $transmute_temp = sp + 16|0;
 $_0 = sp + 8|0;
 $x = $0;
 $f = $1;
 $2 = $f; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$transmute_temp>>2] = $2; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$transmute_temp>>2]|0; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 $4 = $x; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$transmute_temp1>>2] = $4; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 $5 = HEAP32[$transmute_temp1>>2]|0; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_0>>2] = $5; //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 $6 = ((($_0)) + 4|0); //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$6>>2] = $3; //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 $7 = HEAP32[$_0>>2]|0; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $8 = ((($_0)) + 4|0); //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $9 = HEAP32[$8>>2]|0; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$retVal>>2] = $7; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$retVal$index1>>2] = $9; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN4core3fmt10ArgumentV13new17heff68ddf9489a9aaE($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $f = 0, $retVal$index1 = 0, $transmute_temp = 0, $transmute_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp1 = sp + 20|0;
 $transmute_temp = sp + 16|0;
 $_0 = sp + 8|0;
 $x = $0;
 $f = $1;
 $2 = $f; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$transmute_temp>>2] = $2; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$transmute_temp>>2]|0; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 $4 = $x; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$transmute_temp1>>2] = $4; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 $5 = HEAP32[$transmute_temp1>>2]|0; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_0>>2] = $5; //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 $6 = ((($_0)) + 4|0); //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$6>>2] = $3; //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 $7 = HEAP32[$_0>>2]|0; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $8 = ((($_0)) + 4|0); //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $9 = HEAP32[$8>>2]|0; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$retVal>>2] = $7; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$retVal$index1>>2] = $9; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN4core3fmt10ArgumentV13new17hf7be953a10f1c908E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $f = 0, $retVal$index1 = 0, $transmute_temp = 0, $transmute_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp1 = sp + 20|0;
 $transmute_temp = sp + 16|0;
 $_0 = sp + 8|0;
 $x = $0;
 $f = $1;
 $2 = $f; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$transmute_temp>>2] = $2; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$transmute_temp>>2]|0; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 $4 = $x; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$transmute_temp1>>2] = $4; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 $5 = HEAP32[$transmute_temp1>>2]|0; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_0>>2] = $5; //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 $6 = ((($_0)) + 4|0); //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$6>>2] = $3; //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 $7 = HEAP32[$_0>>2]|0; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $8 = ((($_0)) + 4|0); //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $9 = HEAP32[$8>>2]|0; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$retVal>>2] = $7; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$retVal$index1>>2] = $9; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN4core3fmt10ArgumentV13new17hfaae784bb293ef1aE($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $f = 0, $retVal$index1 = 0, $transmute_temp = 0, $transmute_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp1 = sp + 20|0;
 $transmute_temp = sp + 16|0;
 $_0 = sp + 8|0;
 $x = $0;
 $f = $1;
 $2 = $f; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$transmute_temp>>2] = $2; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$transmute_temp>>2]|0; //@line 309 "/checkout/src/libcore/fmt/mod.rs"
 $4 = $x; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$transmute_temp1>>2] = $4; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 $5 = HEAP32[$transmute_temp1>>2]|0; //@line 310 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_0>>2] = $5; //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 $6 = ((($_0)) + 4|0); //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$6>>2] = $3; //@line 308 "/checkout/src/libcore/fmt/mod.rs"
 $7 = HEAP32[$_0>>2]|0; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $8 = ((($_0)) + 4|0); //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $9 = HEAP32[$8>>2]|0; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$retVal>>2] = $7; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$retVal$index1>>2] = $9; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return; //@line 313 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN4core3fmt9Arguments16new_v1_formatted17hd7921c86529aa3b1E($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $7 = 0, $8 = 0, $9 = 0, $_5 = 0, $args = 0, $fmt = 0;
 var $pieces = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_5 = sp + 24|0;
 $fmt = sp + 16|0;
 $args = sp + 8|0;
 $pieces = sp;
 HEAP32[$pieces>>2] = $1;
 $7 = ((($pieces)) + 4|0);
 HEAP32[$7>>2] = $2;
 HEAP32[$args>>2] = $3;
 $8 = ((($args)) + 4|0);
 HEAP32[$8>>2] = $4;
 HEAP32[$fmt>>2] = $5;
 $9 = ((($fmt)) + 4|0);
 HEAP32[$9>>2] = $6;
 $10 = HEAP32[$pieces>>2]|0; //@line 363 "/checkout/src/libcore/fmt/mod.rs"
 $11 = ((($pieces)) + 4|0); //@line 363 "/checkout/src/libcore/fmt/mod.rs"
 $12 = HEAP32[$11>>2]|0; //@line 363 "/checkout/src/libcore/fmt/mod.rs"
 $13 = HEAP32[$fmt>>2]|0; //@line 364 "/checkout/src/libcore/fmt/mod.rs"
 $14 = ((($fmt)) + 4|0); //@line 364 "/checkout/src/libcore/fmt/mod.rs"
 $15 = HEAP32[$14>>2]|0; //@line 364 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5>>2] = $13; //@line 364 "/checkout/src/libcore/fmt/mod.rs"
 $16 = ((($_5)) + 4|0); //@line 364 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$16>>2] = $15; //@line 364 "/checkout/src/libcore/fmt/mod.rs"
 $17 = HEAP32[$args>>2]|0; //@line 365 "/checkout/src/libcore/fmt/mod.rs"
 $18 = ((($args)) + 4|0); //@line 365 "/checkout/src/libcore/fmt/mod.rs"
 $19 = HEAP32[$18>>2]|0; //@line 365 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$0>>2] = $10; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $20 = ((($0)) + 4|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$20>>2] = $12; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $21 = ((($0)) + 8|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 ;HEAP32[$21>>2]=HEAP32[$_5>>2]|0;HEAP32[$21+4>>2]=HEAP32[$_5+4>>2]|0; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $22 = ((($0)) + 16|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$22>>2] = $17; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $23 = ((($22)) + 4|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$23>>2] = $19; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return; //@line 367 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN4core3fmt9Arguments6new_v117h1cedc7e123bae470E($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_4 = 0, $args = 0, $pieces = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_4 = sp + 16|0;
 $args = sp + 8|0;
 $pieces = sp;
 HEAP32[$pieces>>2] = $1;
 $5 = ((($pieces)) + 4|0);
 HEAP32[$5>>2] = $2;
 HEAP32[$args>>2] = $3;
 $6 = ((($args)) + 4|0);
 HEAP32[$6>>2] = $4;
 $7 = HEAP32[$pieces>>2]|0; //@line 344 "/checkout/src/libcore/fmt/mod.rs"
 $8 = ((($pieces)) + 4|0); //@line 344 "/checkout/src/libcore/fmt/mod.rs"
 $9 = HEAP32[$8>>2]|0; //@line 344 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_4>>2] = 0; //@line 345 "/checkout/src/libcore/fmt/mod.rs"
 $10 = HEAP32[$args>>2]|0; //@line 346 "/checkout/src/libcore/fmt/mod.rs"
 $11 = ((($args)) + 4|0); //@line 346 "/checkout/src/libcore/fmt/mod.rs"
 $12 = HEAP32[$11>>2]|0; //@line 346 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$0>>2] = $7; //@line 343 "/checkout/src/libcore/fmt/mod.rs"
 $13 = ((($0)) + 4|0); //@line 343 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$13>>2] = $9; //@line 343 "/checkout/src/libcore/fmt/mod.rs"
 $14 = ((($0)) + 8|0); //@line 343 "/checkout/src/libcore/fmt/mod.rs"
 ;HEAP32[$14>>2]=HEAP32[$_4>>2]|0;HEAP32[$14+4>>2]=HEAP32[$_4+4>>2]|0; //@line 343 "/checkout/src/libcore/fmt/mod.rs"
 $15 = ((($0)) + 16|0); //@line 343 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$15>>2] = $10; //@line 343 "/checkout/src/libcore/fmt/mod.rs"
 $16 = ((($15)) + 4|0); //@line 343 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$16>>2] = $12; //@line 343 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return; //@line 348 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_6offset17h3a9a85f2588f379eE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $count = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $count = $1;
 $2 = $self; //@line 1261 "/checkout/src/libcore/ptr.rs"
 $3 = $count; //@line 1261 "/checkout/src/libcore/ptr.rs"
 $4 = (($2) + (($3*12)|0)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
 $tmp_ret = $4; //@line 1261 "/checkout/src/libcore/ptr.rs"
 $5 = $tmp_ret; //@line 1261 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return ($5|0); //@line 1262 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_6offset17h9ce9af0878e6ae80E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $count = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $count = $1;
 $2 = $self; //@line 1261 "/checkout/src/libcore/ptr.rs"
 $3 = $count; //@line 1261 "/checkout/src/libcore/ptr.rs"
 $4 = (($2) + ($3<<3)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
 $tmp_ret = $4; //@line 1261 "/checkout/src/libcore/ptr.rs"
 $5 = $tmp_ret; //@line 1261 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return ($5|0); //@line 1262 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h5544ec692c7bf42eE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 1170 "/checkout/src/libcore/ptr.rs"
 $2 = (__ZN4core3ptr8null_mut17h08a501618653ee44E()|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
 $3 = ($1|0)==($2|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return ($3|0); //@line 1171 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h7de432dec274b9e4E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 1170 "/checkout/src/libcore/ptr.rs"
 $2 = (__ZN4core3ptr8null_mut17h08a501618653ee44E()|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
 $3 = ($1|0)==($2|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return ($3|0); //@line 1171 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_6offset17h87d1b956fc5e48faE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $count = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $count = $1;
 $2 = $self; //@line 623 "/checkout/src/libcore/ptr.rs"
 $3 = $count; //@line 623 "/checkout/src/libcore/ptr.rs"
 $4 = (($2) + ($3<<3)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
 $tmp_ret = $4; //@line 623 "/checkout/src/libcore/ptr.rs"
 $5 = $tmp_ret; //@line 623 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return ($5|0); //@line 624 "/checkout/src/libcore/ptr.rs"
}
function __ZN50__LT_T_u20_as_u20_core__convert__From_LT_T_GT__GT_4from17h7532ad46a64c7a09E() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return; //@line 422 "/checkout/src/libcore/convert.rs"
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h35de561d9a47f6f6E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $f = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $f = $1;
 $2 = $self; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$2>>2]|0; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $4 = $f; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $5 = (__ZN66__LT_core__option__Option_LT_T_GT__u20_as_u20_core__fmt__Debug_GT_3fmt17h42e5765ca13fc896E($3,$4)|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return ($5|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN66__LT_core__option__Option_LT_T_GT__u20_as_u20_core__fmt__Debug_GT_3fmt17h42e5765ca13fc896E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_21 = 0, $_3 = 0, $__arg_0 = 0, $__self_0 = 0, $builder = 0;
 var $builder1 = 0, $self = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_21 = sp + 40|0;
 $builder1 = sp + 28|0;
 $builder = sp + 16|0;
 $_3 = sp + 8|0;
 $self = $0;
 $__arg_0 = $1;
 $2 = $self; //@line 157 "/checkout/src/libcore/option.rs"
 HEAP32[$_3>>2] = $2; //@line 157 "/checkout/src/libcore/option.rs"
 $3 = HEAP32[$_3>>2]|0; //@line 157 "/checkout/src/libcore/option.rs"
 $4 = HEAP32[$3>>2]|0; //@line 157 "/checkout/src/libcore/option.rs"
 $switch = ($4>>>0)<(1); //@line 157 "/checkout/src/libcore/option.rs"
 if ($switch) {
  $5 = $__arg_0; //@line 157 "/checkout/src/libcore/option.rs"
  __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder,$5,20637,4); //@line 157 "/checkout/src/libcore/option.rs"
  $6 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder)|0); //@line 157 "/checkout/src/libcore/option.rs"
  $7 = $6&1; //@line 157 "/checkout/src/libcore/option.rs"
  $_0 = $7; //@line 157 "/checkout/src/libcore/option.rs"
  $14 = $_0; //@line 157 "/checkout/src/libcore/option.rs"
  $15 = $14&1; //@line 157 "/checkout/src/libcore/option.rs"
  STACKTOP = sp;return ($15|0); //@line 157 "/checkout/src/libcore/option.rs"
 } else {
  $8 = HEAP32[$_3>>2]|0; //@line 165 "/checkout/src/libcore/option.rs"
  $9 = ((($8)) + 4|0); //@line 165 "/checkout/src/libcore/option.rs"
  $__self_0 = $9; //@line 165 "/checkout/src/libcore/option.rs"
  $10 = $__arg_0; //@line 157 "/checkout/src/libcore/option.rs"
  __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder1,$10,20641,4); //@line 157 "/checkout/src/libcore/option.rs"
  $11 = $__self_0; //@line 165 "/checkout/src/libcore/option.rs"
  HEAP32[$_21>>2] = $11; //@line 165 "/checkout/src/libcore/option.rs"
  (__ZN4core3fmt8builders10DebugTuple5field17hf986ac1f5cbaa58cE($builder1,$_21,7808)|0); //@line 157 "/checkout/src/libcore/option.rs"
  $12 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder1)|0); //@line 157 "/checkout/src/libcore/option.rs"
  $13 = $12&1; //@line 157 "/checkout/src/libcore/option.rs"
  $_0 = $13; //@line 157 "/checkout/src/libcore/option.rs"
  $14 = $_0; //@line 157 "/checkout/src/libcore/option.rs"
  $15 = $14&1; //@line 157 "/checkout/src/libcore/option.rs"
  STACKTOP = sp;return ($15|0); //@line 157 "/checkout/src/libcore/option.rs"
 }
 return (0)|0;
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h5ad2d3c111860cefE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $f = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $f = $1;
 $2 = $self; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$2>>2]|0; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $4 = ((($2)) + 4|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $5 = HEAP32[$4>>2]|0; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $6 = $f; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $7 = (__ZN48__LT__u5b_T_u5d__u20_as_u20_core__fmt__Debug_GT_3fmt17h673e828d3ebfca33E($3,$5,$6)|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return ($7|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN48__LT__u5b_T_u5d__u20_as_u20_core__fmt__Debug_GT_3fmt17h673e828d3ebfca33E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_6 = 0, $f = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $_6 = sp + 24|0;
 $self = sp + 8|0;
 HEAP32[$self>>2] = $0;
 $4 = ((($self)) + 4|0);
 HEAP32[$4>>2] = $1;
 $f = $2;
 $5 = $f; //@line 1721 "/checkout/src/libcore/fmt/mod.rs"
 __ZN4core3fmt9Formatter10debug_list17h56ec3c72e2ce18dfE($_6,$5); //@line 1721 "/checkout/src/libcore/fmt/mod.rs"
 $6 = HEAP32[$self>>2]|0; //@line 1721 "/checkout/src/libcore/fmt/mod.rs"
 $7 = ((($self)) + 4|0); //@line 1721 "/checkout/src/libcore/fmt/mod.rs"
 $8 = HEAP32[$7>>2]|0; //@line 1721 "/checkout/src/libcore/fmt/mod.rs"
 __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_4iter17h6cc26cb8c0ed0e97E($3,$6,$8); //@line 1721 "/checkout/src/libcore/fmt/mod.rs"
 $$sreg$field = HEAP32[$3>>2]|0; //@line 1721 "/checkout/src/libcore/fmt/mod.rs"
 $$sreg$index1 = ((($3)) + 4|0); //@line 1721 "/checkout/src/libcore/fmt/mod.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 1721 "/checkout/src/libcore/fmt/mod.rs"
 $9 = (__ZN4core3fmt8builders9DebugList7entries17h65696111751be760E($_6,$$sreg$field,$$sreg$field2)|0); //@line 1721 "/checkout/src/libcore/fmt/mod.rs"
 $10 = (__ZN4core3fmt8builders9DebugList6finish17h7208d0b6ae987befE($9)|0); //@line 1721 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return ($10|0); //@line 1722 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h6d4b64702f7faf25E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $f = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $f = $1;
 $2 = $self; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$2>>2]|0; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $4 = $f; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $5 = (__ZN4core3fmt3num50__LT_impl_u20_core__fmt__Debug_u20_for_u20_u32_GT_3fmt17h132f420c75d3aee9E($3,$4)|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return ($5|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h80367485aaaa7b3fE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $f = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $f = $1;
 $2 = $self; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$2>>2]|0; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $4 = $f; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $5 = (__ZN4core3fmt5float50__LT_impl_u20_core__fmt__Debug_u20_for_u20_f32_GT_3fmt17hf6b3c2dcdf8b3b67E($3,$4)|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return ($5|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h841ff1d24841d75dE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $f = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $f = $1;
 $2 = $self; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$2>>2]|0; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $4 = $f; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $5 = (__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h892ed255c2d873ddE($3,$4)|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return ($5|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h892ed255c2d873ddE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $f = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $f = $1;
 $2 = $self; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$2>>2]|0; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $4 = ((($2)) + 4|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $5 = HEAP32[$4>>2]|0; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $6 = $f; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $7 = (__ZN40__LT_str_u20_as_u20_core__fmt__Debug_GT_3fmt17h05cf80b836a24333E($3,$5,$6)|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return ($7|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17ha7b5c8ab3e643687E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $f = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $f = $1;
 $2 = $self; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$2>>2]|0; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $4 = ((($2)) + 4|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $5 = HEAP32[$4>>2]|0; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $6 = $f; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $7 = (__ZN48__LT__u5b_T_u5d__u20_as_u20_core__fmt__Debug_GT_3fmt17h5b3a38023ae96a17E($3,$5,$6)|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return ($7|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN48__LT__u5b_T_u5d__u20_as_u20_core__fmt__Debug_GT_3fmt17h5b3a38023ae96a17E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_6 = 0, $f = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $_6 = sp + 24|0;
 $self = sp + 8|0;
 HEAP32[$self>>2] = $0;
 $4 = ((($self)) + 4|0);
 HEAP32[$4>>2] = $1;
 $f = $2;
 $5 = $f; //@line 1721 "/checkout/src/libcore/fmt/mod.rs"
 __ZN4core3fmt9Formatter10debug_list17h56ec3c72e2ce18dfE($_6,$5); //@line 1721 "/checkout/src/libcore/fmt/mod.rs"
 $6 = HEAP32[$self>>2]|0; //@line 1721 "/checkout/src/libcore/fmt/mod.rs"
 $7 = ((($self)) + 4|0); //@line 1721 "/checkout/src/libcore/fmt/mod.rs"
 $8 = HEAP32[$7>>2]|0; //@line 1721 "/checkout/src/libcore/fmt/mod.rs"
 __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_4iter17hc8fcc8d911832325E($3,$6,$8); //@line 1721 "/checkout/src/libcore/fmt/mod.rs"
 $$sreg$field = HEAP32[$3>>2]|0; //@line 1721 "/checkout/src/libcore/fmt/mod.rs"
 $$sreg$index1 = ((($3)) + 4|0); //@line 1721 "/checkout/src/libcore/fmt/mod.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 1721 "/checkout/src/libcore/fmt/mod.rs"
 $9 = (__ZN4core3fmt8builders9DebugList7entries17h8fcbcf38dc4d588aE($_6,$$sreg$field,$$sreg$field2)|0); //@line 1721 "/checkout/src/libcore/fmt/mod.rs"
 $10 = (__ZN4core3fmt8builders9DebugList6finish17h7208d0b6ae987befE($9)|0); //@line 1721 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return ($10|0); //@line 1722 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17he6f4e1771f7c66c3E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $f = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $f = $1;
 $2 = $self; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$2>>2]|0; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $4 = $f; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $5 = (__ZN4core3fmt3num50__LT_impl_u20_core__fmt__Debug_u20_for_u20_i32_GT_3fmt17h6be49b2b2c2ab878E($3,$4)|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return ($5|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17hcde6e7b16c6b0ce2E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $f = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $f = $1;
 $2 = $self; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$2>>2]|0; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $4 = ((($2)) + 4|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $5 = HEAP32[$4>>2]|0; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $6 = $f; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $7 = (__ZN42__LT_str_u20_as_u20_core__fmt__Display_GT_3fmt17hd64e49219890df95E($3,$5,$6)|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return ($7|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN5alloc5slice29__LT_impl_u20__u5b_T_u5d__GT_10as_mut_ptr17h254a168a70e8498aE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp;
 HEAP32[$self>>2] = $0;
 $2 = ((($self)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$self>>2]|0; //@line 499 "/checkout/src/liballoc/slice.rs"
 $4 = ((($self)) + 4|0); //@line 499 "/checkout/src/liballoc/slice.rs"
 $5 = HEAP32[$4>>2]|0; //@line 499 "/checkout/src/liballoc/slice.rs"
 $6 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17heeea9b4ebe4b9395E($3,$5)|0); //@line 499 "/checkout/src/liballoc/slice.rs"
 STACKTOP = sp;return ($6|0); //@line 500 "/checkout/src/liballoc/slice.rs"
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17heeea9b4ebe4b9395E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp;
 HEAP32[$self>>2] = $0;
 $2 = ((($self)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$self>>2]|0; //@line 617 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return ($3|0); //@line 618 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN5alloc5slice29__LT_impl_u20__u5b_T_u5d__GT_10as_mut_ptr17h6c03f87f3ba1fee6E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp;
 HEAP32[$self>>2] = $0;
 $2 = ((($self)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$self>>2]|0; //@line 499 "/checkout/src/liballoc/slice.rs"
 $4 = ((($self)) + 4|0); //@line 499 "/checkout/src/liballoc/slice.rs"
 $5 = HEAP32[$4>>2]|0; //@line 499 "/checkout/src/liballoc/slice.rs"
 $6 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17h38d67f45a9b8f8e1E($3,$5)|0); //@line 499 "/checkout/src/liballoc/slice.rs"
 STACKTOP = sp;return ($6|0); //@line 500 "/checkout/src/liballoc/slice.rs"
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17h38d67f45a9b8f8e1E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp;
 HEAP32[$self>>2] = $0;
 $2 = ((($self)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$self>>2]|0; //@line 617 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return ($3|0); //@line 618 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN5alloc5slice29__LT_impl_u20__u5b_T_u5d__GT_3len17h1323cc666845b080E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp;
 HEAP32[$self>>2] = $0;
 $2 = ((($self)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$self>>2]|0; //@line 185 "/checkout/src/liballoc/slice.rs"
 $4 = ((($self)) + 4|0); //@line 185 "/checkout/src/liballoc/slice.rs"
 $5 = HEAP32[$4>>2]|0; //@line 185 "/checkout/src/liballoc/slice.rs"
 $6 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17h515f4de624d936e8E($3,$5)|0); //@line 185 "/checkout/src/liballoc/slice.rs"
 STACKTOP = sp;return ($6|0); //@line 186 "/checkout/src/liballoc/slice.rs"
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17h515f4de624d936e8E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $self = 0, $transmute_temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $transmute_temp = sp + 8|0;
 $self = sp;
 HEAP32[$self>>2] = $0;
 $2 = ((($self)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$self>>2]|0; //@line 418 "/checkout/src/libcore/slice/mod.rs"
 $4 = ((($self)) + 4|0); //@line 418 "/checkout/src/libcore/slice/mod.rs"
 $5 = HEAP32[$4>>2]|0; //@line 418 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$transmute_temp>>2] = $3; //@line 418 "/checkout/src/libcore/slice/mod.rs"
 $6 = ((($transmute_temp)) + 4|0); //@line 418 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$6>>2] = $5; //@line 418 "/checkout/src/libcore/slice/mod.rs"
 $7 = ((($transmute_temp)) + 4|0); //@line 418 "/checkout/src/libcore/slice/mod.rs"
 $8 = HEAP32[$7>>2]|0; //@line 418 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return ($8|0); //@line 420 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN5alloc5slice29__LT_impl_u20__u5b_T_u5d__GT_3len17hbc05eed2d9497129E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp;
 HEAP32[$self>>2] = $0;
 $2 = ((($self)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$self>>2]|0; //@line 185 "/checkout/src/liballoc/slice.rs"
 $4 = ((($self)) + 4|0); //@line 185 "/checkout/src/liballoc/slice.rs"
 $5 = HEAP32[$4>>2]|0; //@line 185 "/checkout/src/liballoc/slice.rs"
 $6 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17h4da066b4095e0d62E($3,$5)|0); //@line 185 "/checkout/src/liballoc/slice.rs"
 STACKTOP = sp;return ($6|0); //@line 186 "/checkout/src/liballoc/slice.rs"
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17h4da066b4095e0d62E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $self = 0, $transmute_temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $transmute_temp = sp + 8|0;
 $self = sp;
 HEAP32[$self>>2] = $0;
 $2 = ((($self)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$self>>2]|0; //@line 418 "/checkout/src/libcore/slice/mod.rs"
 $4 = ((($self)) + 4|0); //@line 418 "/checkout/src/libcore/slice/mod.rs"
 $5 = HEAP32[$4>>2]|0; //@line 418 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$transmute_temp>>2] = $3; //@line 418 "/checkout/src/libcore/slice/mod.rs"
 $6 = ((($transmute_temp)) + 4|0); //@line 418 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$6>>2] = $5; //@line 418 "/checkout/src/libcore/slice/mod.rs"
 $7 = ((($transmute_temp)) + 4|0); //@line 418 "/checkout/src/libcore/slice/mod.rs"
 $8 = HEAP32[$7>>2]|0; //@line 418 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return ($8|0); //@line 420 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN5alloc5slice29__LT_impl_u20__u5b_T_u5d__GT_8into_vec17h1874004f46d2c659E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp;
 HEAP32[$self>>2] = $1;
 $3 = ((($self)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$self>>2]|0; //@line 1625 "/checkout/src/liballoc/slice.rs"
 $5 = ((($self)) + 4|0); //@line 1625 "/checkout/src/liballoc/slice.rs"
 $6 = HEAP32[$5>>2]|0; //@line 1625 "/checkout/src/liballoc/slice.rs"
 __ZN5alloc5slice4hack8into_vec17h77347666c02ce767E($0,$4,$6); //@line 1625 "/checkout/src/liballoc/slice.rs"
 STACKTOP = sp;return; //@line 1626 "/checkout/src/liballoc/slice.rs"
}
function __ZN5alloc5slice29__LT_impl_u20__u5b_T_u5d__GT_8into_vec17h3318c47ea947c838E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp;
 HEAP32[$self>>2] = $1;
 $3 = ((($self)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$self>>2]|0; //@line 1625 "/checkout/src/liballoc/slice.rs"
 $5 = ((($self)) + 4|0); //@line 1625 "/checkout/src/liballoc/slice.rs"
 $6 = HEAP32[$5>>2]|0; //@line 1625 "/checkout/src/liballoc/slice.rs"
 __ZN5alloc5slice4hack8into_vec17he4b44abd93cb884aE($0,$4,$6); //@line 1625 "/checkout/src/liballoc/slice.rs"
 STACKTOP = sp;return; //@line 1626 "/checkout/src/liballoc/slice.rs"
}
function __ZN69__LT_core__option__Option_LT_T_GT__u20_as_u20_core__ops__try__Try_GT_10from_error17h9ad7629c3cfde964E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0; //@line 1201 "/checkout/src/libcore/option.rs"
 return; //@line 1202 "/checkout/src/libcore/option.rs"
}
function __ZN69__LT_core__option__Option_LT_T_GT__u20_as_u20_core__ops__try__Try_GT_11into_result17h2fbc057d4b513b9dE($0,$self) {
 $0 = $0|0;
 $self = $self|0;
 var $_2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_2 = sp; //@line 1 "/checkout/src/libcore/option.rs"
 ;HEAP32[$_2>>2]=HEAP32[$self>>2]|0;HEAP32[$_2+4>>2]=HEAP32[$self+4>>2]|0; //@line 1193 "/checkout/src/libcore/option.rs"
 __ZN38__LT_core__option__Option_LT_T_GT__GT_5ok_or17h72b603736f0bd2b5E($0,$_2); //@line 1193 "/checkout/src/libcore/option.rs"
 STACKTOP = sp;return; //@line 1194 "/checkout/src/libcore/option.rs"
}
function __ZN38__LT_core__option__Option_LT_T_GT__GT_5ok_or17h72b603736f0bd2b5E($0,$self) {
 $0 = $0|0;
 $self = $self|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_7 = 0, $_8 = 0, $cond = 0, $switch = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_7 = 0; //@line 484 "/checkout/src/libcore/option.rs"
 $_8 = 0; //@line 484 "/checkout/src/libcore/option.rs"
 $_7 = 1; //@line 484 "/checkout/src/libcore/option.rs"
 $_8 = 1; //@line 484 "/checkout/src/libcore/option.rs"
 $1 = HEAP32[$self>>2]|0; //@line 484 "/checkout/src/libcore/option.rs"
 $switch = ($1>>>0)<(1); //@line 484 "/checkout/src/libcore/option.rs"
 if ($switch) {
  $_8 = 0; //@line 485 "/checkout/src/libcore/option.rs"
  HEAP32[$0>>2] = 1; //@line 485 "/checkout/src/libcore/option.rs"
 } else {
  $_7 = 0; //@line 484 "/checkout/src/libcore/option.rs"
  $2 = ((($self)) + 4|0); //@line 484 "/checkout/src/libcore/option.rs"
  $3 = HEAP32[$2>>2]|0; //@line 484 "/checkout/src/libcore/option.rs"
  $v = $3; //@line 484 "/checkout/src/libcore/option.rs"
  $4 = $v; //@line 484 "/checkout/src/libcore/option.rs"
  HEAP32[$0>>2] = 0; //@line 484 "/checkout/src/libcore/option.rs"
  $5 = ((($0)) + 4|0); //@line 484 "/checkout/src/libcore/option.rs"
  HEAP32[$5>>2] = $4; //@line 484 "/checkout/src/libcore/option.rs"
 }
 $6 = $_8; //@line 487 "/checkout/src/libcore/option.rs"
 $7 = $6&1; //@line 487 "/checkout/src/libcore/option.rs"
 if ($7) {
  $_8 = 0; //@line 487 "/checkout/src/libcore/option.rs"
 }
 $8 = HEAP32[$self>>2]|0; //@line 487 "/checkout/src/libcore/option.rs"
 $cond = ($8|0)==(1); //@line 487 "/checkout/src/libcore/option.rs"
 if (!($cond)) {
  STACKTOP = sp;return; //@line 487 "/checkout/src/libcore/option.rs"
 }
 $9 = $_7; //@line 487 "/checkout/src/libcore/option.rs"
 $10 = $9&1; //@line 487 "/checkout/src/libcore/option.rs"
 if (!($10)) {
  STACKTOP = sp;return; //@line 487 "/checkout/src/libcore/option.rs"
 }
 $_7 = 0; //@line 487 "/checkout/src/libcore/option.rs"
 STACKTOP = sp;return; //@line 487 "/checkout/src/libcore/option.rs"
}
function __ZN103__LT_core__ops__range__RangeFrom_LT_usize_GT__u20_as_u20_core__slice__SliceIndex_LT__u5b_T_u5d__GT__GT_17get_unchecked_mut17hdba1959034ef629dE($retVal,$0,$1,$2) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_5 = 0, $retVal$index4 = 0, $self = 0;
 var $slice = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $_5 = sp + 24|0;
 $slice = sp + 16|0;
 $self = $0;
 HEAP32[$slice>>2] = $1;
 $4 = ((($slice)) + 4|0);
 HEAP32[$4>>2] = $2;
 $5 = $self; //@line 952 "/checkout/src/libcore/slice/mod.rs"
 $6 = HEAP32[$slice>>2]|0; //@line 952 "/checkout/src/libcore/slice/mod.rs"
 $7 = ((($slice)) + 4|0); //@line 952 "/checkout/src/libcore/slice/mod.rs"
 $8 = HEAP32[$7>>2]|0; //@line 952 "/checkout/src/libcore/slice/mod.rs"
 $9 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17hfdc6b0e89d42ed58E($6,$8)|0); //@line 952 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$_5>>2] = $5; //@line 952 "/checkout/src/libcore/slice/mod.rs"
 $10 = ((($_5)) + 4|0); //@line 952 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$10>>2] = $9; //@line 952 "/checkout/src/libcore/slice/mod.rs"
 $11 = HEAP32[$slice>>2]|0; //@line 952 "/checkout/src/libcore/slice/mod.rs"
 $12 = ((($slice)) + 4|0); //@line 952 "/checkout/src/libcore/slice/mod.rs"
 $13 = HEAP32[$12>>2]|0; //@line 952 "/checkout/src/libcore/slice/mod.rs"
 $14 = HEAP32[$_5>>2]|0; //@line 952 "/checkout/src/libcore/slice/mod.rs"
 $15 = ((($_5)) + 4|0); //@line 952 "/checkout/src/libcore/slice/mod.rs"
 $16 = HEAP32[$15>>2]|0; //@line 952 "/checkout/src/libcore/slice/mod.rs"
 __ZN99__LT_core__ops__range__Range_LT_usize_GT__u20_as_u20_core__slice__SliceIndex_LT__u5b_T_u5d__GT__GT_17get_unchecked_mut17h69b93e34afcd6a60E($3,$14,$16,$11,$13); //@line 952 "/checkout/src/libcore/slice/mod.rs"
 $$sreg$field = HEAP32[$3>>2]|0; //@line 952 "/checkout/src/libcore/slice/mod.rs"
 $$sreg$index1 = ((($3)) + 4|0); //@line 952 "/checkout/src/libcore/slice/mod.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 952 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$retVal>>2] = $$sreg$field; //@line 953 "/checkout/src/libcore/slice/mod.rs"
 $retVal$index4 = ((($retVal)) + 4|0); //@line 953 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$retVal$index4>>2] = $$sreg$field2; //@line 953 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return; //@line 953 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN99__LT_core__ops__range__Range_LT_usize_GT__u20_as_u20_core__slice__SliceIndex_LT__u5b_T_u5d__GT__GT_17get_unchecked_mut17h69b93e34afcd6a60E($retVal,$0,$1,$2,$3) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $retVal$index4 = 0, $self = 0, $slice = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $slice = sp + 16|0;
 $self = sp + 8|0;
 HEAP32[$self>>2] = $0;
 $5 = ((($self)) + 4|0);
 HEAP32[$5>>2] = $1;
 HEAP32[$slice>>2] = $2;
 $6 = ((($slice)) + 4|0);
 HEAP32[$6>>2] = $3;
 $7 = HEAP32[$slice>>2]|0; //@line 868 "/checkout/src/libcore/slice/mod.rs"
 $8 = ((($slice)) + 4|0); //@line 868 "/checkout/src/libcore/slice/mod.rs"
 $9 = HEAP32[$8>>2]|0; //@line 868 "/checkout/src/libcore/slice/mod.rs"
 $10 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17h898f1ba250b2d318E($7,$9)|0); //@line 868 "/checkout/src/libcore/slice/mod.rs"
 $11 = HEAP32[$self>>2]|0; //@line 868 "/checkout/src/libcore/slice/mod.rs"
 $12 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_6offset17h0a36fcf400b954f6E($10,$11)|0); //@line 868 "/checkout/src/libcore/slice/mod.rs"
 $13 = ((($self)) + 4|0); //@line 868 "/checkout/src/libcore/slice/mod.rs"
 $14 = HEAP32[$13>>2]|0; //@line 868 "/checkout/src/libcore/slice/mod.rs"
 $15 = HEAP32[$self>>2]|0; //@line 868 "/checkout/src/libcore/slice/mod.rs"
 $16 = (($14) - ($15))|0; //@line 868 "/checkout/src/libcore/slice/mod.rs"
 __ZN4core5slice18from_raw_parts_mut17hb4ceac10870c9537E($4,$12,$16); //@line 868 "/checkout/src/libcore/slice/mod.rs"
 $$sreg$field = HEAP32[$4>>2]|0; //@line 868 "/checkout/src/libcore/slice/mod.rs"
 $$sreg$index1 = ((($4)) + 4|0); //@line 868 "/checkout/src/libcore/slice/mod.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 868 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$retVal>>2] = $$sreg$field; //@line 869 "/checkout/src/libcore/slice/mod.rs"
 $retVal$index4 = ((($retVal)) + 4|0); //@line 869 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$retVal$index4>>2] = $$sreg$field2; //@line 869 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return; //@line 869 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN3std3f3221__LT_impl_u20_f32_GT_3cos17hf8a0a9a2de44c759E($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $self = 0.0, $tmp_ret = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 706 "/checkout/src/libstd/f32.rs"
 $2 = (+Math_cos((+$1))); //@line 706 "/checkout/src/libstd/f32.rs"
 $tmp_ret = $2; //@line 706 "/checkout/src/libstd/f32.rs"
 $3 = $tmp_ret; //@line 706 "/checkout/src/libstd/f32.rs"
 STACKTOP = sp;return (+$3); //@line 707 "/checkout/src/libstd/f32.rs"
}
function __ZN3std3f3221__LT_impl_u20_f32_GT_4sqrt17hbb28710c3caffed0E($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $_0 = 0.0, $self = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 400 "/checkout/src/libstd/f32.rs"
 $2 = $1 < 0.0; //@line 400 "/checkout/src/libstd/f32.rs"
 if ($2) {
  $_0 = nan; //@line 401 "/checkout/src/libstd/f32.rs"
 } else {
  $3 = $self; //@line 403 "/checkout/src/libstd/f32.rs"
  $4 = (+Math_sqrt((+$3))); //@line 403 "/checkout/src/libstd/f32.rs"
  $_0 = $4; //@line 403 "/checkout/src/libstd/f32.rs"
 }
 $5 = $_0; //@line 405 "/checkout/src/libstd/f32.rs"
 STACKTOP = sp;return (+$5); //@line 405 "/checkout/src/libstd/f32.rs"
}
function __ZN3std3f3221__LT_impl_u20_f32_GT_7sin_cos17heaf68361e181d19aE($retVal,$0) {
 $retVal = $retVal|0;
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $_0 = 0, $retVal$index1 = 0, $self = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_0 = sp + 8|0;
 $self = $0;
 $1 = $self; //@line 834 "/checkout/src/libstd/f32.rs"
 $2 = (+__ZN3std3f3221__LT_impl_u20_f32_GT_3sin17h7b3c1498753ed05bE($1)); //@line 834 "/checkout/src/libstd/f32.rs"
 $3 = $self; //@line 834 "/checkout/src/libstd/f32.rs"
 $4 = (+__ZN3std3f3221__LT_impl_u20_f32_GT_3cos17hf8a0a9a2de44c759E($3)); //@line 834 "/checkout/src/libstd/f32.rs"
 HEAPF32[$_0>>2] = $2; //@line 834 "/checkout/src/libstd/f32.rs"
 $5 = ((($_0)) + 4|0); //@line 834 "/checkout/src/libstd/f32.rs"
 HEAPF32[$5>>2] = $4; //@line 834 "/checkout/src/libstd/f32.rs"
 $6 = +HEAPF32[$_0>>2]; //@line 835 "/checkout/src/libstd/f32.rs"
 $7 = ((($_0)) + 4|0); //@line 835 "/checkout/src/libstd/f32.rs"
 $8 = +HEAPF32[$7>>2]; //@line 835 "/checkout/src/libstd/f32.rs"
 HEAPF32[$retVal>>2] = $6; //@line 835 "/checkout/src/libstd/f32.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 835 "/checkout/src/libstd/f32.rs"
 HEAPF32[$retVal$index1>>2] = $8; //@line 835 "/checkout/src/libstd/f32.rs"
 STACKTOP = sp;return; //@line 835 "/checkout/src/libstd/f32.rs"
}
function __ZN3std3f3221__LT_impl_u20_f32_GT_3sin17h7b3c1498753ed05bE($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $self = 0.0, $tmp_ret = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 685 "/checkout/src/libstd/f32.rs"
 $2 = (+Math_sin((+$1))); //@line 685 "/checkout/src/libstd/f32.rs"
 $tmp_ret = $2; //@line 685 "/checkout/src/libstd/f32.rs"
 $3 = $tmp_ret; //@line 685 "/checkout/src/libstd/f32.rs"
 STACKTOP = sp;return (+$3); //@line 686 "/checkout/src/libstd/f32.rs"
}
function __ZN40__LT_core__nonzero__NonZero_LT_T_GT__GT_13new_unchecked17h13098a01db1d72adE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $_0 = 0, $inner = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $inner = $0;
 $1 = $inner; //@line 75 "/checkout/src/libcore/nonzero.rs"
 $_0 = $1; //@line 75 "/checkout/src/libcore/nonzero.rs"
 $2 = $_0; //@line 76 "/checkout/src/libcore/nonzero.rs"
 STACKTOP = sp;return ($2|0); //@line 76 "/checkout/src/libcore/nonzero.rs"
}
function __ZN40__LT_core__nonzero__NonZero_LT_T_GT__GT_13new_unchecked17h2b46601ecb155fe8E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $_0 = 0, $inner = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_0 = sp + 4|0;
 $inner = $0;
 $1 = $inner; //@line 75 "/checkout/src/libcore/nonzero.rs"
 HEAP32[$_0>>2] = $1; //@line 75 "/checkout/src/libcore/nonzero.rs"
 $2 = HEAP32[$_0>>2]|0; //@line 76 "/checkout/src/libcore/nonzero.rs"
 STACKTOP = sp;return ($2|0); //@line 76 "/checkout/src/libcore/nonzero.rs"
}
function __ZN40__LT_core__nonzero__NonZero_LT_T_GT__GT_13new_unchecked17h69aa2a1631ed1227E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $_0 = 0, $inner = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_0 = sp + 4|0;
 $inner = $0;
 $1 = $inner; //@line 75 "/checkout/src/libcore/nonzero.rs"
 HEAP32[$_0>>2] = $1; //@line 75 "/checkout/src/libcore/nonzero.rs"
 $2 = HEAP32[$_0>>2]|0; //@line 76 "/checkout/src/libcore/nonzero.rs"
 STACKTOP = sp;return ($2|0); //@line 76 "/checkout/src/libcore/nonzero.rs"
}
function __ZN40__LT_core__nonzero__NonZero_LT_T_GT__GT_13new_unchecked17h6cd7c874a8dbeb23E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $_0 = 0, $inner = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_0 = sp + 4|0;
 $inner = $0;
 $1 = $inner; //@line 75 "/checkout/src/libcore/nonzero.rs"
 HEAP32[$_0>>2] = $1; //@line 75 "/checkout/src/libcore/nonzero.rs"
 $2 = HEAP32[$_0>>2]|0; //@line 76 "/checkout/src/libcore/nonzero.rs"
 STACKTOP = sp;return ($2|0); //@line 76 "/checkout/src/libcore/nonzero.rs"
}
function __ZN40__LT_core__nonzero__NonZero_LT_T_GT__GT_13new_unchecked17h76c1345f2162671dE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $_0 = 0, $inner = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $inner = $0;
 $1 = $inner; //@line 75 "/checkout/src/libcore/nonzero.rs"
 $_0 = $1; //@line 75 "/checkout/src/libcore/nonzero.rs"
 $2 = $_0; //@line 76 "/checkout/src/libcore/nonzero.rs"
 STACKTOP = sp;return ($2|0); //@line 76 "/checkout/src/libcore/nonzero.rs"
}
function __ZN40__LT_core__nonzero__NonZero_LT_T_GT__GT_13new_unchecked17h782eee845be98642E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $_0 = 0, $inner = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_0 = sp + 4|0;
 $inner = $0;
 $1 = $inner; //@line 75 "/checkout/src/libcore/nonzero.rs"
 HEAP32[$_0>>2] = $1; //@line 75 "/checkout/src/libcore/nonzero.rs"
 $2 = HEAP32[$_0>>2]|0; //@line 76 "/checkout/src/libcore/nonzero.rs"
 STACKTOP = sp;return ($2|0); //@line 76 "/checkout/src/libcore/nonzero.rs"
}
function __ZN40__LT_core__nonzero__NonZero_LT_T_GT__GT_13new_unchecked17hb5354d34b3674381E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $_0 = 0, $inner = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_0 = sp + 4|0;
 $inner = $0;
 $1 = $inner; //@line 75 "/checkout/src/libcore/nonzero.rs"
 HEAP32[$_0>>2] = $1; //@line 75 "/checkout/src/libcore/nonzero.rs"
 $2 = HEAP32[$_0>>2]|0; //@line 76 "/checkout/src/libcore/nonzero.rs"
 STACKTOP = sp;return ($2|0); //@line 76 "/checkout/src/libcore/nonzero.rs"
}
function __ZN40__LT_core__nonzero__NonZero_LT_T_GT__GT_3get17h04b45df7b689e7a2E($0) {
 $0 = $0|0;
 var $1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp;
 HEAP32[$self>>2] = $0;
 $1 = HEAP32[$self>>2]|0; //@line 90 "/checkout/src/libcore/nonzero.rs"
 STACKTOP = sp;return ($1|0); //@line 91 "/checkout/src/libcore/nonzero.rs"
}
function __ZN40__LT_core__nonzero__NonZero_LT_T_GT__GT_3get17h103d68e3956fc209E($0) {
 $0 = $0|0;
 var $1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp;
 HEAP32[$self>>2] = $0;
 $1 = HEAP32[$self>>2]|0; //@line 90 "/checkout/src/libcore/nonzero.rs"
 STACKTOP = sp;return ($1|0); //@line 91 "/checkout/src/libcore/nonzero.rs"
}
function __ZN40__LT_core__nonzero__NonZero_LT_T_GT__GT_3get17h22ca0b1071656f0bE($0) {
 $0 = $0|0;
 var $1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 90 "/checkout/src/libcore/nonzero.rs"
 STACKTOP = sp;return ($1|0); //@line 91 "/checkout/src/libcore/nonzero.rs"
}
function __ZN40__LT_core__nonzero__NonZero_LT_T_GT__GT_3get17h29ad1d9c8de52510E($0) {
 $0 = $0|0;
 var $1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp;
 HEAP32[$self>>2] = $0;
 $1 = HEAP32[$self>>2]|0; //@line 90 "/checkout/src/libcore/nonzero.rs"
 STACKTOP = sp;return ($1|0); //@line 91 "/checkout/src/libcore/nonzero.rs"
}
function __ZN40__LT_core__nonzero__NonZero_LT_T_GT__GT_3get17h52e719d1fff06b8cE($0) {
 $0 = $0|0;
 var $1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp;
 HEAP32[$self>>2] = $0;
 $1 = HEAP32[$self>>2]|0; //@line 90 "/checkout/src/libcore/nonzero.rs"
 STACKTOP = sp;return ($1|0); //@line 91 "/checkout/src/libcore/nonzero.rs"
}
function __ZN40__LT_core__nonzero__NonZero_LT_T_GT__GT_3get17h821ac8bef9593fc7E($0) {
 $0 = $0|0;
 var $1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp;
 HEAP32[$self>>2] = $0;
 $1 = HEAP32[$self>>2]|0; //@line 90 "/checkout/src/libcore/nonzero.rs"
 STACKTOP = sp;return ($1|0); //@line 91 "/checkout/src/libcore/nonzero.rs"
}
function __ZN40__LT_core__nonzero__NonZero_LT_T_GT__GT_3get17haa49b52a9de79e75E($0) {
 $0 = $0|0;
 var $1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 90 "/checkout/src/libcore/nonzero.rs"
 STACKTOP = sp;return ($1|0); //@line 91 "/checkout/src/libcore/nonzero.rs"
}
function __ZN4core4iter5range93__LT_impl_u20_core__iter__iterator__Iterator_u20_for_u20_core__ops__range__Range_LT_A_GT__GT_4next17h055eab57e277f6b6E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $_15 = 0, $_5 = 0, $cond = 0, $cond1 = 0, $n = 0, $personalityslot = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $personalityslot = sp + 24|0;
 $n = sp + 16|0;
 $_5 = sp + 8|0;
 $self = $1;
 $_15 = 0; //@line 218 "/checkout/src/libcore/iter/range.rs"
 $2 = $self; //@line 218 "/checkout/src/libcore/iter/range.rs"
 $3 = $self; //@line 218 "/checkout/src/libcore/iter/range.rs"
 $4 = ((($3)) + 4|0); //@line 218 "/checkout/src/libcore/iter/range.rs"
 $5 = (__ZN4core3cmp5impls57__LT_impl_u20_core__cmp__PartialOrd_u20_for_u20_usize_GT_2lt17hc24b885bc352bf1cE($2,$4)|0); //@line 218 "/checkout/src/libcore/iter/range.rs"
 if (!($5)) {
  HEAP32[$0>>2] = 0; //@line 230 "/checkout/src/libcore/iter/range.rs"
  STACKTOP = sp;return; //@line 232 "/checkout/src/libcore/iter/range.rs"
 }
 $6 = $self; //@line 223 "/checkout/src/libcore/iter/range.rs"
 $_15 = 1; //@line 223 "/checkout/src/libcore/iter/range.rs"
 __ZN49__LT_usize_u20_as_u20_core__iter__range__Step_GT_9add_usize17h0cff4dd1ce46cac8E($_5,$6,1); //@line 223 "/checkout/src/libcore/iter/range.rs"
 $7 = HEAP32[$_5>>2]|0; //@line 223 "/checkout/src/libcore/iter/range.rs"
 $cond = ($7|0)==(1); //@line 223 "/checkout/src/libcore/iter/range.rs"
 do {
  if ($cond) {
   $_15 = 0; //@line 223 "/checkout/src/libcore/iter/range.rs"
   $8 = ((($_5)) + 4|0); //@line 223 "/checkout/src/libcore/iter/range.rs"
   $9 = HEAP32[$8>>2]|0; //@line 223 "/checkout/src/libcore/iter/range.rs"
   HEAP32[$n>>2] = $9; //@line 223 "/checkout/src/libcore/iter/range.rs"
   $10 = $self; //@line 224 "/checkout/src/libcore/iter/range.rs"
   __THREW__ = 0;
   invoke_vii(365,($n|0),($10|0)); //@line 224 "/checkout/src/libcore/iter/range.rs"
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if ($12) {
    $18 = ___cxa_find_matching_catch_2()|0;
    $19 = tempRet0;
    HEAP32[$personalityslot>>2] = $18;
    $20 = ((($personalityslot)) + 4|0);
    HEAP32[$20>>2] = $19;
    $21 = HEAP32[$personalityslot>>2]|0; //@line 217 "/checkout/src/libcore/iter/range.rs"
    $22 = ((($personalityslot)) + 4|0); //@line 217 "/checkout/src/libcore/iter/range.rs"
    $23 = HEAP32[$22>>2]|0; //@line 217 "/checkout/src/libcore/iter/range.rs"
    ___resumeException($21|0);
    // unreachable;
   } else {
    $13 = HEAP32[$n>>2]|0; //@line 225 "/checkout/src/libcore/iter/range.rs"
    HEAP32[$0>>2] = 1; //@line 225 "/checkout/src/libcore/iter/range.rs"
    $14 = ((($0)) + 4|0); //@line 225 "/checkout/src/libcore/iter/range.rs"
    HEAP32[$14>>2] = $13; //@line 225 "/checkout/src/libcore/iter/range.rs"
    break;
   }
  } else {
   HEAP32[$0>>2] = 0; //@line 227 "/checkout/src/libcore/iter/range.rs"
  }
 } while(0);
 $15 = HEAP32[$_5>>2]|0; //@line 229 "/checkout/src/libcore/iter/range.rs"
 $cond1 = ($15|0)==(1); //@line 229 "/checkout/src/libcore/iter/range.rs"
 if ($cond1) {
  $16 = $_15; //@line 229 "/checkout/src/libcore/iter/range.rs"
  $17 = $16&1; //@line 229 "/checkout/src/libcore/iter/range.rs"
  if ($17) {
   $_15 = 0; //@line 229 "/checkout/src/libcore/iter/range.rs"
  }
 }
 $_15 = 0; //@line 229 "/checkout/src/libcore/iter/range.rs"
 STACKTOP = sp;return; //@line 232 "/checkout/src/libcore/iter/range.rs"
}
function __ZN4core4iter5range93__LT_impl_u20_core__iter__iterator__Iterator_u20_for_u20_core__ops__range__Range_LT_A_GT__GT_4next17h0721cb4ba09f53cdE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $_15 = 0, $_5 = 0, $cond = 0, $cond1 = 0, $n = 0, $personalityslot = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $personalityslot = sp + 24|0;
 $n = sp + 16|0;
 $_5 = sp + 8|0;
 $self = $1;
 $_15 = 0; //@line 218 "/checkout/src/libcore/iter/range.rs"
 $2 = $self; //@line 218 "/checkout/src/libcore/iter/range.rs"
 $3 = $self; //@line 218 "/checkout/src/libcore/iter/range.rs"
 $4 = ((($3)) + 4|0); //@line 218 "/checkout/src/libcore/iter/range.rs"
 $5 = (__ZN4core3cmp5impls55__LT_impl_u20_core__cmp__PartialOrd_u20_for_u20_i32_GT_2lt17ha0fd71492e508d8fE($2,$4)|0); //@line 218 "/checkout/src/libcore/iter/range.rs"
 if (!($5)) {
  HEAP32[$0>>2] = 0; //@line 230 "/checkout/src/libcore/iter/range.rs"
  STACKTOP = sp;return; //@line 232 "/checkout/src/libcore/iter/range.rs"
 }
 $6 = $self; //@line 223 "/checkout/src/libcore/iter/range.rs"
 $_15 = 1; //@line 223 "/checkout/src/libcore/iter/range.rs"
 __ZN47__LT_i32_u20_as_u20_core__iter__range__Step_GT_9add_usize17h30e5da2458d050daE($_5,$6,1); //@line 223 "/checkout/src/libcore/iter/range.rs"
 $7 = HEAP32[$_5>>2]|0; //@line 223 "/checkout/src/libcore/iter/range.rs"
 $cond = ($7|0)==(1); //@line 223 "/checkout/src/libcore/iter/range.rs"
 do {
  if ($cond) {
   $_15 = 0; //@line 223 "/checkout/src/libcore/iter/range.rs"
   $8 = ((($_5)) + 4|0); //@line 223 "/checkout/src/libcore/iter/range.rs"
   $9 = HEAP32[$8>>2]|0; //@line 223 "/checkout/src/libcore/iter/range.rs"
   HEAP32[$n>>2] = $9; //@line 223 "/checkout/src/libcore/iter/range.rs"
   $10 = $self; //@line 224 "/checkout/src/libcore/iter/range.rs"
   __THREW__ = 0;
   invoke_vii(366,($n|0),($10|0)); //@line 224 "/checkout/src/libcore/iter/range.rs"
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if ($12) {
    $18 = ___cxa_find_matching_catch_2()|0;
    $19 = tempRet0;
    HEAP32[$personalityslot>>2] = $18;
    $20 = ((($personalityslot)) + 4|0);
    HEAP32[$20>>2] = $19;
    $21 = HEAP32[$personalityslot>>2]|0; //@line 217 "/checkout/src/libcore/iter/range.rs"
    $22 = ((($personalityslot)) + 4|0); //@line 217 "/checkout/src/libcore/iter/range.rs"
    $23 = HEAP32[$22>>2]|0; //@line 217 "/checkout/src/libcore/iter/range.rs"
    ___resumeException($21|0);
    // unreachable;
   } else {
    $13 = HEAP32[$n>>2]|0; //@line 225 "/checkout/src/libcore/iter/range.rs"
    HEAP32[$0>>2] = 1; //@line 225 "/checkout/src/libcore/iter/range.rs"
    $14 = ((($0)) + 4|0); //@line 225 "/checkout/src/libcore/iter/range.rs"
    HEAP32[$14>>2] = $13; //@line 225 "/checkout/src/libcore/iter/range.rs"
    break;
   }
  } else {
   HEAP32[$0>>2] = 0; //@line 227 "/checkout/src/libcore/iter/range.rs"
  }
 } while(0);
 $15 = HEAP32[$_5>>2]|0; //@line 229 "/checkout/src/libcore/iter/range.rs"
 $cond1 = ($15|0)==(1); //@line 229 "/checkout/src/libcore/iter/range.rs"
 if ($cond1) {
  $16 = $_15; //@line 229 "/checkout/src/libcore/iter/range.rs"
  $17 = $16&1; //@line 229 "/checkout/src/libcore/iter/range.rs"
  if ($17) {
   $_15 = 0; //@line 229 "/checkout/src/libcore/iter/range.rs"
  }
 }
 $_15 = 0; //@line 229 "/checkout/src/libcore/iter/range.rs"
 STACKTOP = sp;return; //@line 232 "/checkout/src/libcore/iter/range.rs"
}
function __ZN54__LT_I_u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17h464a6e75c2087821E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $retVal$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp;
 HEAP32[$self>>2] = $0;
 $2 = ((($self)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$self>>2]|0; //@line 257 "/checkout/src/libcore/iter/traits.rs"
 $4 = ((($self)) + 4|0); //@line 257 "/checkout/src/libcore/iter/traits.rs"
 $5 = HEAP32[$4>>2]|0; //@line 257 "/checkout/src/libcore/iter/traits.rs"
 HEAP32[$retVal>>2] = $3; //@line 258 "/checkout/src/libcore/iter/traits.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 258 "/checkout/src/libcore/iter/traits.rs"
 HEAP32[$retVal$index1>>2] = $5; //@line 258 "/checkout/src/libcore/iter/traits.rs"
 STACKTOP = sp;return; //@line 258 "/checkout/src/libcore/iter/traits.rs"
}
function __ZN54__LT_I_u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17hdbcc8e125fee3dc0E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $retVal$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp;
 HEAP32[$self>>2] = $0;
 $2 = ((($self)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$self>>2]|0; //@line 257 "/checkout/src/libcore/iter/traits.rs"
 $4 = ((($self)) + 4|0); //@line 257 "/checkout/src/libcore/iter/traits.rs"
 $5 = HEAP32[$4>>2]|0; //@line 257 "/checkout/src/libcore/iter/traits.rs"
 HEAP32[$retVal>>2] = $3; //@line 258 "/checkout/src/libcore/iter/traits.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 258 "/checkout/src/libcore/iter/traits.rs"
 HEAP32[$retVal$index1>>2] = $5; //@line 258 "/checkout/src/libcore/iter/traits.rs"
 STACKTOP = sp;return; //@line 258 "/checkout/src/libcore/iter/traits.rs"
}
function __ZN5alloc9allocator5Alloc11alloc_array28__u7b__u7b_closure_u7d__u7d_17h0d2864211c15ad6fE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $p = $0;
 $1 = $p; //@line 974 "/checkout/src/liballoc/allocator.rs"
 $2 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_13new_unchecked17h4db77394a7746a1bE($1)|0); //@line 974 "/checkout/src/liballoc/allocator.rs"
 STACKTOP = sp;return ($2|0); //@line 975 "/checkout/src/liballoc/allocator.rs"
}
function __ZN5alloc9allocator5Alloc11alloc_array28__u7b__u7b_closure_u7d__u7d_17h1f902bf46361f460E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $p = $0;
 $1 = $p; //@line 974 "/checkout/src/liballoc/allocator.rs"
 $2 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_13new_unchecked17h0173a0f57669b1fcE($1)|0); //@line 974 "/checkout/src/liballoc/allocator.rs"
 STACKTOP = sp;return ($2|0); //@line 975 "/checkout/src/liballoc/allocator.rs"
}
function __ZN5alloc9allocator5Alloc11alloc_array28__u7b__u7b_closure_u7d__u7d_17h64c9501ad7df77aaE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $p = $0;
 $1 = $p; //@line 974 "/checkout/src/liballoc/allocator.rs"
 $2 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_13new_unchecked17h6e6eca53f3fccbfcE($1)|0); //@line 974 "/checkout/src/liballoc/allocator.rs"
 STACKTOP = sp;return ($2|0); //@line 975 "/checkout/src/liballoc/allocator.rs"
}
function __ZN5alloc9allocator6Layout25from_size_align_unchecked17h1f4c5097bb0a95f9E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $_0 = 0, $align = 0, $retVal$index1 = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_0 = sp + 8|0;
 $size = $0;
 $align = $1;
 $2 = $size; //@line 121 "/checkout/src/liballoc/allocator.rs"
 $3 = $align; //@line 121 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$_0>>2] = $2; //@line 121 "/checkout/src/liballoc/allocator.rs"
 $4 = ((($_0)) + 4|0); //@line 121 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$4>>2] = $3; //@line 121 "/checkout/src/liballoc/allocator.rs"
 $5 = HEAP32[$_0>>2]|0; //@line 122 "/checkout/src/liballoc/allocator.rs"
 $6 = ((($_0)) + 4|0); //@line 122 "/checkout/src/liballoc/allocator.rs"
 $7 = HEAP32[$6>>2]|0; //@line 122 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$retVal>>2] = $5; //@line 122 "/checkout/src/liballoc/allocator.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 122 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$retVal$index1>>2] = $7; //@line 122 "/checkout/src/liballoc/allocator.rs"
 STACKTOP = sp;return; //@line 122 "/checkout/src/liballoc/allocator.rs"
}
function __ZN5alloc9allocator6Layout4size17hf21f6297eca498a6E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 126 "/checkout/src/liballoc/allocator.rs"
 $2 = HEAP32[$1>>2]|0; //@line 126 "/checkout/src/liballoc/allocator.rs"
 STACKTOP = sp;return ($2|0); //@line 126 "/checkout/src/liballoc/allocator.rs"
}
function __ZN5alloc9allocator6Layout5align17h2a1da598a1c292caE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 130 "/checkout/src/liballoc/allocator.rs"
 $2 = ((($1)) + 4|0); //@line 130 "/checkout/src/liballoc/allocator.rs"
 $3 = HEAP32[$2>>2]|0; //@line 130 "/checkout/src/liballoc/allocator.rs"
 STACKTOP = sp;return ($3|0); //@line 130 "/checkout/src/liballoc/allocator.rs"
}
function __ZN5alloc9allocator6Layout5array17h13723c3d36e7ffbeE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $2 = 0, $3 = 0, $_2 = 0, $_4 = 0, $_4$index4 = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = sp;
 $_4 = sp + 32|0;
 $_2 = sp + 16|0;
 $n = $1;
 __ZN5alloc9allocator6Layout3new17h702486751c8c6bd8E($2); //@line 296 "/checkout/src/liballoc/allocator.rs"
 $$sreg$field = HEAP32[$2>>2]|0; //@line 296 "/checkout/src/liballoc/allocator.rs"
 $$sreg$index1 = ((($2)) + 4|0); //@line 296 "/checkout/src/liballoc/allocator.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 296 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$_4>>2] = $$sreg$field; //@line 296 "/checkout/src/liballoc/allocator.rs"
 $_4$index4 = ((($_4)) + 4|0); //@line 296 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$_4$index4>>2] = $$sreg$field2; //@line 296 "/checkout/src/liballoc/allocator.rs"
 $3 = $n; //@line 297 "/checkout/src/liballoc/allocator.rs"
 __ZN5alloc9allocator6Layout6repeat17h687d21dc95b984d7E($_2,$_4,$3); //@line 296 "/checkout/src/liballoc/allocator.rs"
 __ZN38__LT_core__option__Option_LT_T_GT__GT_3map17hfa191bd37428f645E($0,$_2); //@line 296 "/checkout/src/liballoc/allocator.rs"
 STACKTOP = sp;return; //@line 302 "/checkout/src/liballoc/allocator.rs"
}
function __ZN5alloc9allocator6Layout3new17h702486751c8c6bd8E($retVal) {
 $retVal = $retVal|0;
 var $$sreg$field = 0, $$sreg$field3 = 0, $$sreg$index2 = 0, $$sreg1$field = 0, $$sreg1$field6 = 0, $$sreg1$index5 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $_4 = 0, $align = 0, $retVal$index8 = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $0 = sp + 16|0;
 $1 = sp;
 $_4 = sp + 32|0;
 __ZN5alloc9allocator10size_align17h3204aa5d8c77103eE($1); //@line 134 "/checkout/src/liballoc/allocator.rs"
 $$sreg$field = HEAP32[$1>>2]|0; //@line 134 "/checkout/src/liballoc/allocator.rs"
 $$sreg$index2 = ((($1)) + 4|0); //@line 134 "/checkout/src/liballoc/allocator.rs"
 $$sreg$field3 = HEAP32[$$sreg$index2>>2]|0; //@line 134 "/checkout/src/liballoc/allocator.rs"
 $size = $$sreg$field; //@line 134 "/checkout/src/liballoc/allocator.rs"
 $align = $$sreg$field3; //@line 134 "/checkout/src/liballoc/allocator.rs"
 $2 = $size; //@line 135 "/checkout/src/liballoc/allocator.rs"
 $3 = $align; //@line 135 "/checkout/src/liballoc/allocator.rs"
 __ZN5alloc9allocator6Layout15from_size_align17h1c38202c3bd05be5E($_4,$2,$3); //@line 135 "/checkout/src/liballoc/allocator.rs"
 __ZN38__LT_core__option__Option_LT_T_GT__GT_6unwrap17hdadeb6d41ce553b5E($0,$_4); //@line 135 "/checkout/src/liballoc/allocator.rs"
 $$sreg1$field = HEAP32[$0>>2]|0; //@line 135 "/checkout/src/liballoc/allocator.rs"
 $$sreg1$index5 = ((($0)) + 4|0); //@line 135 "/checkout/src/liballoc/allocator.rs"
 $$sreg1$field6 = HEAP32[$$sreg1$index5>>2]|0; //@line 135 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$retVal>>2] = $$sreg1$field; //@line 136 "/checkout/src/liballoc/allocator.rs"
 $retVal$index8 = ((($retVal)) + 4|0); //@line 136 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$retVal$index8>>2] = $$sreg1$field6; //@line 136 "/checkout/src/liballoc/allocator.rs"
 STACKTOP = sp;return; //@line 136 "/checkout/src/liballoc/allocator.rs"
}
function __ZN5alloc9allocator6Layout6repeat17h687d21dc95b984d7E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sreg$field = 0, $$sreg$field3 = 0, $$sreg$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_17 = 0, $_18 = 0, $_27 = 0, $_29 = 0, $_4 = 0, $_5 = 0, $alloc_size = 0, $n = 0, $padded_size = 0, $self = 0, $switch = 0;
 var $switch1 = 0, $val = 0, $val2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $3 = sp;
 $_29 = sp + 80|0;
 $_27 = sp + 68|0;
 $_18 = sp + 56|0;
 $_17 = sp + 48|0;
 $_5 = sp + 32|0;
 $_4 = sp + 24|0;
 $self = $1;
 $n = $2;
 $4 = $self; //@line 220 "/checkout/src/liballoc/allocator.rs"
 $5 = HEAP32[$4>>2]|0; //@line 220 "/checkout/src/liballoc/allocator.rs"
 $6 = $self; //@line 220 "/checkout/src/liballoc/allocator.rs"
 $7 = $self; //@line 220 "/checkout/src/liballoc/allocator.rs"
 $8 = ((($7)) + 4|0); //@line 220 "/checkout/src/liballoc/allocator.rs"
 $9 = HEAP32[$8>>2]|0; //@line 220 "/checkout/src/liballoc/allocator.rs"
 $10 = (__ZN5alloc9allocator6Layout18padding_needed_for17h3bf9f40793a30277E($6,$9)|0); //@line 220 "/checkout/src/liballoc/allocator.rs"
 __ZN4core3num23__LT_impl_u20_usize_GT_11checked_add17h00d1a99943b8f1ffE($_5,$5,$10); //@line 220 "/checkout/src/liballoc/allocator.rs"
 __ZN69__LT_core__option__Option_LT_T_GT__u20_as_u20_core__ops__try__Try_GT_11into_result17h2fbc057d4b513b9dE($_4,$_5); //@line 220 "/checkout/src/liballoc/allocator.rs"
 $11 = HEAP32[$_4>>2]|0; //@line 220 "/checkout/src/liballoc/allocator.rs"
 $switch = ($11>>>0)<(1); //@line 220 "/checkout/src/liballoc/allocator.rs"
 if (!($switch)) {
  __ZN50__LT_T_u20_as_u20_core__convert__From_LT_T_GT__GT_4from17h7532ad46a64c7a09E(); //@line 220 "/checkout/src/liballoc/allocator.rs"
  __ZN69__LT_core__option__Option_LT_T_GT__u20_as_u20_core__ops__try__Try_GT_10from_error17h9ad7629c3cfde964E($0); //@line 220 "/checkout/src/liballoc/allocator.rs"
  STACKTOP = sp;return; //@line 228 "/checkout/src/liballoc/allocator.rs"
 }
 $12 = ((($_4)) + 4|0); //@line 220 "/checkout/src/liballoc/allocator.rs"
 $13 = HEAP32[$12>>2]|0; //@line 220 "/checkout/src/liballoc/allocator.rs"
 $val = $13; //@line 220 "/checkout/src/liballoc/allocator.rs"
 $14 = $val; //@line 220 "/checkout/src/liballoc/allocator.rs"
 $padded_size = $14; //@line 220 "/checkout/src/liballoc/allocator.rs"
 $15 = $padded_size; //@line 221 "/checkout/src/liballoc/allocator.rs"
 $16 = $n; //@line 221 "/checkout/src/liballoc/allocator.rs"
 __ZN4core3num23__LT_impl_u20_usize_GT_11checked_mul17h7a319dc43d01198eE($_18,$15,$16); //@line 221 "/checkout/src/liballoc/allocator.rs"
 __ZN69__LT_core__option__Option_LT_T_GT__u20_as_u20_core__ops__try__Try_GT_11into_result17h2fbc057d4b513b9dE($_17,$_18); //@line 221 "/checkout/src/liballoc/allocator.rs"
 $17 = HEAP32[$_17>>2]|0; //@line 221 "/checkout/src/liballoc/allocator.rs"
 $switch1 = ($17>>>0)<(1); //@line 221 "/checkout/src/liballoc/allocator.rs"
 if ($switch1) {
  $18 = ((($_17)) + 4|0); //@line 221 "/checkout/src/liballoc/allocator.rs"
  $19 = HEAP32[$18>>2]|0; //@line 221 "/checkout/src/liballoc/allocator.rs"
  $val2 = $19; //@line 221 "/checkout/src/liballoc/allocator.rs"
  $20 = $val2; //@line 221 "/checkout/src/liballoc/allocator.rs"
  $alloc_size = $20; //@line 221 "/checkout/src/liballoc/allocator.rs"
  $21 = $alloc_size; //@line 227 "/checkout/src/liballoc/allocator.rs"
  $22 = $self; //@line 227 "/checkout/src/liballoc/allocator.rs"
  $23 = ((($22)) + 4|0); //@line 227 "/checkout/src/liballoc/allocator.rs"
  $24 = HEAP32[$23>>2]|0; //@line 227 "/checkout/src/liballoc/allocator.rs"
  __ZN5alloc9allocator6Layout15from_size_align17h1c38202c3bd05be5E($_29,$21,$24); //@line 227 "/checkout/src/liballoc/allocator.rs"
  __ZN38__LT_core__option__Option_LT_T_GT__GT_6unwrap17hdadeb6d41ce553b5E($3,$_29); //@line 227 "/checkout/src/liballoc/allocator.rs"
  $$sreg$field = HEAP32[$3>>2]|0; //@line 227 "/checkout/src/liballoc/allocator.rs"
  $$sreg$index2 = ((($3)) + 4|0); //@line 227 "/checkout/src/liballoc/allocator.rs"
  $$sreg$field3 = HEAP32[$$sreg$index2>>2]|0; //@line 227 "/checkout/src/liballoc/allocator.rs"
  $25 = $padded_size; //@line 227 "/checkout/src/liballoc/allocator.rs"
  HEAP32[$_27>>2] = $$sreg$field; //@line 227 "/checkout/src/liballoc/allocator.rs"
  $26 = ((($_27)) + 4|0); //@line 227 "/checkout/src/liballoc/allocator.rs"
  HEAP32[$26>>2] = $$sreg$field3; //@line 227 "/checkout/src/liballoc/allocator.rs"
  $27 = ((($_27)) + 8|0); //@line 227 "/checkout/src/liballoc/allocator.rs"
  HEAP32[$27>>2] = $25; //@line 227 "/checkout/src/liballoc/allocator.rs"
  HEAP32[$0>>2] = 1; //@line 227 "/checkout/src/liballoc/allocator.rs"
  $28 = ((($0)) + 4|0); //@line 227 "/checkout/src/liballoc/allocator.rs"
  ;HEAP32[$28>>2]=HEAP32[$_27>>2]|0;HEAP32[$28+4>>2]=HEAP32[$_27+4>>2]|0;HEAP32[$28+8>>2]=HEAP32[$_27+8>>2]|0; //@line 227 "/checkout/src/liballoc/allocator.rs"
  STACKTOP = sp;return; //@line 228 "/checkout/src/liballoc/allocator.rs"
 } else {
  __ZN50__LT_T_u20_as_u20_core__convert__From_LT_T_GT__GT_4from17h7532ad46a64c7a09E(); //@line 221 "/checkout/src/liballoc/allocator.rs"
  __ZN69__LT_core__option__Option_LT_T_GT__u20_as_u20_core__ops__try__Try_GT_10from_error17h9ad7629c3cfde964E($0); //@line 221 "/checkout/src/liballoc/allocator.rs"
  STACKTOP = sp;return; //@line 228 "/checkout/src/liballoc/allocator.rs"
 }
}
function __ZN5alloc9allocator6Layout18padding_needed_for17h3bf9f40793a30277E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $align = 0, $len = 0, $len_rounded_up = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $align = $1;
 $2 = $self; //@line 185 "/checkout/src/liballoc/allocator.rs"
 $3 = (__ZN5alloc9allocator6Layout4size17hf21f6297eca498a6E($2)|0); //@line 185 "/checkout/src/liballoc/allocator.rs"
 $len = $3; //@line 185 "/checkout/src/liballoc/allocator.rs"
 $4 = $len; //@line 206 "/checkout/src/liballoc/allocator.rs"
 $5 = $align; //@line 206 "/checkout/src/liballoc/allocator.rs"
 $6 = (__ZN4core3num23__LT_impl_u20_usize_GT_12wrapping_add17h0164fc63a67cb059E($4,$5)|0); //@line 206 "/checkout/src/liballoc/allocator.rs"
 $7 = (__ZN4core3num23__LT_impl_u20_usize_GT_12wrapping_sub17h4713c9842bdc8110E($6,1)|0); //@line 206 "/checkout/src/liballoc/allocator.rs"
 $8 = $align; //@line 206 "/checkout/src/liballoc/allocator.rs"
 $9 = (__ZN4core3num23__LT_impl_u20_usize_GT_12wrapping_sub17h4713c9842bdc8110E($8,1)|0); //@line 206 "/checkout/src/liballoc/allocator.rs"
 $10 = $9 ^ -1; //@line 206 "/checkout/src/liballoc/allocator.rs"
 $11 = $7 & $10; //@line 206 "/checkout/src/liballoc/allocator.rs"
 $len_rounded_up = $11; //@line 206 "/checkout/src/liballoc/allocator.rs"
 $12 = $len_rounded_up; //@line 207 "/checkout/src/liballoc/allocator.rs"
 $13 = $len; //@line 207 "/checkout/src/liballoc/allocator.rs"
 $14 = (__ZN4core3num23__LT_impl_u20_usize_GT_12wrapping_sub17h4713c9842bdc8110E($12,$13)|0); //@line 207 "/checkout/src/liballoc/allocator.rs"
 STACKTOP = sp;return ($14|0); //@line 208 "/checkout/src/liballoc/allocator.rs"
}
function __ZN5alloc9allocator6Layout15from_size_align17h1c38202c3bd05be5E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $align = 0, $size = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $size = $1;
 $align = $2;
 $4 = $align; //@line 80 "/checkout/src/liballoc/allocator.rs"
 $5 = (__ZN4core3num23__LT_impl_u20_usize_GT_15is_power_of_two17h3fbf26df8111dfbcE($4)|0); //@line 80 "/checkout/src/liballoc/allocator.rs"
 $6 = $5 ^ 1; //@line 80 "/checkout/src/liballoc/allocator.rs"
 if ($6) {
  HEAP32[$0>>2] = 0; //@line 81 "/checkout/src/liballoc/allocator.rs"
  STACKTOP = sp;return; //@line 109 "/checkout/src/liballoc/allocator.rs"
 }
 $7 = $align; //@line 84 "/checkout/src/liballoc/allocator.rs"
 $8 = ($7>>>0)>(2147483648); //@line 84 "/checkout/src/liballoc/allocator.rs"
 if ($8) {
  HEAP32[$0>>2] = 0; //@line 85 "/checkout/src/liballoc/allocator.rs"
  STACKTOP = sp;return; //@line 109 "/checkout/src/liballoc/allocator.rs"
 }
 $9 = $size; //@line 102 "/checkout/src/liballoc/allocator.rs"
 $10 = $align; //@line 102 "/checkout/src/liballoc/allocator.rs"
 $11 = (($10) - 1)|0; //@line 102 "/checkout/src/liballoc/allocator.rs"
 $12 = (-1 - ($11))|0; //@line 102 "/checkout/src/liballoc/allocator.rs"
 $13 = ($9>>>0)>($12>>>0); //@line 102 "/checkout/src/liballoc/allocator.rs"
 if ($13) {
  HEAP32[$0>>2] = 0; //@line 103 "/checkout/src/liballoc/allocator.rs"
  STACKTOP = sp;return; //@line 109 "/checkout/src/liballoc/allocator.rs"
 } else {
  $14 = $size; //@line 107 "/checkout/src/liballoc/allocator.rs"
  $15 = $align; //@line 107 "/checkout/src/liballoc/allocator.rs"
  __ZN5alloc9allocator6Layout25from_size_align_unchecked17h1f4c5097bb0a95f9E($3,$14,$15); //@line 107 "/checkout/src/liballoc/allocator.rs"
  $$sreg$field = HEAP32[$3>>2]|0; //@line 107 "/checkout/src/liballoc/allocator.rs"
  $$sreg$index1 = ((($3)) + 4|0); //@line 107 "/checkout/src/liballoc/allocator.rs"
  $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 107 "/checkout/src/liballoc/allocator.rs"
  HEAP32[$0>>2] = 1; //@line 107 "/checkout/src/liballoc/allocator.rs"
  $16 = ((($0)) + 4|0); //@line 107 "/checkout/src/liballoc/allocator.rs"
  HEAP32[$16>>2] = $$sreg$field; //@line 107 "/checkout/src/liballoc/allocator.rs"
  $17 = ((($16)) + 4|0); //@line 107 "/checkout/src/liballoc/allocator.rs"
  HEAP32[$17>>2] = $$sreg$field2; //@line 107 "/checkout/src/liballoc/allocator.rs"
  STACKTOP = sp;return; //@line 109 "/checkout/src/liballoc/allocator.rs"
 }
}
function __ZN5alloc9allocator10size_align17h3204aa5d8c77103eE($retVal) {
 $retVal = $retVal|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $_0 = 0, $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_0 = sp;
 $0 = (__ZN4core3mem7size_of17h809a29d4399807a6E()|0); //@line 30 "/checkout/src/liballoc/allocator.rs"
 $1 = (__ZN4core3mem8align_of17h3d4cf13420557a3fE()|0); //@line 30 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$_0>>2] = $0; //@line 30 "/checkout/src/liballoc/allocator.rs"
 $2 = ((($_0)) + 4|0); //@line 30 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$2>>2] = $1; //@line 30 "/checkout/src/liballoc/allocator.rs"
 $3 = HEAP32[$_0>>2]|0; //@line 31 "/checkout/src/liballoc/allocator.rs"
 $4 = ((($_0)) + 4|0); //@line 31 "/checkout/src/liballoc/allocator.rs"
 $5 = HEAP32[$4>>2]|0; //@line 31 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$retVal>>2] = $3; //@line 31 "/checkout/src/liballoc/allocator.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 31 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$retVal$index1>>2] = $5; //@line 31 "/checkout/src/liballoc/allocator.rs"
 STACKTOP = sp;return; //@line 31 "/checkout/src/liballoc/allocator.rs"
}
function __ZN5alloc9allocator6Layout5array17h2fe3026d0ba14cafE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $2 = 0, $3 = 0, $_2 = 0, $_4 = 0, $_4$index4 = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = sp;
 $_4 = sp + 32|0;
 $_2 = sp + 16|0;
 $n = $1;
 __ZN5alloc9allocator6Layout3new17had18c68f19f3933dE($2); //@line 296 "/checkout/src/liballoc/allocator.rs"
 $$sreg$field = HEAP32[$2>>2]|0; //@line 296 "/checkout/src/liballoc/allocator.rs"
 $$sreg$index1 = ((($2)) + 4|0); //@line 296 "/checkout/src/liballoc/allocator.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 296 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$_4>>2] = $$sreg$field; //@line 296 "/checkout/src/liballoc/allocator.rs"
 $_4$index4 = ((($_4)) + 4|0); //@line 296 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$_4$index4>>2] = $$sreg$field2; //@line 296 "/checkout/src/liballoc/allocator.rs"
 $3 = $n; //@line 297 "/checkout/src/liballoc/allocator.rs"
 __ZN5alloc9allocator6Layout6repeat17h687d21dc95b984d7E($_2,$_4,$3); //@line 296 "/checkout/src/liballoc/allocator.rs"
 __ZN38__LT_core__option__Option_LT_T_GT__GT_3map17hc6c6d0594a7d19ceE($0,$_2); //@line 296 "/checkout/src/liballoc/allocator.rs"
 STACKTOP = sp;return; //@line 302 "/checkout/src/liballoc/allocator.rs"
}
function __ZN5alloc9allocator6Layout3new17had18c68f19f3933dE($retVal) {
 $retVal = $retVal|0;
 var $$sreg$field = 0, $$sreg$field3 = 0, $$sreg$index2 = 0, $$sreg1$field = 0, $$sreg1$field6 = 0, $$sreg1$index5 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $_4 = 0, $align = 0, $retVal$index8 = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $0 = sp + 16|0;
 $1 = sp;
 $_4 = sp + 32|0;
 __ZN5alloc9allocator10size_align17h45ac271136ff08c2E($1); //@line 134 "/checkout/src/liballoc/allocator.rs"
 $$sreg$field = HEAP32[$1>>2]|0; //@line 134 "/checkout/src/liballoc/allocator.rs"
 $$sreg$index2 = ((($1)) + 4|0); //@line 134 "/checkout/src/liballoc/allocator.rs"
 $$sreg$field3 = HEAP32[$$sreg$index2>>2]|0; //@line 134 "/checkout/src/liballoc/allocator.rs"
 $size = $$sreg$field; //@line 134 "/checkout/src/liballoc/allocator.rs"
 $align = $$sreg$field3; //@line 134 "/checkout/src/liballoc/allocator.rs"
 $2 = $size; //@line 135 "/checkout/src/liballoc/allocator.rs"
 $3 = $align; //@line 135 "/checkout/src/liballoc/allocator.rs"
 __ZN5alloc9allocator6Layout15from_size_align17h1c38202c3bd05be5E($_4,$2,$3); //@line 135 "/checkout/src/liballoc/allocator.rs"
 __ZN38__LT_core__option__Option_LT_T_GT__GT_6unwrap17hdadeb6d41ce553b5E($0,$_4); //@line 135 "/checkout/src/liballoc/allocator.rs"
 $$sreg1$field = HEAP32[$0>>2]|0; //@line 135 "/checkout/src/liballoc/allocator.rs"
 $$sreg1$index5 = ((($0)) + 4|0); //@line 135 "/checkout/src/liballoc/allocator.rs"
 $$sreg1$field6 = HEAP32[$$sreg1$index5>>2]|0; //@line 135 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$retVal>>2] = $$sreg1$field; //@line 136 "/checkout/src/liballoc/allocator.rs"
 $retVal$index8 = ((($retVal)) + 4|0); //@line 136 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$retVal$index8>>2] = $$sreg1$field6; //@line 136 "/checkout/src/liballoc/allocator.rs"
 STACKTOP = sp;return; //@line 136 "/checkout/src/liballoc/allocator.rs"
}
function __ZN5alloc9allocator10size_align17h45ac271136ff08c2E($retVal) {
 $retVal = $retVal|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $_0 = 0, $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_0 = sp;
 $0 = (__ZN4core3mem7size_of17hd7a6698aeb9187d3E()|0); //@line 30 "/checkout/src/liballoc/allocator.rs"
 $1 = (__ZN4core3mem8align_of17hf4a8fc97f4876179E()|0); //@line 30 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$_0>>2] = $0; //@line 30 "/checkout/src/liballoc/allocator.rs"
 $2 = ((($_0)) + 4|0); //@line 30 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$2>>2] = $1; //@line 30 "/checkout/src/liballoc/allocator.rs"
 $3 = HEAP32[$_0>>2]|0; //@line 31 "/checkout/src/liballoc/allocator.rs"
 $4 = ((($_0)) + 4|0); //@line 31 "/checkout/src/liballoc/allocator.rs"
 $5 = HEAP32[$4>>2]|0; //@line 31 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$retVal>>2] = $3; //@line 31 "/checkout/src/liballoc/allocator.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 31 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$retVal$index1>>2] = $5; //@line 31 "/checkout/src/liballoc/allocator.rs"
 STACKTOP = sp;return; //@line 31 "/checkout/src/liballoc/allocator.rs"
}
function __ZN5alloc9allocator6Layout5array17h400e7ec2b99ceddfE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $2 = 0, $3 = 0, $_2 = 0, $_4 = 0, $_4$index4 = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = sp;
 $_4 = sp + 32|0;
 $_2 = sp + 16|0;
 $n = $1;
 __ZN5alloc9allocator6Layout3new17hf9231558b19bcf3eE($2); //@line 296 "/checkout/src/liballoc/allocator.rs"
 $$sreg$field = HEAP32[$2>>2]|0; //@line 296 "/checkout/src/liballoc/allocator.rs"
 $$sreg$index1 = ((($2)) + 4|0); //@line 296 "/checkout/src/liballoc/allocator.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 296 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$_4>>2] = $$sreg$field; //@line 296 "/checkout/src/liballoc/allocator.rs"
 $_4$index4 = ((($_4)) + 4|0); //@line 296 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$_4$index4>>2] = $$sreg$field2; //@line 296 "/checkout/src/liballoc/allocator.rs"
 $3 = $n; //@line 297 "/checkout/src/liballoc/allocator.rs"
 __ZN5alloc9allocator6Layout6repeat17h687d21dc95b984d7E($_2,$_4,$3); //@line 296 "/checkout/src/liballoc/allocator.rs"
 __ZN38__LT_core__option__Option_LT_T_GT__GT_3map17h3a04c52c361fc5bdE($0,$_2); //@line 296 "/checkout/src/liballoc/allocator.rs"
 STACKTOP = sp;return; //@line 302 "/checkout/src/liballoc/allocator.rs"
}
function __ZN5alloc9allocator6Layout3new17hf9231558b19bcf3eE($retVal) {
 $retVal = $retVal|0;
 var $$sreg$field = 0, $$sreg$field3 = 0, $$sreg$index2 = 0, $$sreg1$field = 0, $$sreg1$field6 = 0, $$sreg1$index5 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $_4 = 0, $align = 0, $retVal$index8 = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $0 = sp + 16|0;
 $1 = sp;
 $_4 = sp + 32|0;
 __ZN5alloc9allocator10size_align17hcd95a6530c74798bE($1); //@line 134 "/checkout/src/liballoc/allocator.rs"
 $$sreg$field = HEAP32[$1>>2]|0; //@line 134 "/checkout/src/liballoc/allocator.rs"
 $$sreg$index2 = ((($1)) + 4|0); //@line 134 "/checkout/src/liballoc/allocator.rs"
 $$sreg$field3 = HEAP32[$$sreg$index2>>2]|0; //@line 134 "/checkout/src/liballoc/allocator.rs"
 $size = $$sreg$field; //@line 134 "/checkout/src/liballoc/allocator.rs"
 $align = $$sreg$field3; //@line 134 "/checkout/src/liballoc/allocator.rs"
 $2 = $size; //@line 135 "/checkout/src/liballoc/allocator.rs"
 $3 = $align; //@line 135 "/checkout/src/liballoc/allocator.rs"
 __ZN5alloc9allocator6Layout15from_size_align17h1c38202c3bd05be5E($_4,$2,$3); //@line 135 "/checkout/src/liballoc/allocator.rs"
 __ZN38__LT_core__option__Option_LT_T_GT__GT_6unwrap17hdadeb6d41ce553b5E($0,$_4); //@line 135 "/checkout/src/liballoc/allocator.rs"
 $$sreg1$field = HEAP32[$0>>2]|0; //@line 135 "/checkout/src/liballoc/allocator.rs"
 $$sreg1$index5 = ((($0)) + 4|0); //@line 135 "/checkout/src/liballoc/allocator.rs"
 $$sreg1$field6 = HEAP32[$$sreg1$index5>>2]|0; //@line 135 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$retVal>>2] = $$sreg1$field; //@line 136 "/checkout/src/liballoc/allocator.rs"
 $retVal$index8 = ((($retVal)) + 4|0); //@line 136 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$retVal$index8>>2] = $$sreg1$field6; //@line 136 "/checkout/src/liballoc/allocator.rs"
 STACKTOP = sp;return; //@line 136 "/checkout/src/liballoc/allocator.rs"
}
function __ZN5alloc9allocator10size_align17hcd95a6530c74798bE($retVal) {
 $retVal = $retVal|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $_0 = 0, $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_0 = sp;
 $0 = (__ZN4core3mem7size_of17h34f2235168088e08E()|0); //@line 30 "/checkout/src/liballoc/allocator.rs"
 $1 = (__ZN4core3mem8align_of17hccc7922e2c3ce90fE()|0); //@line 30 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$_0>>2] = $0; //@line 30 "/checkout/src/liballoc/allocator.rs"
 $2 = ((($_0)) + 4|0); //@line 30 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$2>>2] = $1; //@line 30 "/checkout/src/liballoc/allocator.rs"
 $3 = HEAP32[$_0>>2]|0; //@line 31 "/checkout/src/liballoc/allocator.rs"
 $4 = ((($_0)) + 4|0); //@line 31 "/checkout/src/liballoc/allocator.rs"
 $5 = HEAP32[$4>>2]|0; //@line 31 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$retVal>>2] = $3; //@line 31 "/checkout/src/liballoc/allocator.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 31 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$retVal$index1>>2] = $5; //@line 31 "/checkout/src/liballoc/allocator.rs"
 STACKTOP = sp;return; //@line 31 "/checkout/src/liballoc/allocator.rs"
}
function __ZN5alloc9allocator6Layout5array17hab185e20db305362E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $2 = 0, $3 = 0, $_2 = 0, $_4 = 0, $_4$index4 = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = sp;
 $_4 = sp + 32|0;
 $_2 = sp + 16|0;
 $n = $1;
 __ZN5alloc9allocator6Layout3new17h0f3040b95f9067b5E($2); //@line 296 "/checkout/src/liballoc/allocator.rs"
 $$sreg$field = HEAP32[$2>>2]|0; //@line 296 "/checkout/src/liballoc/allocator.rs"
 $$sreg$index1 = ((($2)) + 4|0); //@line 296 "/checkout/src/liballoc/allocator.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 296 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$_4>>2] = $$sreg$field; //@line 296 "/checkout/src/liballoc/allocator.rs"
 $_4$index4 = ((($_4)) + 4|0); //@line 296 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$_4$index4>>2] = $$sreg$field2; //@line 296 "/checkout/src/liballoc/allocator.rs"
 $3 = $n; //@line 297 "/checkout/src/liballoc/allocator.rs"
 __ZN5alloc9allocator6Layout6repeat17h687d21dc95b984d7E($_2,$_4,$3); //@line 296 "/checkout/src/liballoc/allocator.rs"
 __ZN38__LT_core__option__Option_LT_T_GT__GT_3map17hc31566c163133cf1E($0,$_2); //@line 296 "/checkout/src/liballoc/allocator.rs"
 STACKTOP = sp;return; //@line 302 "/checkout/src/liballoc/allocator.rs"
}
function __ZN5alloc9allocator6Layout3new17h0f3040b95f9067b5E($retVal) {
 $retVal = $retVal|0;
 var $$sreg$field = 0, $$sreg$field3 = 0, $$sreg$index2 = 0, $$sreg1$field = 0, $$sreg1$field6 = 0, $$sreg1$index5 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $_4 = 0, $align = 0, $retVal$index8 = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $0 = sp + 16|0;
 $1 = sp;
 $_4 = sp + 32|0;
 __ZN5alloc9allocator10size_align17h6081767eb906cf9eE($1); //@line 134 "/checkout/src/liballoc/allocator.rs"
 $$sreg$field = HEAP32[$1>>2]|0; //@line 134 "/checkout/src/liballoc/allocator.rs"
 $$sreg$index2 = ((($1)) + 4|0); //@line 134 "/checkout/src/liballoc/allocator.rs"
 $$sreg$field3 = HEAP32[$$sreg$index2>>2]|0; //@line 134 "/checkout/src/liballoc/allocator.rs"
 $size = $$sreg$field; //@line 134 "/checkout/src/liballoc/allocator.rs"
 $align = $$sreg$field3; //@line 134 "/checkout/src/liballoc/allocator.rs"
 $2 = $size; //@line 135 "/checkout/src/liballoc/allocator.rs"
 $3 = $align; //@line 135 "/checkout/src/liballoc/allocator.rs"
 __ZN5alloc9allocator6Layout15from_size_align17h1c38202c3bd05be5E($_4,$2,$3); //@line 135 "/checkout/src/liballoc/allocator.rs"
 __ZN38__LT_core__option__Option_LT_T_GT__GT_6unwrap17hdadeb6d41ce553b5E($0,$_4); //@line 135 "/checkout/src/liballoc/allocator.rs"
 $$sreg1$field = HEAP32[$0>>2]|0; //@line 135 "/checkout/src/liballoc/allocator.rs"
 $$sreg1$index5 = ((($0)) + 4|0); //@line 135 "/checkout/src/liballoc/allocator.rs"
 $$sreg1$field6 = HEAP32[$$sreg1$index5>>2]|0; //@line 135 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$retVal>>2] = $$sreg1$field; //@line 136 "/checkout/src/liballoc/allocator.rs"
 $retVal$index8 = ((($retVal)) + 4|0); //@line 136 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$retVal$index8>>2] = $$sreg1$field6; //@line 136 "/checkout/src/liballoc/allocator.rs"
 STACKTOP = sp;return; //@line 136 "/checkout/src/liballoc/allocator.rs"
}
function __ZN5alloc9allocator10size_align17h6081767eb906cf9eE($retVal) {
 $retVal = $retVal|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $_0 = 0, $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_0 = sp;
 $0 = (__ZN4core3mem7size_of17h1975c8c10bebb793E()|0); //@line 30 "/checkout/src/liballoc/allocator.rs"
 $1 = (__ZN4core3mem8align_of17h1bf47edbc88dde51E()|0); //@line 30 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$_0>>2] = $0; //@line 30 "/checkout/src/liballoc/allocator.rs"
 $2 = ((($_0)) + 4|0); //@line 30 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$2>>2] = $1; //@line 30 "/checkout/src/liballoc/allocator.rs"
 $3 = HEAP32[$_0>>2]|0; //@line 31 "/checkout/src/liballoc/allocator.rs"
 $4 = ((($_0)) + 4|0); //@line 31 "/checkout/src/liballoc/allocator.rs"
 $5 = HEAP32[$4>>2]|0; //@line 31 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$retVal>>2] = $3; //@line 31 "/checkout/src/liballoc/allocator.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 31 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$retVal$index1>>2] = $5; //@line 31 "/checkout/src/liballoc/allocator.rs"
 STACKTOP = sp;return; //@line 31 "/checkout/src/liballoc/allocator.rs"
}
function __ZN5alloc9allocator6Layout5array28__u7b__u7b_closure_u7d__u7d_17h1121c15b537d05caE($retVal,$arg1) {
 $retVal = $retVal|0;
 $arg1 = $arg1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $k = 0, $offs = 0, $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $k = sp;
 $0 = HEAP32[$arg1>>2]|0; //@line 298 "/checkout/src/liballoc/allocator.rs"
 $1 = ((($arg1)) + 4|0); //@line 298 "/checkout/src/liballoc/allocator.rs"
 $2 = HEAP32[$1>>2]|0; //@line 298 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$k>>2] = $0; //@line 298 "/checkout/src/liballoc/allocator.rs"
 $3 = ((($k)) + 4|0); //@line 298 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$3>>2] = $2; //@line 298 "/checkout/src/liballoc/allocator.rs"
 $4 = ((($arg1)) + 8|0); //@line 298 "/checkout/src/liballoc/allocator.rs"
 $5 = HEAP32[$4>>2]|0; //@line 298 "/checkout/src/liballoc/allocator.rs"
 $offs = $5; //@line 298 "/checkout/src/liballoc/allocator.rs"
 $6 = HEAP32[$k>>2]|0; //@line 300 "/checkout/src/liballoc/allocator.rs"
 $7 = ((($k)) + 4|0); //@line 300 "/checkout/src/liballoc/allocator.rs"
 $8 = HEAP32[$7>>2]|0; //@line 300 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$retVal>>2] = $6; //@line 301 "/checkout/src/liballoc/allocator.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 301 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$retVal$index1>>2] = $8; //@line 301 "/checkout/src/liballoc/allocator.rs"
 STACKTOP = sp;return; //@line 301 "/checkout/src/liballoc/allocator.rs"
}
function __ZN5alloc9allocator6Layout5array28__u7b__u7b_closure_u7d__u7d_17h936695aa73d42714E($retVal,$arg1) {
 $retVal = $retVal|0;
 $arg1 = $arg1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $k = 0, $offs = 0, $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $k = sp;
 $0 = HEAP32[$arg1>>2]|0; //@line 298 "/checkout/src/liballoc/allocator.rs"
 $1 = ((($arg1)) + 4|0); //@line 298 "/checkout/src/liballoc/allocator.rs"
 $2 = HEAP32[$1>>2]|0; //@line 298 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$k>>2] = $0; //@line 298 "/checkout/src/liballoc/allocator.rs"
 $3 = ((($k)) + 4|0); //@line 298 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$3>>2] = $2; //@line 298 "/checkout/src/liballoc/allocator.rs"
 $4 = ((($arg1)) + 8|0); //@line 298 "/checkout/src/liballoc/allocator.rs"
 $5 = HEAP32[$4>>2]|0; //@line 298 "/checkout/src/liballoc/allocator.rs"
 $offs = $5; //@line 298 "/checkout/src/liballoc/allocator.rs"
 $6 = HEAP32[$k>>2]|0; //@line 300 "/checkout/src/liballoc/allocator.rs"
 $7 = ((($k)) + 4|0); //@line 300 "/checkout/src/liballoc/allocator.rs"
 $8 = HEAP32[$7>>2]|0; //@line 300 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$retVal>>2] = $6; //@line 301 "/checkout/src/liballoc/allocator.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 301 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$retVal$index1>>2] = $8; //@line 301 "/checkout/src/liballoc/allocator.rs"
 STACKTOP = sp;return; //@line 301 "/checkout/src/liballoc/allocator.rs"
}
function __ZN5alloc9allocator6Layout5array28__u7b__u7b_closure_u7d__u7d_17hdcfdd71e3ad1d305E($retVal,$arg1) {
 $retVal = $retVal|0;
 $arg1 = $arg1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $k = 0, $offs = 0, $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $k = sp;
 $0 = HEAP32[$arg1>>2]|0; //@line 298 "/checkout/src/liballoc/allocator.rs"
 $1 = ((($arg1)) + 4|0); //@line 298 "/checkout/src/liballoc/allocator.rs"
 $2 = HEAP32[$1>>2]|0; //@line 298 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$k>>2] = $0; //@line 298 "/checkout/src/liballoc/allocator.rs"
 $3 = ((($k)) + 4|0); //@line 298 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$3>>2] = $2; //@line 298 "/checkout/src/liballoc/allocator.rs"
 $4 = ((($arg1)) + 8|0); //@line 298 "/checkout/src/liballoc/allocator.rs"
 $5 = HEAP32[$4>>2]|0; //@line 298 "/checkout/src/liballoc/allocator.rs"
 $offs = $5; //@line 298 "/checkout/src/liballoc/allocator.rs"
 $6 = HEAP32[$k>>2]|0; //@line 300 "/checkout/src/liballoc/allocator.rs"
 $7 = ((($k)) + 4|0); //@line 300 "/checkout/src/liballoc/allocator.rs"
 $8 = HEAP32[$7>>2]|0; //@line 300 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$retVal>>2] = $6; //@line 301 "/checkout/src/liballoc/allocator.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 301 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$retVal$index1>>2] = $8; //@line 301 "/checkout/src/liballoc/allocator.rs"
 STACKTOP = sp;return; //@line 301 "/checkout/src/liballoc/allocator.rs"
}
function __ZN5alloc9allocator6Layout5array28__u7b__u7b_closure_u7d__u7d_17hdf993ccd0ec553f0E($retVal,$arg1) {
 $retVal = $retVal|0;
 $arg1 = $arg1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $k = 0, $offs = 0, $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $k = sp;
 $0 = HEAP32[$arg1>>2]|0; //@line 298 "/checkout/src/liballoc/allocator.rs"
 $1 = ((($arg1)) + 4|0); //@line 298 "/checkout/src/liballoc/allocator.rs"
 $2 = HEAP32[$1>>2]|0; //@line 298 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$k>>2] = $0; //@line 298 "/checkout/src/liballoc/allocator.rs"
 $3 = ((($k)) + 4|0); //@line 298 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$3>>2] = $2; //@line 298 "/checkout/src/liballoc/allocator.rs"
 $4 = ((($arg1)) + 8|0); //@line 298 "/checkout/src/liballoc/allocator.rs"
 $5 = HEAP32[$4>>2]|0; //@line 298 "/checkout/src/liballoc/allocator.rs"
 $offs = $5; //@line 298 "/checkout/src/liballoc/allocator.rs"
 $6 = HEAP32[$k>>2]|0; //@line 300 "/checkout/src/liballoc/allocator.rs"
 $7 = ((($k)) + 4|0); //@line 300 "/checkout/src/liballoc/allocator.rs"
 $8 = HEAP32[$7>>2]|0; //@line 300 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$retVal>>2] = $6; //@line 301 "/checkout/src/liballoc/allocator.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 301 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$retVal$index1>>2] = $8; //@line 301 "/checkout/src/liballoc/allocator.rs"
 STACKTOP = sp;return; //@line 301 "/checkout/src/liballoc/allocator.rs"
}
function __ZN5alloc9allocator8AllocErr13invalid_input17ha7d0785dd9ae539aE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $details = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $details = sp;
 HEAP32[$details>>2] = $1;
 $3 = ((($details)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$details>>2]|0; //@line 331 "/checkout/src/liballoc/allocator.rs"
 $5 = ((($details)) + 4|0); //@line 331 "/checkout/src/liballoc/allocator.rs"
 $6 = HEAP32[$5>>2]|0; //@line 331 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$0>>2] = 1; //@line 331 "/checkout/src/liballoc/allocator.rs"
 $7 = ((($0)) + 4|0); //@line 331 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$7>>2] = $4; //@line 331 "/checkout/src/liballoc/allocator.rs"
 $8 = ((($7)) + 4|0); //@line 331 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$8>>2] = $6; //@line 331 "/checkout/src/liballoc/allocator.rs"
 STACKTOP = sp;return; //@line 332 "/checkout/src/liballoc/allocator.rs"
}
function __ZN63__LT_alloc__allocator__Layout_u20_as_u20_core__clone__Clone_GT_5clone17h2b8724cfff8cb0c8E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $__self_0_0 = 0, $__self_0_1 = 0, $retVal$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_0 = sp + 8|0;
 $self = $0;
 $1 = $self; //@line 49 "/checkout/src/liballoc/allocator.rs"
 $__self_0_0 = $1; //@line 49 "/checkout/src/liballoc/allocator.rs"
 $2 = $self; //@line 58 "/checkout/src/liballoc/allocator.rs"
 $3 = ((($2)) + 4|0); //@line 58 "/checkout/src/liballoc/allocator.rs"
 $__self_0_1 = $3; //@line 58 "/checkout/src/liballoc/allocator.rs"
 $4 = $__self_0_0; //@line 49 "/checkout/src/liballoc/allocator.rs"
 $5 = (__ZN4core5clone5Clone5clone17h868c1ec8c3c5394aE($4)|0); //@line 49 "/checkout/src/liballoc/allocator.rs"
 $6 = $__self_0_1; //@line 58 "/checkout/src/liballoc/allocator.rs"
 $7 = (__ZN4core5clone5Clone5clone17h868c1ec8c3c5394aE($6)|0); //@line 58 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$_0>>2] = $5; //@line 46 "/checkout/src/liballoc/allocator.rs"
 $8 = ((($_0)) + 4|0); //@line 46 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$8>>2] = $7; //@line 46 "/checkout/src/liballoc/allocator.rs"
 $9 = HEAP32[$_0>>2]|0; //@line 46 "/checkout/src/liballoc/allocator.rs"
 $10 = ((($_0)) + 4|0); //@line 46 "/checkout/src/liballoc/allocator.rs"
 $11 = HEAP32[$10>>2]|0; //@line 46 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$retVal>>2] = $9; //@line 46 "/checkout/src/liballoc/allocator.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 46 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$retVal$index1>>2] = $11; //@line 46 "/checkout/src/liballoc/allocator.rs"
 STACKTOP = sp;return; //@line 46 "/checkout/src/liballoc/allocator.rs"
}
function __ZN90__LT_core__ops__range__RangeFull_u20_as_u20_core__slice__SliceIndex_LT__u5b_T_u5d__GT__GT_5index17hc5d0f24f84b5ce01E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $retVal$index1 = 0, $slice = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $slice = sp;
 HEAP32[$slice>>2] = $0;
 $2 = ((($slice)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$slice>>2]|0; //@line 992 "/checkout/src/libcore/slice/mod.rs"
 $4 = ((($slice)) + 4|0); //@line 992 "/checkout/src/libcore/slice/mod.rs"
 $5 = HEAP32[$4>>2]|0; //@line 992 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$retVal>>2] = $3; //@line 993 "/checkout/src/libcore/slice/mod.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 993 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$retVal$index1>>2] = $5; //@line 993 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return; //@line 993 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN5rustv7texture15create_textures17h285e46c68ac60e11E() {
 var $$arith = 0, $$denom = 0, $$div = 0, $$iszero = 0, $$overflow = 0, $$same = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $_105 = 0, $_41 = 0, $_49 = 0, $_72 = 0, $buffer = 0, $personalityslot = 0, $usize = 0, $vsize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $personalityslot = sp + 80|0;
 $_105 = sp + 56|0;
 $_72 = sp + 32|0;
 $_49 = sp + 28|0;
 $buffer = sp + 16|0;
 $_41 = sp + 8|0;
 $usize = sp;
 _glGenTextures(1,(38316|0)); //@line 100 "texture.rs"
 $0 = HEAP32[781]|0; //@line 101 "texture.rs"
 $1 = HEAP32[9579]|0; //@line 101 "texture.rs"
 _glBindTexture(($0|0),($1|0)); //@line 101 "texture.rs"
 $2 = HEAP32[779]|0; //@line 102 "texture.rs"
 $3 = HEAP32[780]|0; //@line 102 "texture.rs"
 $4 = HEAP32[786]|0; //@line 102 "texture.rs"
 _glTexEnvi(($2|0),($3|0),($4|0)); //@line 102 "texture.rs"
 $5 = HEAP32[781]|0; //@line 103 "texture.rs"
 $6 = HEAP32[785]|0; //@line 103 "texture.rs"
 $7 = HEAP32[777]|0; //@line 103 "texture.rs"
 _glTexParameteri(($5|0),($6|0),($7|0)); //@line 103 "texture.rs"
 $8 = HEAP32[781]|0; //@line 104 "texture.rs"
 $9 = HEAP32[784]|0; //@line 104 "texture.rs"
 $10 = HEAP32[777]|0; //@line 104 "texture.rs"
 _glTexParameteri(($8|0),($9|0),($10|0)); //@line 104 "texture.rs"
 $11 = HEAP32[781]|0; //@line 105 "texture.rs"
 $12 = HEAP32[782]|0; //@line 105 "texture.rs"
 $13 = HEAP32[787]|0; //@line 105 "texture.rs"
 _glTexParameteri(($11|0),($12|0),($13|0)); //@line 105 "texture.rs"
 $14 = HEAP32[781]|0; //@line 106 "texture.rs"
 $15 = HEAP32[783]|0; //@line 106 "texture.rs"
 $16 = HEAP32[787]|0; //@line 106 "texture.rs"
 _glTexParameteri(($14|0),($15|0),($16|0)); //@line 106 "texture.rs"
 HEAP32[$_41>>2] = 256; //@line 108 "texture.rs"
 $17 = ((($_41)) + 4|0); //@line 108 "texture.rs"
 HEAP32[$17>>2] = 256; //@line 108 "texture.rs"
 $18 = HEAP32[$_41>>2]|0; //@line 108 "texture.rs"
 HEAP32[$usize>>2] = $18; //@line 108 "texture.rs"
 $19 = ((($_41)) + 4|0); //@line 108 "texture.rs"
 $20 = HEAP32[$19>>2]|0; //@line 108 "texture.rs"
 $vsize = $20; //@line 108 "texture.rs"
 $21 = HEAP32[$usize>>2]|0; //@line 109 "texture.rs"
 $22 = $vsize; //@line 109 "texture.rs"
 $$arith = Math_imul($21, $22)|0; //@line 109 "texture.rs"
 $$iszero = ($22|0)==(0); //@line 109 "texture.rs"
 $$denom = $$iszero ? 1 : $22; //@line 109 "texture.rs"
 $$div = (($$arith>>>0) / ($$denom>>>0))&-1; //@line 109 "texture.rs"
 $$same = ($$div|0)!=($21|0); //@line 109 "texture.rs"
 $$overflow = $$iszero ? 0 : $$same; //@line 109 "texture.rs"
 $23 = $$overflow; //@line 109 "texture.rs"
 if ($23) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(7840); //@line 109 "texture.rs"
  // unreachable; //@line 109 "texture.rs"
 }
 HEAP32[$_49>>2] = $usize; //@line 109 "texture.rs"
 __ZN5rustv3r3d11vec_from_fn17ha44ed534a91e0e15E($buffer,$$arith,$_49); //@line 109 "texture.rs"
 $24 = HEAP32[781]|0; //@line 114 "texture.rs"
 $25 = HEAP32[778]|0; //@line 114 "texture.rs"
 $26 = HEAP32[$usize>>2]|0; //@line 114 "texture.rs"
 $27 = $vsize; //@line 114 "texture.rs"
 $28 = HEAP32[778]|0; //@line 114 "texture.rs"
 $29 = HEAP32[768]|0; //@line 114 "texture.rs"
 __THREW__ = 0;
 $30 = (invoke_iii(367,($buffer|0),0)|0); //@line 114 "texture.rs"
 $31 = __THREW__; __THREW__ = 0;
 $32 = $31&1;
 if (!($32)) {
  __THREW__ = 0;
  invoke_viiiiiiiii(368,($24|0),0,($25|0),($26|0),($27|0),0,($28|0),($29|0),($30|0)); //@line 114 "texture.rs"
  $33 = __THREW__; __THREW__ = 0;
  $34 = $33&1;
  if (!($34)) {
   $35 = HEAP32[781]|0; //@line 116 "texture.rs"
   __THREW__ = 0;
   invoke_vii(369,($35|0),0); //@line 116 "texture.rs"
   $36 = __THREW__; __THREW__ = 0;
   $37 = $36&1;
   if (!($37)) {
    __THREW__ = 0;
    invoke_viiiii(193,($_72|0),(7824|0),1,(38620|0),0); //@line 125 "texture.rs"
    $38 = __THREW__; __THREW__ = 0;
    $39 = $38&1;
    if (!($39)) {
     __THREW__ = 0;
     invoke_vi(170,($_72|0)); //@line 125 "texture.rs"
     $40 = __THREW__; __THREW__ = 0;
     $41 = $40&1;
     if (!($41)) {
      __THREW__ = 0;
      $42 = (invoke_iii(370,(20645|0),19)|0); //@line 126 "texture.rs"
      $43 = __THREW__; __THREW__ = 0;
      $44 = $43&1;
      if (!($44)) {
       HEAP32[(38320)>>2] = $42; //@line 126 "texture.rs"
       __THREW__ = 0;
       $45 = (invoke_iii(370,(20664|0),14)|0); //@line 127 "texture.rs"
       $46 = __THREW__; __THREW__ = 0;
       $47 = $46&1;
       if (!($47)) {
        HEAP32[(38324)>>2] = $45; //@line 127 "texture.rs"
        __THREW__ = 0;
        $48 = (invoke_iii(370,(20678|0),14)|0); //@line 128 "texture.rs"
        $49 = __THREW__; __THREW__ = 0;
        $50 = $49&1;
        if (!($50)) {
         HEAP32[(38328)>>2] = $48; //@line 128 "texture.rs"
         __THREW__ = 0;
         $51 = (invoke_iii(370,(20692|0),15)|0); //@line 129 "texture.rs"
         $52 = __THREW__; __THREW__ = 0;
         $53 = $52&1;
         if (!($53)) {
          HEAP32[(38332)>>2] = $51; //@line 129 "texture.rs"
          __THREW__ = 0;
          invoke_viiiii(193,($_105|0),(7832|0),1,(38620|0),0); //@line 131 "texture.rs"
          $54 = __THREW__; __THREW__ = 0;
          $55 = $54&1;
          if (!($55)) {
           __THREW__ = 0;
           invoke_vi(170,($_105|0)); //@line 131 "texture.rs"
           $56 = __THREW__; __THREW__ = 0;
           $57 = $56&1;
           if (!($57)) {
            __ZN4core3ptr13drop_in_place17h567c71dce2ffe868E($buffer); //@line 132 "texture.rs"
            STACKTOP = sp;return; //@line 133 "texture.rs"
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $58 = ___cxa_find_matching_catch_2()|0;
 $59 = tempRet0;
 HEAP32[$personalityslot>>2] = $58;
 $60 = ((($personalityslot)) + 4|0);
 HEAP32[$60>>2] = $59;
 __ZN4core3ptr13drop_in_place17h567c71dce2ffe868E($buffer); //@line 132 "texture.rs"
 $61 = HEAP32[$personalityslot>>2]|0; //@line 96 "texture.rs"
 $62 = ((($personalityslot)) + 4|0); //@line 96 "texture.rs"
 $63 = HEAP32[$62>>2]|0; //@line 96 "texture.rs"
 ___resumeException($61|0);
 // unreachable;
}
function __ZN5rustv7texture12load_texture17h8fd7cb2c0e9f43ceE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $filename = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $filename = sp;
 HEAP32[$filename>>2] = $0;
 $2 = ((($filename)) + 4|0);
 HEAP32[$2>>2] = $1;
 STACKTOP = sp;return 0; //@line 9 "texture.rs"
}
function __ZN5rustv7texture15create_textures28__u7b__u7b_closure_u7d__u7d_17h40d24466e83a789eE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$arith = 0, $$arith5 = 0, $$arith9 = 0, $$overflow = 0, $$overflow10 = 0, $$overflow6 = 0, $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0;
 var $i = 0, $index = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $arg0 = $0;
 $index = $1;
 $3 = $index; //@line 110 "texture.rs"
 $4 = $arg0; //@line 110 "texture.rs"
 $5 = HEAP32[$4>>2]|0; //@line 110 "texture.rs"
 $6 = HEAP32[$5>>2]|0; //@line 110 "texture.rs"
 __ZN5rustv3r3d7div_rem17hb02e49cf6a980b3aE($2,$3,$6); //@line 110 "texture.rs"
 $$sreg$field = HEAP32[$2>>2]|0; //@line 110 "texture.rs"
 $$sreg$index1 = ((($2)) + 4|0); //@line 110 "texture.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 110 "texture.rs"
 $i = $$sreg$field; //@line 110 "texture.rs"
 $j = $$sreg$field2; //@line 110 "texture.rs"
 $7 = $i; //@line 111 "texture.rs"
 $8 = $j; //@line 111 "texture.rs"
 $$arith9 = $8<<8; //@line 111 "texture.rs"
 $$overflow10 = ($8>>>0)>(16777215); //@line 111 "texture.rs"
 $9 = $$overflow10; //@line 111 "texture.rs"
 if ($9) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(7864); //@line 111 "texture.rs"
  // unreachable; //@line 111 "texture.rs"
 }
 $$arith5 = (($7) + ($$arith9))|0; //@line 111 "texture.rs"
 $$overflow6 = ($$arith5>>>0)<($7>>>0); //@line 111 "texture.rs"
 $10 = $$overflow6; //@line 111 "texture.rs"
 if ($10) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(7888); //@line 111 "texture.rs"
  // unreachable; //@line 111 "texture.rs"
 }
 $$arith = (($$arith5) + 16711680)|0; //@line 111 "texture.rs"
 $$overflow = ($$arith5>>>0)>(4278255615); //@line 111 "texture.rs"
 $11 = $$overflow; //@line 111 "texture.rs"
 if ($11) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(7912); //@line 111 "texture.rs"
  // unreachable; //@line 111 "texture.rs"
 } else {
  STACKTOP = sp;return ($$arith|0); //@line 112 "texture.rs"
 }
 return (0)|0;
}
function __ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_14from_raw_parts17h4667cea7a6ae9977E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $capacity = 0, $length = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $ptr = $1;
 $length = $2;
 $capacity = $3;
 $5 = $ptr; //@line 422 "/checkout/src/liballoc/vec.rs"
 $6 = $capacity; //@line 422 "/checkout/src/liballoc/vec.rs"
 __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_14from_raw_parts17h75ca805e873840bdE($4,$5,$6); //@line 422 "/checkout/src/liballoc/vec.rs"
 $$sreg$field = HEAP32[$4>>2]|0; //@line 422 "/checkout/src/liballoc/vec.rs"
 $$sreg$index1 = ((($4)) + 4|0); //@line 422 "/checkout/src/liballoc/vec.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 422 "/checkout/src/liballoc/vec.rs"
 $7 = $length; //@line 423 "/checkout/src/liballoc/vec.rs"
 HEAP32[$0>>2] = $$sreg$field; //@line 421 "/checkout/src/liballoc/vec.rs"
 $8 = ((($0)) + 4|0); //@line 421 "/checkout/src/liballoc/vec.rs"
 HEAP32[$8>>2] = $$sreg$field2; //@line 421 "/checkout/src/liballoc/vec.rs"
 $9 = ((($0)) + 8|0); //@line 421 "/checkout/src/liballoc/vec.rs"
 HEAP32[$9>>2] = $7; //@line 421 "/checkout/src/liballoc/vec.rs"
 STACKTOP = sp;return; //@line 425 "/checkout/src/liballoc/vec.rs"
}
function __ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_14from_raw_parts17hd63f42b385420b95E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $capacity = 0, $length = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $ptr = $1;
 $length = $2;
 $capacity = $3;
 $5 = $ptr; //@line 422 "/checkout/src/liballoc/vec.rs"
 $6 = $capacity; //@line 422 "/checkout/src/liballoc/vec.rs"
 __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_14from_raw_parts17h532028a06be2ef74E($4,$5,$6); //@line 422 "/checkout/src/liballoc/vec.rs"
 $$sreg$field = HEAP32[$4>>2]|0; //@line 422 "/checkout/src/liballoc/vec.rs"
 $$sreg$index1 = ((($4)) + 4|0); //@line 422 "/checkout/src/liballoc/vec.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 422 "/checkout/src/liballoc/vec.rs"
 $7 = $length; //@line 423 "/checkout/src/liballoc/vec.rs"
 HEAP32[$0>>2] = $$sreg$field; //@line 421 "/checkout/src/liballoc/vec.rs"
 $8 = ((($0)) + 4|0); //@line 421 "/checkout/src/liballoc/vec.rs"
 HEAP32[$8>>2] = $$sreg$field2; //@line 421 "/checkout/src/liballoc/vec.rs"
 $9 = ((($0)) + 8|0); //@line 421 "/checkout/src/liballoc/vec.rs"
 HEAP32[$9>>2] = $7; //@line 421 "/checkout/src/liballoc/vec.rs"
 STACKTOP = sp;return; //@line 425 "/checkout/src/liballoc/vec.rs"
}
function __ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_14from_raw_parts17he240d1178c248e26E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $capacity = 0, $length = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $ptr = $1;
 $length = $2;
 $capacity = $3;
 $5 = $ptr; //@line 422 "/checkout/src/liballoc/vec.rs"
 $6 = $capacity; //@line 422 "/checkout/src/liballoc/vec.rs"
 __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_14from_raw_parts17h6425fbe5971072edE($4,$5,$6); //@line 422 "/checkout/src/liballoc/vec.rs"
 $$sreg$field = HEAP32[$4>>2]|0; //@line 422 "/checkout/src/liballoc/vec.rs"
 $$sreg$index1 = ((($4)) + 4|0); //@line 422 "/checkout/src/liballoc/vec.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 422 "/checkout/src/liballoc/vec.rs"
 $7 = $length; //@line 423 "/checkout/src/liballoc/vec.rs"
 HEAP32[$0>>2] = $$sreg$field; //@line 421 "/checkout/src/liballoc/vec.rs"
 $8 = ((($0)) + 4|0); //@line 421 "/checkout/src/liballoc/vec.rs"
 HEAP32[$8>>2] = $$sreg$field2; //@line 421 "/checkout/src/liballoc/vec.rs"
 $9 = ((($0)) + 8|0); //@line 421 "/checkout/src/liballoc/vec.rs"
 HEAP32[$9>>2] = $7; //@line 421 "/checkout/src/liballoc/vec.rs"
 STACKTOP = sp;return; //@line 425 "/checkout/src/liballoc/vec.rs"
}
function __ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_17extend_from_slice17h505a1ac5c37472ecE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $other = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $other = sp + 16|0;
 $self = $0;
 HEAP32[$other>>2] = $1;
 $4 = ((($other)) + 4|0);
 HEAP32[$4>>2] = $2;
 $5 = $self; //@line 1273 "/checkout/src/liballoc/vec.rs"
 $6 = HEAP32[$other>>2]|0; //@line 1273 "/checkout/src/liballoc/vec.rs"
 $7 = ((($other)) + 4|0); //@line 1273 "/checkout/src/liballoc/vec.rs"
 $8 = HEAP32[$7>>2]|0; //@line 1273 "/checkout/src/liballoc/vec.rs"
 __ZN5alloc5slice29__LT_impl_u20__u5b_T_u5d__GT_4iter17hf6ec5a30a7f31009E($3,$6,$8); //@line 1273 "/checkout/src/liballoc/vec.rs"
 $$sreg$field = HEAP32[$3>>2]|0; //@line 1273 "/checkout/src/liballoc/vec.rs"
 $$sreg$index1 = ((($3)) + 4|0); //@line 1273 "/checkout/src/liballoc/vec.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 1273 "/checkout/src/liballoc/vec.rs"
 __ZN139__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_alloc__vec__SpecExtend_LT__RF__u27_a_u20_T_C__u20_core__slice__Iter_LT__u27_a_C__u20_T_GT__GT__GT_11spec_extend17h7e35b0d4bb6a09baE($5,$$sreg$field,$$sreg$field2); //@line 1273 "/checkout/src/liballoc/vec.rs"
 STACKTOP = sp;return; //@line 1274 "/checkout/src/liballoc/vec.rs"
}
function __ZN139__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_alloc__vec__SpecExtend_LT__RF__u27_a_u20_T_C__u20_core__slice__Iter_LT__u27_a_C__u20_T_GT__GT__GT_11spec_extend17h7e35b0d4bb6a09baE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sreg$field = 0, $$sreg$field4 = 0, $$sreg$index3 = 0, $$sreg1$field = 0, $$sreg1$field8 = 0, $$sreg1$index7 = 0, $$sreg2$field = 0, $$sreg2$field11 = 0, $$sreg2$index10 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_23 = 0, $iterator = 0, $len = 0, $self = 0, $slice = 0, $slice$index6 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $3 = sp + 32|0;
 $4 = sp + 16|0;
 $5 = sp;
 $slice = sp + 56|0;
 $iterator = sp + 48|0;
 $self = $0;
 HEAP32[$iterator>>2] = $1;
 $6 = ((($iterator)) + 4|0);
 HEAP32[$6>>2] = $2;
 __ZN49__LT_core__slice__Iter_LT__u27_a_C__u20_T_GT__GT_8as_slice17h59eb302a7be3ea8aE($5,$iterator); //@line 1898 "/checkout/src/liballoc/vec.rs"
 $$sreg$field = HEAP32[$5>>2]|0; //@line 1898 "/checkout/src/liballoc/vec.rs"
 $$sreg$index3 = ((($5)) + 4|0); //@line 1898 "/checkout/src/liballoc/vec.rs"
 $$sreg$field4 = HEAP32[$$sreg$index3>>2]|0; //@line 1898 "/checkout/src/liballoc/vec.rs"
 HEAP32[$slice>>2] = $$sreg$field; //@line 1898 "/checkout/src/liballoc/vec.rs"
 $slice$index6 = ((($slice)) + 4|0); //@line 1898 "/checkout/src/liballoc/vec.rs"
 HEAP32[$slice$index6>>2] = $$sreg$field4; //@line 1898 "/checkout/src/liballoc/vec.rs"
 $7 = $self; //@line 1899 "/checkout/src/liballoc/vec.rs"
 $8 = HEAP32[$slice>>2]|0; //@line 1899 "/checkout/src/liballoc/vec.rs"
 $9 = ((($slice)) + 4|0); //@line 1899 "/checkout/src/liballoc/vec.rs"
 $10 = HEAP32[$9>>2]|0; //@line 1899 "/checkout/src/liballoc/vec.rs"
 $11 = (__ZN5alloc5slice29__LT_impl_u20__u5b_T_u5d__GT_3len17h3ab191dac78e517aE($8,$10)|0); //@line 1899 "/checkout/src/liballoc/vec.rs"
 __ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_7reserve17h3b84f9c236e009c7E($7,$11); //@line 1899 "/checkout/src/liballoc/vec.rs"
 $12 = $self; //@line 1901 "/checkout/src/liballoc/vec.rs"
 $13 = (__ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_3len17h345c4daf6a9340ebE($12)|0); //@line 1901 "/checkout/src/liballoc/vec.rs"
 $len = $13; //@line 1901 "/checkout/src/liballoc/vec.rs"
 $14 = $self; //@line 1902 "/checkout/src/liballoc/vec.rs"
 $15 = $len; //@line 1902 "/checkout/src/liballoc/vec.rs"
 $16 = HEAP32[$slice>>2]|0; //@line 1902 "/checkout/src/liballoc/vec.rs"
 $17 = ((($slice)) + 4|0); //@line 1902 "/checkout/src/liballoc/vec.rs"
 $18 = HEAP32[$17>>2]|0; //@line 1902 "/checkout/src/liballoc/vec.rs"
 $19 = (__ZN5alloc5slice29__LT_impl_u20__u5b_T_u5d__GT_3len17h3ab191dac78e517aE($16,$18)|0); //@line 1902 "/checkout/src/liballoc/vec.rs"
 $20 = (($15) + ($19))|0; //@line 1902 "/checkout/src/liballoc/vec.rs"
 __ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_7set_len17h90d5c2908270c32eE($14,$20); //@line 1902 "/checkout/src/liballoc/vec.rs"
 $21 = $self; //@line 1903 "/checkout/src/liballoc/vec.rs"
 __ZN71__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__deref__DerefMut_GT_9deref_mut17hf6d0d2603988ed4aE($4,$21); //@line 1903 "/checkout/src/liballoc/vec.rs"
 $$sreg1$field = HEAP32[$4>>2]|0; //@line 1903 "/checkout/src/liballoc/vec.rs"
 $$sreg1$index7 = ((($4)) + 4|0); //@line 1903 "/checkout/src/liballoc/vec.rs"
 $$sreg1$field8 = HEAP32[$$sreg1$index7>>2]|0; //@line 1903 "/checkout/src/liballoc/vec.rs"
 $22 = $len; //@line 1903 "/checkout/src/liballoc/vec.rs"
 $_23 = $22; //@line 1903 "/checkout/src/liballoc/vec.rs"
 $23 = $_23; //@line 1903 "/checkout/src/liballoc/vec.rs"
 __ZN5alloc5slice29__LT_impl_u20__u5b_T_u5d__GT_17get_unchecked_mut17hec018dbbf8c40e17E($3,$$sreg1$field,$$sreg1$field8,$23); //@line 1903 "/checkout/src/liballoc/vec.rs"
 $$sreg2$field = HEAP32[$3>>2]|0; //@line 1903 "/checkout/src/liballoc/vec.rs"
 $$sreg2$index10 = ((($3)) + 4|0); //@line 1903 "/checkout/src/liballoc/vec.rs"
 $$sreg2$field11 = HEAP32[$$sreg2$index10>>2]|0; //@line 1903 "/checkout/src/liballoc/vec.rs"
 $24 = HEAP32[$slice>>2]|0; //@line 1903 "/checkout/src/liballoc/vec.rs"
 $25 = ((($slice)) + 4|0); //@line 1903 "/checkout/src/liballoc/vec.rs"
 $26 = HEAP32[$25>>2]|0; //@line 1903 "/checkout/src/liballoc/vec.rs"
 __ZN5alloc5slice29__LT_impl_u20__u5b_T_u5d__GT_15copy_from_slice17h0fd485dd03bdea37E($$sreg2$field,$$sreg2$field11,$24,$26); //@line 1903 "/checkout/src/liballoc/vec.rs"
 STACKTOP = sp;return; //@line 1905 "/checkout/src/liballoc/vec.rs"
}
function __ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_7reserve17h3b84f9c236e009c7E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $additional = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $additional = $1;
 $2 = $self; //@line 461 "/checkout/src/liballoc/vec.rs"
 $3 = $self; //@line 461 "/checkout/src/liballoc/vec.rs"
 $4 = ((($3)) + 8|0); //@line 461 "/checkout/src/liballoc/vec.rs"
 $5 = HEAP32[$4>>2]|0; //@line 461 "/checkout/src/liballoc/vec.rs"
 $6 = $additional; //@line 461 "/checkout/src/liballoc/vec.rs"
 __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_7reserve17h47c2e17872c37f83E($2,$5,$6); //@line 461 "/checkout/src/liballoc/vec.rs"
 STACKTOP = sp;return; //@line 462 "/checkout/src/liballoc/vec.rs"
}
function __ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_3len17h345c4daf6a9340ebE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 1161 "/checkout/src/liballoc/vec.rs"
 $2 = ((($1)) + 8|0); //@line 1161 "/checkout/src/liballoc/vec.rs"
 $3 = HEAP32[$2>>2]|0; //@line 1161 "/checkout/src/liballoc/vec.rs"
 STACKTOP = sp;return ($3|0); //@line 1162 "/checkout/src/liballoc/vec.rs"
}
function __ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_7set_len17h90d5c2908270c32eE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $len = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $len = $1;
 $2 = $len; //@line 678 "/checkout/src/liballoc/vec.rs"
 $3 = $self; //@line 678 "/checkout/src/liballoc/vec.rs"
 $4 = ((($3)) + 8|0); //@line 678 "/checkout/src/liballoc/vec.rs"
 HEAP32[$4>>2] = $2; //@line 678 "/checkout/src/liballoc/vec.rs"
 STACKTOP = sp;return; //@line 679 "/checkout/src/liballoc/vec.rs"
}
function __ZN71__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__deref__DerefMut_GT_9deref_mut17hf6d0d2603988ed4aE($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $ptr = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $self = $0;
 $2 = $self; //@line 1699 "/checkout/src/liballoc/vec.rs"
 $3 = (__ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_3ptr17hb27cde95f398fcc7E($2)|0); //@line 1699 "/checkout/src/liballoc/vec.rs"
 $ptr = $3; //@line 1699 "/checkout/src/liballoc/vec.rs"
 $4 = $ptr; //@line 1700 "/checkout/src/liballoc/vec.rs"
 (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h29fb7da4258afde7E($4)|0); //@line 1700 "/checkout/src/liballoc/vec.rs"
 $5 = $ptr; //@line 1701 "/checkout/src/liballoc/vec.rs"
 $6 = $self; //@line 1701 "/checkout/src/liballoc/vec.rs"
 $7 = ((($6)) + 8|0); //@line 1701 "/checkout/src/liballoc/vec.rs"
 $8 = HEAP32[$7>>2]|0; //@line 1701 "/checkout/src/liballoc/vec.rs"
 __ZN4core5slice18from_raw_parts_mut17hb4ceac10870c9537E($1,$5,$8); //@line 1701 "/checkout/src/liballoc/vec.rs"
 $$sreg$field = HEAP32[$1>>2]|0; //@line 1701 "/checkout/src/liballoc/vec.rs"
 $$sreg$index1 = ((($1)) + 4|0); //@line 1701 "/checkout/src/liballoc/vec.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 1701 "/checkout/src/liballoc/vec.rs"
 HEAP32[$retVal>>2] = $$sreg$field; //@line 1703 "/checkout/src/liballoc/vec.rs"
 $retVal$index4 = ((($retVal)) + 4|0); //@line 1703 "/checkout/src/liballoc/vec.rs"
 HEAP32[$retVal$index4>>2] = $$sreg$field2; //@line 1703 "/checkout/src/liballoc/vec.rs"
 STACKTOP = sp;return; //@line 1703 "/checkout/src/liballoc/vec.rs"
}
function __ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_3len17h4f8e732f00a3d54eE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 1161 "/checkout/src/liballoc/vec.rs"
 $2 = ((($1)) + 8|0); //@line 1161 "/checkout/src/liballoc/vec.rs"
 $3 = HEAP32[$2>>2]|0; //@line 1161 "/checkout/src/liballoc/vec.rs"
 STACKTOP = sp;return ($3|0); //@line 1162 "/checkout/src/liballoc/vec.rs"
}
function __ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_3len17h82e1661a72e8651bE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 1161 "/checkout/src/liballoc/vec.rs"
 $2 = ((($1)) + 8|0); //@line 1161 "/checkout/src/liballoc/vec.rs"
 $3 = HEAP32[$2>>2]|0; //@line 1161 "/checkout/src/liballoc/vec.rs"
 STACKTOP = sp;return ($3|0); //@line 1162 "/checkout/src/liballoc/vec.rs"
}
function __ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_3new17h7ee9d7799dee01e4E($0) {
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp; //@line 323 "/checkout/src/liballoc/vec.rs"
 __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3new17h93374d6d4d4ccfcdE($1); //@line 323 "/checkout/src/liballoc/vec.rs"
 $$sreg$field = HEAP32[$1>>2]|0; //@line 323 "/checkout/src/liballoc/vec.rs"
 $$sreg$index1 = ((($1)) + 4|0); //@line 323 "/checkout/src/liballoc/vec.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 323 "/checkout/src/liballoc/vec.rs"
 HEAP32[$0>>2] = $$sreg$field; //@line 322 "/checkout/src/liballoc/vec.rs"
 $2 = ((($0)) + 4|0); //@line 322 "/checkout/src/liballoc/vec.rs"
 HEAP32[$2>>2] = $$sreg$field2; //@line 322 "/checkout/src/liballoc/vec.rs"
 $3 = ((($0)) + 8|0); //@line 322 "/checkout/src/liballoc/vec.rs"
 HEAP32[$3>>2] = 0; //@line 322 "/checkout/src/liballoc/vec.rs"
 STACKTOP = sp;return; //@line 326 "/checkout/src/liballoc/vec.rs"
}
function __ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_3new17h8f49465beea9d182E($0) {
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp; //@line 323 "/checkout/src/liballoc/vec.rs"
 __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3new17h13a442f282479982E($1); //@line 323 "/checkout/src/liballoc/vec.rs"
 $$sreg$field = HEAP32[$1>>2]|0; //@line 323 "/checkout/src/liballoc/vec.rs"
 $$sreg$index1 = ((($1)) + 4|0); //@line 323 "/checkout/src/liballoc/vec.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 323 "/checkout/src/liballoc/vec.rs"
 HEAP32[$0>>2] = $$sreg$field; //@line 322 "/checkout/src/liballoc/vec.rs"
 $2 = ((($0)) + 4|0); //@line 322 "/checkout/src/liballoc/vec.rs"
 HEAP32[$2>>2] = $$sreg$field2; //@line 322 "/checkout/src/liballoc/vec.rs"
 $3 = ((($0)) + 8|0); //@line 322 "/checkout/src/liballoc/vec.rs"
 HEAP32[$3>>2] = 0; //@line 322 "/checkout/src/liballoc/vec.rs"
 STACKTOP = sp;return; //@line 326 "/checkout/src/liballoc/vec.rs"
}
function __ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_3new17h9e337016d5bfd3eeE($0) {
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp; //@line 323 "/checkout/src/liballoc/vec.rs"
 __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3new17h3cd73a04e0db3b7fE($1); //@line 323 "/checkout/src/liballoc/vec.rs"
 $$sreg$field = HEAP32[$1>>2]|0; //@line 323 "/checkout/src/liballoc/vec.rs"
 $$sreg$index1 = ((($1)) + 4|0); //@line 323 "/checkout/src/liballoc/vec.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 323 "/checkout/src/liballoc/vec.rs"
 HEAP32[$0>>2] = $$sreg$field; //@line 322 "/checkout/src/liballoc/vec.rs"
 $2 = ((($0)) + 4|0); //@line 322 "/checkout/src/liballoc/vec.rs"
 HEAP32[$2>>2] = $$sreg$field2; //@line 322 "/checkout/src/liballoc/vec.rs"
 $3 = ((($0)) + 8|0); //@line 322 "/checkout/src/liballoc/vec.rs"
 HEAP32[$3>>2] = 0; //@line 322 "/checkout/src/liballoc/vec.rs"
 STACKTOP = sp;return; //@line 326 "/checkout/src/liballoc/vec.rs"
}
function __ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_3new17hed5cf88f04c2798bE($0) {
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp; //@line 323 "/checkout/src/liballoc/vec.rs"
 __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3new17h8a1881fffd55e157E($1); //@line 323 "/checkout/src/liballoc/vec.rs"
 $$sreg$field = HEAP32[$1>>2]|0; //@line 323 "/checkout/src/liballoc/vec.rs"
 $$sreg$index1 = ((($1)) + 4|0); //@line 323 "/checkout/src/liballoc/vec.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 323 "/checkout/src/liballoc/vec.rs"
 HEAP32[$0>>2] = $$sreg$field; //@line 322 "/checkout/src/liballoc/vec.rs"
 $2 = ((($0)) + 4|0); //@line 322 "/checkout/src/liballoc/vec.rs"
 HEAP32[$2>>2] = $$sreg$field2; //@line 322 "/checkout/src/liballoc/vec.rs"
 $3 = ((($0)) + 8|0); //@line 322 "/checkout/src/liballoc/vec.rs"
 HEAP32[$3>>2] = 0; //@line 322 "/checkout/src/liballoc/vec.rs"
 STACKTOP = sp;return; //@line 326 "/checkout/src/liballoc/vec.rs"
}
function __ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_4push17h3aa9278a26666c97E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$i = 0, $_20 = 0, $end = 0, $personalityslot = 0, $self = 0, $self$i = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = sp;
 $personalityslot = sp + 24|0;
 $self = $0;
 $value = $1;
 $_20 = 0; //@line 967 "/checkout/src/liballoc/vec.rs"
 $_20 = 1; //@line 967 "/checkout/src/liballoc/vec.rs"
 $3 = $self; //@line 967 "/checkout/src/liballoc/vec.rs"
 $4 = ((($3)) + 8|0); //@line 967 "/checkout/src/liballoc/vec.rs"
 $5 = HEAP32[$4>>2]|0; //@line 967 "/checkout/src/liballoc/vec.rs"
 $6 = $self; //@line 967 "/checkout/src/liballoc/vec.rs"
 $self$i = $6;
 __THREW__ = 0;
 $7 = (invoke_i(185)|0); //@line 207 "/checkout/src/liballoc/raw_vec.rs"
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if (!($9)) {
   $10 = ($7|0)==(0); //@line 207 "/checkout/src/liballoc/raw_vec.rs"
   if ($10) {
    $_0$i = -1; //@line 208 "/checkout/src/liballoc/raw_vec.rs"
   } else {
    $11 = $self$i; //@line 210 "/checkout/src/liballoc/raw_vec.rs"
    $12 = ((($11)) + 4|0); //@line 210 "/checkout/src/liballoc/raw_vec.rs"
    $13 = HEAP32[$12>>2]|0; //@line 210 "/checkout/src/liballoc/raw_vec.rs"
    $_0$i = $13; //@line 210 "/checkout/src/liballoc/raw_vec.rs"
   }
   $14 = $_0$i; //@line 212 "/checkout/src/liballoc/raw_vec.rs"
   $15 = ($5|0)==($14|0); //@line 967 "/checkout/src/liballoc/vec.rs"
   if ($15) {
    $19 = $self; //@line 968 "/checkout/src/liballoc/vec.rs"
    __THREW__ = 0;
    invoke_vi(371,($19|0)); //@line 968 "/checkout/src/liballoc/vec.rs"
    $20 = __THREW__; __THREW__ = 0;
    $21 = $20&1;
    if ($21) {
     break;
    }
   }
   $22 = $self; //@line 971 "/checkout/src/liballoc/vec.rs"
   __THREW__ = 0;
   invoke_vii(372,($2|0),($22|0)); //@line 971 "/checkout/src/liballoc/vec.rs"
   $$sreg$field = HEAP32[$2>>2]|0; //@line 971 "/checkout/src/liballoc/vec.rs"
   $$sreg$index1 = ((($2)) + 4|0); //@line 971 "/checkout/src/liballoc/vec.rs"
   $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 971 "/checkout/src/liballoc/vec.rs"
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if (!($24)) {
    __THREW__ = 0;
    $25 = (invoke_iii(373,($$sreg$field|0),($$sreg$field2|0))|0); //@line 971 "/checkout/src/liballoc/vec.rs"
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if (!($27)) {
     $28 = $self; //@line 971 "/checkout/src/liballoc/vec.rs"
     $29 = ((($28)) + 8|0); //@line 971 "/checkout/src/liballoc/vec.rs"
     $30 = HEAP32[$29>>2]|0; //@line 971 "/checkout/src/liballoc/vec.rs"
     __THREW__ = 0;
     $31 = (invoke_iii(374,($25|0),($30|0))|0); //@line 971 "/checkout/src/liballoc/vec.rs"
     $32 = __THREW__; __THREW__ = 0;
     $33 = $32&1;
     if (!($33)) {
      $end = $31; //@line 971 "/checkout/src/liballoc/vec.rs"
      $34 = $end; //@line 972 "/checkout/src/liballoc/vec.rs"
      $_20 = 0; //@line 972 "/checkout/src/liballoc/vec.rs"
      $35 = $value; //@line 972 "/checkout/src/liballoc/vec.rs"
      __THREW__ = 0;
      invoke_vii(375,($34|0),($35|0)); //@line 972 "/checkout/src/liballoc/vec.rs"
      $36 = __THREW__; __THREW__ = 0;
      $37 = $36&1;
      if (!($37)) {
       $38 = $self; //@line 973 "/checkout/src/liballoc/vec.rs"
       $39 = ((($38)) + 8|0); //@line 973 "/checkout/src/liballoc/vec.rs"
       $40 = $self; //@line 973 "/checkout/src/liballoc/vec.rs"
       $41 = ((($40)) + 8|0); //@line 973 "/checkout/src/liballoc/vec.rs"
       $42 = HEAP32[$41>>2]|0; //@line 973 "/checkout/src/liballoc/vec.rs"
       $43 = (($42) + 1)|0; //@line 973 "/checkout/src/liballoc/vec.rs"
       HEAP32[$39>>2] = $43; //@line 973 "/checkout/src/liballoc/vec.rs"
       STACKTOP = sp;return; //@line 975 "/checkout/src/liballoc/vec.rs"
      }
     }
    }
   }
  }
 } while(0);
 $44 = ___cxa_find_matching_catch_2()|0;
 $45 = tempRet0;
 HEAP32[$personalityslot>>2] = $44;
 $46 = ((($personalityslot)) + 4|0);
 HEAP32[$46>>2] = $45;
 $47 = $_20; //@line 975 "/checkout/src/liballoc/vec.rs"
 $48 = $47&1; //@line 975 "/checkout/src/liballoc/vec.rs"
 if (!($48)) {
  $16 = HEAP32[$personalityslot>>2]|0; //@line 964 "/checkout/src/liballoc/vec.rs"
  $17 = ((($personalityslot)) + 4|0); //@line 964 "/checkout/src/liballoc/vec.rs"
  $18 = HEAP32[$17>>2]|0; //@line 964 "/checkout/src/liballoc/vec.rs"
  ___resumeException($16|0);
  // unreachable;
 }
 $_20 = 0; //@line 975 "/checkout/src/liballoc/vec.rs"
 $16 = HEAP32[$personalityslot>>2]|0; //@line 964 "/checkout/src/liballoc/vec.rs"
 $17 = ((($personalityslot)) + 4|0); //@line 964 "/checkout/src/liballoc/vec.rs"
 $18 = HEAP32[$17>>2]|0; //@line 964 "/checkout/src/liballoc/vec.rs"
 ___resumeException($16|0);
 // unreachable;
}
function __ZN71__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__deref__DerefMut_GT_9deref_mut17hfdaab856b5121256E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $ptr = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $self = $0;
 $2 = $self; //@line 1699 "/checkout/src/liballoc/vec.rs"
 $3 = (__ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_3ptr17hcec96c2ecad113e0E($2)|0); //@line 1699 "/checkout/src/liballoc/vec.rs"
 $ptr = $3; //@line 1699 "/checkout/src/liballoc/vec.rs"
 $4 = $ptr; //@line 1700 "/checkout/src/liballoc/vec.rs"
 (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h29f14f440a266f0fE($4)|0); //@line 1700 "/checkout/src/liballoc/vec.rs"
 $5 = $ptr; //@line 1701 "/checkout/src/liballoc/vec.rs"
 $6 = $self; //@line 1701 "/checkout/src/liballoc/vec.rs"
 $7 = ((($6)) + 8|0); //@line 1701 "/checkout/src/liballoc/vec.rs"
 $8 = HEAP32[$7>>2]|0; //@line 1701 "/checkout/src/liballoc/vec.rs"
 __ZN4core5slice18from_raw_parts_mut17heb910a92df19ed2cE($1,$5,$8); //@line 1701 "/checkout/src/liballoc/vec.rs"
 $$sreg$field = HEAP32[$1>>2]|0; //@line 1701 "/checkout/src/liballoc/vec.rs"
 $$sreg$index1 = ((($1)) + 4|0); //@line 1701 "/checkout/src/liballoc/vec.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 1701 "/checkout/src/liballoc/vec.rs"
 HEAP32[$retVal>>2] = $$sreg$field; //@line 1703 "/checkout/src/liballoc/vec.rs"
 $retVal$index4 = ((($retVal)) + 4|0); //@line 1703 "/checkout/src/liballoc/vec.rs"
 HEAP32[$retVal$index4>>2] = $$sreg$field2; //@line 1703 "/checkout/src/liballoc/vec.rs"
 STACKTOP = sp;return; //@line 1703 "/checkout/src/liballoc/vec.rs"
}
function __ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_4push17he61425ed0a566096E($0,$value) {
 $0 = $0|0;
 $value = $value|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$i = 0, $_19 = 0, $_20 = 0, $end = 0, $personalityslot = 0, $self = 0, $self$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $1 = sp;
 $personalityslot = sp + 32|0;
 $_19 = sp + 16|0;
 $self = $0;
 $_20 = 0; //@line 967 "/checkout/src/liballoc/vec.rs"
 $_20 = 1; //@line 967 "/checkout/src/liballoc/vec.rs"
 $2 = $self; //@line 967 "/checkout/src/liballoc/vec.rs"
 $3 = ((($2)) + 8|0); //@line 967 "/checkout/src/liballoc/vec.rs"
 $4 = HEAP32[$3>>2]|0; //@line 967 "/checkout/src/liballoc/vec.rs"
 $5 = $self; //@line 967 "/checkout/src/liballoc/vec.rs"
 $self$i = $5;
 __THREW__ = 0;
 $6 = (invoke_i(376)|0); //@line 207 "/checkout/src/liballoc/raw_vec.rs"
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 do {
  if (!($8)) {
   $9 = ($6|0)==(0); //@line 207 "/checkout/src/liballoc/raw_vec.rs"
   if ($9) {
    $_0$i = -1; //@line 208 "/checkout/src/liballoc/raw_vec.rs"
   } else {
    $10 = $self$i; //@line 210 "/checkout/src/liballoc/raw_vec.rs"
    $11 = ((($10)) + 4|0); //@line 210 "/checkout/src/liballoc/raw_vec.rs"
    $12 = HEAP32[$11>>2]|0; //@line 210 "/checkout/src/liballoc/raw_vec.rs"
    $_0$i = $12; //@line 210 "/checkout/src/liballoc/raw_vec.rs"
   }
   $13 = $_0$i; //@line 212 "/checkout/src/liballoc/raw_vec.rs"
   $14 = ($4|0)==($13|0); //@line 967 "/checkout/src/liballoc/vec.rs"
   if ($14) {
    $18 = $self; //@line 968 "/checkout/src/liballoc/vec.rs"
    __THREW__ = 0;
    invoke_vi(377,($18|0)); //@line 968 "/checkout/src/liballoc/vec.rs"
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     break;
    }
   }
   $21 = $self; //@line 971 "/checkout/src/liballoc/vec.rs"
   __THREW__ = 0;
   invoke_vii(378,($1|0),($21|0)); //@line 971 "/checkout/src/liballoc/vec.rs"
   $$sreg$field = HEAP32[$1>>2]|0; //@line 971 "/checkout/src/liballoc/vec.rs"
   $$sreg$index1 = ((($1)) + 4|0); //@line 971 "/checkout/src/liballoc/vec.rs"
   $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 971 "/checkout/src/liballoc/vec.rs"
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if (!($23)) {
    __THREW__ = 0;
    $24 = (invoke_iii(280,($$sreg$field|0),($$sreg$field2|0))|0); //@line 971 "/checkout/src/liballoc/vec.rs"
    $25 = __THREW__; __THREW__ = 0;
    $26 = $25&1;
    if (!($26)) {
     $27 = $self; //@line 971 "/checkout/src/liballoc/vec.rs"
     $28 = ((($27)) + 8|0); //@line 971 "/checkout/src/liballoc/vec.rs"
     $29 = HEAP32[$28>>2]|0; //@line 971 "/checkout/src/liballoc/vec.rs"
     __THREW__ = 0;
     $30 = (invoke_iii(379,($24|0),($29|0))|0); //@line 971 "/checkout/src/liballoc/vec.rs"
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if (!($32)) {
      $end = $30; //@line 971 "/checkout/src/liballoc/vec.rs"
      $33 = $end; //@line 972 "/checkout/src/liballoc/vec.rs"
      $_20 = 0; //@line 972 "/checkout/src/liballoc/vec.rs"
      ;HEAP32[$_19>>2]=HEAP32[$value>>2]|0;HEAP32[$_19+4>>2]=HEAP32[$value+4>>2]|0;HEAP32[$_19+8>>2]=HEAP32[$value+8>>2]|0; //@line 972 "/checkout/src/liballoc/vec.rs"
      __THREW__ = 0;
      invoke_vii(380,($33|0),($_19|0)); //@line 972 "/checkout/src/liballoc/vec.rs"
      $34 = __THREW__; __THREW__ = 0;
      $35 = $34&1;
      if (!($35)) {
       $36 = $self; //@line 973 "/checkout/src/liballoc/vec.rs"
       $37 = ((($36)) + 8|0); //@line 973 "/checkout/src/liballoc/vec.rs"
       $38 = $self; //@line 973 "/checkout/src/liballoc/vec.rs"
       $39 = ((($38)) + 8|0); //@line 973 "/checkout/src/liballoc/vec.rs"
       $40 = HEAP32[$39>>2]|0; //@line 973 "/checkout/src/liballoc/vec.rs"
       $41 = (($40) + 1)|0; //@line 973 "/checkout/src/liballoc/vec.rs"
       HEAP32[$37>>2] = $41; //@line 973 "/checkout/src/liballoc/vec.rs"
       STACKTOP = sp;return; //@line 975 "/checkout/src/liballoc/vec.rs"
      }
     }
    }
   }
  }
 } while(0);
 $42 = ___cxa_find_matching_catch_2()|0;
 $43 = tempRet0;
 HEAP32[$personalityslot>>2] = $42;
 $44 = ((($personalityslot)) + 4|0);
 HEAP32[$44>>2] = $43;
 $45 = $_20; //@line 975 "/checkout/src/liballoc/vec.rs"
 $46 = $45&1; //@line 975 "/checkout/src/liballoc/vec.rs"
 if (!($46)) {
  $15 = HEAP32[$personalityslot>>2]|0; //@line 964 "/checkout/src/liballoc/vec.rs"
  $16 = ((($personalityslot)) + 4|0); //@line 964 "/checkout/src/liballoc/vec.rs"
  $17 = HEAP32[$16>>2]|0; //@line 964 "/checkout/src/liballoc/vec.rs"
  ___resumeException($15|0);
  // unreachable;
 }
 $_20 = 0; //@line 975 "/checkout/src/liballoc/vec.rs"
 __ZN4core3ptr13drop_in_place17h1f12095180eca2a0E($value); //@line 975 "/checkout/src/liballoc/vec.rs"
 $15 = HEAP32[$personalityslot>>2]|0; //@line 964 "/checkout/src/liballoc/vec.rs"
 $16 = ((($personalityslot)) + 4|0); //@line 964 "/checkout/src/liballoc/vec.rs"
 $17 = HEAP32[$16>>2]|0; //@line 964 "/checkout/src/liballoc/vec.rs"
 ___resumeException($15|0);
 // unreachable;
}
function __ZN71__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__deref__DerefMut_GT_9deref_mut17hb8e8a39207833cebE($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $ptr = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $self = $0;
 $2 = $self; //@line 1699 "/checkout/src/liballoc/vec.rs"
 $3 = (__ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_3ptr17hea8a32bfd7e3d35eE($2)|0); //@line 1699 "/checkout/src/liballoc/vec.rs"
 $ptr = $3; //@line 1699 "/checkout/src/liballoc/vec.rs"
 $4 = $ptr; //@line 1700 "/checkout/src/liballoc/vec.rs"
 (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h5544ec692c7bf42eE($4)|0); //@line 1700 "/checkout/src/liballoc/vec.rs"
 $5 = $ptr; //@line 1701 "/checkout/src/liballoc/vec.rs"
 $6 = $self; //@line 1701 "/checkout/src/liballoc/vec.rs"
 $7 = ((($6)) + 8|0); //@line 1701 "/checkout/src/liballoc/vec.rs"
 $8 = HEAP32[$7>>2]|0; //@line 1701 "/checkout/src/liballoc/vec.rs"
 __ZN4core5slice18from_raw_parts_mut17hcb5f1a8c1e682d6cE($1,$5,$8); //@line 1701 "/checkout/src/liballoc/vec.rs"
 $$sreg$field = HEAP32[$1>>2]|0; //@line 1701 "/checkout/src/liballoc/vec.rs"
 $$sreg$index1 = ((($1)) + 4|0); //@line 1701 "/checkout/src/liballoc/vec.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 1701 "/checkout/src/liballoc/vec.rs"
 HEAP32[$retVal>>2] = $$sreg$field; //@line 1703 "/checkout/src/liballoc/vec.rs"
 $retVal$index4 = ((($retVal)) + 4|0); //@line 1703 "/checkout/src/liballoc/vec.rs"
 HEAP32[$retVal$index4>>2] = $$sreg$field2; //@line 1703 "/checkout/src/liballoc/vec.rs"
 STACKTOP = sp;return; //@line 1703 "/checkout/src/liballoc/vec.rs"
}
function __ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_4push17hf3ffddf41093fec7E($0,$value) {
 $0 = $0|0;
 $value = $value|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$i = 0, $_19 = 0, $_20 = 0, $end = 0, $personalityslot = 0, $self = 0, $self$i = 0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $1 = sp;
 $personalityslot = sp + 64|0;
 $_19 = sp + 16|0;
 $self = $0;
 $_20 = 0; //@line 967 "/checkout/src/liballoc/vec.rs"
 $_20 = 1; //@line 967 "/checkout/src/liballoc/vec.rs"
 $2 = $self; //@line 967 "/checkout/src/liballoc/vec.rs"
 $3 = ((($2)) + 8|0); //@line 967 "/checkout/src/liballoc/vec.rs"
 $4 = HEAP32[$3>>2]|0; //@line 967 "/checkout/src/liballoc/vec.rs"
 $5 = $self; //@line 967 "/checkout/src/liballoc/vec.rs"
 $self$i = $5;
 __THREW__ = 0;
 $6 = (invoke_i(189)|0); //@line 207 "/checkout/src/liballoc/raw_vec.rs"
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 do {
  if (!($8)) {
   $9 = ($6|0)==(0); //@line 207 "/checkout/src/liballoc/raw_vec.rs"
   if ($9) {
    $_0$i = -1; //@line 208 "/checkout/src/liballoc/raw_vec.rs"
   } else {
    $10 = $self$i; //@line 210 "/checkout/src/liballoc/raw_vec.rs"
    $11 = ((($10)) + 4|0); //@line 210 "/checkout/src/liballoc/raw_vec.rs"
    $12 = HEAP32[$11>>2]|0; //@line 210 "/checkout/src/liballoc/raw_vec.rs"
    $_0$i = $12; //@line 210 "/checkout/src/liballoc/raw_vec.rs"
   }
   $13 = $_0$i; //@line 212 "/checkout/src/liballoc/raw_vec.rs"
   $14 = ($4|0)==($13|0); //@line 967 "/checkout/src/liballoc/vec.rs"
   if ($14) {
    $18 = $self; //@line 968 "/checkout/src/liballoc/vec.rs"
    __THREW__ = 0;
    invoke_vi(381,($18|0)); //@line 968 "/checkout/src/liballoc/vec.rs"
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     break;
    }
   }
   $21 = $self; //@line 971 "/checkout/src/liballoc/vec.rs"
   __THREW__ = 0;
   invoke_vii(382,($1|0),($21|0)); //@line 971 "/checkout/src/liballoc/vec.rs"
   $$sreg$field = HEAP32[$1>>2]|0; //@line 971 "/checkout/src/liballoc/vec.rs"
   $$sreg$index1 = ((($1)) + 4|0); //@line 971 "/checkout/src/liballoc/vec.rs"
   $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 971 "/checkout/src/liballoc/vec.rs"
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if (!($23)) {
    __THREW__ = 0;
    $24 = (invoke_iii(383,($$sreg$field|0),($$sreg$field2|0))|0); //@line 971 "/checkout/src/liballoc/vec.rs"
    $25 = __THREW__; __THREW__ = 0;
    $26 = $25&1;
    if (!($26)) {
     $27 = $self; //@line 971 "/checkout/src/liballoc/vec.rs"
     $28 = ((($27)) + 8|0); //@line 971 "/checkout/src/liballoc/vec.rs"
     $29 = HEAP32[$28>>2]|0; //@line 971 "/checkout/src/liballoc/vec.rs"
     __THREW__ = 0;
     $30 = (invoke_iii(384,($24|0),($29|0))|0); //@line 971 "/checkout/src/liballoc/vec.rs"
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if (!($32)) {
      $end = $30; //@line 971 "/checkout/src/liballoc/vec.rs"
      $33 = $end; //@line 972 "/checkout/src/liballoc/vec.rs"
      $_20 = 0; //@line 972 "/checkout/src/liballoc/vec.rs"
      dest=$_19; src=$value; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0)); //@line 972 "/checkout/src/liballoc/vec.rs"
      __THREW__ = 0;
      invoke_vii(385,($33|0),($_19|0)); //@line 972 "/checkout/src/liballoc/vec.rs"
      $34 = __THREW__; __THREW__ = 0;
      $35 = $34&1;
      if (!($35)) {
       $36 = $self; //@line 973 "/checkout/src/liballoc/vec.rs"
       $37 = ((($36)) + 8|0); //@line 973 "/checkout/src/liballoc/vec.rs"
       $38 = $self; //@line 973 "/checkout/src/liballoc/vec.rs"
       $39 = ((($38)) + 8|0); //@line 973 "/checkout/src/liballoc/vec.rs"
       $40 = HEAP32[$39>>2]|0; //@line 973 "/checkout/src/liballoc/vec.rs"
       $41 = (($40) + 1)|0; //@line 973 "/checkout/src/liballoc/vec.rs"
       HEAP32[$37>>2] = $41; //@line 973 "/checkout/src/liballoc/vec.rs"
       STACKTOP = sp;return; //@line 975 "/checkout/src/liballoc/vec.rs"
      }
     }
    }
   }
  }
 } while(0);
 $42 = ___cxa_find_matching_catch_2()|0;
 $43 = tempRet0;
 HEAP32[$personalityslot>>2] = $42;
 $44 = ((($personalityslot)) + 4|0);
 HEAP32[$44>>2] = $43;
 $45 = $_20; //@line 975 "/checkout/src/liballoc/vec.rs"
 $46 = $45&1; //@line 975 "/checkout/src/liballoc/vec.rs"
 if (!($46)) {
  $15 = HEAP32[$personalityslot>>2]|0; //@line 964 "/checkout/src/liballoc/vec.rs"
  $16 = ((($personalityslot)) + 4|0); //@line 964 "/checkout/src/liballoc/vec.rs"
  $17 = HEAP32[$16>>2]|0; //@line 964 "/checkout/src/liballoc/vec.rs"
  ___resumeException($15|0);
  // unreachable;
 }
 $_20 = 0; //@line 975 "/checkout/src/liballoc/vec.rs"
 $15 = HEAP32[$personalityslot>>2]|0; //@line 964 "/checkout/src/liballoc/vec.rs"
 $16 = ((($personalityslot)) + 4|0); //@line 964 "/checkout/src/liballoc/vec.rs"
 $17 = HEAP32[$16>>2]|0; //@line 964 "/checkout/src/liballoc/vec.rs"
 ___resumeException($15|0);
 // unreachable;
}
function __ZN71__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__deref__DerefMut_GT_9deref_mut17h6a88986140ccca3fE($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $ptr = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $self = $0;
 $2 = $self; //@line 1699 "/checkout/src/liballoc/vec.rs"
 $3 = (__ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_3ptr17hc248a9eac2afce31E($2)|0); //@line 1699 "/checkout/src/liballoc/vec.rs"
 $ptr = $3; //@line 1699 "/checkout/src/liballoc/vec.rs"
 $4 = $ptr; //@line 1700 "/checkout/src/liballoc/vec.rs"
 (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h255a2e868f2a18ecE($4)|0); //@line 1700 "/checkout/src/liballoc/vec.rs"
 $5 = $ptr; //@line 1701 "/checkout/src/liballoc/vec.rs"
 $6 = $self; //@line 1701 "/checkout/src/liballoc/vec.rs"
 $7 = ((($6)) + 8|0); //@line 1701 "/checkout/src/liballoc/vec.rs"
 $8 = HEAP32[$7>>2]|0; //@line 1701 "/checkout/src/liballoc/vec.rs"
 __ZN4core5slice18from_raw_parts_mut17hbb21e3bc1f3b1e2aE($1,$5,$8); //@line 1701 "/checkout/src/liballoc/vec.rs"
 $$sreg$field = HEAP32[$1>>2]|0; //@line 1701 "/checkout/src/liballoc/vec.rs"
 $$sreg$index1 = ((($1)) + 4|0); //@line 1701 "/checkout/src/liballoc/vec.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 1701 "/checkout/src/liballoc/vec.rs"
 HEAP32[$retVal>>2] = $$sreg$field; //@line 1703 "/checkout/src/liballoc/vec.rs"
 $retVal$index4 = ((($retVal)) + 4|0); //@line 1703 "/checkout/src/liballoc/vec.rs"
 HEAP32[$retVal$index4>>2] = $$sreg$field2; //@line 1703 "/checkout/src/liballoc/vec.rs"
 STACKTOP = sp;return; //@line 1703 "/checkout/src/liballoc/vec.rs"
}
function __ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_7reserve17h19c990e43778820dE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $additional = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $additional = $1;
 $2 = $self; //@line 461 "/checkout/src/liballoc/vec.rs"
 $3 = $self; //@line 461 "/checkout/src/liballoc/vec.rs"
 $4 = ((($3)) + 8|0); //@line 461 "/checkout/src/liballoc/vec.rs"
 $5 = HEAP32[$4>>2]|0; //@line 461 "/checkout/src/liballoc/vec.rs"
 $6 = $additional; //@line 461 "/checkout/src/liballoc/vec.rs"
 __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_7reserve17h3fb2a297a9ecbf70E($2,$5,$6); //@line 461 "/checkout/src/liballoc/vec.rs"
 STACKTOP = sp;return; //@line 462 "/checkout/src/liballoc/vec.rs"
}
function __ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_7reserve17hd11e617522a2f310E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $additional = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $additional = $1;
 $2 = $self; //@line 461 "/checkout/src/liballoc/vec.rs"
 $3 = $self; //@line 461 "/checkout/src/liballoc/vec.rs"
 $4 = ((($3)) + 8|0); //@line 461 "/checkout/src/liballoc/vec.rs"
 $5 = HEAP32[$4>>2]|0; //@line 461 "/checkout/src/liballoc/vec.rs"
 $6 = $additional; //@line 461 "/checkout/src/liballoc/vec.rs"
 __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_7reserve17h370a85656f72c58dE($2,$5,$6); //@line 461 "/checkout/src/liballoc/vec.rs"
 STACKTOP = sp;return; //@line 462 "/checkout/src/liballoc/vec.rs"
}
function __ZN66__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__drop__Drop_GT_4drop17h5b300b958b3453dfE($0) {
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $self = $0;
 $2 = $self; //@line 2123 "/checkout/src/liballoc/vec.rs"
 __ZN106__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__index__IndexMut_LT_core__ops__range__RangeFull_GT__GT_9index_mut17h96041ace1c7f229cE($1,$2); //@line 2123 "/checkout/src/liballoc/vec.rs"
 $$sreg$field = HEAP32[$1>>2]|0; //@line 2123 "/checkout/src/liballoc/vec.rs"
 $$sreg$index1 = ((($1)) + 4|0); //@line 2123 "/checkout/src/liballoc/vec.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 2123 "/checkout/src/liballoc/vec.rs"
 __ZN4core3ptr13drop_in_place17hd55485ccc898009aE($$sreg$field,$$sreg$field2); //@line 2123 "/checkout/src/liballoc/vec.rs"
 STACKTOP = sp;return; //@line 2126 "/checkout/src/liballoc/vec.rs"
}
function __ZN106__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__index__IndexMut_LT_core__ops__range__RangeFull_GT__GT_9index_mut17h96041ace1c7f229cE($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $self = $0;
 $2 = $self; //@line 1660 "/checkout/src/liballoc/vec.rs"
 __ZN71__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__deref__DerefMut_GT_9deref_mut17h3f25f0ae33eaeb2eE($1,$2); //@line 1660 "/checkout/src/liballoc/vec.rs"
 $$sreg$field = HEAP32[$1>>2]|0; //@line 1660 "/checkout/src/liballoc/vec.rs"
 $$sreg$index1 = ((($1)) + 4|0); //@line 1660 "/checkout/src/liballoc/vec.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 1660 "/checkout/src/liballoc/vec.rs"
 HEAP32[$retVal>>2] = $$sreg$field; //@line 1661 "/checkout/src/liballoc/vec.rs"
 $retVal$index4 = ((($retVal)) + 4|0); //@line 1661 "/checkout/src/liballoc/vec.rs"
 HEAP32[$retVal$index4>>2] = $$sreg$field2; //@line 1661 "/checkout/src/liballoc/vec.rs"
 STACKTOP = sp;return; //@line 1661 "/checkout/src/liballoc/vec.rs"
}
function __ZN71__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__deref__DerefMut_GT_9deref_mut17h3f25f0ae33eaeb2eE($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $ptr = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $self = $0;
 $2 = $self; //@line 1699 "/checkout/src/liballoc/vec.rs"
 $3 = (__ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_3ptr17he70b59a544f416aaE($2)|0); //@line 1699 "/checkout/src/liballoc/vec.rs"
 $ptr = $3; //@line 1699 "/checkout/src/liballoc/vec.rs"
 $4 = $ptr; //@line 1700 "/checkout/src/liballoc/vec.rs"
 (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h7de432dec274b9e4E($4)|0); //@line 1700 "/checkout/src/liballoc/vec.rs"
 $5 = $ptr; //@line 1701 "/checkout/src/liballoc/vec.rs"
 $6 = $self; //@line 1701 "/checkout/src/liballoc/vec.rs"
 $7 = ((($6)) + 8|0); //@line 1701 "/checkout/src/liballoc/vec.rs"
 $8 = HEAP32[$7>>2]|0; //@line 1701 "/checkout/src/liballoc/vec.rs"
 __ZN4core5slice18from_raw_parts_mut17h3824d85fe3e081b3E($1,$5,$8); //@line 1701 "/checkout/src/liballoc/vec.rs"
 $$sreg$field = HEAP32[$1>>2]|0; //@line 1701 "/checkout/src/liballoc/vec.rs"
 $$sreg$index1 = ((($1)) + 4|0); //@line 1701 "/checkout/src/liballoc/vec.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 1701 "/checkout/src/liballoc/vec.rs"
 HEAP32[$retVal>>2] = $$sreg$field; //@line 1703 "/checkout/src/liballoc/vec.rs"
 $retVal$index4 = ((($retVal)) + 4|0); //@line 1703 "/checkout/src/liballoc/vec.rs"
 HEAP32[$retVal$index4>>2] = $$sreg$field2; //@line 1703 "/checkout/src/liballoc/vec.rs"
 STACKTOP = sp;return; //@line 1703 "/checkout/src/liballoc/vec.rs"
}
function __ZN66__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__drop__Drop_GT_4drop17h720ffcd52c9f8b9cE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $self = $0;
 $2 = $self; //@line 2123 "/checkout/src/liballoc/vec.rs"
 __ZN106__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__index__IndexMut_LT_core__ops__range__RangeFull_GT__GT_9index_mut17h5dd9b032bb94642aE($1,$2); //@line 2123 "/checkout/src/liballoc/vec.rs"
 STACKTOP = sp;return; //@line 2126 "/checkout/src/liballoc/vec.rs"
}
function __ZN106__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__index__IndexMut_LT_core__ops__range__RangeFull_GT__GT_9index_mut17h5dd9b032bb94642aE($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $self = $0;
 $2 = $self; //@line 1660 "/checkout/src/liballoc/vec.rs"
 __ZN71__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__deref__DerefMut_GT_9deref_mut17ha0673cffb5433d41E($1,$2); //@line 1660 "/checkout/src/liballoc/vec.rs"
 $$sreg$field = HEAP32[$1>>2]|0; //@line 1660 "/checkout/src/liballoc/vec.rs"
 $$sreg$index1 = ((($1)) + 4|0); //@line 1660 "/checkout/src/liballoc/vec.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 1660 "/checkout/src/liballoc/vec.rs"
 HEAP32[$retVal>>2] = $$sreg$field; //@line 1661 "/checkout/src/liballoc/vec.rs"
 $retVal$index4 = ((($retVal)) + 4|0); //@line 1661 "/checkout/src/liballoc/vec.rs"
 HEAP32[$retVal$index4>>2] = $$sreg$field2; //@line 1661 "/checkout/src/liballoc/vec.rs"
 STACKTOP = sp;return; //@line 1661 "/checkout/src/liballoc/vec.rs"
}
function __ZN71__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__deref__DerefMut_GT_9deref_mut17ha0673cffb5433d41E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $ptr = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $self = $0;
 $2 = $self; //@line 1699 "/checkout/src/liballoc/vec.rs"
 $3 = (__ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_3ptr17h55ebe3fe1903b12fE($2)|0); //@line 1699 "/checkout/src/liballoc/vec.rs"
 $ptr = $3; //@line 1699 "/checkout/src/liballoc/vec.rs"
 $4 = $ptr; //@line 1700 "/checkout/src/liballoc/vec.rs"
 (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h4a2648388ee43bb3E($4)|0); //@line 1700 "/checkout/src/liballoc/vec.rs"
 $5 = $ptr; //@line 1701 "/checkout/src/liballoc/vec.rs"
 $6 = $self; //@line 1701 "/checkout/src/liballoc/vec.rs"
 $7 = ((($6)) + 8|0); //@line 1701 "/checkout/src/liballoc/vec.rs"
 $8 = HEAP32[$7>>2]|0; //@line 1701 "/checkout/src/liballoc/vec.rs"
 __ZN4core5slice18from_raw_parts_mut17h34aa92df9f572221E($1,$5,$8); //@line 1701 "/checkout/src/liballoc/vec.rs"
 $$sreg$field = HEAP32[$1>>2]|0; //@line 1701 "/checkout/src/liballoc/vec.rs"
 $$sreg$index1 = ((($1)) + 4|0); //@line 1701 "/checkout/src/liballoc/vec.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 1701 "/checkout/src/liballoc/vec.rs"
 HEAP32[$retVal>>2] = $$sreg$field; //@line 1703 "/checkout/src/liballoc/vec.rs"
 $retVal$index4 = ((($retVal)) + 4|0); //@line 1703 "/checkout/src/liballoc/vec.rs"
 HEAP32[$retVal$index4>>2] = $$sreg$field2; //@line 1703 "/checkout/src/liballoc/vec.rs"
 STACKTOP = sp;return; //@line 1703 "/checkout/src/liballoc/vec.rs"
}
function __ZN66__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__drop__Drop_GT_4drop17h8aeb81cfdebb331bE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $self = $0;
 $2 = $self; //@line 2123 "/checkout/src/liballoc/vec.rs"
 __ZN106__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__index__IndexMut_LT_core__ops__range__RangeFull_GT__GT_9index_mut17hb680f59f20b432fcE($1,$2); //@line 2123 "/checkout/src/liballoc/vec.rs"
 STACKTOP = sp;return; //@line 2126 "/checkout/src/liballoc/vec.rs"
}
function __ZN106__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__index__IndexMut_LT_core__ops__range__RangeFull_GT__GT_9index_mut17hb680f59f20b432fcE($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $self = $0;
 $2 = $self; //@line 1660 "/checkout/src/liballoc/vec.rs"
 __ZN71__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__deref__DerefMut_GT_9deref_mut17hdffb71c0e952d8a7E($1,$2); //@line 1660 "/checkout/src/liballoc/vec.rs"
 $$sreg$field = HEAP32[$1>>2]|0; //@line 1660 "/checkout/src/liballoc/vec.rs"
 $$sreg$index1 = ((($1)) + 4|0); //@line 1660 "/checkout/src/liballoc/vec.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 1660 "/checkout/src/liballoc/vec.rs"
 HEAP32[$retVal>>2] = $$sreg$field; //@line 1661 "/checkout/src/liballoc/vec.rs"
 $retVal$index4 = ((($retVal)) + 4|0); //@line 1661 "/checkout/src/liballoc/vec.rs"
 HEAP32[$retVal$index4>>2] = $$sreg$field2; //@line 1661 "/checkout/src/liballoc/vec.rs"
 STACKTOP = sp;return; //@line 1661 "/checkout/src/liballoc/vec.rs"
}
function __ZN71__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__deref__DerefMut_GT_9deref_mut17hdffb71c0e952d8a7E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $ptr = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $self = $0;
 $2 = $self; //@line 1699 "/checkout/src/liballoc/vec.rs"
 $3 = (__ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_3ptr17h2f3ec64847fef552E($2)|0); //@line 1699 "/checkout/src/liballoc/vec.rs"
 $ptr = $3; //@line 1699 "/checkout/src/liballoc/vec.rs"
 $4 = $ptr; //@line 1700 "/checkout/src/liballoc/vec.rs"
 (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17hb720cbe35e48fa74E($4)|0); //@line 1700 "/checkout/src/liballoc/vec.rs"
 $5 = $ptr; //@line 1701 "/checkout/src/liballoc/vec.rs"
 $6 = $self; //@line 1701 "/checkout/src/liballoc/vec.rs"
 $7 = ((($6)) + 8|0); //@line 1701 "/checkout/src/liballoc/vec.rs"
 $8 = HEAP32[$7>>2]|0; //@line 1701 "/checkout/src/liballoc/vec.rs"
 __ZN4core5slice18from_raw_parts_mut17hfa6a70cc44e5c718E($1,$5,$8); //@line 1701 "/checkout/src/liballoc/vec.rs"
 $$sreg$field = HEAP32[$1>>2]|0; //@line 1701 "/checkout/src/liballoc/vec.rs"
 $$sreg$index1 = ((($1)) + 4|0); //@line 1701 "/checkout/src/liballoc/vec.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 1701 "/checkout/src/liballoc/vec.rs"
 HEAP32[$retVal>>2] = $$sreg$field; //@line 1703 "/checkout/src/liballoc/vec.rs"
 $retVal$index4 = ((($retVal)) + 4|0); //@line 1703 "/checkout/src/liballoc/vec.rs"
 HEAP32[$retVal$index4>>2] = $$sreg$field2; //@line 1703 "/checkout/src/liballoc/vec.rs"
 STACKTOP = sp;return; //@line 1703 "/checkout/src/liballoc/vec.rs"
}
function __ZN66__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__drop__Drop_GT_4drop17h997fefd5cfd33cbaE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $self = $0;
 $2 = $self; //@line 2123 "/checkout/src/liballoc/vec.rs"
 __ZN106__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__index__IndexMut_LT_core__ops__range__RangeFull_GT__GT_9index_mut17hb1b2570a24b2836bE($1,$2); //@line 2123 "/checkout/src/liballoc/vec.rs"
 STACKTOP = sp;return; //@line 2126 "/checkout/src/liballoc/vec.rs"
}
function __ZN106__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__index__IndexMut_LT_core__ops__range__RangeFull_GT__GT_9index_mut17hb1b2570a24b2836bE($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $self = $0;
 $2 = $self; //@line 1660 "/checkout/src/liballoc/vec.rs"
 __ZN71__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__deref__DerefMut_GT_9deref_mut17hfdaab856b5121256E($1,$2); //@line 1660 "/checkout/src/liballoc/vec.rs"
 $$sreg$field = HEAP32[$1>>2]|0; //@line 1660 "/checkout/src/liballoc/vec.rs"
 $$sreg$index1 = ((($1)) + 4|0); //@line 1660 "/checkout/src/liballoc/vec.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 1660 "/checkout/src/liballoc/vec.rs"
 HEAP32[$retVal>>2] = $$sreg$field; //@line 1661 "/checkout/src/liballoc/vec.rs"
 $retVal$index4 = ((($retVal)) + 4|0); //@line 1661 "/checkout/src/liballoc/vec.rs"
 HEAP32[$retVal$index4>>2] = $$sreg$field2; //@line 1661 "/checkout/src/liballoc/vec.rs"
 STACKTOP = sp;return; //@line 1661 "/checkout/src/liballoc/vec.rs"
}
function __ZN66__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__drop__Drop_GT_4drop17h9ae0c119032b715aE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $self = $0;
 $2 = $self; //@line 2123 "/checkout/src/liballoc/vec.rs"
 __ZN106__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__index__IndexMut_LT_core__ops__range__RangeFull_GT__GT_9index_mut17h4d4e6984348ca0abE($1,$2); //@line 2123 "/checkout/src/liballoc/vec.rs"
 STACKTOP = sp;return; //@line 2126 "/checkout/src/liballoc/vec.rs"
}
function __ZN106__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__index__IndexMut_LT_core__ops__range__RangeFull_GT__GT_9index_mut17h4d4e6984348ca0abE($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $self = $0;
 $2 = $self; //@line 1660 "/checkout/src/liballoc/vec.rs"
 __ZN71__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__deref__DerefMut_GT_9deref_mut17hf6d0d2603988ed4aE($1,$2); //@line 1660 "/checkout/src/liballoc/vec.rs"
 $$sreg$field = HEAP32[$1>>2]|0; //@line 1660 "/checkout/src/liballoc/vec.rs"
 $$sreg$index1 = ((($1)) + 4|0); //@line 1660 "/checkout/src/liballoc/vec.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 1660 "/checkout/src/liballoc/vec.rs"
 HEAP32[$retVal>>2] = $$sreg$field; //@line 1661 "/checkout/src/liballoc/vec.rs"
 $retVal$index4 = ((($retVal)) + 4|0); //@line 1661 "/checkout/src/liballoc/vec.rs"
 HEAP32[$retVal$index4>>2] = $$sreg$field2; //@line 1661 "/checkout/src/liballoc/vec.rs"
 STACKTOP = sp;return; //@line 1661 "/checkout/src/liballoc/vec.rs"
}
function __ZN66__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__drop__Drop_GT_4drop17h9cef0c2cc886955dE($0) {
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $self = $0;
 $2 = $self; //@line 2123 "/checkout/src/liballoc/vec.rs"
 __ZN106__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__index__IndexMut_LT_core__ops__range__RangeFull_GT__GT_9index_mut17h0653f54f252ab9a9E($1,$2); //@line 2123 "/checkout/src/liballoc/vec.rs"
 $$sreg$field = HEAP32[$1>>2]|0; //@line 2123 "/checkout/src/liballoc/vec.rs"
 $$sreg$index1 = ((($1)) + 4|0); //@line 2123 "/checkout/src/liballoc/vec.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 2123 "/checkout/src/liballoc/vec.rs"
 __ZN4core3ptr13drop_in_place17h633a458e8eb65ab0E($$sreg$field,$$sreg$field2); //@line 2123 "/checkout/src/liballoc/vec.rs"
 STACKTOP = sp;return; //@line 2126 "/checkout/src/liballoc/vec.rs"
}
function __ZN106__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__index__IndexMut_LT_core__ops__range__RangeFull_GT__GT_9index_mut17h0653f54f252ab9a9E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $self = $0;
 $2 = $self; //@line 1660 "/checkout/src/liballoc/vec.rs"
 __ZN71__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__deref__DerefMut_GT_9deref_mut17hb8e8a39207833cebE($1,$2); //@line 1660 "/checkout/src/liballoc/vec.rs"
 $$sreg$field = HEAP32[$1>>2]|0; //@line 1660 "/checkout/src/liballoc/vec.rs"
 $$sreg$index1 = ((($1)) + 4|0); //@line 1660 "/checkout/src/liballoc/vec.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 1660 "/checkout/src/liballoc/vec.rs"
 HEAP32[$retVal>>2] = $$sreg$field; //@line 1661 "/checkout/src/liballoc/vec.rs"
 $retVal$index4 = ((($retVal)) + 4|0); //@line 1661 "/checkout/src/liballoc/vec.rs"
 HEAP32[$retVal$index4>>2] = $$sreg$field2; //@line 1661 "/checkout/src/liballoc/vec.rs"
 STACKTOP = sp;return; //@line 1661 "/checkout/src/liballoc/vec.rs"
}
function __ZN66__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__drop__Drop_GT_4drop17hbbb6c189dd8764efE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $self = $0;
 $2 = $self; //@line 2123 "/checkout/src/liballoc/vec.rs"
 __ZN106__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__index__IndexMut_LT_core__ops__range__RangeFull_GT__GT_9index_mut17hf478a0a313dc402cE($1,$2); //@line 2123 "/checkout/src/liballoc/vec.rs"
 STACKTOP = sp;return; //@line 2126 "/checkout/src/liballoc/vec.rs"
}
function __ZN106__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__index__IndexMut_LT_core__ops__range__RangeFull_GT__GT_9index_mut17hf478a0a313dc402cE($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $self = $0;
 $2 = $self; //@line 1660 "/checkout/src/liballoc/vec.rs"
 __ZN71__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__deref__DerefMut_GT_9deref_mut17h6a88986140ccca3fE($1,$2); //@line 1660 "/checkout/src/liballoc/vec.rs"
 $$sreg$field = HEAP32[$1>>2]|0; //@line 1660 "/checkout/src/liballoc/vec.rs"
 $$sreg$index1 = ((($1)) + 4|0); //@line 1660 "/checkout/src/liballoc/vec.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 1660 "/checkout/src/liballoc/vec.rs"
 HEAP32[$retVal>>2] = $$sreg$field; //@line 1661 "/checkout/src/liballoc/vec.rs"
 $retVal$index4 = ((($retVal)) + 4|0); //@line 1661 "/checkout/src/liballoc/vec.rs"
 HEAP32[$retVal$index4>>2] = $$sreg$field2; //@line 1661 "/checkout/src/liballoc/vec.rs"
 STACKTOP = sp;return; //@line 1661 "/checkout/src/liballoc/vec.rs"
}
function __ZN68__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__deref__Deref_GT_5deref17h25a904560602b6e3E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $p = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $self = $0;
 $2 = $self; //@line 1688 "/checkout/src/liballoc/vec.rs"
 $3 = (__ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_3ptr17hb27cde95f398fcc7E($2)|0); //@line 1688 "/checkout/src/liballoc/vec.rs"
 $p = $3; //@line 1688 "/checkout/src/liballoc/vec.rs"
 $4 = $p; //@line 1689 "/checkout/src/liballoc/vec.rs"
 (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h29fb7da4258afde7E($4)|0); //@line 1689 "/checkout/src/liballoc/vec.rs"
 $5 = $p; //@line 1690 "/checkout/src/liballoc/vec.rs"
 $6 = $self; //@line 1690 "/checkout/src/liballoc/vec.rs"
 $7 = ((($6)) + 8|0); //@line 1690 "/checkout/src/liballoc/vec.rs"
 $8 = HEAP32[$7>>2]|0; //@line 1690 "/checkout/src/liballoc/vec.rs"
 __ZN4core5slice14from_raw_parts17hdc8144621bac6d1eE($1,$5,$8); //@line 1690 "/checkout/src/liballoc/vec.rs"
 $$sreg$field = HEAP32[$1>>2]|0; //@line 1690 "/checkout/src/liballoc/vec.rs"
 $$sreg$index1 = ((($1)) + 4|0); //@line 1690 "/checkout/src/liballoc/vec.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 1690 "/checkout/src/liballoc/vec.rs"
 HEAP32[$retVal>>2] = $$sreg$field; //@line 1692 "/checkout/src/liballoc/vec.rs"
 $retVal$index4 = ((($retVal)) + 4|0); //@line 1692 "/checkout/src/liballoc/vec.rs"
 HEAP32[$retVal$index4>>2] = $$sreg$field2; //@line 1692 "/checkout/src/liballoc/vec.rs"
 STACKTOP = sp;return; //@line 1692 "/checkout/src/liballoc/vec.rs"
}
function __ZN71__LT_alloc__vec__IntoIter_LT_T_GT__u20_as_u20_core__ops__drop__Drop_GT_4drop17h642ec26ba88f22feE($0) {
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_11 = 0, $_21 = 0, $_21$index4 = 0, $_25 = 0, $__next = 0, $_x = 0, $cond = 0, $iter = 0, $personalityslot = 0, $self = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $1 = sp;
 $personalityslot = sp + 56|0;
 $_21 = sp + 48|0;
 $_x = sp + 40|0;
 $val = sp + 32|0;
 $_11 = sp + 24|0;
 $__next = sp + 16|0;
 $iter = sp + 12|0;
 $self = $0;
 $_25 = 0; //@line 2419 "/checkout/src/liballoc/vec.rs"
 $2 = $self; //@line 2419 "/checkout/src/liballoc/vec.rs"
 $3 = (__ZN4core4iter8iterator8Iterator6by_ref17h6c230dc467a6a0f1E($2)|0); //@line 2419 "/checkout/src/liballoc/vec.rs"
 $4 = (__ZN54__LT_I_u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17hff9a37f56415e5ddE($3)|0); //@line 2419 "/checkout/src/liballoc/vec.rs"
 HEAP32[$iter>>2] = $4; //@line 2419 "/checkout/src/liballoc/vec.rs"
 while(1) {
  __THREW__ = 0;
  invoke_vii(386,($_11|0),($iter|0)); //@line 2419 "/checkout/src/liballoc/vec.rs"
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if ($9) {
   break;
  }
  $10 = HEAP32[$_11>>2]|0; //@line 2419 "/checkout/src/liballoc/vec.rs"
  $11 = ($10|0)==(0|0); //@line 2419 "/checkout/src/liballoc/vec.rs"
  if ($11) {
   label = 5;
   break;
  }
  $14 = HEAP32[$_11>>2]|0; //@line 2419 "/checkout/src/liballoc/vec.rs"
  $15 = ((($_11)) + 4|0); //@line 2419 "/checkout/src/liballoc/vec.rs"
  $16 = HEAP32[$15>>2]|0; //@line 2419 "/checkout/src/liballoc/vec.rs"
  HEAP32[$val>>2] = $14; //@line 2419 "/checkout/src/liballoc/vec.rs"
  $17 = ((($val)) + 4|0); //@line 2419 "/checkout/src/liballoc/vec.rs"
  HEAP32[$17>>2] = $16; //@line 2419 "/checkout/src/liballoc/vec.rs"
  $18 = HEAP32[$val>>2]|0; //@line 2419 "/checkout/src/liballoc/vec.rs"
  $19 = ((($val)) + 4|0); //@line 2419 "/checkout/src/liballoc/vec.rs"
  $20 = HEAP32[$19>>2]|0; //@line 2419 "/checkout/src/liballoc/vec.rs"
  $_25 = 1; //@line 2419 "/checkout/src/liballoc/vec.rs"
  HEAP32[$__next>>2] = $18; //@line 2419 "/checkout/src/liballoc/vec.rs"
  $21 = ((($__next)) + 4|0); //@line 2419 "/checkout/src/liballoc/vec.rs"
  HEAP32[$21>>2] = $20; //@line 2419 "/checkout/src/liballoc/vec.rs"
  $22 = HEAP32[$_11>>2]|0; //@line 2419 "/checkout/src/liballoc/vec.rs"
  $23 = ($22|0)==(0|0); //@line 2419 "/checkout/src/liballoc/vec.rs"
  $24 = $23 ? 0 : 1; //@line 2419 "/checkout/src/liballoc/vec.rs"
  $cond = ($24|0)==(1); //@line 2419 "/checkout/src/liballoc/vec.rs"
  if (!($cond)) {
   __THREW__ = 0;
   invoke_vi(198,($_11|0)); //@line 2419 "/checkout/src/liballoc/vec.rs"
   $37 = __THREW__; __THREW__ = 0;
   $38 = $37&1;
   if ($38) {
    break;
   }
  }
  $_25 = 0; //@line 2419 "/checkout/src/liballoc/vec.rs"
  $31 = HEAP32[$__next>>2]|0; //@line 2419 "/checkout/src/liballoc/vec.rs"
  $32 = ((($__next)) + 4|0); //@line 2419 "/checkout/src/liballoc/vec.rs"
  $33 = HEAP32[$32>>2]|0; //@line 2419 "/checkout/src/liballoc/vec.rs"
  HEAP32[$_x>>2] = $31; //@line 2419 "/checkout/src/liballoc/vec.rs"
  $34 = ((($_x)) + 4|0); //@line 2419 "/checkout/src/liballoc/vec.rs"
  HEAP32[$34>>2] = $33; //@line 2419 "/checkout/src/liballoc/vec.rs"
  __THREW__ = 0;
  invoke_vi(246,($_x|0)); //@line 2419 "/checkout/src/liballoc/vec.rs"
  $35 = __THREW__; __THREW__ = 0;
  $36 = $35&1;
  if ($36) {
   break;
  }
  $_25 = 0; //@line 2419 "/checkout/src/liballoc/vec.rs"
 }
 if ((label|0) == 5) {
  __THREW__ = 0;
  invoke_vi(198,($_11|0)); //@line 2419 "/checkout/src/liballoc/vec.rs"
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if (!($13)) {
   $_25 = 0; //@line 2419 "/checkout/src/liballoc/vec.rs"
   $25 = $self; //@line 2422 "/checkout/src/liballoc/vec.rs"
   $26 = HEAP32[$25>>2]|0; //@line 2422 "/checkout/src/liballoc/vec.rs"
   $27 = (__ZN35__LT_core__ptr__Shared_LT_T_GT__GT_6as_ptr17hcbaa53a063b660cdE($26)|0); //@line 2422 "/checkout/src/liballoc/vec.rs"
   $28 = $self; //@line 2422 "/checkout/src/liballoc/vec.rs"
   $29 = ((($28)) + 4|0); //@line 2422 "/checkout/src/liballoc/vec.rs"
   $30 = HEAP32[$29>>2]|0; //@line 2422 "/checkout/src/liballoc/vec.rs"
   __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_14from_raw_parts17h6425fbe5971072edE($1,$27,$30); //@line 2422 "/checkout/src/liballoc/vec.rs"
   $$sreg$field = HEAP32[$1>>2]|0; //@line 2422 "/checkout/src/liballoc/vec.rs"
   $$sreg$index1 = ((($1)) + 4|0); //@line 2422 "/checkout/src/liballoc/vec.rs"
   $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 2422 "/checkout/src/liballoc/vec.rs"
   HEAP32[$_21>>2] = $$sreg$field; //@line 2422 "/checkout/src/liballoc/vec.rs"
   $_21$index4 = ((($_21)) + 4|0); //@line 2422 "/checkout/src/liballoc/vec.rs"
   HEAP32[$_21$index4>>2] = $$sreg$field2; //@line 2422 "/checkout/src/liballoc/vec.rs"
   __ZN4core3ptr13drop_in_place17he3c15c5a2bddefe7E($_21); //@line 2422 "/checkout/src/liballoc/vec.rs"
   STACKTOP = sp;return; //@line 2423 "/checkout/src/liballoc/vec.rs"
  }
 }
 $39 = ___cxa_find_matching_catch_2()|0;
 $40 = tempRet0;
 HEAP32[$personalityslot>>2] = $39;
 $41 = ((($personalityslot)) + 4|0);
 HEAP32[$41>>2] = $40;
 $42 = $_25; //@line 2419 "/checkout/src/liballoc/vec.rs"
 $43 = $42&1; //@line 2419 "/checkout/src/liballoc/vec.rs"
 if (!($43)) {
  $5 = HEAP32[$personalityslot>>2]|0; //@line 2417 "/checkout/src/liballoc/vec.rs"
  $6 = ((($personalityslot)) + 4|0); //@line 2417 "/checkout/src/liballoc/vec.rs"
  $7 = HEAP32[$6>>2]|0; //@line 2417 "/checkout/src/liballoc/vec.rs"
  ___resumeException($5|0);
  // unreachable;
 }
 $_25 = 0; //@line 2419 "/checkout/src/liballoc/vec.rs"
 __ZN4core3ptr13drop_in_place17h4ca7e74bbb163d7dE($__next); //@line 2419 "/checkout/src/liballoc/vec.rs"
 $5 = HEAP32[$personalityslot>>2]|0; //@line 2417 "/checkout/src/liballoc/vec.rs"
 $6 = ((($personalityslot)) + 4|0); //@line 2417 "/checkout/src/liballoc/vec.rs"
 $7 = HEAP32[$6>>2]|0; //@line 2417 "/checkout/src/liballoc/vec.rs"
 ___resumeException($5|0);
 // unreachable;
}
function __ZN4core4iter8iterator8Iterator6by_ref17h6c230dc467a6a0f1E($0) {
 $0 = $0|0;
 var $1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 1180 "/checkout/src/libcore/iter/iterator.rs"
 STACKTOP = sp;return ($1|0); //@line 1180 "/checkout/src/libcore/iter/iterator.rs"
}
function __ZN54__LT_I_u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17hff9a37f56415e5ddE($0) {
 $0 = $0|0;
 var $1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 257 "/checkout/src/libcore/iter/traits.rs"
 STACKTOP = sp;return ($1|0); //@line 258 "/checkout/src/libcore/iter/traits.rs"
}
function __ZN75__LT__RF__u27_a_u20_mut_u20_I_u20_as_u20_core__iter__iterator__Iterator_GT_4next17h4d84f7bb83caa7b1E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $1;
 $2 = $self; //@line 2383 "/checkout/src/libcore/iter/iterator.rs"
 $3 = HEAP32[$2>>2]|0; //@line 2383 "/checkout/src/libcore/iter/iterator.rs"
 __ZN80__LT_alloc__vec__IntoIter_LT_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17hce44e2318ace2591E($0,$3); //@line 2383 "/checkout/src/libcore/iter/iterator.rs"
 STACKTOP = sp;return; //@line 2383 "/checkout/src/libcore/iter/iterator.rs"
}
function __ZN80__LT_alloc__vec__IntoIter_LT_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17hce44e2318ace2591E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field3 = 0, $$sreg$index2 = 0, $$sreg1$field = 0, $$sreg1$field6 = 0, $$sreg1$index5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $old = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = sp + 16|0;
 $3 = sp;
 $self = $1;
 $4 = $self; //@line 2333 "/checkout/src/liballoc/vec.rs"
 $5 = ((($4)) + 8|0); //@line 2333 "/checkout/src/liballoc/vec.rs"
 $6 = HEAP32[$5>>2]|0; //@line 2333 "/checkout/src/liballoc/vec.rs"
 $7 = $self; //@line 2333 "/checkout/src/liballoc/vec.rs"
 $8 = ((($7)) + 12|0); //@line 2333 "/checkout/src/liballoc/vec.rs"
 $9 = HEAP32[$8>>2]|0; //@line 2333 "/checkout/src/liballoc/vec.rs"
 $10 = ($6|0)==($9|0); //@line 2333 "/checkout/src/liballoc/vec.rs"
 if ($10) {
  HEAP32[$0>>2] = 0; //@line 2334 "/checkout/src/liballoc/vec.rs"
  STACKTOP = sp;return; //@line 2353 "/checkout/src/liballoc/vec.rs"
 }
 $11 = (__ZN4core3mem7size_of17h066421ba255ff1ccE()|0); //@line 2336 "/checkout/src/liballoc/vec.rs"
 $12 = ($11|0)==(0); //@line 2336 "/checkout/src/liballoc/vec.rs"
 $13 = $self;
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 if ($12) {
  $16 = ((($15)) + 1|0); //@line 2340 "/checkout/src/liballoc/vec.rs"
  $tmp_ret = $16; //@line 2340 "/checkout/src/liballoc/vec.rs"
  $17 = $tmp_ret; //@line 2340 "/checkout/src/liballoc/vec.rs"
  $18 = $self; //@line 2340 "/checkout/src/liballoc/vec.rs"
  $19 = ((($18)) + 8|0); //@line 2340 "/checkout/src/liballoc/vec.rs"
  HEAP32[$19>>2] = $17; //@line 2340 "/checkout/src/liballoc/vec.rs"
  __ZN4core3ptr4read17had018deaa5dd648aE($3,(1)); //@line 2344 "/checkout/src/liballoc/vec.rs"
  $$sreg$field = HEAP32[$3>>2]|0; //@line 2344 "/checkout/src/liballoc/vec.rs"
  $$sreg$index2 = ((($3)) + 4|0); //@line 2344 "/checkout/src/liballoc/vec.rs"
  $$sreg$field3 = HEAP32[$$sreg$index2>>2]|0; //@line 2344 "/checkout/src/liballoc/vec.rs"
  HEAP32[$0>>2] = $$sreg$field; //@line 2344 "/checkout/src/liballoc/vec.rs"
  $20 = ((($0)) + 4|0); //@line 2344 "/checkout/src/liballoc/vec.rs"
  HEAP32[$20>>2] = $$sreg$field3; //@line 2344 "/checkout/src/liballoc/vec.rs"
  STACKTOP = sp;return; //@line 2353 "/checkout/src/liballoc/vec.rs"
 } else {
  $old = $15; //@line 2346 "/checkout/src/liballoc/vec.rs"
  $21 = $self; //@line 2347 "/checkout/src/liballoc/vec.rs"
  $22 = ((($21)) + 8|0); //@line 2347 "/checkout/src/liballoc/vec.rs"
  $23 = HEAP32[$22>>2]|0; //@line 2347 "/checkout/src/liballoc/vec.rs"
  $24 = (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_6offset17h87d1b956fc5e48faE($23,1)|0); //@line 2347 "/checkout/src/liballoc/vec.rs"
  $25 = $self; //@line 2347 "/checkout/src/liballoc/vec.rs"
  $26 = ((($25)) + 8|0); //@line 2347 "/checkout/src/liballoc/vec.rs"
  HEAP32[$26>>2] = $24; //@line 2347 "/checkout/src/liballoc/vec.rs"
  $27 = $old; //@line 2349 "/checkout/src/liballoc/vec.rs"
  __ZN4core3ptr4read17had018deaa5dd648aE($2,$27); //@line 2349 "/checkout/src/liballoc/vec.rs"
  $$sreg1$field = HEAP32[$2>>2]|0; //@line 2349 "/checkout/src/liballoc/vec.rs"
  $$sreg1$index5 = ((($2)) + 4|0); //@line 2349 "/checkout/src/liballoc/vec.rs"
  $$sreg1$field6 = HEAP32[$$sreg1$index5>>2]|0; //@line 2349 "/checkout/src/liballoc/vec.rs"
  HEAP32[$0>>2] = $$sreg1$field; //@line 2349 "/checkout/src/liballoc/vec.rs"
  $28 = ((($0)) + 4|0); //@line 2349 "/checkout/src/liballoc/vec.rs"
  HEAP32[$28>>2] = $$sreg1$field6; //@line 2349 "/checkout/src/liballoc/vec.rs"
  STACKTOP = sp;return; //@line 2353 "/checkout/src/liballoc/vec.rs"
 }
}
function __ZN77__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17hcb609d28a80eb458E($0,$self) {
 $0 = $0|0;
 $self = $self|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$i = 0, $_28 = 0, $_35 = 0, $begin = 0;
 var $cap = 0, $end = 0, $personalityslot = 0, $self$i = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $1 = sp;
 $personalityslot = sp + 32|0; //@line 1 "/checkout/src/liballoc/vec.rs"
 $_28 = sp + 20|0; //@line 1 "/checkout/src/liballoc/vec.rs"
 $_35 = 0; //@line 1735 "/checkout/src/liballoc/vec.rs"
 $_35 = 1; //@line 1735 "/checkout/src/liballoc/vec.rs"
 __THREW__ = 0;
 invoke_vii(387,($1|0),($self|0)); //@line 1735 "/checkout/src/liballoc/vec.rs"
 $$sreg$field = HEAP32[$1>>2]|0; //@line 1735 "/checkout/src/liballoc/vec.rs"
 $$sreg$index1 = ((($1)) + 4|0); //@line 1735 "/checkout/src/liballoc/vec.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 1735 "/checkout/src/liballoc/vec.rs"
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 do {
  if (!($3)) {
   __THREW__ = 0;
   $4 = (invoke_iii(276,($$sreg$field|0),($$sreg$field2|0))|0); //@line 1735 "/checkout/src/liballoc/vec.rs"
   $5 = __THREW__; __THREW__ = 0;
   $6 = $5&1;
   if (!($6)) {
    $begin = $4; //@line 1735 "/checkout/src/liballoc/vec.rs"
    $10 = $begin; //@line 1736 "/checkout/src/liballoc/vec.rs"
    __THREW__ = 0;
    (invoke_ii(388,($10|0))|0); //@line 1736 "/checkout/src/liballoc/vec.rs"
    $11 = __THREW__; __THREW__ = 0;
    $12 = $11&1;
    if (!($12)) {
     __THREW__ = 0;
     $13 = (invoke_i(389)|0); //@line 1737 "/checkout/src/liballoc/vec.rs"
     $14 = __THREW__; __THREW__ = 0;
     $15 = $14&1;
     if (!($15)) {
      $16 = ($13|0)==(0); //@line 1737 "/checkout/src/liballoc/vec.rs"
      $17 = $begin;
      if ($16) {
       __THREW__ = 0;
       $18 = (invoke_ii(390,($self|0))|0); //@line 1738 "/checkout/src/liballoc/vec.rs"
       $19 = __THREW__; __THREW__ = 0;
       $20 = $19&1;
       if ($20) {
        break;
       }
       $24 = (($17) + ($18)|0); //@line 1738 "/checkout/src/liballoc/vec.rs"
       $tmp_ret = $24; //@line 1738 "/checkout/src/liballoc/vec.rs"
       $25 = $tmp_ret; //@line 1738 "/checkout/src/liballoc/vec.rs"
       $end = $25; //@line 1738 "/checkout/src/liballoc/vec.rs"
      } else {
       __THREW__ = 0;
       $21 = (invoke_ii(390,($self|0))|0); //@line 1740 "/checkout/src/liballoc/vec.rs"
       $22 = __THREW__; __THREW__ = 0;
       $23 = $22&1;
       if ($23) {
        break;
       }
       __THREW__ = 0;
       $26 = (invoke_iii(391,($17|0),($21|0))|0); //@line 1740 "/checkout/src/liballoc/vec.rs"
       $27 = __THREW__; __THREW__ = 0;
       $28 = $27&1;
       if ($28) {
        break;
       }
       $end = $26; //@line 1740 "/checkout/src/liballoc/vec.rs"
      }
      $self$i = $self;
      __THREW__ = 0;
      $29 = (invoke_i(389)|0); //@line 207 "/checkout/src/liballoc/raw_vec.rs"
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if (!($31)) {
       $32 = ($29|0)==(0); //@line 207 "/checkout/src/liballoc/raw_vec.rs"
       if ($32) {
        $_0$i = -1; //@line 208 "/checkout/src/liballoc/raw_vec.rs"
       } else {
        $33 = $self$i; //@line 210 "/checkout/src/liballoc/raw_vec.rs"
        $34 = ((($33)) + 4|0); //@line 210 "/checkout/src/liballoc/raw_vec.rs"
        $35 = HEAP32[$34>>2]|0; //@line 210 "/checkout/src/liballoc/raw_vec.rs"
        $_0$i = $35; //@line 210 "/checkout/src/liballoc/raw_vec.rs"
       }
       $36 = $_0$i; //@line 212 "/checkout/src/liballoc/raw_vec.rs"
       $cap = $36; //@line 1742 "/checkout/src/liballoc/vec.rs"
       $_35 = 0; //@line 1743 "/checkout/src/liballoc/vec.rs"
       ;HEAP32[$_28>>2]=HEAP32[$self>>2]|0;HEAP32[$_28+4>>2]=HEAP32[$self+4>>2]|0;HEAP32[$_28+8>>2]=HEAP32[$self+8>>2]|0; //@line 1743 "/checkout/src/liballoc/vec.rs"
       __THREW__ = 0;
       invoke_vi(392,($_28|0)); //@line 1743 "/checkout/src/liballoc/vec.rs"
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if (!($38)) {
        $39 = $begin; //@line 1745 "/checkout/src/liballoc/vec.rs"
        __THREW__ = 0;
        $40 = (invoke_ii(393,($39|0))|0); //@line 1745 "/checkout/src/liballoc/vec.rs"
        $41 = __THREW__; __THREW__ = 0;
        $42 = $41&1;
        if (!($42)) {
         $43 = $cap; //@line 1746 "/checkout/src/liballoc/vec.rs"
         $44 = $begin; //@line 1747 "/checkout/src/liballoc/vec.rs"
         $45 = $end; //@line 1748 "/checkout/src/liballoc/vec.rs"
         HEAP32[$0>>2] = $40; //@line 1744 "/checkout/src/liballoc/vec.rs"
         $46 = ((($0)) + 4|0); //@line 1744 "/checkout/src/liballoc/vec.rs"
         HEAP32[$46>>2] = $43; //@line 1744 "/checkout/src/liballoc/vec.rs"
         $47 = ((($0)) + 8|0); //@line 1744 "/checkout/src/liballoc/vec.rs"
         HEAP32[$47>>2] = $44; //@line 1744 "/checkout/src/liballoc/vec.rs"
         $48 = ((($0)) + 12|0); //@line 1744 "/checkout/src/liballoc/vec.rs"
         HEAP32[$48>>2] = $45; //@line 1744 "/checkout/src/liballoc/vec.rs"
         STACKTOP = sp;return; //@line 1751 "/checkout/src/liballoc/vec.rs"
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $49 = ___cxa_find_matching_catch_2()|0;
 $50 = tempRet0;
 HEAP32[$personalityslot>>2] = $49;
 $51 = ((($personalityslot)) + 4|0);
 HEAP32[$51>>2] = $50;
 $52 = $_35; //@line 1751 "/checkout/src/liballoc/vec.rs"
 $53 = $52&1; //@line 1751 "/checkout/src/liballoc/vec.rs"
 if (!($53)) {
  $7 = HEAP32[$personalityslot>>2]|0; //@line 1733 "/checkout/src/liballoc/vec.rs"
  $8 = ((($personalityslot)) + 4|0); //@line 1733 "/checkout/src/liballoc/vec.rs"
  $9 = HEAP32[$8>>2]|0; //@line 1733 "/checkout/src/liballoc/vec.rs"
  ___resumeException($7|0);
  // unreachable;
 }
 $_35 = 0; //@line 1751 "/checkout/src/liballoc/vec.rs"
 __ZN4core3ptr13drop_in_place17hdf63de801541aaabE($self); //@line 1751 "/checkout/src/liballoc/vec.rs"
 $7 = HEAP32[$personalityslot>>2]|0; //@line 1733 "/checkout/src/liballoc/vec.rs"
 $8 = ((($personalityslot)) + 4|0); //@line 1733 "/checkout/src/liballoc/vec.rs"
 $9 = HEAP32[$8>>2]|0; //@line 1733 "/checkout/src/liballoc/vec.rs"
 ___resumeException($7|0);
 // unreachable;
}
function __ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_3len17he9c0dae95c016fb0E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = $0;
 $1 = $self; //@line 1161 "/checkout/src/liballoc/vec.rs"
 $2 = ((($1)) + 8|0); //@line 1161 "/checkout/src/liballoc/vec.rs"
 $3 = HEAP32[$2>>2]|0; //@line 1161 "/checkout/src/liballoc/vec.rs"
 STACKTOP = sp;return ($3|0); //@line 1162 "/checkout/src/liballoc/vec.rs"
}
function __ZN81__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__index__Index_LT_usize_GT__GT_5index17h51b30c46da0176a3E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $index = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $self = $0;
 $index = $1;
 $3 = $self; //@line 1548 "/checkout/src/liballoc/vec.rs"
 __ZN68__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__deref__Deref_GT_5deref17haea2d074e24f2851E($2,$3); //@line 1548 "/checkout/src/liballoc/vec.rs"
 $$sreg$field = HEAP32[$2>>2]|0; //@line 1548 "/checkout/src/liballoc/vec.rs"
 $$sreg$index1 = ((($2)) + 4|0); //@line 1548 "/checkout/src/liballoc/vec.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 1548 "/checkout/src/liballoc/vec.rs"
 $4 = $index; //@line 1548 "/checkout/src/liballoc/vec.rs"
 $5 = ($4>>>0)<($$sreg$field2>>>0); //@line 1548 "/checkout/src/liballoc/vec.rs"
 $6 = $5; //@line 1548 "/checkout/src/liballoc/vec.rs"
 if ($6) {
  $7 = (($$sreg$field) + (($4*48)|0)|0); //@line 1548 "/checkout/src/liballoc/vec.rs"
  STACKTOP = sp;return ($7|0); //@line 1549 "/checkout/src/liballoc/vec.rs"
 } else {
  __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(7936,$4,$$sreg$field2); //@line 1548 "/checkout/src/liballoc/vec.rs"
  // unreachable; //@line 1548 "/checkout/src/liballoc/vec.rs"
 }
 return (0)|0;
}
function __ZN68__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__deref__Deref_GT_5deref17haea2d074e24f2851E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $p = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $self = $0;
 $2 = $self; //@line 1688 "/checkout/src/liballoc/vec.rs"
 $3 = (__ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_3ptr17hc248a9eac2afce31E($2)|0); //@line 1688 "/checkout/src/liballoc/vec.rs"
 $p = $3; //@line 1688 "/checkout/src/liballoc/vec.rs"
 $4 = $p; //@line 1689 "/checkout/src/liballoc/vec.rs"
 (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h255a2e868f2a18ecE($4)|0); //@line 1689 "/checkout/src/liballoc/vec.rs"
 $5 = $p; //@line 1690 "/checkout/src/liballoc/vec.rs"
 $6 = $self; //@line 1690 "/checkout/src/liballoc/vec.rs"
 $7 = ((($6)) + 8|0); //@line 1690 "/checkout/src/liballoc/vec.rs"
 $8 = HEAP32[$7>>2]|0; //@line 1690 "/checkout/src/liballoc/vec.rs"
 __ZN4core5slice14from_raw_parts17h6aaa9646598cdd97E($1,$5,$8); //@line 1690 "/checkout/src/liballoc/vec.rs"
 $$sreg$field = HEAP32[$1>>2]|0; //@line 1690 "/checkout/src/liballoc/vec.rs"
 $$sreg$index1 = ((($1)) + 4|0); //@line 1690 "/checkout/src/liballoc/vec.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 1690 "/checkout/src/liballoc/vec.rs"
 HEAP32[$retVal>>2] = $$sreg$field; //@line 1692 "/checkout/src/liballoc/vec.rs"
 $retVal$index4 = ((($retVal)) + 4|0); //@line 1692 "/checkout/src/liballoc/vec.rs"
 HEAP32[$retVal$index4>>2] = $$sreg$field2; //@line 1692 "/checkout/src/liballoc/vec.rs"
 STACKTOP = sp;return; //@line 1692 "/checkout/src/liballoc/vec.rs"
}
function __ZN81__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__index__Index_LT_usize_GT__GT_5index17h7878de3758456ce9E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $index = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $self = $0;
 $index = $1;
 $3 = $self; //@line 1548 "/checkout/src/liballoc/vec.rs"
 __ZN68__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__deref__Deref_GT_5deref17h6e5c34a3e473d651E($2,$3); //@line 1548 "/checkout/src/liballoc/vec.rs"
 $$sreg$field = HEAP32[$2>>2]|0; //@line 1548 "/checkout/src/liballoc/vec.rs"
 $$sreg$index1 = ((($2)) + 4|0); //@line 1548 "/checkout/src/liballoc/vec.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 1548 "/checkout/src/liballoc/vec.rs"
 $4 = $index; //@line 1548 "/checkout/src/liballoc/vec.rs"
 $5 = ($4>>>0)<($$sreg$field2>>>0); //@line 1548 "/checkout/src/liballoc/vec.rs"
 $6 = $5; //@line 1548 "/checkout/src/liballoc/vec.rs"
 if ($6) {
  $7 = (($$sreg$field) + ($4<<2)|0); //@line 1548 "/checkout/src/liballoc/vec.rs"
  STACKTOP = sp;return ($7|0); //@line 1549 "/checkout/src/liballoc/vec.rs"
 } else {
  __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(7936,$4,$$sreg$field2); //@line 1548 "/checkout/src/liballoc/vec.rs"
  // unreachable; //@line 1548 "/checkout/src/liballoc/vec.rs"
 }
 return (0)|0;
}
function __ZN68__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__deref__Deref_GT_5deref17h6e5c34a3e473d651E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $p = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $self = $0;
 $2 = $self; //@line 1688 "/checkout/src/liballoc/vec.rs"
 $3 = (__ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_3ptr17h2f3ec64847fef552E($2)|0); //@line 1688 "/checkout/src/liballoc/vec.rs"
 $p = $3; //@line 1688 "/checkout/src/liballoc/vec.rs"
 $4 = $p; //@line 1689 "/checkout/src/liballoc/vec.rs"
 (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17hb720cbe35e48fa74E($4)|0); //@line 1689 "/checkout/src/liballoc/vec.rs"
 $5 = $p; //@line 1690 "/checkout/src/liballoc/vec.rs"
 $6 = $self; //@line 1690 "/checkout/src/liballoc/vec.rs"
 $7 = ((($6)) + 8|0); //@line 1690 "/checkout/src/liballoc/vec.rs"
 $8 = HEAP32[$7>>2]|0; //@line 1690 "/checkout/src/liballoc/vec.rs"
 __ZN4core5slice14from_raw_parts17hcae5cfeed543b7e9E($1,$5,$8); //@line 1690 "/checkout/src/liballoc/vec.rs"
 $$sreg$field = HEAP32[$1>>2]|0; //@line 1690 "/checkout/src/liballoc/vec.rs"
 $$sreg$index1 = ((($1)) + 4|0); //@line 1690 "/checkout/src/liballoc/vec.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 1690 "/checkout/src/liballoc/vec.rs"
 HEAP32[$retVal>>2] = $$sreg$field; //@line 1692 "/checkout/src/liballoc/vec.rs"
 $retVal$index4 = ((($retVal)) + 4|0); //@line 1692 "/checkout/src/liballoc/vec.rs"
 HEAP32[$retVal$index4>>2] = $$sreg$field2; //@line 1692 "/checkout/src/liballoc/vec.rs"
 STACKTOP = sp;return; //@line 1692 "/checkout/src/liballoc/vec.rs"
}
function __ZN81__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__index__Index_LT_usize_GT__GT_5index17hc708425b720dd5c8E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $index = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $self = $0;
 $index = $1;
 $3 = $self; //@line 1548 "/checkout/src/liballoc/vec.rs"
 __ZN68__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__deref__Deref_GT_5deref17hb5bb9f720dc7ead4E($2,$3); //@line 1548 "/checkout/src/liballoc/vec.rs"
 $$sreg$field = HEAP32[$2>>2]|0; //@line 1548 "/checkout/src/liballoc/vec.rs"
 $$sreg$index1 = ((($2)) + 4|0); //@line 1548 "/checkout/src/liballoc/vec.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 1548 "/checkout/src/liballoc/vec.rs"
 $4 = $index; //@line 1548 "/checkout/src/liballoc/vec.rs"
 $5 = ($4>>>0)<($$sreg$field2>>>0); //@line 1548 "/checkout/src/liballoc/vec.rs"
 $6 = $5; //@line 1548 "/checkout/src/liballoc/vec.rs"
 if ($6) {
  $7 = (($$sreg$field) + ($4<<2)|0); //@line 1548 "/checkout/src/liballoc/vec.rs"
  STACKTOP = sp;return ($7|0); //@line 1549 "/checkout/src/liballoc/vec.rs"
 } else {
  __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(7936,$4,$$sreg$field2); //@line 1548 "/checkout/src/liballoc/vec.rs"
  // unreachable; //@line 1548 "/checkout/src/liballoc/vec.rs"
 }
 return (0)|0;
}
function __ZN68__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__deref__Deref_GT_5deref17hb5bb9f720dc7ead4E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $p = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $self = $0;
 $2 = $self; //@line 1688 "/checkout/src/liballoc/vec.rs"
 $3 = (__ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_3ptr17hcec96c2ecad113e0E($2)|0); //@line 1688 "/checkout/src/liballoc/vec.rs"
 $p = $3; //@line 1688 "/checkout/src/liballoc/vec.rs"
 $4 = $p; //@line 1689 "/checkout/src/liballoc/vec.rs"
 (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h29f14f440a266f0fE($4)|0); //@line 1689 "/checkout/src/liballoc/vec.rs"
 $5 = $p; //@line 1690 "/checkout/src/liballoc/vec.rs"
 $6 = $self; //@line 1690 "/checkout/src/liballoc/vec.rs"
 $7 = ((($6)) + 8|0); //@line 1690 "/checkout/src/liballoc/vec.rs"
 $8 = HEAP32[$7>>2]|0; //@line 1690 "/checkout/src/liballoc/vec.rs"
 __ZN4core5slice14from_raw_parts17h4366bd528b42c550E($1,$5,$8); //@line 1690 "/checkout/src/liballoc/vec.rs"
 $$sreg$field = HEAP32[$1>>2]|0; //@line 1690 "/checkout/src/liballoc/vec.rs"
 $$sreg$index1 = ((($1)) + 4|0); //@line 1690 "/checkout/src/liballoc/vec.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 1690 "/checkout/src/liballoc/vec.rs"
 HEAP32[$retVal>>2] = $$sreg$field; //@line 1692 "/checkout/src/liballoc/vec.rs"
 $retVal$index4 = ((($retVal)) + 4|0); //@line 1692 "/checkout/src/liballoc/vec.rs"
 HEAP32[$retVal$index4>>2] = $$sreg$field2; //@line 1692 "/checkout/src/liballoc/vec.rs"
 STACKTOP = sp;return; //@line 1692 "/checkout/src/liballoc/vec.rs"
}
function ___rust_alloc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___rdl_alloc($0,$1,$2)|0);
 return ($3|0);
}
function ___rust_oom($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___rdl_oom($0);
 // unreachable;
}
function ___rust_dealloc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___rdl_dealloc($0,$1,$2);
 return;
}
function ___rust_realloc($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = (___rdl_realloc($0,$1,$2,$3,$4,$5)|0);
 return ($6|0);
}
function __ZN36__LT_T_u20_as_u20_core__any__Any_GT_11get_type_id17hab971be20d4694ceE($self) {
 $self = $self|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 tempRet0 = (286299353); //@line 115 "/checkout/src/libcore/any.rs"
 return 1890621284; //@line 115 "/checkout/src/libcore/any.rs"
}
function __ZN5alloc4heap8box_free17h0833f2b89912900bE_llvm_76A46BF1($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___rust_dealloc($ptr,12,4); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 265 "/checkout/src/liballoc/heap.rs"
}
function __ZN5alloc4heap8box_free17hb8be26a1f37cb671E_llvm_76A46BF1($ptr$0,$ptr$1) {
 $ptr$0 = $ptr$0|0;
 $ptr$1 = $ptr$1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ptr$1)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $1 = HEAP32[$0>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
 $2 = ($1|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
 if ($2) {
  return; //@line 265 "/checkout/src/liballoc/heap.rs"
 }
 $3 = ((($ptr$1)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $4 = HEAP32[$3>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
 ___rust_dealloc($ptr$0,$1,$4); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 265 "/checkout/src/liballoc/heap.rs"
}
function __ZN45__LT_std__thread__local__os__Key_LT_T_GT__GT_3get17h2a1a454ef25fc2a0E($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $_0$0 = 0, $_0$0$i$i = 0, $_0$0$i$i8 = 0, $_18$sroa$0$sroa$0$0$_18$sroa$0$0$$sroa_raw_idx$sroa_idx = 0, $_5$i$i$i = 0, $cond$i$i = 0, $cond$i$i6 = 0, $err$i$i = 0, $magicptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $err$i$i = sp + 12|0;
 $_5$i$i$i = sp;
 $0 = HEAP32[$self>>2]|0; //@line 1491 "/checkout/src/libcore/sync/atomic.rs"
 $cond$i$i = ($0|0)==(0); //@line 152 "/checkout/src/libstd/sys_common/thread_local.rs"
 if ($cond$i$i) {
  $1 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17h73ae988f9d1fd857E($self)|0); //@line 152 "/checkout/src/libstd/sys_common/thread_local.rs"
  $_0$0$i$i = $1;
 } else {
  $_0$0$i$i = $0;
 }
 $2 = (_pthread_getspecific(($_0$0$i$i|0))|0); //@line 33 "/checkout/src/libstd/sys/unix/thread_local.rs"
 $magicptr = $2; //@line 494 "/checkout/src/libstd/thread/local.rs"
 switch ($magicptr|0) {
 case 0:  {
  $3 = (___rust_alloc(20,4,$err$i$i)|0); //@line 84 "/checkout/src/liballoc/heap.rs"
  $4 = ($3|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
  if ($4) {
   ___rust_oom($_5$i$i$i); //@line 98 "/checkout/src/liballoc/heap.rs"
   // unreachable; //@line 98 "/checkout/src/liballoc/heap.rs"
  }
  HEAP32[$3>>2] = $self; //@line 503 "/checkout/src/libstd/thread/local.rs"
  $_18$sroa$0$sroa$0$0$_18$sroa$0$0$$sroa_raw_idx$sroa_idx = ((($3)) + 4|0); //@line 503 "/checkout/src/libstd/thread/local.rs"
  HEAP32[$_18$sroa$0$sroa$0$0$_18$sroa$0$0$$sroa_raw_idx$sroa_idx>>2] = 0; //@line 503 "/checkout/src/libstd/thread/local.rs"
  $6 = HEAP32[$self>>2]|0; //@line 1491 "/checkout/src/libcore/sync/atomic.rs"
  $cond$i$i6 = ($6|0)==(0); //@line 152 "/checkout/src/libstd/sys_common/thread_local.rs"
  if ($cond$i$i6) {
   $7 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17h73ae988f9d1fd857E($self)|0); //@line 152 "/checkout/src/libstd/sys_common/thread_local.rs"
   $_0$0$i$i8 = $7;
  } else {
   $_0$0$i$i8 = $6;
  }
  (_pthread_setspecific(($_0$0$i$i8|0),($3|0))|0); //@line 27 "/checkout/src/libstd/sys/unix/thread_local.rs"
  $_0$0 = $_18$sroa$0$sroa$0$0$_18$sroa$0$0$$sroa_raw_idx$sroa_idx;
  STACKTOP = sp;return ($_0$0|0); //@line 510 "/checkout/src/libstd/thread/local.rs"
  break;
 }
 case 1:  {
  $_0$0 = 0;
  STACKTOP = sp;return ($_0$0|0); //@line 510 "/checkout/src/libstd/thread/local.rs"
  break;
 }
 default: {
  $5 = ((($2)) + 4|0); //@line 498 "/checkout/src/libstd/thread/local.rs"
  $_0$0 = $5;
  STACKTOP = sp;return ($_0$0|0); //@line 510 "/checkout/src/libstd/thread/local.rs"
 }
 }
 return (0)|0;
}
function __ZN45__LT_std__thread__local__os__Key_LT_T_GT__GT_3get17hc8d8c0c050b83823E($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_0$0 = 0, $_0$0$i$i = 0, $_0$0$i$i8 = 0, $_18$sroa$0$sroa$4$0$_18$sroa$0$0$$sroa_raw_idx$sroa_idx = 0, $_5$i$i$i = 0, $cond$i$i = 0, $cond$i$i6 = 0, $err$i$i = 0, $magicptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $err$i$i = sp + 12|0;
 $_5$i$i$i = sp;
 $0 = HEAP32[$self>>2]|0; //@line 1491 "/checkout/src/libcore/sync/atomic.rs"
 $cond$i$i = ($0|0)==(0); //@line 152 "/checkout/src/libstd/sys_common/thread_local.rs"
 if ($cond$i$i) {
  $1 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17h73ae988f9d1fd857E($self)|0); //@line 152 "/checkout/src/libstd/sys_common/thread_local.rs"
  $_0$0$i$i = $1;
 } else {
  $_0$0$i$i = $0;
 }
 $2 = (_pthread_getspecific(($_0$0$i$i|0))|0); //@line 33 "/checkout/src/libstd/sys/unix/thread_local.rs"
 $magicptr = $2; //@line 494 "/checkout/src/libstd/thread/local.rs"
 switch ($magicptr|0) {
 case 0:  {
  $3 = (___rust_alloc(20,4,$err$i$i)|0); //@line 84 "/checkout/src/liballoc/heap.rs"
  $4 = ($3|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
  if ($4) {
   ___rust_oom($_5$i$i$i); //@line 98 "/checkout/src/liballoc/heap.rs"
   // unreachable; //@line 98 "/checkout/src/liballoc/heap.rs"
  }
  HEAP32[$3>>2] = $self; //@line 503 "/checkout/src/libstd/thread/local.rs"
  $_18$sroa$0$sroa$4$0$_18$sroa$0$0$$sroa_raw_idx$sroa_idx = ((($3)) + 8|0); //@line 503 "/checkout/src/libstd/thread/local.rs"
  HEAP32[$_18$sroa$0$sroa$4$0$_18$sroa$0$0$$sroa_raw_idx$sroa_idx>>2] = 3; //@line 503 "/checkout/src/libstd/thread/local.rs"
  $6 = HEAP32[$self>>2]|0; //@line 1491 "/checkout/src/libcore/sync/atomic.rs"
  $cond$i$i6 = ($6|0)==(0); //@line 152 "/checkout/src/libstd/sys_common/thread_local.rs"
  if ($cond$i$i6) {
   $7 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17h73ae988f9d1fd857E($self)|0); //@line 152 "/checkout/src/libstd/sys_common/thread_local.rs"
   $_0$0$i$i8 = $7;
  } else {
   $_0$0$i$i8 = $6;
  }
  (_pthread_setspecific(($_0$0$i$i8|0),($3|0))|0); //@line 27 "/checkout/src/libstd/sys/unix/thread_local.rs"
  $8 = ((($3)) + 4|0); //@line 509 "/checkout/src/libstd/thread/local.rs"
  $_0$0 = $8;
  STACKTOP = sp;return ($_0$0|0); //@line 510 "/checkout/src/libstd/thread/local.rs"
  break;
 }
 case 1:  {
  $_0$0 = 0;
  STACKTOP = sp;return ($_0$0|0); //@line 510 "/checkout/src/libstd/thread/local.rs"
  break;
 }
 default: {
  $5 = ((($2)) + 4|0); //@line 498 "/checkout/src/libstd/thread/local.rs"
  $_0$0 = $5;
  STACKTOP = sp;return ($_0$0|0); //@line 510 "/checkout/src/libstd/thread/local.rs"
 }
 }
 return (0)|0;
}
function __ZN45__LT_std__thread__local__os__Key_LT_T_GT__GT_3get17hcae762557156e778E($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0 = 0, $_0$0$i$i = 0, $_0$0$i$i8 = 0, $_5$i$i$i = 0, $cond$i$i = 0, $cond$i$i6 = 0, $err$i$i = 0;
 var $magicptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $err$i$i = sp + 12|0;
 $_5$i$i$i = sp;
 $0 = HEAP32[$self>>2]|0; //@line 1491 "/checkout/src/libcore/sync/atomic.rs"
 $cond$i$i = ($0|0)==(0); //@line 152 "/checkout/src/libstd/sys_common/thread_local.rs"
 if ($cond$i$i) {
  $1 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17h73ae988f9d1fd857E($self)|0); //@line 152 "/checkout/src/libstd/sys_common/thread_local.rs"
  $_0$0$i$i = $1;
 } else {
  $_0$0$i$i = $0;
 }
 $2 = (_pthread_getspecific(($_0$0$i$i|0))|0); //@line 33 "/checkout/src/libstd/sys/unix/thread_local.rs"
 $magicptr = $2; //@line 494 "/checkout/src/libstd/thread/local.rs"
 switch ($magicptr|0) {
 case 0:  {
  $3 = (___rust_alloc(12,4,$err$i$i)|0); //@line 84 "/checkout/src/liballoc/heap.rs"
  $4 = ($3|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
  if ($4) {
   ___rust_oom($_5$i$i$i); //@line 98 "/checkout/src/liballoc/heap.rs"
   // unreachable; //@line 98 "/checkout/src/liballoc/heap.rs"
  }
  HEAP32[$3>>2] = $self; //@line 503 "/checkout/src/libstd/thread/local.rs"
  $6 = ((($3)) + 4|0); //@line 503 "/checkout/src/libstd/thread/local.rs"
  $7 = $6; //@line 503 "/checkout/src/libstd/thread/local.rs"
  $8 = $7; //@line 503 "/checkout/src/libstd/thread/local.rs"
  HEAP32[$8>>2] = 0; //@line 503 "/checkout/src/libstd/thread/local.rs"
  $9 = (($7) + 4)|0; //@line 503 "/checkout/src/libstd/thread/local.rs"
  $10 = $9; //@line 503 "/checkout/src/libstd/thread/local.rs"
  HEAP32[$10>>2] = 0; //@line 503 "/checkout/src/libstd/thread/local.rs"
  $11 = HEAP32[$self>>2]|0; //@line 1491 "/checkout/src/libcore/sync/atomic.rs"
  $cond$i$i6 = ($11|0)==(0); //@line 152 "/checkout/src/libstd/sys_common/thread_local.rs"
  if ($cond$i$i6) {
   $12 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17h73ae988f9d1fd857E($self)|0); //@line 152 "/checkout/src/libstd/sys_common/thread_local.rs"
   $_0$0$i$i8 = $12;
  } else {
   $_0$0$i$i8 = $11;
  }
  (_pthread_setspecific(($_0$0$i$i8|0),($3|0))|0); //@line 27 "/checkout/src/libstd/sys/unix/thread_local.rs"
  $_0$0 = $6;
  STACKTOP = sp;return ($_0$0|0); //@line 510 "/checkout/src/libstd/thread/local.rs"
  break;
 }
 case 1:  {
  $_0$0 = 0;
  STACKTOP = sp;return ($_0$0|0); //@line 510 "/checkout/src/libstd/thread/local.rs"
  break;
 }
 default: {
  $5 = ((($2)) + 4|0); //@line 498 "/checkout/src/libstd/thread/local.rs"
  $_0$0 = $5;
  STACKTOP = sp;return ($_0$0|0); //@line 510 "/checkout/src/libstd/thread/local.rs"
 }
 }
 return (0)|0;
}
function __ZN3std6thread5local2os13destroy_value17h1d008f0a84824767E($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$i$i = 0, $_0$0$i$i7 = 0, $_x$i = 0, $cond$i$i = 0, $cond$i$i5 = 0, $ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_x$i = sp + 4|0;
 $ptr1 = sp;
 HEAP32[$ptr1>>2] = $ptr; //@line 521 "/checkout/src/libstd/thread/local.rs"
 $0 = HEAP32[$ptr>>2]|0; //@line 522 "/checkout/src/libstd/thread/local.rs"
 $1 = HEAP32[$0>>2]|0; //@line 1491 "/checkout/src/libcore/sync/atomic.rs"
 $cond$i$i = ($1|0)==(0); //@line 152 "/checkout/src/libstd/sys_common/thread_local.rs"
 $2 = $ptr; //@line 152 "/checkout/src/libstd/sys_common/thread_local.rs"
 if ($cond$i$i) {
  __THREW__ = 0;
  $3 = (invoke_ii(394,($0|0))|0); //@line 152 "/checkout/src/libstd/sys_common/thread_local.rs"
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if ($5) {
   $8 = ___cxa_find_matching_catch_2()|0;
   $9 = tempRet0;
   __ZN4core3ptr13drop_in_place17hd05e6cc3a907cec7E($ptr1); //@line 526 "/checkout/src/libstd/thread/local.rs"
   ___resumeException($8|0);
   // unreachable;
  } else {
   $_0$0$i$i = $3;
  }
 } else {
  $_0$0$i$i = $1;
 }
 (_pthread_setspecific(($_0$0$i$i|0),((1)|0))|0); //@line 27 "/checkout/src/libstd/sys/unix/thread_local.rs"
 HEAP32[$_x$i>>2] = $2;
 __ZN4core3ptr13drop_in_place17hd05e6cc3a907cec7E($_x$i); //@line 786 "/checkout/src/libcore/mem.rs"
 $6 = HEAP32[$0>>2]|0; //@line 1491 "/checkout/src/libcore/sync/atomic.rs"
 $cond$i$i5 = ($6|0)==(0); //@line 152 "/checkout/src/libstd/sys_common/thread_local.rs"
 if (!($cond$i$i5)) {
  $_0$0$i$i7 = $6;
  (_pthread_setspecific(($_0$0$i$i7|0),(0|0))|0); //@line 27 "/checkout/src/libstd/sys/unix/thread_local.rs"
  STACKTOP = sp;return; //@line 526 "/checkout/src/libstd/thread/local.rs"
 }
 $7 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17h73ae988f9d1fd857E($0)|0); //@line 152 "/checkout/src/libstd/sys_common/thread_local.rs"
 $_0$0$i$i7 = $7;
 (_pthread_setspecific(($_0$0$i$i7|0),(0|0))|0); //@line 27 "/checkout/src/libstd/sys/unix/thread_local.rs"
 STACKTOP = sp;return; //@line 526 "/checkout/src/libstd/thread/local.rs"
}
function __ZN4core3ptr13drop_in_place17hd05e6cc3a907cec7E($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $1 = ((($0)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $2 = HEAP32[$1>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $cond$i$i$i = ($2|0)==(0); //@line 59 "/checkout/src/libcore/ptr.rs"
 if (!($cond$i$i$i)) {
  $3 = ((($0)) + 12|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  $4 = HEAP32[$3>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $5 = ($4|0)==(0|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  if (!($5)) {
   $6 = ((($0)) + 16|0); //@line 59 "/checkout/src/libcore/ptr.rs"
   $7 = HEAP32[$6>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
   $8 = HEAP32[$7>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
   __THREW__ = 0;
   invoke_vi($8|0,($4|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $19 = ___cxa_find_matching_catch_2()|0;
    $20 = tempRet0;
    $21 = HEAP32[$3>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
    $22 = HEAP32[$6>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
    __ZN5alloc4heap8box_free17hfd08cb36776ae052E($21,$22); //@line 59 "/checkout/src/libcore/ptr.rs"
    $23 = HEAP32[$arg0>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
    __ZN5alloc4heap8box_free17he62108c1d5b4e765E($23); //@line 59 "/checkout/src/libcore/ptr.rs"
    ___resumeException($19|0);
    // unreachable;
   }
   $11 = HEAP32[$6>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
   $12 = ((($11)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
   $13 = HEAP32[$12>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
   $14 = ($13|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
   if (!($14)) {
    $15 = HEAP32[$3>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
    $16 = ((($11)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
    $17 = HEAP32[$16>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
    ___rust_dealloc($15,$13,$17); //@line 104 "/checkout/src/liballoc/heap.rs"
   }
  }
 }
 $18 = HEAP32[$arg0>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 ___rust_dealloc($18,20,4); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN5alloc4heap8box_free17hfd08cb36776ae052E($ptr$0,$ptr$1) {
 $ptr$0 = $ptr$0|0;
 $ptr$1 = $ptr$1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ptr$1)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $1 = HEAP32[$0>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
 $2 = ($1|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
 if ($2) {
  return; //@line 265 "/checkout/src/liballoc/heap.rs"
 }
 $3 = ((($ptr$1)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $4 = HEAP32[$3>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
 ___rust_dealloc($ptr$0,$1,$4); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 265 "/checkout/src/liballoc/heap.rs"
}
function __ZN5alloc4heap8box_free17he62108c1d5b4e765E($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___rust_dealloc($ptr,20,4); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 265 "/checkout/src/liballoc/heap.rs"
}
function __ZN3std6thread5local2os13destroy_value17h532cd07673e97328E($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_0$0$i$i = 0, $_0$0$i$i6 = 0, $cond$i$i = 0, $cond$i$i4 = 0, $eh$lpad$body9$index2Z2D = 0, $eh$lpad$body9$indexZ2D = 0, $ptr1 = 0, $switch$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ptr1 = sp;
 HEAP32[$ptr1>>2] = $ptr; //@line 521 "/checkout/src/libstd/thread/local.rs"
 $0 = HEAP32[$ptr>>2]|0; //@line 522 "/checkout/src/libstd/thread/local.rs"
 $1 = HEAP32[$0>>2]|0; //@line 1491 "/checkout/src/libcore/sync/atomic.rs"
 $cond$i$i = ($1|0)==(0); //@line 152 "/checkout/src/libstd/sys_common/thread_local.rs"
 if ($cond$i$i) {
  __THREW__ = 0;
  $2 = (invoke_ii(394,($0|0))|0); //@line 152 "/checkout/src/libstd/sys_common/thread_local.rs"
  $3 = __THREW__; __THREW__ = 0;
  $4 = $3&1;
  if ($4) {
   $18 = ___cxa_find_matching_catch_2()|0;
   $19 = tempRet0;
   __ZN4core3ptr13drop_in_place17h19b306a77fb2b832E($ptr1); //@line 526 "/checkout/src/libstd/thread/local.rs"
   $eh$lpad$body9$index2Z2D = $19;$eh$lpad$body9$indexZ2D = $18;
   ___resumeException($eh$lpad$body9$indexZ2D|0);
   // unreachable;
  } else {
   $_0$0$i$i = $2;
  }
 } else {
  $_0$0$i$i = $1;
 }
 (_pthread_setspecific(($_0$0$i$i|0),((1)|0))|0); //@line 27 "/checkout/src/libstd/sys/unix/thread_local.rs"
 $5 = ((($ptr)) + 8|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $6 = HEAP32[$5>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $7 = $6 & 2; //@line 59 "/checkout/src/libcore/ptr.rs"
 $switch$i$i$i$i$i = ($7|0)==(0); //@line 59 "/checkout/src/libcore/ptr.rs"
 if ($switch$i$i$i$i$i) {
  $8 = ((($ptr)) + 16|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  $9 = HEAP32[$8>>2]|0; //@line 2540 "/checkout/src/libcore/ptr.rs"
  $10 = HEAP32[$9>>2]|0;HEAP32[$9>>2] = (($10-1)|0); //@line 1529 "/checkout/src/libcore/sync/atomic.rs"
  $11 = ($10|0)==(1); //@line 933 "/checkout/src/liballoc/arc.rs"
  if ($11) {
   /* fence */; //@line 1706 "/checkout/src/libcore/sync/atomic.rs"
   __THREW__ = 0;
   invoke_vi(395,($8|0)); //@line 968 "/checkout/src/liballoc/arc.rs"
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    $14 = ___cxa_find_matching_catch_2()|0;
    $15 = tempRet0;
    __ZN5alloc4heap8box_free17h2af146f317a2a435E($ptr); //@line 59 "/checkout/src/libcore/ptr.rs"
    $eh$lpad$body9$index2Z2D = $15;$eh$lpad$body9$indexZ2D = $14;
    ___resumeException($eh$lpad$body9$indexZ2D|0);
    // unreachable;
   }
  }
 }
 ___rust_dealloc($ptr,20,4); //@line 104 "/checkout/src/liballoc/heap.rs"
 $16 = HEAP32[$0>>2]|0; //@line 1491 "/checkout/src/libcore/sync/atomic.rs"
 $cond$i$i4 = ($16|0)==(0); //@line 152 "/checkout/src/libstd/sys_common/thread_local.rs"
 if (!($cond$i$i4)) {
  $_0$0$i$i6 = $16;
  (_pthread_setspecific(($_0$0$i$i6|0),(0|0))|0); //@line 27 "/checkout/src/libstd/sys/unix/thread_local.rs"
  STACKTOP = sp;return; //@line 526 "/checkout/src/libstd/thread/local.rs"
 }
 $17 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17h73ae988f9d1fd857E($0)|0); //@line 152 "/checkout/src/libstd/sys_common/thread_local.rs"
 $_0$0$i$i6 = $17;
 (_pthread_setspecific(($_0$0$i$i6|0),(0|0))|0); //@line 27 "/checkout/src/libstd/sys/unix/thread_local.rs"
 STACKTOP = sp;return; //@line 526 "/checkout/src/libstd/thread/local.rs"
}
function __ZN5alloc4heap8box_free17h2af146f317a2a435E($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___rust_dealloc($ptr,20,4); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 265 "/checkout/src/liballoc/heap.rs"
}
function __ZN4core3ptr13drop_in_place17h19b306a77fb2b832E($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $1 = ((($0)) + 8|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $2 = HEAP32[$1>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $3 = $2 & 2; //@line 59 "/checkout/src/libcore/ptr.rs"
 $switch$i$i$i = ($3|0)==(0); //@line 59 "/checkout/src/libcore/ptr.rs"
 if ($switch$i$i$i) {
  $4 = ((($0)) + 16|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  $5 = HEAP32[$4>>2]|0; //@line 2540 "/checkout/src/libcore/ptr.rs"
  $6 = HEAP32[$5>>2]|0;HEAP32[$5>>2] = (($6-1)|0); //@line 1529 "/checkout/src/libcore/sync/atomic.rs"
  $7 = ($6|0)==(1); //@line 933 "/checkout/src/liballoc/arc.rs"
  if ($7) {
   /* fence */; //@line 1706 "/checkout/src/libcore/sync/atomic.rs"
   __THREW__ = 0;
   invoke_vi(395,($4|0)); //@line 968 "/checkout/src/liballoc/arc.rs"
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if ($9) {
    $11 = ___cxa_find_matching_catch_2()|0;
    $12 = tempRet0;
    $13 = HEAP32[$arg0>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
    __ZN5alloc4heap8box_free17h2af146f317a2a435E($13); //@line 59 "/checkout/src/libcore/ptr.rs"
    ___resumeException($11|0);
    // unreachable;
   }
  }
 }
 $10 = HEAP32[$arg0>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 ___rust_dealloc($10,20,4); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN3std6thread5local2os13destroy_value17hb0ad3110e20c83d9E($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_0$0$i$i = 0, $_0$0$i$i6 = 0, $cond$i$i = 0, $cond$i$i4 = 0, $ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ptr1 = sp;
 HEAP32[$ptr1>>2] = $ptr; //@line 521 "/checkout/src/libstd/thread/local.rs"
 $0 = HEAP32[$ptr>>2]|0; //@line 522 "/checkout/src/libstd/thread/local.rs"
 $1 = HEAP32[$0>>2]|0; //@line 1491 "/checkout/src/libcore/sync/atomic.rs"
 $cond$i$i = ($1|0)==(0); //@line 152 "/checkout/src/libstd/sys_common/thread_local.rs"
 if ($cond$i$i) {
  __THREW__ = 0;
  $2 = (invoke_ii(394,($0|0))|0); //@line 152 "/checkout/src/libstd/sys_common/thread_local.rs"
  $3 = __THREW__; __THREW__ = 0;
  $4 = $3&1;
  if ($4) {
   $7 = ___cxa_find_matching_catch_2()|0;
   $8 = tempRet0;
   __ZN4core3ptr13drop_in_place17hed47f0563cabf8e6E($ptr1); //@line 526 "/checkout/src/libstd/thread/local.rs"
   ___resumeException($7|0);
   // unreachable;
  } else {
   $_0$0$i$i = $2;
  }
 } else {
  $_0$0$i$i = $1;
 }
 (_pthread_setspecific(($_0$0$i$i|0),((1)|0))|0); //@line 27 "/checkout/src/libstd/sys/unix/thread_local.rs"
 ___rust_dealloc($ptr,12,4); //@line 104 "/checkout/src/liballoc/heap.rs"
 $5 = HEAP32[$0>>2]|0; //@line 1491 "/checkout/src/libcore/sync/atomic.rs"
 $cond$i$i4 = ($5|0)==(0); //@line 152 "/checkout/src/libstd/sys_common/thread_local.rs"
 if (!($cond$i$i4)) {
  $_0$0$i$i6 = $5;
  (_pthread_setspecific(($_0$0$i$i6|0),(0|0))|0); //@line 27 "/checkout/src/libstd/sys/unix/thread_local.rs"
  STACKTOP = sp;return; //@line 526 "/checkout/src/libstd/thread/local.rs"
 }
 $6 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17h73ae988f9d1fd857E($0)|0); //@line 152 "/checkout/src/libstd/sys_common/thread_local.rs"
 $_0$0$i$i6 = $6;
 (_pthread_setspecific(($_0$0$i$i6|0),(0|0))|0); //@line 27 "/checkout/src/libstd/sys/unix/thread_local.rs"
 STACKTOP = sp;return; //@line 526 "/checkout/src/libstd/thread/local.rs"
}
function __ZN4core3ptr13drop_in_place17hed47f0563cabf8e6E($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 ___rust_dealloc($0,12,4); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN3std5error5Error5cause17ha4634e74943c474cE($0,$self) {
 $0 = $0|0;
 $self = $self|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0; //@line 154 "/checkout/src/libstd/error.rs"
 return; //@line 154 "/checkout/src/libstd/error.rs"
}
function __ZN3std5error5Error7type_id17hf89047fc8489cde6E($self) {
 $self = $self|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 tempRet0 = (-536743345); //@line 163 "/checkout/src/libstd/error.rs"
 return -1228637280; //@line 163 "/checkout/src/libstd/error.rs"
}
function __ZN3std10sys_common6memchr8fallback7memrchr17h71ab3b18b1bc9f7dE($0,$1,$text$0,$text$1) {
 $0 = $0|0;
 $1 = $1|0;
 $text$0 = $text$0|0;
 $text$1 = $text$1|0;
 var $$sink126$i$i = 0, $$sink126$i$i34 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $_19$0 = 0, $accum$0$i$i = 0, $accum$0$i$i21 = 0, $accum$1$i$i = 0, $accum$1$i$i30 = 0, $offset$0 = 0;
 var $offset$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $text$0; //@line 113 "/checkout/src/libstd/sys_common/memchr.rs"
 $3 = (($2) + ($text$1))|0; //@line 113 "/checkout/src/libstd/sys_common/memchr.rs"
 $4 = $3 & 3; //@line 113 "/checkout/src/libstd/sys_common/memchr.rs"
 $5 = ($4|0)==(0); //@line 115 "/checkout/src/libstd/sys_common/memchr.rs"
 L1: do {
  if ($5) {
   $offset$0 = $text$1;
  } else {
   $6 = ($4>>>0)<($text$1>>>0); //@line 116 "/checkout/src/libstd/sys_common/memchr.rs"
   $7 = (($text$1) - ($4))|0; //@line 116 "/checkout/src/libstd/sys_common/memchr.rs"
   $_19$0 = $6 ? $7 : 0; //@line 116 "/checkout/src/libstd/sys_common/memchr.rs"
   $8 = ($_19$0>>>0)>($text$1>>>0); //@line 873 "/checkout/src/libcore/slice/mod.rs"
   if ($8) {
    __ZN4core5slice22slice_index_order_fail17h620f0e130a93079bE($_19$0,$text$1); //@line 874 "/checkout/src/libcore/slice/mod.rs"
    // unreachable; //@line 874 "/checkout/src/libcore/slice/mod.rs"
   }
   $9 = (($text$0) + ($_19$0)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
   $10 = (($text$1) - ($_19$0))|0; //@line 863 "/checkout/src/libcore/slice/mod.rs"
   $11 = (($9) + ($10)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
   $12 = $9; //@line 117 "/checkout/src/libstd/sys_common/memchr.rs"
   $14 = $11;$accum$0$i$i21 = $10;
   while(1) {
    $13 = $14; //@line 699 "/checkout/src/libcore/ptr.rs"
    $15 = (($13) - ($12))|0; //@line 664 "/checkout/src/libcore/num/mod.rs"
    $16 = ($15>>>0)>(3); //@line 1227 "/checkout/src/libcore/slice/mod.rs"
    if (!($16)) {
     $34 = $14;$accum$1$i$i30 = $accum$0$i$i21;
     label = 13;
     break;
    }
    $17 = ((($14)) + -1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
    $18 = HEAP8[$17>>0]|0; //@line 117 "/checkout/src/libstd/sys_common/memchr.rs"
    $19 = ($18<<24>>24)==($1<<24>>24); //@line 117 "/checkout/src/libstd/sys_common/memchr.rs"
    if ($19) {
     label = 7;
     break;
    }
    $21 = ((($14)) + -2|0); //@line 623 "/checkout/src/libcore/ptr.rs"
    $22 = HEAP8[$21>>0]|0; //@line 117 "/checkout/src/libstd/sys_common/memchr.rs"
    $23 = ($22<<24>>24)==($1<<24>>24); //@line 117 "/checkout/src/libstd/sys_common/memchr.rs"
    if ($23) {
     label = 9;
     break;
    }
    $25 = ((($14)) + -3|0); //@line 623 "/checkout/src/libcore/ptr.rs"
    $26 = HEAP8[$25>>0]|0; //@line 117 "/checkout/src/libstd/sys_common/memchr.rs"
    $27 = ($26<<24>>24)==($1<<24>>24); //@line 117 "/checkout/src/libstd/sys_common/memchr.rs"
    if ($27) {
     label = 11;
     break;
    }
    $29 = ((($14)) + -4|0); //@line 623 "/checkout/src/libcore/ptr.rs"
    $30 = (($accum$0$i$i21) + -4)|0; //@line 1754 "/checkout/src/libcore/iter/iterator.rs"
    $31 = HEAP8[$29>>0]|0; //@line 117 "/checkout/src/libstd/sys_common/memchr.rs"
    $32 = ($31<<24>>24)==($1<<24>>24); //@line 117 "/checkout/src/libstd/sys_common/memchr.rs"
    if ($32) {
     $$sink126$i$i34 = $30;
     break;
    } else {
     $14 = $29;$accum$0$i$i21 = $30;
    }
   }
   if ((label|0) == 7) {
    $20 = (($accum$0$i$i21) + -1)|0; //@line 1754 "/checkout/src/libcore/iter/iterator.rs"
    $$sink126$i$i34 = $20;
   }
   else if ((label|0) == 9) {
    $24 = (($accum$0$i$i21) + -2)|0; //@line 1754 "/checkout/src/libcore/iter/iterator.rs"
    $$sink126$i$i34 = $24;
   }
   else if ((label|0) == 11) {
    $28 = (($accum$0$i$i21) + -3)|0; //@line 1754 "/checkout/src/libcore/iter/iterator.rs"
    $$sink126$i$i34 = $28;
   }
   else if ((label|0) == 13) {
    while(1) {
     label = 0;
     $33 = ($9|0)==($34|0); //@line 1233 "/checkout/src/libcore/slice/mod.rs"
     if ($33) {
      $offset$0 = $_19$0;
      break L1;
     }
     $35 = ((($34)) + -1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $36 = (($accum$1$i$i30) + -1)|0; //@line 1754 "/checkout/src/libcore/iter/iterator.rs"
     $37 = HEAP8[$35>>0]|0; //@line 117 "/checkout/src/libstd/sys_common/memchr.rs"
     $38 = ($37<<24>>24)==($1<<24>>24); //@line 117 "/checkout/src/libstd/sys_common/memchr.rs"
     if ($38) {
      $$sink126$i$i34 = $36;
      break;
     } else {
      $34 = $35;$accum$1$i$i30 = $36;
      label = 13;
     }
    }
   }
   $39 = (($$sink126$i$i34) + ($_19$0))|0; //@line 118 "/checkout/src/libstd/sys_common/memchr.rs"
   HEAP32[$0>>2] = 1; //@line 118 "/checkout/src/libstd/sys_common/memchr.rs"
   $40 = ((($0)) + 4|0); //@line 118 "/checkout/src/libstd/sys_common/memchr.rs"
   HEAP32[$40>>2] = $39; //@line 118 "/checkout/src/libstd/sys_common/memchr.rs"
   return; //@line 144 "/checkout/src/libstd/sys_common/memchr.rs"
  }
 } while(0);
 $41 = $1&255; //@line 41 "/checkout/src/libstd/sys_common/memchr.rs"
 $42 = $41 << 8; //@line 41 "/checkout/src/libstd/sys_common/memchr.rs"
 $43 = $42 | $41; //@line 41 "/checkout/src/libstd/sys_common/memchr.rs"
 $44 = $43 << 16; //@line 42 "/checkout/src/libstd/sys_common/memchr.rs"
 $45 = $44 | $43; //@line 42 "/checkout/src/libstd/sys_common/memchr.rs"
 $offset$1 = $offset$0;
 while(1) {
  $46 = ($offset$1>>>0)>(7); //@line 127 "/checkout/src/libstd/sys_common/memchr.rs"
  if (!($46)) {
   break;
  }
  $76 = (($offset$1) + -8)|0; //@line 129 "/checkout/src/libstd/sys_common/memchr.rs"
  $77 = (($text$0) + ($76)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $78 = HEAP32[$77>>2]|0; //@line 129 "/checkout/src/libstd/sys_common/memchr.rs"
  $79 = (($offset$1) + -4)|0; //@line 130 "/checkout/src/libstd/sys_common/memchr.rs"
  $80 = (($text$0) + ($79)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $81 = HEAP32[$80>>2]|0; //@line 130 "/checkout/src/libstd/sys_common/memchr.rs"
  $82 = $78 ^ $45; //@line 133 "/checkout/src/libstd/sys_common/memchr.rs"
  $83 = (($82) + -16843009)|0; //@line 1820 "/checkout/src/libcore/num/mod.rs"
  $84 = $82 & -2139062144; //@line 35 "/checkout/src/libstd/sys_common/memchr.rs"
  $85 = $84 ^ -2139062144; //@line 35 "/checkout/src/libstd/sys_common/memchr.rs"
  $86 = $85 & $83; //@line 35 "/checkout/src/libstd/sys_common/memchr.rs"
  $87 = $81 ^ $45; //@line 134 "/checkout/src/libstd/sys_common/memchr.rs"
  $88 = (($87) + -16843009)|0; //@line 1820 "/checkout/src/libcore/num/mod.rs"
  $89 = $87 & -2139062144; //@line 35 "/checkout/src/libstd/sys_common/memchr.rs"
  $90 = $89 ^ -2139062144; //@line 35 "/checkout/src/libstd/sys_common/memchr.rs"
  $91 = $90 & $88; //@line 35 "/checkout/src/libstd/sys_common/memchr.rs"
  $92 = $91 | $86; //@line 135 "/checkout/src/libstd/sys_common/memchr.rs"
  $93 = ($92|0)==(0); //@line 135 "/checkout/src/libstd/sys_common/memchr.rs"
  if ($93) {
   $offset$1 = $76;
  } else {
   break;
  }
 }
 $47 = ($offset$1>>>0)>($text$1>>>0); //@line 875 "/checkout/src/libcore/slice/mod.rs"
 if ($47) {
  __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($offset$1,$text$1); //@line 876 "/checkout/src/libcore/slice/mod.rs"
  // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
 }
 $48 = (($text$0) + ($offset$1)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
 $50 = $48;$accum$0$i$i = $offset$1;
 while(1) {
  $49 = $50; //@line 699 "/checkout/src/libcore/ptr.rs"
  $51 = (($49) - ($2))|0; //@line 664 "/checkout/src/libcore/num/mod.rs"
  $52 = ($51>>>0)>(3); //@line 1227 "/checkout/src/libcore/slice/mod.rs"
  if (!($52)) {
   $70 = $50;$accum$1$i$i = $accum$0$i$i;
   label = 30;
   break;
  }
  $53 = ((($50)) + -1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $54 = HEAP8[$53>>0]|0; //@line 143 "/checkout/src/libstd/sys_common/memchr.rs"
  $55 = ($54<<24>>24)==($1<<24>>24); //@line 143 "/checkout/src/libstd/sys_common/memchr.rs"
  if ($55) {
   label = 24;
   break;
  }
  $57 = ((($50)) + -2|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $58 = HEAP8[$57>>0]|0; //@line 143 "/checkout/src/libstd/sys_common/memchr.rs"
  $59 = ($58<<24>>24)==($1<<24>>24); //@line 143 "/checkout/src/libstd/sys_common/memchr.rs"
  if ($59) {
   label = 26;
   break;
  }
  $61 = ((($50)) + -3|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $62 = HEAP8[$61>>0]|0; //@line 143 "/checkout/src/libstd/sys_common/memchr.rs"
  $63 = ($62<<24>>24)==($1<<24>>24); //@line 143 "/checkout/src/libstd/sys_common/memchr.rs"
  if ($63) {
   label = 28;
   break;
  }
  $65 = ((($50)) + -4|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $66 = (($accum$0$i$i) + -4)|0; //@line 1754 "/checkout/src/libcore/iter/iterator.rs"
  $67 = HEAP8[$65>>0]|0; //@line 143 "/checkout/src/libstd/sys_common/memchr.rs"
  $68 = ($67<<24>>24)==($1<<24>>24); //@line 143 "/checkout/src/libstd/sys_common/memchr.rs"
  if ($68) {
   $$sink126$i$i = $66;
   break;
  } else {
   $50 = $65;$accum$0$i$i = $66;
  }
 }
 L35: do {
  if ((label|0) == 24) {
   $56 = (($accum$0$i$i) + -1)|0; //@line 1754 "/checkout/src/libcore/iter/iterator.rs"
   $$sink126$i$i = $56;
  }
  else if ((label|0) == 26) {
   $60 = (($accum$0$i$i) + -2)|0; //@line 1754 "/checkout/src/libcore/iter/iterator.rs"
   $$sink126$i$i = $60;
  }
  else if ((label|0) == 28) {
   $64 = (($accum$0$i$i) + -3)|0; //@line 1754 "/checkout/src/libcore/iter/iterator.rs"
   $$sink126$i$i = $64;
  }
  else if ((label|0) == 30) {
   while(1) {
    label = 0;
    $69 = ($text$0|0)==($70|0); //@line 1233 "/checkout/src/libcore/slice/mod.rs"
    if ($69) {
     break;
    }
    $71 = ((($70)) + -1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
    $72 = (($accum$1$i$i) + -1)|0; //@line 1754 "/checkout/src/libcore/iter/iterator.rs"
    $73 = HEAP8[$71>>0]|0; //@line 143 "/checkout/src/libstd/sys_common/memchr.rs"
    $74 = ($73<<24>>24)==($1<<24>>24); //@line 143 "/checkout/src/libstd/sys_common/memchr.rs"
    if ($74) {
     $$sink126$i$i = $72;
     break L35;
    } else {
     $70 = $71;$accum$1$i$i = $72;
     label = 30;
    }
   }
   HEAP32[$0>>2] = 0; //@line 382 "/checkout/src/libcore/iter/mod.rs"
   return; //@line 144 "/checkout/src/libstd/sys_common/memchr.rs"
  }
 } while(0);
 HEAP32[$0>>2] = 1; //@line 383 "/checkout/src/libcore/iter/mod.rs"
 $75 = ((($0)) + 4|0); //@line 383 "/checkout/src/libcore/iter/mod.rs"
 HEAP32[$75>>2] = $$sink126$i$i; //@line 383 "/checkout/src/libcore/iter/mod.rs"
 return; //@line 144 "/checkout/src/libstd/sys_common/memchr.rs"
}
function __ZN3std10sys_common4util10dumb_print17hae6bc6d2823858fdE($args) {
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_2$sroa$5$sroa$0$0$extract$trunc34 = 0;
 var $_4$i$i = 0, $_6$i = 0, $_6$i$sroa_raw_idx = 0, $stderr$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $stderr$i$i = sp + 32|0;
 $_4$i$i = sp + 8|0;
 $_6$i = sp;
 ;HEAP32[$_4$i$i>>2]=HEAP32[$args>>2]|0;HEAP32[$_4$i$i+4>>2]=HEAP32[$args+4>>2]|0;HEAP32[$_4$i$i+8>>2]=HEAP32[$args+8>>2]|0;HEAP32[$_4$i$i+12>>2]=HEAP32[$args+12>>2]|0;HEAP32[$_4$i$i+16>>2]=HEAP32[$args+16>>2]|0;HEAP32[$_4$i$i+20>>2]=HEAP32[$args+20>>2]|0; //@line 17 "/checkout/src/libstd/sys_common/util.rs"
 __ZN3std2io5Write9write_fmt17h185a03b372d63affE($_6$i,$stderr$i$i,$_4$i$i); //@line 17 "/checkout/src/libstd/sys_common/util.rs"
 $0 = HEAP32[$_6$i>>2]|0; //@line 468 "/checkout/src/libcore/result.rs"
 $_6$i$sroa_raw_idx = ((($_6$i)) + 4|0); //@line 468 "/checkout/src/libcore/result.rs"
 $1 = HEAP32[$_6$i$sroa_raw_idx>>2]|0; //@line 468 "/checkout/src/libcore/result.rs"
 $_2$sroa$5$sroa$0$0$extract$trunc34 = $0&255; //@line 468 "/checkout/src/libcore/result.rs"
 switch ($_2$sroa$5$sroa$0$0$extract$trunc34<<24>>24) {
 case 0: case 1: case 3:  {
  STACKTOP = sp;return; //@line 18 "/checkout/src/libstd/sys_common/util.rs"
  break;
 }
 default: {
 }
 }
 $2 = HEAP32[$1>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $3 = ((($1)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $4 = HEAP32[$3>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $5 = HEAP32[$4>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 __THREW__ = 0;
 invoke_vi($5|0,($2|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $15 = ___cxa_find_matching_catch_2()|0;
  $16 = tempRet0;
  $17 = HEAP32[$1>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $18 = HEAP32[$3>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  __ZN5alloc4heap8box_free17hb8be26a1f37cb671E_llvm_76A46BF1($17,$18); //@line 59 "/checkout/src/libcore/ptr.rs"
  __ZN5alloc4heap8box_free17h0833f2b89912900bE_llvm_76A46BF1($1); //@line 59 "/checkout/src/libcore/ptr.rs"
  ___resumeException($15|0);
  // unreachable;
 }
 $8 = HEAP32[$3>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $9 = ((($8)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $10 = HEAP32[$9>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
 $11 = ($10|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
 if (!($11)) {
  $12 = HEAP32[$1>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $13 = ((($8)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
  $14 = HEAP32[$13>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
  ___rust_dealloc($12,$10,$14); //@line 104 "/checkout/src/liballoc/heap.rs"
 }
 ___rust_dealloc($1,12,4); //@line 104 "/checkout/src/liballoc/heap.rs"
 STACKTOP = sp;return; //@line 18 "/checkout/src/libstd/sys_common/util.rs"
}
function __ZN3std10sys_common4util5abort17h2132d2528374fa19E($args) {
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $_10 = 0, $_3 = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$4$0$$sroa_idx2$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_10 = sp + 24|0;
 $_3 = sp;
 HEAP32[$_10>>2] = $args; //@line 26 "/checkout/src/libstd/sys_common/util.rs"
 $0 = ((($_10)) + 4|0); //@line 26 "/checkout/src/libstd/sys_common/util.rs"
 HEAP32[$0>>2] = 396; //@line 26 "/checkout/src/libstd/sys_common/util.rs"
 HEAP32[$_3>>2] = 7952; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $1 = ((($_3)) + 4|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$1>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $_5$sroa$0$0$$sroa_idx$i = ((($_3)) + 8|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 11348; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $_5$sroa$4$0$$sroa_idx2$i = ((($_3)) + 12|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5$sroa$4$0$$sroa_idx2$i>>2] = 1; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $2 = ((($_3)) + 16|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$2>>2] = $_10; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $3 = ((($_3)) + 20|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$3>>2] = 1; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 __ZN3std10sys_common4util10dumb_print17hae6bc6d2823858fdE($_3); //@line 26 "/checkout/src/libstd/sys_common/util.rs"
 _abort(); //@line 165 "/checkout/src/libstd/sys/unix/mod.rs"
 // unreachable; //@line 165 "/checkout/src/libstd/sys/unix/mod.rs"
}
function __ZN3std2rt10lang_start17h05a5b20c84ed1060E($0,$argc,$argv) {
 $0 = $0|0;
 $argc = $argc|0;
 $argv = $argv|0;
 var $$ = 0, $$pre$i$i$i = 0, $$pre12$i1$i$i = 0, $$sink$in$phi$trans$insert$i2$i$i = 0, $$sink$in$pre$phi$i$i$iZZZ2D = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_15$i$i = 0, $_8$i = 0, $_9 = 0, $any_data$i = 0, $any_vtable$i = 0, $data$i = 0;
 var $f$i$i = 0, $main = 0, $res = 0, $switch$i$i$i = 0, $thread$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_15$i$i = sp + 56|0;
 $f$i$i = sp + 60|0;
 $data$i = sp + 52|0;
 $any_vtable$i = sp + 48|0;
 $any_data$i = sp + 44|0;
 $_8$i = sp;
 $thread$i = sp + 40|0;
 $res = sp + 32|0;
 $_9 = sp + 16|0;
 $main = sp + 12|0;
 HEAP32[$main>>2] = $0;
 __ZN5alloc3str56__LT_impl_u20_alloc__borrow__ToOwned_u20_for_u20_str_GT_8to_owned17habeeaee441196d3bE($_9,20863,4); //@line 50 "/checkout/src/libstd/rt.rs"
 $1 = (__ZN3std6thread6Thread3new17h7fe66d39127424c4E($_9)|0); //@line 50 "/checkout/src/libstd/rt.rs"
 HEAP32[$thread$i>>2] = $1;
 __THREW__ = 0;
 invoke_vi(397,(8992|0)); //@line 46 "/checkout/src/libstd/sys_common/thread_info.rs"
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  __ZN4core3ptr13drop_in_place17h6ba3782eeecc005cE_llvm_AFEA653B($thread$i); //@line 51 "/checkout/src/libstd/sys_common/thread_info.rs"
  ___resumeException($4|0);
  // unreachable;
 }
 $6 = HEAP32[$thread$i>>2]|0; //@line 47 "/checkout/src/libstd/sys_common/thread_info.rs"
 $7 = $_8$i; //@line 47 "/checkout/src/libstd/sys_common/thread_info.rs"
 $8 = $7; //@line 47 "/checkout/src/libstd/sys_common/thread_info.rs"
 HEAP32[$8>>2] = 0; //@line 47 "/checkout/src/libstd/sys_common/thread_info.rs"
 $9 = (($7) + 4)|0; //@line 47 "/checkout/src/libstd/sys_common/thread_info.rs"
 $10 = $9; //@line 47 "/checkout/src/libstd/sys_common/thread_info.rs"
 HEAP32[$10>>2] = 0; //@line 47 "/checkout/src/libstd/sys_common/thread_info.rs"
 $11 = ((($_8$i)) + 8|0); //@line 47 "/checkout/src/libstd/sys_common/thread_info.rs"
 HEAP32[$11>>2] = $6; //@line 47 "/checkout/src/libstd/sys_common/thread_info.rs"
 __ZN46__LT_std__thread__local__LocalKey_LT_T_GT__GT_4with17h838833ec5cedc139E(8992,$_8$i); //@line 47 "/checkout/src/libstd/sys_common/thread_info.rs"
 __ZN3std3sys4unix4args4init17hc7943941f4c9089dE($argc,$argv); //@line 54 "/checkout/src/libstd/rt.rs"
 HEAP32[$any_data$i>>2] = 0; //@line 453 "/checkout/src/libstd/panicking.rs"
 HEAP32[$any_vtable$i>>2] = 0; //@line 454 "/checkout/src/libstd/panicking.rs"
 HEAP32[$data$i>>2] = $main; //@line 455 "/checkout/src/libstd/panicking.rs"
 $12 = (___rust_maybe_catch_panic(398,$data$i,$any_data$i,$any_vtable$i)|0); //@line 459 "/checkout/src/libstd/panicking.rs"
 $13 = ($12|0)==(0); //@line 464 "/checkout/src/libstd/panicking.rs"
 if ($13) {
  HEAP32[$res>>2] = 0; //@line 466 "/checkout/src/libstd/panicking.rs"
 } else {
  $14 = HEAP32[2018]|0; //@line 374 "/checkout/src/libstd/thread/local.rs"
  $15 = (FUNCTION_TABLE_i[$14 & 511]()|0); //@line 374 "/checkout/src/libstd/thread/local.rs"
  $16 = ($15|0)==(0|0); //@line 374 "/checkout/src/libstd/thread/local.rs"
  if ($16) {
   __ZN4core6result13unwrap_failed17h6c499c654b178840E(21076,57); //@line 809 "/checkout/src/libcore/result.rs"
   // unreachable;
  }
  $17 = HEAP32[$15>>2]|0; //@line 378 "/checkout/src/libstd/thread/local.rs"
  $switch$i$i$i = ($17|0)==(1); //@line 378 "/checkout/src/libstd/thread/local.rs"
  if ($switch$i$i$i) {
   $$sink$in$phi$trans$insert$i2$i$i = ((($15)) + 4|0);
   $$pre$i$i$i = HEAP32[$$sink$in$phi$trans$insert$i2$i$i>>2]|0;
   $$sink$in$pre$phi$i$i$iZZZ2D = $$sink$in$phi$trans$insert$i2$i$i;$25 = $$pre$i$i$i;
  } else {
   $18 = HEAP32[(8076)>>2]|0; //@line 295 "/checkout/src/libstd/thread/local.rs"
   $19 = (FUNCTION_TABLE_i[$18 & 511]()|0); //@line 295 "/checkout/src/libstd/thread/local.rs"
   $20 = $15; //@line 239 "/checkout/src/libcore/ptr.rs"
   $21 = $20; //@line 239 "/checkout/src/libcore/ptr.rs"
   HEAP32[$21>>2] = 1; //@line 239 "/checkout/src/libcore/ptr.rs"
   $22 = (($20) + 4)|0; //@line 239 "/checkout/src/libcore/ptr.rs"
   $23 = $22; //@line 239 "/checkout/src/libcore/ptr.rs"
   HEAP32[$23>>2] = $19; //@line 239 "/checkout/src/libcore/ptr.rs"
   $$pre12$i1$i$i = ((($15)) + 4|0);
   $$sink$in$pre$phi$i$i$iZZZ2D = $$pre12$i1$i$i;$25 = $19;
  }
  $24 = (($25) + -1)|0; //@line 411 "/checkout/src/libstd/panicking.rs"
  HEAP8[$$sink$in$pre$phi$i$i$iZZZ2D>>0]=$24&255;HEAP8[$$sink$in$pre$phi$i$i$iZZZ2D+1>>0]=($24>>8)&255;HEAP8[$$sink$in$pre$phi$i$i$iZZZ2D+2>>0]=($24>>16)&255;HEAP8[$$sink$in$pre$phi$i$i$iZZZ2D+3>>0]=$24>>24; //@line 239 "/checkout/src/libcore/ptr.rs"
  $26 = HEAP32[$any_data$i>>2]|0; //@line 471 "/checkout/src/libstd/panicking.rs"
  $27 = HEAP32[$any_vtable$i>>2]|0; //@line 472 "/checkout/src/libstd/panicking.rs"
  HEAP32[$res>>2] = $26; //@line 470 "/checkout/src/libstd/panicking.rs"
  $28 = ((($res)) + 4|0); //@line 470 "/checkout/src/libstd/panicking.rs"
  HEAP32[$28>>2] = $27; //@line 470 "/checkout/src/libstd/panicking.rs"
 }
 $29 = HEAP32[9619]|0; //@line 1492 "/checkout/src/libcore/sync/atomic.rs"
 $30 = ($29|0)==(3); //@line 222 "/checkout/src/libstd/sync/once.rs"
 do {
  if (!($30)) {
   HEAP8[$f$i$i>>0] = 1; //@line 226 "/checkout/src/libstd/sync/once.rs"
   HEAP32[$_15$i$i>>2] = $f$i$i; //@line 227 "/checkout/src/libstd/sync/once.rs"
   __THREW__ = 0;
   invoke_viiii(399,(38476|0),0,($_15$i$i|0),(9508|0)); //@line 227 "/checkout/src/libstd/sync/once.rs"
   $31 = __THREW__; __THREW__ = 0;
   $32 = $31&1;
   if ($32) {
    $48 = ___cxa_find_matching_catch_2()|0;
    $49 = tempRet0;
    __ZN4core3ptr13drop_in_place17hc3e49fa3f31f8e6eE($res); //@line 65 "/checkout/src/libstd/rt.rs"
    ___resumeException($48|0);
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 $33 = HEAP32[$res>>2]|0; //@line 294 "/checkout/src/libcore/result.rs"
 $34 = ($33|0)!=(0|0); //@line 317 "/checkout/src/libcore/result.rs"
 $35 = ($33|0)==(0|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 if ($35) {
  $$ = $34 ? 101 : 0; //@line 67 "/checkout/src/libstd/rt.rs"
  STACKTOP = sp;return ($$|0); //@line 72 "/checkout/src/libstd/rt.rs"
 }
 $36 = ((($res)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $37 = HEAP32[$36>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $38 = HEAP32[$37>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 __THREW__ = 0;
 invoke_vi($38|0,($33|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
 $39 = __THREW__; __THREW__ = 0;
 $40 = $39&1;
 if ($40) {
  $46 = ___cxa_find_matching_catch_2()|0;
  $47 = tempRet0;
  __ZN5alloc4heap8box_free17h01457329634e278fE($33,$37); //@line 59 "/checkout/src/libcore/ptr.rs"
  ___resumeException($46|0);
  // unreachable;
 }
 $41 = ((($37)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $42 = HEAP32[$41>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
 $43 = ($42|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
 if ($43) {
  $$ = $34 ? 101 : 0; //@line 67 "/checkout/src/libstd/rt.rs"
  STACKTOP = sp;return ($$|0); //@line 72 "/checkout/src/libstd/rt.rs"
 }
 $44 = ((($37)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $45 = HEAP32[$44>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
 ___rust_dealloc($33,$42,$45); //@line 104 "/checkout/src/liballoc/heap.rs"
 $$ = $34 ? 101 : 0; //@line 67 "/checkout/src/libstd/rt.rs"
 STACKTOP = sp;return ($$|0); //@line 72 "/checkout/src/libstd/rt.rs"
}
function __ZN5alloc4heap8box_free17h01457329634e278fE($ptr$0,$ptr$1) {
 $ptr$0 = $ptr$0|0;
 $ptr$1 = $ptr$1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ptr$1)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $1 = HEAP32[$0>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
 $2 = ($1|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
 if ($2) {
  return; //@line 265 "/checkout/src/liballoc/heap.rs"
 }
 $3 = ((($ptr$1)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $4 = HEAP32[$3>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
 ___rust_dealloc($ptr$0,$1,$4); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 265 "/checkout/src/liballoc/heap.rs"
}
function __ZN4core3ptr13drop_in_place17hc3e49fa3f31f8e6eE($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $1 = ($0|0)==(0|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 if ($1) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 $2 = ((($arg0)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $3 = HEAP32[$2>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $4 = HEAP32[$3>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 __THREW__ = 0;
 invoke_vi($4|0,($0|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  $16 = HEAP32[$arg0>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $17 = HEAP32[$2>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  __ZN5alloc4heap8box_free17h01457329634e278fE($16,$17); //@line 59 "/checkout/src/libcore/ptr.rs"
  ___resumeException($14|0);
  // unreachable;
 }
 $7 = HEAP32[$2>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $8 = ((($7)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $9 = HEAP32[$8>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
 $10 = ($9|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
 if ($10) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 $11 = HEAP32[$arg0>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $12 = ((($7)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $13 = HEAP32[$12>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
 ___rust_dealloc($11,$9,$13); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN90__LT_std__sys__unix__backtrace__tracing__imp__UnwindError_u20_as_u20_std__error__Error_GT_11description17hc2a6fbad875fd395E($retVal,$self) {
 $retVal = $retVal|0;
 $self = $self|0;
 var $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$retVal>>2] = 20867; //@line 30 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 30 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 HEAP32[$retVal$index1>>2] = 39; //@line 30 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 return; //@line 30 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
}
function __ZN91__LT_std__sys__unix__backtrace__tracing__imp__UnwindError_u20_as_u20_core__fmt__Display_GT_3fmt17h1af2ee93352d7c1fE($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $$fca$1$gep = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_11 = 0, $_14 = 0, $_4 = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$4$0$$sroa_idx2$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_14 = sp + 40|0;
 $_11 = sp + 24|0;
 $_4 = sp;
 HEAP32[$_14>>2] = 20867; //@line 35 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 $$fca$1$gep = ((($_14)) + 4|0); //@line 35 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 HEAP32[$$fca$1$gep>>2] = 39; //@line 35 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 HEAP32[$_11>>2] = $_14; //@line 35 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 $0 = ((($_11)) + 4|0); //@line 35 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 HEAP32[$0>>2] = 400; //@line 35 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 $1 = ((($_11)) + 8|0); //@line 35 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 HEAP32[$1>>2] = $self; //@line 35 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 $2 = ((($_11)) + 12|0); //@line 35 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 HEAP32[$2>>2] = 401; //@line 35 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 HEAP32[$_4>>2] = 7968; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $3 = ((($_4)) + 4|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$3>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $_5$sroa$0$0$$sroa_idx$i = ((($_4)) + 8|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 12044; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $_5$sroa$4$0$$sroa_idx2$i = ((($_4)) + 12|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5$sroa$4$0$$sroa_idx2$i>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $4 = ((($_4)) + 16|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$4>>2] = $_11; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $5 = ((($_4)) + 20|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$5>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $6 = (__ZN4core3fmt9Formatter9write_fmt17h650e8f365614dc75E($f,$_4)|0); //@line 35 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 STACKTOP = sp;return ($6|0); //@line 36 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
}
function __ZN3std3sys4unix9backtrace7tracing3imp16unwind_backtrace17h25964b04c0ce1f71E($0,$frames$0,$frames$1) {
 $0 = $0|0;
 $frames$0 = $frames$0|0;
 $frames$1 = $frames$1|0;
 var $$sink = 0, $$sink11 = 0, $$sroa_idx = 0, $$sroa_idx2 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_5$i$i$i$i$i$i = 0, $_5$i$i$i$i$i$i$i = 0, $_5$sroa$4$0$$sroa_idx$i$i = 0, $_5$sroa$5$0$$sroa_raw_idx$i$i = 0, $_5$sroa$6$0$$sroa_raw_idx$i$i = 0, $_5$sroa$6$i$i = 0, $cx = 0;
 var $err$i$i$i$i$i = 0, $err$i$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $err$i$i$i$i$i$i = sp + 48|0;
 $_5$i$i$i$i$i$i$i = sp + 36|0;
 $err$i$i$i$i$i = sp + 24|0;
 $_5$i$i$i$i$i$i = sp + 12|0;
 $_5$sroa$6$i$i = sp + 60|0;
 $cx = sp;
 HEAP32[$cx>>2] = 0; //@line 44 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 $1 = ((($cx)) + 4|0); //@line 44 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 HEAP32[$1>>2] = $frames$0; //@line 44 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 $2 = ((($cx)) + 8|0); //@line 44 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 HEAP32[$2>>2] = $frames$1; //@line 44 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 $3 = (__Unwind_Backtrace((402|0),($cx|0))|0); //@line 49 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 switch ($3|0) {
 case 9: case 5: case 3:  {
  $4 = HEAP32[$cx>>2]|0; //@line 59 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
  HEAP32[$0>>2] = 0; //@line 59 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
  $$sink = $4;$$sink11 = 4;
  $$sroa_idx2 = (($0) + ($$sink11)|0);
  HEAP32[$$sroa_idx2>>2] = $$sink;
  STACKTOP = sp;return; //@line 66 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
  break;
 }
 default: {
 }
 }
 $5 = (___rust_alloc(4,4,$err$i$i$i$i$i$i)|0); //@line 84 "/checkout/src/liballoc/heap.rs"
 $6 = ($5|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
 if ($6) {
  ___rust_oom($_5$i$i$i$i$i$i$i); //@line 98 "/checkout/src/liballoc/heap.rs"
  // unreachable; //@line 98 "/checkout/src/liballoc/heap.rs"
 }
 HEAP32[$5>>2] = $3; //@line 242 "/checkout/src/liballoc/boxed.rs"
 $7 = (___rust_alloc(12,4,$err$i$i$i$i$i)|0); //@line 84 "/checkout/src/liballoc/heap.rs"
 $8 = ($7|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
 if ($8) {
  ___rust_oom($_5$i$i$i$i$i$i); //@line 98 "/checkout/src/liballoc/heap.rs"
  // unreachable; //@line 98 "/checkout/src/liballoc/heap.rs"
 }
 HEAP32[$7>>2] = $5; //@line 242 "/checkout/src/liballoc/boxed.rs"
 $_5$sroa$4$0$$sroa_idx$i$i = ((($7)) + 4|0); //@line 242 "/checkout/src/liballoc/boxed.rs"
 HEAP32[$_5$sroa$4$0$$sroa_idx$i$i>>2] = 9412; //@line 242 "/checkout/src/liballoc/boxed.rs"
 $_5$sroa$5$0$$sroa_raw_idx$i$i = ((($7)) + 8|0); //@line 242 "/checkout/src/liballoc/boxed.rs"
 HEAP8[$_5$sroa$5$0$$sroa_raw_idx$i$i>>0] = 16; //@line 242 "/checkout/src/liballoc/boxed.rs"
 $_5$sroa$6$0$$sroa_raw_idx$i$i = ((($7)) + 9|0); //@line 242 "/checkout/src/liballoc/boxed.rs"
 ;HEAP8[$_5$sroa$6$0$$sroa_raw_idx$i$i>>0]=HEAP8[$_5$sroa$6$i$i>>0]|0;HEAP8[$_5$sroa$6$0$$sroa_raw_idx$i$i+1>>0]=HEAP8[$_5$sroa$6$i$i+1>>0]|0;HEAP8[$_5$sroa$6$0$$sroa_raw_idx$i$i+2>>0]=HEAP8[$_5$sroa$6$i$i+2>>0]|0; //@line 242 "/checkout/src/liballoc/boxed.rs"
 $9 = $7; //@line 253 "/checkout/src/libstd/io/error.rs"
 HEAP32[$0>>2] = 1; //@line 62 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 $$sroa_idx = ((($0)) + 4|0); //@line 62 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 HEAP32[$$sroa_idx>>2] = 2; //@line 62 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 $$sink = $9;$$sink11 = 8;
 $$sroa_idx2 = (($0) + ($$sink11)|0);
 HEAP32[$$sroa_idx2>>2] = $$sink;
 STACKTOP = sp;return; //@line 66 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
}
function __ZN3std3sys4unix9backtrace7tracing3imp8trace_fn17h521d9d5bbd6493f2E_llvm_76A46BF1($ctx,$arg) {
 $ctx = $ctx|0;
 $arg = $arg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ip$0 = 0, $ip$0$v = 0, $ip_before_insn = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ip_before_insn = sp;
 HEAP32[$ip_before_insn>>2] = 0; //@line 71 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 $0 = (__Unwind_GetIPInfo(($ctx|0),($ip_before_insn|0))|0); //@line 73 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 $1 = ($0|0)!=(0); //@line 75 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 $2 = HEAP32[$ip_before_insn>>2]|0; //@line 75 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 $3 = ($2|0)==(0); //@line 75 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 $or$cond = $1 & $3; //@line 75 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 $4 = $or$cond << 31 >> 31; //@line 75 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 $ip$0$v = (($4) + ($0))|0; //@line 75 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 $ip$0 = $ip$0$v; //@line 75 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 $5 = (__Unwind_FindEnclosingFunction(($ip$0|0))|0); //@line 94 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 $6 = HEAP32[$arg>>2]|0; //@line 97 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 $7 = ((($arg)) + 8|0); //@line 97 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 $8 = HEAP32[$7>>2]|0; //@line 97 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 $9 = ($6>>>0)<($8>>>0); //@line 97 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 if (!($9)) {
  STACKTOP = sp;return 0; //@line 106 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 }
 $10 = ((($arg)) + 4|0); //@line 97 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 $11 = HEAP32[$10>>2]|0; //@line 98 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 $12 = (($11) + ($6<<3)|0); //@line 98 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 HEAP32[$12>>2] = $ip$0; //@line 98 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 $13 = (((($11) + ($6<<3)|0)) + 4|0); //@line 98 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 HEAP32[$13>>2] = $5; //@line 98 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 $14 = HEAP32[$arg>>2]|0; //@line 102 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 $15 = (($14) + 1)|0; //@line 102 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 HEAP32[$arg>>2] = $15; //@line 102 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 STACKTOP = sp;return 0; //@line 106 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
}
function __ZN89__LT_std__sys__unix__backtrace__tracing__imp__UnwindError_u20_as_u20_core__fmt__Debug_GT_3fmt17h54dfb7c07fa720d4E($self,$__arg_0) {
 $self = $self|0;
 $__arg_0 = $__arg_0|0;
 var $0 = 0, $_13 = 0, $builder = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_13 = sp + 12|0;
 $builder = sp;
 __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder,$__arg_0,20908,11); //@line 24 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 HEAP32[$_13>>2] = $self; //@line 25 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 (__ZN4core3fmt8builders10DebugTuple5field17hf986ac1f5cbaa58cE($builder,$_13,7984)|0); //@line 24 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 $0 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder)|0); //@line 24 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
 STACKTOP = sp;return ($0|0); //@line 24 "/checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs"
}
function __ZN4core3ptr13drop_in_place17hd161e49046040211E($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h377cdb40ce13c710E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self>>2]|0; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $1 = (__ZN75__LT_unwind__libunwind___Unwind_Reason_Code_u20_as_u20_core__fmt__Debug_GT_3fmt17h2629a786098247d4E($0,$f)|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 return ($1|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN4core3ptr13drop_in_place17h0daa30b095c44695E($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr13drop_in_place17hadaa2aaeb9dfa958E_llvm_2B27B54C($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($arg0)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $1 = HEAP32[$0>>2]|0; //@line 1105 "/checkout/src/libcore/cell.rs"
 HEAP8[$1>>0]=0&255;HEAP8[$1+1>>0]=(0>>8)&255;HEAP8[$1+2>>0]=(0>>16)&255;HEAP8[$1+3>>0]=0>>24; //@line 239 "/checkout/src/libcore/ptr.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr13drop_in_place17hc21b8e7c714aedc6E_llvm_2B27B54C($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $1 = ($0|0)==(0|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 if ($1) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 $2 = ((($arg0)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $3 = HEAP32[$2>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $4 = HEAP32[$3>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 __THREW__ = 0;
 invoke_vi($4|0,($0|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  $16 = HEAP32[$arg0>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $17 = HEAP32[$2>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  __ZN5alloc4heap8box_free17hfd08cb36776ae052E_llvm_2B27B54C($16,$17); //@line 59 "/checkout/src/libcore/ptr.rs"
  ___resumeException($14|0);
  // unreachable;
 }
 $7 = HEAP32[$2>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $8 = ((($7)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $9 = HEAP32[$8>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
 $10 = ($9|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
 if ($10) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 $11 = HEAP32[$arg0>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $12 = ((($7)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $13 = HEAP32[$12>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
 ___rust_dealloc($11,$9,$13); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN5alloc4heap8box_free17hfd08cb36776ae052E_llvm_2B27B54C($ptr$0,$ptr$1) {
 $ptr$0 = $ptr$0|0;
 $ptr$1 = $ptr$1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ptr$1)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $1 = HEAP32[$0>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
 $2 = ($1|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
 if ($2) {
  return; //@line 265 "/checkout/src/liballoc/heap.rs"
 }
 $3 = ((($ptr$1)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $4 = HEAP32[$3>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
 ___rust_dealloc($ptr$0,$1,$4); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 265 "/checkout/src/liballoc/heap.rs"
}
function __ZN4core3ptr13drop_in_place17hc7d659014c0d680dE_llvm_2B27B54C($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($arg0)) + 4|0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $1 = HEAP32[$0>>2]|0; //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $2 = ($1|0)==(0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 if ($2) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 $3 = HEAP32[$arg0>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 ___rust_dealloc($3,$1,1); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN68__LT_std__thread__local__AccessError_u20_as_u20_core__fmt__Debug_GT_3fmt17hc412ba76f953a149E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, $_4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_4 = sp;
 __ZN4core3fmt9Formatter12debug_struct17h2d24fc5dad9395cdE($_4,$f,21270,11); //@line 249 "/checkout/src/libstd/thread/local.rs"
 $0 = (__ZN4core3fmt8builders11DebugStruct6finish17h63c8c54de379106dE($_4)|0); //@line 249 "/checkout/src/libstd/thread/local.rs"
 STACKTOP = sp;return ($0|0); //@line 250 "/checkout/src/libstd/thread/local.rs"
}
function __ZN46__LT_std__thread__local__LocalKey_LT_T_GT__GT_4with17h2bedd286c0eac228E($0,$self,$f$0,$f$1) {
 $0 = $0|0;
 $self = $self|0;
 $f$0 = $f$0|0;
 $f$1 = $f$1|0;
 var $$cast$i$i$i = 0, $$pre$phi26$ph$i$iZ2D = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$i$i$i = 0, $_15$i$i = 0, $_16$i = 0, $_17$i$i = 0, $_19$i$i = 0, $_20$0$i = 0, $_4$i$i$i = 0, $borrowed$i$i = 0, $cond$i$i$i$i = 0, $personalityslot$sroa$0$0$i$i = 0, $personalityslot$sroa$8$0$i$i = 0, $switch$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $_4$i$i$i = sp + 72|0;
 $_19$i$i = sp + 48|0;
 $_17$i$i = sp + 40|0;
 $_15$i$i = sp + 16|0;
 $borrowed$i$i = sp + 8|0;
 $_16$i = sp;
 $1 = HEAP32[$self>>2]|0; //@line 374 "/checkout/src/libstd/thread/local.rs"
 $2 = (FUNCTION_TABLE_i[$1 & 511]()|0); //@line 374 "/checkout/src/libstd/thread/local.rs"
 $3 = ($2|0)==(0|0); //@line 374 "/checkout/src/libstd/thread/local.rs"
 if ($3) {
  __ZN4core6result13unwrap_failed17h6c499c654b178840E(21076,57); //@line 809 "/checkout/src/libcore/result.rs"
  // unreachable;
 }
 $4 = HEAP32[$2>>2]|0; //@line 378 "/checkout/src/libstd/thread/local.rs"
 $switch$i = ($4|0)==(1); //@line 378 "/checkout/src/libstd/thread/local.rs"
 if ($switch$i) {
  $6 = ((($2)) + 4|0); //@line 378 "/checkout/src/libstd/thread/local.rs"
  $_20$0$i = $6;
 } else {
  $5 = (__ZN46__LT_std__thread__local__LocalKey_LT_T_GT__GT_4init17h5de2150e454e7c98E_llvm_2B27B54C($self,$2)|0); //@line 379 "/checkout/src/libstd/thread/local.rs"
  $_20$0$i = $5;
 }
 $7 = HEAP32[$_20$0$i>>2]|0; //@line 240 "/checkout/src/libcore/cell.rs"
 $cond$i$i$i$i = ($7|0)==(0); //@line 1113 "/checkout/src/libcore/cell.rs"
 do {
  if ($cond$i$i$i$i) {
   HEAP8[$_20$0$i>>0]=-1&255;HEAP8[$_20$0$i+1>>0]=(-1>>8)&255;HEAP8[$_20$0$i+2>>0]=(-1>>16)&255;HEAP8[$_20$0$i+3>>0]=-1>>24; //@line 239 "/checkout/src/libcore/ptr.rs"
   $$cast$i$i$i = $_20$0$i; //@line 802 "/checkout/src/libcore/cell.rs"
   $8 = ((($_20$0$i)) + 4|0); //@line 803 "/checkout/src/libcore/cell.rs"
   $9 = $8; //@line 807 "/checkout/src/libcore/cell.rs"
   HEAP32[$borrowed$i$i>>2] = $9; //@line 680 "/checkout/src/libstd/io/stdio.rs"
   $10 = ((($borrowed$i$i)) + 4|0); //@line 680 "/checkout/src/libstd/io/stdio.rs"
   HEAP32[$10>>2] = $$cast$i$i$i; //@line 680 "/checkout/src/libstd/io/stdio.rs"
   $11 = HEAP32[$8>>2]|0; //@line 267 "/checkout/src/libcore/option.rs"
   $12 = ($11|0)==(0|0); //@line 267 "/checkout/src/libcore/option.rs"
   $_0$0$i$i$i = $12 ? 0 : $8; //@line 267 "/checkout/src/libcore/option.rs"
   if ($12) {
    HEAP8[$_20$0$i>>0]=0&255;HEAP8[$_20$0$i+1>>0]=(0>>8)&255;HEAP8[$_20$0$i+2>>0]=(0>>16)&255;HEAP8[$_20$0$i+3>>0]=0>>24; //@line 239 "/checkout/src/libcore/ptr.rs"
    $$pre$phi26$ph$i$iZ2D = $borrowed$i$i;
    label = 15;
    break;
   }
   ;HEAP32[$_15$i$i>>2]=HEAP32[$f$0>>2]|0;HEAP32[$_15$i$i+4>>2]=HEAP32[$f$0+4>>2]|0;HEAP32[$_15$i$i+8>>2]=HEAP32[$f$0+8>>2]|0;HEAP32[$_15$i$i+12>>2]=HEAP32[$f$0+12>>2]|0;HEAP32[$_15$i$i+16>>2]=HEAP32[$f$0+16>>2]|0;HEAP32[$_15$i$i+20>>2]=HEAP32[$f$0+20>>2]|0; //@line 682 "/checkout/src/libstd/io/stdio.rs"
   $13 = HEAP32[$_0$0$i$i$i>>2]|0; //@line 130 "/checkout/src/libstd/io/impls.rs"
   $14 = ((($_0$0$i$i$i)) + 4|0); //@line 130 "/checkout/src/libstd/io/impls.rs"
   $15 = HEAP32[$14>>2]|0; //@line 130 "/checkout/src/libstd/io/impls.rs"
   ;HEAP32[$_4$i$i$i>>2]=HEAP32[$_15$i$i>>2]|0;HEAP32[$_4$i$i$i+4>>2]=HEAP32[$_15$i$i+4>>2]|0;HEAP32[$_4$i$i$i+8>>2]=HEAP32[$_15$i$i+8>>2]|0;HEAP32[$_4$i$i$i+12>>2]=HEAP32[$_15$i$i+12>>2]|0;HEAP32[$_4$i$i$i+16>>2]=HEAP32[$_15$i$i+16>>2]|0;HEAP32[$_4$i$i$i+20>>2]=HEAP32[$_15$i$i+20>>2]|0; //@line 130 "/checkout/src/libstd/io/impls.rs"
   $16 = ((($15)) + 24|0); //@line 130 "/checkout/src/libstd/io/impls.rs"
   $17 = HEAP32[$16>>2]|0; //@line 130 "/checkout/src/libstd/io/impls.rs"
   __THREW__ = 0;
   invoke_viii($17|0,($_16$i|0),($13|0),($_4$i$i$i|0)); //@line 130 "/checkout/src/libstd/io/impls.rs"
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   if (!($19)) {
    HEAP8[$_20$0$i>>0]=0&255;HEAP8[$_20$0$i+1>>0]=(0>>8)&255;HEAP8[$_20$0$i+2>>0]=(0>>16)&255;HEAP8[$_20$0$i+3>>0]=0>>24; //@line 239 "/checkout/src/libcore/ptr.rs"
    break;
   }
   $27 = ___cxa_find_matching_catch_2()|0;
   $28 = tempRet0;
   __ZN4core3ptr13drop_in_place17hadaa2aaeb9dfa958E_llvm_2B27B54C($borrowed$i$i); //@line 684 "/checkout/src/libstd/io/stdio.rs"
   $personalityslot$sroa$0$0$i$i = $27;$personalityslot$sroa$8$0$i$i = $28;
   ___resumeException($personalityslot$sroa$0$0$i$i|0);
   // unreachable;
  } else {
   $$pre$phi26$ph$i$iZ2D = $borrowed$i$i;
   label = 15;
  }
 } while(0);
 if ((label|0) == 15) {
  $23 = HEAP32[$f$1>>2]|0; //@line 685 "/checkout/src/libstd/io/stdio.rs"
  $24 = (FUNCTION_TABLE_i[$23 & 511]()|0); //@line 685 "/checkout/src/libstd/io/stdio.rs"
  HEAP32[$_17$i$i>>2] = $24; //@line 685 "/checkout/src/libstd/io/stdio.rs"
  ;HEAP32[$_19$i$i>>2]=HEAP32[$f$0>>2]|0;HEAP32[$_19$i$i+4>>2]=HEAP32[$f$0+4>>2]|0;HEAP32[$_19$i$i+8>>2]=HEAP32[$f$0+8>>2]|0;HEAP32[$_19$i$i+12>>2]=HEAP32[$f$0+12>>2]|0;HEAP32[$_19$i$i+16>>2]=HEAP32[$f$0+16>>2]|0;HEAP32[$_19$i$i+20>>2]=HEAP32[$f$0+20>>2]|0; //@line 685 "/checkout/src/libstd/io/stdio.rs"
  __THREW__ = 0;
  invoke_viii(403,($_16$i|0),($_17$i$i|0),($_19$i$i|0)); //@line 685 "/checkout/src/libstd/io/stdio.rs"
  $25 = __THREW__; __THREW__ = 0;
  $26 = $25&1;
  if ($26) {
   $29 = ___cxa_find_matching_catch_2()|0;
   $30 = tempRet0;
   __ZN4core3ptr13drop_in_place17h5c6384c85e7ed1adE($_17$i$i); //@line 686 "/checkout/src/libstd/io/stdio.rs"
   $personalityslot$sroa$0$0$i$i = $29;$personalityslot$sroa$8$0$i$i = $30;
   ___resumeException($personalityslot$sroa$0$0$i$i|0);
   // unreachable;
  }
  $20 = HEAP32[$_17$i$i>>2]|0; //@line 2540 "/checkout/src/libcore/ptr.rs"
  $21 = HEAP32[$20>>2]|0;HEAP32[$20>>2] = (($21-1)|0); //@line 1529 "/checkout/src/libcore/sync/atomic.rs"
  $22 = ($21|0)==(1); //@line 933 "/checkout/src/liballoc/arc.rs"
  if ($22) {
   /* fence */; //@line 1706 "/checkout/src/libcore/sync/atomic.rs"
   __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17hcb148d3fb287149bE($_17$i$i); //@line 968 "/checkout/src/liballoc/arc.rs"
  }
 }
 $31 = $_16$i; //@line 377 "/checkout/src/libstd/thread/local.rs"
 $32 = $31; //@line 377 "/checkout/src/libstd/thread/local.rs"
 $33 = HEAP32[$32>>2]|0; //@line 377 "/checkout/src/libstd/thread/local.rs"
 $34 = (($31) + 4)|0; //@line 377 "/checkout/src/libstd/thread/local.rs"
 $35 = $34; //@line 377 "/checkout/src/libstd/thread/local.rs"
 $36 = HEAP32[$35>>2]|0; //@line 377 "/checkout/src/libstd/thread/local.rs"
 $37 = $33&255; //@line 377 "/checkout/src/libstd/thread/local.rs"
 $38 = ($37<<24>>24)==(4); //@line 808 "/checkout/src/libcore/result.rs"
 if ($38) {
  __ZN4core6result13unwrap_failed17h6c499c654b178840E(21076,57); //@line 809 "/checkout/src/libcore/result.rs"
  // unreachable;
 } else {
  $39 = $0; //@line 808 "/checkout/src/libcore/result.rs"
  $40 = $39; //@line 808 "/checkout/src/libcore/result.rs"
  HEAP32[$40>>2] = $33; //@line 808 "/checkout/src/libcore/result.rs"
  $41 = (($39) + 4)|0; //@line 808 "/checkout/src/libcore/result.rs"
  $42 = $41; //@line 808 "/checkout/src/libcore/result.rs"
  HEAP32[$42>>2] = $36; //@line 808 "/checkout/src/libcore/result.rs"
  STACKTOP = sp;return; //@line 290 "/checkout/src/libstd/thread/local.rs"
 }
}
function __ZN46__LT_std__thread__local__LocalKey_LT_T_GT__GT_4init17h5de2150e454e7c98E_llvm_2B27B54C($self,$slot) {
 $self = $self|0;
 $slot = $slot|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_11$sroa$0$0$copyload = 0;
 var $_11$sroa$4$0$$sroa_idx = 0, $_11$sroa$4$0$copyload = 0, $_11$sroa$5$0$$sroa_idx = 0, $_11$sroa$5$0$copyload = 0, $cond$i = 0, $not$switch$i = 0, $or$cond = 0, $t1$i$i$i$i$sroa$0$0$copyload = 0, $t1$i$i$i$i$sroa$4$0$$sroa_idx28 = 0, $t1$i$i$i$i$sroa$5$0$$sroa_idx30 = 0, $t1$i$i$i$i$sroa$5$0$copyload = 0, $t1$i$i$i$i$sroa$6$0$$sroa_idx32 = 0, $t1$i$i$i$i$sroa$6$0$copyload = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $value = sp;
 $0 = ((($self)) + 4|0); //@line 295 "/checkout/src/libstd/thread/local.rs"
 $1 = HEAP32[$0>>2]|0; //@line 295 "/checkout/src/libstd/thread/local.rs"
 FUNCTION_TABLE_vi[$1 & 511]($value); //@line 295 "/checkout/src/libstd/thread/local.rs"
 $_11$sroa$0$0$copyload = HEAP32[$value>>2]|0; //@line 310 "/checkout/src/libstd/thread/local.rs"
 $_11$sroa$4$0$$sroa_idx = ((($value)) + 4|0); //@line 310 "/checkout/src/libstd/thread/local.rs"
 $_11$sroa$4$0$copyload = HEAP32[$_11$sroa$4$0$$sroa_idx>>2]|0; //@line 310 "/checkout/src/libstd/thread/local.rs"
 $_11$sroa$5$0$$sroa_idx = ((($value)) + 8|0); //@line 310 "/checkout/src/libstd/thread/local.rs"
 $_11$sroa$5$0$copyload = HEAP32[$_11$sroa$5$0$$sroa_idx>>2]|0; //@line 310 "/checkout/src/libstd/thread/local.rs"
 $t1$i$i$i$i$sroa$0$0$copyload = HEAPU8[$slot>>0]|(HEAPU8[$slot+1>>0]<<8)|(HEAPU8[$slot+2>>0]<<16)|(HEAPU8[$slot+3>>0]<<24); //@line 238 "/checkout/src/libcore/ptr.rs"
 $t1$i$i$i$i$sroa$4$0$$sroa_idx28 = ((($slot)) + 4|0); //@line 238 "/checkout/src/libcore/ptr.rs"
 $t1$i$i$i$i$sroa$5$0$$sroa_idx30 = ((($slot)) + 8|0); //@line 238 "/checkout/src/libcore/ptr.rs"
 $t1$i$i$i$i$sroa$5$0$copyload = HEAPU8[$t1$i$i$i$i$sroa$5$0$$sroa_idx30>>0]|(HEAPU8[$t1$i$i$i$i$sroa$5$0$$sroa_idx30+1>>0]<<8)|(HEAPU8[$t1$i$i$i$i$sroa$5$0$$sroa_idx30+2>>0]<<16)|(HEAPU8[$t1$i$i$i$i$sroa$5$0$$sroa_idx30+3>>0]<<24); //@line 238 "/checkout/src/libcore/ptr.rs"
 $t1$i$i$i$i$sroa$6$0$$sroa_idx32 = ((($slot)) + 12|0); //@line 238 "/checkout/src/libcore/ptr.rs"
 $t1$i$i$i$i$sroa$6$0$copyload = HEAPU8[$t1$i$i$i$i$sroa$6$0$$sroa_idx32>>0]|(HEAPU8[$t1$i$i$i$i$sroa$6$0$$sroa_idx32+1>>0]<<8)|(HEAPU8[$t1$i$i$i$i$sroa$6$0$$sroa_idx32+2>>0]<<16)|(HEAPU8[$t1$i$i$i$i$sroa$6$0$$sroa_idx32+3>>0]<<24); //@line 238 "/checkout/src/libcore/ptr.rs"
 HEAP8[$slot>>0]=1&255;HEAP8[$slot+1>>0]=(1>>8)&255;HEAP8[$slot+2>>0]=(1>>16)&255;HEAP8[$slot+3>>0]=1>>24; //@line 239 "/checkout/src/libcore/ptr.rs"
 HEAP8[$t1$i$i$i$i$sroa$4$0$$sroa_idx28>>0]=$_11$sroa$0$0$copyload&255;HEAP8[$t1$i$i$i$i$sroa$4$0$$sroa_idx28+1>>0]=($_11$sroa$0$0$copyload>>8)&255;HEAP8[$t1$i$i$i$i$sroa$4$0$$sroa_idx28+2>>0]=($_11$sroa$0$0$copyload>>16)&255;HEAP8[$t1$i$i$i$i$sroa$4$0$$sroa_idx28+3>>0]=$_11$sroa$0$0$copyload>>24; //@line 239 "/checkout/src/libcore/ptr.rs"
 HEAP8[$t1$i$i$i$i$sroa$5$0$$sroa_idx30>>0]=$_11$sroa$4$0$copyload&255;HEAP8[$t1$i$i$i$i$sroa$5$0$$sroa_idx30+1>>0]=($_11$sroa$4$0$copyload>>8)&255;HEAP8[$t1$i$i$i$i$sroa$5$0$$sroa_idx30+2>>0]=($_11$sroa$4$0$copyload>>16)&255;HEAP8[$t1$i$i$i$i$sroa$5$0$$sroa_idx30+3>>0]=$_11$sroa$4$0$copyload>>24; //@line 239 "/checkout/src/libcore/ptr.rs"
 HEAP8[$t1$i$i$i$i$sroa$6$0$$sroa_idx32>>0]=$_11$sroa$5$0$copyload&255;HEAP8[$t1$i$i$i$i$sroa$6$0$$sroa_idx32+1>>0]=($_11$sroa$5$0$copyload>>8)&255;HEAP8[$t1$i$i$i$i$sroa$6$0$$sroa_idx32+2>>0]=($_11$sroa$5$0$copyload>>16)&255;HEAP8[$t1$i$i$i$i$sroa$6$0$$sroa_idx32+3>>0]=$_11$sroa$5$0$copyload>>24; //@line 239 "/checkout/src/libcore/ptr.rs"
 $cond$i = ($t1$i$i$i$i$sroa$0$0$copyload|0)==(0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $2 = ($t1$i$i$i$i$sroa$5$0$copyload|0)==(0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $or$cond = $cond$i | $2; //@line 59 "/checkout/src/libcore/ptr.rs"
 if (!($or$cond)) {
  $3 = $t1$i$i$i$i$sroa$5$0$copyload; //@line 59 "/checkout/src/libcore/ptr.rs"
  $4 = $t1$i$i$i$i$sroa$6$0$copyload; //@line 59 "/checkout/src/libcore/ptr.rs"
  $5 = HEAP32[$4>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  __THREW__ = 0;
  invoke_vi($5|0,($3|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   $15 = ___cxa_find_matching_catch_2()|0;
   $16 = tempRet0;
   $17 = $t1$i$i$i$i$sroa$6$0$copyload; //@line 59 "/checkout/src/libcore/ptr.rs"
   __ZN5alloc4heap8box_free17hfd08cb36776ae052E_llvm_2B27B54C($3,$17); //@line 59 "/checkout/src/libcore/ptr.rs"
   ___resumeException($15|0);
   // unreachable;
  }
  $8 = $t1$i$i$i$i$sroa$6$0$copyload; //@line 59 "/checkout/src/libcore/ptr.rs"
  $9 = ((($8)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
  $10 = HEAP32[$9>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
  $11 = ($10|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
  if (!($11)) {
   $12 = $t1$i$i$i$i$sroa$5$0$copyload; //@line 59 "/checkout/src/libcore/ptr.rs"
   $13 = ((($8)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
   $14 = HEAP32[$13>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
   ___rust_dealloc($12,$10,$14); //@line 104 "/checkout/src/liballoc/heap.rs"
  }
 }
 $18 = HEAP32[$slot>>2]|0; //@line 246 "/checkout/src/libcore/option.rs"
 $not$switch$i = ($18|0)==(1); //@line 334 "/checkout/src/libcore/option.rs"
 if ($not$switch$i) {
  STACKTOP = sp;return ($t1$i$i$i$i$sroa$4$0$$sroa_idx28|0); //@line 313 "/checkout/src/libstd/thread/local.rs"
 } else {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(8000); //@line 20 "/checkout/src/libcore/macros.rs"
  // unreachable;
 }
 return (0)|0;
}
function __ZN4core3ptr13drop_in_place17h5c6384c85e7ed1adE($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0; //@line 2540 "/checkout/src/libcore/ptr.rs"
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1-1)|0); //@line 1529 "/checkout/src/libcore/sync/atomic.rs"
 $2 = ($1|0)==(1); //@line 933 "/checkout/src/liballoc/arc.rs"
 if (!($2)) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 /* fence */; //@line 1706 "/checkout/src/libcore/sync/atomic.rs"
 __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17hcb148d3fb287149bE($arg0); //@line 968 "/checkout/src/liballoc/arc.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN46__LT_std__thread__local__LocalKey_LT_T_GT__GT_4with17h838833ec5cedc139E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $$fca$1$gep$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $7 = 0, $8 = 0, $9 = 0, $_17$i = 0, $_3$i$i = 0, $_4$sroa$4$0$$sroa_idx7$i$i = 0, $_5 = 0, $_7$i$i = 0, $_9$i$i = 0, $cond$i$i$i$i$i = 0, $personalityslot$sroa$0$020$i = 0, $personalityslot$sroa$6$021$i = 0, $switch$i$i$i = 0, $t1$i$i$i$i$i$i = 0, $value$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $t1$i$i$i$i$i$i = sp + 32|0;
 $_7$i$i = sp + 104|0;
 $value$i$i = sp + 88|0;
 $_9$i$i = sp + 80|0;
 $_3$i$i = sp + 16|0;
 $_17$i = sp;
 $_5 = sp + 64|0;
 ;HEAP32[$_5>>2]=HEAP32[$f>>2]|0;HEAP32[$_5+4>>2]=HEAP32[$f+4>>2]|0;HEAP32[$_5+8>>2]=HEAP32[$f+8>>2]|0; //@line 288 "/checkout/src/libstd/thread/local.rs"
 $0 = HEAP32[$self>>2]|0; //@line 374 "/checkout/src/libstd/thread/local.rs"
 __THREW__ = 0;
 $1 = (invoke_i($0|0)|0); //@line 374 "/checkout/src/libstd/thread/local.rs"
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $56 = ___cxa_find_matching_catch_2()|0;
  $57 = tempRet0;
  __ZN4core3ptr13drop_in_place17ha7c96f507665c07cE($_5); //@line 382 "/checkout/src/libstd/thread/local.rs"
  $personalityslot$sroa$0$020$i = $56;$personalityslot$sroa$6$021$i = $57;
  ___resumeException($personalityslot$sroa$0$020$i|0);
  // unreachable;
 }
 $4 = ($1|0)==(0|0); //@line 374 "/checkout/src/libstd/thread/local.rs"
 if ($4) {
  $5 = ((($_5)) + 8|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  $6 = HEAP32[$5>>2]|0; //@line 2540 "/checkout/src/libcore/ptr.rs"
  $7 = HEAP32[$6>>2]|0;HEAP32[$6>>2] = (($7-1)|0); //@line 1529 "/checkout/src/libcore/sync/atomic.rs"
  $8 = ($7|0)==(1); //@line 933 "/checkout/src/liballoc/arc.rs"
  if ($8) {
   /* fence */; //@line 1706 "/checkout/src/libcore/sync/atomic.rs"
   __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h6b99c066bc6eaea1E($5); //@line 968 "/checkout/src/liballoc/arc.rs"
   __ZN4core6result13unwrap_failed17h6c499c654b178840E(21076,57); //@line 809 "/checkout/src/libcore/result.rs"
   // unreachable;
  } else {
   __ZN4core6result13unwrap_failed17h6c499c654b178840E(21076,57); //@line 809 "/checkout/src/libcore/result.rs"
   // unreachable;
  }
 }
 ;HEAP32[$_17$i>>2]=HEAP32[$_5>>2]|0;HEAP32[$_17$i+4>>2]=HEAP32[$_5+4>>2]|0;HEAP32[$_17$i+8>>2]=HEAP32[$_5+8>>2]|0; //@line 377 "/checkout/src/libstd/thread/local.rs"
 $9 = ((($1)) + 4|0); //@line 378 "/checkout/src/libstd/thread/local.rs"
 $10 = HEAP32[$9>>2]|0; //@line 378 "/checkout/src/libstd/thread/local.rs"
 $11 = ($10|0)==(3); //@line 378 "/checkout/src/libstd/thread/local.rs"
 L13: do {
  if ($11) {
   $12 = ((($self)) + 4|0); //@line 295 "/checkout/src/libstd/thread/local.rs"
   $13 = HEAP32[$12>>2]|0; //@line 295 "/checkout/src/libstd/thread/local.rs"
   __THREW__ = 0;
   invoke_vi($13|0,($value$i$i|0)); //@line 295 "/checkout/src/libstd/thread/local.rs"
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   do {
    if (!($15)) {
     ;HEAP32[$t1$i$i$i$i$i$i>>2]=HEAP32[$1>>2]|0;HEAP32[$t1$i$i$i$i$i$i+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$t1$i$i$i$i$i$i+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$t1$i$i$i$i$i$i+12>>2]=HEAP32[$1+12>>2]|0; //@line 238 "/checkout/src/libcore/ptr.rs"
     ;HEAP32[$1>>2]=HEAP32[$value$i$i>>2]|0;HEAP32[$1+4>>2]=HEAP32[$value$i$i+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$value$i$i+8>>2]|0;HEAP32[$1+12>>2]=HEAP32[$value$i$i+12>>2]|0; //@line 239 "/checkout/src/libcore/ptr.rs"
     ;HEAP32[$_7$i$i>>2]=HEAP32[$t1$i$i$i$i$i$i>>2]|0;HEAP32[$_7$i$i+4>>2]=HEAP32[$t1$i$i$i$i$i$i+4>>2]|0;HEAP32[$_7$i$i+8>>2]=HEAP32[$t1$i$i$i$i$i$i+8>>2]|0;HEAP32[$_7$i$i+12>>2]=HEAP32[$t1$i$i$i$i$i$i+12>>2]|0; //@line 240 "/checkout/src/libcore/ptr.rs"
     $16 = ((($_7$i$i)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
     $17 = HEAP32[$16>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
     $18 = $17 & 2; //@line 59 "/checkout/src/libcore/ptr.rs"
     $switch$i$i$i = ($18|0)==(0); //@line 59 "/checkout/src/libcore/ptr.rs"
     if ($switch$i$i$i) {
      $19 = ((($_7$i$i)) + 12|0); //@line 59 "/checkout/src/libcore/ptr.rs"
      $20 = HEAP32[$19>>2]|0; //@line 2540 "/checkout/src/libcore/ptr.rs"
      $21 = HEAP32[$20>>2]|0;HEAP32[$20>>2] = (($21-1)|0); //@line 1529 "/checkout/src/libcore/sync/atomic.rs"
      $22 = ($21|0)==(1); //@line 933 "/checkout/src/liballoc/arc.rs"
      if ($22) {
       /* fence */; //@line 1706 "/checkout/src/libcore/sync/atomic.rs"
       __THREW__ = 0;
       invoke_vi(395,($19|0)); //@line 968 "/checkout/src/liballoc/arc.rs"
       $23 = __THREW__; __THREW__ = 0;
       $24 = $23&1;
       if ($24) {
        break;
       }
      }
     }
     $25 = HEAP32[$9>>2]|0; //@line 246 "/checkout/src/libcore/option.rs"
     $26 = ($25|0)==(3); //@line 246 "/checkout/src/libcore/option.rs"
     if ($26) {
      __THREW__ = 0;
      invoke_vi(297,(8000|0)); //@line 20 "/checkout/src/libcore/macros.rs"
      $27 = __THREW__; __THREW__ = 0;
      break;
     } else {
      break L13;
     }
    }
   } while(0);
   $58 = ___cxa_find_matching_catch_2()|0;
   $59 = tempRet0;
   __ZN4core3ptr13drop_in_place17ha7c96f507665c07cE($_17$i); //@line 380 "/checkout/src/libstd/thread/local.rs"
   $personalityslot$sroa$0$020$i = $58;$personalityslot$sroa$6$021$i = $59;
   ___resumeException($personalityslot$sroa$0$020$i|0);
   // unreachable;
  }
 } while(0);
 $28 = $_17$i; //@line 48 "/checkout/src/libstd/sys_common/thread_info.rs"
 $29 = $28; //@line 48 "/checkout/src/libstd/sys_common/thread_info.rs"
 $30 = HEAP32[$29>>2]|0; //@line 48 "/checkout/src/libstd/sys_common/thread_info.rs"
 $31 = (($28) + 4)|0; //@line 48 "/checkout/src/libstd/sys_common/thread_info.rs"
 $32 = $31; //@line 48 "/checkout/src/libstd/sys_common/thread_info.rs"
 $33 = HEAP32[$32>>2]|0; //@line 48 "/checkout/src/libstd/sys_common/thread_info.rs"
 $34 = ((($_17$i)) + 8|0); //@line 49 "/checkout/src/libstd/sys_common/thread_info.rs"
 $35 = HEAP32[$34>>2]|0; //@line 49 "/checkout/src/libstd/sys_common/thread_info.rs"
 $36 = $_3$i$i; //@line 47 "/checkout/src/libstd/sys_common/thread_info.rs"
 $37 = $36; //@line 47 "/checkout/src/libstd/sys_common/thread_info.rs"
 HEAP32[$37>>2] = $30; //@line 47 "/checkout/src/libstd/sys_common/thread_info.rs"
 $38 = (($36) + 4)|0; //@line 47 "/checkout/src/libstd/sys_common/thread_info.rs"
 $39 = $38; //@line 47 "/checkout/src/libstd/sys_common/thread_info.rs"
 HEAP32[$39>>2] = $33; //@line 47 "/checkout/src/libstd/sys_common/thread_info.rs"
 $_4$sroa$4$0$$sroa_idx7$i$i = ((($_3$i$i)) + 8|0); //@line 47 "/checkout/src/libstd/sys_common/thread_info.rs"
 HEAP32[$_4$sroa$4$0$$sroa_idx7$i$i>>2] = $35; //@line 47 "/checkout/src/libstd/sys_common/thread_info.rs"
 $40 = HEAP32[$1>>2]|0; //@line 240 "/checkout/src/libcore/cell.rs"
 $cond$i$i$i$i$i = ($40|0)==(0); //@line 1113 "/checkout/src/libcore/cell.rs"
 if (!($cond$i$i$i$i$i)) {
  __THREW__ = 0;
  invoke_vii(404,(20919|0),16); //@line 809 "/checkout/src/libcore/result.rs"
  $43 = __THREW__; __THREW__ = 0;
  $44 = ___cxa_find_matching_catch_2()|0;
  $45 = tempRet0;
  __THREW__ = 0;
  invoke_vi(405,($_3$i$i|0)); //@line 50 "/checkout/src/libstd/sys_common/thread_info.rs"
  $46 = __THREW__; __THREW__ = 0;
  $47 = $46&1;
  if (!($47)) {
   $personalityslot$sroa$0$020$i = $44;$personalityslot$sroa$6$021$i = $45;
   ___resumeException($personalityslot$sroa$0$020$i|0);
   // unreachable;
  }
  $60 = ___cxa_find_matching_catch_2()|0;
  $61 = tempRet0;
  $personalityslot$sroa$0$020$i = $60;$personalityslot$sroa$6$021$i = $61;
  ___resumeException($personalityslot$sroa$0$020$i|0);
  // unreachable;
 }
 HEAP32[$1>>2] = -1; //@line 239 "/checkout/src/libcore/ptr.rs"
 HEAP32[$_9$i$i>>2] = $9; //@line 47 "/checkout/src/libstd/sys_common/thread_info.rs"
 $$fca$1$gep$i$i = ((($_9$i$i)) + 4|0); //@line 47 "/checkout/src/libstd/sys_common/thread_info.rs"
 HEAP32[$$fca$1$gep$i$i>>2] = $1; //@line 47 "/checkout/src/libstd/sys_common/thread_info.rs"
 $41 = HEAP32[$9>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $42 = ($41|0)==(2); //@line 59 "/checkout/src/libcore/ptr.rs"
 if ($42) {
  ;HEAP32[$9>>2]=HEAP32[$_3$i$i>>2]|0;HEAP32[$9+4>>2]=HEAP32[$_3$i$i+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$_3$i$i+8>>2]|0; //@line 47 "/checkout/src/libstd/sys_common/thread_info.rs"
  $62 = HEAP32[$$fca$1$gep$i$i>>2]|0; //@line 1105 "/checkout/src/libcore/cell.rs"
  HEAP8[$62>>0]=0&255;HEAP8[$62+1>>0]=(0>>8)&255;HEAP8[$62+2>>0]=(0>>16)&255;HEAP8[$62+3>>0]=0>>24; //@line 239 "/checkout/src/libcore/ptr.rs"
  STACKTOP = sp;return; //@line 290 "/checkout/src/libstd/thread/local.rs"
 }
 $48 = ((($1)) + 12|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $49 = HEAP32[$48>>2]|0; //@line 2540 "/checkout/src/libcore/ptr.rs"
 $50 = HEAP32[$49>>2]|0;HEAP32[$49>>2] = (($50-1)|0); //@line 1529 "/checkout/src/libcore/sync/atomic.rs"
 $51 = ($50|0)==(1); //@line 933 "/checkout/src/liballoc/arc.rs"
 if (!($51)) {
  ;HEAP32[$9>>2]=HEAP32[$_3$i$i>>2]|0;HEAP32[$9+4>>2]=HEAP32[$_3$i$i+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$_3$i$i+8>>2]|0; //@line 47 "/checkout/src/libstd/sys_common/thread_info.rs"
  $62 = HEAP32[$$fca$1$gep$i$i>>2]|0; //@line 1105 "/checkout/src/libcore/cell.rs"
  HEAP8[$62>>0]=0&255;HEAP8[$62+1>>0]=(0>>8)&255;HEAP8[$62+2>>0]=(0>>16)&255;HEAP8[$62+3>>0]=0>>24; //@line 239 "/checkout/src/libcore/ptr.rs"
  STACKTOP = sp;return; //@line 290 "/checkout/src/libstd/thread/local.rs"
 }
 /* fence */; //@line 1706 "/checkout/src/libcore/sync/atomic.rs"
 __THREW__ = 0;
 invoke_vi(395,($48|0)); //@line 968 "/checkout/src/liballoc/arc.rs"
 $52 = __THREW__; __THREW__ = 0;
 $53 = $52&1;
 if (!($53)) {
  ;HEAP32[$9>>2]=HEAP32[$_3$i$i>>2]|0;HEAP32[$9+4>>2]=HEAP32[$_3$i$i+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$_3$i$i+8>>2]|0; //@line 47 "/checkout/src/libstd/sys_common/thread_info.rs"
  $62 = HEAP32[$$fca$1$gep$i$i>>2]|0; //@line 1105 "/checkout/src/libcore/cell.rs"
  HEAP8[$62>>0]=0&255;HEAP8[$62+1>>0]=(0>>8)&255;HEAP8[$62+2>>0]=(0>>16)&255;HEAP8[$62+3>>0]=0>>24; //@line 239 "/checkout/src/libcore/ptr.rs"
  STACKTOP = sp;return; //@line 290 "/checkout/src/libstd/thread/local.rs"
 }
 $54 = ___cxa_find_matching_catch_2()|0;
 $55 = tempRet0;
 ;HEAP32[$9>>2]=HEAP32[$_3$i$i>>2]|0;HEAP32[$9+4>>2]=HEAP32[$_3$i$i+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$_3$i$i+8>>2]|0; //@line 47 "/checkout/src/libstd/sys_common/thread_info.rs"
 __ZN4core3ptr13drop_in_place17h09cbbf19971ae399E($_9$i$i); //@line 50 "/checkout/src/libstd/sys_common/thread_info.rs"
 $personalityslot$sroa$0$020$i = $54;$personalityslot$sroa$6$021$i = $55;
 ___resumeException($personalityslot$sroa$0$020$i|0);
 // unreachable;
}
function __ZN4core3ptr13drop_in_place17h09cbbf19971ae399E($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($arg0)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $1 = HEAP32[$0>>2]|0; //@line 1105 "/checkout/src/libcore/cell.rs"
 HEAP8[$1>>0]=0&255;HEAP8[$1+1>>0]=(0>>8)&255;HEAP8[$1+2>>0]=(0>>16)&255;HEAP8[$1+3>>0]=0>>24; //@line 239 "/checkout/src/libcore/ptr.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr13drop_in_place17h2c0fd746b18e28b4E($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $1 = ($0|0)==(2); //@line 59 "/checkout/src/libcore/ptr.rs"
 if ($1) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 $2 = ((($arg0)) + 8|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $3 = HEAP32[$2>>2]|0; //@line 2540 "/checkout/src/libcore/ptr.rs"
 $4 = HEAP32[$3>>2]|0;HEAP32[$3>>2] = (($4-1)|0); //@line 1529 "/checkout/src/libcore/sync/atomic.rs"
 $5 = ($4|0)==(1); //@line 933 "/checkout/src/liballoc/arc.rs"
 if (!($5)) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 /* fence */; //@line 1706 "/checkout/src/libcore/sync/atomic.rs"
 __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h6b99c066bc6eaea1E($2); //@line 968 "/checkout/src/liballoc/arc.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr13drop_in_place17ha7c96f507665c07cE($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($arg0)) + 8|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $1 = HEAP32[$0>>2]|0; //@line 2540 "/checkout/src/libcore/ptr.rs"
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2-1)|0); //@line 1529 "/checkout/src/libcore/sync/atomic.rs"
 $3 = ($2|0)==(1); //@line 933 "/checkout/src/liballoc/arc.rs"
 if (!($3)) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 /* fence */; //@line 1706 "/checkout/src/libcore/sync/atomic.rs"
 __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h6b99c066bc6eaea1E($0); //@line 968 "/checkout/src/liballoc/arc.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN46__LT_std__thread__local__LocalKey_LT_T_GT__GT_4with17hd9ff511b4ca0c194E($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_7$i$i = 0, $cond$i$i$i$i$i = 0, $switch$i$i$i = 0, $t1$i$i$i$i$i$i = 0, $value$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $t1$i$i$i$i$i$i = sp;
 $_7$i$i = sp + 48|0;
 $value$i$i = sp + 32|0;
 $0 = HEAP32[$self>>2]|0; //@line 374 "/checkout/src/libstd/thread/local.rs"
 $1 = (FUNCTION_TABLE_i[$0 & 511]()|0); //@line 374 "/checkout/src/libstd/thread/local.rs"
 $2 = ($1|0)==(0|0); //@line 374 "/checkout/src/libstd/thread/local.rs"
 if ($2) {
  __ZN4core6result13unwrap_failed17h6c499c654b178840E(21076,57); //@line 809 "/checkout/src/libcore/result.rs"
  // unreachable;
 }
 $3 = ((($1)) + 4|0); //@line 378 "/checkout/src/libstd/thread/local.rs"
 $4 = HEAP32[$3>>2]|0; //@line 378 "/checkout/src/libstd/thread/local.rs"
 $5 = ($4|0)==(3); //@line 378 "/checkout/src/libstd/thread/local.rs"
 do {
  if ($5) {
   $6 = ((($self)) + 4|0); //@line 295 "/checkout/src/libstd/thread/local.rs"
   $7 = HEAP32[$6>>2]|0; //@line 295 "/checkout/src/libstd/thread/local.rs"
   FUNCTION_TABLE_vi[$7 & 511]($value$i$i); //@line 295 "/checkout/src/libstd/thread/local.rs"
   ;HEAP32[$t1$i$i$i$i$i$i>>2]=HEAP32[$1>>2]|0;HEAP32[$t1$i$i$i$i$i$i+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$t1$i$i$i$i$i$i+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$t1$i$i$i$i$i$i+12>>2]=HEAP32[$1+12>>2]|0; //@line 238 "/checkout/src/libcore/ptr.rs"
   ;HEAP32[$1>>2]=HEAP32[$value$i$i>>2]|0;HEAP32[$1+4>>2]=HEAP32[$value$i$i+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$value$i$i+8>>2]|0;HEAP32[$1+12>>2]=HEAP32[$value$i$i+12>>2]|0; //@line 239 "/checkout/src/libcore/ptr.rs"
   ;HEAP32[$_7$i$i>>2]=HEAP32[$t1$i$i$i$i$i$i>>2]|0;HEAP32[$_7$i$i+4>>2]=HEAP32[$t1$i$i$i$i$i$i+4>>2]|0;HEAP32[$_7$i$i+8>>2]=HEAP32[$t1$i$i$i$i$i$i+8>>2]|0;HEAP32[$_7$i$i+12>>2]=HEAP32[$t1$i$i$i$i$i$i+12>>2]|0; //@line 240 "/checkout/src/libcore/ptr.rs"
   $8 = ((($_7$i$i)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
   $9 = HEAP32[$8>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
   $10 = $9 & 2; //@line 59 "/checkout/src/libcore/ptr.rs"
   $switch$i$i$i = ($10|0)==(0); //@line 59 "/checkout/src/libcore/ptr.rs"
   if ($switch$i$i$i) {
    $11 = ((($_7$i$i)) + 12|0); //@line 59 "/checkout/src/libcore/ptr.rs"
    $12 = HEAP32[$11>>2]|0; //@line 2540 "/checkout/src/libcore/ptr.rs"
    $13 = HEAP32[$12>>2]|0;HEAP32[$12>>2] = (($13-1)|0); //@line 1529 "/checkout/src/libcore/sync/atomic.rs"
    $14 = ($13|0)==(1); //@line 933 "/checkout/src/liballoc/arc.rs"
    if ($14) {
     /* fence */; //@line 1706 "/checkout/src/libcore/sync/atomic.rs"
     __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h6b99c066bc6eaea1E($11); //@line 968 "/checkout/src/liballoc/arc.rs"
    }
   }
   $15 = HEAP32[$3>>2]|0; //@line 246 "/checkout/src/libcore/option.rs"
   $16 = ($15|0)==(3); //@line 246 "/checkout/src/libcore/option.rs"
   if ($16) {
    __ZN4core9panicking5panic17h9fa3414033a56a4dE(8000); //@line 20 "/checkout/src/libcore/macros.rs"
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 $17 = HEAP32[$1>>2]|0; //@line 240 "/checkout/src/libcore/cell.rs"
 $cond$i$i$i$i$i = ($17|0)==(-1); //@line 948 "/checkout/src/libcore/cell.rs"
 if ($cond$i$i$i$i$i) {
  __ZN4core6result13unwrap_failed17h237618fa9b803e20E(20935,24); //@line 809 "/checkout/src/libcore/result.rs"
  // unreachable;
 }
 $18 = HEAP32[$3>>2]|0; //@line 194 "/checkout/src/libcore/option.rs"
 HEAP32[$1>>2] = $17; //@line 239 "/checkout/src/libcore/ptr.rs"
 $19 = ($18|0)==(2); //@line 215 "/checkout/src/libcore/option.rs"
 if ($19) {
  STACKTOP = sp;return; //@line 290 "/checkout/src/libstd/thread/local.rs"
 } else {
  __ZN3std9panicking11begin_panic17hc122bd4e5599889dE(21179,38,8040); //@line 46 "/checkout/src/libstd/sys_common/thread_info.rs"
  // unreachable; //@line 46 "/checkout/src/libstd/sys_common/thread_info.rs"
 }
}
function __ZN46__LT_std__thread__local__LocalKey_LT_T_GT__GT_4with17hf71f0fb8f6fc0d6cE($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $$fca$1$gep$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_20$0$i = 0, $_3$i$i = 0, $_7$i$i = 0, $cond$i$i$i$i$i = 0, $personalityslot$sroa$0$0$i$i = 0, $personalityslot$sroa$8$0$i$i = 0, $switch$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_7$i$i = sp + 8|0;
 $_3$i$i = sp;
 $0 = HEAP32[$self>>2]|0; //@line 374 "/checkout/src/libstd/thread/local.rs"
 $1 = (FUNCTION_TABLE_i[$0 & 511]()|0); //@line 374 "/checkout/src/libstd/thread/local.rs"
 $2 = ($1|0)==(0|0); //@line 374 "/checkout/src/libstd/thread/local.rs"
 if ($2) {
  __ZN4core6result13unwrap_failed17h6c499c654b178840E(21076,57); //@line 809 "/checkout/src/libcore/result.rs"
  // unreachable;
 }
 $3 = HEAP32[$1>>2]|0; //@line 378 "/checkout/src/libstd/thread/local.rs"
 $switch$i = ($3|0)==(1); //@line 378 "/checkout/src/libstd/thread/local.rs"
 if ($switch$i) {
  $5 = ((($1)) + 4|0); //@line 378 "/checkout/src/libstd/thread/local.rs"
  $_20$0$i = $5;
 } else {
  $4 = (__ZN46__LT_std__thread__local__LocalKey_LT_T_GT__GT_4init17h5de2150e454e7c98E_llvm_2B27B54C($self,$1)|0); //@line 379 "/checkout/src/libstd/thread/local.rs"
  $_20$0$i = $4;
 }
 $6 = $f; //@line 238 "/checkout/src/libcore/ptr.rs"
 $7 = $6; //@line 238 "/checkout/src/libcore/ptr.rs"
 $8 = HEAPU8[$7>>0]|(HEAPU8[$7+1>>0]<<8)|(HEAPU8[$7+2>>0]<<16)|(HEAPU8[$7+3>>0]<<24); //@line 238 "/checkout/src/libcore/ptr.rs"
 $9 = (($6) + 4)|0; //@line 238 "/checkout/src/libcore/ptr.rs"
 $10 = $9; //@line 238 "/checkout/src/libcore/ptr.rs"
 $11 = HEAPU8[$10>>0]|(HEAPU8[$10+1>>0]<<8)|(HEAPU8[$10+2>>0]<<16)|(HEAPU8[$10+3>>0]<<24); //@line 238 "/checkout/src/libcore/ptr.rs"
 HEAP8[$f>>0]=0&255;HEAP8[$f+1>>0]=(0>>8)&255;HEAP8[$f+2>>0]=(0>>16)&255;HEAP8[$f+3>>0]=0>>24; //@line 239 "/checkout/src/libcore/ptr.rs"
 $12 = $_3$i$i; //@line 691 "/checkout/src/libcore/mem.rs"
 $13 = $12; //@line 691 "/checkout/src/libcore/mem.rs"
 HEAP32[$13>>2] = $8; //@line 691 "/checkout/src/libcore/mem.rs"
 $14 = (($12) + 4)|0; //@line 691 "/checkout/src/libcore/mem.rs"
 $15 = $14; //@line 691 "/checkout/src/libcore/mem.rs"
 HEAP32[$15>>2] = $11; //@line 691 "/checkout/src/libcore/mem.rs"
 $16 = HEAP32[$_20$0$i>>2]|0; //@line 240 "/checkout/src/libcore/cell.rs"
 $cond$i$i$i$i$i = ($16|0)==(0); //@line 1113 "/checkout/src/libcore/cell.rs"
 if (!($cond$i$i$i$i$i)) {
  __THREW__ = 0;
  invoke_vii(404,(20919|0),16); //@line 809 "/checkout/src/libcore/result.rs"
  $20 = __THREW__; __THREW__ = 0;
  $21 = ___cxa_find_matching_catch_2()|0;
  $22 = tempRet0;
  __ZN4core3ptr13drop_in_place17hc21b8e7c714aedc6E_llvm_2B27B54C($_3$i$i); //@line 394 "/checkout/src/libstd/panicking.rs"
  $personalityslot$sroa$0$0$i$i = $21;$personalityslot$sroa$8$0$i$i = $22;
  ___resumeException($personalityslot$sroa$0$0$i$i|0);
  // unreachable;
 }
 HEAP8[$_20$0$i>>0]=-1&255;HEAP8[$_20$0$i+1>>0]=(-1>>8)&255;HEAP8[$_20$0$i+2>>0]=(-1>>16)&255;HEAP8[$_20$0$i+3>>0]=-1>>24; //@line 239 "/checkout/src/libcore/ptr.rs"
 $17 = ((($_20$0$i)) + 4|0); //@line 803 "/checkout/src/libcore/cell.rs"
 HEAP32[$_7$i$i>>2] = $17; //@line 394 "/checkout/src/libstd/panicking.rs"
 $$fca$1$gep$i$i = ((($_7$i$i)) + 4|0); //@line 394 "/checkout/src/libstd/panicking.rs"
 HEAP32[$$fca$1$gep$i$i>>2] = $_20$0$i; //@line 394 "/checkout/src/libstd/panicking.rs"
 $18 = HEAP32[$17>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $19 = ($18|0)==(0|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 do {
  if (!($19)) {
   $23 = ((($_20$0$i)) + 8|0); //@line 59 "/checkout/src/libcore/ptr.rs"
   $24 = HEAP32[$23>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
   $25 = HEAP32[$24>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
   __THREW__ = 0;
   invoke_vi($25|0,($18|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if ($27) {
    $35 = ___cxa_find_matching_catch_2()|0;
    $36 = tempRet0;
    $37 = HEAP32[$17>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
    $38 = HEAP32[$23>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
    __ZN5alloc4heap8box_free17hfd08cb36776ae052E_llvm_2B27B54C($37,$38); //@line 59 "/checkout/src/libcore/ptr.rs"
    $39 = $17; //@line 394 "/checkout/src/libstd/panicking.rs"
    $40 = $39; //@line 394 "/checkout/src/libstd/panicking.rs"
    HEAP32[$40>>2] = $8; //@line 394 "/checkout/src/libstd/panicking.rs"
    $41 = (($39) + 4)|0; //@line 394 "/checkout/src/libstd/panicking.rs"
    $42 = $41; //@line 394 "/checkout/src/libstd/panicking.rs"
    HEAP32[$42>>2] = $11; //@line 394 "/checkout/src/libstd/panicking.rs"
    __ZN4core3ptr13drop_in_place17hadaa2aaeb9dfa958E_llvm_2B27B54C($_7$i$i); //@line 394 "/checkout/src/libstd/panicking.rs"
    $personalityslot$sroa$0$0$i$i = $35;$personalityslot$sroa$8$0$i$i = $36;
    ___resumeException($personalityslot$sroa$0$0$i$i|0);
    // unreachable;
   } else {
    $28 = HEAP32[$23>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
    $29 = ((($28)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
    $30 = HEAP32[$29>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
    $31 = ($30|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
    if ($31) {
     break;
    }
    $32 = HEAP32[$17>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
    $33 = ((($28)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
    $34 = HEAP32[$33>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
    ___rust_dealloc($32,$30,$34); //@line 104 "/checkout/src/liballoc/heap.rs"
    break;
   }
  }
 } while(0);
 $43 = $17; //@line 394 "/checkout/src/libstd/panicking.rs"
 $44 = $43; //@line 394 "/checkout/src/libstd/panicking.rs"
 HEAP32[$44>>2] = $8; //@line 394 "/checkout/src/libstd/panicking.rs"
 $45 = (($43) + 4)|0; //@line 394 "/checkout/src/libstd/panicking.rs"
 $46 = $45; //@line 394 "/checkout/src/libstd/panicking.rs"
 HEAP32[$46>>2] = $11; //@line 394 "/checkout/src/libstd/panicking.rs"
 HEAP8[$_20$0$i>>0]=0&255;HEAP8[$_20$0$i+1>>0]=(0>>8)&255;HEAP8[$_20$0$i+2>>0]=(0>>16)&255;HEAP8[$_20$0$i+3>>0]=0>>24; //@line 239 "/checkout/src/libcore/ptr.rs"
 STACKTOP = sp;return; //@line 290 "/checkout/src/libstd/thread/local.rs"
}
function __ZN46__LT_std__thread__local__LocalKey_LT_T_GT__GT_8try_with17ha1e39309185d6fdbE($self) {
 $self = $self|0;
 var $$fca$1$gep23$i = 0, $$fca$1$gep28$i = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0 = 0, $_10$i = 0;
 var $_11$sroa$4$0$$sroa_idx11$i = 0, $_14$i = 0, $_17$i = 0, $_27$i = 0, $_7$i = 0, $cond$i$i$i$i = 0, $cond$i$i$i44$i = 0, $cond$i$i$i48$i = 0, $personalityslot$sroa$0$0$i = 0, $personalityslot$sroa$16$0$i = 0, $switch$i$i = 0, $t1$i$i$i$i$i = 0, $value$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $t1$i$i$i$i$i = sp;
 $_7$i = sp + 88|0;
 $value$i = sp + 72|0;
 $_27$i = sp + 64|0;
 $_17$i = sp + 56|0;
 $_14$i = sp + 44|0;
 $_10$i = sp + 32|0;
 $0 = HEAP32[$self>>2]|0; //@line 374 "/checkout/src/libstd/thread/local.rs"
 $1 = (FUNCTION_TABLE_i[$0 & 511]()|0); //@line 374 "/checkout/src/libstd/thread/local.rs"
 $2 = ($1|0)==(0|0); //@line 374 "/checkout/src/libstd/thread/local.rs"
 if ($2) {
  $_0$0 = 0;
  STACKTOP = sp;return ($_0$0|0); //@line 382 "/checkout/src/libstd/thread/local.rs"
 }
 $3 = ((($1)) + 4|0); //@line 378 "/checkout/src/libstd/thread/local.rs"
 $4 = HEAP32[$3>>2]|0; //@line 378 "/checkout/src/libstd/thread/local.rs"
 $5 = ($4|0)==(3); //@line 378 "/checkout/src/libstd/thread/local.rs"
 do {
  if ($5) {
   $6 = ((($self)) + 4|0); //@line 295 "/checkout/src/libstd/thread/local.rs"
   $7 = HEAP32[$6>>2]|0; //@line 295 "/checkout/src/libstd/thread/local.rs"
   FUNCTION_TABLE_vi[$7 & 511]($value$i); //@line 295 "/checkout/src/libstd/thread/local.rs"
   ;HEAP32[$t1$i$i$i$i$i>>2]=HEAP32[$1>>2]|0;HEAP32[$t1$i$i$i$i$i+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$t1$i$i$i$i$i+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$t1$i$i$i$i$i+12>>2]=HEAP32[$1+12>>2]|0; //@line 238 "/checkout/src/libcore/ptr.rs"
   ;HEAP32[$1>>2]=HEAP32[$value$i>>2]|0;HEAP32[$1+4>>2]=HEAP32[$value$i+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$value$i+8>>2]|0;HEAP32[$1+12>>2]=HEAP32[$value$i+12>>2]|0; //@line 239 "/checkout/src/libcore/ptr.rs"
   ;HEAP32[$_7$i>>2]=HEAP32[$t1$i$i$i$i$i>>2]|0;HEAP32[$_7$i+4>>2]=HEAP32[$t1$i$i$i$i$i+4>>2]|0;HEAP32[$_7$i+8>>2]=HEAP32[$t1$i$i$i$i$i+8>>2]|0;HEAP32[$_7$i+12>>2]=HEAP32[$t1$i$i$i$i$i+12>>2]|0; //@line 240 "/checkout/src/libcore/ptr.rs"
   $8 = ((($_7$i)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
   $9 = HEAP32[$8>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
   $10 = $9 & 2; //@line 59 "/checkout/src/libcore/ptr.rs"
   $switch$i$i = ($10|0)==(0); //@line 59 "/checkout/src/libcore/ptr.rs"
   if ($switch$i$i) {
    $11 = ((($_7$i)) + 12|0); //@line 59 "/checkout/src/libcore/ptr.rs"
    $12 = HEAP32[$11>>2]|0; //@line 2540 "/checkout/src/libcore/ptr.rs"
    $13 = HEAP32[$12>>2]|0;HEAP32[$12>>2] = (($13-1)|0); //@line 1529 "/checkout/src/libcore/sync/atomic.rs"
    $14 = ($13|0)==(1); //@line 933 "/checkout/src/liballoc/arc.rs"
    if ($14) {
     /* fence */; //@line 1706 "/checkout/src/libcore/sync/atomic.rs"
     __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h6b99c066bc6eaea1E($11); //@line 968 "/checkout/src/liballoc/arc.rs"
    }
   }
   $15 = HEAP32[$3>>2]|0; //@line 246 "/checkout/src/libcore/option.rs"
   $16 = ($15|0)==(3); //@line 246 "/checkout/src/libcore/option.rs"
   if ($16) {
    __ZN4core9panicking5panic17h9fa3414033a56a4dE(8000); //@line 20 "/checkout/src/libcore/macros.rs"
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 $17 = HEAP32[$1>>2]|0; //@line 240 "/checkout/src/libcore/cell.rs"
 $cond$i$i$i$i = ($17|0)==(-1); //@line 948 "/checkout/src/libcore/cell.rs"
 do {
  if ($cond$i$i$i$i) {
   __THREW__ = 0;
   invoke_vii(406,(20935|0),24); //@line 809 "/checkout/src/libcore/result.rs"
   $20 = __THREW__; __THREW__ = 0;
  } else {
   $18 = HEAP32[$3>>2]|0; //@line 194 "/checkout/src/libcore/option.rs"
   HEAP32[$1>>2] = $17; //@line 239 "/checkout/src/libcore/ptr.rs"
   $19 = ($18|0)==(2); //@line 215 "/checkout/src/libcore/option.rs"
   if ($19) {
    HEAP32[$_14$i>>2] = 0; //@line 29 "/checkout/src/libstd/sys_common/thread_info.rs"
    __THREW__ = 0;
    $21 = (invoke_ii(407,($_14$i|0))|0); //@line 29 "/checkout/src/libstd/sys_common/thread_info.rs"
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     break;
    }
    HEAP32[$_10$i>>2] = 0; //@line 27 "/checkout/src/libstd/sys_common/thread_info.rs"
    $_11$sroa$4$0$$sroa_idx11$i = ((($_10$i)) + 8|0); //@line 27 "/checkout/src/libstd/sys_common/thread_info.rs"
    HEAP32[$_11$sroa$4$0$$sroa_idx11$i>>2] = $21; //@line 27 "/checkout/src/libstd/sys_common/thread_info.rs"
    $24 = HEAP32[$1>>2]|0; //@line 240 "/checkout/src/libcore/cell.rs"
    $cond$i$i$i44$i = ($24|0)==(0); //@line 1113 "/checkout/src/libcore/cell.rs"
    if (!($cond$i$i$i44$i)) {
     __THREW__ = 0;
     invoke_vii(404,(20919|0),16); //@line 809 "/checkout/src/libcore/result.rs"
     $27 = __THREW__; __THREW__ = 0;
     $28 = ___cxa_find_matching_catch_2()|0;
     $29 = tempRet0;
     __ZN4core3ptr13drop_in_place17h2c0fd746b18e28b4E($_10$i); //@line 30 "/checkout/src/libstd/sys_common/thread_info.rs"
     $personalityslot$sroa$0$0$i = $28;$personalityslot$sroa$16$0$i = $29;
     ___resumeException($personalityslot$sroa$0$0$i|0);
     // unreachable;
    }
    HEAP32[$1>>2] = -1; //@line 239 "/checkout/src/libcore/ptr.rs"
    HEAP32[$_17$i>>2] = $3; //@line 27 "/checkout/src/libstd/sys_common/thread_info.rs"
    $$fca$1$gep23$i = ((($_17$i)) + 4|0); //@line 27 "/checkout/src/libstd/sys_common/thread_info.rs"
    HEAP32[$$fca$1$gep23$i>>2] = $1; //@line 27 "/checkout/src/libstd/sys_common/thread_info.rs"
    $25 = HEAP32[$3>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
    $26 = ($25|0)==(2); //@line 59 "/checkout/src/libcore/ptr.rs"
    if (!($26)) {
     $30 = ((($1)) + 12|0); //@line 59 "/checkout/src/libcore/ptr.rs"
     $31 = HEAP32[$30>>2]|0; //@line 2540 "/checkout/src/libcore/ptr.rs"
     $32 = HEAP32[$31>>2]|0;HEAP32[$31>>2] = (($32-1)|0); //@line 1529 "/checkout/src/libcore/sync/atomic.rs"
     $33 = ($32|0)==(1); //@line 933 "/checkout/src/liballoc/arc.rs"
     if ($33) {
      /* fence */; //@line 1706 "/checkout/src/libcore/sync/atomic.rs"
      __THREW__ = 0;
      invoke_vi(395,($30|0)); //@line 968 "/checkout/src/liballoc/arc.rs"
      $34 = __THREW__; __THREW__ = 0;
      $35 = $34&1;
      if ($35) {
       $36 = ___cxa_find_matching_catch_2()|0;
       $37 = tempRet0;
       ;HEAP32[$3>>2]=HEAP32[$_10$i>>2]|0;HEAP32[$3+4>>2]=HEAP32[$_10$i+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$_10$i+8>>2]|0; //@line 27 "/checkout/src/libstd/sys_common/thread_info.rs"
       __ZN4core3ptr13drop_in_place17h09cbbf19971ae399E($_17$i); //@line 31 "/checkout/src/libstd/sys_common/thread_info.rs"
       $personalityslot$sroa$0$0$i = $36;$personalityslot$sroa$16$0$i = $37;
       ___resumeException($personalityslot$sroa$0$0$i|0);
       // unreachable;
      }
     }
    }
    ;HEAP32[$3>>2]=HEAP32[$_10$i>>2]|0;HEAP32[$3+4>>2]=HEAP32[$_10$i+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$_10$i+8>>2]|0; //@line 27 "/checkout/src/libstd/sys_common/thread_info.rs"
    $52 = HEAP32[$$fca$1$gep23$i>>2]|0; //@line 1105 "/checkout/src/libcore/cell.rs"
    HEAP8[$52>>0]=0&255;HEAP8[$52+1>>0]=(0>>8)&255;HEAP8[$52+2>>0]=(0>>16)&255;HEAP8[$52+3>>0]=0>>24; //@line 239 "/checkout/src/libcore/ptr.rs"
    $$pre = HEAP32[$1>>2]|0;
    $38 = $$pre;
   } else {
    $38 = $17;
   }
   $cond$i$i$i48$i = ($38|0)==(0); //@line 1113 "/checkout/src/libcore/cell.rs"
   if (!($cond$i$i$i48$i)) {
    __THREW__ = 0;
    invoke_vii(404,(20919|0),16); //@line 809 "/checkout/src/libcore/result.rs"
    $41 = __THREW__; __THREW__ = 0;
    $42 = ___cxa_find_matching_catch_2()|0;
    $43 = tempRet0;
    $personalityslot$sroa$0$0$i = $42;$personalityslot$sroa$16$0$i = $43;
    ___resumeException($personalityslot$sroa$0$0$i|0);
    // unreachable;
   }
   HEAP32[$1>>2] = -1; //@line 239 "/checkout/src/libcore/ptr.rs"
   HEAP32[$_27$i>>2] = $3; //@line 32 "/checkout/src/libstd/sys_common/thread_info.rs"
   $$fca$1$gep28$i = ((($_27$i)) + 4|0); //@line 32 "/checkout/src/libstd/sys_common/thread_info.rs"
   HEAP32[$$fca$1$gep28$i>>2] = $1; //@line 32 "/checkout/src/libstd/sys_common/thread_info.rs"
   $39 = HEAP32[$3>>2]|0; //@line 267 "/checkout/src/libcore/option.rs"
   $40 = ($39|0)==(2); //@line 267 "/checkout/src/libcore/option.rs"
   if ($40) {
    __THREW__ = 0;
    invoke_vi(297,(8000|0)); //@line 20 "/checkout/src/libcore/macros.rs"
    $44 = __THREW__; __THREW__ = 0;
    $45 = ___cxa_find_matching_catch_2()|0;
    $46 = tempRet0;
    __ZN4core3ptr13drop_in_place17h09cbbf19971ae399E($_27$i); //@line 33 "/checkout/src/libstd/sys_common/thread_info.rs"
    $personalityslot$sroa$0$0$i = $45;$personalityslot$sroa$16$0$i = $46;
    ___resumeException($personalityslot$sroa$0$0$i|0);
    // unreachable;
   }
   $47 = ((($1)) + 12|0); //@line 38 "/checkout/src/libstd/sys_common/thread_info.rs"
   $48 = HEAP32[$47>>2]|0; //@line 2540 "/checkout/src/libcore/ptr.rs"
   $49 = HEAP32[$48>>2]|0;HEAP32[$48>>2] = (($49+1)|0); //@line 1518 "/checkout/src/libcore/sync/atomic.rs"
   $50 = ($49|0)<(0); //@line 722 "/checkout/src/liballoc/arc.rs"
   if ($50) {
    _llvm_trap(); //@line 724 "/checkout/src/liballoc/arc.rs"
    // unreachable; //@line 724 "/checkout/src/liballoc/arc.rs"
   }
   $51 = HEAP32[$47>>2]|0; //@line 728 "/checkout/src/liballoc/arc.rs"
   HEAP32[$1>>2] = 0; //@line 239 "/checkout/src/libcore/ptr.rs"
   $_0$0 = $51;
   STACKTOP = sp;return ($_0$0|0); //@line 382 "/checkout/src/libstd/thread/local.rs"
  }
 } while(0);
 $53 = ___cxa_find_matching_catch_2()|0;
 $54 = tempRet0;
 $personalityslot$sroa$0$0$i = $53;$personalityslot$sroa$16$0$i = $54;
 ___resumeException($personalityslot$sroa$0$0$i|0);
 // unreachable;
 return (0)|0;
}
function __ZN3std3sys4unix2os12error_string17ha1ceada257432da0E($0,$errno) {
 $0 = $0|0;
 $errno = $errno|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_23 = 0, $_8$i = 0, $buf = 0, $switch$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $_8$i = sp;
 $_23 = sp + 8|0;
 $buf = sp + 24|0;
 dest=$buf; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0)); //@line 96 "/checkout/src/libstd/sys/unix/os.rs"
 $1 = (_strerror_r($errno,$buf,128)|0); //@line 100 "/checkout/src/libstd/sys/unix/os.rs"
 $2 = ($1|0)<(0); //@line 100 "/checkout/src/libstd/sys/unix/os.rs"
 if ($2) {
  __ZN3std9panicking11begin_panic17hc122bd4e5599889dE(21252,18,8056); //@line 101 "/checkout/src/libstd/sys/unix/os.rs"
  // unreachable; //@line 101 "/checkout/src/libstd/sys/unix/os.rs"
 }
 $3 = (_strlen($buf)|0); //@line 902 "/checkout/src/libstd/ffi/c_str.rs"
 $4 = ($3|0)==(-1); //@line 875 "/checkout/src/libcore/slice/mod.rs"
 if ($4) {
  __ZN4core5slice20slice_index_len_fail17h440967be6f416601E(-1,0); //@line 876 "/checkout/src/libcore/slice/mod.rs"
  // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
 }
 __ZN4core3str9from_utf817hbf2fe8d2f1e56658E($_23,$buf,$3); //@line 105 "/checkout/src/libstd/sys/unix/os.rs"
 $5 = HEAP32[$_23>>2]|0; //@line 781 "/checkout/src/libcore/result.rs"
 $switch$i = ($5|0)==(1); //@line 781 "/checkout/src/libcore/result.rs"
 if ($switch$i) {
  $6 = ((($_23)) + 4|0); //@line 782 "/checkout/src/libcore/result.rs"
  $7 = $6; //@line 782 "/checkout/src/libcore/result.rs"
  $8 = $7; //@line 782 "/checkout/src/libcore/result.rs"
  $9 = HEAP32[$8>>2]|0; //@line 782 "/checkout/src/libcore/result.rs"
  $10 = (($7) + 4)|0; //@line 782 "/checkout/src/libcore/result.rs"
  $11 = $10; //@line 782 "/checkout/src/libcore/result.rs"
  $12 = HEAP32[$11>>2]|0; //@line 782 "/checkout/src/libcore/result.rs"
  $13 = $_8$i; //@line 782 "/checkout/src/libcore/result.rs"
  $14 = $13; //@line 782 "/checkout/src/libcore/result.rs"
  HEAP32[$14>>2] = $9; //@line 782 "/checkout/src/libcore/result.rs"
  $15 = (($13) + 4)|0; //@line 782 "/checkout/src/libcore/result.rs"
  $16 = $15; //@line 782 "/checkout/src/libcore/result.rs"
  HEAP32[$16>>2] = $12; //@line 782 "/checkout/src/libcore/result.rs"
  __ZN4core6result13unwrap_failed17hbfacf1b84c01e45fE(21033,43,$_8$i); //@line 782 "/checkout/src/libcore/result.rs"
  // unreachable;
 } else {
  $17 = ((($_23)) + 4|0); //@line 781 "/checkout/src/libcore/result.rs"
  $18 = HEAP32[$17>>2]|0; //@line 781 "/checkout/src/libcore/result.rs"
  $19 = ((($_23)) + 8|0); //@line 781 "/checkout/src/libcore/result.rs"
  $20 = HEAP32[$19>>2]|0; //@line 781 "/checkout/src/libcore/result.rs"
  __ZN5alloc3str56__LT_impl_u20_alloc__borrow__ToOwned_u20_for_u20_str_GT_8to_owned17habeeaee441196d3bE($0,$18,$20); //@line 105 "/checkout/src/libstd/sys/unix/os.rs"
  STACKTOP = sp;return; //@line 107 "/checkout/src/libstd/sys/unix/os.rs"
 }
}
function __ZN3std3sys4unix2os6getenv17h4d3a8ed236954b64E($0,$k$0,$k$1) {
 $0 = $0|0;
 $k$0 = $k$0|0;
 $k$1 = $k$1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $_10 = 0, $_11 = 0, $_13$i$i = 0, $_2$i = 0, $_26$sroa$0$0$copyload = 0, $_3 = 0, $_34$sroa$0$0$$sroa_idx = 0, $_34$sroa$4$0$$sroa_idx = 0, $_35$i = 0, $_4$sroa$5$0$$sroa_idx5 = 0, $_4$sroa$7$0$$sroa_idx7 = 0, $_4$sroa$9$0$$sroa_idx = 0, $_4$sroa$9$8$$sroa_idx = 0, $eh$lpad$body$index5Z2D = 0;
 var $eh$lpad$body$indexZ2D = 0, $err$i$i = 0, $k = 0, $personalityslot$sroa$0$0 = 0, $personalityslot$sroa$8$0 = 0, $ptr$0$i = 0, $ret$sroa$0$0 = 0, $switch = 0, $vector$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $1 = sp;
 $err$i$i = sp + 112|0;
 $_35$i = sp + 100|0;
 $_13$i$i = sp + 88|0;
 $_2$i = sp + 76|0;
 $vector$i$i = sp + 64|0;
 $_11 = sp + 48|0;
 $_10 = sp + 8|0;
 $_3 = sp + 24|0;
 $k = sp + 16|0;
 __ZN98__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__convert__From_LT__RF__u27_a_u20__u5b_T_u5d__GT__GT_4from17h74b69389c49da5afE($_2$i,$k$0,$k$1); //@line 415 "/checkout/src/libcore/convert.rs"
 $2 = HEAP32[$_2$i>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 $3 = ((($_2$i)) + 8|0); //@line 1690 "/checkout/src/liballoc/vec.rs"
 $4 = HEAP32[$3>>2]|0; //@line 1690 "/checkout/src/liballoc/vec.rs"
 $5 = (_memchr($2,0,$4)|0); //@line 18 "/checkout/src/libstd/sys/unix/memchr.rs"
 $6 = ($5|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
 $7 = $2; //@line 23 "/checkout/src/libstd/sys/unix/memchr.rs"
 if ($6) {
  ;HEAP32[$_13$i$i>>2]=HEAP32[$_2$i>>2]|0;HEAP32[$_13$i$i+4>>2]=HEAP32[$_2$i+4>>2]|0;HEAP32[$_13$i$i+8>>2]=HEAP32[$_2$i+8>>2]|0; //@line 337 "/checkout/src/libstd/ffi/c_str.rs"
  __ZN3std3ffi5c_str7CString18from_vec_unchecked17hf957fef3c393e418E($1,$_13$i$i); //@line 337 "/checkout/src/libstd/ffi/c_str.rs"
  $$sreg$field = HEAP32[$1>>2]|0; //@line 337 "/checkout/src/libstd/ffi/c_str.rs"
  $$sreg$index1 = ((($1)) + 4|0); //@line 337 "/checkout/src/libstd/ffi/c_str.rs"
  $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 337 "/checkout/src/libstd/ffi/c_str.rs"
  $8 = $$sreg$field; //@line 337 "/checkout/src/libstd/ffi/c_str.rs"
  $17 = 0;$18 = $8;$19 = $$sreg$field2;$22 = 0;$25 = 0;
 } else {
  $9 = $5; //@line 26 "/checkout/src/libstd/sys/unix/memchr.rs"
  $10 = (($9) - ($7))|0; //@line 26 "/checkout/src/libstd/sys/unix/memchr.rs"
  $_4$sroa$9$8$$sroa_idx = ((($_2$i)) + 4|0); //@line 336 "/checkout/src/libstd/ffi/c_str.rs"
  $11 = $_4$sroa$9$8$$sroa_idx; //@line 336 "/checkout/src/libstd/ffi/c_str.rs"
  $12 = $11; //@line 336 "/checkout/src/libstd/ffi/c_str.rs"
  $13 = HEAP32[$12>>2]|0; //@line 336 "/checkout/src/libstd/ffi/c_str.rs"
  $14 = (($11) + 4)|0; //@line 336 "/checkout/src/libstd/ffi/c_str.rs"
  $15 = $14; //@line 336 "/checkout/src/libstd/ffi/c_str.rs"
  $16 = HEAP32[$15>>2]|0; //@line 336 "/checkout/src/libstd/ffi/c_str.rs"
  $17 = 1;$18 = $10;$19 = $7;$22 = $13;$25 = $16;
 }
 HEAP32[$_3>>2] = $17; //@line 1172 "/checkout/src/libcore/result.rs"
 $_4$sroa$5$0$$sroa_idx5 = ((($_3)) + 4|0); //@line 1172 "/checkout/src/libcore/result.rs"
 HEAP32[$_4$sroa$5$0$$sroa_idx5>>2] = $18; //@line 1172 "/checkout/src/libcore/result.rs"
 $_4$sroa$7$0$$sroa_idx7 = ((($_3)) + 8|0); //@line 1172 "/checkout/src/libcore/result.rs"
 HEAP32[$_4$sroa$7$0$$sroa_idx7>>2] = $19; //@line 1172 "/checkout/src/libcore/result.rs"
 $_4$sroa$9$0$$sroa_idx = ((($_3)) + 12|0); //@line 1172 "/checkout/src/libcore/result.rs"
 $20 = $_4$sroa$9$0$$sroa_idx; //@line 1172 "/checkout/src/libcore/result.rs"
 $21 = $20; //@line 1172 "/checkout/src/libcore/result.rs"
 HEAP32[$21>>2] = $22; //@line 1172 "/checkout/src/libcore/result.rs"
 $23 = (($20) + 4)|0; //@line 1172 "/checkout/src/libcore/result.rs"
 $24 = $23; //@line 1172 "/checkout/src/libcore/result.rs"
 HEAP32[$24>>2] = $25; //@line 1172 "/checkout/src/libcore/result.rs"
 $switch = ($17|0)==(1); //@line 453 "/checkout/src/libstd/sys/unix/os.rs"
 $26 = $18; //@line 453 "/checkout/src/libstd/sys/unix/os.rs"
 if ($switch) {
  $27 = ((($_3)) + 4|0); //@line 453 "/checkout/src/libstd/sys/unix/os.rs"
  ;HEAP32[$_11>>2]=HEAP32[$27>>2]|0;HEAP32[$_11+4>>2]=HEAP32[$27+4>>2]|0;HEAP32[$_11+8>>2]=HEAP32[$27+8>>2]|0;HEAP32[$_11+12>>2]=HEAP32[$27+12>>2]|0; //@line 453 "/checkout/src/libstd/sys/unix/os.rs"
  __THREW__ = 0;
  invoke_vii(408,($_10|0),($_11|0)); //@line 453 "/checkout/src/libstd/sys/unix/os.rs"
  $28 = __THREW__; __THREW__ = 0;
  $29 = $28&1;
  if ($29) {
   $80 = ___cxa_find_matching_catch_2()|0;
   $81 = tempRet0;
   $personalityslot$sroa$0$0 = $80;$personalityslot$sroa$8$0 = $81;
   ___resumeException($personalityslot$sroa$0$0|0);
   // unreachable;
  } else {
   $69 = $_10; //@line 1180 "/checkout/src/libcore/result.rs"
   $70 = $69; //@line 1180 "/checkout/src/libcore/result.rs"
   $71 = HEAP32[$70>>2]|0; //@line 1180 "/checkout/src/libcore/result.rs"
   $72 = (($69) + 4)|0; //@line 1180 "/checkout/src/libcore/result.rs"
   $73 = $72; //@line 1180 "/checkout/src/libcore/result.rs"
   $74 = HEAP32[$73>>2]|0; //@line 1180 "/checkout/src/libcore/result.rs"
   HEAP32[$0>>2] = 1; //@line 1180 "/checkout/src/libcore/result.rs"
   $75 = ((($0)) + 4|0); //@line 1180 "/checkout/src/libcore/result.rs"
   $76 = $75; //@line 1180 "/checkout/src/libcore/result.rs"
   $77 = $76; //@line 1180 "/checkout/src/libcore/result.rs"
   HEAP32[$77>>2] = $71; //@line 1180 "/checkout/src/libcore/result.rs"
   $78 = (($76) + 4)|0; //@line 1180 "/checkout/src/libcore/result.rs"
   $79 = $78; //@line 1180 "/checkout/src/libcore/result.rs"
   HEAP32[$79>>2] = $74; //@line 1180 "/checkout/src/libcore/result.rs"
   STACKTOP = sp;return; //@line 465 "/checkout/src/libstd/sys/unix/os.rs"
  }
 }
 HEAP32[$k>>2] = $18; //@line 453 "/checkout/src/libstd/sys/unix/os.rs"
 $30 = ((($k)) + 4|0); //@line 453 "/checkout/src/libstd/sys/unix/os.rs"
 HEAP32[$30>>2] = $19; //@line 453 "/checkout/src/libstd/sys/unix/os.rs"
 $31 = $18; //@line 453 "/checkout/src/libstd/sys/unix/os.rs"
 (_pthread_mutex_lock((38336|0))|0); //@line 67 "/checkout/src/libstd/sys/unix/mutex.rs"
 $32 = (_getenv(($31|0))|0); //@line 456 "/checkout/src/libstd/sys/unix/os.rs"
 $33 = ($32|0)==(0|0); //@line 532 "/checkout/src/libcore/ptr.rs"
 L13: do {
  if ($33) {
   $62 = 0;$65 = 0;$ret$sroa$0$0 = 0;
  } else {
   $34 = (_strlen($32)|0); //@line 902 "/checkout/src/libstd/ffi/c_str.rs"
   $35 = ($34|0)==(-1); //@line 875 "/checkout/src/libcore/slice/mod.rs"
   do {
    if ($35) {
     __THREW__ = 0;
     invoke_vii(409,-1,0); //@line 876 "/checkout/src/libcore/slice/mod.rs"
     $36 = __THREW__; __THREW__ = 0;
     label = 25;
    } else {
     $37 = ($34|0)<(0); //@line 5 "<assert macros>"
     if ($37) {
      __THREW__ = 0;
      invoke_vi(297,(8952|0)); //@line 3 "<panic macros>"
      $38 = __THREW__; __THREW__ = 0;
      label = 25;
      break;
     }
     $39 = ($34|0)==(0); //@line 90 "/checkout/src/liballoc/raw_vec.rs"
     if ($39) {
      $ptr$0$i = (1);
     } else {
      $40 = (___rust_alloc($34,1,$err$i$i)|0); //@line 84 "/checkout/src/liballoc/heap.rs"
      $41 = ($40|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
      if ($41) {
       HEAP32[$_35$i>>2] = 0; //@line 101 "/checkout/src/liballoc/raw_vec.rs"
       ___rust_oom($_35$i); //@line 98 "/checkout/src/liballoc/heap.rs"
       // unreachable; //@line 98 "/checkout/src/liballoc/heap.rs"
      } else {
       $ptr$0$i = $40;
      }
     }
     HEAP32[$vector$i$i>>2] = $ptr$0$i; //@line 358 "/checkout/src/liballoc/vec.rs"
     $42 = ((($vector$i$i)) + 4|0); //@line 358 "/checkout/src/liballoc/vec.rs"
     HEAP32[$42>>2] = $34; //@line 358 "/checkout/src/liballoc/vec.rs"
     $43 = ((($vector$i$i)) + 8|0); //@line 358 "/checkout/src/liballoc/vec.rs"
     HEAP32[$43>>2] = 0; //@line 358 "/checkout/src/liballoc/vec.rs"
     __THREW__ = 0;
     invoke_viii(410,($vector$i$i|0),0,($34|0)); //@line 461 "/checkout/src/liballoc/vec.rs"
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      $46 = ___cxa_find_matching_catch_2()|0;
      $47 = tempRet0;
      __THREW__ = 0;
      invoke_vi(411,($vector$i$i|0)); //@line 168 "/checkout/src/liballoc/slice.rs"
      $48 = __THREW__; __THREW__ = 0;
      $49 = $48&1;
      if ($49) {
       label = 25;
       break;
      } else {
       $eh$lpad$body$index5Z2D = $47;$eh$lpad$body$indexZ2D = $46;
       break;
      }
     } else {
      $50 = HEAP32[$43>>2]|0; //@line 1161 "/checkout/src/liballoc/vec.rs"
      $51 = (($50) + ($34))|0; //@line 1902 "/checkout/src/liballoc/vec.rs"
      HEAP32[$43>>2] = $51; //@line 678 "/checkout/src/liballoc/vec.rs"
      $52 = HEAP32[$vector$i$i>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
      $53 = (($52) + ($50)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
      _memcpy(($53|0),($32|0),($34|0))|0; //@line 672 "/checkout/src/libcore/slice/mod.rs"
      $_26$sroa$0$0$copyload = HEAP32[$vector$i$i>>2]|0; //@line 167 "/checkout/src/liballoc/slice.rs"
      $54 = $42; //@line 167 "/checkout/src/liballoc/slice.rs"
      $55 = $54; //@line 167 "/checkout/src/liballoc/slice.rs"
      $56 = HEAP32[$55>>2]|0; //@line 167 "/checkout/src/liballoc/slice.rs"
      $57 = (($54) + 4)|0; //@line 167 "/checkout/src/liballoc/slice.rs"
      $58 = $57; //@line 167 "/checkout/src/liballoc/slice.rs"
      $59 = HEAP32[$58>>2]|0; //@line 167 "/checkout/src/liballoc/slice.rs"
      $62 = $56;$65 = $59;$ret$sroa$0$0 = $_26$sroa$0$0$copyload;
      break L13;
     }
    }
   } while(0);
   if ((label|0) == 25) {
    $82 = ___cxa_find_matching_catch_2()|0;
    $83 = tempRet0;
    $eh$lpad$body$index5Z2D = $83;$eh$lpad$body$indexZ2D = $82;
   }
   __ZN4core3ptr13drop_in_place17hb562518a44792627E($k); //@line 465 "/checkout/src/libstd/sys/unix/os.rs"
   $personalityslot$sroa$0$0 = $eh$lpad$body$indexZ2D;$personalityslot$sroa$8$0 = $eh$lpad$body$index5Z2D;
   ___resumeException($personalityslot$sroa$0$0|0);
   // unreachable;
  }
 } while(0);
 (_pthread_mutex_unlock((38336|0))|0); //@line 72 "/checkout/src/libstd/sys/unix/mutex.rs"
 HEAP32[$0>>2] = 0; //@line 463 "/checkout/src/libstd/sys/unix/os.rs"
 $_34$sroa$0$0$$sroa_idx = ((($0)) + 4|0); //@line 463 "/checkout/src/libstd/sys/unix/os.rs"
 HEAP32[$_34$sroa$0$0$$sroa_idx>>2] = $ret$sroa$0$0; //@line 463 "/checkout/src/libstd/sys/unix/os.rs"
 $_34$sroa$4$0$$sroa_idx = ((($0)) + 8|0); //@line 463 "/checkout/src/libstd/sys/unix/os.rs"
 $60 = $_34$sroa$4$0$$sroa_idx; //@line 463 "/checkout/src/libstd/sys/unix/os.rs"
 $61 = $60; //@line 463 "/checkout/src/libstd/sys/unix/os.rs"
 HEAP32[$61>>2] = $62; //@line 463 "/checkout/src/libstd/sys/unix/os.rs"
 $63 = (($60) + 4)|0; //@line 463 "/checkout/src/libstd/sys/unix/os.rs"
 $64 = $63; //@line 463 "/checkout/src/libstd/sys/unix/os.rs"
 HEAP32[$64>>2] = $65; //@line 463 "/checkout/src/libstd/sys/unix/os.rs"
 HEAP8[$26>>0] = 0; //@line 622 "/checkout/src/libstd/ffi/c_str.rs"
 $66 = HEAP32[$30>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $67 = ($66|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
 if (!($67)) {
  $68 = HEAP32[$k>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  ___rust_dealloc($68,$66,1); //@line 104 "/checkout/src/liballoc/heap.rs"
 }
 STACKTOP = sp;return; //@line 465 "/checkout/src/libstd/sys/unix/os.rs"
}
function __ZN4core3ptr13drop_in_place17hb562518a44792627E($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0; //@line 622 "/checkout/src/libstd/ffi/c_str.rs"
 HEAP8[$0>>0] = 0; //@line 622 "/checkout/src/libstd/ffi/c_str.rs"
 $1 = ((($arg0)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $2 = HEAP32[$1>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $3 = ($2|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
 if ($3) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 $4 = HEAP32[$arg0>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 ___rust_dealloc($4,$2,1); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit17hc193c398e9627c24E() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN45__LT_std__thread__local__os__Key_LT_T_GT__GT_3get17hcae762557156e778E(8080)|0); //@line 184 "/checkout/src/libstd/thread/local.rs"
 return ($0|0); //@line 185 "/checkout/src/libstd/thread/local.rs"
}
function __ZN3std9panicking18update_panic_count11PANIC_COUNT6__init17h71c66fed1e8ea9feE() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0; //@line 169 "/checkout/src/libstd/thread/local.rs"
}
function __ZN4core3ptr13drop_in_place17haa19684e53305099E($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr13drop_in_place17hda15ddb7c8ed5c05E_llvm_2B778CB6($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($arg0)) + 4|0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $1 = HEAP32[$0>>2]|0; //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $2 = ($1|0)==(0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 if ($2) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 $3 = HEAP32[$arg0>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 ___rust_dealloc($3,$1,1); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr13drop_in_place17h5207d711a6957c39E_llvm_2B778CB6($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $1 = ((($arg0)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $2 = HEAP32[$1>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $3 = HEAP32[$2>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 __THREW__ = 0;
 invoke_vi($3|0,($0|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  $15 = HEAP32[$arg0>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $16 = HEAP32[$1>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  __ZN5alloc4heap8box_free17h01457329634e278fE_llvm_2B778CB6($15,$16); //@line 59 "/checkout/src/libcore/ptr.rs"
  ___resumeException($13|0);
  // unreachable;
 }
 $6 = HEAP32[$1>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $7 = ((($6)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $8 = HEAP32[$7>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
 $9 = ($8|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
 if ($9) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 $10 = HEAP32[$arg0>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $11 = ((($6)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $12 = HEAP32[$11>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
 ___rust_dealloc($10,$8,$12); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN5alloc4heap8box_free17h01457329634e278fE_llvm_2B778CB6($ptr$0,$ptr$1) {
 $ptr$0 = $ptr$0|0;
 $ptr$1 = $ptr$1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ptr$1)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $1 = HEAP32[$0>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
 $2 = ($1|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
 if ($2) {
  return; //@line 265 "/checkout/src/liballoc/heap.rs"
 }
 $3 = ((($ptr$1)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $4 = HEAP32[$3>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
 ___rust_dealloc($ptr$0,$1,$4); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 265 "/checkout/src/liballoc/heap.rs"
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h9e10bd20eeda4dd5E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $1 = HEAP32[$self>>2]|0; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $2 = ((($self)) + 4|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$2>>2]|0; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 __ZN11std_unicode5lossy9Utf8Lossy10from_bytes17h6a57cfbac7497386E($0,$1,$3); //@line 34 "/checkout/src/libstd/sys/unix/os_str.rs"
 $$sreg$field = HEAP32[$0>>2]|0; //@line 34 "/checkout/src/libstd/sys/unix/os_str.rs"
 $$sreg$index1 = ((($0)) + 4|0); //@line 34 "/checkout/src/libstd/sys/unix/os_str.rs"
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 34 "/checkout/src/libstd/sys/unix/os_str.rs"
 $4 = (__ZN66__LT_std_unicode__lossy__Utf8Lossy_u20_as_u20_core__fmt__Debug_GT_3fmt17ha08a3fcb523c8b46E($$sreg$field,$$sreg$field2,$f)|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return ($4|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN3std9panicking11begin_panic17hc122bd4e5599889dE($msg$0,$msg$1,$file_line_col) {
 $msg$0 = $msg$0|0;
 $msg$1 = $msg$1|0;
 $file_line_col = $file_line_col|0;
 var $0 = 0, $1 = 0, $2 = 0, $_5$i$i$i$i = 0, $err$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $err$i$i$i = sp + 12|0;
 $_5$i$i$i$i = sp;
 $0 = (___rust_alloc(8,4,$err$i$i$i)|0); //@line 84 "/checkout/src/liballoc/heap.rs"
 $1 = ($0|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
 if ($1) {
  ___rust_oom($_5$i$i$i$i); //@line 98 "/checkout/src/liballoc/heap.rs"
  // unreachable; //@line 98 "/checkout/src/liballoc/heap.rs"
 } else {
  HEAP32[$0>>2] = $msg$0; //@line 242 "/checkout/src/liballoc/boxed.rs"
  $2 = ((($0)) + 4|0); //@line 242 "/checkout/src/liballoc/boxed.rs"
  HEAP32[$2>>2] = $msg$1; //@line 242 "/checkout/src/liballoc/boxed.rs"
  __ZN3std9panicking20rust_panic_with_hook17h3cd58f4b456754d8E($0,8088,$file_line_col); //@line 538 "/checkout/src/libstd/panicking.rs"
  // unreachable; //@line 538 "/checkout/src/libstd/panicking.rs"
 }
}
function __ZN3std9panicking20rust_panic_with_hook17h3cd58f4b456754d8E($0,$1,$file_line_col) {
 $0 = $0|0;
 $1 = $1|0;
 $file_line_col = $file_line_col|0;
 var $$pre$i$i = 0, $$pre12$i1$i = 0, $$sink$in$phi$trans$insert$i2$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_11 = 0, $_24$sroa$0$0$$sroa_idx = 0, $_24$sroa$4$0$$sroa_idx2 = 0, $_24$sroa$5$0$$sroa_idx4 = 0;
 var $_24$sroa$6$0$$sroa_idx6 = 0, $_4$sroa$0$0$$sroa_idx$i = 0, $_4$sroa$0$0$$sroa_idx$i11 = 0, $_45 = 0, $info = 0, $msg = 0, $not$ = 0, $switch$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $_45 = sp + 56|0;
 $info = sp + 32|0;
 $_11 = sp + 8|0;
 $msg = sp;
 HEAP32[$msg>>2] = $0;
 $2 = ((($msg)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$file_line_col>>2]|0; //@line 551 "/checkout/src/libstd/panicking.rs"
 $4 = ((($file_line_col)) + 4|0); //@line 551 "/checkout/src/libstd/panicking.rs"
 $5 = HEAP32[$4>>2]|0; //@line 551 "/checkout/src/libstd/panicking.rs"
 $6 = ((($file_line_col)) + 8|0); //@line 551 "/checkout/src/libstd/panicking.rs"
 $7 = HEAP32[$6>>2]|0; //@line 551 "/checkout/src/libstd/panicking.rs"
 $8 = ((($file_line_col)) + 12|0); //@line 551 "/checkout/src/libstd/panicking.rs"
 $9 = HEAP32[$8>>2]|0; //@line 551 "/checkout/src/libstd/panicking.rs"
 $10 = $0; //@line 410 "/checkout/src/libstd/panicking.rs"
 $11 = $1; //@line 410 "/checkout/src/libstd/panicking.rs"
 __THREW__ = 0;
 $12 = (invoke_ii(412,(8080|0))|0); //@line 184 "/checkout/src/libstd/thread/local.rs"
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 L1: do {
  if (!($14)) {
   $15 = ($12|0)==(0|0); //@line 374 "/checkout/src/libstd/thread/local.rs"
   if ($15) {
    __THREW__ = 0;
    invoke_vii(413,(21076|0),57); //@line 809 "/checkout/src/libcore/result.rs"
    $21 = __THREW__; __THREW__ = 0;
    break;
   }
   $16 = HEAP32[$12>>2]|0; //@line 378 "/checkout/src/libstd/thread/local.rs"
   $switch$i$i = ($16|0)==(1); //@line 378 "/checkout/src/libstd/thread/local.rs"
   if ($switch$i$i) {
    $$sink$in$phi$trans$insert$i2$i = ((($12)) + 4|0);
    $$pre$i$i = HEAP32[$$sink$in$phi$trans$insert$i2$i>>2]|0;
    $22 = (($$pre$i$i) + 1)|0; //@line 411 "/checkout/src/libstd/panicking.rs"
    HEAP32[$$sink$in$phi$trans$insert$i2$i>>2] = $22; //@line 239 "/checkout/src/libcore/ptr.rs"
    $23 = ($22>>>0)>(2); //@line 560 "/checkout/src/libstd/panicking.rs"
    if ($23) {
     HEAP32[$_11>>2] = 8160; //@line 343 "/checkout/src/libcore/fmt/mod.rs"
     $30 = ((($_11)) + 4|0); //@line 343 "/checkout/src/libcore/fmt/mod.rs"
     HEAP32[$30>>2] = 1; //@line 343 "/checkout/src/libcore/fmt/mod.rs"
     $_4$sroa$0$0$$sroa_idx$i = ((($_11)) + 8|0); //@line 343 "/checkout/src/libcore/fmt/mod.rs"
     HEAP32[$_4$sroa$0$0$$sroa_idx$i>>2] = 0; //@line 343 "/checkout/src/libcore/fmt/mod.rs"
     $31 = ((($_11)) + 16|0); //@line 343 "/checkout/src/libcore/fmt/mod.rs"
     HEAP32[$31>>2] = 38620; //@line 343 "/checkout/src/libcore/fmt/mod.rs"
     $32 = ((($_11)) + 20|0); //@line 343 "/checkout/src/libcore/fmt/mod.rs"
     HEAP32[$32>>2] = 0; //@line 343 "/checkout/src/libcore/fmt/mod.rs"
     __THREW__ = 0;
     invoke_vi(415,($_11|0)); //@line 561 "/checkout/src/libstd/panicking.rs"
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if ($34) {
      break;
     }
     _llvm_trap(); //@line 563 "/checkout/src/libstd/panicking.rs"
     // unreachable; //@line 563 "/checkout/src/libstd/panicking.rs"
    } else {
     $47 = $22;
    }
   } else {
    $17 = $12; //@line 239 "/checkout/src/libcore/ptr.rs"
    $18 = $17; //@line 239 "/checkout/src/libcore/ptr.rs"
    HEAP32[$18>>2] = 1; //@line 239 "/checkout/src/libcore/ptr.rs"
    $19 = (($17) + 4)|0; //@line 239 "/checkout/src/libcore/ptr.rs"
    $20 = $19; //@line 239 "/checkout/src/libcore/ptr.rs"
    HEAP32[$20>>2] = 0; //@line 239 "/checkout/src/libcore/ptr.rs"
    $$pre12$i1$i = ((($12)) + 4|0);
    HEAP32[$$pre12$i1$i>>2] = 1; //@line 239 "/checkout/src/libcore/ptr.rs"
    $47 = 1;
   }
   HEAP32[$info>>2] = $10; //@line 567 "/checkout/src/libstd/panicking.rs"
   $24 = ((($info)) + 4|0); //@line 567 "/checkout/src/libstd/panicking.rs"
   HEAP32[$24>>2] = $11; //@line 567 "/checkout/src/libstd/panicking.rs"
   $_24$sroa$0$0$$sroa_idx = ((($info)) + 8|0); //@line 567 "/checkout/src/libstd/panicking.rs"
   HEAP32[$_24$sroa$0$0$$sroa_idx>>2] = $3; //@line 567 "/checkout/src/libstd/panicking.rs"
   $_24$sroa$4$0$$sroa_idx2 = ((($info)) + 12|0); //@line 567 "/checkout/src/libstd/panicking.rs"
   HEAP32[$_24$sroa$4$0$$sroa_idx2>>2] = $5; //@line 567 "/checkout/src/libstd/panicking.rs"
   $_24$sroa$5$0$$sroa_idx4 = ((($info)) + 16|0); //@line 567 "/checkout/src/libstd/panicking.rs"
   HEAP32[$_24$sroa$5$0$$sroa_idx4>>2] = $7; //@line 567 "/checkout/src/libstd/panicking.rs"
   $_24$sroa$6$0$$sroa_idx6 = ((($info)) + 20|0); //@line 567 "/checkout/src/libstd/panicking.rs"
   HEAP32[$_24$sroa$6$0$$sroa_idx6>>2] = $9; //@line 567 "/checkout/src/libstd/panicking.rs"
   $25 = (_pthread_rwlock_rdlock((38364|0))|0); //@line 34 "/checkout/src/libstd/sys/unix/rwlock.rs"
   switch ($25|0) {
   case 11:  {
    __THREW__ = 0;
    invoke_viii(414,(21352|0),36,(8128|0)); //@line 54 "/checkout/src/libstd/sys/unix/rwlock.rs"
    $26 = __THREW__; __THREW__ = 0;
    break L1;
    break;
   }
   case 35:  {
    break;
   }
   default: {
    label = 9;
   }
   }
   do {
    if ((label|0) == 9) {
     $27 = HEAP8[(38400)>>0]|0; //@line 55 "/checkout/src/libstd/sys/unix/rwlock.rs"
     $not$ = ($27<<24>>24)==(0); //@line 55 "/checkout/src/libstd/sys/unix/rwlock.rs"
     if (!($not$)) {
      $28 = ($25|0)==(0); //@line 56 "/checkout/src/libstd/sys/unix/rwlock.rs"
      if (!($28)) {
       break;
      }
      (_pthread_rwlock_unlock((38364|0))|0); //@line 113 "/checkout/src/libstd/sys/unix/rwlock.rs"
      break;
     }
     $35 = HEAP32[(38396)>>2]|0;HEAP32[(38396)>>2] = (($35+1)|0); //@line 1518 "/checkout/src/libcore/sync/atomic.rs"
     $36 = HEAP32[(38408)>>2]|0; //@line 577 "/checkout/src/libstd/panicking.rs"
     $37 = ($36|0)==(0|0); //@line 577 "/checkout/src/libstd/panicking.rs"
     if ($37) {
      __THREW__ = 0;
      invoke_vi(416,($info|0)); //@line 577 "/checkout/src/libstd/panicking.rs"
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       break L1;
      }
     } else {
      $40 = HEAP32[9601]|0; //@line 578 "/checkout/src/libstd/panicking.rs"
      $41 = ((($36)) + 12|0); //@line 578 "/checkout/src/libstd/panicking.rs"
      $42 = HEAP32[$41>>2]|0; //@line 578 "/checkout/src/libstd/panicking.rs"
      __THREW__ = 0;
      invoke_vii($42|0,($40|0),($info|0)); //@line 578 "/checkout/src/libstd/panicking.rs"
      $43 = __THREW__; __THREW__ = 0;
      $44 = $43&1;
      if ($44) {
       break L1;
      }
     }
     $45 = HEAP32[(38396)>>2]|0;HEAP32[(38396)>>2] = (($45-1)|0); //@line 1531 "/checkout/src/libcore/sync/atomic.rs"
     (_pthread_rwlock_unlock((38364|0))|0); //@line 113 "/checkout/src/libstd/sys/unix/rwlock.rs"
     $46 = ($47>>>0)>(1); //@line 583 "/checkout/src/libstd/panicking.rs"
     if (!($46)) {
      _rust_panic_llvm_2B778CB6($0,$1); //@line 593 "/checkout/src/libstd/panicking.rs"
      // unreachable;
     }
     HEAP32[$_45>>2] = 8168; //@line 343 "/checkout/src/libcore/fmt/mod.rs"
     $48 = ((($_45)) + 4|0); //@line 343 "/checkout/src/libcore/fmt/mod.rs"
     HEAP32[$48>>2] = 1; //@line 343 "/checkout/src/libcore/fmt/mod.rs"
     $_4$sroa$0$0$$sroa_idx$i11 = ((($_45)) + 8|0); //@line 343 "/checkout/src/libcore/fmt/mod.rs"
     HEAP32[$_4$sroa$0$0$$sroa_idx$i11>>2] = 0; //@line 343 "/checkout/src/libcore/fmt/mod.rs"
     $49 = ((($_45)) + 16|0); //@line 343 "/checkout/src/libcore/fmt/mod.rs"
     HEAP32[$49>>2] = 38620; //@line 343 "/checkout/src/libcore/fmt/mod.rs"
     $50 = ((($_45)) + 20|0); //@line 343 "/checkout/src/libcore/fmt/mod.rs"
     HEAP32[$50>>2] = 0; //@line 343 "/checkout/src/libcore/fmt/mod.rs"
     __THREW__ = 0;
     invoke_vi(415,($_45|0)); //@line 588 "/checkout/src/libstd/panicking.rs"
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      break L1;
     }
     _llvm_trap(); //@line 590 "/checkout/src/libstd/panicking.rs"
     // unreachable; //@line 590 "/checkout/src/libstd/panicking.rs"
    }
   } while(0);
   __THREW__ = 0;
   invoke_viii(414,(21388|0),41,(8144|0)); //@line 59 "/checkout/src/libstd/sys/unix/rwlock.rs"
   $29 = __THREW__; __THREW__ = 0;
  }
 } while(0);
 $53 = ___cxa_find_matching_catch_2()|0;
 $54 = tempRet0;
 __ZN4core3ptr13drop_in_place17h5207d711a6957c39E_llvm_2B778CB6($msg); //@line 594 "/checkout/src/libstd/panicking.rs"
 ___resumeException($53|0);
 // unreachable;
}
function __ZN3std9panicking12default_hook17h2e9087424e5d7257E($info) {
 $info = $info|0;
 var $$cast = 0, $$fca$1$gep = 0, $$pre$i$i = 0, $$pre12$i1$i = 0, $$sink = 0, $$sink$in$phi$trans$insert$i2$i = 0, $$sink$sink = 0, $$sink8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_0$0$i40 = 0, $_20$0$i$i = 0, $_32$sroa$0$0 = 0, $_32$sroa$6$0 = 0, $_48 = 0, $_72$0$off0 = 0, $_72$1 = 0, $_72$2$off053 = 0, $col = 0;
 var $cond$i$i$i$i$i$i = 0, $def$0$sink$i = 0, $def$1$sink$i = 0, $err = 0, $extract$t = 0, $file = 0, $line = 0, $log_backtrace = 0, $msg = 0, $name = 0, $not$ = 0, $not$36 = 0, $not$37 = 0, $or$cond = 0, $personalityslot$sroa$0$0 = 0, $personalityslot$sroa$0$2 = 0, $personalityslot$sroa$0$354 = 0, $personalityslot$sroa$12$0 = 0, $personalityslot$sroa$12$2 = 0, $personalityslot$sroa$12$355 = 0;
 var $s = 0, $stderr = 0, $storemerge = 0, $switch$i = 0, $switch$i$i1 = 0, $switch$i$i3 = 0, $thread = 0, $write = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $s = sp + 88|0;
 $stderr = sp + 80|0;
 $_48 = sp;
 $write = sp + 56|0;
 $name = sp + 48|0;
 $thread = sp + 40|0;
 $err = sp + 97|0;
 $msg = sp + 32|0;
 $col = sp + 28|0;
 $line = sp + 24|0;
 $file = sp + 16|0;
 $log_backtrace = sp + 96|0;
 $0 = (__ZN45__LT_std__thread__local__os__Key_LT_T_GT__GT_3get17hcae762557156e778E(8080)|0); //@line 184 "/checkout/src/libstd/thread/local.rs"
 $1 = ($0|0)==(0|0); //@line 374 "/checkout/src/libstd/thread/local.rs"
 if ($1) {
  __ZN4core6result13unwrap_failed17h6c499c654b178840E(21076,57); //@line 809 "/checkout/src/libcore/result.rs"
  // unreachable;
 }
 $2 = HEAP32[$0>>2]|0; //@line 378 "/checkout/src/libstd/thread/local.rs"
 $switch$i$i1 = ($2|0)==(1); //@line 378 "/checkout/src/libstd/thread/local.rs"
 if ($switch$i$i1) {
  $$sink$in$phi$trans$insert$i2$i = ((($0)) + 4|0);
  $$pre$i$i = HEAP32[$$sink$in$phi$trans$insert$i2$i>>2]|0;
  $7 = ($$pre$i$i>>>0)>(1); //@line 348 "/checkout/src/libstd/panicking.rs"
  if ($7) {
   $storemerge = 2;
  } else {
   label = 7;
  }
 } else {
  $3 = $0; //@line 239 "/checkout/src/libcore/ptr.rs"
  $4 = $3; //@line 239 "/checkout/src/libcore/ptr.rs"
  HEAP32[$4>>2] = 1; //@line 239 "/checkout/src/libcore/ptr.rs"
  $5 = (($3) + 4)|0; //@line 239 "/checkout/src/libcore/ptr.rs"
  $6 = $5; //@line 239 "/checkout/src/libcore/ptr.rs"
  HEAP32[$6>>2] = 0; //@line 239 "/checkout/src/libcore/ptr.rs"
  $$pre12$i1$i = ((($0)) + 4|0);
  HEAP32[$$pre12$i1$i>>2] = 0; //@line 239 "/checkout/src/libcore/ptr.rs"
  label = 7;
 }
 if ((label|0) == 7) {
  $8 = (__ZN3std10sys_common9backtrace11log_enabled17hd6052bb35923f872E()|0); //@line 351 "/checkout/src/libstd/panicking.rs"
  $storemerge = $8;
 }
 HEAP8[$log_backtrace>>0] = $storemerge; //@line 351 "/checkout/src/libstd/panicking.rs"
 $9 = ((($info)) + 8|0); //@line 355 "/checkout/src/libstd/panicking.rs"
 $10 = HEAP32[$9>>2]|0; //@line 355 "/checkout/src/libstd/panicking.rs"
 $11 = ((($info)) + 12|0); //@line 355 "/checkout/src/libstd/panicking.rs"
 $12 = HEAP32[$11>>2]|0; //@line 355 "/checkout/src/libstd/panicking.rs"
 HEAP32[$file>>2] = $10; //@line 355 "/checkout/src/libstd/panicking.rs"
 $13 = ((($file)) + 4|0); //@line 355 "/checkout/src/libstd/panicking.rs"
 HEAP32[$13>>2] = $12; //@line 355 "/checkout/src/libstd/panicking.rs"
 $14 = ((($info)) + 16|0); //@line 356 "/checkout/src/libstd/panicking.rs"
 $15 = HEAP32[$14>>2]|0; //@line 356 "/checkout/src/libstd/panicking.rs"
 HEAP32[$line>>2] = $15; //@line 356 "/checkout/src/libstd/panicking.rs"
 $16 = ((($info)) + 20|0); //@line 357 "/checkout/src/libstd/panicking.rs"
 $17 = HEAP32[$16>>2]|0; //@line 357 "/checkout/src/libstd/panicking.rs"
 HEAP32[$col>>2] = $17; //@line 357 "/checkout/src/libstd/panicking.rs"
 $18 = HEAP32[$info>>2]|0; //@line 359 "/checkout/src/libstd/panicking.rs"
 $19 = ((($info)) + 4|0); //@line 359 "/checkout/src/libstd/panicking.rs"
 $20 = HEAP32[$19>>2]|0; //@line 359 "/checkout/src/libstd/panicking.rs"
 $21 = ((($20)) + 12|0); //@line 167 "/checkout/src/libcore/any.rs"
 $22 = HEAP32[$21>>2]|0; //@line 167 "/checkout/src/libcore/any.rs"
 $23 = (FUNCTION_TABLE_ii[$22 & 511]($18)|0); //@line 167 "/checkout/src/libcore/any.rs"
 $24 = tempRet0; //@line 167 "/checkout/src/libcore/any.rs"
 $25 = ($23|0)==(1890621284); //@line 348 "/checkout/src/libcore/any.rs"
 $26 = ($24|0)==(286299353); //@line 348 "/checkout/src/libcore/any.rs"
 $27 = $25 & $26; //@line 348 "/checkout/src/libcore/any.rs"
 if ($27) {
  $33 = HEAP32[$18>>2]|0; //@line 360 "/checkout/src/libstd/panicking.rs"
  $34 = ((($18)) + 4|0); //@line 360 "/checkout/src/libstd/panicking.rs"
  $35 = HEAP32[$34>>2]|0; //@line 360 "/checkout/src/libstd/panicking.rs"
  HEAP32[$msg>>2] = $33; //@line 360 "/checkout/src/libstd/panicking.rs"
  $$sink$sink = $35;
 } else {
  $28 = (FUNCTION_TABLE_ii[$22 & 511]($18)|0); //@line 167 "/checkout/src/libcore/any.rs"
  $29 = tempRet0; //@line 167 "/checkout/src/libcore/any.rs"
  $30 = ($28|0)==(364948211); //@line 348 "/checkout/src/libcore/any.rs"
  $31 = ($29|0)==(-1178862858); //@line 348 "/checkout/src/libcore/any.rs"
  $32 = $30 & $31; //@line 348 "/checkout/src/libcore/any.rs"
  if ($32) {
   $36 = HEAP32[$18>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
   $37 = ((($18)) + 8|0); //@line 1690 "/checkout/src/liballoc/vec.rs"
   $38 = HEAP32[$37>>2]|0; //@line 1690 "/checkout/src/liballoc/vec.rs"
   $$sink = $38;$$sink8 = $36;
  } else {
   $$sink = 8;$$sink8 = 21472;
  }
  HEAP32[$msg>>2] = $$sink8; //@line 361 "/checkout/src/libstd/panicking.rs"
  $$sink$sink = $$sink;
 }
 $39 = ((($msg)) + 4|0);
 HEAP32[$39>>2] = $$sink$sink;
 HEAP8[$err>>0] = 1; //@line 366 "/checkout/src/libstd/panicking.rs"
 $40 = (__ZN46__LT_std__thread__local__LocalKey_LT_T_GT__GT_8try_with17ha1e39309185d6fdbE(8992)|0); //@line 25 "/checkout/src/libstd/sys_common/thread_info.rs"
 HEAP32[$thread>>2] = $40; //@line 367 "/checkout/src/libstd/panicking.rs"
 $41 = ($40|0)==(0|0); //@line 246 "/checkout/src/libcore/option.rs"
 do {
  if ($41) {
   $53 = 0;$54 = 0;$55 = 0;
   label = 19;
  } else {
   $42 = ((($40)) + 16|0); //@line 1131 "/checkout/src/libstd/thread/mod.rs"
   $43 = HEAP32[$42>>2]|0; //@line 246 "/checkout/src/libcore/option.rs"
   $44 = ((($40)) + 20|0); //@line 563 "/checkout/src/libstd/ffi/c_str.rs"
   $45 = HEAP32[$44>>2]|0; //@line 563 "/checkout/src/libstd/ffi/c_str.rs"
   $46 = ($43|0)==(0|0); //@line 404 "/checkout/src/libcore/option.rs"
   if ($46) {
    $_32$sroa$0$0 = 0;$_32$sroa$6$0 = 0;
   } else {
    $47 = (($45) + -1)|0; //@line 1045 "/checkout/src/libstd/ffi/c_str.rs"
    $48 = ($45|0)==(0); //@line 875 "/checkout/src/libcore/slice/mod.rs"
    if ($48) {
     __THREW__ = 0;
     invoke_vii(409,($47|0),0); //@line 876 "/checkout/src/libcore/slice/mod.rs"
     $49 = __THREW__; __THREW__ = 0;
     break;
    } else {
     $_32$sroa$0$0 = $43;$_32$sroa$6$0 = $47;
    }
   }
   $53 = $_32$sroa$0$0;$54 = $_32$sroa$0$0;$55 = $_32$sroa$6$0;
   label = 19;
  }
 } while(0);
 do {
  if ((label|0) == 19) {
   $52 = ($53|0)==(0|0); //@line 357 "/checkout/src/libcore/option.rs"
   $def$0$sink$i = $52 ? 21480 : $54; //@line 357 "/checkout/src/libcore/option.rs"
   $def$1$sink$i = $52 ? 9 : $55; //@line 357 "/checkout/src/libcore/option.rs"
   HEAP32[$name>>2] = $def$0$sink$i; //@line 368 "/checkout/src/libstd/panicking.rs"
   $$fca$1$gep = ((($name)) + 4|0); //@line 368 "/checkout/src/libstd/panicking.rs"
   HEAP32[$$fca$1$gep>>2] = $def$1$sink$i; //@line 368 "/checkout/src/libstd/panicking.rs"
   HEAP32[$write>>2] = $name; //@line 370 "/checkout/src/libstd/panicking.rs"
   $56 = ((($write)) + 4|0); //@line 370 "/checkout/src/libstd/panicking.rs"
   HEAP32[$56>>2] = $msg; //@line 370 "/checkout/src/libstd/panicking.rs"
   $57 = ((($write)) + 8|0); //@line 370 "/checkout/src/libstd/panicking.rs"
   HEAP32[$57>>2] = $file; //@line 370 "/checkout/src/libstd/panicking.rs"
   $58 = ((($write)) + 12|0); //@line 370 "/checkout/src/libstd/panicking.rs"
   HEAP32[$58>>2] = $line; //@line 370 "/checkout/src/libstd/panicking.rs"
   $59 = ((($write)) + 16|0); //@line 370 "/checkout/src/libstd/panicking.rs"
   HEAP32[$59>>2] = $col; //@line 370 "/checkout/src/libstd/panicking.rs"
   $60 = ((($write)) + 20|0); //@line 370 "/checkout/src/libstd/panicking.rs"
   HEAP32[$60>>2] = $log_backtrace; //@line 370 "/checkout/src/libstd/panicking.rs"
   __THREW__ = 0;
   $61 = (invoke_ii(417,(8176|0))|0); //@line 184 "/checkout/src/libstd/thread/local.rs"
   $62 = __THREW__; __THREW__ = 0;
   $63 = $62&1;
   if (!($63)) {
    $64 = ($61|0)==(0|0); //@line 374 "/checkout/src/libstd/thread/local.rs"
    if ($64) {
     __THREW__ = 0;
     invoke_vii(413,(21076|0),57); //@line 809 "/checkout/src/libcore/result.rs"
     $72 = __THREW__; __THREW__ = 0;
     break;
    }
    $65 = HEAP32[$61>>2]|0; //@line 378 "/checkout/src/libstd/thread/local.rs"
    $switch$i$i3 = ($65|0)==(1); //@line 378 "/checkout/src/libstd/thread/local.rs"
    if ($switch$i$i3) {
     $69 = ((($61)) + 4|0); //@line 378 "/checkout/src/libstd/thread/local.rs"
     $_20$0$i$i = $69;
    } else {
     __THREW__ = 0;
     $66 = (invoke_iii(418,(8184|0),($61|0))|0); //@line 379 "/checkout/src/libstd/thread/local.rs"
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      break;
     } else {
      $_20$0$i$i = $66;
     }
    }
    $70 = HEAP32[$_20$0$i$i>>2]|0; //@line 240 "/checkout/src/libcore/cell.rs"
    $cond$i$i$i$i$i$i = ($70|0)==(0); //@line 1113 "/checkout/src/libcore/cell.rs"
    if (!($cond$i$i$i$i$i$i)) {
     __THREW__ = 0;
     invoke_vii(404,(20919|0),16); //@line 809 "/checkout/src/libcore/result.rs"
     $71 = __THREW__; __THREW__ = 0;
     break;
    }
    $73 = ((($_20$0$i$i)) + 4|0); //@line 803 "/checkout/src/libcore/cell.rs"
    $74 = $73; //@line 238 "/checkout/src/libcore/ptr.rs"
    $75 = $74; //@line 238 "/checkout/src/libcore/ptr.rs"
    $76 = HEAPU8[$75>>0]|(HEAPU8[$75+1>>0]<<8)|(HEAPU8[$75+2>>0]<<16)|(HEAPU8[$75+3>>0]<<24); //@line 238 "/checkout/src/libcore/ptr.rs"
    $77 = (($74) + 4)|0; //@line 238 "/checkout/src/libcore/ptr.rs"
    $78 = $77; //@line 238 "/checkout/src/libcore/ptr.rs"
    $79 = HEAPU8[$78>>0]|(HEAPU8[$78+1>>0]<<8)|(HEAPU8[$78+2>>0]<<16)|(HEAPU8[$78+3>>0]<<24); //@line 238 "/checkout/src/libcore/ptr.rs"
    HEAP8[$73>>0]=0&255;HEAP8[$73+1>>0]=(0>>8)&255;HEAP8[$73+2>>0]=(0>>16)&255;HEAP8[$73+3>>0]=0>>24; //@line 239 "/checkout/src/libcore/ptr.rs"
    HEAP8[$_20$0$i$i>>0]=0&255;HEAP8[$_20$0$i$i+1>>0]=(0>>8)&255;HEAP8[$_20$0$i$i+2>>0]=(0>>16)&255;HEAP8[$_20$0$i$i+3>>0]=0>>24; //@line 239 "/checkout/src/libcore/ptr.rs"
    $80 = HEAP8[$err>>0]|0; //@line 267 "/checkout/src/libcore/option.rs"
    $switch$i = ($80<<24>>24)==(1); //@line 267 "/checkout/src/libcore/option.rs"
    $81 = ((($err)) + 1|0); //@line 267 "/checkout/src/libcore/option.rs"
    $_0$0$i40 = $switch$i ? $81 : 0; //@line 267 "/checkout/src/libcore/option.rs"
    $82 = $_48; //@line 389 "/checkout/src/libstd/panicking.rs"
    $83 = $82; //@line 389 "/checkout/src/libstd/panicking.rs"
    HEAP32[$83>>2] = $76; //@line 389 "/checkout/src/libstd/panicking.rs"
    $84 = (($82) + 4)|0; //@line 389 "/checkout/src/libstd/panicking.rs"
    $85 = $84; //@line 389 "/checkout/src/libstd/panicking.rs"
    HEAP32[$85>>2] = $79; //@line 389 "/checkout/src/libstd/panicking.rs"
    $86 = ((($_48)) + 8|0); //@line 389 "/checkout/src/libstd/panicking.rs"
    HEAP32[$86>>2] = $_0$0$i40; //@line 389 "/checkout/src/libstd/panicking.rs"
    $87 = ($76|0)==(0); //@line 390 "/checkout/src/libstd/panicking.rs"
    $88 = $79; //@line 390 "/checkout/src/libstd/panicking.rs"
    do {
     if ($87) {
      $not$37 = ($_0$0$i40|0)==(0|0); //@line 397 "/checkout/src/libstd/panicking.rs"
      if ($not$37) {
       $_72$1 = 1;
       label = 40;
      } else {
       __THREW__ = 0;
       invoke_viii(419,($write|0),($86|0),(8192|0)); //@line 397 "/checkout/src/libstd/panicking.rs"
       $90 = __THREW__; __THREW__ = 0;
       $91 = $90&1;
       if ($91) {
        $121 = ___cxa_find_matching_catch_2()|0;
        $122 = tempRet0;
        $_72$2$off053 = 1;$personalityslot$sroa$0$354 = $121;$personalityslot$sroa$12$355 = $122;
        label = 29;
       } else {
        $_72$1 = 1;
        label = 40;
       }
      }
     } else {
      HEAP32[$stderr>>2] = $76; //@line 390 "/checkout/src/libstd/panicking.rs"
      $92 = ((($stderr)) + 4|0); //@line 390 "/checkout/src/libstd/panicking.rs"
      HEAP32[$92>>2] = $88; //@line 390 "/checkout/src/libstd/panicking.rs"
      $$cast = $76; //@line 391 "/checkout/src/libstd/panicking.rs"
      __THREW__ = 0;
      invoke_viii(419,($write|0),($$cast|0),($88|0)); //@line 391 "/checkout/src/libstd/panicking.rs"
      $93 = __THREW__; __THREW__ = 0;
      $94 = $93&1;
      if ($94) {
       $119 = ___cxa_find_matching_catch_2()|0;
       $120 = tempRet0;
       __ZN4core3ptr13drop_in_place17hd2dfd105bc4dd830E($stderr); //@line 399 "/checkout/src/libstd/panicking.rs"
       $_72$2$off053 = 0;$personalityslot$sroa$0$354 = $119;$personalityslot$sroa$12$355 = $120;
       label = 29;
       break;
      }
      HEAP32[$s>>2] = $76; //@line 392 "/checkout/src/libstd/panicking.rs"
      $95 = ((($s)) + 4|0); //@line 392 "/checkout/src/libstd/panicking.rs"
      HEAP32[$95>>2] = $79; //@line 392 "/checkout/src/libstd/panicking.rs"
      __THREW__ = 0;
      invoke_vii(420,(8184|0),($s|0)); //@line 393 "/checkout/src/libstd/panicking.rs"
      $96 = __THREW__; __THREW__ = 0;
      $97 = $96&1;
      if ($97) {
       $139 = ___cxa_find_matching_catch_2()|0;
       $140 = tempRet0;
       __ZN4core3ptr13drop_in_place17hc21b8e7c714aedc6E($s); //@line 396 "/checkout/src/libstd/panicking.rs"
       $_72$2$off053 = 0;$personalityslot$sroa$0$354 = $139;$personalityslot$sroa$12$355 = $140;
       label = 29;
       break;
      }
      $98 = HEAP32[$s>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
      $99 = ($98|0)==(0|0); //@line 59 "/checkout/src/libcore/ptr.rs"
      if (!($99)) {
       $100 = HEAP32[$95>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
       $101 = HEAP32[$100>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
       __THREW__ = 0;
       invoke_vi($101|0,($98|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
       $102 = __THREW__; __THREW__ = 0;
       $103 = $102&1;
       if ($103) {
        $109 = ___cxa_find_matching_catch_2()|0;
        $110 = tempRet0;
        __ZN5alloc4heap8box_free17hfd08cb36776ae052E_796($98,$100); //@line 59 "/checkout/src/libcore/ptr.rs"
        $_72$2$off053 = 0;$personalityslot$sroa$0$354 = $109;$personalityslot$sroa$12$355 = $110;
        label = 29;
        break;
       }
       $104 = ((($100)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
       $105 = HEAP32[$104>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
       $106 = ($105|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
       if (!($106)) {
        $107 = ((($100)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
        $108 = HEAP32[$107>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
        ___rust_dealloc($98,$105,$108); //@line 104 "/checkout/src/liballoc/heap.rs"
       }
      }
      $_72$1 = 0;
      label = 40;
     }
    } while(0);
    do {
     if ((label|0) == 29) {
      __ZN4core3ptr13drop_in_place17ha37d92841bbc0d35E($thread); //@line 400 "/checkout/src/libstd/panicking.rs"
      $_72$0$off0 = $_72$2$off053;$personalityslot$sroa$0$2 = $personalityslot$sroa$0$354;$personalityslot$sroa$12$2 = $personalityslot$sroa$12$355;
     }
     else if ((label|0) == 40) {
      $111 = HEAP32[$thread>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
      $112 = ($111|0)==(0|0); //@line 59 "/checkout/src/libcore/ptr.rs"
      if (!($112)) {
       $113 = HEAP32[$111>>2]|0;HEAP32[$111>>2] = (($113-1)|0); //@line 1529 "/checkout/src/libcore/sync/atomic.rs"
       $114 = ($113|0)==(1); //@line 933 "/checkout/src/liballoc/arc.rs"
       if ($114) {
        /* fence */; //@line 1706 "/checkout/src/libcore/sync/atomic.rs"
        __THREW__ = 0;
        invoke_vi(395,($thread|0)); //@line 968 "/checkout/src/liballoc/arc.rs"
        $115 = __THREW__; __THREW__ = 0;
        $116 = $115&1;
        if ($116) {
         $141 = ___cxa_find_matching_catch_2()|0;
         $142 = tempRet0;
         $extract$t = ($_72$1<<24>>24)!=(0);
         $_72$0$off0 = $extract$t;$personalityslot$sroa$0$2 = $141;$personalityslot$sroa$12$2 = $142;
         break;
        }
       }
      }
      $117 = HEAP32[$_48>>2]|0; //@line 400 "/checkout/src/libstd/panicking.rs"
      $not$36 = ($117|0)==(0|0); //@line 400 "/checkout/src/libstd/panicking.rs"
      $118 = ($_72$1<<24>>24)==(0); //@line 400 "/checkout/src/libstd/panicking.rs"
      $or$cond = $118 | $not$36; //@line 400 "/checkout/src/libstd/panicking.rs"
      if ($or$cond) {
       STACKTOP = sp;return; //@line 400 "/checkout/src/libstd/panicking.rs"
      }
      $123 = ((($_48)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
      $124 = HEAP32[$123>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
      $125 = HEAP32[$124>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
      __THREW__ = 0;
      invoke_vi($125|0,($117|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
      $126 = __THREW__; __THREW__ = 0;
      $127 = $126&1;
      if ($127) {
       $135 = ___cxa_find_matching_catch_2()|0;
       $136 = tempRet0;
       $137 = HEAP32[$_48>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
       $138 = HEAP32[$123>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
       __ZN5alloc4heap8box_free17hfd08cb36776ae052E_796($137,$138); //@line 59 "/checkout/src/libcore/ptr.rs"
       ___resumeException($135|0);
       // unreachable;
      }
      $128 = HEAP32[$123>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
      $129 = ((($128)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
      $130 = HEAP32[$129>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
      $131 = ($130|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
      if ($131) {
       STACKTOP = sp;return; //@line 400 "/checkout/src/libstd/panicking.rs"
      }
      $132 = HEAP32[$_48>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
      $133 = ((($128)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
      $134 = HEAP32[$133>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
      ___rust_dealloc($132,$130,$134); //@line 104 "/checkout/src/liballoc/heap.rs"
      STACKTOP = sp;return; //@line 400 "/checkout/src/libstd/panicking.rs"
     }
    } while(0);
    $89 = HEAP32[$_48>>2]|0; //@line 400 "/checkout/src/libstd/panicking.rs"
    $not$ = ($89|0)==(0|0); //@line 400 "/checkout/src/libstd/panicking.rs"
    if ($not$) {
     __ZN4core3ptr13drop_in_place17hc21b8e7c714aedc6E($_48); //@line 400 "/checkout/src/libstd/panicking.rs"
     $personalityslot$sroa$0$0 = $personalityslot$sroa$0$2;$personalityslot$sroa$12$0 = $personalityslot$sroa$12$2;
     ___resumeException($personalityslot$sroa$0$0|0);
     // unreachable;
    }
    if (!($_72$0$off0)) {
     $personalityslot$sroa$0$0 = $personalityslot$sroa$0$2;$personalityslot$sroa$12$0 = $personalityslot$sroa$12$2;
     ___resumeException($personalityslot$sroa$0$0|0);
     // unreachable;
    }
    __ZN4core3ptr13drop_in_place17hd2dfd105bc4dd830E($_48); //@line 400 "/checkout/src/libstd/panicking.rs"
    $personalityslot$sroa$0$0 = $personalityslot$sroa$0$2;$personalityslot$sroa$12$0 = $personalityslot$sroa$12$2;
    ___resumeException($personalityslot$sroa$0$0|0);
    // unreachable;
   }
  }
 } while(0);
 $50 = ___cxa_find_matching_catch_2()|0;
 $51 = tempRet0;
 __ZN4core3ptr13drop_in_place17ha37d92841bbc0d35E($thread); //@line 400 "/checkout/src/libstd/panicking.rs"
 $personalityslot$sroa$0$0 = $50;$personalityslot$sroa$12$0 = $51;
 ___resumeException($personalityslot$sroa$0$0|0);
 // unreachable;
}
function _rust_panic_llvm_2B778CB6($msg$0,$msg$1) {
 $msg$0 = $msg$0|0;
 $msg$1 = $msg$1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_16 = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$4$0$$sroa_idx2$i = 0, $_9 = 0, $code = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_16 = sp + 32|0;
 $_9 = sp + 8|0;
 $code = sp;
 $0 = $msg$0; //@line 608 "/checkout/src/libstd/panicking.rs"
 $1 = $msg$1; //@line 608 "/checkout/src/libstd/panicking.rs"
 $2 = (___rust_start_panic($0,$1)|0); //@line 608 "/checkout/src/libstd/panicking.rs"
 HEAP32[$code>>2] = $2; //@line 608 "/checkout/src/libstd/panicking.rs"
 HEAP32[$_16>>2] = $code; //@line 610 "/checkout/src/libstd/panicking.rs"
 $3 = ((($_16)) + 4|0); //@line 610 "/checkout/src/libstd/panicking.rs"
 HEAP32[$3>>2] = 290; //@line 610 "/checkout/src/libstd/panicking.rs"
 HEAP32[$_9>>2] = 8120; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $4 = ((($_9)) + 4|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$4>>2] = 1; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $_5$sroa$0$0$$sroa_idx$i = ((($_9)) + 8|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 11348; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $_5$sroa$4$0$$sroa_idx2$i = ((($_9)) + 12|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5$sroa$4$0$$sroa_idx2$i>>2] = 1; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $5 = ((($_9)) + 16|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$5>>2] = $_16; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $6 = ((($_9)) + 20|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$6>>2] = 1; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 __ZN3std10sys_common4util5abort17h2132d2528374fa19E($_9); //@line 610 "/checkout/src/libstd/panicking.rs"
 // unreachable; //@line 610 "/checkout/src/libstd/panicking.rs"
}
function __ZN4core3ptr13drop_in_place17ha37d92841bbc0d35E($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $1 = ($0|0)==(0|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 if ($1) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 $2 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($2-1)|0); //@line 1529 "/checkout/src/libcore/sync/atomic.rs"
 $3 = ($2|0)==(1); //@line 933 "/checkout/src/liballoc/arc.rs"
 if (!($3)) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 /* fence */; //@line 1706 "/checkout/src/libcore/sync/atomic.rs"
 __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h6b99c066bc6eaea1E($arg0); //@line 968 "/checkout/src/liballoc/arc.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN3std9panicking12default_hook28__u7b__u7b_closure_u7d__u7d_17h708b6147ebf57a19E($arg0,$err$0,$err$1) {
 $arg0 = $arg0|0;
 $err$0 = $err$0|0;
 $err$1 = $err$1|0;
 var $$sink2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $_12 = 0, $_3 = 0, $_4$sroa$0$0$$sroa_idx$i = 0, $_44 = 0, $_5 = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$4$0$$sroa_idx2$i = 0, $_51 = 0, $_53 = 0, $not$ = 0, $trunc = 0, $trunc$clear = 0;
 var $trunc26 = 0, $trunc26$clear = 0, $trunc27 = 0, $trunc27$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $_53 = sp + 88|0;
 $_51 = sp + 80|0;
 $_44 = sp + 72|0;
 $_12 = sp + 32|0;
 $_5 = sp + 8|0;
 $_3 = sp;
 $0 = HEAP32[$arg0>>2]|0; //@line 372 "/checkout/src/libstd/panicking.rs"
 $1 = ((($arg0)) + 4|0); //@line 372 "/checkout/src/libstd/panicking.rs"
 $2 = HEAP32[$1>>2]|0; //@line 372 "/checkout/src/libstd/panicking.rs"
 $3 = ((($arg0)) + 8|0); //@line 372 "/checkout/src/libstd/panicking.rs"
 $4 = HEAP32[$3>>2]|0; //@line 372 "/checkout/src/libstd/panicking.rs"
 $5 = ((($arg0)) + 12|0); //@line 372 "/checkout/src/libstd/panicking.rs"
 $6 = HEAP32[$5>>2]|0; //@line 372 "/checkout/src/libstd/panicking.rs"
 $7 = ((($arg0)) + 16|0); //@line 372 "/checkout/src/libstd/panicking.rs"
 $8 = HEAP32[$7>>2]|0; //@line 372 "/checkout/src/libstd/panicking.rs"
 HEAP32[$_12>>2] = $0; //@line 371 "/checkout/src/libstd/panicking.rs"
 $9 = ((($_12)) + 4|0); //@line 371 "/checkout/src/libstd/panicking.rs"
 HEAP32[$9>>2] = 400; //@line 371 "/checkout/src/libstd/panicking.rs"
 $10 = ((($_12)) + 8|0); //@line 371 "/checkout/src/libstd/panicking.rs"
 HEAP32[$10>>2] = $2; //@line 371 "/checkout/src/libstd/panicking.rs"
 $11 = ((($_12)) + 12|0); //@line 371 "/checkout/src/libstd/panicking.rs"
 HEAP32[$11>>2] = 400; //@line 371 "/checkout/src/libstd/panicking.rs"
 $12 = ((($_12)) + 16|0); //@line 371 "/checkout/src/libstd/panicking.rs"
 HEAP32[$12>>2] = $4; //@line 371 "/checkout/src/libstd/panicking.rs"
 $13 = ((($_12)) + 20|0); //@line 371 "/checkout/src/libstd/panicking.rs"
 HEAP32[$13>>2] = 400; //@line 371 "/checkout/src/libstd/panicking.rs"
 $14 = ((($_12)) + 24|0); //@line 371 "/checkout/src/libstd/panicking.rs"
 HEAP32[$14>>2] = $6; //@line 371 "/checkout/src/libstd/panicking.rs"
 $15 = ((($_12)) + 28|0); //@line 371 "/checkout/src/libstd/panicking.rs"
 HEAP32[$15>>2] = 290; //@line 371 "/checkout/src/libstd/panicking.rs"
 $16 = ((($_12)) + 32|0); //@line 371 "/checkout/src/libstd/panicking.rs"
 HEAP32[$16>>2] = $8; //@line 371 "/checkout/src/libstd/panicking.rs"
 $17 = ((($_12)) + 36|0); //@line 371 "/checkout/src/libstd/panicking.rs"
 HEAP32[$17>>2] = 290; //@line 371 "/checkout/src/libstd/panicking.rs"
 HEAP32[$_5>>2] = 8224; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $18 = ((($_5)) + 4|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$18>>2] = 6; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $_5$sroa$0$0$$sroa_idx$i = ((($_5)) + 8|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 12744; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $_5$sroa$4$0$$sroa_idx2$i = ((($_5)) + 12|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5$sroa$4$0$$sroa_idx2$i>>2] = 5; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $19 = ((($_5)) + 16|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$19>>2] = $_12; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $20 = ((($_5)) + 20|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$20>>2] = 5; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $21 = ((($err$1)) + 24|0); //@line 371 "/checkout/src/libstd/panicking.rs"
 $22 = HEAP32[$21>>2]|0; //@line 371 "/checkout/src/libstd/panicking.rs"
 FUNCTION_TABLE_viii[$22 & 511]($_3,$err$0,$_5); //@line 371 "/checkout/src/libstd/panicking.rs"
 $trunc = HEAP8[$_3>>0]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $trunc$clear = $trunc & 3; //@line 59 "/checkout/src/libcore/ptr.rs"
 switch ($trunc$clear<<24>>24) {
 case 0: case 1: case 3:  {
  break;
 }
 default: {
  $23 = ((($_3)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  $24 = HEAP32[$23>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $25 = HEAP32[$24>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $26 = ((($24)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  $27 = HEAP32[$26>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $28 = HEAP32[$27>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  __THREW__ = 0;
  invoke_vi($28|0,($25|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
  $29 = __THREW__; __THREW__ = 0;
  $30 = $29&1;
  if ($30) {
   $38 = ___cxa_find_matching_catch_2()|0;
   $39 = tempRet0;
   $40 = HEAP32[$24>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
   $41 = HEAP32[$26>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
   __ZN5alloc4heap8box_free17hb8be26a1f37cb671E_799($40,$41); //@line 59 "/checkout/src/libcore/ptr.rs"
   __ZN5alloc4heap8box_free17h0833f2b89912900bE_800($24); //@line 59 "/checkout/src/libcore/ptr.rs"
   ___resumeException($38|0);
   // unreachable;
  }
  $31 = HEAP32[$26>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $32 = ((($31)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
  $33 = HEAP32[$32>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
  $34 = ($33|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
  if (!($34)) {
   $35 = HEAP32[$24>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
   $36 = ((($31)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
   $37 = HEAP32[$36>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
   ___rust_dealloc($35,$33,$37); //@line 104 "/checkout/src/liballoc/heap.rs"
  }
  ___rust_dealloc($24,12,4); //@line 104 "/checkout/src/liballoc/heap.rs"
 }
 }
 $42 = ((($arg0)) + 20|0); //@line 380 "/checkout/src/libstd/panicking.rs"
 $43 = HEAP32[$42>>2]|0; //@line 380 "/checkout/src/libstd/panicking.rs"
 $44 = HEAP8[$43>>0]|0; //@line 380 "/checkout/src/libstd/panicking.rs"
 $not$ = ($44<<24>>24)==(4); //@line 380 "/checkout/src/libstd/panicking.rs"
 if (!($not$)) {
  __ZN3std10sys_common9backtrace5print17he52169ad7738d9b0E($_44,$err$0,$err$1,$44); //@line 381 "/checkout/src/libstd/panicking.rs"
  $trunc26 = HEAP8[$_44>>0]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $trunc26$clear = $trunc26 & 3; //@line 59 "/checkout/src/libcore/ptr.rs"
  switch ($trunc26$clear<<24>>24) {
  case 0: case 1: case 3:  {
   break;
  }
  default: {
   $46 = ((($_44)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
   $47 = HEAP32[$46>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
   $48 = HEAP32[$47>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
   $49 = ((($47)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
   $50 = HEAP32[$49>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
   $51 = HEAP32[$50>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
   __THREW__ = 0;
   invoke_vi($51|0,($48|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
   $52 = __THREW__; __THREW__ = 0;
   $53 = $52&1;
   if ($53) {
    $61 = ___cxa_find_matching_catch_2()|0;
    $62 = tempRet0;
    $63 = HEAP32[$47>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
    $64 = HEAP32[$49>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
    __ZN5alloc4heap8box_free17hb8be26a1f37cb671E_799($63,$64); //@line 59 "/checkout/src/libcore/ptr.rs"
    __ZN5alloc4heap8box_free17h0833f2b89912900bE_800($47); //@line 59 "/checkout/src/libcore/ptr.rs"
    ___resumeException($61|0);
    // unreachable;
   }
   $54 = HEAP32[$49>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
   $55 = ((($54)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
   $56 = HEAP32[$55>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
   $57 = ($56|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
   if (!($57)) {
    $58 = HEAP32[$47>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
    $59 = ((($54)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
    $60 = HEAP32[$59>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
    ___rust_dealloc($58,$56,$60); //@line 104 "/checkout/src/liballoc/heap.rs"
   }
   ___rust_dealloc($47,12,4); //@line 104 "/checkout/src/liballoc/heap.rs"
  }
  }
  STACKTOP = sp;return; //@line 386 "/checkout/src/libstd/panicking.rs"
 }
 $45 = HEAP8[21489]|0;if (($45<<24>>24) == 1) HEAP8[21489] = 0; //@line 1549 "/checkout/src/libcore/sync/atomic.rs"
 $$sink2$i$i = ($45<<24>>24)==(0);
 if ($$sink2$i$i) {
  STACKTOP = sp;return; //@line 386 "/checkout/src/libstd/panicking.rs"
 }
 HEAP32[$_53>>2] = 8272; //@line 343 "/checkout/src/libcore/fmt/mod.rs"
 $65 = ((($_53)) + 4|0); //@line 343 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$65>>2] = 1; //@line 343 "/checkout/src/libcore/fmt/mod.rs"
 $_4$sroa$0$0$$sroa_idx$i = ((($_53)) + 8|0); //@line 343 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_4$sroa$0$0$$sroa_idx$i>>2] = 0; //@line 343 "/checkout/src/libcore/fmt/mod.rs"
 $66 = ((($_53)) + 16|0); //@line 343 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$66>>2] = 38620; //@line 343 "/checkout/src/libcore/fmt/mod.rs"
 $67 = ((($_53)) + 20|0); //@line 343 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$67>>2] = 0; //@line 343 "/checkout/src/libcore/fmt/mod.rs"
 FUNCTION_TABLE_viii[$22 & 511]($_51,$err$0,$_53); //@line 383 "/checkout/src/libstd/panicking.rs"
 $trunc27 = HEAP8[$_51>>0]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $trunc27$clear = $trunc27 & 3; //@line 59 "/checkout/src/libcore/ptr.rs"
 switch ($trunc27$clear<<24>>24) {
 case 0: case 1: case 3:  {
  break;
 }
 default: {
  $68 = ((($_51)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  $69 = HEAP32[$68>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $70 = HEAP32[$69>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $71 = ((($69)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  $72 = HEAP32[$71>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $73 = HEAP32[$72>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  __THREW__ = 0;
  invoke_vi($73|0,($70|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
  $74 = __THREW__; __THREW__ = 0;
  $75 = $74&1;
  if ($75) {
   $83 = ___cxa_find_matching_catch_2()|0;
   $84 = tempRet0;
   $85 = HEAP32[$69>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
   $86 = HEAP32[$71>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
   __ZN5alloc4heap8box_free17hb8be26a1f37cb671E_799($85,$86); //@line 59 "/checkout/src/libcore/ptr.rs"
   __ZN5alloc4heap8box_free17h0833f2b89912900bE_800($69); //@line 59 "/checkout/src/libcore/ptr.rs"
   ___resumeException($83|0);
   // unreachable;
  }
  $76 = HEAP32[$71>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $77 = ((($76)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
  $78 = HEAP32[$77>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
  $79 = ($78|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
  if (!($79)) {
   $80 = HEAP32[$69>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
   $81 = ((($76)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
   $82 = HEAP32[$81>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
   ___rust_dealloc($80,$78,$82); //@line 104 "/checkout/src/liballoc/heap.rs"
  }
  ___rust_dealloc($69,12,4); //@line 104 "/checkout/src/liballoc/heap.rs"
 }
 }
 STACKTOP = sp;return; //@line 386 "/checkout/src/libstd/panicking.rs"
}
function __ZN5alloc4heap8box_free17hfd08cb36776ae052E_796($ptr$0,$ptr$1) {
 $ptr$0 = $ptr$0|0;
 $ptr$1 = $ptr$1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ptr$1)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $1 = HEAP32[$0>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
 $2 = ($1|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
 if ($2) {
  return; //@line 265 "/checkout/src/liballoc/heap.rs"
 }
 $3 = ((($ptr$1)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $4 = HEAP32[$3>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
 ___rust_dealloc($ptr$0,$1,$4); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 265 "/checkout/src/liballoc/heap.rs"
}
function __ZN4core3ptr13drop_in_place17hd2dfd105bc4dd830E($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $1 = ((($arg0)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $2 = HEAP32[$1>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $3 = HEAP32[$2>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 __THREW__ = 0;
 invoke_vi($3|0,($0|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  $15 = HEAP32[$arg0>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $16 = HEAP32[$1>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  __ZN5alloc4heap8box_free17hfd08cb36776ae052E_796($15,$16); //@line 59 "/checkout/src/libcore/ptr.rs"
  ___resumeException($13|0);
  // unreachable;
 }
 $6 = HEAP32[$1>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $7 = ((($6)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $8 = HEAP32[$7>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
 $9 = ($8|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
 if ($9) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 $10 = HEAP32[$arg0>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $11 = ((($6)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $12 = HEAP32[$11>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
 ___rust_dealloc($10,$8,$12); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr13drop_in_place17hc21b8e7c714aedc6E($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $1 = ($0|0)==(0|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 if ($1) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 $2 = ((($arg0)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $3 = HEAP32[$2>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $4 = HEAP32[$3>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 __THREW__ = 0;
 invoke_vi($4|0,($0|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  $16 = HEAP32[$arg0>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $17 = HEAP32[$2>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  __ZN5alloc4heap8box_free17hfd08cb36776ae052E_796($16,$17); //@line 59 "/checkout/src/libcore/ptr.rs"
  ___resumeException($14|0);
  // unreachable;
 }
 $7 = HEAP32[$2>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $8 = ((($7)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $9 = HEAP32[$8>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
 $10 = ($9|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
 if ($10) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 $11 = HEAP32[$arg0>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $12 = ((($7)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $13 = HEAP32[$12>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
 ___rust_dealloc($11,$9,$13); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN5alloc4heap8box_free17hb8be26a1f37cb671E_799($ptr$0,$ptr$1) {
 $ptr$0 = $ptr$0|0;
 $ptr$1 = $ptr$1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ptr$1)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $1 = HEAP32[$0>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
 $2 = ($1|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
 if ($2) {
  return; //@line 265 "/checkout/src/liballoc/heap.rs"
 }
 $3 = ((($ptr$1)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $4 = HEAP32[$3>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
 ___rust_dealloc($ptr$0,$1,$4); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 265 "/checkout/src/liballoc/heap.rs"
}
function __ZN5alloc4heap8box_free17h0833f2b89912900bE_800($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___rust_dealloc($ptr,12,4); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 265 "/checkout/src/liballoc/heap.rs"
}
function __ZN4core3ptr13drop_in_place17hcafc976be6edb559E($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_5write17hdd48e021e48a86b6E($0,$self,$buf$0,$buf$1) {
 $0 = $0|0;
 $self = $self|0;
 $buf$0 = $buf$0|0;
 $buf$1 = $buf$1|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$sroa$speculated$i$i$i = 0, $ret$i$sroa$0$0$i = 0, $ret$i$sroa$5$0$$sroa_idx$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($buf$1|0)>(-1); //@line 848 "/checkout/src/libcore/cmp.rs"
 $_0$0$sroa$speculated$i$i$i = $1 ? $buf$1 : 2147483647; //@line 478 "/checkout/src/libcore/cmp.rs"
 $2 = (_write(2,$buf$0,$_0$0$sroa$speculated$i$i$i)|0); //@line 104 "/checkout/src/libstd/sys/unix/fd.rs"
 $3 = ($2|0)==(-1); //@line 130 "/checkout/src/libstd/sys/unix/mod.rs"
 if ($3) {
  $4 = (___errno_location()|0); //@line 65 "/checkout/src/libstd/sys/unix/os.rs"
  $5 = HEAP32[$4>>2]|0; //@line 65 "/checkout/src/libstd/sys/unix/os.rs"
  $11 = $5;$8 = 0;$ret$i$sroa$0$0$i = 1;
 } else {
  $11 = 0;$8 = $2;$ret$i$sroa$0$0$i = 0;
 }
 HEAP32[$0>>2] = $ret$i$sroa$0$0$i; //@line 52 "/checkout/src/libstd/sys/unix/stdio.rs"
 $ret$i$sroa$5$0$$sroa_idx$i = ((($0)) + 4|0); //@line 52 "/checkout/src/libstd/sys/unix/stdio.rs"
 $6 = $ret$i$sroa$5$0$$sroa_idx$i; //@line 52 "/checkout/src/libstd/sys/unix/stdio.rs"
 $7 = $6; //@line 52 "/checkout/src/libstd/sys/unix/stdio.rs"
 HEAP32[$7>>2] = $8; //@line 52 "/checkout/src/libstd/sys/unix/stdio.rs"
 $9 = (($6) + 4)|0; //@line 52 "/checkout/src/libstd/sys/unix/stdio.rs"
 $10 = $9; //@line 52 "/checkout/src/libstd/sys/unix/stdio.rs"
 HEAP32[$10>>2] = $11; //@line 52 "/checkout/src/libstd/sys/unix/stdio.rs"
 return; //@line 49 "/checkout/src/libstd/io/impls.rs"
}
function __ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_5flush17h50d536f2312d1f08E($0,$self) {
 $0 = $0|0;
 $self = $self|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0] = 3; //@line 56 "/checkout/src/libstd/sys/unix/stdio.rs"
 return; //@line 52 "/checkout/src/libstd/io/impls.rs"
}
function __ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_9write_all17h9ed703d30b73142aE($0,$self,$buf$0,$buf$1) {
 $0 = $0|0;
 $self = $self|0;
 $buf$0 = $buf$0|0;
 $buf$1 = $buf$1|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$self>>2]|0; //@line 56 "/checkout/src/libstd/io/impls.rs"
 __ZN3std2io5Write9write_all17h8167ba58fb9df2caE($0,$1,$buf$0,$buf$1); //@line 56 "/checkout/src/libstd/io/impls.rs"
 return; //@line 57 "/checkout/src/libstd/io/impls.rs"
}
function __ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_9write_fmt17h3ae5995d2dbde838E($0,$self,$fmt) {
 $0 = $0|0;
 $self = $self|0;
 $fmt = $fmt|0;
 var $1 = 0, $_4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_4 = sp;
 $1 = HEAP32[$self>>2]|0; //@line 61 "/checkout/src/libstd/io/impls.rs"
 ;HEAP32[$_4>>2]=HEAP32[$fmt>>2]|0;HEAP32[$_4+4>>2]=HEAP32[$fmt+4>>2]|0;HEAP32[$_4+8>>2]=HEAP32[$fmt+8>>2]|0;HEAP32[$_4+12>>2]=HEAP32[$fmt+12>>2]|0;HEAP32[$_4+16>>2]=HEAP32[$fmt+16>>2]|0;HEAP32[$_4+20>>2]=HEAP32[$fmt+20>>2]|0; //@line 61 "/checkout/src/libstd/io/impls.rs"
 __ZN3std2io5Write9write_fmt17h185a03b372d63affE($0,$1,$_4); //@line 61 "/checkout/src/libstd/io/impls.rs"
 STACKTOP = sp;return; //@line 62 "/checkout/src/libstd/io/impls.rs"
}
function __ZN3std9panicking12LOCAL_STDERR7__getit17hc864a5f35cd7ceb2E() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN45__LT_std__thread__local__os__Key_LT_T_GT__GT_3get17h2a1a454ef25fc2a0E(8176)|0); //@line 184 "/checkout/src/libstd/thread/local.rs"
 return ($0|0); //@line 185 "/checkout/src/libstd/thread/local.rs"
}
function __ZN3std9panicking12LOCAL_STDERR6__init17h9d92863ba16b6716E($0) {
 $0 = $0|0;
 var $$sroa_idx2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0; //@line 548 "/checkout/src/libcore/cell.rs"
 $$sroa_idx2 = ((($0)) + 4|0); //@line 548 "/checkout/src/libcore/cell.rs"
 HEAP32[$$sroa_idx2>>2] = 0; //@line 548 "/checkout/src/libcore/cell.rs"
 return; //@line 169 "/checkout/src/libstd/thread/local.rs"
}
function __ZN3std9panicking3try7do_call17haca0c419784eb1fbE_llvm_2B778CB6($data) {
 $data = $data|0;
 var $0 = 0, $tmp$0$copyload$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tmp$0$copyload$i1 = HEAP32[$data>>2]|0; //@line 288 "/checkout/src/libcore/ptr.rs"
 $0 = HEAP32[$tmp$0$copyload$i1>>2]|0; //@line 59 "/checkout/src/libstd/rt.rs"
 __ZN3std10sys_common9backtrace28__rust_begin_short_backtrace17h3239eacb99147be6E($0); //@line 59 "/checkout/src/libstd/rt.rs"
 return; //@line 482 "/checkout/src/libstd/panicking.rs"
}
function _rust_begin_unwind($msg,$file,$line,$col) {
 $msg = $msg|0;
 $file = $file|0;
 $line = $line|0;
 $col = $col|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $_9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_9 = sp;
 $0 = HEAP32[$file>>2]|0; //@line 498 "/checkout/src/libstd/panicking.rs"
 $1 = ((($file)) + 4|0); //@line 498 "/checkout/src/libstd/panicking.rs"
 $2 = HEAP32[$1>>2]|0; //@line 498 "/checkout/src/libstd/panicking.rs"
 HEAP32[$_9>>2] = $0; //@line 498 "/checkout/src/libstd/panicking.rs"
 $3 = ((($_9)) + 4|0); //@line 498 "/checkout/src/libstd/panicking.rs"
 HEAP32[$3>>2] = $2; //@line 498 "/checkout/src/libstd/panicking.rs"
 $4 = ((($_9)) + 8|0); //@line 498 "/checkout/src/libstd/panicking.rs"
 HEAP32[$4>>2] = $line; //@line 498 "/checkout/src/libstd/panicking.rs"
 $5 = ((($_9)) + 12|0); //@line 498 "/checkout/src/libstd/panicking.rs"
 HEAP32[$5>>2] = $col; //@line 498 "/checkout/src/libstd/panicking.rs"
 __ZN3std9panicking15begin_panic_fmt17h4cb2c5614efe15b0E($msg,$_9); //@line 498 "/checkout/src/libstd/panicking.rs"
 // unreachable; //@line 498 "/checkout/src/libstd/panicking.rs"
}
function __ZN3std9panicking15begin_panic_fmt17h4cb2c5614efe15b0E($msg,$file_line_col) {
 $msg = $msg|0;
 $file_line_col = $file_line_col|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $_1$sroa$4$0$$sroa_idx$i = 0, $_1$sroa$5$0$$sroa_idx$i = 0, $_6 = 0, $_7 = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_7 = sp + 40|0;
 $_6 = sp + 16|0;
 $s = sp;
 HEAP32[$s>>2] = (1); //@line 384 "/checkout/src/liballoc/string.rs"
 $_1$sroa$4$0$$sroa_idx$i = ((($s)) + 4|0); //@line 384 "/checkout/src/liballoc/string.rs"
 HEAP32[$_1$sroa$4$0$$sroa_idx$i>>2] = 0; //@line 384 "/checkout/src/liballoc/string.rs"
 $_1$sroa$5$0$$sroa_idx$i = ((($s)) + 8|0); //@line 384 "/checkout/src/liballoc/string.rs"
 HEAP32[$_1$sroa$5$0$$sroa_idx$i>>2] = 0; //@line 384 "/checkout/src/liballoc/string.rs"
 ;HEAP32[$_6>>2]=HEAP32[$msg>>2]|0;HEAP32[$_6+4>>2]=HEAP32[$msg+4>>2]|0;HEAP32[$_6+8>>2]=HEAP32[$msg+8>>2]|0;HEAP32[$_6+12>>2]=HEAP32[$msg+12>>2]|0;HEAP32[$_6+16>>2]=HEAP32[$msg+16>>2]|0;HEAP32[$_6+20>>2]=HEAP32[$msg+20>>2]|0; //@line 521 "/checkout/src/libstd/panicking.rs"
 __THREW__ = 0;
 (invoke_iii(421,($s|0),($_6|0))|0); //@line 521 "/checkout/src/libstd/panicking.rs"
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $2 = ___cxa_find_matching_catch_2()|0;
  $3 = tempRet0;
  __ZN4core3ptr13drop_in_place17hda15ddb7c8ed5c05E_llvm_2B778CB6($s); //@line 523 "/checkout/src/libstd/panicking.rs"
  ___resumeException($2|0);
  // unreachable;
 } else {
  ;HEAP32[$_7>>2]=HEAP32[$s>>2]|0;HEAP32[$_7+4>>2]=HEAP32[$s+4>>2]|0;HEAP32[$_7+8>>2]=HEAP32[$s+8>>2]|0; //@line 522 "/checkout/src/libstd/panicking.rs"
  __ZN3std9panicking11begin_panic17hef8ff79cade8a211E_llvm_2B778CB6($_7,$file_line_col); //@line 522 "/checkout/src/libstd/panicking.rs"
  // unreachable;
 }
}
function __ZN3std9panicking11begin_panic17hef8ff79cade8a211E_llvm_2B778CB6($msg,$file_line_col) {
 $msg = $msg|0;
 $file_line_col = $file_line_col|0;
 var $0 = 0, $1 = 0, $_5$i$i$i$i = 0, $_5$sroa$0 = 0, $err$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $err$i$i$i = sp + 24|0;
 $_5$i$i$i$i = sp + 12|0;
 $_5$sroa$0 = sp;
 ;HEAP32[$_5$sroa$0>>2]=HEAP32[$msg>>2]|0;HEAP32[$_5$sroa$0+4>>2]=HEAP32[$msg+4>>2]|0;HEAP32[$_5$sroa$0+8>>2]=HEAP32[$msg+8>>2]|0; //@line 538 "/checkout/src/libstd/panicking.rs"
 $0 = (___rust_alloc(12,4,$err$i$i$i)|0); //@line 84 "/checkout/src/liballoc/heap.rs"
 $1 = ($0|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
 if ($1) {
  ___rust_oom($_5$i$i$i$i); //@line 98 "/checkout/src/liballoc/heap.rs"
  // unreachable; //@line 98 "/checkout/src/liballoc/heap.rs"
 } else {
  ;HEAP32[$0>>2]=HEAP32[$_5$sroa$0>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_5$sroa$0+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_5$sroa$0+8>>2]|0; //@line 242 "/checkout/src/liballoc/boxed.rs"
  __ZN3std9panicking20rust_panic_with_hook17h3cd58f4b456754d8E($0,8104,$file_line_col); //@line 538 "/checkout/src/libstd/panicking.rs"
  // unreachable; //@line 538 "/checkout/src/libstd/panicking.rs"
 }
}
function __ZN4core3ptr13drop_in_place17h4a3f90cf332318dcE_llvm_CBBB2DFF($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($arg0)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $1 = HEAP8[$0>>0]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $2 = ($1<<24>>24)==(3); //@line 59 "/checkout/src/libcore/ptr.rs"
 if ($2) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 __ZN4core3ptr13drop_in_place17hb434eb5d905d2ad2E_llvm_CBBB2DFF($0); //@line 59 "/checkout/src/libcore/ptr.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr13drop_in_place17hb434eb5d905d2ad2E_llvm_CBBB2DFF($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $switch$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$arg0>>0]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $switch$i = ($0&255)<(2); //@line 59 "/checkout/src/libcore/ptr.rs"
 if ($switch$i) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 $1 = ((($arg0)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $2 = HEAP32[$1>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $3 = HEAP32[$2>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $4 = ((($2)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $5 = HEAP32[$4>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $6 = HEAP32[$5>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 __THREW__ = 0;
 invoke_vi($6|0,($3|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  $18 = HEAP32[$2>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $19 = HEAP32[$4>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  __ZN5alloc4heap8box_free17hb8be26a1f37cb671E_llvm_CBBB2DFF($18,$19); //@line 59 "/checkout/src/libcore/ptr.rs"
  $20 = HEAP32[$1>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  __ZN5alloc4heap8box_free17h0833f2b89912900bE_llvm_CBBB2DFF($20); //@line 59 "/checkout/src/libcore/ptr.rs"
  ___resumeException($16|0);
  // unreachable;
 }
 $9 = HEAP32[$4>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $10 = ((($9)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $11 = HEAP32[$10>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
 $12 = ($11|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
 if (!($12)) {
  $13 = HEAP32[$2>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $14 = ((($9)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
  $15 = HEAP32[$14>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
  ___rust_dealloc($13,$11,$15); //@line 104 "/checkout/src/liballoc/heap.rs"
 }
 $21 = HEAP32[$1>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 ___rust_dealloc($21,12,4); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN5alloc4heap8box_free17hb8be26a1f37cb671E_llvm_CBBB2DFF($ptr$0,$ptr$1) {
 $ptr$0 = $ptr$0|0;
 $ptr$1 = $ptr$1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ptr$1)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $1 = HEAP32[$0>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
 $2 = ($1|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
 if ($2) {
  return; //@line 265 "/checkout/src/liballoc/heap.rs"
 }
 $3 = ((($ptr$1)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $4 = HEAP32[$3>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
 ___rust_dealloc($ptr$0,$1,$4); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 265 "/checkout/src/liballoc/heap.rs"
}
function __ZN5alloc4heap8box_free17h0833f2b89912900bE_llvm_CBBB2DFF($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___rust_dealloc($ptr,12,4); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 265 "/checkout/src/liballoc/heap.rs"
}
function __ZN4core3ptr13drop_in_place17h7099c24ba8976e54E_llvm_CBBB2DFF($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$arg0>>0]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $1 = ($0<<24>>24)==(3); //@line 59 "/checkout/src/libcore/ptr.rs"
 if ($1) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 __ZN4core3ptr13drop_in_place17hb434eb5d905d2ad2E_llvm_CBBB2DFF($arg0); //@line 59 "/checkout/src/libcore/ptr.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr13drop_in_place17he59d55dacb57c09bE_llvm_CBBB2DFF($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $cond = ($0|0)==(0); //@line 59 "/checkout/src/libcore/ptr.rs"
 if ($cond) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 $1 = ((($arg0)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 __ZN4core3ptr13drop_in_place17hb434eb5d905d2ad2E_llvm_CBBB2DFF($1); //@line 59 "/checkout/src/libcore/ptr.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN46__LT_std__io__buffered__BufWriter_LT_W_GT__GT_9flush_buf17h90971989611601ddE_llvm_CBBB2DFF($0,$self) {
 $0 = $0|0;
 $self = $self|0;
 var $$sink = 0, $$sink$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $_0$0$sroa$speculated$i$i$i$i = 0, $_33 = 0, $buf$1$sink$i = 0, $cond = 0, $cond5 = 0, $eh$lpad$body79$index2Z2D = 0;
 var $eh$lpad$body79$indexZ2D = 0, $personalityslot$sroa$0$0 = 0, $personalityslot$sroa$10$0 = 0, $phitmp$i$i = 0, $r = 0, $ret = 0, $ret$sroa$0$0$i45$i = 0, $ret$sroa$5$0$i$off042$i = 0, $ret$sroa$5$0$i$off3243$i = 0, $switch = 0, $switch$i = 0, $switch$i$i73 = 0, $trunc$i = 0, $trunc$i$clear = 0, $written$0126 = 0, $written$0128 = 0, $written$1151 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_33 = sp + 8|0;
 $r = sp + 16|0;
 $ret = sp;
 $1 = ((($self)) + 8|0); //@line 1161 "/checkout/src/liballoc/vec.rs"
 $2 = HEAP32[$1>>2]|0; //@line 1161 "/checkout/src/liballoc/vec.rs"
 HEAP8[$ret>>0] = 3; //@line 427 "/checkout/src/libstd/io/buffered.rs"
 $3 = ($2|0)==(0); //@line 428 "/checkout/src/libstd/io/buffered.rs"
 L1: do {
  if (!($3)) {
   $4 = ((($self)) + 13|0);
   $5 = ((($self)) + 12|0);
   $6 = ((($r)) + 4|0);
   $7 = ((($r)) + 8|0);
   $8 = ((($r)) + 5|0);
   $written$0128 = 0;
   L3: while(1) {
    HEAP8[$4>>0] = 1; //@line 429 "/checkout/src/libstd/io/buffered.rs"
    $10 = HEAP8[$5>>0]|0; //@line 267 "/checkout/src/libcore/option.rs"
    $11 = ($10<<24>>24)==(2); //@line 267 "/checkout/src/libcore/option.rs"
    if ($11) {
     label = 5;
     break;
    }
    $13 = HEAP32[$1>>2]|0; //@line 1690 "/checkout/src/liballoc/vec.rs"
    $14 = ($13>>>0)<($written$0128>>>0); //@line 873 "/checkout/src/libcore/slice/mod.rs"
    if ($14) {
     label = 8;
     break;
    }
    $16 = (($13) - ($written$0128))|0; //@line 863 "/checkout/src/libcore/slice/mod.rs"
    $switch$i = ($10<<24>>24)==(1); //@line 101 "/checkout/src/libstd/io/stdio.rs"
    do {
     if ($switch$i) {
      HEAP32[$r>>2] = 0; //@line 102 "/checkout/src/libstd/io/stdio.rs"
      $$sink$i = 4;$buf$1$sink$i = $16;
     } else {
      $17 = HEAP32[$self>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
      $18 = (($17) + ($written$0128)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
      $19 = ($16|0)>(-1); //@line 848 "/checkout/src/libcore/cmp.rs"
      $_0$0$sroa$speculated$i$i$i$i = $19 ? $16 : 2147483647; //@line 478 "/checkout/src/libcore/cmp.rs"
      $20 = (_write(1,$18,$_0$0$sroa$speculated$i$i$i$i)|0); //@line 104 "/checkout/src/libstd/sys/unix/fd.rs"
      $21 = ($20|0)==(-1); //@line 130 "/checkout/src/libstd/sys/unix/mod.rs"
      if ($21) {
       $22 = (___errno_location()|0); //@line 65 "/checkout/src/libstd/sys/unix/os.rs"
       $23 = HEAP32[$22>>2]|0; //@line 65 "/checkout/src/libstd/sys/unix/os.rs"
       $phitmp$i$i = ($23|0)==(9); //@line 337 "/checkout/src/libstd/io/error.rs"
       if ($phitmp$i$i) {
        HEAP32[$r>>2] = 0; //@line 125 "/checkout/src/libstd/io/stdio.rs"
        $$sink$i = 4;$buf$1$sink$i = $16;
        break;
       } else {
        $ret$sroa$0$0$i45$i = 1;$ret$sroa$5$0$i$off042$i = 0;$ret$sroa$5$0$i$off3243$i = $23;
       }
      } else {
       $ret$sroa$0$0$i45$i = 0;$ret$sroa$5$0$i$off042$i = $20;$ret$sroa$5$0$i$off3243$i = 0;
      }
      HEAP32[$r>>2] = $ret$sroa$0$0$i45$i; //@line 126 "/checkout/src/libstd/io/stdio.rs"
      HEAP32[$6>>2] = $ret$sroa$5$0$i$off042$i; //@line 126 "/checkout/src/libstd/io/stdio.rs"
      $$sink$i = 8;$buf$1$sink$i = $ret$sroa$5$0$i$off3243$i;
     }
    } while(0);
    $24 = (($r) + ($$sink$i)|0);
    HEAP32[$24>>2] = $buf$1$sink$i;
    HEAP8[$4>>0] = 0; //@line 431 "/checkout/src/libstd/io/buffered.rs"
    $25 = HEAP32[$r>>2]|0; //@line 434 "/checkout/src/libstd/io/buffered.rs"
    $switch = ($25|0)==(1); //@line 434 "/checkout/src/libstd/io/buffered.rs"
    if ($switch) {
     $trunc$i = HEAP8[$6>>0]|0; //@line 504 "/checkout/src/libstd/io/error.rs"
     $trunc$i$clear = $trunc$i & 3; //@line 504 "/checkout/src/libstd/io/error.rs"
     switch ($trunc$i$clear<<24>>24) {
     case 0:  {
      $36 = HEAP32[$7>>2]|0; //@line 504 "/checkout/src/libstd/io/error.rs"
      $cond = ($36|0)==(4); //@line 98 "/checkout/src/libstd/sys/unix/mod.rs"
      if (!($cond)) {
       label = 18;
       break L3;
      }
      break;
     }
     case 1:  {
      $$sink = $8;
      label = 24;
      break;
     }
     case 2:  {
      $37 = HEAP32[$7>>2]|0; //@line 505 "/checkout/src/libstd/io/error.rs"
      $38 = ((($37)) + 8|0); //@line 505 "/checkout/src/libstd/io/error.rs"
      $$sink = $38;
      label = 24;
      break;
     }
     default: {
      label = 21;
      break L3;
     }
     }
     if ((label|0) == 24) {
      label = 0;
      $39 = HEAP8[$$sink>>0]|0;
      $40 = ($39<<24>>24)==(15); //@line 91 "/checkout/src/libstd/io/error.rs"
      if (!($40)) {
       label = 18;
       break;
      }
     }
     $switch$i$i73 = ($trunc$i&255)<(2); //@line 59 "/checkout/src/libcore/ptr.rs"
     if ($switch$i$i73) {
      $written$1151 = $written$0128;
     } else {
      $47 = HEAP32[$7>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
      $48 = HEAP32[$47>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
      $49 = ((($47)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
      $50 = HEAP32[$49>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
      $51 = HEAP32[$50>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
      __THREW__ = 0;
      invoke_vi($51|0,($48|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
      $52 = __THREW__; __THREW__ = 0;
      $53 = $52&1;
      if ($53) {
       label = 30;
       break;
      }
      $54 = HEAP32[$49>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
      $55 = ((($54)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
      $56 = HEAP32[$55>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
      $57 = ($56|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
      if (!($57)) {
       $58 = HEAP32[$47>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
       $59 = ((($54)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
       $60 = HEAP32[$59>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
       ___rust_dealloc($58,$56,$60); //@line 104 "/checkout/src/liballoc/heap.rs"
      }
      ___rust_dealloc($47,12,4); //@line 104 "/checkout/src/liballoc/heap.rs"
      $written$1151 = $written$0128;
     }
    } else {
     $29 = HEAP32[$6>>2]|0; //@line 434 "/checkout/src/libstd/io/buffered.rs"
     $cond5 = ($29|0)==(0); //@line 434 "/checkout/src/libstd/io/buffered.rs"
     if ($cond5) {
      label = 16;
      break;
     }
     $28 = (($29) + ($written$0128))|0; //@line 439 "/checkout/src/libstd/io/buffered.rs"
     $written$1151 = $28;
    }
    $65 = ($written$1151>>>0)<($2>>>0); //@line 428 "/checkout/src/libstd/io/buffered.rs"
    if ($65) {
     $written$0128 = $written$1151;
    } else {
     $written$0126 = $written$1151;
     label = 3;
     break;
    }
   }
   do {
    if ((label|0) == 5) {
     __THREW__ = 0;
     invoke_vi(297,(8280|0)); //@line 20 "/checkout/src/libcore/macros.rs"
     $12 = __THREW__; __THREW__ = 0;
     label = 40;
    }
    else if ((label|0) == 8) {
     __THREW__ = 0;
     invoke_vii(422,($written$0128|0),($13|0)); //@line 874 "/checkout/src/libcore/slice/mod.rs"
     $15 = __THREW__; __THREW__ = 0;
     label = 40;
    }
    else if ((label|0) == 16) {
     __THREW__ = 0;
     invoke_viiii(423,($_33|0),14,(21708|0),33); //@line 435 "/checkout/src/libstd/io/buffered.rs"
     $26 = __THREW__; __THREW__ = 0;
     $27 = $26&1;
     if (!($27)) {
      $41 = $_33; //@line 435 "/checkout/src/libstd/io/buffered.rs"
      $42 = $41; //@line 435 "/checkout/src/libstd/io/buffered.rs"
      $43 = HEAP32[$42>>2]|0; //@line 435 "/checkout/src/libstd/io/buffered.rs"
      $44 = (($41) + 4)|0; //@line 435 "/checkout/src/libstd/io/buffered.rs"
      $45 = $44; //@line 435 "/checkout/src/libstd/io/buffered.rs"
      $46 = HEAP32[$45>>2]|0; //@line 435 "/checkout/src/libstd/io/buffered.rs"
      $87 = $43;$90 = $46;
      label = 39;
      break;
     }
     $83 = ___cxa_find_matching_catch_2()|0;
     $84 = tempRet0;
     __ZN4core3ptr13drop_in_place17he59d55dacb57c09bE_llvm_CBBB2DFF($r); //@line 444 "/checkout/src/libstd/io/buffered.rs"
     $personalityslot$sroa$0$0 = $83;$personalityslot$sroa$10$0 = $84;
     __ZN4core3ptr13drop_in_place17h7099c24ba8976e54E_llvm_CBBB2DFF($ret); //@line 449 "/checkout/src/libstd/io/buffered.rs"
     ___resumeException($personalityslot$sroa$0$0|0);
     // unreachable;
    }
    else if ((label|0) == 18) {
     $30 = $6; //@line 441 "/checkout/src/libstd/io/buffered.rs"
     $31 = $30; //@line 441 "/checkout/src/libstd/io/buffered.rs"
     $32 = HEAP32[$31>>2]|0; //@line 441 "/checkout/src/libstd/io/buffered.rs"
     $33 = (($30) + 4)|0; //@line 441 "/checkout/src/libstd/io/buffered.rs"
     $34 = $33; //@line 441 "/checkout/src/libstd/io/buffered.rs"
     $35 = HEAP32[$34>>2]|0; //@line 441 "/checkout/src/libstd/io/buffered.rs"
     $87 = $32;$90 = $35;
     label = 39;
    }
    else if ((label|0) == 21) {
     // unreachable; //@line 508 "/checkout/src/libstd/io/error.rs"
    }
    else if ((label|0) == 30) {
     $61 = ___cxa_find_matching_catch_2()|0;
     $62 = tempRet0;
     $63 = HEAP32[$47>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
     $64 = HEAP32[$49>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
     __ZN5alloc4heap8box_free17hb8be26a1f37cb671E_llvm_CBBB2DFF($63,$64); //@line 59 "/checkout/src/libcore/ptr.rs"
     __ZN5alloc4heap8box_free17h0833f2b89912900bE_llvm_CBBB2DFF($47); //@line 59 "/checkout/src/libcore/ptr.rs"
     $eh$lpad$body79$index2Z2D = $62;$eh$lpad$body79$indexZ2D = $61;
    }
   } while(0);
   if ((label|0) == 39) {
    $85 = $ret; //@line 441 "/checkout/src/libstd/io/buffered.rs"
    $86 = $85; //@line 441 "/checkout/src/libstd/io/buffered.rs"
    HEAP32[$86>>2] = $87; //@line 441 "/checkout/src/libstd/io/buffered.rs"
    $88 = (($85) + 4)|0; //@line 441 "/checkout/src/libstd/io/buffered.rs"
    $89 = $88; //@line 441 "/checkout/src/libstd/io/buffered.rs"
    HEAP32[$89>>2] = $90; //@line 441 "/checkout/src/libstd/io/buffered.rs"
    $written$0126 = $written$0128;
    label = 3;
   }
   do {
    if ((label|0) == 3) {
     $9 = ($written$0126|0)==(0); //@line 445 "/checkout/src/libstd/io/buffered.rs"
     if ($9) {
      break L1;
     }
     $66 = HEAP32[$1>>2]|0; //@line 1161 "/checkout/src/liballoc/vec.rs"
     $67 = ($66>>>0)<($written$0126>>>0); //@line 2 "<assert macros>"
     if ($67) {
      __THREW__ = 0;
      invoke_vi(297,(8856|0)); //@line 3 "<panic macros>"
      $68 = __THREW__; __THREW__ = 0;
      label = 40;
      break;
     }
     HEAP32[$1>>2] = 0; //@line 678 "/checkout/src/liballoc/vec.rs"
     $69 = (($66) - ($written$0126))|0; //@line 1122 "/checkout/src/liballoc/vec.rs"
     $70 = ($69|0)==(0); //@line 2485 "/checkout/src/liballoc/vec.rs"
     if ($70) {
      break L1;
     }
     $71 = HEAP32[$self>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
     $72 = (($71) + ($written$0126)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     _memmove(($71|0),($72|0),($69|0))|0; //@line 2493 "/checkout/src/liballoc/vec.rs"
     HEAP32[$1>>2] = $69; //@line 678 "/checkout/src/liballoc/vec.rs"
     break L1;
    }
   } while(0);
   if ((label|0) == 40) {
    $91 = ___cxa_find_matching_catch_2()|0;
    $92 = tempRet0;
    $eh$lpad$body79$index2Z2D = $92;$eh$lpad$body79$indexZ2D = $91;
   }
   $personalityslot$sroa$0$0 = $eh$lpad$body79$indexZ2D;$personalityslot$sroa$10$0 = $eh$lpad$body79$index2Z2D;
   __ZN4core3ptr13drop_in_place17h7099c24ba8976e54E_llvm_CBBB2DFF($ret); //@line 449 "/checkout/src/libstd/io/buffered.rs"
   ___resumeException($personalityslot$sroa$0$0|0);
   // unreachable;
  }
 } while(0);
 $73 = $ret; //@line 448 "/checkout/src/libstd/io/buffered.rs"
 $74 = $73; //@line 448 "/checkout/src/libstd/io/buffered.rs"
 $75 = HEAP32[$74>>2]|0; //@line 448 "/checkout/src/libstd/io/buffered.rs"
 $76 = (($73) + 4)|0; //@line 448 "/checkout/src/libstd/io/buffered.rs"
 $77 = $76; //@line 448 "/checkout/src/libstd/io/buffered.rs"
 $78 = HEAP32[$77>>2]|0; //@line 448 "/checkout/src/libstd/io/buffered.rs"
 $79 = $0; //@line 448 "/checkout/src/libstd/io/buffered.rs"
 $80 = $79; //@line 448 "/checkout/src/libstd/io/buffered.rs"
 HEAP32[$80>>2] = $75; //@line 448 "/checkout/src/libstd/io/buffered.rs"
 $81 = (($79) + 4)|0; //@line 448 "/checkout/src/libstd/io/buffered.rs"
 $82 = $81; //@line 448 "/checkout/src/libstd/io/buffered.rs"
 HEAP32[$82>>2] = $78; //@line 448 "/checkout/src/libstd/io/buffered.rs"
 STACKTOP = sp;return; //@line 449 "/checkout/src/libstd/io/buffered.rs"
}
function __ZN79__LT_std__io__buffered__BufWriter_LT_W_GT__u20_as_u20_core__ops__drop__Drop_GT_4drop17h116b7d9a9829a2cfE($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_r = 0, $not$$i = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_r = sp;
 $0 = ((($self)) + 12|0); //@line 552 "/checkout/src/libstd/io/buffered.rs"
 $1 = HEAP8[$0>>0]|0; //@line 194 "/checkout/src/libcore/option.rs"
 $not$$i = ($1<<24>>24)==(2); //@line 193 "/checkout/src/libcore/option.rs"
 if ($not$$i) {
  STACKTOP = sp;return; //@line 556 "/checkout/src/libstd/io/buffered.rs"
 }
 $2 = ((($self)) + 13|0); //@line 552 "/checkout/src/libstd/io/buffered.rs"
 $3 = HEAP8[$2>>0]|0; //@line 552 "/checkout/src/libstd/io/buffered.rs"
 $4 = ($3<<24>>24)==(0); //@line 552 "/checkout/src/libstd/io/buffered.rs"
 if (!($4)) {
  STACKTOP = sp;return; //@line 556 "/checkout/src/libstd/io/buffered.rs"
 }
 __ZN46__LT_std__io__buffered__BufWriter_LT_W_GT__GT_9flush_buf17h90971989611601ddE_llvm_CBBB2DFF($_r,$self); //@line 554 "/checkout/src/libstd/io/buffered.rs"
 $trunc = HEAP8[$_r>>0]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $trunc$clear = $trunc & 3; //@line 59 "/checkout/src/libcore/ptr.rs"
 switch ($trunc$clear<<24>>24) {
 case 0: case 1: case 3:  {
  break;
 }
 default: {
  $5 = ((($_r)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  $6 = HEAP32[$5>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $7 = HEAP32[$6>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $8 = ((($6)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  $9 = HEAP32[$8>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $10 = HEAP32[$9>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  __THREW__ = 0;
  invoke_vi($10|0,($7|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   $20 = ___cxa_find_matching_catch_2()|0;
   $21 = tempRet0;
   $22 = HEAP32[$6>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
   $23 = HEAP32[$8>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
   __ZN5alloc4heap8box_free17hb8be26a1f37cb671E_llvm_CBBB2DFF($22,$23); //@line 59 "/checkout/src/libcore/ptr.rs"
   __ZN5alloc4heap8box_free17h0833f2b89912900bE_llvm_CBBB2DFF($6); //@line 59 "/checkout/src/libcore/ptr.rs"
   ___resumeException($20|0);
   // unreachable;
  }
  $13 = HEAP32[$8>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $14 = ((($13)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
  $15 = HEAP32[$14>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
  $16 = ($15|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
  if (!($16)) {
   $17 = HEAP32[$6>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
   $18 = ((($13)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
   $19 = HEAP32[$18>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
   ___rust_dealloc($17,$15,$19); //@line 104 "/checkout/src/liballoc/heap.rs"
  }
  ___rust_dealloc($6,12,4); //@line 104 "/checkout/src/liballoc/heap.rs"
 }
 }
 STACKTOP = sp;return; //@line 556 "/checkout/src/libstd/io/buffered.rs"
}
function __ZN73__LT_std__io__buffered__LineWriter_LT_W_GT__u20_as_u20_std__io__Write_GT_5write17h3c860f13644f7f7fE($0,$self,$buf$0,$buf$1) {
 $0 = $0|0;
 $self = $self|0;
 $buf$0 = $buf$0|0;
 $buf$1 = $buf$1|0;
 var $$sink = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_16 = 0, $_2$i$i = 0, $_2$i$i1 = 0, $_24$sroa$0$0$copyload = 0, $_24$sroa$5$0$_2$sroa$0$0$$sroa_idx$i$sroa_idx = 0, $_25 = 0, $_44$sroa$534$0 = 0, $_51 = 0, $cond$i51 = 0, $or$cond = 0, $or$cond89 = 0, $switch = 0, $switch$i$i54 = 0, $switch11 = 0, $switch12 = 0, $trunc = 0;
 var $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_2$i$i1 = sp + 8|0;
 $_2$i$i = sp;
 $_51 = sp + 36|0;
 $_25 = sp + 24|0;
 $_16 = sp + 16|0;
 $1 = ((($self)) + 16|0); //@line 817 "/checkout/src/libstd/io/buffered.rs"
 $2 = HEAP8[$1>>0]|0; //@line 817 "/checkout/src/libstd/io/buffered.rs"
 $3 = ($2<<24>>24)==(0); //@line 817 "/checkout/src/libstd/io/buffered.rs"
 if (!($3)) {
  __ZN46__LT_std__io__buffered__BufWriter_LT_W_GT__GT_9flush_buf17h90971989611601ddE_llvm_CBBB2DFF($_2$i$i,$self); //@line 525 "/checkout/src/libstd/io/buffered.rs"
  $4 = HEAP8[$_2$i$i>>0]|0; //@line 621 "/checkout/src/libcore/result.rs"
  $5 = ($4<<24>>24)==(3); //@line 621 "/checkout/src/libcore/result.rs"
  do {
   if ($5) {
    $6 = ((($self)) + 12|0); //@line 483 "/checkout/src/libstd/io/buffered.rs"
    $7 = HEAP8[$6>>0]|0; //@line 267 "/checkout/src/libcore/option.rs"
    $8 = ($7<<24>>24)==(2); //@line 267 "/checkout/src/libcore/option.rs"
    if ($8) {
     __ZN4core9panicking5panic17h9fa3414033a56a4dE(8280); //@line 20 "/checkout/src/libcore/macros.rs"
     // unreachable;
    } else {
     break;
    }
   } else {
    $9 = $_2$i$i; //@line 622 "/checkout/src/libcore/result.rs"
    $10 = $9; //@line 622 "/checkout/src/libcore/result.rs"
    $11 = HEAP32[$10>>2]|0; //@line 622 "/checkout/src/libcore/result.rs"
    $12 = (($9) + 4)|0; //@line 622 "/checkout/src/libcore/result.rs"
    $13 = $12; //@line 622 "/checkout/src/libcore/result.rs"
    $14 = HEAP32[$13>>2]|0; //@line 622 "/checkout/src/libcore/result.rs"
    $15 = $11 & 255; //@line 853 "/checkout/src/libstd/io/buffered.rs"
    $16 = ($15|0)==(3); //@line 853 "/checkout/src/libstd/io/buffered.rs"
    $17 = (0)==(0); //@line 853 "/checkout/src/libstd/io/buffered.rs"
    $18 = $16 & $17; //@line 853 "/checkout/src/libstd/io/buffered.rs"
    if (!($18)) {
     HEAP32[$0>>2] = 1; //@line 1180 "/checkout/src/libcore/result.rs"
     $19 = ((($0)) + 4|0); //@line 1180 "/checkout/src/libcore/result.rs"
     $20 = $19; //@line 1180 "/checkout/src/libcore/result.rs"
     $21 = $20; //@line 1180 "/checkout/src/libcore/result.rs"
     HEAP32[$21>>2] = $11; //@line 1180 "/checkout/src/libcore/result.rs"
     $22 = (($20) + 4)|0; //@line 1180 "/checkout/src/libcore/result.rs"
     $23 = $22; //@line 1180 "/checkout/src/libcore/result.rs"
     HEAP32[$23>>2] = $14; //@line 1180 "/checkout/src/libcore/result.rs"
     STACKTOP = sp;return; //@line 850 "/checkout/src/libstd/io/buffered.rs"
    }
   }
  } while(0);
  HEAP8[$1>>0] = 0; //@line 854 "/checkout/src/libstd/io/buffered.rs"
 }
 __ZN3std10sys_common6memchr8fallback7memrchr17h71ab3b18b1bc9f7dE($_16,10,$buf$0,$buf$1); //@line 53 "/checkout/src/libstd/sys/unix/memchr.rs"
 $24 = HEAP32[$_16>>2]|0; //@line 825 "/checkout/src/libstd/io/buffered.rs"
 $switch = ($24|0)==(1); //@line 825 "/checkout/src/libstd/io/buffered.rs"
 if (!($switch)) {
  __ZN72__LT_std__io__buffered__BufWriter_LT_W_GT__u20_as_u20_std__io__Write_GT_5write17h5466636b8cd21651E($0,$self,$buf$0,$buf$1); //@line 826 "/checkout/src/libstd/io/buffered.rs"
  STACKTOP = sp;return; //@line 850 "/checkout/src/libstd/io/buffered.rs"
 }
 $25 = ((($_16)) + 4|0); //@line 825 "/checkout/src/libstd/io/buffered.rs"
 $26 = HEAP32[$25>>2]|0; //@line 825 "/checkout/src/libstd/io/buffered.rs"
 $27 = (($26) + 1)|0; //@line 835 "/checkout/src/libstd/io/buffered.rs"
 $28 = ($27>>>0)>($buf$1>>>0); //@line 875 "/checkout/src/libcore/slice/mod.rs"
 if ($28) {
  __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($27,$buf$1); //@line 876 "/checkout/src/libcore/slice/mod.rs"
  // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
 }
 __ZN72__LT_std__io__buffered__BufWriter_LT_W_GT__u20_as_u20_std__io__Write_GT_5write17h5466636b8cd21651E($_25,$self,$buf$0,$27); //@line 835 "/checkout/src/libstd/io/buffered.rs"
 $_24$sroa$0$0$copyload = HEAP32[$_25>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
 $_24$sroa$5$0$_2$sroa$0$0$$sroa_idx$i$sroa_idx = ((($_25)) + 4|0); //@line 1172 "/checkout/src/libcore/result.rs"
 $29 = $_24$sroa$5$0$_2$sroa$0$0$$sroa_idx$i$sroa_idx; //@line 1172 "/checkout/src/libcore/result.rs"
 $30 = $29; //@line 1172 "/checkout/src/libcore/result.rs"
 $31 = HEAP32[$30>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
 $32 = (($29) + 4)|0; //@line 1172 "/checkout/src/libcore/result.rs"
 $33 = $32; //@line 1172 "/checkout/src/libcore/result.rs"
 $34 = HEAP32[$33>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
 $switch11 = ($_24$sroa$0$0$copyload|0)==(1); //@line 835 "/checkout/src/libstd/io/buffered.rs"
 if ($switch11) {
  HEAP32[$0>>2] = 1; //@line 1180 "/checkout/src/libcore/result.rs"
  $35 = ((($0)) + 4|0); //@line 1180 "/checkout/src/libcore/result.rs"
  $36 = $35; //@line 1180 "/checkout/src/libcore/result.rs"
  $37 = $36; //@line 1180 "/checkout/src/libcore/result.rs"
  HEAP32[$37>>2] = $31; //@line 1180 "/checkout/src/libcore/result.rs"
  $38 = (($36) + 4)|0; //@line 1180 "/checkout/src/libcore/result.rs"
  $39 = $38; //@line 1180 "/checkout/src/libcore/result.rs"
  HEAP32[$39>>2] = $34; //@line 1180 "/checkout/src/libcore/result.rs"
  STACKTOP = sp;return; //@line 850 "/checkout/src/libstd/io/buffered.rs"
 }
 HEAP8[$1>>0] = 1; //@line 836 "/checkout/src/libstd/io/buffered.rs"
 __ZN46__LT_std__io__buffered__BufWriter_LT_W_GT__GT_9flush_buf17h90971989611601ddE_llvm_CBBB2DFF($_2$i$i1,$self); //@line 525 "/checkout/src/libstd/io/buffered.rs"
 $68 = HEAP8[$_2$i$i1>>0]|0; //@line 621 "/checkout/src/libcore/result.rs"
 $69 = ($68<<24>>24)==(3); //@line 621 "/checkout/src/libcore/result.rs"
 do {
  if ($69) {
   $70 = ((($self)) + 12|0); //@line 483 "/checkout/src/libstd/io/buffered.rs"
   $71 = HEAP8[$70>>0]|0; //@line 267 "/checkout/src/libcore/option.rs"
   $72 = ($71<<24>>24)==(2); //@line 267 "/checkout/src/libcore/option.rs"
   if ($72) {
    __ZN4core9panicking5panic17h9fa3414033a56a4dE(8280); //@line 20 "/checkout/src/libcore/macros.rs"
    // unreachable;
   } else {
    label = 29;
    break;
   }
  } else {
   $73 = $_2$i$i1; //@line 622 "/checkout/src/libcore/result.rs"
   $74 = $73; //@line 622 "/checkout/src/libcore/result.rs"
   $75 = HEAP32[$74>>2]|0; //@line 622 "/checkout/src/libcore/result.rs"
   $76 = (($73) + 4)|0; //@line 622 "/checkout/src/libcore/result.rs"
   $77 = $76; //@line 622 "/checkout/src/libcore/result.rs"
   $78 = HEAP32[$77>>2]|0; //@line 622 "/checkout/src/libcore/result.rs"
   $79 = $75 & 255; //@line 853 "/checkout/src/libstd/io/buffered.rs"
   $80 = ($79|0)==(3); //@line 853 "/checkout/src/libstd/io/buffered.rs"
   $81 = (0)==(0); //@line 853 "/checkout/src/libstd/io/buffered.rs"
   $82 = $80 & $81; //@line 853 "/checkout/src/libstd/io/buffered.rs"
   if ($82) {
    label = 29;
   } else {
    $83 = $75&255; //@line 1180 "/checkout/src/libcore/result.rs"
    $84 = $78; //@line 1180 "/checkout/src/libcore/result.rs"
    $_44$sroa$534$0 = $84;$trunc = $83;
   }
  }
 } while(0);
 if ((label|0) == 29) {
  HEAP8[$1>>0] = 0; //@line 854 "/checkout/src/libstd/io/buffered.rs"
  $_44$sroa$534$0 = 0;$trunc = 3;
 }
 $85 = ($trunc<<24>>24)!=(3); //@line 317 "/checkout/src/libcore/result.rs"
 $86 = ($31|0)!=($27|0); //@line 837 "/checkout/src/libstd/io/buffered.rs"
 $or$cond = $86 | $85; //@line 837 "/checkout/src/libstd/io/buffered.rs"
 $trunc$clear = $trunc & 3; //@line 59 "/checkout/src/libcore/ptr.rs"
 switch ($trunc$clear<<24>>24) {
 case 0: case 1: case 3:  {
  break;
 }
 default: {
  $87 = HEAP32[$_44$sroa$534$0>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $88 = ((($_44$sroa$534$0)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  $89 = HEAP32[$88>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $90 = HEAP32[$89>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  __THREW__ = 0;
  invoke_vi($90|0,($87|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
  $91 = __THREW__; __THREW__ = 0;
  $92 = $91&1;
  if ($92) {
   $100 = ___cxa_find_matching_catch_2()|0;
   $101 = tempRet0;
   $102 = HEAP32[$_44$sroa$534$0>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
   $103 = HEAP32[$88>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
   __ZN5alloc4heap8box_free17hb8be26a1f37cb671E_llvm_CBBB2DFF($102,$103); //@line 59 "/checkout/src/libcore/ptr.rs"
   __ZN5alloc4heap8box_free17h0833f2b89912900bE_llvm_CBBB2DFF($_44$sroa$534$0); //@line 59 "/checkout/src/libcore/ptr.rs"
   ___resumeException($100|0);
   // unreachable;
  }
  $93 = HEAP32[$88>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $94 = ((($93)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
  $95 = HEAP32[$94>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
  $96 = ($95|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
  if (!($96)) {
   $97 = HEAP32[$_44$sroa$534$0>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
   $98 = ((($93)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
   $99 = HEAP32[$98>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
   ___rust_dealloc($97,$95,$99); //@line 104 "/checkout/src/liballoc/heap.rs"
  }
  ___rust_dealloc($_44$sroa$534$0,12,4); //@line 104 "/checkout/src/liballoc/heap.rs"
 }
 }
 if ($or$cond) {
  HEAP32[$0>>2] = 0; //@line 838 "/checkout/src/libstd/io/buffered.rs"
  $67 = ((($0)) + 4|0); //@line 838 "/checkout/src/libstd/io/buffered.rs"
  HEAP32[$67>>2] = $31; //@line 838 "/checkout/src/libstd/io/buffered.rs"
  STACKTOP = sp;return; //@line 850 "/checkout/src/libstd/io/buffered.rs"
 }
 $40 = (($buf$0) + ($27)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
 $41 = (($buf$1) - ($27))|0; //@line 863 "/checkout/src/libcore/slice/mod.rs"
 __ZN72__LT_std__io__buffered__BufWriter_LT_W_GT__u20_as_u20_std__io__Write_GT_5write17h5466636b8cd21651E($_51,$self,$40,$41); //@line 846 "/checkout/src/libstd/io/buffered.rs"
 $42 = HEAP32[$_51>>2]|0; //@line 847 "/checkout/src/libstd/io/buffered.rs"
 $switch12 = ($42|0)!=(1); //@line 847 "/checkout/src/libstd/io/buffered.rs"
 $43 = ((($_51)) + 4|0); //@line 847 "/checkout/src/libstd/io/buffered.rs"
 $44 = HEAP32[$43>>2]|0; //@line 847 "/checkout/src/libstd/io/buffered.rs"
 $45 = $switch12 ? $44 : 0; //@line 847 "/checkout/src/libstd/io/buffered.rs"
 $$sink = (($45) + ($27))|0; //@line 847 "/checkout/src/libstd/io/buffered.rs"
 HEAP32[$0>>2] = 0;
 $46 = ((($0)) + 4|0);
 HEAP32[$46>>2] = $$sink;
 $cond$i51 = ($42|0)==(0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $47 = $44&255; //@line 59 "/checkout/src/libcore/ptr.rs"
 $switch$i$i54 = ($47&255)<(2); //@line 59 "/checkout/src/libcore/ptr.rs"
 $or$cond89 = $cond$i51 | $switch$i$i54; //@line 59 "/checkout/src/libcore/ptr.rs"
 if (!($or$cond89)) {
  $48 = ((($_51)) + 8|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  $49 = HEAP32[$48>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $50 = HEAP32[$49>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $51 = ((($49)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  $52 = HEAP32[$51>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $53 = HEAP32[$52>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  __THREW__ = 0;
  invoke_vi($53|0,($50|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
  $54 = __THREW__; __THREW__ = 0;
  $55 = $54&1;
  if ($55) {
   $63 = ___cxa_find_matching_catch_2()|0;
   $64 = tempRet0;
   $65 = HEAP32[$49>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
   $66 = HEAP32[$51>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
   __ZN5alloc4heap8box_free17hb8be26a1f37cb671E_llvm_CBBB2DFF($65,$66); //@line 59 "/checkout/src/libcore/ptr.rs"
   __ZN5alloc4heap8box_free17h0833f2b89912900bE_llvm_CBBB2DFF($49); //@line 59 "/checkout/src/libcore/ptr.rs"
   ___resumeException($63|0);
   // unreachable;
  }
  $56 = HEAP32[$51>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $57 = ((($56)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
  $58 = HEAP32[$57>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
  $59 = ($58|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
  if (!($59)) {
   $60 = HEAP32[$49>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
   $61 = ((($56)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
   $62 = HEAP32[$61>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
   ___rust_dealloc($60,$58,$62); //@line 104 "/checkout/src/liballoc/heap.rs"
  }
  ___rust_dealloc($49,12,4); //@line 104 "/checkout/src/liballoc/heap.rs"
 }
 STACKTOP = sp;return; //@line 850 "/checkout/src/libstd/io/buffered.rs"
}
function __ZN72__LT_std__io__buffered__BufWriter_LT_W_GT__u20_as_u20_std__io__Write_GT_5write17h5466636b8cd21651E($0,$self,$buf$0,$buf$1) {
 $0 = $0|0;
 $self = $self|0;
 $buf$0 = $buf$0|0;
 $buf$1 = $buf$1|0;
 var $$pre = 0, $$sink$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$sroa$speculated$i$i$i$i = 0, $_14 = 0, $_5$sroa$6$0$$sroa_cast$sroa_idx$i = 0;
 var $buf$1$sink$i = 0, $phitmp$i$i = 0, $r = 0, $ret$sroa$0$0$i45$i = 0, $ret$sroa$5$0$i$off042$i = 0, $ret$sroa$5$0$i$off3243$i = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $r = sp + 8|0;
 $_14 = sp;
 $1 = ((($self)) + 8|0); //@line 1161 "/checkout/src/liballoc/vec.rs"
 $2 = HEAP32[$1>>2]|0; //@line 1161 "/checkout/src/liballoc/vec.rs"
 $3 = (($2) + ($buf$1))|0; //@line 512 "/checkout/src/libstd/io/buffered.rs"
 $4 = ((($self)) + 4|0); //@line 210 "/checkout/src/liballoc/raw_vec.rs"
 $5 = HEAP32[$4>>2]|0; //@line 210 "/checkout/src/liballoc/raw_vec.rs"
 $6 = ($3>>>0)>($5>>>0); //@line 512 "/checkout/src/libstd/io/buffered.rs"
 do {
  if ($6) {
   __ZN46__LT_std__io__buffered__BufWriter_LT_W_GT__GT_9flush_buf17h90971989611601ddE_llvm_CBBB2DFF($_14,$self); //@line 513 "/checkout/src/libstd/io/buffered.rs"
   $7 = $_14; //@line 1172 "/checkout/src/libcore/result.rs"
   $8 = $7; //@line 1172 "/checkout/src/libcore/result.rs"
   $9 = HEAP32[$8>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
   $10 = (($7) + 4)|0; //@line 1172 "/checkout/src/libcore/result.rs"
   $11 = $10; //@line 1172 "/checkout/src/libcore/result.rs"
   $12 = HEAP32[$11>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
   $13 = $9&255; //@line 1172 "/checkout/src/libcore/result.rs"
   $14 = ($13<<24>>24)==(3); //@line 513 "/checkout/src/libstd/io/buffered.rs"
   if ($14) {
    $$pre = HEAP32[$4>>2]|0;
    $21 = $$pre;
    break;
   }
   HEAP32[$0>>2] = 1; //@line 1180 "/checkout/src/libcore/result.rs"
   $15 = ((($0)) + 4|0); //@line 1180 "/checkout/src/libcore/result.rs"
   $16 = $15; //@line 1180 "/checkout/src/libcore/result.rs"
   $17 = $16; //@line 1180 "/checkout/src/libcore/result.rs"
   HEAP32[$17>>2] = $9; //@line 1180 "/checkout/src/libcore/result.rs"
   $18 = (($16) + 4)|0; //@line 1180 "/checkout/src/libcore/result.rs"
   $19 = $18; //@line 1180 "/checkout/src/libcore/result.rs"
   HEAP32[$19>>2] = $12; //@line 1180 "/checkout/src/libcore/result.rs"
   STACKTOP = sp;return; //@line 523 "/checkout/src/libstd/io/buffered.rs"
  } else {
   $21 = $5;
  }
 } while(0);
 $20 = ($21>>>0)>($buf$1>>>0); //@line 515 "/checkout/src/libstd/io/buffered.rs"
 if ($20) {
  $30 = HEAP32[$1>>2]|0; //@line 461 "/checkout/src/liballoc/vec.rs"
  __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_7reserve17hbf70593baa5057a1E($self,$30,$buf$1); //@line 461 "/checkout/src/liballoc/vec.rs"
  $31 = HEAP32[$1>>2]|0; //@line 1161 "/checkout/src/liballoc/vec.rs"
  $32 = (($31) + ($buf$1))|0; //@line 1902 "/checkout/src/liballoc/vec.rs"
  HEAP32[$1>>2] = $32; //@line 678 "/checkout/src/liballoc/vec.rs"
  $33 = HEAP32[$self>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
  $34 = (($33) + ($31)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  _memcpy(($34|0),($buf$0|0),($buf$1|0))|0; //@line 672 "/checkout/src/libcore/slice/mod.rs"
  HEAP32[$0>>2] = 0; //@line 264 "/checkout/src/libstd/io/impls.rs"
  $35 = ((($0)) + 4|0); //@line 264 "/checkout/src/libstd/io/impls.rs"
  HEAP32[$35>>2] = $buf$1; //@line 264 "/checkout/src/libstd/io/impls.rs"
  STACKTOP = sp;return; //@line 523 "/checkout/src/libstd/io/buffered.rs"
 }
 $22 = ((($self)) + 13|0); //@line 516 "/checkout/src/libstd/io/buffered.rs"
 HEAP8[$22>>0] = 1; //@line 516 "/checkout/src/libstd/io/buffered.rs"
 $23 = ((($self)) + 12|0); //@line 517 "/checkout/src/libstd/io/buffered.rs"
 $trunc = HEAP8[$23>>0]|0; //@line 267 "/checkout/src/libcore/option.rs"
 $trunc$clear = $trunc & 3; //@line 334 "/checkout/src/libcore/option.rs"
 L12: do {
  switch ($trunc$clear<<24>>24) {
  case 2:  {
   __ZN4core9panicking5panic17h9fa3414033a56a4dE(8280); //@line 20 "/checkout/src/libcore/macros.rs"
   // unreachable;
   break;
  }
  case 1:  {
   HEAP32[$r>>2] = 0; //@line 102 "/checkout/src/libstd/io/stdio.rs"
   $$sink$i = 4;$buf$1$sink$i = $buf$1;
   break;
  }
  default: {
   $24 = ($buf$1|0)>(-1); //@line 848 "/checkout/src/libcore/cmp.rs"
   $_0$0$sroa$speculated$i$i$i$i = $24 ? $buf$1 : 2147483647; //@line 478 "/checkout/src/libcore/cmp.rs"
   $25 = (_write(1,$buf$0,$_0$0$sroa$speculated$i$i$i$i)|0); //@line 104 "/checkout/src/libstd/sys/unix/fd.rs"
   $26 = ($25|0)==(-1); //@line 130 "/checkout/src/libstd/sys/unix/mod.rs"
   if ($26) {
    $27 = (___errno_location()|0); //@line 65 "/checkout/src/libstd/sys/unix/os.rs"
    $28 = HEAP32[$27>>2]|0; //@line 65 "/checkout/src/libstd/sys/unix/os.rs"
    $phitmp$i$i = ($28|0)==(9); //@line 337 "/checkout/src/libstd/io/error.rs"
    if ($phitmp$i$i) {
     HEAP32[$r>>2] = 0; //@line 125 "/checkout/src/libstd/io/stdio.rs"
     $$sink$i = 4;$buf$1$sink$i = $buf$1;
     break L12;
    } else {
     $ret$sroa$0$0$i45$i = 1;$ret$sroa$5$0$i$off042$i = 0;$ret$sroa$5$0$i$off3243$i = $28;
    }
   } else {
    $ret$sroa$0$0$i45$i = 0;$ret$sroa$5$0$i$off042$i = $25;$ret$sroa$5$0$i$off3243$i = 0;
   }
   HEAP32[$r>>2] = $ret$sroa$0$0$i45$i; //@line 126 "/checkout/src/libstd/io/stdio.rs"
   $_5$sroa$6$0$$sroa_cast$sroa_idx$i = ((($r)) + 4|0); //@line 126 "/checkout/src/libstd/io/stdio.rs"
   HEAP32[$_5$sroa$6$0$$sroa_cast$sroa_idx$i>>2] = $ret$sroa$5$0$i$off042$i; //@line 126 "/checkout/src/libstd/io/stdio.rs"
   $$sink$i = 8;$buf$1$sink$i = $ret$sroa$5$0$i$off3243$i;
  }
  }
 } while(0);
 $29 = (($r) + ($$sink$i)|0);
 HEAP32[$29>>2] = $buf$1$sink$i;
 HEAP8[$22>>0] = 0; //@line 518 "/checkout/src/libstd/io/buffered.rs"
 ;HEAP32[$0>>2]=HEAP32[$r>>2]|0;HEAP32[$0+4>>2]=HEAP32[$r+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$r+8>>2]|0; //@line 519 "/checkout/src/libstd/io/buffered.rs"
 STACKTOP = sp;return; //@line 523 "/checkout/src/libstd/io/buffered.rs"
}
function __ZN3std2io5Write9write_all17h8167ba58fb9df2caE($0,$self,$1,$2) {
 $0 = $0|0;
 $self = $self|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $$pre84 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $_0$0$sroa$speculated$i$i = 0, $_20 = 0, $_8 = 0, $buf$sroa$0$073$ph = 0, $buf$sroa$5$072$ph = 0, $cond = 0, $cond1 = 0, $switch = 0, $switch$i$i = 0, $trunc$i$clear = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_20 = sp;
 $_8 = sp + 8|0;
 $3 = ($2|0)==(0); //@line 140 "/checkout/src/libcore/slice/mod.rs"
 L1: do {
  if (!($3)) {
   $4 = ((($_8)) + 4|0);
   $67 = 0;$68 = 0;$buf$sroa$0$073$ph = $1;$buf$sroa$5$072$ph = $2;
   L3: while(1) {
    $5 = ($buf$sroa$5$072$ph|0)>(-1);
    $_0$0$sroa$speculated$i$i = $5 ? $buf$sroa$5$072$ph : 2147483647;
    $69 = $67;$70 = $68;
    while(1) {
     $6 = (_write(2,$buf$sroa$0$073$ph,$_0$0$sroa$speculated$i$i)|0); //@line 104 "/checkout/src/libstd/sys/unix/fd.rs"
     $7 = ($6|0)==(-1); //@line 130 "/checkout/src/libstd/sys/unix/mod.rs"
     if ($7) {
      $8 = (___errno_location()|0); //@line 65 "/checkout/src/libstd/sys/unix/os.rs"
      $9 = HEAP32[$8>>2]|0; //@line 65 "/checkout/src/libstd/sys/unix/os.rs"
      $$pre84 = 1;$12 = 0;$15 = $9;
     } else {
      $$pre84 = 0;$12 = $6;$15 = $70;
     }
     HEAP32[$_8>>2] = $$pre84; //@line 52 "/checkout/src/libstd/sys/unix/stdio.rs"
     $10 = $4; //@line 52 "/checkout/src/libstd/sys/unix/stdio.rs"
     $11 = $10; //@line 52 "/checkout/src/libstd/sys/unix/stdio.rs"
     HEAP32[$11>>2] = $12; //@line 52 "/checkout/src/libstd/sys/unix/stdio.rs"
     $13 = (($10) + 4)|0; //@line 52 "/checkout/src/libstd/sys/unix/stdio.rs"
     $14 = $13; //@line 52 "/checkout/src/libstd/sys/unix/stdio.rs"
     HEAP32[$14>>2] = $15; //@line 52 "/checkout/src/libstd/sys/unix/stdio.rs"
     $switch = ($$pre84|0)==(1); //@line 1092 "/checkout/src/libstd/io/mod.rs"
     $16 = $12&255; //@line 1092 "/checkout/src/libstd/io/mod.rs"
     $17 = $15; //@line 1092 "/checkout/src/libstd/io/mod.rs"
     if (!($switch)) {
      break;
     }
     $26 = (_bitshift64Lshr(($12|0),($15|0),8)|0); //@line 1092 "/checkout/src/libstd/io/mod.rs"
     $27 = tempRet0; //@line 1092 "/checkout/src/libstd/io/mod.rs"
     $28 = $26&255; //@line 1092 "/checkout/src/libstd/io/mod.rs"
     $29 = $12&255; //@line 504 "/checkout/src/libstd/io/error.rs"
     $trunc$i$clear = $29 & 3; //@line 504 "/checkout/src/libstd/io/error.rs"
     switch ($trunc$i$clear<<24>>24) {
     case 0:  {
      $cond = ($15|0)==(4); //@line 98 "/checkout/src/libstd/sys/unix/mod.rs"
      if (!($cond)) {
       label = 12;
       break L3;
      }
      break;
     }
     case 1:  {
      $32 = $28;
      label = 18;
      break;
     }
     case 2:  {
      $30 = ((($17)) + 8|0); //@line 505 "/checkout/src/libstd/io/error.rs"
      $$pre = HEAP8[$30>>0]|0;
      $32 = $$pre;
      label = 18;
      break;
     }
     default: {
      label = 15;
      break L3;
     }
     }
     if ((label|0) == 18) {
      label = 0;
      $31 = ($32<<24>>24)==(15); //@line 91 "/checkout/src/libstd/io/error.rs"
      if (!($31)) {
       label = 12;
       break L3;
      }
     }
     $switch$i$i = ($16&255)<(2); //@line 59 "/checkout/src/libcore/ptr.rs"
     if (!($switch$i$i)) {
      $43 = $15; //@line 59 "/checkout/src/libcore/ptr.rs"
      $44 = HEAP32[$43>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
      $45 = ((($17)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
      $46 = HEAP32[$45>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
      $47 = HEAP32[$46>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
      __THREW__ = 0;
      invoke_vi($47|0,($44|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
      $48 = __THREW__; __THREW__ = 0;
      $49 = $48&1;
      if ($49) {
       label = 25;
       break L3;
      }
      $50 = HEAP32[$45>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
      $51 = ((($50)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
      $52 = HEAP32[$51>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
      $53 = ($52|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
      if (!($53)) {
       $54 = $15; //@line 59 "/checkout/src/libcore/ptr.rs"
       $55 = HEAP32[$54>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
       $56 = ((($50)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
       $57 = HEAP32[$56>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
       ___rust_dealloc($55,$52,$57); //@line 104 "/checkout/src/liballoc/heap.rs"
      }
      ___rust_dealloc($17,12,4); //@line 104 "/checkout/src/liballoc/heap.rs"
     }
     $69 = $12;$70 = $15;
    }
    $cond1 = ($12|0)==(0); //@line 1092 "/checkout/src/libstd/io/mod.rs"
    if ($cond1) {
     label = 9;
     break;
    }
    $20 = ($buf$sroa$5$072$ph>>>0)<($12>>>0); //@line 873 "/checkout/src/libcore/slice/mod.rs"
    if ($20) {
     label = 11;
     break;
    }
    $62 = (($buf$sroa$0$073$ph) + ($12)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
    $63 = (($buf$sroa$5$072$ph) - ($12))|0; //@line 863 "/checkout/src/libcore/slice/mod.rs"
    $64 = ($63|0)==(0); //@line 140 "/checkout/src/libcore/slice/mod.rs"
    if ($64) {
     break L1;
    } else {
     $67 = $12;$68 = $15;$buf$sroa$0$073$ph = $62;$buf$sroa$5$072$ph = $63;
    }
   }
   do {
    if ((label|0) == 9) {
     __THREW__ = 0;
     invoke_viiii(423,($_20|0),14,(21741|0),28); //@line 1092 "/checkout/src/libstd/io/mod.rs"
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if ($19) {
      $65 = ___cxa_find_matching_catch_2()|0;
      $66 = tempRet0;
      __ZN4core3ptr13drop_in_place17he59d55dacb57c09bE_llvm_CBBB2DFF($_8); //@line 1098 "/checkout/src/libstd/io/mod.rs"
      ___resumeException($65|0);
      // unreachable;
     } else {
      $33 = $_20; //@line 1092 "/checkout/src/libstd/io/mod.rs"
      $34 = $33; //@line 1092 "/checkout/src/libstd/io/mod.rs"
      $35 = HEAP32[$34>>2]|0; //@line 1092 "/checkout/src/libstd/io/mod.rs"
      $36 = (($33) + 4)|0; //@line 1092 "/checkout/src/libstd/io/mod.rs"
      $37 = $36; //@line 1092 "/checkout/src/libstd/io/mod.rs"
      $38 = HEAP32[$37>>2]|0; //@line 1092 "/checkout/src/libstd/io/mod.rs"
      $39 = $0; //@line 1092 "/checkout/src/libstd/io/mod.rs"
      $40 = $39; //@line 1092 "/checkout/src/libstd/io/mod.rs"
      HEAP32[$40>>2] = $35; //@line 1092 "/checkout/src/libstd/io/mod.rs"
      $41 = (($39) + 4)|0; //@line 1092 "/checkout/src/libstd/io/mod.rs"
      $42 = $41; //@line 1092 "/checkout/src/libstd/io/mod.rs"
      HEAP32[$42>>2] = $38; //@line 1092 "/checkout/src/libstd/io/mod.rs"
      break;
     }
    }
    else if ((label|0) == 11) {
     __THREW__ = 0;
     invoke_vii(422,($12|0),($buf$sroa$5$072$ph|0)); //@line 874 "/checkout/src/libcore/slice/mod.rs"
     $21 = __THREW__; __THREW__ = 0;
     $65 = ___cxa_find_matching_catch_2()|0;
     $66 = tempRet0;
     __ZN4core3ptr13drop_in_place17he59d55dacb57c09bE_llvm_CBBB2DFF($_8); //@line 1098 "/checkout/src/libstd/io/mod.rs"
     ___resumeException($65|0);
     // unreachable;
    }
    else if ((label|0) == 12) {
     $22 = $0; //@line 1096 "/checkout/src/libstd/io/mod.rs"
     $23 = $22; //@line 1096 "/checkout/src/libstd/io/mod.rs"
     HEAP32[$23>>2] = $12; //@line 1096 "/checkout/src/libstd/io/mod.rs"
     $24 = (($22) + 4)|0; //@line 1096 "/checkout/src/libstd/io/mod.rs"
     $25 = $24; //@line 1096 "/checkout/src/libstd/io/mod.rs"
     HEAP32[$25>>2] = $15; //@line 1096 "/checkout/src/libstd/io/mod.rs"
    }
    else if ((label|0) == 15) {
     // unreachable; //@line 508 "/checkout/src/libstd/io/error.rs"
    }
    else if ((label|0) == 25) {
     $58 = ___cxa_find_matching_catch_2()|0;
     $59 = tempRet0;
     $60 = HEAP32[$43>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
     $61 = HEAP32[$45>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
     __ZN5alloc4heap8box_free17hb8be26a1f37cb671E_llvm_CBBB2DFF($60,$61); //@line 59 "/checkout/src/libcore/ptr.rs"
     __ZN5alloc4heap8box_free17h0833f2b89912900bE_llvm_CBBB2DFF($17); //@line 59 "/checkout/src/libcore/ptr.rs"
     ___resumeException($58|0);
     // unreachable;
    }
   } while(0);
   STACKTOP = sp;return; //@line 1100 "/checkout/src/libstd/io/mod.rs"
  }
 } while(0);
 HEAP8[$0>>0] = 3; //@line 1099 "/checkout/src/libstd/io/mod.rs"
 STACKTOP = sp;return; //@line 1100 "/checkout/src/libstd/io/mod.rs"
}
function __ZN3std2io5Write9write_fmt17h185a03b372d63affE($0,$self,$fmt) {
 $0 = $0|0;
 $self = $self|0;
 $fmt = $fmt|0;
 var $$pre$phi11Z2D = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_11 = 0, $_17 = 0, $_5$sroa$0$0$$sroa_idx = 0, $output = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_17 = sp;
 $_11 = sp + 24|0;
 $output = sp + 8|0;
 HEAP32[$output>>2] = $self; //@line 1161 "/checkout/src/libstd/io/mod.rs"
 $_5$sroa$0$0$$sroa_idx = ((($output)) + 4|0); //@line 1161 "/checkout/src/libstd/io/mod.rs"
 HEAP8[$_5$sroa$0$0$$sroa_idx>>0] = 3; //@line 1161 "/checkout/src/libstd/io/mod.rs"
 ;HEAP32[$_11>>2]=HEAP32[$fmt>>2]|0;HEAP32[$_11+4>>2]=HEAP32[$fmt+4>>2]|0;HEAP32[$_11+8>>2]=HEAP32[$fmt+8>>2]|0;HEAP32[$_11+12>>2]=HEAP32[$fmt+12>>2]|0;HEAP32[$_11+16>>2]=HEAP32[$fmt+16>>2]|0;HEAP32[$_11+20>>2]=HEAP32[$fmt+20>>2]|0; //@line 1162 "/checkout/src/libstd/io/mod.rs"
 __THREW__ = 0;
 $1 = (invoke_iiii(424,($output|0),(8304|0),($_11|0))|0); //@line 1162 "/checkout/src/libstd/io/mod.rs"
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $50 = ___cxa_find_matching_catch_2()|0;
  $51 = tempRet0;
  __ZN4core3ptr13drop_in_place17h4a3f90cf332318dcE_llvm_CBBB2DFF($output); //@line 1173 "/checkout/src/libstd/io/mod.rs"
  ___resumeException($50|0);
  // unreachable;
 }
 do {
  if ($1) {
   $4 = ((($output)) + 4|0); //@line 1166 "/checkout/src/libstd/io/mod.rs"
   $5 = HEAP8[$4>>0]|0; //@line 294 "/checkout/src/libcore/result.rs"
   $6 = ($5<<24>>24)==(3); //@line 317 "/checkout/src/libcore/result.rs"
   if (!($6)) {
    $7 = $4; //@line 1167 "/checkout/src/libstd/io/mod.rs"
    $8 = $7; //@line 1167 "/checkout/src/libstd/io/mod.rs"
    $9 = HEAP32[$8>>2]|0; //@line 1167 "/checkout/src/libstd/io/mod.rs"
    $10 = (($7) + 4)|0; //@line 1167 "/checkout/src/libstd/io/mod.rs"
    $11 = $10; //@line 1167 "/checkout/src/libstd/io/mod.rs"
    $12 = HEAP32[$11>>2]|0; //@line 1167 "/checkout/src/libstd/io/mod.rs"
    $13 = $0; //@line 1167 "/checkout/src/libstd/io/mod.rs"
    $14 = $13; //@line 1167 "/checkout/src/libstd/io/mod.rs"
    HEAP32[$14>>2] = $9; //@line 1167 "/checkout/src/libstd/io/mod.rs"
    $15 = (($13) + 4)|0; //@line 1167 "/checkout/src/libstd/io/mod.rs"
    $16 = $15; //@line 1167 "/checkout/src/libstd/io/mod.rs"
    HEAP32[$16>>2] = $12; //@line 1167 "/checkout/src/libstd/io/mod.rs"
    STACKTOP = sp;return; //@line 1173 "/checkout/src/libstd/io/mod.rs"
   }
   __THREW__ = 0;
   invoke_viiii(423,($_17|0),16,(21693|0),15); //@line 1169 "/checkout/src/libstd/io/mod.rs"
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    $50 = ___cxa_find_matching_catch_2()|0;
    $51 = tempRet0;
    __ZN4core3ptr13drop_in_place17h4a3f90cf332318dcE_llvm_CBBB2DFF($output); //@line 1173 "/checkout/src/libstd/io/mod.rs"
    ___resumeException($50|0);
    // unreachable;
   } else {
    $19 = $_17; //@line 1169 "/checkout/src/libstd/io/mod.rs"
    $20 = $19; //@line 1169 "/checkout/src/libstd/io/mod.rs"
    $21 = HEAP32[$20>>2]|0; //@line 1169 "/checkout/src/libstd/io/mod.rs"
    $22 = (($19) + 4)|0; //@line 1169 "/checkout/src/libstd/io/mod.rs"
    $23 = $22; //@line 1169 "/checkout/src/libstd/io/mod.rs"
    $24 = HEAP32[$23>>2]|0; //@line 1169 "/checkout/src/libstd/io/mod.rs"
    $25 = $0; //@line 1169 "/checkout/src/libstd/io/mod.rs"
    $26 = $25; //@line 1169 "/checkout/src/libstd/io/mod.rs"
    HEAP32[$26>>2] = $21; //@line 1169 "/checkout/src/libstd/io/mod.rs"
    $27 = (($25) + 4)|0; //@line 1169 "/checkout/src/libstd/io/mod.rs"
    $28 = $27; //@line 1169 "/checkout/src/libstd/io/mod.rs"
    HEAP32[$28>>2] = $24; //@line 1169 "/checkout/src/libstd/io/mod.rs"
    $$pre$phi11Z2D = $4;
    break;
   }
  } else {
   HEAP8[$0>>0] = 3; //@line 1163 "/checkout/src/libstd/io/mod.rs"
   $$pre$phi11Z2D = $_5$sroa$0$0$$sroa_idx;
  }
 } while(0);
 $trunc = HEAP8[$$pre$phi11Z2D>>0]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $trunc$clear = $trunc & 3; //@line 59 "/checkout/src/libcore/ptr.rs"
 switch ($trunc$clear<<24>>24) {
 case 0: case 1: case 3:  {
  STACKTOP = sp;return; //@line 1173 "/checkout/src/libstd/io/mod.rs"
  break;
 }
 default: {
 }
 }
 $29 = ((($output)) + 8|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $30 = HEAP32[$29>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $31 = HEAP32[$30>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $32 = ((($30)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $33 = HEAP32[$32>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $34 = HEAP32[$33>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 __THREW__ = 0;
 invoke_vi($34|0,($31|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if ($36) {
  $44 = ___cxa_find_matching_catch_2()|0;
  $45 = tempRet0;
  $46 = HEAP32[$30>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $47 = HEAP32[$32>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  __ZN5alloc4heap8box_free17hb8be26a1f37cb671E_llvm_CBBB2DFF($46,$47); //@line 59 "/checkout/src/libcore/ptr.rs"
  $48 = HEAP32[$29>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  __ZN5alloc4heap8box_free17h0833f2b89912900bE_llvm_CBBB2DFF($48); //@line 59 "/checkout/src/libcore/ptr.rs"
  ___resumeException($44|0);
  // unreachable;
 }
 $37 = HEAP32[$32>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $38 = ((($37)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $39 = HEAP32[$38>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
 $40 = ($39|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
 if (!($40)) {
  $41 = HEAP32[$30>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $42 = ((($37)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
  $43 = HEAP32[$42>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
  ___rust_dealloc($41,$39,$43); //@line 104 "/checkout/src/liballoc/heap.rs"
 }
 $49 = HEAP32[$29>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 ___rust_dealloc($49,12,4); //@line 104 "/checkout/src/liballoc/heap.rs"
 STACKTOP = sp;return; //@line 1173 "/checkout/src/libstd/io/mod.rs"
}
function __ZN4core3ptr13drop_in_place17h3d1ff7f844ce51efE_llvm_B9DCF64E($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($arg0)) + 8|0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $1 = HEAP32[$0>>2]|0; //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $2 = ($1|0)==(0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 if ($2) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 $3 = ((($arg0)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $4 = HEAP32[$3>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 ___rust_dealloc($4,$1,1); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr13drop_in_place17hc7d659014c0d680dE_llvm_B9DCF64E($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($arg0)) + 4|0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $1 = HEAP32[$0>>2]|0; //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $2 = ($1|0)==(0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 if ($2) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 $3 = HEAP32[$arg0>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 ___rust_dealloc($3,$1,1); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr13drop_in_place17hda15ddb7c8ed5c05E($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($arg0)) + 4|0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $1 = HEAP32[$0>>2]|0; //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $2 = ($1|0)==(0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 if ($2) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 $3 = HEAP32[$arg0>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 ___rust_dealloc($3,$1,1); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN58__LT_std__ffi__c_str__CStr_u20_as_u20_core__fmt__Debug_GT_3fmt17h192775d0d103df83E($self$0,$self$1,$f) {
 $self$0 = $self$0|0;
 $self$1 = $self$1|0;
 $f = $f|0;
 var $$arith = 0, $$overflow = 0, $$pre = 0, $$pre$i70 = 0, $$promoted = 0, $$sink$i$i = 0, $$sink$i23$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_0$0$in = 0, $_13$sroa$0$0$insert$ext$i = 0, $_15$sroa$0$0$insert$insert$i = 0, $_15$sroa$5$0$insert$ext$i = 0, $_15$sroa$5$0$insert$insert$i = 0, $_15$sroa$5$0$insert$shift$i = 0, $_15$sroa$6$0$insert$ext$i = 0, $_15$sroa$6$0$insert$shift$i = 0, $_22$sroa$5$i$sroa$5$0$$sroa_idx = 0, $_23$sroa$5$0$$sroa_idx = 0, $_23$sroa$6$0$$sroa_idx = 0, $_23$sroa$7 = 0, $_23$sroa$7$0$$sroa_idx = 0, $_23$sroa$8$0$$sroa_idx = 0, $_23$sroa$9 = 0, $_23$sroa$9$0$$sroa_idx = 0, $_24$sroa$6 = 0, $_24$sroa$7 = 0, $_4$sroa$0$0$$sroa_idx$i = 0, $_4$sroa$0$0$$sroa_idx$i5 = 0;
 var $_4$sroa$0$0$i = 0, $_4$sroa$11$0$i = 0, $_57 = 0, $_7 = 0, $c$off$i = 0, $iter = 0, $phitmp$i$i6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $_57 = sp + 112|0;
 $iter = sp + 72|0;
 $_24$sroa$6 = sp + 60|0;
 $_24$sroa$7 = sp + 48|0;
 $_23$sroa$7 = sp + 36|0;
 $_23$sroa$9 = sp + 24|0;
 $_7 = sp;
 HEAP32[$_7>>2] = 8344; //@line 343 "/checkout/src/libcore/fmt/mod.rs"
 $0 = ((($_7)) + 4|0); //@line 343 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$0>>2] = 1; //@line 343 "/checkout/src/libcore/fmt/mod.rs"
 $_4$sroa$0$0$$sroa_idx$i = ((($_7)) + 8|0); //@line 343 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_4$sroa$0$0$$sroa_idx$i>>2] = 0; //@line 343 "/checkout/src/libcore/fmt/mod.rs"
 $1 = ((($_7)) + 16|0); //@line 343 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$1>>2] = 38620; //@line 343 "/checkout/src/libcore/fmt/mod.rs"
 $2 = ((($_7)) + 20|0); //@line 343 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$2>>2] = 0; //@line 343 "/checkout/src/libcore/fmt/mod.rs"
 $3 = (__ZN4core3fmt9Formatter9write_fmt17h650e8f365614dc75E($f,$_7)|0); //@line 654 "/checkout/src/libstd/ffi/c_str.rs"
 if ($3) {
  $_0$0$in = 1;
  STACKTOP = sp;return ($_0$0$in|0); //@line 659 "/checkout/src/libstd/ffi/c_str.rs"
 }
 $4 = (($self$1) + -1)|0; //@line 1045 "/checkout/src/libstd/ffi/c_str.rs"
 $5 = ($self$1|0)==(0); //@line 875 "/checkout/src/libcore/slice/mod.rs"
 if ($5) {
  __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($4,0); //@line 876 "/checkout/src/libcore/slice/mod.rs"
  // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
 }
 $6 = (($self$0) + ($4)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
 ;HEAP32[$_23$sroa$7>>2]=HEAP32[$_24$sroa$6>>2]|0;HEAP32[$_23$sroa$7+4>>2]=HEAP32[$_24$sroa$6+4>>2]|0;HEAP32[$_23$sroa$7+8>>2]=HEAP32[$_24$sroa$6+8>>2]|0; //@line 257 "/checkout/src/libcore/iter/traits.rs"
 ;HEAP32[$_23$sroa$9>>2]=HEAP32[$_24$sroa$7>>2]|0;HEAP32[$_23$sroa$9+4>>2]=HEAP32[$_24$sroa$7+4>>2]|0;HEAP32[$_23$sroa$9+8>>2]=HEAP32[$_24$sroa$7+8>>2]|0; //@line 257 "/checkout/src/libcore/iter/traits.rs"
 HEAP32[$iter>>2] = $self$0; //@line 655 "/checkout/src/libstd/ffi/c_str.rs"
 $_23$sroa$5$0$$sroa_idx = ((($iter)) + 4|0); //@line 655 "/checkout/src/libstd/ffi/c_str.rs"
 HEAP32[$_23$sroa$5$0$$sroa_idx>>2] = $6; //@line 655 "/checkout/src/libstd/ffi/c_str.rs"
 $_23$sroa$6$0$$sroa_idx = ((($iter)) + 8|0); //@line 655 "/checkout/src/libstd/ffi/c_str.rs"
 HEAP32[$_23$sroa$6$0$$sroa_idx>>2] = 0; //@line 655 "/checkout/src/libstd/ffi/c_str.rs"
 $_23$sroa$7$0$$sroa_idx = ((($iter)) + 12|0); //@line 655 "/checkout/src/libstd/ffi/c_str.rs"
 ;HEAP32[$_23$sroa$7$0$$sroa_idx>>2]=HEAP32[$_23$sroa$7>>2]|0;HEAP32[$_23$sroa$7$0$$sroa_idx+4>>2]=HEAP32[$_23$sroa$7+4>>2]|0;HEAP32[$_23$sroa$7$0$$sroa_idx+8>>2]=HEAP32[$_23$sroa$7+8>>2]|0; //@line 655 "/checkout/src/libstd/ffi/c_str.rs"
 $_23$sroa$8$0$$sroa_idx = ((($iter)) + 24|0); //@line 655 "/checkout/src/libstd/ffi/c_str.rs"
 HEAP32[$_23$sroa$8$0$$sroa_idx>>2] = 0; //@line 655 "/checkout/src/libstd/ffi/c_str.rs"
 $_23$sroa$9$0$$sroa_idx = ((($iter)) + 28|0); //@line 655 "/checkout/src/libstd/ffi/c_str.rs"
 ;HEAP32[$_23$sroa$9$0$$sroa_idx>>2]=HEAP32[$_23$sroa$9>>2]|0;HEAP32[$_23$sroa$9$0$$sroa_idx+4>>2]=HEAP32[$_23$sroa$9+4>>2]|0;HEAP32[$_23$sroa$9$0$$sroa_idx+8>>2]=HEAP32[$_23$sroa$9+8>>2]|0; //@line 655 "/checkout/src/libstd/ffi/c_str.rs"
 $7 = ((($iter)) + 16|0);
 $_22$sroa$5$i$sroa$5$0$$sroa_idx = ((($iter)) + 20|0);
 $$promoted = HEAP32[$_23$sroa$7$0$$sroa_idx>>2]|0; //@line 846 "/checkout/src/libcore/cmp.rs"
 $$pre$i70 = 0;$30 = $self$0;$31 = $$promoted;
 L7: while(1) {
  if ($$pre$i70) {
   $$pre = HEAP32[$7>>2]|0;
   $10 = $$pre;$32 = $30;$9 = $31;
   label = 8;
  } else {
   $13 = $30;
  }
  while(1) {
   if ((label|0) == 8) {
    label = 0;
    $8 = ($9>>>0)<($10>>>0); //@line 846 "/checkout/src/libcore/cmp.rs"
    if (!($8)) {
     $13 = $32;
     continue;
    }
    $$arith = (($9) + 1)|0; //@line 1982 "/checkout/src/libcore/num/mod.rs"
    $$overflow = ($9>>>0)>(4294967294); //@line 1982 "/checkout/src/libcore/num/mod.rs"
    if ($$overflow) {
     $13 = $32;
    } else {
     break;
    }
   }
   $12 = ($13|0)==($6|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
   if ($12) {
    label = 23;
    break L7;
   }
   $14 = ((($13)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
   $15 = HEAP8[$13>>0]|0; //@line 655 "/checkout/src/libstd/ffi/c_str.rs"
   L17: do {
    switch ($15<<24>>24) {
    case 9:  {
     $_4$sroa$0$0$i = 29788;$_4$sroa$11$0$i = 2;
     break;
    }
    case 13:  {
     $_4$sroa$0$0$i = 29276;$_4$sroa$11$0$i = 2;
     break;
    }
    case 10:  {
     $_4$sroa$0$0$i = 28252;$_4$sroa$11$0$i = 2;
     break;
    }
    case 92:  {
     $_4$sroa$0$0$i = 23644;$_4$sroa$11$0$i = 2;
     break;
    }
    case 39:  {
     $_4$sroa$0$0$i = 10076;$_4$sroa$11$0$i = 2;
     break;
    }
    case 34:  {
     $_4$sroa$0$0$i = 8796;$_4$sroa$11$0$i = 2;
     break;
    }
    default: {
     $c$off$i = (($15) + -32)<<24>>24; //@line 565 "/checkout/src/libstd/ascii.rs"
     $22 = ($c$off$i&255)<(95); //@line 565 "/checkout/src/libstd/ascii.rs"
     if ($22) {
      $_13$sroa$0$0$insert$ext$i = $15&255; //@line 565 "/checkout/src/libstd/ascii.rs"
      $_4$sroa$0$0$i = $_13$sroa$0$0$insert$ext$i;$_4$sroa$11$0$i = 1;
      break L17;
     } else {
      $16 = ($15&255) >>> 4; //@line 566 "/checkout/src/libstd/ascii.rs"
      $17 = ($15&255)<(160); //@line 573 "/checkout/src/libstd/ascii.rs"
      $$sink$i$i = $17 ? 48 : 87; //@line 573 "/checkout/src/libstd/ascii.rs"
      $18 = (($$sink$i$i) + ($16))<<24>>24;
      $19 = $15 & 15; //@line 566 "/checkout/src/libstd/ascii.rs"
      $20 = ($19&255)<(10); //@line 573 "/checkout/src/libstd/ascii.rs"
      $$sink$i23$i = $20 ? 48 : 87; //@line 573 "/checkout/src/libstd/ascii.rs"
      $21 = (($$sink$i23$i) + ($19))<<24>>24;
      $_15$sroa$6$0$insert$ext$i = $21&255; //@line 566 "/checkout/src/libstd/ascii.rs"
      $_15$sroa$6$0$insert$shift$i = $_15$sroa$6$0$insert$ext$i << 24; //@line 566 "/checkout/src/libstd/ascii.rs"
      $_15$sroa$5$0$insert$ext$i = $18&255; //@line 566 "/checkout/src/libstd/ascii.rs"
      $_15$sroa$5$0$insert$shift$i = $_15$sroa$5$0$insert$ext$i << 16; //@line 566 "/checkout/src/libstd/ascii.rs"
      $_15$sroa$5$0$insert$insert$i = $_15$sroa$5$0$insert$shift$i | $_15$sroa$6$0$insert$shift$i; //@line 566 "/checkout/src/libstd/ascii.rs"
      $_15$sroa$0$0$insert$insert$i = $_15$sroa$5$0$insert$insert$i | 30812; //@line 566 "/checkout/src/libstd/ascii.rs"
      $_4$sroa$0$0$i = $_15$sroa$0$0$insert$insert$i;$_4$sroa$11$0$i = 4;
      break L17;
     }
    }
    }
   } while(0);
   HEAP32[$7>>2] = $_4$sroa$11$0$i; //@line 2387 "/checkout/src/libcore/iter/mod.rs"
   HEAP32[$_22$sroa$5$i$sroa$5$0$$sroa_idx>>2] = $_4$sroa$0$0$i; //@line 2387 "/checkout/src/libcore/iter/mod.rs"
   $10 = $_4$sroa$11$0$i;$32 = $14;$9 = 0;
   label = 8;
  }
  $11 = ($9>>>0)<(4); //@line 582 "/checkout/src/libstd/ascii.rs"
  if (!($11)) {
   label = 11;
   break;
  }
  $27 = (((($_23$sroa$7$0$$sroa_idx)) + 8|0) + ($9)|0); //@line 582 "/checkout/src/libstd/ascii.rs"
  $28 = HEAP8[$27>>0]|0; //@line 582 "/checkout/src/libstd/ascii.rs"
  $phitmp$i$i6 = $28&255; //@line 406 "/checkout/src/libcore/option.rs"
  $29 = (__ZN71__LT_core__fmt__Formatter_LT__u27_a_GT__u20_as_u20_core__fmt__Write_GT_10write_char17hc5577ad36874d504E($f,$phitmp$i$i6)|0); //@line 656 "/checkout/src/libstd/ffi/c_str.rs"
  if ($29) {
   label = 25;
   break;
  } else {
   $$pre$i70 = 1;$30 = $32;$31 = $$arith;
  }
 }
 if ((label|0) == 11) {
  __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(9136,$9,4); //@line 582 "/checkout/src/libstd/ascii.rs"
  // unreachable; //@line 582 "/checkout/src/libstd/ascii.rs"
 }
 else if ((label|0) == 23) {
  HEAP32[$_57>>2] = 8344; //@line 343 "/checkout/src/libcore/fmt/mod.rs"
  $23 = ((($_57)) + 4|0); //@line 343 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$23>>2] = 1; //@line 343 "/checkout/src/libcore/fmt/mod.rs"
  $_4$sroa$0$0$$sroa_idx$i5 = ((($_57)) + 8|0); //@line 343 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_4$sroa$0$0$$sroa_idx$i5>>2] = 0; //@line 343 "/checkout/src/libcore/fmt/mod.rs"
  $24 = ((($_57)) + 16|0); //@line 343 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$24>>2] = 38620; //@line 343 "/checkout/src/libcore/fmt/mod.rs"
  $25 = ((($_57)) + 20|0); //@line 343 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$25>>2] = 0; //@line 343 "/checkout/src/libcore/fmt/mod.rs"
  $26 = (__ZN4core3fmt9Formatter9write_fmt17h650e8f365614dc75E($f,$_57)|0); //@line 658 "/checkout/src/libstd/ffi/c_str.rs"
  $_0$0$in = $26;
  STACKTOP = sp;return ($_0$0$in|0); //@line 659 "/checkout/src/libstd/ffi/c_str.rs"
 }
 else if ((label|0) == 25) {
  $_0$0$in = 1;
  STACKTOP = sp;return ($_0$0$in|0); //@line 659 "/checkout/src/libstd/ffi/c_str.rs"
 }
 return (0)|0;
}
function __ZN3std3ffi5c_str7CString18from_vec_unchecked17hf957fef3c393e418E($retVal,$v) {
 $retVal = $retVal|0;
 $v = $v|0;
 var $$pre = 0, $$sink$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_46$sroa$5$4$copyload1124$i = 0, $_46$sroa$9$4$$sroa_idx$i = 0, $_60$i = 0, $_7 = 0, $err$i$i = 0, $err$sroa$0$sroa$4$0$err$sroa$0$0$$sroa_idx2$sroa_idx$i = 0, $retVal$index1 = 0, $tmp$sroa$0$0$copyload$i11121$i = 0, $tmp$sroa$0$0$copyload$i11121$i$pre = 0, $tmp$sroa$0$0$copyload$i11121$i3 = 0, $tmp$sroa$5$0$copyload$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $err$i$i = sp + 24|0;
 $_60$i = sp + 12|0;
 $_7 = sp;
 $0 = ((($v)) + 8|0); //@line 486 "/checkout/src/liballoc/vec.rs"
 $1 = HEAP32[$0>>2]|0; //@line 486 "/checkout/src/liballoc/vec.rs"
 __THREW__ = 0;
 invoke_viii(425,($v|0),($1|0),1); //@line 486 "/checkout/src/liballoc/vec.rs"
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $40 = ___cxa_find_matching_catch_2()|0;
  $41 = tempRet0;
  __ZN4core3ptr13drop_in_place17hc7d659014c0d680dE_llvm_B9DCF64E($v); //@line 365 "/checkout/src/libstd/ffi/c_str.rs"
  ___resumeException($40|0);
  // unreachable;
 }
 $4 = HEAP32[$0>>2]|0; //@line 967 "/checkout/src/liballoc/vec.rs"
 $5 = ((($v)) + 4|0); //@line 210 "/checkout/src/liballoc/raw_vec.rs"
 $6 = HEAP32[$5>>2]|0; //@line 210 "/checkout/src/liballoc/raw_vec.rs"
 $7 = ($4|0)==($6|0); //@line 967 "/checkout/src/liballoc/vec.rs"
 do {
  if ($7) {
   __THREW__ = 0;
   invoke_vi(426,($v|0)); //@line 968 "/checkout/src/liballoc/vec.rs"
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if ($9) {
    $40 = ___cxa_find_matching_catch_2()|0;
    $41 = tempRet0;
    __ZN4core3ptr13drop_in_place17hc7d659014c0d680dE_llvm_B9DCF64E($v); //@line 365 "/checkout/src/libstd/ffi/c_str.rs"
    ___resumeException($40|0);
    // unreachable;
   } else {
    $$pre = HEAP32[$0>>2]|0;
    $12 = $$pre;
    break;
   }
  } else {
   $12 = $4;
  }
 } while(0);
 $10 = HEAP32[$v>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 $11 = (($10) + ($12)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
 HEAP8[$11>>0] = 0; //@line 364 "/checkout/src/libcore/ptr.rs"
 $13 = HEAP32[$0>>2]|0; //@line 973 "/checkout/src/liballoc/vec.rs"
 $14 = (($13) + 1)|0; //@line 973 "/checkout/src/liballoc/vec.rs"
 HEAP32[$0>>2] = $14; //@line 973 "/checkout/src/liballoc/vec.rs"
 ;HEAP32[$_7>>2]=HEAP32[$v>>2]|0;HEAP32[$_7+4>>2]=HEAP32[$v+4>>2]|0;HEAP32[$_7+8>>2]=HEAP32[$v+8>>2]|0; //@line 364 "/checkout/src/libstd/ffi/c_str.rs"
 $15 = ((($_7)) + 8|0); //@line 505 "/checkout/src/liballoc/vec.rs"
 $16 = HEAP32[$15>>2]|0; //@line 505 "/checkout/src/liballoc/vec.rs"
 $17 = ((($_7)) + 4|0);
 $18 = HEAP32[$17>>2]|0; //@line 621 "/checkout/src/liballoc/raw_vec.rs"
 $19 = ($18>>>0)<($16>>>0); //@line 5 "<assert macros>"
 if ($19) {
  __THREW__ = 0;
  invoke_vi(297,(8904|0)); //@line 3 "<panic macros>"
  $20 = __THREW__; __THREW__ = 0;
  $21 = ___cxa_find_matching_catch_2()|0;
  $22 = tempRet0;
  __ZN4core3ptr13drop_in_place17hc7d659014c0d680dE_llvm_EF0F654A($_7); //@line 540 "/checkout/src/liballoc/vec.rs"
  ___resumeException($21|0);
  // unreachable;
 }
 $23 = ($16|0)==(0); //@line 623 "/checkout/src/liballoc/raw_vec.rs"
 do {
  if ($23) {
   $24 = ($18|0)==(0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
   if (!($24)) {
    $25 = HEAP32[$_7>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
    ___rust_dealloc($25,$18,1); //@line 104 "/checkout/src/liballoc/heap.rs"
   }
   HEAP32[$_7>>2] = (1); //@line 364 "/checkout/src/libcore/ptr.rs"
   $$sink$i = 0;$tmp$sroa$0$0$copyload$i11121$i3 = (1);
  } else {
   $26 = ($18|0)==($16|0); //@line 635 "/checkout/src/liballoc/raw_vec.rs"
   if ($26) {
    $tmp$sroa$0$0$copyload$i11121$i$pre = HEAP32[$_7>>2]|0;
    $tmp$sroa$0$0$copyload$i11121$i = $tmp$sroa$0$0$copyload$i11121$i$pre;$tmp$sroa$5$0$copyload$i$i = $16;
    HEAP32[$retVal>>2] = $tmp$sroa$0$0$copyload$i11121$i; //@line 365 "/checkout/src/libstd/ffi/c_str.rs"
    $retVal$index1 = ((($retVal)) + 4|0); //@line 365 "/checkout/src/libstd/ffi/c_str.rs"
    HEAP32[$retVal$index1>>2] = $tmp$sroa$5$0$copyload$i$i; //@line 365 "/checkout/src/libstd/ffi/c_str.rs"
    STACKTOP = sp;return; //@line 365 "/checkout/src/libstd/ffi/c_str.rs"
   }
   $27 = HEAP32[$_7>>2]|0; //@line 650 "/checkout/src/liballoc/raw_vec.rs"
   $28 = (___rust_realloc($27,$18,1,$16,1,$err$i$i)|0); //@line 127 "/checkout/src/liballoc/heap.rs"
   $29 = ($28|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
   if ($29) {
    $_46$sroa$5$4$copyload1124$i = HEAP32[$err$i$i>>2]|0; //@line 134 "/checkout/src/liballoc/heap.rs"
    $_46$sroa$9$4$$sroa_idx$i = ((($err$i$i)) + 4|0); //@line 134 "/checkout/src/liballoc/heap.rs"
    $30 = $_46$sroa$9$4$$sroa_idx$i; //@line 134 "/checkout/src/liballoc/heap.rs"
    $31 = $30; //@line 134 "/checkout/src/liballoc/heap.rs"
    $32 = HEAP32[$31>>2]|0; //@line 134 "/checkout/src/liballoc/heap.rs"
    $33 = (($30) + 4)|0; //@line 134 "/checkout/src/liballoc/heap.rs"
    $34 = $33; //@line 134 "/checkout/src/liballoc/heap.rs"
    $35 = HEAP32[$34>>2]|0; //@line 134 "/checkout/src/liballoc/heap.rs"
    HEAP32[$_60$i>>2] = $_46$sroa$5$4$copyload1124$i; //@line 654 "/checkout/src/liballoc/raw_vec.rs"
    $err$sroa$0$sroa$4$0$err$sroa$0$0$$sroa_idx2$sroa_idx$i = ((($_60$i)) + 4|0); //@line 654 "/checkout/src/liballoc/raw_vec.rs"
    $36 = $err$sroa$0$sroa$4$0$err$sroa$0$0$$sroa_idx2$sroa_idx$i; //@line 654 "/checkout/src/liballoc/raw_vec.rs"
    $37 = $36; //@line 654 "/checkout/src/liballoc/raw_vec.rs"
    HEAP32[$37>>2] = $32; //@line 654 "/checkout/src/liballoc/raw_vec.rs"
    $38 = (($36) + 4)|0; //@line 654 "/checkout/src/liballoc/raw_vec.rs"
    $39 = $38; //@line 654 "/checkout/src/liballoc/raw_vec.rs"
    HEAP32[$39>>2] = $35; //@line 654 "/checkout/src/liballoc/raw_vec.rs"
    ___rust_oom($_60$i); //@line 98 "/checkout/src/liballoc/heap.rs"
    // unreachable; //@line 98 "/checkout/src/liballoc/heap.rs"
   } else {
    HEAP32[$_7>>2] = $28; //@line 653 "/checkout/src/liballoc/raw_vec.rs"
    $$sink$i = $16;$tmp$sroa$0$0$copyload$i11121$i3 = $28;
    break;
   }
  }
 } while(0);
 HEAP32[$17>>2] = $$sink$i;
 $tmp$sroa$0$0$copyload$i11121$i = $tmp$sroa$0$0$copyload$i11121$i3;$tmp$sroa$5$0$copyload$i$i = $$sink$i;
 HEAP32[$retVal>>2] = $tmp$sroa$0$0$copyload$i11121$i; //@line 365 "/checkout/src/libstd/ffi/c_str.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 365 "/checkout/src/libstd/ffi/c_str.rs"
 HEAP32[$retVal$index1>>2] = $tmp$sroa$5$0$copyload$i$i; //@line 365 "/checkout/src/libstd/ffi/c_str.rs"
 STACKTOP = sp;return; //@line 365 "/checkout/src/libstd/ffi/c_str.rs"
}
function __ZN3std3ffi5c_str104__LT_impl_u20_core__convert__From_LT_std__ffi__c_str__NulError_GT__u20_for_u20_std__io__error__Error_GT_4from17hd874ef7fec3ca18bE($0,$arg0) {
 $0 = $0|0;
 $arg0 = $arg0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_3$i$i = 0, $_3$sroa$4$i$i = 0, $_3$sroa$43$0$$sroa_idx$i$i = 0, $_4$sroa$0$i$i$i = 0, $_5$i$i$i$i$i$i = 0, $_5$i$i$i$i$i$i$i = 0;
 var $_5$sroa$4$0$$sroa_idx$i$i = 0, $_5$sroa$5$0$$sroa_raw_idx$i$i = 0, $_5$sroa$6$0$$sroa_raw_idx$i$i = 0, $_5$sroa$6$i$i = 0, $err$i$i$i$i$i = 0, $err$i$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $err$i$i$i$i$i$i = sp + 60|0;
 $_5$i$i$i$i$i$i$i = sp + 48|0;
 $_4$sroa$0$i$i$i = sp;
 $_3$i$i = sp + 36|0;
 $err$i$i$i$i$i = sp + 24|0;
 $_5$i$i$i$i$i$i = sp + 12|0;
 $_5$sroa$6$i$i = sp + 75|0;
 $_3$sroa$4$i$i = sp + 72|0;
 __THREW__ = 0;
 invoke_viii(427,($_3$i$i|0),(21769|0),33); //@line 212 "/checkout/src/libstd/error.rs"
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  __ZN4core3ptr13drop_in_place17h3d1ff7f844ce51efE_llvm_B9DCF64E($arg0); //@line 805 "/checkout/src/libstd/ffi/c_str.rs"
  ___resumeException($13|0);
  // unreachable;
 }
 ;HEAP32[$_4$sroa$0$i$i$i>>2]=HEAP32[$_3$i$i>>2]|0;HEAP32[$_4$sroa$0$i$i$i+4>>2]=HEAP32[$_3$i$i+4>>2]|0;HEAP32[$_4$sroa$0$i$i$i+8>>2]=HEAP32[$_3$i$i+8>>2]|0; //@line 196 "/checkout/src/libstd/error.rs"
 $3 = (___rust_alloc(12,4,$err$i$i$i$i$i$i)|0); //@line 84 "/checkout/src/liballoc/heap.rs"
 $4 = ($3|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
 if ($4) {
  ___rust_oom($_5$i$i$i$i$i$i$i); //@line 98 "/checkout/src/liballoc/heap.rs"
  // unreachable; //@line 98 "/checkout/src/liballoc/heap.rs"
 }
 ;HEAP32[$3>>2]=HEAP32[$_4$sroa$0$i$i$i>>2]|0;HEAP32[$3+4>>2]=HEAP32[$_4$sroa$0$i$i$i+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$_4$sroa$0$i$i$i+8>>2]|0; //@line 242 "/checkout/src/liballoc/boxed.rs"
 $5 = (___rust_alloc(12,4,$err$i$i$i$i$i)|0); //@line 84 "/checkout/src/liballoc/heap.rs"
 $6 = ($5|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
 if ($6) {
  ___rust_oom($_5$i$i$i$i$i$i); //@line 98 "/checkout/src/liballoc/heap.rs"
  // unreachable; //@line 98 "/checkout/src/liballoc/heap.rs"
 }
 HEAP32[$5>>2] = $3; //@line 242 "/checkout/src/liballoc/boxed.rs"
 $_5$sroa$4$0$$sroa_idx$i$i = ((($5)) + 4|0); //@line 242 "/checkout/src/liballoc/boxed.rs"
 HEAP32[$_5$sroa$4$0$$sroa_idx$i$i>>2] = 9444; //@line 242 "/checkout/src/liballoc/boxed.rs"
 $_5$sroa$5$0$$sroa_raw_idx$i$i = ((($5)) + 8|0); //@line 242 "/checkout/src/liballoc/boxed.rs"
 HEAP8[$_5$sroa$5$0$$sroa_raw_idx$i$i>>0] = 11; //@line 242 "/checkout/src/liballoc/boxed.rs"
 $_5$sroa$6$0$$sroa_raw_idx$i$i = ((($5)) + 9|0); //@line 242 "/checkout/src/liballoc/boxed.rs"
 ;HEAP8[$_5$sroa$6$0$$sroa_raw_idx$i$i>>0]=HEAP8[$_5$sroa$6$i$i>>0]|0;HEAP8[$_5$sroa$6$0$$sroa_raw_idx$i$i+1>>0]=HEAP8[$_5$sroa$6$i$i+1>>0]|0;HEAP8[$_5$sroa$6$0$$sroa_raw_idx$i$i+2>>0]=HEAP8[$_5$sroa$6$i$i+2>>0]|0; //@line 242 "/checkout/src/liballoc/boxed.rs"
 HEAP8[$0>>0] = 2; //@line 253 "/checkout/src/libstd/io/error.rs"
 $7 = ((($0)) + 1|0); //@line 253 "/checkout/src/libstd/io/error.rs"
 ;HEAP8[$7>>0]=HEAP8[$_3$sroa$4$i$i>>0]|0;HEAP8[$7+1>>0]=HEAP8[$_3$sroa$4$i$i+1>>0]|0;HEAP8[$7+2>>0]=HEAP8[$_3$sroa$4$i$i+2>>0]|0; //@line 253 "/checkout/src/libstd/io/error.rs"
 $_3$sroa$43$0$$sroa_idx$i$i = ((($0)) + 4|0); //@line 253 "/checkout/src/libstd/io/error.rs"
 HEAP32[$_3$sroa$43$0$$sroa_idx$i$i>>2] = $5; //@line 253 "/checkout/src/libstd/io/error.rs"
 $8 = ((($arg0)) + 8|0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $9 = HEAP32[$8>>2]|0; //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $10 = ($9|0)==(0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 if ($10) {
  STACKTOP = sp;return; //@line 805 "/checkout/src/libstd/ffi/c_str.rs"
 }
 $11 = ((($arg0)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $12 = HEAP32[$11>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 ___rust_dealloc($12,$9,1); //@line 104 "/checkout/src/liballoc/heap.rs"
 STACKTOP = sp;return; //@line 805 "/checkout/src/libstd/ffi/c_str.rs"
}
function __ZN3std3ffi5c_str4CStr8from_ptr17h0aba58b99886bb0bE($retVal,$ptr) {
 $retVal = $retVal|0;
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($ptr)|0); //@line 902 "/checkout/src/libstd/ffi/c_str.rs"
 $1 = (($0) + 1)|0; //@line 904 "/checkout/src/libstd/ffi/c_str.rs"
 HEAP32[$retVal>>2] = $ptr; //@line 905 "/checkout/src/libstd/ffi/c_str.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 905 "/checkout/src/libstd/ffi/c_str.rs"
 HEAP32[$retVal$index1>>2] = $1; //@line 905 "/checkout/src/libstd/ffi/c_str.rs"
 return; //@line 905 "/checkout/src/libstd/ffi/c_str.rs"
}
function __ZN3std3ffi5c_str4CStr6to_str17h6305959a7e7916fbE($0,$self$0,$self$1) {
 $0 = $0|0;
 $self$0 = $self$0|0;
 $self$1 = $self$1|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($self$1) + -1)|0; //@line 1045 "/checkout/src/libstd/ffi/c_str.rs"
 $2 = ($self$1|0)==(0); //@line 875 "/checkout/src/libcore/slice/mod.rs"
 if ($2) {
  __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($1,0); //@line 876 "/checkout/src/libcore/slice/mod.rs"
  // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
 } else {
  __ZN4core3str9from_utf817hbf2fe8d2f1e56658E($0,$self$0,$1); //@line 1100 "/checkout/src/libstd/ffi/c_str.rs"
  return; //@line 1101 "/checkout/src/libstd/ffi/c_str.rs"
 }
}
function __ZN3std2io5error5Error3new17haaf2cf6c65656bd6E($0,$kind,$error$0,$error$1) {
 $0 = $0|0;
 $kind = $kind|0;
 $error$0 = $error$0|0;
 $error$1 = $error$1|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $_3$i$i = 0, $_3$sroa$4$i = 0, $_3$sroa$43$0$$sroa_idx$i = 0, $_4$sroa$0$i$i$i = 0, $_5$i$i$i$i$i = 0, $_5$i$i$i$i$i$i$i = 0, $_5$sroa$4$0$$sroa_idx$i = 0, $_5$sroa$5$0$$sroa_raw_idx$i = 0, $_5$sroa$6$0$$sroa_raw_idx$i = 0, $_5$sroa$6$i = 0, $err$i$i$i$i = 0, $err$i$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $err$i$i$i$i$i$i = sp + 60|0;
 $_5$i$i$i$i$i$i$i = sp + 48|0;
 $_4$sroa$0$i$i$i = sp;
 $_3$i$i = sp + 36|0;
 $err$i$i$i$i = sp + 24|0;
 $_5$i$i$i$i$i = sp + 12|0;
 $_5$sroa$6$i = sp + 75|0;
 $_3$sroa$4$i = sp + 72|0;
 __ZN87__LT_alloc__string__String_u20_as_u20_core__convert__From_LT__RF__u27_a_u20_str_GT__GT_4from17h54dddae36c47961eE($_3$i$i,$error$0,$error$1); //@line 212 "/checkout/src/libstd/error.rs"
 ;HEAP32[$_4$sroa$0$i$i$i>>2]=HEAP32[$_3$i$i>>2]|0;HEAP32[$_4$sroa$0$i$i$i+4>>2]=HEAP32[$_3$i$i+4>>2]|0;HEAP32[$_4$sroa$0$i$i$i+8>>2]=HEAP32[$_3$i$i+8>>2]|0; //@line 196 "/checkout/src/libstd/error.rs"
 $1 = (___rust_alloc(12,4,$err$i$i$i$i$i$i)|0); //@line 84 "/checkout/src/liballoc/heap.rs"
 $2 = ($1|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
 if ($2) {
  ___rust_oom($_5$i$i$i$i$i$i$i); //@line 98 "/checkout/src/liballoc/heap.rs"
  // unreachable; //@line 98 "/checkout/src/liballoc/heap.rs"
 }
 ;HEAP32[$1>>2]=HEAP32[$_4$sroa$0$i$i$i>>2]|0;HEAP32[$1+4>>2]=HEAP32[$_4$sroa$0$i$i$i+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$_4$sroa$0$i$i$i+8>>2]|0; //@line 242 "/checkout/src/liballoc/boxed.rs"
 $3 = (___rust_alloc(12,4,$err$i$i$i$i)|0); //@line 84 "/checkout/src/liballoc/heap.rs"
 $4 = ($3|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
 if ($4) {
  ___rust_oom($_5$i$i$i$i$i); //@line 98 "/checkout/src/liballoc/heap.rs"
  // unreachable; //@line 98 "/checkout/src/liballoc/heap.rs"
 } else {
  HEAP32[$3>>2] = $1; //@line 242 "/checkout/src/liballoc/boxed.rs"
  $_5$sroa$4$0$$sroa_idx$i = ((($3)) + 4|0); //@line 242 "/checkout/src/liballoc/boxed.rs"
  HEAP32[$_5$sroa$4$0$$sroa_idx$i>>2] = 9444; //@line 242 "/checkout/src/liballoc/boxed.rs"
  $_5$sroa$5$0$$sroa_raw_idx$i = ((($3)) + 8|0); //@line 242 "/checkout/src/liballoc/boxed.rs"
  HEAP8[$_5$sroa$5$0$$sroa_raw_idx$i>>0] = $kind; //@line 242 "/checkout/src/liballoc/boxed.rs"
  $_5$sroa$6$0$$sroa_raw_idx$i = ((($3)) + 9|0); //@line 242 "/checkout/src/liballoc/boxed.rs"
  ;HEAP8[$_5$sroa$6$0$$sroa_raw_idx$i>>0]=HEAP8[$_5$sroa$6$i>>0]|0;HEAP8[$_5$sroa$6$0$$sroa_raw_idx$i+1>>0]=HEAP8[$_5$sroa$6$i+1>>0]|0;HEAP8[$_5$sroa$6$0$$sroa_raw_idx$i+2>>0]=HEAP8[$_5$sroa$6$i+2>>0]|0; //@line 242 "/checkout/src/liballoc/boxed.rs"
  HEAP8[$0>>0] = 2; //@line 253 "/checkout/src/libstd/io/error.rs"
  $5 = ((($0)) + 1|0); //@line 253 "/checkout/src/libstd/io/error.rs"
  ;HEAP8[$5>>0]=HEAP8[$_3$sroa$4$i>>0]|0;HEAP8[$5+1>>0]=HEAP8[$_3$sroa$4$i+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[$_3$sroa$4$i+2>>0]|0; //@line 253 "/checkout/src/libstd/io/error.rs"
  $_3$sroa$43$0$$sroa_idx$i = ((($0)) + 4|0); //@line 253 "/checkout/src/libstd/io/error.rs"
  HEAP32[$_3$sroa$43$0$$sroa_idx$i>>2] = $3; //@line 253 "/checkout/src/libstd/io/error.rs"
  STACKTOP = sp;return; //@line 250 "/checkout/src/libstd/io/error.rs"
 }
}
function __ZN60__LT_std__io__error__Error_u20_as_u20_core__fmt__Display_GT_3fmt17h8826c86e87109e90E($self,$fmt) {
 $self = $self|0;
 $fmt = $fmt|0;
 var $$fca$1$gep = 0, $$sink$i = 0, $$sink2$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$in = 0, $_10 = 0, $_17 = 0, $_35 = 0, $_42 = 0, $_45 = 0;
 var $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$0$0$$sroa_idx$i6 = 0, $_5$sroa$4$0$$sroa_idx2$i = 0, $_5$sroa$4$0$$sroa_idx2$i8 = 0, $code = 0, $detail = 0, $trunc = 0, $trunc$clear = 0, $trunc$i = 0, $trunc$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $_45 = sp + 88|0;
 $_42 = sp + 80|0;
 $_35 = sp + 56|0;
 $_17 = sp + 40|0;
 $_10 = sp + 16|0;
 $detail = sp + 4|0;
 $code = sp;
 $trunc = HEAP8[$self>>0]|0; //@line 527 "/checkout/src/libstd/io/error.rs"
 $trunc$clear = $trunc & 3; //@line 527 "/checkout/src/libstd/io/error.rs"
 switch ($trunc$clear<<24>>24) {
 case 0:  {
  $0 = ((($self)) + 4|0); //@line 527 "/checkout/src/libstd/io/error.rs"
  $1 = HEAP32[$0>>2]|0; //@line 527 "/checkout/src/libstd/io/error.rs"
  HEAP32[$code>>2] = $1; //@line 527 "/checkout/src/libstd/io/error.rs"
  __ZN3std3sys4unix2os12error_string17ha1ceada257432da0E($detail,$1); //@line 528 "/checkout/src/libstd/io/error.rs"
  HEAP32[$_17>>2] = $detail; //@line 529 "/checkout/src/libstd/io/error.rs"
  $2 = ((($_17)) + 4|0); //@line 529 "/checkout/src/libstd/io/error.rs"
  HEAP32[$2>>2] = 428; //@line 529 "/checkout/src/libstd/io/error.rs"
  $3 = ((($_17)) + 8|0); //@line 529 "/checkout/src/libstd/io/error.rs"
  HEAP32[$3>>2] = $code; //@line 529 "/checkout/src/libstd/io/error.rs"
  $4 = ((($_17)) + 12|0); //@line 529 "/checkout/src/libstd/io/error.rs"
  HEAP32[$4>>2] = 288; //@line 529 "/checkout/src/libstd/io/error.rs"
  HEAP32[$_10>>2] = 8360; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $5 = ((($_10)) + 4|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$5>>2] = 3; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $_5$sroa$0$0$$sroa_idx$i6 = ((($_10)) + 8|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_5$sroa$0$0$$sroa_idx$i6>>2] = 12044; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $_5$sroa$4$0$$sroa_idx2$i8 = ((($_10)) + 12|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_5$sroa$4$0$$sroa_idx2$i8>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $6 = ((($_10)) + 16|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$6>>2] = $_17; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $7 = ((($_10)) + 20|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$7>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  __THREW__ = 0;
  $8 = (invoke_iii(429,($fmt|0),($_10|0))|0); //@line 529 "/checkout/src/libstd/io/error.rs"
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $29 = ___cxa_find_matching_catch_2()|0;
   $30 = tempRet0;
   __ZN4core3ptr13drop_in_place17hda15ddb7c8ed5c05E($detail); //@line 530 "/checkout/src/libstd/io/error.rs"
   ___resumeException($29|0);
   // unreachable;
  }
  $25 = ((($detail)) + 4|0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
  $26 = HEAP32[$25>>2]|0; //@line 225 "/checkout/src/liballoc/raw_vec.rs"
  $27 = ($26|0)==(0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
  if (!($27)) {
   $28 = HEAP32[$detail>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
   ___rust_dealloc($28,$26,1); //@line 104 "/checkout/src/liballoc/heap.rs"
  }
  $_0$0$in = $8;
  STACKTOP = sp;return ($_0$0$in|0); //@line 534 "/checkout/src/libstd/io/error.rs"
  break;
 }
 case 1:  {
  $11 = ((($self)) + 1|0); //@line 532 "/checkout/src/libstd/io/error.rs"
  $trunc$i = HEAP8[$11>>0]|0; //@line 532 "/checkout/src/libstd/io/error.rs"
  $trunc$i$clear = $trunc$i & 31; //@line 191 "/checkout/src/libstd/io/error.rs"
  do {
   switch ($trunc$i$clear<<24>>24) {
   case 0:  {
    $$sink$i = 16;$$sink2$i = 22155;
    break;
   }
   case 1:  {
    $$sink$i = 17;$$sink2$i = 22138;
    break;
   }
   case 2:  {
    $$sink$i = 18;$$sink2$i = 22120;
    break;
   }
   case 3:  {
    $$sink$i = 16;$$sink2$i = 22104;
    break;
   }
   case 4:  {
    $$sink$i = 18;$$sink2$i = 22086;
    break;
   }
   case 5:  {
    $$sink$i = 13;$$sink2$i = 22073;
    break;
   }
   case 6:  {
    $$sink$i = 14;$$sink2$i = 22059;
    break;
   }
   case 7:  {
    $$sink$i = 21;$$sink2$i = 22038;
    break;
   }
   case 8:  {
    $$sink$i = 11;$$sink2$i = 22027;
    break;
   }
   case 9:  {
    $$sink$i = 21;$$sink2$i = 22006;
    break;
   }
   case 10:  {
    $$sink$i = 21;$$sink2$i = 21985;
    break;
   }
   case 11:  {
    $$sink$i = 23;$$sink2$i = 21962;
    break;
   }
   case 12:  {
    $$sink$i = 12;$$sink2$i = 21950;
    break;
   }
   case 13:  {
    $$sink$i = 9;$$sink2$i = 21941;
    break;
   }
   case 14:  {
    $$sink$i = 10;$$sink2$i = 21931;
    break;
   }
   case 15:  {
    $$sink$i = 21;$$sink2$i = 21910;
    break;
   }
   case 16:  {
    $$sink$i = 14;$$sink2$i = 21896;
    break;
   }
   case 17:  {
    $$sink$i = 22;$$sink2$i = 21874;
    break;
   }
   case 18:  {
    __ZN3std9panicking11begin_panic17hc122bd4e5599889dE(21834,40,8328); //@line 209 "/checkout/src/libstd/io/error.rs"
    // unreachable; //@line 209 "/checkout/src/libstd/io/error.rs"
    break;
   }
   default: {
    // unreachable; //@line 211 "/checkout/src/libstd/io/error.rs"
   }
   }
  } while(0);
  HEAP32[$_45>>2] = $$sink2$i; //@line 532 "/checkout/src/libstd/io/error.rs"
  $$fca$1$gep = ((($_45)) + 4|0); //@line 532 "/checkout/src/libstd/io/error.rs"
  HEAP32[$$fca$1$gep>>2] = $$sink$i; //@line 532 "/checkout/src/libstd/io/error.rs"
  HEAP32[$_42>>2] = $_45; //@line 532 "/checkout/src/libstd/io/error.rs"
  $12 = ((($_42)) + 4|0); //@line 532 "/checkout/src/libstd/io/error.rs"
  HEAP32[$12>>2] = 400; //@line 532 "/checkout/src/libstd/io/error.rs"
  HEAP32[$_35>>2] = 8352; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $13 = ((($_35)) + 4|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$13>>2] = 1; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $_5$sroa$0$0$$sroa_idx$i = ((($_35)) + 8|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 11348; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $_5$sroa$4$0$$sroa_idx2$i = ((($_35)) + 12|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_5$sroa$4$0$$sroa_idx2$i>>2] = 1; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $14 = ((($_35)) + 16|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$14>>2] = $_42; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $15 = ((($_35)) + 20|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$15>>2] = 1; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $16 = (__ZN4core3fmt9Formatter9write_fmt17h650e8f365614dc75E($fmt,$_35)|0); //@line 532 "/checkout/src/libstd/io/error.rs"
  $_0$0$in = $16;
  STACKTOP = sp;return ($_0$0$in|0); //@line 534 "/checkout/src/libstd/io/error.rs"
  break;
 }
 case 2:  {
  $17 = ((($self)) + 4|0); //@line 531 "/checkout/src/libstd/io/error.rs"
  $18 = HEAP32[$17>>2]|0; //@line 531 "/checkout/src/libstd/io/error.rs"
  $19 = HEAP32[$18>>2]|0; //@line 693 "/checkout/src/liballoc/boxed.rs"
  $20 = ((($18)) + 4|0); //@line 693 "/checkout/src/liballoc/boxed.rs"
  $21 = HEAP32[$20>>2]|0; //@line 693 "/checkout/src/liballoc/boxed.rs"
  $22 = ((($21)) + 24|0); //@line 693 "/checkout/src/liballoc/boxed.rs"
  $23 = HEAP32[$22>>2]|0; //@line 693 "/checkout/src/liballoc/boxed.rs"
  $24 = (FUNCTION_TABLE_iii[$23 & 511]($19,$fmt)|0); //@line 693 "/checkout/src/liballoc/boxed.rs"
  $_0$0$in = $24;
  STACKTOP = sp;return ($_0$0$in|0); //@line 534 "/checkout/src/libstd/io/error.rs"
  break;
 }
 default: {
  // unreachable; //@line 534 "/checkout/src/libstd/io/error.rs"
 }
 }
 return (0)|0;
}
function __ZN60__LT_alloc__string__String_u20_as_u20_core__fmt__Display_GT_3fmt17hc4e2d11fe3b65dddE_930($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 $1 = ((($self)) + 8|0); //@line 1690 "/checkout/src/liballoc/vec.rs"
 $2 = HEAP32[$1>>2]|0; //@line 1690 "/checkout/src/liballoc/vec.rs"
 $3 = (__ZN42__LT_str_u20_as_u20_core__fmt__Display_GT_3fmt17hd64e49219890df95E($0,$2,$f)|0); //@line 1762 "/checkout/src/liballoc/string.rs"
 return ($3|0); //@line 1763 "/checkout/src/liballoc/string.rs"
}
function __ZN62__LT_std__ffi__c_str__NulError_u20_as_u20_core__fmt__Debug_GT_3fmt17h002c553555a4dcddE($self,$__arg_0) {
 $self = $self|0;
 $__arg_0 = $__arg_0|0;
 var $0 = 0, $1 = 0, $_14 = 0, $_20 = 0, $builder = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_20 = sp + 16|0;
 $_14 = sp + 12|0;
 $builder = sp;
 $0 = ((($self)) + 4|0); //@line 233 "/checkout/src/libstd/ffi/c_str.rs"
 __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder,$__arg_0,22182,8); //@line 231 "/checkout/src/libstd/ffi/c_str.rs"
 HEAP32[$_14>>2] = $self; //@line 233 "/checkout/src/libstd/ffi/c_str.rs"
 (__ZN4core3fmt8builders10DebugTuple5field17hf986ac1f5cbaa58cE($builder,$_14,8384)|0); //@line 231 "/checkout/src/libstd/ffi/c_str.rs"
 HEAP32[$_20>>2] = $0; //@line 233 "/checkout/src/libstd/ffi/c_str.rs"
 (__ZN4core3fmt8builders10DebugTuple5field17hf986ac1f5cbaa58cE($builder,$_20,8400)|0); //@line 231 "/checkout/src/libstd/ffi/c_str.rs"
 $1 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder)|0); //@line 231 "/checkout/src/libstd/ffi/c_str.rs"
 STACKTOP = sp;return ($1|0); //@line 231 "/checkout/src/libstd/ffi/c_str.rs"
}
function __ZN4core3ptr13drop_in_place17h0ca949c84f96d924E($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr13drop_in_place17h4f9b86168d436f6eE($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr13drop_in_place17hb434eb5d905d2ad2E_llvm_2964622($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $switch$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$arg0>>0]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $switch$i = ($0&255)<(2); //@line 59 "/checkout/src/libcore/ptr.rs"
 if ($switch$i) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 $1 = ((($arg0)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $2 = HEAP32[$1>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $3 = HEAP32[$2>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $4 = ((($2)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $5 = HEAP32[$4>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $6 = HEAP32[$5>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 __THREW__ = 0;
 invoke_vi($6|0,($3|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  $18 = HEAP32[$2>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $19 = HEAP32[$4>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  __ZN5alloc4heap8box_free17hb8be26a1f37cb671E_llvm_2964622($18,$19); //@line 59 "/checkout/src/libcore/ptr.rs"
  $20 = HEAP32[$1>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  __ZN5alloc4heap8box_free17h0833f2b89912900bE_llvm_2964622($20); //@line 59 "/checkout/src/libcore/ptr.rs"
  ___resumeException($16|0);
  // unreachable;
 }
 $9 = HEAP32[$4>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $10 = ((($9)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $11 = HEAP32[$10>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
 $12 = ($11|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
 if (!($12)) {
  $13 = HEAP32[$2>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $14 = ((($9)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
  $15 = HEAP32[$14>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
  ___rust_dealloc($13,$11,$15); //@line 104 "/checkout/src/liballoc/heap.rs"
 }
 $21 = HEAP32[$1>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 ___rust_dealloc($21,12,4); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN5alloc4heap8box_free17hb8be26a1f37cb671E_llvm_2964622($ptr$0,$ptr$1) {
 $ptr$0 = $ptr$0|0;
 $ptr$1 = $ptr$1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ptr$1)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $1 = HEAP32[$0>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
 $2 = ($1|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
 if ($2) {
  return; //@line 265 "/checkout/src/liballoc/heap.rs"
 }
 $3 = ((($ptr$1)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $4 = HEAP32[$3>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
 ___rust_dealloc($ptr$0,$1,$4); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 265 "/checkout/src/liballoc/heap.rs"
}
function __ZN5alloc4heap8box_free17h0833f2b89912900bE_llvm_2964622($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___rust_dealloc($ptr,12,4); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 265 "/checkout/src/liballoc/heap.rs"
}
function __ZN4core3ptr13drop_in_place17ha37d92841bbc0d35E_llvm_2964622($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $1 = ($0|0)==(0|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 if ($1) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 $2 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($2-1)|0); //@line 1529 "/checkout/src/libcore/sync/atomic.rs"
 $3 = ($2|0)==(1); //@line 933 "/checkout/src/liballoc/arc.rs"
 if (!($3)) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 /* fence */; //@line 1706 "/checkout/src/libcore/sync/atomic.rs"
 __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h6b99c066bc6eaea1E($arg0); //@line 968 "/checkout/src/liballoc/arc.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr13drop_in_place17hab16597baac572fdE_llvm_2964622($arg0) {
 $arg0 = $arg0|0;
 var $$pre$i$i$i = 0, $$pre12$i1$i$i = 0, $$sink$in$phi$trans$insert$i2$i$i = 0, $$sink$in$pre$phi$i$i$iZZZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $switch$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0; //@line 456 "/checkout/src/libstd/sync/mutex.rs"
 $1 = ((($0)) + 4|0); //@line 456 "/checkout/src/libstd/sync/mutex.rs"
 $2 = ((($arg0)) + 4|0); //@line 456 "/checkout/src/libstd/sync/mutex.rs"
 $3 = HEAP8[$2>>0]|0; //@line 46 "/checkout/src/libstd/sys_common/poison.rs"
 $4 = ($3<<24>>24)==(0); //@line 46 "/checkout/src/libstd/sys_common/poison.rs"
 if ($4) {
  $5 = HEAP32[2018]|0; //@line 374 "/checkout/src/libstd/thread/local.rs"
  $6 = (FUNCTION_TABLE_i[$5 & 511]()|0); //@line 374 "/checkout/src/libstd/thread/local.rs"
  $7 = ($6|0)==(0|0); //@line 374 "/checkout/src/libstd/thread/local.rs"
  if ($7) {
   __ZN4core6result13unwrap_failed17h6c499c654b178840E(21076,57); //@line 809 "/checkout/src/libcore/result.rs"
   // unreachable;
  }
  $8 = HEAP32[$6>>2]|0; //@line 378 "/checkout/src/libstd/thread/local.rs"
  $switch$i$i$i = ($8|0)==(1); //@line 378 "/checkout/src/libstd/thread/local.rs"
  if ($switch$i$i$i) {
   $$sink$in$phi$trans$insert$i2$i$i = ((($6)) + 4|0);
   $$pre$i$i$i = HEAP32[$$sink$in$phi$trans$insert$i2$i$i>>2]|0;
   $$sink$in$pre$phi$i$i$iZZZ2D = $$sink$in$phi$trans$insert$i2$i$i;$15 = $$pre$i$i$i;
  } else {
   $9 = HEAP32[(8076)>>2]|0; //@line 295 "/checkout/src/libstd/thread/local.rs"
   $10 = (FUNCTION_TABLE_i[$9 & 511]()|0); //@line 295 "/checkout/src/libstd/thread/local.rs"
   $11 = $6; //@line 239 "/checkout/src/libcore/ptr.rs"
   $12 = $11; //@line 239 "/checkout/src/libcore/ptr.rs"
   HEAP32[$12>>2] = 1; //@line 239 "/checkout/src/libcore/ptr.rs"
   $13 = (($11) + 4)|0; //@line 239 "/checkout/src/libcore/ptr.rs"
   $14 = $13; //@line 239 "/checkout/src/libcore/ptr.rs"
   HEAP32[$14>>2] = $10; //@line 239 "/checkout/src/libcore/ptr.rs"
   $$pre12$i1$i$i = ((($6)) + 4|0);
   $$sink$in$pre$phi$i$i$iZZZ2D = $$pre12$i1$i$i;$15 = $10;
  }
  HEAP8[$$sink$in$pre$phi$i$i$iZZZ2D>>0]=$15&255;HEAP8[$$sink$in$pre$phi$i$i$iZZZ2D+1>>0]=($15>>8)&255;HEAP8[$$sink$in$pre$phi$i$i$iZZZ2D+2>>0]=($15>>16)&255;HEAP8[$$sink$in$pre$phi$i$i$iZZZ2D+3>>0]=$15>>24; //@line 239 "/checkout/src/libcore/ptr.rs"
  $16 = ($15|0)==(0); //@line 487 "/checkout/src/libstd/panicking.rs"
  if (!($16)) {
   HEAP8[$1>>0] = 1; //@line 1479 "/checkout/src/libcore/sync/atomic.rs"
  }
 }
 $17 = HEAP32[$arg0>>2]|0; //@line 457 "/checkout/src/libstd/sync/mutex.rs"
 $18 = HEAP32[$17>>2]|0; //@line 457 "/checkout/src/libstd/sync/mutex.rs"
 (_pthread_mutex_unlock(($18|0))|0); //@line 72 "/checkout/src/libstd/sys/unix/mutex.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN3std6thread4park17ha6b720b9f5f91b99E() {
 var $$expand_i1_val = 0, $$fca$1$gep = 0, $$pre$i$i$i = 0, $$pre$i$i$i$i = 0, $$pre$phiZ2D = 0, $$pre12$i1$i$i = 0, $$pre12$i1$i$i$i = 0, $$sink$in$phi$trans$insert$i2$i$i = 0, $$sink$in$phi$trans$insert$i2$i$i$i = 0, $$sink$in$pre$phi$i$i$i$iZZZ2D = 0, $$sink$in$pre$phi$i$i$iZZZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $cond = 0, $guard$i = 0, $lpad$phi37$index = 0, $lpad$phi37$index4 = 0, $m = 0, $not$$i = 0, $not$$i2 = 0, $or$cond$i$i = 0, $personalityslot$sroa$0$0 = 0, $personalityslot$sroa$6$0 = 0, $self$i$i = 0, $success = 0, $success11 = 0, $success14 = 0, $success8 = 0, $switch$i$i$i = 0, $switch$i$i$i$i = 0, $thread = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $guard$i = sp + 24|0;
 $self$i$i = sp + 16|0;
 $m = sp + 8|0;
 $thread = sp;
 $0 = (__ZN46__LT_std__thread__local__LocalKey_LT_T_GT__GT_8try_with17ha1e39309185d6fdbE(8992)|0); //@line 25 "/checkout/src/libstd/sys_common/thread_info.rs"
 HEAP32[$self$i$i>>2] = $0;
 $1 = ($0|0)==(0|0); //@line 301 "/checkout/src/libcore/option.rs"
 if ($1) {
  __THREW__ = 0;
  invoke_vii(364,(22233|0),94); //@line 302 "/checkout/src/libcore/option.rs"
  $2 = __THREW__; __THREW__ = 0;
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  __ZN4core3ptr13drop_in_place17ha37d92841bbc0d35E_llvm_2964622($self$i$i); //@line 304 "/checkout/src/libcore/option.rs"
  ___resumeException($3|0);
  // unreachable;
 }
 HEAP32[$thread>>2] = $0; //@line 784 "/checkout/src/libstd/thread/mod.rs"
 $5 = ((($0)) + 24|0); //@line 788 "/checkout/src/libstd/thread/mod.rs"
 $6 = HEAP32[$5>>2]|0;if (($6|0) == 2) HEAP32[$5>>2] = 0; //@line 1549 "/checkout/src/libcore/sync/atomic.rs"
 $success = ($6|0)==(2);
 L4: do {
  if (!($success)) {
   $10 = HEAP32[$thread>>2]|0; //@line 2540 "/checkout/src/libcore/ptr.rs"
   $11 = ((($10)) + 28|0); //@line 793 "/checkout/src/libstd/thread/mod.rs"
   $12 = HEAP32[$11>>2]|0; //@line 230 "/checkout/src/libstd/sync/mutex.rs"
   (_pthread_mutex_lock(($12|0))|0); //@line 67 "/checkout/src/libstd/sys/unix/mutex.rs"
   $13 = ((($10)) + 32|0); //@line 426 "/checkout/src/libstd/sync/mutex.rs"
   $14 = HEAP32[2018]|0; //@line 374 "/checkout/src/libstd/thread/local.rs"
   __THREW__ = 0;
   $15 = (invoke_i($14|0)|0); //@line 374 "/checkout/src/libstd/thread/local.rs"
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   do {
    if (!($17)) {
     $18 = ($15|0)==(0|0); //@line 374 "/checkout/src/libstd/thread/local.rs"
     if ($18) {
      __THREW__ = 0;
      invoke_vii(413,(21076|0),57); //@line 809 "/checkout/src/libcore/result.rs"
      $28 = __THREW__; __THREW__ = 0;
      break;
     }
     $19 = HEAP32[$15>>2]|0; //@line 378 "/checkout/src/libstd/thread/local.rs"
     $switch$i$i$i$i = ($19|0)==(1); //@line 378 "/checkout/src/libstd/thread/local.rs"
     if ($switch$i$i$i$i) {
      $$sink$in$phi$trans$insert$i2$i$i$i = ((($15)) + 4|0);
      $$pre$i$i$i$i = HEAP32[$$sink$in$phi$trans$insert$i2$i$i$i>>2]|0;
      $$sink$in$pre$phi$i$i$i$iZZZ2D = $$sink$in$phi$trans$insert$i2$i$i$i;$29 = $$pre$i$i$i$i;
     } else {
      $20 = HEAP32[(8076)>>2]|0; //@line 295 "/checkout/src/libstd/thread/local.rs"
      __THREW__ = 0;
      $21 = (invoke_i($20|0)|0); //@line 295 "/checkout/src/libstd/thread/local.rs"
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       break;
      }
      $24 = $15; //@line 239 "/checkout/src/libcore/ptr.rs"
      $25 = $24; //@line 239 "/checkout/src/libcore/ptr.rs"
      HEAP32[$25>>2] = 1; //@line 239 "/checkout/src/libcore/ptr.rs"
      $26 = (($24) + 4)|0; //@line 239 "/checkout/src/libcore/ptr.rs"
      $27 = $26; //@line 239 "/checkout/src/libcore/ptr.rs"
      HEAP32[$27>>2] = $21; //@line 239 "/checkout/src/libcore/ptr.rs"
      $$pre12$i1$i$i$i = ((($15)) + 4|0);
      $$sink$in$pre$phi$i$i$i$iZZZ2D = $$pre12$i1$i$i$i;$29 = $21;
     }
     HEAP8[$$sink$in$pre$phi$i$i$i$iZZZ2D>>0]=$29&255;HEAP8[$$sink$in$pre$phi$i$i$i$iZZZ2D+1>>0]=($29>>8)&255;HEAP8[$$sink$in$pre$phi$i$i$i$iZZZ2D+2>>0]=($29>>16)&255;HEAP8[$$sink$in$pre$phi$i$i$i$iZZZ2D+3>>0]=$29>>24; //@line 239 "/checkout/src/libcore/ptr.rs"
     $30 = ($29|0)!=(0); //@line 487 "/checkout/src/libstd/panicking.rs"
     $31 = HEAP8[$13>>0]|0; //@line 1491 "/checkout/src/libcore/sync/atomic.rs"
     $not$$i2 = ($31<<24>>24)==(0); //@line 37 "/checkout/src/libstd/sys_common/poison.rs"
     if (!($not$$i2)) {
      __THREW__ = 0;
      invoke_viiii(430,(22190|0),43,($11|0),($30|0)); //@line 782 "/checkout/src/libcore/result.rs"
      $32 = __THREW__; __THREW__ = 0;
      break;
     }
     HEAP32[$m>>2] = $11; //@line 793 "/checkout/src/libstd/thread/mod.rs"
     $$fca$1$gep = ((($m)) + 4|0); //@line 793 "/checkout/src/libstd/thread/mod.rs"
     $$expand_i1_val = $30&1; //@line 793 "/checkout/src/libstd/thread/mod.rs"
     HEAP8[$$fca$1$gep>>0] = $$expand_i1_val; //@line 793 "/checkout/src/libstd/thread/mod.rs"
     $33 = HEAP32[$thread>>2]|0; //@line 2540 "/checkout/src/libcore/ptr.rs"
     $34 = ((($33)) + 24|0); //@line 794 "/checkout/src/libstd/thread/mod.rs"
     $35 = HEAP32[$34>>2]|0;if (($35|0) == 0) HEAP32[$34>>2] = 1; //@line 1549 "/checkout/src/libcore/sync/atomic.rs"
     $success8 = ($35|0)==(0);
     L19: do {
      if ($success8) {
       $36 = ((($guard$i)) + 4|0);
       while(1) {
        $62 = HEAP32[$thread>>2]|0; //@line 2540 "/checkout/src/libcore/ptr.rs"
        $63 = HEAP32[$m>>2]|0; //@line 800 "/checkout/src/libstd/thread/mod.rs"
        $64 = HEAP8[$$fca$1$gep>>0]|0; //@line 800 "/checkout/src/libstd/thread/mod.rs"
        HEAP32[$guard$i>>2] = $63;
        HEAP8[$36>>0] = $64;
        $65 = HEAP32[$63>>2]|0; //@line 479 "/checkout/src/libstd/sync/mutex.rs"
        $66 = $65; //@line 439 "/checkout/src/libstd/sync/condvar.rs"
        $67 = ((($62)) + 40|0); //@line 440 "/checkout/src/libstd/sync/condvar.rs"
        $68 = HEAP32[$67>>2]|0;if (($68|0) == 0) HEAP32[$67>>2] = $66; //@line 1549 "/checkout/src/libcore/sync/atomic.rs"
        $success11 = ($68|0)==(0);
        $69 = ($68|0)==($66|0); //@line 447 "/checkout/src/libstd/sync/condvar.rs"
        $or$cond$i$i = $success11 | $69; //@line 443 "/checkout/src/libstd/sync/condvar.rs"
        if (!($or$cond$i$i)) {
         label = 34;
         break;
        }
        $75 = ((($62)) + 36|0); //@line 800 "/checkout/src/libstd/thread/mod.rs"
        $76 = HEAP32[$75>>2]|0; //@line 212 "/checkout/src/libstd/sync/condvar.rs"
        (_pthread_cond_wait(($76|0),($65|0))|0); //@line 78 "/checkout/src/libstd/sys/unix/condvar.rs"
        $77 = HEAP32[$guard$i>>2]|0; //@line 483 "/checkout/src/libstd/sync/mutex.rs"
        $78 = ((($77)) + 4|0); //@line 483 "/checkout/src/libstd/sync/mutex.rs"
        $79 = HEAP8[$78>>0]|0; //@line 1491 "/checkout/src/libcore/sync/atomic.rs"
        $80 = HEAP8[$36>>0]|0;
        $not$$i = ($79<<24>>24)==(0); //@line 215 "/checkout/src/libstd/sync/condvar.rs"
        if (!($not$$i)) {
         label = 36;
         break;
        }
        HEAP32[$m>>2] = $77; //@line 800 "/checkout/src/libstd/thread/mod.rs"
        HEAP8[$$fca$1$gep>>0] = $80; //@line 800 "/checkout/src/libstd/thread/mod.rs"
        $83 = HEAP32[$thread>>2]|0; //@line 2540 "/checkout/src/libcore/ptr.rs"
        $84 = ((($83)) + 24|0); //@line 801 "/checkout/src/libstd/thread/mod.rs"
        $85 = HEAP32[$84>>2]|0;if (($85|0) == 2) HEAP32[$84>>2] = 0; //@line 1549 "/checkout/src/libcore/sync/atomic.rs"
        $success14 = ($85|0)==(2);
        if ($success14) {
         $$pre$phiZ2D = $$fca$1$gep;
         break L19;
        }
       }
       if ((label|0) == 34) {
        __THREW__ = 0;
        invoke_viii(414,(24106|0),54,(9492|0)); //@line 451 "/checkout/src/libstd/sync/condvar.rs"
        $70 = __THREW__; __THREW__ = 0;
        $71 = ___cxa_find_matching_catch_2()|0;
        $72 = tempRet0;
        __THREW__ = 0;
        invoke_vi(431,($guard$i|0)); //@line 220 "/checkout/src/libstd/sync/condvar.rs"
        $73 = __THREW__; __THREW__ = 0;
        $74 = $73&1;
        if ($74) {
         label = 39;
        } else {
         $lpad$phi37$index = $71;$lpad$phi37$index4 = $72;
        }
       }
       else if ((label|0) == 36) {
        $81 = ($80<<24>>24)!=(0);
        __THREW__ = 0;
        invoke_viiii(430,(22190|0),43,($77|0),($81|0)); //@line 782 "/checkout/src/libcore/result.rs"
        $82 = __THREW__; __THREW__ = 0;
        label = 39;
       }
       if ((label|0) == 39) {
        $88 = ___cxa_find_matching_catch_2()|0;
        $89 = tempRet0;
        $lpad$phi37$index = $88;$lpad$phi37$index4 = $89;
       }
       $personalityslot$sroa$0$0 = $lpad$phi37$index;$personalityslot$sroa$6$0 = $lpad$phi37$index4;
       __ZN4core3ptr13drop_in_place17h6ba3782eeecc005cE($thread); //@line 806 "/checkout/src/libstd/thread/mod.rs"
       ___resumeException($personalityslot$sroa$0$0|0);
       // unreachable;
      } else {
       $cond = ($35|0)==(2); //@line 796 "/checkout/src/libstd/thread/mod.rs"
       if ($cond) {
        $$pre$phiZ2D = $$fca$1$gep;
        break;
       }
       __THREW__ = 0;
       invoke_viii(414,(22491|0),23,(8464|0)); //@line 797 "/checkout/src/libstd/thread/mod.rs"
       $37 = __THREW__; __THREW__ = 0;
       $38 = ___cxa_find_matching_catch_2()|0;
       $39 = tempRet0;
       __ZN4core3ptr13drop_in_place17hab16597baac572fdE_llvm_2964622($m); //@line 806 "/checkout/src/libstd/thread/mod.rs"
       $personalityslot$sroa$0$0 = $38;$personalityslot$sroa$6$0 = $39;
       __ZN4core3ptr13drop_in_place17h6ba3782eeecc005cE($thread); //@line 806 "/checkout/src/libstd/thread/mod.rs"
       ___resumeException($personalityslot$sroa$0$0|0);
       // unreachable;
      }
     } while(0);
     $40 = HEAP32[$m>>2]|0; //@line 456 "/checkout/src/libstd/sync/mutex.rs"
     $41 = ((($40)) + 4|0); //@line 456 "/checkout/src/libstd/sync/mutex.rs"
     $42 = HEAP8[$$pre$phiZ2D>>0]|0; //@line 46 "/checkout/src/libstd/sys_common/poison.rs"
     $43 = ($42<<24>>24)==(0); //@line 46 "/checkout/src/libstd/sys_common/poison.rs"
     if ($43) {
      $44 = HEAP32[2018]|0; //@line 374 "/checkout/src/libstd/thread/local.rs"
      __THREW__ = 0;
      $45 = (invoke_i($44|0)|0); //@line 374 "/checkout/src/libstd/thread/local.rs"
      $46 = __THREW__; __THREW__ = 0;
      $47 = $46&1;
      if ($47) {
       break;
      }
      $48 = ($45|0)==(0|0); //@line 374 "/checkout/src/libstd/thread/local.rs"
      if ($48) {
       __THREW__ = 0;
       invoke_vii(413,(21076|0),57); //@line 809 "/checkout/src/libcore/result.rs"
       $58 = __THREW__; __THREW__ = 0;
       break;
      }
      $49 = HEAP32[$45>>2]|0; //@line 378 "/checkout/src/libstd/thread/local.rs"
      $switch$i$i$i = ($49|0)==(1); //@line 378 "/checkout/src/libstd/thread/local.rs"
      if ($switch$i$i$i) {
       $$sink$in$phi$trans$insert$i2$i$i = ((($45)) + 4|0);
       $$pre$i$i$i = HEAP32[$$sink$in$phi$trans$insert$i2$i$i>>2]|0;
       $$sink$in$pre$phi$i$i$iZZZ2D = $$sink$in$phi$trans$insert$i2$i$i;$59 = $$pre$i$i$i;
      } else {
       $50 = HEAP32[(8076)>>2]|0; //@line 295 "/checkout/src/libstd/thread/local.rs"
       __THREW__ = 0;
       $51 = (invoke_i($50|0)|0); //@line 295 "/checkout/src/libstd/thread/local.rs"
       $52 = __THREW__; __THREW__ = 0;
       $53 = $52&1;
       if ($53) {
        break;
       }
       $54 = $45; //@line 239 "/checkout/src/libcore/ptr.rs"
       $55 = $54; //@line 239 "/checkout/src/libcore/ptr.rs"
       HEAP32[$55>>2] = 1; //@line 239 "/checkout/src/libcore/ptr.rs"
       $56 = (($54) + 4)|0; //@line 239 "/checkout/src/libcore/ptr.rs"
       $57 = $56; //@line 239 "/checkout/src/libcore/ptr.rs"
       HEAP32[$57>>2] = $51; //@line 239 "/checkout/src/libcore/ptr.rs"
       $$pre12$i1$i$i = ((($45)) + 4|0);
       $$sink$in$pre$phi$i$i$iZZZ2D = $$pre12$i1$i$i;$59 = $51;
      }
      HEAP8[$$sink$in$pre$phi$i$i$iZZZ2D>>0]=$59&255;HEAP8[$$sink$in$pre$phi$i$i$iZZZ2D+1>>0]=($59>>8)&255;HEAP8[$$sink$in$pre$phi$i$i$iZZZ2D+2>>0]=($59>>16)&255;HEAP8[$$sink$in$pre$phi$i$i$iZZZ2D+3>>0]=$59>>24; //@line 239 "/checkout/src/libcore/ptr.rs"
      $60 = ($59|0)==(0); //@line 487 "/checkout/src/libstd/panicking.rs"
      if (!($60)) {
       HEAP8[$41>>0] = 1; //@line 1479 "/checkout/src/libcore/sync/atomic.rs"
      }
     }
     $61 = HEAP32[$40>>2]|0; //@line 457 "/checkout/src/libstd/sync/mutex.rs"
     (_pthread_mutex_unlock(($61|0))|0); //@line 72 "/checkout/src/libstd/sys/unix/mutex.rs"
     break L4;
    }
   } while(0);
   $86 = ___cxa_find_matching_catch_2()|0;
   $87 = tempRet0;
   $personalityslot$sroa$0$0 = $86;$personalityslot$sroa$6$0 = $87;
   __ZN4core3ptr13drop_in_place17h6ba3782eeecc005cE($thread); //@line 806 "/checkout/src/libstd/thread/mod.rs"
   ___resumeException($personalityslot$sroa$0$0|0);
   // unreachable;
  }
 } while(0);
 $7 = HEAP32[$thread>>2]|0; //@line 2540 "/checkout/src/libcore/ptr.rs"
 $8 = HEAP32[$7>>2]|0;HEAP32[$7>>2] = (($8-1)|0); //@line 1529 "/checkout/src/libcore/sync/atomic.rs"
 $9 = ($8|0)==(1); //@line 933 "/checkout/src/liballoc/arc.rs"
 if (!($9)) {
  STACKTOP = sp;return; //@line 806 "/checkout/src/libstd/thread/mod.rs"
 }
 /* fence */; //@line 1706 "/checkout/src/libcore/sync/atomic.rs"
 __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h6b99c066bc6eaea1E($thread); //@line 968 "/checkout/src/liballoc/arc.rs"
 STACKTOP = sp;return; //@line 806 "/checkout/src/libstd/thread/mod.rs"
}
function __ZN4core3ptr13drop_in_place17h6ba3782eeecc005cE($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0; //@line 2540 "/checkout/src/libcore/ptr.rs"
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1-1)|0); //@line 1529 "/checkout/src/libcore/sync/atomic.rs"
 $2 = ($1|0)==(1); //@line 933 "/checkout/src/liballoc/arc.rs"
 if (!($2)) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 /* fence */; //@line 1706 "/checkout/src/libcore/sync/atomic.rs"
 __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h6b99c066bc6eaea1E($arg0); //@line 968 "/checkout/src/liballoc/arc.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN3std6thread6Thread3new17h7fe66d39127424c4E($name) {
 $name = $name|0;
 var $$sreg$field = 0, $$sreg$field3 = 0, $$sreg$index2 = 0, $$sreg1$field = 0, $$sreg1$field6 = 0, $$sreg1$index5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0;
 var $_10 = 0, $_13$i$i = 0, $_2$i = 0, $_2$i1$i = 0, $_3 = 0, $_3$i$i$sroa$12$4$$sroa_idx = 0, $_3$i$i$sroa$12$8$$sroa_idx = 0, $_3$i$i$sroa$9$4$$sroa_idx = 0, $_5$i$i$i$i = 0, $_6$sroa$0$0$$sroa_idx = 0, $_6$sroa$4$0$$sroa_idx = 0, $_6$sroa$5$0$$sroa_idx = 0, $_6$sroa$6$0$$sroa_idx = 0, $_6$sroa$7$0$$sroa_idx = 0, $_6$sroa$8$0$$sroa_idx = 0, $_7 = 0, $_7$sroa_raw_idx = 0, $_8$i$i$i = 0, $cname$sroa$0$0 = 0, $cname$sroa$5$0 = 0;
 var $err$i$i$i = 0, $personalityslot$sroa$0$0 = 0, $personalityslot$sroa$6$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $0 = sp + 16|0;
 $1 = sp;
 $_2$i1$i = sp + 120|0;
 $_13$i$i = sp + 108|0;
 $_2$i = sp + 96|0;
 $err$i$i$i = sp + 84|0;
 $_5$i$i$i$i = sp + 72|0;
 $_8$i$i$i = sp + 56|0;
 $_10 = sp + 32|0;
 $_7 = sp + 24|0;
 $_3 = sp + 40|0;
 ;HEAP32[$_3>>2]=HEAP32[$name>>2]|0;HEAP32[$_3+4>>2]=HEAP32[$name+4>>2]|0;HEAP32[$_3+8>>2]=HEAP32[$name+8>>2]|0; //@line 1002 "/checkout/src/libstd/thread/mod.rs"
 $2 = HEAP32[$_3>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
 $3 = ($2|0)==(0|0); //@line 404 "/checkout/src/libcore/option.rs"
 do {
  if ($3) {
   $cname$sroa$0$0 = 0;$cname$sroa$5$0 = 0;
  } else {
   ;HEAP32[$_2$i1$i>>2]=HEAP32[$_3>>2]|0;HEAP32[$_2$i1$i+4>>2]=HEAP32[$_3+4>>2]|0;HEAP32[$_2$i1$i+8>>2]=HEAP32[$_3+8>>2]|0; //@line 415 "/checkout/src/libcore/convert.rs"
   __ZN5alloc6string104__LT_impl_u20_core__convert__From_LT_alloc__string__String_GT__u20_for_u20_alloc__vec__Vec_LT_u8_GT__GT_4from17hff8cf27d000af801E($_2$i,$_2$i1$i); //@line 415 "/checkout/src/libcore/convert.rs"
   $4 = HEAP32[$_2$i>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
   $5 = ((($_2$i)) + 8|0); //@line 1690 "/checkout/src/liballoc/vec.rs"
   $6 = HEAP32[$5>>2]|0; //@line 1690 "/checkout/src/liballoc/vec.rs"
   $7 = (_memchr($4,0,$6)|0); //@line 18 "/checkout/src/libstd/sys/unix/memchr.rs"
   $8 = ($7|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
   $9 = $4; //@line 23 "/checkout/src/libstd/sys/unix/memchr.rs"
   if ($8) {
    ;HEAP32[$_13$i$i>>2]=HEAP32[$_2$i>>2]|0;HEAP32[$_13$i$i+4>>2]=HEAP32[$_2$i+4>>2]|0;HEAP32[$_13$i$i+8>>2]=HEAP32[$_2$i+8>>2]|0; //@line 337 "/checkout/src/libstd/ffi/c_str.rs"
    __ZN3std3ffi5c_str7CString18from_vec_unchecked17hf957fef3c393e418E($1,$_13$i$i); //@line 337 "/checkout/src/libstd/ffi/c_str.rs"
    $$sreg$field = HEAP32[$1>>2]|0; //@line 337 "/checkout/src/libstd/ffi/c_str.rs"
    $$sreg$index2 = ((($1)) + 4|0); //@line 337 "/checkout/src/libstd/ffi/c_str.rs"
    $$sreg$field3 = HEAP32[$$sreg$index2>>2]|0; //@line 337 "/checkout/src/libstd/ffi/c_str.rs"
    $10 = $$sreg$field; //@line 337 "/checkout/src/libstd/ffi/c_str.rs"
    $cname$sroa$0$0 = $10;$cname$sroa$5$0 = $$sreg$field3;
    break;
   } else {
    $11 = $7; //@line 26 "/checkout/src/libstd/sys/unix/memchr.rs"
    $12 = (($11) - ($9))|0; //@line 26 "/checkout/src/libstd/sys/unix/memchr.rs"
    $_3$i$i$sroa$12$8$$sroa_idx = ((($_2$i)) + 4|0); //@line 336 "/checkout/src/libstd/ffi/c_str.rs"
    $13 = $_3$i$i$sroa$12$8$$sroa_idx; //@line 336 "/checkout/src/libstd/ffi/c_str.rs"
    $14 = $13; //@line 336 "/checkout/src/libstd/ffi/c_str.rs"
    $15 = HEAP32[$14>>2]|0; //@line 336 "/checkout/src/libstd/ffi/c_str.rs"
    $16 = (($13) + 4)|0; //@line 336 "/checkout/src/libstd/ffi/c_str.rs"
    $17 = $16; //@line 336 "/checkout/src/libstd/ffi/c_str.rs"
    $18 = HEAP32[$17>>2]|0; //@line 336 "/checkout/src/libstd/ffi/c_str.rs"
    HEAP32[$_8$i$i$i>>2] = $12; //@line 809 "/checkout/src/libcore/result.rs"
    $_3$i$i$sroa$9$4$$sroa_idx = ((($_8$i$i$i)) + 4|0); //@line 809 "/checkout/src/libcore/result.rs"
    HEAP32[$_3$i$i$sroa$9$4$$sroa_idx>>2] = $9; //@line 809 "/checkout/src/libcore/result.rs"
    $_3$i$i$sroa$12$4$$sroa_idx = ((($_8$i$i$i)) + 8|0); //@line 809 "/checkout/src/libcore/result.rs"
    $19 = $_3$i$i$sroa$12$4$$sroa_idx; //@line 809 "/checkout/src/libcore/result.rs"
    $20 = $19; //@line 809 "/checkout/src/libcore/result.rs"
    HEAP32[$20>>2] = $15; //@line 809 "/checkout/src/libcore/result.rs"
    $21 = (($19) + 4)|0; //@line 809 "/checkout/src/libcore/result.rs"
    $22 = $21; //@line 809 "/checkout/src/libcore/result.rs"
    HEAP32[$22>>2] = $18; //@line 809 "/checkout/src/libcore/result.rs"
    __ZN4core6result13unwrap_failed17h4a2ba668c6e5492cE(22514,47,$_8$i$i$i); //@line 809 "/checkout/src/libcore/result.rs"
    // unreachable;
   }
  }
 } while(0);
 HEAP32[$_7>>2] = $cname$sroa$0$0; //@line 1007 "/checkout/src/libstd/thread/mod.rs"
 $_7$sroa_raw_idx = ((($_7)) + 4|0); //@line 1007 "/checkout/src/libstd/thread/mod.rs"
 HEAP32[$_7$sroa_raw_idx>>2] = $cname$sroa$5$0; //@line 1007 "/checkout/src/libstd/thread/mod.rs"
 (_pthread_mutex_lock((38416|0))|0); //@line 67 "/checkout/src/libstd/sys/unix/mutex.rs"
 $23 = 31048; //@line 939 "/checkout/src/libstd/thread/mod.rs"
 $24 = $23; //@line 939 "/checkout/src/libstd/thread/mod.rs"
 $25 = HEAP32[$24>>2]|0; //@line 939 "/checkout/src/libstd/thread/mod.rs"
 $26 = (($23) + 4)|0; //@line 939 "/checkout/src/libstd/thread/mod.rs"
 $27 = $26; //@line 939 "/checkout/src/libstd/thread/mod.rs"
 $28 = HEAP32[$27>>2]|0; //@line 939 "/checkout/src/libstd/thread/mod.rs"
 $29 = ($25|0)==(-1); //@line 939 "/checkout/src/libstd/thread/mod.rs"
 $30 = ($28|0)==(-1); //@line 939 "/checkout/src/libstd/thread/mod.rs"
 $31 = $29 & $30; //@line 939 "/checkout/src/libstd/thread/mod.rs"
 if ($31) {
  (_pthread_mutex_unlock((38416|0))|0); //@line 72 "/checkout/src/libstd/sys/unix/mutex.rs"
  __THREW__ = 0;
  invoke_viii(414,(22561|0),55,(8480|0)); //@line 941 "/checkout/src/libstd/thread/mod.rs"
  $32 = __THREW__; __THREW__ = 0;
 } else {
  $33 = (_i64Add(($25|0),($28|0),1,0)|0); //@line 945 "/checkout/src/libstd/thread/mod.rs"
  $34 = tempRet0; //@line 945 "/checkout/src/libstd/thread/mod.rs"
  $35 = 31048; //@line 945 "/checkout/src/libstd/thread/mod.rs"
  $36 = $35; //@line 945 "/checkout/src/libstd/thread/mod.rs"
  HEAP32[$36>>2] = $33; //@line 945 "/checkout/src/libstd/thread/mod.rs"
  $37 = (($35) + 4)|0; //@line 945 "/checkout/src/libstd/thread/mod.rs"
  $38 = $37; //@line 945 "/checkout/src/libstd/thread/mod.rs"
  HEAP32[$38>>2] = $34; //@line 945 "/checkout/src/libstd/thread/mod.rs"
  (_pthread_mutex_unlock((38416|0))|0); //@line 72 "/checkout/src/libstd/sys/unix/mutex.rs"
  __THREW__ = 0;
  invoke_vi(432,($_10|0)); //@line 1010 "/checkout/src/libstd/thread/mod.rs"
  $39 = __THREW__; __THREW__ = 0;
  $40 = $39&1;
  if (!($40)) {
   __THREW__ = 0;
   invoke_vi(433,($0|0)); //@line 1011 "/checkout/src/libstd/thread/mod.rs"
   $$sreg1$field = HEAP32[$0>>2]|0; //@line 1011 "/checkout/src/libstd/thread/mod.rs"
   $$sreg1$index5 = ((($0)) + 4|0); //@line 1011 "/checkout/src/libstd/thread/mod.rs"
   $$sreg1$field6 = HEAP32[$$sreg1$index5>>2]|0; //@line 1011 "/checkout/src/libstd/thread/mod.rs"
   $41 = __THREW__; __THREW__ = 0;
   $42 = $41&1;
   if ($42) {
    $72 = ___cxa_find_matching_catch_2()|0;
    $73 = tempRet0;
    __ZN4core3ptr13drop_in_place17h69e481c4276806c0E($_10); //@line 1012 "/checkout/src/libstd/thread/mod.rs"
    $personalityslot$sroa$0$0 = $72;$personalityslot$sroa$6$0 = $73;
    __ZN4core3ptr13drop_in_place17h8d1d6c8b1cfb4d06E($_7); //@line 1012 "/checkout/src/libstd/thread/mod.rs"
    ___resumeException($personalityslot$sroa$0$0|0);
    // unreachable;
   }
   $43 = $_7; //@line 1006 "/checkout/src/libstd/thread/mod.rs"
   $44 = $43; //@line 1006 "/checkout/src/libstd/thread/mod.rs"
   $45 = HEAP32[$44>>2]|0; //@line 1006 "/checkout/src/libstd/thread/mod.rs"
   $46 = (($43) + 4)|0; //@line 1006 "/checkout/src/libstd/thread/mod.rs"
   $47 = $46; //@line 1006 "/checkout/src/libstd/thread/mod.rs"
   $48 = HEAP32[$47>>2]|0; //@line 1006 "/checkout/src/libstd/thread/mod.rs"
   $49 = $_10; //@line 1006 "/checkout/src/libstd/thread/mod.rs"
   $50 = $49; //@line 1006 "/checkout/src/libstd/thread/mod.rs"
   $51 = HEAP32[$50>>2]|0; //@line 1006 "/checkout/src/libstd/thread/mod.rs"
   $52 = (($49) + 4)|0; //@line 1006 "/checkout/src/libstd/thread/mod.rs"
   $53 = $52; //@line 1006 "/checkout/src/libstd/thread/mod.rs"
   $54 = HEAP32[$53>>2]|0; //@line 1006 "/checkout/src/libstd/thread/mod.rs"
   $55 = (___rust_alloc(48,8,$err$i$i$i)|0); //@line 84 "/checkout/src/liballoc/heap.rs"
   $56 = ($55|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
   if ($56) {
    ___rust_oom($_5$i$i$i$i); //@line 98 "/checkout/src/liballoc/heap.rs"
    // unreachable; //@line 98 "/checkout/src/liballoc/heap.rs"
   } else {
    HEAP32[$55>>2] = 1; //@line 283 "/checkout/src/liballoc/arc.rs"
    $57 = ((($55)) + 4|0); //@line 283 "/checkout/src/liballoc/arc.rs"
    HEAP32[$57>>2] = 1; //@line 283 "/checkout/src/liballoc/arc.rs"
    $_6$sroa$0$0$$sroa_idx = ((($55)) + 8|0); //@line 283 "/checkout/src/liballoc/arc.rs"
    $58 = $_6$sroa$0$0$$sroa_idx; //@line 283 "/checkout/src/liballoc/arc.rs"
    $59 = $58; //@line 283 "/checkout/src/liballoc/arc.rs"
    HEAP32[$59>>2] = $25; //@line 283 "/checkout/src/liballoc/arc.rs"
    $60 = (($58) + 4)|0; //@line 283 "/checkout/src/liballoc/arc.rs"
    $61 = $60; //@line 283 "/checkout/src/liballoc/arc.rs"
    HEAP32[$61>>2] = $28; //@line 283 "/checkout/src/liballoc/arc.rs"
    $_6$sroa$4$0$$sroa_idx = ((($55)) + 16|0); //@line 283 "/checkout/src/liballoc/arc.rs"
    $62 = $_6$sroa$4$0$$sroa_idx; //@line 283 "/checkout/src/liballoc/arc.rs"
    $63 = $62; //@line 283 "/checkout/src/liballoc/arc.rs"
    HEAP32[$63>>2] = $45; //@line 283 "/checkout/src/liballoc/arc.rs"
    $64 = (($62) + 4)|0; //@line 283 "/checkout/src/liballoc/arc.rs"
    $65 = $64; //@line 283 "/checkout/src/liballoc/arc.rs"
    HEAP32[$65>>2] = $48; //@line 283 "/checkout/src/liballoc/arc.rs"
    $_6$sroa$5$0$$sroa_idx = ((($55)) + 24|0); //@line 283 "/checkout/src/liballoc/arc.rs"
    HEAP32[$_6$sroa$5$0$$sroa_idx>>2] = 0; //@line 283 "/checkout/src/liballoc/arc.rs"
    $_6$sroa$6$0$$sroa_idx = ((($55)) + 28|0); //@line 283 "/checkout/src/liballoc/arc.rs"
    $66 = $_6$sroa$6$0$$sroa_idx; //@line 283 "/checkout/src/liballoc/arc.rs"
    $67 = $66; //@line 283 "/checkout/src/liballoc/arc.rs"
    HEAP32[$67>>2] = $51; //@line 283 "/checkout/src/liballoc/arc.rs"
    $68 = (($66) + 4)|0; //@line 283 "/checkout/src/liballoc/arc.rs"
    $69 = $68; //@line 283 "/checkout/src/liballoc/arc.rs"
    HEAP32[$69>>2] = $54; //@line 283 "/checkout/src/liballoc/arc.rs"
    $_6$sroa$7$0$$sroa_idx = ((($55)) + 36|0); //@line 283 "/checkout/src/liballoc/arc.rs"
    HEAP32[$_6$sroa$7$0$$sroa_idx>>2] = $$sreg1$field; //@line 283 "/checkout/src/liballoc/arc.rs"
    $_6$sroa$8$0$$sroa_idx = ((($55)) + 40|0); //@line 283 "/checkout/src/liballoc/arc.rs"
    HEAP32[$_6$sroa$8$0$$sroa_idx>>2] = $$sreg1$field6; //@line 283 "/checkout/src/liballoc/arc.rs"
    STACKTOP = sp;return ($55|0); //@line 1014 "/checkout/src/libstd/thread/mod.rs"
   }
  }
 }
 $70 = ___cxa_find_matching_catch_2()|0;
 $71 = tempRet0;
 $personalityslot$sroa$0$0 = $70;$personalityslot$sroa$6$0 = $71;
 __ZN4core3ptr13drop_in_place17h8d1d6c8b1cfb4d06E($_7); //@line 1012 "/checkout/src/libstd/thread/mod.rs"
 ___resumeException($personalityslot$sroa$0$0|0);
 // unreachable;
 return (0)|0;
}
function __ZN4core3ptr13drop_in_place17h8d1d6c8b1cfb4d06E($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $1 = ($0|0)==(0|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 if ($1) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 HEAP8[$0>>0] = 0; //@line 622 "/checkout/src/libstd/ffi/c_str.rs"
 $2 = ((($arg0)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $3 = HEAP32[$2>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $4 = ($3|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
 if ($4) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 $5 = HEAP32[$arg0>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 ___rust_dealloc($5,$3,1); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr13drop_in_place17h69e481c4276806c0E($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0; //@line 381 "/checkout/src/libstd/sync/mutex.rs"
 (_pthread_mutex_destroy(($0|0))|0); //@line 82 "/checkout/src/libstd/sys/unix/mutex.rs"
 $1 = HEAP32[$arg0>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 ___rust_dealloc($1,28,4); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN3std6thread6Thread6unpark17h5798eff7a07424d7E($self) {
 $self = $self|0;
 var $$expand_i1_val = 0, $$fca$1$gep = 0, $$index = 0, $$pre$i$i$i = 0, $$pre$i$i$i$i = 0, $$pre$i$i$i4 = 0, $$pre12$i1$i$i = 0, $$pre12$i1$i$i$i = 0, $$pre12$i1$i$i9 = 0, $$sink$in$phi$trans$insert$i2$i$i = 0, $$sink$in$phi$trans$insert$i2$i$i$i = 0, $$sink$in$phi$trans$insert$i2$i$i3 = 0, $$sink$in$pre$phi$i$i$i$iZZZ2D = 0, $$sink$in$pre$phi$i$i$i12ZZZ2D = 0, $$sink$in$pre$phi$i$i$iZZZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $_lock = 0, $not$$i = 0;
 var $success = 0, $success6 = 0, $success9 = 0, $switch$i$i$i = 0, $switch$i$i$i$i = 0, $switch$i$i$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_lock = sp;
 $0 = HEAP32[$self>>2]|0; //@line 2540 "/checkout/src/libcore/ptr.rs"
 $1 = ((($0)) + 24|0); //@line 1051 "/checkout/src/libstd/thread/mod.rs"
 $2 = HEAP32[$1>>2]|0;if (($2|0) == 0) HEAP32[$1>>2] = 2; //@line 1549 "/checkout/src/libcore/sync/atomic.rs"
 $success = ($2|0)==(0);
 if ($success) {
  STACKTOP = sp;return; //@line 1067 "/checkout/src/libstd/thread/mod.rs"
 }
 $$fca$1$gep = ((($_lock)) + 4|0);
 $3 = HEAP32[2018]|0;
 $4 = HEAP32[(8076)>>2]|0;
 $$index = $2;
 L4: while(1) {
  switch ($$index|0) {
  case 2:  {
   label = 12;
   break L4;
   break;
  }
  case 1:  {
   break;
  }
  default: {
   label = 10;
   break L4;
  }
  }
  $5 = HEAP32[$self>>2]|0; //@line 2540 "/checkout/src/libcore/ptr.rs"
  $6 = ((($5)) + 28|0); //@line 1059 "/checkout/src/libstd/thread/mod.rs"
  $7 = HEAP32[$6>>2]|0; //@line 230 "/checkout/src/libstd/sync/mutex.rs"
  (_pthread_mutex_lock(($7|0))|0); //@line 67 "/checkout/src/libstd/sys/unix/mutex.rs"
  $8 = ((($5)) + 32|0); //@line 426 "/checkout/src/libstd/sync/mutex.rs"
  $9 = (FUNCTION_TABLE_i[$3 & 511]()|0); //@line 374 "/checkout/src/libstd/thread/local.rs"
  $10 = ($9|0)==(0|0); //@line 374 "/checkout/src/libstd/thread/local.rs"
  if ($10) {
   label = 7;
   break;
  }
  $11 = HEAP32[$9>>2]|0; //@line 378 "/checkout/src/libstd/thread/local.rs"
  $switch$i$i$i$i = ($11|0)==(1); //@line 378 "/checkout/src/libstd/thread/local.rs"
  if ($switch$i$i$i$i) {
   $$sink$in$phi$trans$insert$i2$i$i$i = ((($9)) + 4|0);
   $$pre$i$i$i$i = HEAP32[$$sink$in$phi$trans$insert$i2$i$i$i>>2]|0;
   $$sink$in$pre$phi$i$i$i$iZZZ2D = $$sink$in$phi$trans$insert$i2$i$i$i;$17 = $$pre$i$i$i$i;
  } else {
   $12 = (FUNCTION_TABLE_i[$4 & 511]()|0); //@line 295 "/checkout/src/libstd/thread/local.rs"
   $13 = $9; //@line 239 "/checkout/src/libcore/ptr.rs"
   $14 = $13; //@line 239 "/checkout/src/libcore/ptr.rs"
   HEAP32[$14>>2] = 1; //@line 239 "/checkout/src/libcore/ptr.rs"
   $15 = (($13) + 4)|0; //@line 239 "/checkout/src/libcore/ptr.rs"
   $16 = $15; //@line 239 "/checkout/src/libcore/ptr.rs"
   HEAP32[$16>>2] = $12; //@line 239 "/checkout/src/libcore/ptr.rs"
   $$pre12$i1$i$i$i = ((($9)) + 4|0);
   $$sink$in$pre$phi$i$i$i$iZZZ2D = $$pre12$i1$i$i$i;$17 = $12;
  }
  HEAP8[$$sink$in$pre$phi$i$i$i$iZZZ2D>>0]=$17&255;HEAP8[$$sink$in$pre$phi$i$i$i$iZZZ2D+1>>0]=($17>>8)&255;HEAP8[$$sink$in$pre$phi$i$i$i$iZZZ2D+2>>0]=($17>>16)&255;HEAP8[$$sink$in$pre$phi$i$i$i$iZZZ2D+3>>0]=$17>>24; //@line 239 "/checkout/src/libcore/ptr.rs"
  $18 = ($17|0)!=(0); //@line 487 "/checkout/src/libstd/panicking.rs"
  $19 = HEAP8[$8>>0]|0; //@line 1491 "/checkout/src/libcore/sync/atomic.rs"
  $not$$i = ($19<<24>>24)==(0); //@line 37 "/checkout/src/libstd/sys_common/poison.rs"
  if (!($not$$i)) {
   label = 9;
   break;
  }
  HEAP32[$_lock>>2] = $6; //@line 1059 "/checkout/src/libstd/thread/mod.rs"
  $$expand_i1_val = $18&1; //@line 1059 "/checkout/src/libstd/thread/mod.rs"
  HEAP8[$$fca$1$gep>>0] = $$expand_i1_val; //@line 1059 "/checkout/src/libstd/thread/mod.rs"
  $20 = ((($5)) + 24|0); //@line 1060 "/checkout/src/libstd/thread/mod.rs"
  $21 = HEAP32[$20>>2]|0;if (($21|0) == 1) HEAP32[$20>>2] = 2; //@line 1549 "/checkout/src/libcore/sync/atomic.rs"
  $success6 = ($21|0)==(1);
  if ($success6) {
   label = 25;
   break;
  }
  switch ($21|0) {
  case 2:  {
   break L4;
   break;
  }
  case 0:  {
   break;
  }
  default: {
   label = 23;
   break L4;
  }
  }
  $22 = HEAP32[$_lock>>2]|0; //@line 456 "/checkout/src/libstd/sync/mutex.rs"
  $23 = ((($22)) + 4|0); //@line 456 "/checkout/src/libstd/sync/mutex.rs"
  $24 = HEAP8[$$fca$1$gep>>0]|0; //@line 46 "/checkout/src/libstd/sys_common/poison.rs"
  $25 = ($24<<24>>24)==(0); //@line 46 "/checkout/src/libstd/sys_common/poison.rs"
  if ($25) {
   $26 = (FUNCTION_TABLE_i[$3 & 511]()|0); //@line 374 "/checkout/src/libstd/thread/local.rs"
   $27 = ($26|0)==(0|0); //@line 374 "/checkout/src/libstd/thread/local.rs"
   if ($27) {
    label = 19;
    break;
   }
   $28 = HEAP32[$26>>2]|0; //@line 378 "/checkout/src/libstd/thread/local.rs"
   $switch$i$i$i1 = ($28|0)==(1); //@line 378 "/checkout/src/libstd/thread/local.rs"
   if ($switch$i$i$i1) {
    $$sink$in$phi$trans$insert$i2$i$i3 = ((($26)) + 4|0);
    $$pre$i$i$i4 = HEAP32[$$sink$in$phi$trans$insert$i2$i$i3>>2]|0;
    $$sink$in$pre$phi$i$i$i12ZZZ2D = $$sink$in$phi$trans$insert$i2$i$i3;$34 = $$pre$i$i$i4;
   } else {
    $29 = (FUNCTION_TABLE_i[$4 & 511]()|0); //@line 295 "/checkout/src/libstd/thread/local.rs"
    $30 = $26; //@line 239 "/checkout/src/libcore/ptr.rs"
    $31 = $30; //@line 239 "/checkout/src/libcore/ptr.rs"
    HEAP32[$31>>2] = 1; //@line 239 "/checkout/src/libcore/ptr.rs"
    $32 = (($30) + 4)|0; //@line 239 "/checkout/src/libcore/ptr.rs"
    $33 = $32; //@line 239 "/checkout/src/libcore/ptr.rs"
    HEAP32[$33>>2] = $29; //@line 239 "/checkout/src/libcore/ptr.rs"
    $$pre12$i1$i$i9 = ((($26)) + 4|0);
    $$sink$in$pre$phi$i$i$i12ZZZ2D = $$pre12$i1$i$i9;$34 = $29;
   }
   HEAP8[$$sink$in$pre$phi$i$i$i12ZZZ2D>>0]=$34&255;HEAP8[$$sink$in$pre$phi$i$i$i12ZZZ2D+1>>0]=($34>>8)&255;HEAP8[$$sink$in$pre$phi$i$i$i12ZZZ2D+2>>0]=($34>>16)&255;HEAP8[$$sink$in$pre$phi$i$i$i12ZZZ2D+3>>0]=$34>>24; //@line 239 "/checkout/src/libcore/ptr.rs"
   $35 = ($34|0)==(0); //@line 487 "/checkout/src/libstd/panicking.rs"
   if (!($35)) {
    HEAP8[$23>>0] = 1; //@line 1479 "/checkout/src/libcore/sync/atomic.rs"
   }
  }
  $36 = HEAP32[$22>>2]|0; //@line 457 "/checkout/src/libstd/sync/mutex.rs"
  (_pthread_mutex_unlock(($36|0))|0); //@line 72 "/checkout/src/libstd/sys/unix/mutex.rs"
  $37 = HEAP32[$self>>2]|0; //@line 2540 "/checkout/src/libcore/ptr.rs"
  $38 = ((($37)) + 24|0); //@line 1051 "/checkout/src/libstd/thread/mod.rs"
  $39 = HEAP32[$38>>2]|0;if (($39|0) == 0) HEAP32[$38>>2] = 2; //@line 1549 "/checkout/src/libcore/sync/atomic.rs"
  $success9 = ($39|0)==(0);
  if ($success9) {
   label = 12;
   break;
  } else {
   $$index = $39;
  }
 }
 if ((label|0) == 7) {
  __ZN4core6result13unwrap_failed17h6c499c654b178840E(21076,57); //@line 809 "/checkout/src/libcore/result.rs"
  // unreachable;
 }
 else if ((label|0) == 9) {
  __ZN4core6result13unwrap_failed17haaf56fe186515641E(22190,43,$6,$18); //@line 782 "/checkout/src/libcore/result.rs"
  // unreachable;
 }
 else if ((label|0) == 10) {
  __ZN3std9panicking11begin_panic17hc122bd4e5599889dE(22361,28,8416); //@line 1055 "/checkout/src/libstd/thread/mod.rs"
  // unreachable; //@line 1055 "/checkout/src/libstd/thread/mod.rs"
 }
 else if ((label|0) == 12) {
  STACKTOP = sp;return; //@line 1067 "/checkout/src/libstd/thread/mod.rs"
 }
 else if ((label|0) == 19) {
  __ZN4core6result13unwrap_failed17h6c499c654b178840E(21076,57); //@line 809 "/checkout/src/libcore/result.rs"
  // unreachable;
 }
 else if ((label|0) == 23) {
  __THREW__ = 0;
  invoke_viii(414,(22361|0),28,(8432|0)); //@line 1064 "/checkout/src/libstd/thread/mod.rs"
  $40 = __THREW__; __THREW__ = 0;
  $41 = ___cxa_find_matching_catch_2()|0;
  $42 = tempRet0;
  __ZN4core3ptr13drop_in_place17hab16597baac572fdE_llvm_2964622($_lock); //@line 1066 "/checkout/src/libstd/thread/mod.rs"
  ___resumeException($41|0);
  // unreachable;
 }
 else if ((label|0) == 25) {
  $43 = HEAP32[$self>>2]|0; //@line 2540 "/checkout/src/libcore/ptr.rs"
  $44 = ((($43)) + 36|0); //@line 1061 "/checkout/src/libstd/thread/mod.rs"
  $45 = HEAP32[$44>>2]|0; //@line 395 "/checkout/src/libstd/sync/condvar.rs"
  (_pthread_cond_signal(($45|0))|0); //@line 66 "/checkout/src/libstd/sys/unix/condvar.rs"
 }
 $46 = HEAP32[$_lock>>2]|0; //@line 456 "/checkout/src/libstd/sync/mutex.rs"
 $47 = ((($46)) + 4|0); //@line 456 "/checkout/src/libstd/sync/mutex.rs"
 $48 = HEAP8[$$fca$1$gep>>0]|0; //@line 46 "/checkout/src/libstd/sys_common/poison.rs"
 $49 = ($48<<24>>24)==(0); //@line 46 "/checkout/src/libstd/sys_common/poison.rs"
 if ($49) {
  $50 = HEAP32[2018]|0; //@line 374 "/checkout/src/libstd/thread/local.rs"
  $51 = (FUNCTION_TABLE_i[$50 & 511]()|0); //@line 374 "/checkout/src/libstd/thread/local.rs"
  $52 = ($51|0)==(0|0); //@line 374 "/checkout/src/libstd/thread/local.rs"
  if ($52) {
   __ZN4core6result13unwrap_failed17h6c499c654b178840E(21076,57); //@line 809 "/checkout/src/libcore/result.rs"
   // unreachable;
  }
  $53 = HEAP32[$51>>2]|0; //@line 378 "/checkout/src/libstd/thread/local.rs"
  $switch$i$i$i = ($53|0)==(1); //@line 378 "/checkout/src/libstd/thread/local.rs"
  if ($switch$i$i$i) {
   $$sink$in$phi$trans$insert$i2$i$i = ((($51)) + 4|0);
   $$pre$i$i$i = HEAP32[$$sink$in$phi$trans$insert$i2$i$i>>2]|0;
   $$sink$in$pre$phi$i$i$iZZZ2D = $$sink$in$phi$trans$insert$i2$i$i;$60 = $$pre$i$i$i;
  } else {
   $54 = HEAP32[(8076)>>2]|0; //@line 295 "/checkout/src/libstd/thread/local.rs"
   $55 = (FUNCTION_TABLE_i[$54 & 511]()|0); //@line 295 "/checkout/src/libstd/thread/local.rs"
   $56 = $51; //@line 239 "/checkout/src/libcore/ptr.rs"
   $57 = $56; //@line 239 "/checkout/src/libcore/ptr.rs"
   HEAP32[$57>>2] = 1; //@line 239 "/checkout/src/libcore/ptr.rs"
   $58 = (($56) + 4)|0; //@line 239 "/checkout/src/libcore/ptr.rs"
   $59 = $58; //@line 239 "/checkout/src/libcore/ptr.rs"
   HEAP32[$59>>2] = $55; //@line 239 "/checkout/src/libcore/ptr.rs"
   $$pre12$i1$i$i = ((($51)) + 4|0);
   $$sink$in$pre$phi$i$i$iZZZ2D = $$pre12$i1$i$i;$60 = $55;
  }
  HEAP8[$$sink$in$pre$phi$i$i$iZZZ2D>>0]=$60&255;HEAP8[$$sink$in$pre$phi$i$i$iZZZ2D+1>>0]=($60>>8)&255;HEAP8[$$sink$in$pre$phi$i$i$iZZZ2D+2>>0]=($60>>16)&255;HEAP8[$$sink$in$pre$phi$i$i$iZZZ2D+3>>0]=$60>>24; //@line 239 "/checkout/src/libcore/ptr.rs"
  $61 = ($60|0)==(0); //@line 487 "/checkout/src/libstd/panicking.rs"
  if (!($61)) {
   HEAP8[$47>>0] = 1; //@line 1479 "/checkout/src/libcore/sync/atomic.rs"
  }
 }
 $62 = HEAP32[$46>>2]|0; //@line 457 "/checkout/src/libstd/sync/mutex.rs"
 (_pthread_mutex_unlock(($62|0))|0); //@line 72 "/checkout/src/libstd/sys/unix/mutex.rs"
 STACKTOP = sp;return; //@line 1067 "/checkout/src/libstd/thread/mod.rs"
}
function __ZN3std10sys_common9backtrace5print17he52169ad7738d9b0E($0,$w$0,$w$1,$format) {
 $0 = $0|0;
 $w$0 = $w$0|0;
 $w$1 = $w$1|0;
 $format = $format|0;
 var $$sink$i213$i = 0, $$sink28$i$i$i$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $_0$0$i$i$i = 0, $_10$i$sroa$0$0$copyload = 0, $_10$i$sroa$5$0$_2$sroa$0$0$$sroa_idx$i$sroa_idx = 0, $_102$i$i$i$i = 0, $_106$i = 0, $_108$i = 0, $_11$i = 0, $_15$i$i$i$i = 0, $_15$sroa$0$0$i$i = 0, $_36$i$i$i$i = 0, $_4$sroa$0$0$$sroa_idx$i$i = 0, $_4$sroa$0$0$$sroa_idx$i121$i = 0, $_41$i = 0, $_43$i = 0, $_57$i$i$i$i = 0, $_59$i = 0, $_61$i = 0;
 var $_78$i$i$i$i = 0, $accum$0$i$i$i$i = 0, $accum$1$i14$i$i$i = 0, $context$i = 0, $context$i$i = 0, $f$i$i$i$i = 0, $format$i = 0, $frame$i = 0, $frames$i = 0, $index$i = 0, $iter$i$sroa$0$0113 = 0, $iter$i$sroa$15$0114 = 0, $res$sroa$0$0 = 0, $res$sroa$0$2 = 0, $switch$i = 0, $switch$i$i$i$i = 0, $switch25$i$i$i$i = 0, $switch26$i$i$i$i = 0, $switch27$i$i$i$i = 0, $switch28$i$i$i$i = 0;
 var $w$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 976|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(976|0);
 $context$i = sp + 969|0;
 $_102$i$i$i$i = sp + 960|0;
 $_78$i$i$i$i = sp + 952|0;
 $_57$i$i$i$i = sp + 944|0;
 $_36$i$i$i$i = sp + 936|0;
 $_15$i$i$i$i = sp + 928|0;
 $f$i$i$i$i = sp + 924|0;
 $context$i$i = sp + 920|0;
 $_108$i = sp + 904|0;
 $_106$i = sp + 16|0;
 $frame$i = sp + 900|0;
 $index$i = sp + 896|0;
 $_61$i = sp + 872|0;
 $_59$i = sp + 8|0;
 $_43$i = sp + 848|0;
 $_41$i = sp;
 $_11$i = sp + 832|0;
 $frames$i = sp + 32|0;
 $format$i = sp + 968|0;
 $w$i = sp + 24|0;
 (_pthread_mutex_lock((38444|0))|0); //@line 67 "/checkout/src/libstd/sys/unix/mutex.rs"
 HEAP32[$w$i>>2] = $w$0;
 $1 = ((($w$i)) + 4|0);
 HEAP32[$1>>2] = $w$1;
 HEAP8[$format$i>>0] = $format;
 _memset(($frames$i|0),0,800)|0;
 __ZN3std3sys4unix9backtrace7tracing3imp16unwind_backtrace17h25964b04c0ce1f71E($_11$i,$frames$i,100); //@line 68 "/checkout/src/libstd/sys_common/backtrace.rs"
 $_10$i$sroa$0$0$copyload = HEAP32[$_11$i>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
 $_10$i$sroa$5$0$_2$sroa$0$0$$sroa_idx$i$sroa_idx = ((($_11$i)) + 4|0); //@line 1172 "/checkout/src/libcore/result.rs"
 $2 = $_10$i$sroa$5$0$_2$sroa$0$0$$sroa_idx$i$sroa_idx; //@line 1172 "/checkout/src/libcore/result.rs"
 $3 = $2; //@line 1172 "/checkout/src/libcore/result.rs"
 $4 = HEAP32[$3>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
 $5 = (($2) + 4)|0; //@line 1172 "/checkout/src/libcore/result.rs"
 $6 = $5; //@line 1172 "/checkout/src/libcore/result.rs"
 $7 = HEAP32[$6>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
 $switch$i = ($_10$i$sroa$0$0$copyload|0)==(1); //@line 68 "/checkout/src/libstd/sys_common/backtrace.rs"
 L1: do {
  if ($switch$i) {
   $8 = $4&255; //@line 1180 "/checkout/src/libcore/result.rs"
   $9 = (_bitshift64Lshr(($4|0),($7|0),8)|0); //@line 1180 "/checkout/src/libcore/result.rs"
   $10 = tempRet0; //@line 1180 "/checkout/src/libcore/result.rs"
   $120 = $9;$121 = $10;$res$sroa$0$0 = $8;
  } else {
   $73 = ($4>>>0)>(100); //@line 875 "/checkout/src/libcore/slice/mod.rs"
   if ($73) {
    __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($4,100); //@line 876 "/checkout/src/libcore/slice/mod.rs"
    // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
   }
   HEAP32[$context$i$i>>2] = $context$i;
   $74 = ($format<<24>>24)==(2); //@line 137 "/checkout/src/libstd/sys_common/backtrace.rs"
   if ($74) {
    label = 31;
   } else {
    $75 = (($frames$i) + ($4<<3)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
    $76 = $frames$i; //@line 105 "/checkout/src/libstd/sys_common/backtrace.rs"
    $77 = $75; //@line 105 "/checkout/src/libstd/sys_common/backtrace.rs"
    HEAP32[$f$i$i$i$i>>2] = $context$i$i;
    $78 = ((($_15$i$i$i$i)) + 4|0);
    $79 = ((($_36$i$i$i$i)) + 4|0);
    $80 = ((($_57$i$i$i$i)) + 4|0);
    $81 = ((($_78$i$i$i$i)) + 4|0);
    $_15$sroa$0$0$i$i = $76;$accum$0$i$i$i$i = 0;
    while(1) {
     $82 = (($77) - ($_15$sroa$0$0$i$i))|0; //@line 664 "/checkout/src/libcore/num/mod.rs"
     $83 = (($82|0) / 8)&-1; //@line 700 "/checkout/src/libcore/ptr.rs"
     $84 = ($83>>>0)>(3); //@line 1175 "/checkout/src/libcore/slice/mod.rs"
     $85 = $_15$sroa$0$0$i$i; //@line 1175 "/checkout/src/libcore/slice/mod.rs"
     if (!($84)) {
      label = 21;
      break;
     }
     __ZN4core4iter8iterator8Iterator8position28__u7b__u7b_closure_u7d__u7d_17h63c7ba6514e13b06E($_15$i$i$i$i,$f$i$i$i$i,$accum$0$i$i$i$i,$85); //@line 1176 "/checkout/src/libcore/slice/mod.rs"
     $88 = HEAP32[$_15$i$i$i$i>>2]|0; //@line 368 "/checkout/src/libcore/iter/mod.rs"
     $89 = HEAP32[$78>>2]|0;
     $switch$i$i$i$i = ($88|0)==(1); //@line 1176 "/checkout/src/libcore/slice/mod.rs"
     if ($switch$i$i$i$i) {
      $$sink28$i$i$i$i = $89;
      label = 29;
      break;
     }
     $90 = ((($85)) + 8|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     __ZN4core4iter8iterator8Iterator8position28__u7b__u7b_closure_u7d__u7d_17h63c7ba6514e13b06E($_36$i$i$i$i,$f$i$i$i$i,$89,$90); //@line 1177 "/checkout/src/libcore/slice/mod.rs"
     $91 = HEAP32[$_36$i$i$i$i>>2]|0; //@line 368 "/checkout/src/libcore/iter/mod.rs"
     $92 = HEAP32[$79>>2]|0;
     $switch25$i$i$i$i = ($91|0)==(1); //@line 1177 "/checkout/src/libcore/slice/mod.rs"
     if ($switch25$i$i$i$i) {
      $$sink28$i$i$i$i = $92;
      label = 29;
      break;
     }
     $93 = ((($85)) + 16|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     __ZN4core4iter8iterator8Iterator8position28__u7b__u7b_closure_u7d__u7d_17h63c7ba6514e13b06E($_57$i$i$i$i,$f$i$i$i$i,$92,$93); //@line 1178 "/checkout/src/libcore/slice/mod.rs"
     $94 = HEAP32[$_57$i$i$i$i>>2]|0; //@line 368 "/checkout/src/libcore/iter/mod.rs"
     $95 = HEAP32[$80>>2]|0;
     $switch26$i$i$i$i = ($94|0)==(1); //@line 1178 "/checkout/src/libcore/slice/mod.rs"
     if ($switch26$i$i$i$i) {
      $$sink28$i$i$i$i = $95;
      label = 29;
      break;
     }
     $96 = ((($85)) + 24|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $97 = ((($85)) + 32|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $98 = $97; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
     __ZN4core4iter8iterator8Iterator8position28__u7b__u7b_closure_u7d__u7d_17h63c7ba6514e13b06E($_78$i$i$i$i,$f$i$i$i$i,$95,$96); //@line 1179 "/checkout/src/libcore/slice/mod.rs"
     $99 = HEAP32[$_78$i$i$i$i>>2]|0; //@line 368 "/checkout/src/libcore/iter/mod.rs"
     $100 = HEAP32[$81>>2]|0;
     $switch27$i$i$i$i = ($99|0)==(1); //@line 1179 "/checkout/src/libcore/slice/mod.rs"
     if ($switch27$i$i$i$i) {
      $$sink28$i$i$i$i = $100;
      label = 29;
      break;
     } else {
      $_15$sroa$0$0$i$i = $98;$accum$0$i$i$i$i = $100;
     }
    }
    L15: do {
     if ((label|0) == 21) {
      $86 = ((($_102$i$i$i$i)) + 4|0);
      $87 = ($85|0)==($75|0); //@line 1181 "/checkout/src/libcore/slice/mod.rs"
      if (!($87)) {
       $102 = $85;$accum$1$i14$i$i$i = $accum$0$i$i$i$i;
       while(1) {
        $101 = ((($102)) + 8|0); //@line 623 "/checkout/src/libcore/ptr.rs"
        __ZN4core4iter8iterator8Iterator8position28__u7b__u7b_closure_u7d__u7d_17h63c7ba6514e13b06E($_102$i$i$i$i,$f$i$i$i$i,$accum$1$i14$i$i$i,$102); //@line 1182 "/checkout/src/libcore/slice/mod.rs"
        $103 = HEAP32[$_102$i$i$i$i>>2]|0; //@line 368 "/checkout/src/libcore/iter/mod.rs"
        $104 = HEAP32[$86>>2]|0;
        $switch28$i$i$i$i = ($103|0)==(1); //@line 1182 "/checkout/src/libcore/slice/mod.rs"
        if ($switch28$i$i$i$i) {
         $$sink28$i$i$i$i = $104;
         label = 29;
         break L15;
        }
        $105 = ($101|0)==($75|0); //@line 1181 "/checkout/src/libcore/slice/mod.rs"
        if ($105) {
         break;
        } else {
         $102 = $101;$accum$1$i14$i$i$i = $104;
        }
       }
      }
      $_0$0$i$i$i = $4;
     }
    } while(0);
    if ((label|0) == 29) {
     $_0$0$i$i$i = $$sink28$i$i$i$i;
    }
    $106 = (($4) - ($_0$0$i$i$i))|0; //@line 105 "/checkout/src/libstd/sys_common/backtrace.rs"
    $107 = ($106>>>0)<($4>>>0); //@line 119 "/checkout/src/libstd/sys_common/backtrace.rs"
    if ($107) {
     $108 = ($106|0)==(0); //@line 71 "/checkout/src/libstd/sys_common/backtrace.rs"
     if ($108) {
      $$sink$i213$i = 0;
     } else {
      $11 = HEAP32[$w$i>>2]|0; //@line 72 "/checkout/src/libstd/sys_common/backtrace.rs"
      $12 = HEAP32[$1>>2]|0; //@line 72 "/checkout/src/libstd/sys_common/backtrace.rs"
      HEAP32[$_43$i>>2] = 8528; //@line 343 "/checkout/src/libcore/fmt/mod.rs"
      $13 = ((($_43$i)) + 4|0); //@line 343 "/checkout/src/libcore/fmt/mod.rs"
      HEAP32[$13>>2] = 1; //@line 343 "/checkout/src/libcore/fmt/mod.rs"
      $_4$sroa$0$0$$sroa_idx$i$i = ((($_43$i)) + 8|0); //@line 343 "/checkout/src/libcore/fmt/mod.rs"
      HEAP32[$_4$sroa$0$0$$sroa_idx$i$i>>2] = 0; //@line 343 "/checkout/src/libcore/fmt/mod.rs"
      $14 = ((($_43$i)) + 16|0); //@line 343 "/checkout/src/libcore/fmt/mod.rs"
      HEAP32[$14>>2] = 38620; //@line 343 "/checkout/src/libcore/fmt/mod.rs"
      $15 = ((($_43$i)) + 20|0); //@line 343 "/checkout/src/libcore/fmt/mod.rs"
      HEAP32[$15>>2] = 0; //@line 343 "/checkout/src/libcore/fmt/mod.rs"
      $16 = ((($12)) + 24|0); //@line 72 "/checkout/src/libstd/sys_common/backtrace.rs"
      $17 = HEAP32[$16>>2]|0; //@line 72 "/checkout/src/libstd/sys_common/backtrace.rs"
      FUNCTION_TABLE_viii[$17 & 511]($_41$i,$11,$_43$i); //@line 72 "/checkout/src/libstd/sys_common/backtrace.rs"
      $18 = $_41$i; //@line 1172 "/checkout/src/libcore/result.rs"
      $19 = $18; //@line 1172 "/checkout/src/libcore/result.rs"
      $20 = HEAP32[$19>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
      $21 = (($18) + 4)|0; //@line 1172 "/checkout/src/libcore/result.rs"
      $22 = $21; //@line 1172 "/checkout/src/libcore/result.rs"
      $23 = HEAP32[$22>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
      $24 = $20&255; //@line 1172 "/checkout/src/libcore/result.rs"
      $25 = ($24<<24>>24)==(3); //@line 72 "/checkout/src/libstd/sys_common/backtrace.rs"
      if ($25) {
       $$sink$i213$i = $106;
      } else {
       $26 = (_bitshift64Lshr(($20|0),($23|0),8)|0); //@line 1180 "/checkout/src/libcore/result.rs"
       $27 = tempRet0; //@line 1180 "/checkout/src/libcore/result.rs"
       $120 = $26;$121 = $27;$res$sroa$0$0 = $24;
       break;
      }
     }
    } else {
     label = 31;
    }
   }
   if ((label|0) == 31) {
    $$sink$i213$i = 0;
   }
   $28 = HEAP32[$w$i>>2]|0; //@line 75 "/checkout/src/libstd/sys_common/backtrace.rs"
   $29 = HEAP32[$1>>2]|0; //@line 75 "/checkout/src/libstd/sys_common/backtrace.rs"
   HEAP32[$_61$i>>2] = 8536; //@line 343 "/checkout/src/libcore/fmt/mod.rs"
   $30 = ((($_61$i)) + 4|0); //@line 343 "/checkout/src/libcore/fmt/mod.rs"
   HEAP32[$30>>2] = 1; //@line 343 "/checkout/src/libcore/fmt/mod.rs"
   $_4$sroa$0$0$$sroa_idx$i121$i = ((($_61$i)) + 8|0); //@line 343 "/checkout/src/libcore/fmt/mod.rs"
   HEAP32[$_4$sroa$0$0$$sroa_idx$i121$i>>2] = 0; //@line 343 "/checkout/src/libcore/fmt/mod.rs"
   $31 = ((($_61$i)) + 16|0); //@line 343 "/checkout/src/libcore/fmt/mod.rs"
   HEAP32[$31>>2] = 38620; //@line 343 "/checkout/src/libcore/fmt/mod.rs"
   $32 = ((($_61$i)) + 20|0); //@line 343 "/checkout/src/libcore/fmt/mod.rs"
   HEAP32[$32>>2] = 0; //@line 343 "/checkout/src/libcore/fmt/mod.rs"
   $33 = ((($29)) + 24|0); //@line 75 "/checkout/src/libstd/sys_common/backtrace.rs"
   $34 = HEAP32[$33>>2]|0; //@line 75 "/checkout/src/libstd/sys_common/backtrace.rs"
   FUNCTION_TABLE_viii[$34 & 511]($_59$i,$28,$_61$i); //@line 75 "/checkout/src/libstd/sys_common/backtrace.rs"
   $35 = $_59$i; //@line 1172 "/checkout/src/libcore/result.rs"
   $36 = $35; //@line 1172 "/checkout/src/libcore/result.rs"
   $37 = HEAP32[$36>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
   $38 = (($35) + 4)|0; //@line 1172 "/checkout/src/libcore/result.rs"
   $39 = $38; //@line 1172 "/checkout/src/libcore/result.rs"
   $40 = HEAP32[$39>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
   $41 = $37&255; //@line 1172 "/checkout/src/libcore/result.rs"
   $42 = ($41<<24>>24)==(3); //@line 75 "/checkout/src/libstd/sys_common/backtrace.rs"
   if (!($42)) {
    $51 = (_bitshift64Lshr(($37|0),($40|0),8)|0); //@line 1180 "/checkout/src/libcore/result.rs"
    $52 = tempRet0; //@line 1180 "/checkout/src/libcore/result.rs"
    $120 = $51;$121 = $52;$res$sroa$0$0 = $41;
    break;
   }
   $43 = (($4) - ($$sink$i213$i))|0; //@line 77 "/checkout/src/libstd/sys_common/backtrace.rs"
   $44 = ($43>>>0)>(100); //@line 875 "/checkout/src/libcore/slice/mod.rs"
   if ($44) {
    __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($43,100); //@line 876 "/checkout/src/libcore/slice/mod.rs"
    // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
   }
   $45 = (($frames$i) + ($43<<3)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
   $46 = ((($_108$i)) + 4|0);
   $47 = ((($_108$i)) + 8|0);
   $48 = ((($_108$i)) + 12|0);
   $49 = ($43|0)==(0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
   L37: do {
    if (!($49)) {
     $50 = $frames$i; //@line 78 "/checkout/src/libstd/sys_common/backtrace.rs"
     $70 = $frames$i;$iter$i$sroa$0$0113 = $50;$iter$i$sroa$15$0114 = 0;
     while(1) {
      $53 = $iter$i$sroa$0$0113; //@line 1141 "/checkout/src/libcore/slice/mod.rs"
      HEAP32[$index$i>>2] = $iter$i$sroa$15$0114; //@line 78 "/checkout/src/libstd/sys_common/backtrace.rs"
      HEAP32[$frame$i>>2] = $iter$i$sroa$0$0113; //@line 78 "/checkout/src/libstd/sys_common/backtrace.rs"
      $54 = $iter$i$sroa$0$0113; //@line 79 "/checkout/src/libstd/sys_common/backtrace.rs"
      $55 = HEAP32[$54>>2]|0; //@line 79 "/checkout/src/libstd/sys_common/backtrace.rs"
      $56 = ((($53)) + 4|0); //@line 79 "/checkout/src/libstd/sys_common/backtrace.rs"
      $57 = HEAP32[$56>>2]|0; //@line 79 "/checkout/src/libstd/sys_common/backtrace.rs"
      HEAP32[$_108$i>>2] = $w$i; //@line 79 "/checkout/src/libstd/sys_common/backtrace.rs"
      HEAP32[$46>>2] = $index$i; //@line 79 "/checkout/src/libstd/sys_common/backtrace.rs"
      HEAP32[$47>>2] = $frame$i; //@line 79 "/checkout/src/libstd/sys_common/backtrace.rs"
      HEAP32[$48>>2] = $format$i; //@line 79 "/checkout/src/libstd/sys_common/backtrace.rs"
      __ZN3std3sys4unix9backtrace8printing6dladdr15resolve_symname17h8a3860019f8a2a73E($_106$i,$55,$57,$_108$i,$context$i); //@line 79 "/checkout/src/libstd/sys_common/backtrace.rs"
      $58 = $_106$i; //@line 1172 "/checkout/src/libcore/result.rs"
      $59 = $58; //@line 1172 "/checkout/src/libcore/result.rs"
      $60 = HEAP32[$59>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
      $61 = (($58) + 4)|0; //@line 1172 "/checkout/src/libcore/result.rs"
      $62 = $61; //@line 1172 "/checkout/src/libcore/result.rs"
      $63 = HEAP32[$62>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
      $64 = $60&255; //@line 1172 "/checkout/src/libcore/result.rs"
      $65 = ($64<<24>>24)==(3); //@line 79 "/checkout/src/libstd/sys_common/backtrace.rs"
      if (!($65)) {
       break;
      }
      $68 = (($iter$i$sroa$15$0114) + 1)|0; //@line 1608 "/checkout/src/libcore/iter/mod.rs"
      $69 = ((($70)) + 8|0); //@line 623 "/checkout/src/libcore/ptr.rs"
      $71 = $69; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
      $72 = ($69|0)==($45|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
      if ($72) {
       break L37;
      } else {
       $70 = $69;$iter$i$sroa$0$0113 = $71;$iter$i$sroa$15$0114 = $68;
      }
     }
     $66 = (_bitshift64Lshr(($60|0),($63|0),8)|0); //@line 1180 "/checkout/src/libcore/result.rs"
     $67 = tempRet0; //@line 1180 "/checkout/src/libcore/result.rs"
     $120 = $66;$121 = $67;$res$sroa$0$0 = $64;
     break L1;
    }
   } while(0);
   $110 = 0;$111 = 0;$res$sroa$0$2 = 3;
   (_pthread_mutex_unlock((38444|0))|0); //@line 72 "/checkout/src/libstd/sys/unix/mutex.rs"
   $109 = $110 & 16777215;
   $112 = (_bitshift64Shl(($111|0),($109|0),8)|0); //@line 59 "/checkout/src/libstd/sys_common/backtrace.rs"
   $113 = tempRet0; //@line 59 "/checkout/src/libstd/sys_common/backtrace.rs"
   $114 = $res$sroa$0$2&255; //@line 59 "/checkout/src/libstd/sys_common/backtrace.rs"
   $115 = $112 | $114; //@line 59 "/checkout/src/libstd/sys_common/backtrace.rs"
   $116 = $0; //@line 59 "/checkout/src/libstd/sys_common/backtrace.rs"
   $117 = $116; //@line 59 "/checkout/src/libstd/sys_common/backtrace.rs"
   HEAP32[$117>>2] = $115; //@line 59 "/checkout/src/libstd/sys_common/backtrace.rs"
   $118 = (($116) + 4)|0; //@line 59 "/checkout/src/libstd/sys_common/backtrace.rs"
   $119 = $118; //@line 59 "/checkout/src/libstd/sys_common/backtrace.rs"
   HEAP32[$119>>2] = $113; //@line 59 "/checkout/src/libstd/sys_common/backtrace.rs"
   STACKTOP = sp;return; //@line 61 "/checkout/src/libstd/sys_common/backtrace.rs"
  }
 } while(0);
 $110 = $121;$111 = $120;$res$sroa$0$2 = $res$sroa$0$0;
 (_pthread_mutex_unlock((38444|0))|0); //@line 72 "/checkout/src/libstd/sys/unix/mutex.rs"
 $109 = $110 & 16777215;
 $112 = (_bitshift64Shl(($111|0),($109|0),8)|0); //@line 59 "/checkout/src/libstd/sys_common/backtrace.rs"
 $113 = tempRet0; //@line 59 "/checkout/src/libstd/sys_common/backtrace.rs"
 $114 = $res$sroa$0$2&255; //@line 59 "/checkout/src/libstd/sys_common/backtrace.rs"
 $115 = $112 | $114; //@line 59 "/checkout/src/libstd/sys_common/backtrace.rs"
 $116 = $0; //@line 59 "/checkout/src/libstd/sys_common/backtrace.rs"
 $117 = $116; //@line 59 "/checkout/src/libstd/sys_common/backtrace.rs"
 HEAP32[$117>>2] = $115; //@line 59 "/checkout/src/libstd/sys_common/backtrace.rs"
 $118 = (($116) + 4)|0; //@line 59 "/checkout/src/libstd/sys_common/backtrace.rs"
 $119 = $118; //@line 59 "/checkout/src/libstd/sys_common/backtrace.rs"
 HEAP32[$119>>2] = $113; //@line 59 "/checkout/src/libstd/sys_common/backtrace.rs"
 STACKTOP = sp;return; //@line 61 "/checkout/src/libstd/sys_common/backtrace.rs"
}
function __ZN4core4iter8iterator8Iterator8position28__u7b__u7b_closure_u7d__u7d_17h63c7ba6514e13b06E($0,$arg0,$i,$x) {
 $0 = $0|0;
 $arg0 = $arg0|0;
 $i = $i|0;
 $x = $x|0;
 var $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_4$i = 0, $is_marker$i = 0, $trunc$i = 0, $trunc$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_4$i = sp;
 $is_marker$i = sp + 8|0;
 HEAP8[$is_marker$i>>0] = 0; //@line 106 "/checkout/src/libstd/sys_common/backtrace.rs"
 $1 = HEAP32[$x>>2]|0; //@line 107 "/checkout/src/libstd/sys_common/backtrace.rs"
 $2 = ((($x)) + 4|0); //@line 107 "/checkout/src/libstd/sys_common/backtrace.rs"
 $3 = HEAP32[$2>>2]|0; //@line 107 "/checkout/src/libstd/sys_common/backtrace.rs"
 $4 = HEAP32[$arg0>>2]|0; //@line 115 "/checkout/src/libstd/sys_common/backtrace.rs"
 $5 = HEAP32[$4>>2]|0; //@line 115 "/checkout/src/libstd/sys_common/backtrace.rs"
 __ZN3std3sys4unix9backtrace8printing6dladdr15resolve_symname17h76819cae94e8df54E($_4$i,$1,$3,$is_marker$i,$5); //@line 107 "/checkout/src/libstd/sys_common/backtrace.rs"
 $trunc$i = HEAP8[$_4$i>>0]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $trunc$i$clear = $trunc$i & 3; //@line 59 "/checkout/src/libcore/ptr.rs"
 switch ($trunc$i$clear<<24>>24) {
 case 0: case 1: case 3:  {
  $25 = HEAP8[$is_marker$i>>0]|0; //@line 116 "/checkout/src/libstd/sys_common/backtrace.rs"
  $26 = $25&255; //@line 1701 "/checkout/src/libcore/iter/iterator.rs"
  $27 = $25 ^ 1; //@line 1701 "/checkout/src/libcore/iter/iterator.rs"
  $28 = $27&255; //@line 1701 "/checkout/src/libcore/iter/iterator.rs"
  $$sink = (($28) + ($i))|0; //@line 1701 "/checkout/src/libcore/iter/iterator.rs"
  HEAP32[$0>>2] = $26;
  $29 = ((($0)) + 4|0);
  HEAP32[$29>>2] = $$sink;
  STACKTOP = sp;return; //@line 1703 "/checkout/src/libcore/iter/iterator.rs"
  break;
 }
 default: {
 }
 }
 $6 = ((($_4$i)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $7 = HEAP32[$6>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $8 = HEAP32[$7>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $9 = ((($7)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $10 = HEAP32[$9>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $11 = HEAP32[$10>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 __THREW__ = 0;
 invoke_vi($11|0,($8|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $21 = ___cxa_find_matching_catch_2()|0;
  $22 = tempRet0;
  $23 = HEAP32[$7>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $24 = HEAP32[$9>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  __ZN5alloc4heap8box_free17hb8be26a1f37cb671E_llvm_2964622($23,$24); //@line 59 "/checkout/src/libcore/ptr.rs"
  __ZN5alloc4heap8box_free17h0833f2b89912900bE_llvm_2964622($7); //@line 59 "/checkout/src/libcore/ptr.rs"
  ___resumeException($21|0);
  // unreachable;
 }
 $14 = HEAP32[$9>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $15 = ((($14)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $16 = HEAP32[$15>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
 $17 = ($16|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
 if (!($17)) {
  $18 = HEAP32[$7>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $19 = ((($14)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
  $20 = HEAP32[$19>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
  ___rust_dealloc($18,$16,$20); //@line 104 "/checkout/src/liballoc/heap.rs"
 }
 ___rust_dealloc($7,12,4); //@line 104 "/checkout/src/liballoc/heap.rs"
 $25 = HEAP8[$is_marker$i>>0]|0; //@line 116 "/checkout/src/libstd/sys_common/backtrace.rs"
 $26 = $25&255; //@line 1701 "/checkout/src/libcore/iter/iterator.rs"
 $27 = $25 ^ 1; //@line 1701 "/checkout/src/libcore/iter/iterator.rs"
 $28 = $27&255; //@line 1701 "/checkout/src/libcore/iter/iterator.rs"
 $$sink = (($28) + ($i))|0; //@line 1701 "/checkout/src/libcore/iter/iterator.rs"
 HEAP32[$0>>2] = $26;
 $29 = ((($0)) + 4|0);
 HEAP32[$29>>2] = $$sink;
 STACKTOP = sp;return; //@line 1703 "/checkout/src/libcore/iter/iterator.rs"
}
function __ZN3std10sys_common9backtrace28__rust_begin_short_backtrace17h3239eacb99147be6E($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_v[$f & 511](); //@line 223 "/checkout/src/libcore/ops/function.rs"
 return; //@line 134 "/checkout/src/libstd/sys_common/backtrace.rs"
}
function __ZN3std10sys_common9backtrace11log_enabled17hd6052bb35923f872E() {
 var $$ = 0, $$32 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_0$0 = 0, $_10 = 0, $_12$i$i$i = 0, $_2$i = 0, $_25$0 = 0, $_5$i$i$i = 0, $_5$sroa$0$0$$sroa_idx$i$i$i$i = 0, $_5$sroa$4$0$$sroa_idx2$i$i$i$i = 0, $_8$i$i = 0, $key$i1 = 0, $lhsc = 0, $switch$i$i = 0, $val$0$ph = 0, $val$0222830 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $_12$i$i$i = sp + 80|0;
 $_5$i$i$i = sp + 56|0;
 $_8$i$i = sp;
 $_2$i = sp + 40|0;
 $key$i1 = sp + 32|0;
 $x = sp + 20|0;
 $_10 = sp + 8|0;
 $0 = HEAP32[9603]|0; //@line 1492 "/checkout/src/libcore/sync/atomic.rs"
 switch ($0|0) {
 case 0:  {
  HEAP32[$key$i1>>2] = 22473;
  $1 = ((($key$i1)) + 4|0);
  HEAP32[$1>>2] = 14;
  __ZN3std3sys4unix2os6getenv17h4d3a8ed236954b64E($_2$i,22473,14); //@line 238 "/checkout/src/libstd/env.rs"
  $2 = HEAP32[$_2$i>>2]|0; //@line 747 "/checkout/src/libcore/result.rs"
  $switch$i$i = ($2|0)==(1); //@line 747 "/checkout/src/libcore/result.rs"
  $3 = ((($_2$i)) + 4|0);
  if ($switch$i$i) {
   $4 = $3; //@line 748 "/checkout/src/libcore/result.rs"
   $5 = $4; //@line 748 "/checkout/src/libcore/result.rs"
   $6 = HEAP32[$5>>2]|0; //@line 748 "/checkout/src/libcore/result.rs"
   $7 = (($4) + 4)|0; //@line 748 "/checkout/src/libcore/result.rs"
   $8 = $7; //@line 748 "/checkout/src/libcore/result.rs"
   $9 = HEAP32[$8>>2]|0; //@line 748 "/checkout/src/libcore/result.rs"
   $10 = $_8$i$i; //@line 748 "/checkout/src/libcore/result.rs"
   $11 = $10; //@line 748 "/checkout/src/libcore/result.rs"
   HEAP32[$11>>2] = $6; //@line 748 "/checkout/src/libcore/result.rs"
   $12 = (($10) + 4)|0; //@line 748 "/checkout/src/libcore/result.rs"
   $13 = $12; //@line 748 "/checkout/src/libcore/result.rs"
   HEAP32[$13>>2] = $9; //@line 748 "/checkout/src/libcore/result.rs"
   HEAP32[$_12$i$i$i>>2] = $key$i1; //@line 239 "/checkout/src/libstd/env.rs"
   $14 = ((($_12$i$i$i)) + 4|0); //@line 239 "/checkout/src/libstd/env.rs"
   HEAP32[$14>>2] = 434; //@line 239 "/checkout/src/libstd/env.rs"
   $15 = ((($_12$i$i$i)) + 8|0); //@line 239 "/checkout/src/libstd/env.rs"
   HEAP32[$15>>2] = $_8$i$i; //@line 239 "/checkout/src/libstd/env.rs"
   $16 = ((($_12$i$i$i)) + 12|0); //@line 239 "/checkout/src/libstd/env.rs"
   HEAP32[$16>>2] = 435; //@line 239 "/checkout/src/libstd/env.rs"
   HEAP32[$_5$i$i$i>>2] = 8496; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
   $17 = ((($_5$i$i$i)) + 4|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
   HEAP32[$17>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
   $_5$sroa$0$0$$sroa_idx$i$i$i$i = ((($_5$i$i$i)) + 8|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
   HEAP32[$_5$sroa$0$0$$sroa_idx$i$i$i$i>>2] = 12044; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
   $_5$sroa$4$0$$sroa_idx2$i$i$i$i = ((($_5$i$i$i)) + 12|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
   HEAP32[$_5$sroa$4$0$$sroa_idx2$i$i$i$i>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
   $18 = ((($_5$i$i$i)) + 16|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
   HEAP32[$18>>2] = $_12$i$i$i; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
   $19 = ((($_5$i$i$i)) + 20|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
   HEAP32[$19>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
   __THREW__ = 0;
   invoke_vii(436,($_5$i$i$i|0),(8512|0)); //@line 239 "/checkout/src/libstd/env.rs"
   $20 = __THREW__; __THREW__ = 0;
   $21 = ___cxa_find_matching_catch_2()|0;
   $22 = tempRet0;
   __ZN4core3ptr13drop_in_place17hb434eb5d905d2ad2E_llvm_2964622($_8$i$i); //@line 240 "/checkout/src/libstd/env.rs"
   ___resumeException($21|0);
   // unreachable;
  }
  ;HEAP32[$_10>>2]=HEAP32[$3>>2]|0;HEAP32[$_10+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$_10+8>>2]=HEAP32[$3+8>>2]|0; //@line 747 "/checkout/src/libcore/result.rs"
  $23 = HEAP32[$_10>>2]|0; //@line 158 "/checkout/src/libstd/sys_common/backtrace.rs"
  $24 = ($23|0)==(0|0); //@line 158 "/checkout/src/libstd/sys_common/backtrace.rs"
  if ($24) {
   $_25$0 = 1;$val$0222830 = 4;
  } else {
   ;HEAP32[$x>>2]=HEAP32[$_10>>2]|0;HEAP32[$x+4>>2]=HEAP32[$_10+4>>2]|0;HEAP32[$x+8>>2]=HEAP32[$_10+8>>2]|0; //@line 158 "/checkout/src/libstd/sys_common/backtrace.rs"
   $25 = HEAP32[$x>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
   $26 = ((($x)) + 8|0); //@line 1690 "/checkout/src/liballoc/vec.rs"
   $27 = HEAP32[$26>>2]|0; //@line 1690 "/checkout/src/liballoc/vec.rs"
   L10: do {
    switch ($27|0) {
    case 1:  {
     $28 = ($25|0)==(11600|0); //@line 2492 "/checkout/src/libcore/slice/mod.rs"
     if ($28) {
      $val$0$ph = 4;
     } else {
      $lhsc = HEAP8[$25>>0]|0; //@line 2497 "/checkout/src/libcore/slice/mod.rs"
      $29 = ($lhsc<<24>>24)==(48); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
      $$ = $29 ? 4 : 3; //@line 158 "/checkout/src/libstd/sys_common/backtrace.rs"
      $val$0$ph = $$;
     }
     break;
    }
    case 4:  {
     $30 = ($25|0)==(22487|0); //@line 2492 "/checkout/src/libcore/slice/mod.rs"
     if (!($30)) {
      $31 = (_memcmp($25,22487,4)|0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
      $32 = ($31|0)==(0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
      if (!($32)) {
       $val$0$ph = 3;
       break L10;
      }
     }
     $val$0$ph = 2;
     break;
    }
    default: {
     $val$0$ph = 3;
    }
    }
   } while(0);
   $33 = ((($x)) + 4|0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
   $34 = HEAP32[$33>>2]|0; //@line 225 "/checkout/src/liballoc/raw_vec.rs"
   $35 = ($34|0)==(0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
   if (!($35)) {
    ___rust_dealloc($25,$34,1); //@line 104 "/checkout/src/liballoc/heap.rs"
   }
   $36 = ($val$0$ph<<24>>24)==(4); //@line 168 "/checkout/src/libstd/sys_common/backtrace.rs"
   $37 = $val$0$ph&255; //@line 168 "/checkout/src/libstd/sys_common/backtrace.rs"
   $$32 = $36 ? 1 : $37; //@line 168 "/checkout/src/libstd/sys_common/backtrace.rs"
   $_25$0 = $$32;$val$0222830 = $val$0$ph;
  }
  HEAP32[9603] = $_25$0; //@line 1480 "/checkout/src/libcore/sync/atomic.rs"
  $_0$0 = $val$0222830;
  STACKTOP = sp;return ($_0$0|0); //@line 172 "/checkout/src/libstd/sys_common/backtrace.rs"
  break;
 }
 case 2:  {
  $_0$0 = 2;
  STACKTOP = sp;return ($_0$0|0); //@line 172 "/checkout/src/libstd/sys_common/backtrace.rs"
  break;
 }
 case 3:  {
  $_0$0 = 3;
  STACKTOP = sp;return ($_0$0|0); //@line 172 "/checkout/src/libstd/sys_common/backtrace.rs"
  break;
 }
 case 1:  {
  $_0$0 = 4;
  STACKTOP = sp;return ($_0$0|0); //@line 172 "/checkout/src/libstd/sys_common/backtrace.rs"
  break;
 }
 default: {
  __ZN3std9panicking11begin_panic17hc122bd4e5599889dE(22433,40,8448); //@line 154 "/checkout/src/libstd/sys_common/backtrace.rs"
  // unreachable; //@line 154 "/checkout/src/libstd/sys_common/backtrace.rs"
 }
 }
 return (0)|0;
}
function __ZN3std10sys_common9backtrace6output17h9c1de3ac202ac2a1E($0,$w$0,$w$1,$1,$2,$3,$s,$4) {
 $0 = $0|0;
 $w$0 = $w$0|0;
 $w$1 = $w$1|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $s = $s|0;
 $4 = $4|0;
 var $$$i1199 = 0, $$1625$i = 0, $$cast$i$i = 0, $$in$i = 0, $$phi$trans$insert1732 = 0, $$phi$trans$insert1734 = 0, $$phi$trans$insert1736 = 0, $$phi$trans$insert1738 = 0, $$phi$trans$insert1740 = 0, $$phi$trans$insert1742 = 0, $$phi$trans$insert1744 = 0, $$phi$trans$insert1746 = 0, $$phi$trans$insert1748 = 0, $$phi$trans$insert1750 = 0, $$phi$trans$insert1752 = 0, $$phi$trans$insert1754 = 0, $$phi$trans$insert1756 = 0, $$phi$trans$insert1758 = 0, $$phi$trans$insert1760 = 0, $$phi$trans$insert1762 = 0;
 var $$phi$trans$insert959 = 0, $$pre = 0, $$pre$i$i$i$i = 0, $$pre$i$i$i1007$i = 0, $$pre$i$i$i1024$i = 0, $$pre$i$i$i1041$i = 0, $$pre$i$i$i1058$i = 0, $$pre$i$i$i1075$i = 0, $$pre$i$i$i1092$i = 0, $$pre$i$i$i1109$i = 0, $$pre$i$i$i1126$i = 0, $$pre$i$i$i1143$i = 0, $$pre$i$i$i1160$i = 0, $$pre$i$i$i1177$i = 0, $$pre$i$i$i1210$i = 0, $$pre$i$i$i1447$i = 0, $$pre$i$i$i742$i = 0, $$pre$i$i$i768$i = 0, $$pre$i$i$i817$i = 0, $$pre$i$i$i888$i = 0;
 var $$pre$i$i$i905$i = 0, $$pre$i$i$i922$i = 0, $$pre$i$i$i939$i = 0, $$pre$i$i$i956$i = 0, $$pre$i$i$i973$i = 0, $$pre$i$i$i990$i = 0, $$pre$phi$i$i$i$i$i$i37Z2D = 0, $$pre$phi$i$i$i$i$i$iZ2D = 0, $$pre$phi$i$i$i1012$iZ2D = 0, $$pre$phi$i$i$i1029$iZ2D = 0, $$pre$phi$i$i$i1046$iZ2D = 0, $$pre$phi$i$i$i1063$iZ2D = 0, $$pre$phi$i$i$i1080$iZ2D = 0, $$pre$phi$i$i$i1097$iZ2D = 0, $$pre$phi$i$i$i1114$iZ2D = 0, $$pre$phi$i$i$i1131$iZ2D = 0, $$pre$phi$i$i$i1148$iZ2D = 0, $$pre$phi$i$i$i1165$iZ2D = 0, $$pre$phi$i$i$i1182$iZ2D = 0, $$pre$phi$i$i$i1215$iZ2D = 0;
 var $$pre$phi$i$i$i1215$sink$iZ2D = 0, $$pre$phi$i$i$i822$iZ2D = 0, $$pre$phi1781Z2D = 0, $$pre1733 = 0, $$pre1735 = 0, $$pre1737 = 0, $$pre1739 = 0, $$pre1741 = 0, $$pre1743 = 0, $$pre1745 = 0, $$pre1747 = 0, $$pre1749 = 0, $$pre1751 = 0, $$pre1753 = 0, $$pre1755 = 0, $$pre1757 = 0, $$pre1759 = 0, $$pre1761 = 0, $$pre1763 = 0, $$pre2$i$i$i1448$i = 0;
 var $$ptr$i = 0, $$sink$i$i$i$i$i$i$i$i = 0, $$sink$i1198 = 0, $$sink$lcssa2460$i = 0, $$sink1627$i = 0, $$sink1631$i = 0, $$sink688$i = 0, $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $388$phi = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0;
 var $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0;
 var $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0;
 var $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0;
 var $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0;
 var $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0;
 var $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0;
 var $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0;
 var $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0;
 var $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0;
 var $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0;
 var $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0;
 var $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0;
 var $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0;
 var $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0;
 var $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0;
 var $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0;
 var $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0;
 var $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0;
 var $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $_0$0$i$i$i705$i = 0, $_0$0$i10$i$i$i = 0, $_0$0$i10$i$i$i126 = 0, $_0$0$i10$i$i$i68 = 0, $_0$0$i10$i$i$i93 = 0, $_0$0$i10$i$i1419$i = 0;
 var $_0$0$i10$i$i1492$i = 0, $_0$0$i10$i$i1541$i = 0, $_0$0$i10$i$i807$i = 0, $_0$0$i10$i$i868$i = 0, $_0$0$i16$i$i$i = 0, $_0$0$i16$i$i$i121 = 0, $_0$0$i16$i$i$i63 = 0, $_0$0$i16$i$i$i88 = 0, $_0$0$i16$i$i1414$i = 0, $_0$0$i16$i$i1487$i = 0, $_0$0$i16$i$i1536$i = 0, $_0$0$i16$i$i802$i = 0, $_0$0$i16$i$i863$i = 0, $_0$0$i5$i$i$i = 0, $_0$0$i5$i$i$i131 = 0, $_0$0$i5$i$i$i73 = 0, $_0$0$i5$i$i$i98 = 0, $_0$0$i5$i$i1424$i = 0, $_0$0$i5$i$i1497$i = 0, $_0$0$i5$i$i1546$i = 0;
 var $_0$0$i5$i$i812$i = 0, $_0$0$i5$i$i873$i = 0, $_120$i = 0, $_137$sroa$0$0$copyload$i = 0, $_137$sroa$5$0$$sroa_idx180$i = 0, $_137$sroa$5$0$copyload$i = 0, $_138$i = 0, $_140$i = 0, $_151$sroa$0$0$$i = 0, $_151$sroa$0$0$i = 0, $_151$sroa$0$2$i = 0, $_151$sroa$0$3$i = 0, $_151$sroa$0$4$i = 0, $_151$sroa$0$61611$i = 0, $_167$i = 0, $_18 = 0, $_192$i = 0, $_20 = 0, $_21$sroa$0$0$$i = 0, $_21$sroa$0$0$i = 0;
 var $_21$sroa$0$2$i = 0, $_21$sroa$0$3$i = 0, $_21$sroa$0$4$i = 0, $_21$sroa$0$61599$i = 0, $_234$i = 0, $_251$i = 0, $_27 = 0, $_272$i = 0, $_294$i = 0, $_316$i = 0, $_338$i = 0, $_360$i = 0, $_382$i = 0, $_4$sroa$4$0$$sroa_idx$i$i$i = 0, $_4$sroa$5$0$$sroa_idx$i$i$i = 0, $_4$sroa$6$0$$sroa_idx$i$i$i = 0, $_4$sroa$7$0$$sroa_idx$i$i$i = 0, $_4$sroa$9$0$$sroa_idx$i$i$i = 0, $_404$i = 0, $_426$i = 0;
 var $_448$i = 0, $_470$i = 0, $_492$i = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$0$0$$sroa_idx$i77 = 0, $_5$sroa$4$0$$sroa_idx2$i = 0, $_5$sroa$4$0$$sroa_idx2$i79 = 0, $_514$i = 0, $_53 = 0, $_536$i = 0, $_55 = 0, $_558$i = 0, $_580$i = 0, $_6$i = 0, $_602$i = 0, $_62 = 0, $_624$i = 0, $_646$i = 0, $_666$i = 0, $_680$sroa$0$0$i = 0;
 var $_680$sroa$5$0$i = 0, $_680$sroa$5$1$i = 0, $_680$sroa$5$2$i = 0, $_680$sroa$5$3$i = 0, $_680$sroa$5$4$i = 0, $_680$sroa$5$61620$i = 0, $_689$i = 0, $_82$sroa$0$0$ph = 0, $_94 = 0, $accum$0$i$i$i$i$i = 0, $c$off$i$i$i$i$i = 0, $c$off1$i$i$i$i$i = 0, $chars$i$sroa$0$0 = 0, $chars$i$sroa$0$1 = 0, $chars$i$sroa$0$11 = 0, $chars$i$sroa$0$13 = 0, $chars$i$sroa$0$14 = 0, $chars$i$sroa$0$15 = 0, $chars$i$sroa$0$16 = 0, $chars$i$sroa$0$17607 = 0;
 var $chars$i$sroa$0$18 = 0, $chars$i$sroa$0$2 = 0, $chars$i$sroa$0$3 = 0, $chars$i$sroa$0$5 = 0, $chars$i$sroa$0$6 = 0, $chars$i$sroa$0$7 = 0, $chars$i$sroa$0$8 = 0, $chars$i$sroa$0$9 = 0, $cond$i = 0, $cond92$i = 0, $def$0$sink$i$i = 0, $def$1$sink$i$i = 0, $first$0$off02427$i = 0, $frame = 0, $i$0$lcssa$i = 0, $i$02430$i = 0, $idx = 0, $idx$0$i = 0, $inner$sroa$0$2$i = 0, $inner$sroa$0$5$ph$i = 0;
 var $inner$sroa$0$52429$i = 0, $inner$sroa$14$1$i = 0, $inner$sroa$14$1$in$i = 0, $inner$sroa$14$2$i = 0, $inner$sroa$14$5$ph$i = 0, $inner$sroa$14$52428$i = 0, $not$$$i$i$i$i$i = 0, $not$$i$i$i = 0, $not$$i$i$i$i = 0, $not$$i$i$i$i$i = 0, $not$$i$i$i1450$i = 0, $not$$i$i715$i = 0, $not$677$i = 0, $notlhs$i$i$i$i = 0, $notrhs$i$i$i$i = 0, $or$cond$i$i$i$i$i = 0, $or$cond$i$i$i$i1194$i = 0, $or$cond$i$i$i$i690$i = 0, $or$cond$i$i$i$i741$i = 0, $phitmp$i$i$i = 0;
 var $phitmp$i$i$i119 = 0, $phitmp$i$i$i61 = 0, $phitmp$i$i$i86 = 0, $phitmp$i$i1412$i = 0, $phitmp$i$i1485$i = 0, $phitmp$i$i1534$i = 0, $phitmp$i$i800$i = 0, $phitmp$i$i861$i = 0, $phitmp21$i$i$i = 0, $phitmp21$i$i$i124 = 0, $phitmp21$i$i$i66 = 0, $phitmp21$i$i$i91 = 0, $phitmp21$i$i1417$i = 0, $phitmp21$i$i1490$i = 0, $phitmp21$i$i1539$i = 0, $phitmp21$i$i805$i = 0, $phitmp21$i$i866$i = 0, $phitmp22$i$i$i = 0, $phitmp22$i$i$i129 = 0, $phitmp22$i$i$i71 = 0;
 var $phitmp22$i$i$i96 = 0, $phitmp22$i$i1422$i = 0, $phitmp22$i$i1495$i = 0, $phitmp22$i$i1544$i = 0, $phitmp22$i$i810$i = 0, $phitmp22$i$i871$i = 0, $rest2$sroa$0$0$ph$i = 0, $rest2$sroa$0$02423$i = 0, $rest2$sroa$80$0$$i = 0, $rest2$sroa$80$0$be$i = 0, $rest2$sroa$80$0$ph$i = 0, $rest2$sroa$80$02424$i = 0, $rhsc = 0, $rhsc641 = 0, $rhsc661 = 0, $rhsc664 = 0, $s$sroa$17$0$i = 0, $self$i$i$i$sroa$4$0 = 0, $self$off$i$i = 0, $self$off$i$i$i$i$i$i$i$i = 0;
 var $self$off$i727$i = 0, $self$off1$i$i$i$i$i$i$i$i = 0, $self$off2$i$i$i$i$i$i$i$i = 0, $split$i = 0, $switch$i$i100 = 0, $trunc$i$i$i$i$i = 0, $trunc$i$i$i$i$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(448|0);
 $5 = sp;
 $_689$i = sp + 312|0;
 $_666$i = sp + 304|0;
 $_646$i = sp + 296|0;
 $_624$i = sp + 288|0;
 $_602$i = sp + 280|0;
 $_580$i = sp + 272|0;
 $_558$i = sp + 264|0;
 $_536$i = sp + 256|0;
 $_514$i = sp + 248|0;
 $_492$i = sp + 240|0;
 $_470$i = sp + 232|0;
 $_448$i = sp + 224|0;
 $_426$i = sp + 216|0;
 $_404$i = sp + 208|0;
 $_382$i = sp + 200|0;
 $_360$i = sp + 192|0;
 $_338$i = sp + 184|0;
 $_316$i = sp + 176|0;
 $_294$i = sp + 168|0;
 $_272$i = sp + 160|0;
 $_251$i = sp + 152|0;
 $_234$i = sp + 144|0;
 $_192$i = sp + 432|0;
 $_167$i = sp + 136|0;
 $_140$i = sp + 128|0;
 $_138$i = sp + 424|0;
 $split$i = sp + 40|0;
 $_120$i = sp + 32|0;
 $_6$i = sp + 416|0;
 $_94 = sp + 24|0;
 $_62 = sp + 408|0;
 $_55 = sp + 384|0;
 $_53 = sp + 16|0;
 $_27 = sp + 360|0;
 $_20 = sp + 336|0;
 $_18 = sp + 8|0;
 $frame = sp + 328|0;
 $idx = sp + 320|0;
 HEAP32[$idx>>2] = $1;
 HEAP32[$frame>>2] = $2;
 $6 = ((($frame)) + 4|0);
 HEAP32[$6>>2] = $3;
 $7 = ($4<<24>>24)==(3); //@line 137 "/checkout/src/libstd/sys_common/backtrace.rs"
 do {
  if ($7) {
   $8 = ($2|0)==(0|0); //@line 181 "/checkout/src/libstd/sys_common/backtrace.rs"
   if ($8) {
    HEAP8[$0>>0] = 3; //@line 182 "/checkout/src/libstd/sys_common/backtrace.rs"
    STACKTOP = sp;return; //@line 197 "/checkout/src/libstd/sys_common/backtrace.rs"
   }
   HEAP32[$_62>>2] = $idx; //@line 190 "/checkout/src/libstd/sys_common/backtrace.rs"
   $27 = ((($_62)) + 4|0); //@line 190 "/checkout/src/libstd/sys_common/backtrace.rs"
   HEAP32[$27>>2] = 289; //@line 190 "/checkout/src/libstd/sys_common/backtrace.rs"
   HEAP32[$_55>>2] = 8644; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
   $28 = ((($_55)) + 4|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
   HEAP32[$28>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
   $_5$sroa$0$0$$sroa_idx$i77 = ((($_55)) + 8|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
   HEAP32[$_5$sroa$0$0$$sroa_idx$i77>>2] = 8660; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
   $_5$sroa$4$0$$sroa_idx2$i79 = ((($_55)) + 12|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
   HEAP32[$_5$sroa$4$0$$sroa_idx2$i79>>2] = 1; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
   $29 = ((($_55)) + 16|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
   HEAP32[$29>>2] = $_62; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
   $30 = ((($_55)) + 20|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
   HEAP32[$30>>2] = 1; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
   $31 = ((($w$1)) + 24|0); //@line 190 "/checkout/src/libstd/sys_common/backtrace.rs"
   $32 = HEAP32[$31>>2]|0; //@line 190 "/checkout/src/libstd/sys_common/backtrace.rs"
   FUNCTION_TABLE_viii[$32 & 511]($_53,$w$0,$_55); //@line 190 "/checkout/src/libstd/sys_common/backtrace.rs"
   $33 = $_53; //@line 1172 "/checkout/src/libcore/result.rs"
   $34 = $33; //@line 1172 "/checkout/src/libcore/result.rs"
   $35 = HEAP32[$34>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
   $36 = (($33) + 4)|0; //@line 1172 "/checkout/src/libcore/result.rs"
   $37 = $36; //@line 1172 "/checkout/src/libcore/result.rs"
   $38 = HEAP32[$37>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
   $39 = $35&255; //@line 1172 "/checkout/src/libcore/result.rs"
   $40 = ($39<<24>>24)==(3); //@line 190 "/checkout/src/libstd/sys_common/backtrace.rs"
   if ($40) {
    break;
   }
   $47 = $0; //@line 1180 "/checkout/src/libcore/result.rs"
   $48 = $47; //@line 1180 "/checkout/src/libcore/result.rs"
   HEAP32[$48>>2] = $35; //@line 1180 "/checkout/src/libcore/result.rs"
   $49 = (($47) + 4)|0; //@line 1180 "/checkout/src/libcore/result.rs"
   $50 = $49; //@line 1180 "/checkout/src/libcore/result.rs"
   HEAP32[$50>>2] = $38; //@line 1180 "/checkout/src/libcore/result.rs"
   STACKTOP = sp;return; //@line 197 "/checkout/src/libstd/sys_common/backtrace.rs"
  } else {
   __ZN4core3fmt10ArgumentV110from_usize17h5a20d86b3b66d825E($5,8544); //@line 185 "/checkout/src/libstd/sys_common/backtrace.rs"
   $$sreg$field = HEAP32[$5>>2]|0; //@line 185 "/checkout/src/libstd/sys_common/backtrace.rs"
   $$sreg$index1 = ((($5)) + 4|0); //@line 185 "/checkout/src/libstd/sys_common/backtrace.rs"
   $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0; //@line 185 "/checkout/src/libstd/sys_common/backtrace.rs"
   HEAP32[$_27>>2] = $idx; //@line 185 "/checkout/src/libstd/sys_common/backtrace.rs"
   $9 = ((($_27)) + 4|0); //@line 185 "/checkout/src/libstd/sys_common/backtrace.rs"
   HEAP32[$9>>2] = 289; //@line 185 "/checkout/src/libstd/sys_common/backtrace.rs"
   $10 = ((($_27)) + 8|0); //@line 185 "/checkout/src/libstd/sys_common/backtrace.rs"
   HEAP32[$10>>2] = $frame; //@line 185 "/checkout/src/libstd/sys_common/backtrace.rs"
   $11 = ((($_27)) + 12|0); //@line 185 "/checkout/src/libstd/sys_common/backtrace.rs"
   HEAP32[$11>>2] = 437; //@line 185 "/checkout/src/libstd/sys_common/backtrace.rs"
   $12 = ((($_27)) + 16|0); //@line 185 "/checkout/src/libstd/sys_common/backtrace.rs"
   HEAP32[$12>>2] = $$sreg$field; //@line 185 "/checkout/src/libstd/sys_common/backtrace.rs"
   $13 = ((($_27)) + 20|0); //@line 185 "/checkout/src/libstd/sys_common/backtrace.rs"
   HEAP32[$13>>2] = $$sreg$field2; //@line 185 "/checkout/src/libstd/sys_common/backtrace.rs"
   HEAP32[$_20>>2] = 8548; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
   $14 = ((($_20)) + 4|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
   HEAP32[$14>>2] = 3; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
   $_5$sroa$0$0$$sroa_idx$i = ((($_20)) + 8|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
   HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 8572; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
   $_5$sroa$4$0$$sroa_idx2$i = ((($_20)) + 12|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
   HEAP32[$_5$sroa$4$0$$sroa_idx2$i>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
   $15 = ((($_20)) + 16|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
   HEAP32[$15>>2] = $_27; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
   $16 = ((($_20)) + 20|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
   HEAP32[$16>>2] = 3; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
   $17 = ((($w$1)) + 24|0); //@line 185 "/checkout/src/libstd/sys_common/backtrace.rs"
   $18 = HEAP32[$17>>2]|0; //@line 185 "/checkout/src/libstd/sys_common/backtrace.rs"
   FUNCTION_TABLE_viii[$18 & 511]($_18,$w$0,$_20); //@line 185 "/checkout/src/libstd/sys_common/backtrace.rs"
   $19 = $_18; //@line 1172 "/checkout/src/libcore/result.rs"
   $20 = $19; //@line 1172 "/checkout/src/libcore/result.rs"
   $21 = HEAP32[$20>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
   $22 = (($19) + 4)|0; //@line 1172 "/checkout/src/libcore/result.rs"
   $23 = $22; //@line 1172 "/checkout/src/libcore/result.rs"
   $24 = HEAP32[$23>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
   $25 = $21&255; //@line 1172 "/checkout/src/libcore/result.rs"
   $26 = ($25<<24>>24)==(3); //@line 185 "/checkout/src/libstd/sys_common/backtrace.rs"
   if ($26) {
    break;
   }
   $43 = $0; //@line 1180 "/checkout/src/libcore/result.rs"
   $44 = $43; //@line 1180 "/checkout/src/libcore/result.rs"
   HEAP32[$44>>2] = $21; //@line 1180 "/checkout/src/libcore/result.rs"
   $45 = (($43) + 4)|0; //@line 1180 "/checkout/src/libcore/result.rs"
   $46 = $45; //@line 1180 "/checkout/src/libcore/result.rs"
   HEAP32[$46>>2] = $24; //@line 1180 "/checkout/src/libcore/result.rs"
   STACKTOP = sp;return; //@line 197 "/checkout/src/libstd/sys_common/backtrace.rs"
  }
 } while(0);
 $41 = HEAP32[$s>>2]|0; //@line 193 "/checkout/src/libstd/sys_common/backtrace.rs"
 $42 = ($41|0)==(0|0); //@line 193 "/checkout/src/libstd/sys_common/backtrace.rs"
 do {
  if ($42) {
   $51 = ((($w$1)) + 20|0); //@line 194 "/checkout/src/libstd/sys_common/backtrace.rs"
   $52 = HEAP32[$51>>2]|0; //@line 194 "/checkout/src/libstd/sys_common/backtrace.rs"
   FUNCTION_TABLE_viiii[$52 & 511]($_94,$w$0,8696,9); //@line 194 "/checkout/src/libstd/sys_common/backtrace.rs"
   $53 = $_94; //@line 1172 "/checkout/src/libcore/result.rs"
   $54 = $53; //@line 1172 "/checkout/src/libcore/result.rs"
   $55 = HEAP32[$54>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
   $56 = (($53) + 4)|0; //@line 1172 "/checkout/src/libcore/result.rs"
   $57 = $56; //@line 1172 "/checkout/src/libcore/result.rs"
   $58 = HEAP32[$57>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
   $59 = $55&255; //@line 1172 "/checkout/src/libcore/result.rs"
   $60 = ($59<<24>>24)==(3); //@line 194 "/checkout/src/libstd/sys_common/backtrace.rs"
   if ($60) {
    $981 = $52;
   } else {
    $993 = $0; //@line 1180 "/checkout/src/libcore/result.rs"
    $994 = $993; //@line 1180 "/checkout/src/libcore/result.rs"
    HEAP32[$994>>2] = $55; //@line 1180 "/checkout/src/libcore/result.rs"
    $995 = (($993) + 4)|0; //@line 1180 "/checkout/src/libcore/result.rs"
    $996 = $995; //@line 1180 "/checkout/src/libcore/result.rs"
    HEAP32[$996>>2] = $58; //@line 1180 "/checkout/src/libcore/result.rs"
    STACKTOP = sp;return; //@line 197 "/checkout/src/libstd/sys_common/backtrace.rs"
   }
  } else {
   $61 = ((($s)) + 4|0); //@line 193 "/checkout/src/libstd/sys_common/backtrace.rs"
   $62 = HEAP32[$61>>2]|0; //@line 193 "/checkout/src/libstd/sys_common/backtrace.rs"
   __ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_4find17h298827502daec17dE($_6$i,$41,$62,22787,6); //@line 980 "/checkout/src/liballoc/str.rs"
   $63 = HEAP32[$_6$i>>2]|0; //@line 260 "/checkout/src/libstd/sys_common/backtrace.rs"
   $cond$i = ($63|0)==(1); //@line 260 "/checkout/src/libstd/sys_common/backtrace.rs"
   L22: do {
    if ($cond$i) {
     $64 = ((($_6$i)) + 4|0); //@line 260 "/checkout/src/libstd/sys_common/backtrace.rs"
     $65 = HEAP32[$64>>2]|0; //@line 260 "/checkout/src/libstd/sys_common/backtrace.rs"
     $66 = (($65) + 6)|0; //@line 261 "/checkout/src/libstd/sys_common/backtrace.rs"
     $67 = ($66|0)==(0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
     $68 = ($62|0)==($66|0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
     $or$cond$i$i$i$i$i = $67 | $68; //@line 2438 "/checkout/src/libcore/str/mod.rs"
     if ($or$cond$i$i$i$i$i) {
      $$pre$i$i$i$i = (($41) + ($66)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
      $$pre$phi1781Z2D = $$pre$i$i$i$i;
     } else {
      $69 = ($62>>>0)>($66>>>0); //@line 792 "/checkout/src/libcore/slice/mod.rs"
      if (!($69)) {
       __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($41,$62,$66,$62); //@line 1987 "/checkout/src/libcore/str/mod.rs"
       // unreachable; //@line 1987 "/checkout/src/libcore/str/mod.rs"
      }
      $70 = (($41) + ($66)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
      $71 = HEAP8[$70>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
      $72 = ($71<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
      if ($72) {
       $$pre$phi1781Z2D = $70;
      } else {
       __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($41,$62,$66,$62); //@line 1987 "/checkout/src/libcore/str/mod.rs"
       // unreachable; //@line 1987 "/checkout/src/libcore/str/mod.rs"
      }
     }
     $73 = (($41) + ($66)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $74 = (($62) - ($66))|0; //@line 1975 "/checkout/src/libcore/str/mod.rs"
     $75 = (($73) + ($74)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $_21$sroa$0$0$i = $$pre$phi1781Z2D;
     while(1) {
      $76 = ($_21$sroa$0$0$i|0)==($75|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
      $77 = ((($_21$sroa$0$0$i)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
      $_21$sroa$0$0$$i = $76 ? $_21$sroa$0$0$i : $77; //@line 1138 "/checkout/src/libcore/slice/mod.rs"
      $78 = ($_21$sroa$0$0$i|0)==(0|0); //@line 497 "/checkout/src/libcore/str/mod.rs"
      $79 = $76 | $78; //@line 497 "/checkout/src/libcore/str/mod.rs"
      if ($79) {
       break;
      }
      $80 = HEAP8[$_21$sroa$0$0$i>>0]|0; //@line 497 "/checkout/src/libcore/str/mod.rs"
      $81 = ($80<<24>>24)>(-1); //@line 498 "/checkout/src/libcore/str/mod.rs"
      if ($81) {
       $82 = $80&255; //@line 499 "/checkout/src/libcore/str/mod.rs"
       $110 = $82;$_21$sroa$0$61599$i = $_21$sroa$0$0$$i;
      } else {
       $83 = $80 & 31; //@line 472 "/checkout/src/libcore/str/mod.rs"
       $84 = $83&255; //@line 472 "/checkout/src/libcore/str/mod.rs"
       $85 = ($_21$sroa$0$0$$i|0)==($75|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
       if ($85) {
        $_0$0$i16$i$i$i = 0;$_21$sroa$0$2$i = $75;
       } else {
        $86 = ((($_21$sroa$0$0$$i)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
        $87 = HEAP8[$_21$sroa$0$0$$i>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
        $phitmp$i$i$i = $87 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
        $_0$0$i16$i$i$i = $phitmp$i$i$i;$_21$sroa$0$2$i = $86;
       }
       $88 = $84 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
       $89 = $_0$0$i16$i$i$i&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
       $90 = $89 | $88; //@line 476 "/checkout/src/libcore/str/mod.rs"
       $91 = ($80&255)>(223); //@line 508 "/checkout/src/libcore/str/mod.rs"
       if ($91) {
        $92 = ($_21$sroa$0$2$i|0)==($75|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
        if ($92) {
         $_0$0$i10$i$i$i = 0;$_21$sroa$0$3$i = $75;
        } else {
         $93 = ((($_21$sroa$0$2$i)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
         $94 = HEAP8[$_21$sroa$0$2$i>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
         $phitmp21$i$i$i = $94 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
         $_0$0$i10$i$i$i = $phitmp21$i$i$i;$_21$sroa$0$3$i = $93;
        }
        $95 = $89 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
        $96 = $_0$0$i10$i$i$i&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
        $97 = $96 | $95; //@line 476 "/checkout/src/libcore/str/mod.rs"
        $98 = $84 << 12; //@line 513 "/checkout/src/libcore/str/mod.rs"
        $99 = $97 | $98; //@line 513 "/checkout/src/libcore/str/mod.rs"
        $100 = ($80&255)>(239); //@line 514 "/checkout/src/libcore/str/mod.rs"
        if ($100) {
         $101 = ($_21$sroa$0$3$i|0)==($75|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
         if ($101) {
          $_0$0$i5$i$i$i = 0;$_21$sroa$0$4$i = $75;
         } else {
          $102 = ((($_21$sroa$0$3$i)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
          $103 = HEAP8[$_21$sroa$0$3$i>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
          $phitmp22$i$i$i = $103 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
          $_0$0$i5$i$i$i = $phitmp22$i$i$i;$_21$sroa$0$4$i = $102;
         }
         $104 = $84 << 18; //@line 518 "/checkout/src/libcore/str/mod.rs"
         $105 = $104 & 1835008; //@line 518 "/checkout/src/libcore/str/mod.rs"
         $106 = $97 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
         $107 = $_0$0$i5$i$i$i&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
         $108 = $106 | $105; //@line 476 "/checkout/src/libcore/str/mod.rs"
         $109 = $108 | $107; //@line 518 "/checkout/src/libcore/str/mod.rs"
         $not$$i$i$i = ($109|0)==(1114112); //@line 1409 "/checkout/src/libcore/iter/iterator.rs"
         if ($not$$i$i$i) {
          break;
         } else {
          $110 = $109;$_21$sroa$0$61599$i = $_21$sroa$0$4$i;
         }
        } else {
         $110 = $99;$_21$sroa$0$61599$i = $_21$sroa$0$3$i;
        }
       } else {
        $110 = $90;$_21$sroa$0$61599$i = $_21$sroa$0$2$i;
       }
      }
      $c$off$i$i$i$i$i = (($110) + -65)|0; //@line 264 "/checkout/src/libstd/sys_common/backtrace.rs"
      $c$off1$i$i$i$i$i = (($110) + -48)|0; //@line 264 "/checkout/src/libstd/sys_common/backtrace.rs"
      $notlhs$i$i$i$i = ($c$off$i$i$i$i$i>>>0)>(5); //@line 1530 "/checkout/src/libcore/iter/iterator.rs"
      $notrhs$i$i$i$i = ($c$off1$i$i$i$i$i>>>0)>(9); //@line 1530 "/checkout/src/libcore/iter/iterator.rs"
      $not$$$i$i$i$i$i = $notrhs$i$i$i$i & $notlhs$i$i$i$i; //@line 1530 "/checkout/src/libcore/iter/iterator.rs"
      if ($not$$$i$i$i$i$i) {
       $s$sroa$17$0$i = $62;
       break L22;
      } else {
       $_21$sroa$0$0$i = $_21$sroa$0$61599$i;
      }
     }
     $112 = ($65|0)==(0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
     $113 = ($65|0)==($62|0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
     $or$cond$i$i$i$i690$i = $112 | $113; //@line 2438 "/checkout/src/libcore/str/mod.rs"
     if ($or$cond$i$i$i$i690$i) {
      $s$sroa$17$0$i = $65;
     } else {
      $114 = ($65>>>0)<($62>>>0); //@line 792 "/checkout/src/libcore/slice/mod.rs"
      if (!($114)) {
       __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($41,$62,0,$65); //@line 1940 "/checkout/src/libcore/str/mod.rs"
       // unreachable; //@line 1940 "/checkout/src/libcore/str/mod.rs"
      }
      $115 = (($41) + ($65)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
      $116 = HEAP8[$115>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
      $117 = ($116<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
      if ($117) {
       $s$sroa$17$0$i = $65;
      } else {
       __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($41,$62,0,$65); //@line 1940 "/checkout/src/libcore/str/mod.rs"
       // unreachable; //@line 1940 "/checkout/src/libcore/str/mod.rs"
      }
     }
    } else {
     $s$sroa$17$0$i = $62;
    }
   } while(0);
   $111 = ($s$sroa$17$0$i>>>0)>(4); //@line 279 "/checkout/src/libstd/sys_common/backtrace.rs"
   do {
    if ($111) {
     $125 = ((($41)) + 3|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $126 = HEAP8[$125>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
     $127 = ($126<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
     if ($127) {
      $128 = ($41|0)==(22794|0); //@line 2492 "/checkout/src/libcore/slice/mod.rs"
      if (!($128)) {
       $129 = (_memcmp(22794,$41,3)|0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
       $130 = ($129|0)==(0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
       if (!($130)) {
        label = 57;
        break;
       }
      }
      $120 = (($s$sroa$17$0$i) + -1)|0; //@line 562 "/checkout/src/libcore/str/pattern.rs"
      $121 = ($120|0)==(0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
      if ($121) {
       $$pre$phi$i$i$i$i$i$iZ2D = $41;
      } else {
       $122 = (($41) + ($120)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
       $123 = HEAP8[$122>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
       $124 = ($123<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
       if ($124) {
        $$pre$phi$i$i$i$i$i$iZ2D = $122;
       } else {
        label = 57;
        break;
       }
      }
      $118 = ($$pre$phi$i$i$i$i$i$iZ2D|0)==(22793|0); //@line 2492 "/checkout/src/libcore/slice/mod.rs"
      if (!($118)) {
       $rhsc664 = HEAP8[$$pre$phi$i$i$i$i$i$iZ2D>>0]|0; //@line 2497 "/checkout/src/libcore/slice/mod.rs"
       $119 = ($rhsc664<<24>>24)==(69); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
       if (!($119)) {
        $143 = ($s$sroa$17$0$i|0)==(2); //@line 2438 "/checkout/src/libcore/str/mod.rs"
        if ($143) {
         label = 58;
         break;
        }
        $144 = ($s$sroa$17$0$i>>>0)>(2); //@line 792 "/checkout/src/libcore/slice/mod.rs"
        if ($144) {
         label = 57;
         break;
        } else {
         label = 118;
         break;
        }
       }
      }
      $131 = ($120>>>0)<(3); //@line 1859 "/checkout/src/libcore/str/mod.rs"
      if ($131) {
       __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($41,$s$sroa$17$0$i,3,$120); //@line 1892 "/checkout/src/libcore/str/mod.rs"
       // unreachable; //@line 1892 "/checkout/src/libcore/str/mod.rs"
      }
      $132 = (($41) + ($120)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
      $133 = HEAP8[$132>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
      $134 = ($133<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
      if ($134) {
       $$sink1631$i = 3;$inner$sroa$14$1$in$i = $120;
       label = 64;
      } else {
       __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($41,$s$sroa$17$0$i,3,$120); //@line 1892 "/checkout/src/libcore/str/mod.rs"
       // unreachable; //@line 1892 "/checkout/src/libcore/str/mod.rs"
      }
     } else {
      label = 57;
     }
    } else {
     $135 = ($s$sroa$17$0$i|0)==(4); //@line 282 "/checkout/src/libstd/sys_common/backtrace.rs"
     if ($135) {
      label = 57;
     } else {
      label = 118;
     }
    }
   } while(0);
   if ((label|0) == 57) {
    $145 = ((($41)) + 2|0); //@line 623 "/checkout/src/libcore/ptr.rs"
    $146 = HEAP8[$145>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
    $147 = ($146<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
    if ($147) {
     label = 58;
    } else {
     label = 118;
    }
   }
   do {
    if ((label|0) == 58) {
     $148 = ($41|0)==(22797|0); //@line 2492 "/checkout/src/libcore/slice/mod.rs"
     if (!($148)) {
      $149 = (_memcmp(22797,$41,2)|0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
      $150 = ($149|0)==(0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
      if (!($150)) {
       label = 118;
       break;
      }
     }
     $138 = (($s$sroa$17$0$i) + -1)|0; //@line 562 "/checkout/src/libcore/str/pattern.rs"
     $139 = ($138|0)==(0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
     if ($139) {
      $$pre$phi$i$i$i$i$i$i37Z2D = $41;
     } else {
      $140 = (($41) + ($138)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
      $141 = HEAP8[$140>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
      $142 = ($141<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
      if ($142) {
       $$pre$phi$i$i$i$i$i$i37Z2D = $140;
      } else {
       label = 118;
       break;
      }
     }
     $136 = ($$pre$phi$i$i$i$i$i$i37Z2D|0)==(22793|0); //@line 2492 "/checkout/src/libcore/slice/mod.rs"
     if (!($136)) {
      $rhsc = HEAP8[$$pre$phi$i$i$i$i$i$i37Z2D>>0]|0; //@line 2497 "/checkout/src/libcore/slice/mod.rs"
      $137 = ($rhsc<<24>>24)==(69); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
      if (!($137)) {
       label = 118;
       break;
      }
     }
     $151 = ($138>>>0)<(2); //@line 1859 "/checkout/src/libcore/str/mod.rs"
     if ($151) {
      __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($41,$s$sroa$17$0$i,2,$138); //@line 1892 "/checkout/src/libcore/str/mod.rs"
      // unreachable; //@line 1892 "/checkout/src/libcore/str/mod.rs"
     }
     $155 = ((($41)) + 2|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $156 = HEAP8[$155>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
     $157 = ($156<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
     if (!($157)) {
      __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($41,$s$sroa$17$0$i,2,$138); //@line 1892 "/checkout/src/libcore/str/mod.rs"
      // unreachable; //@line 1892 "/checkout/src/libcore/str/mod.rs"
     }
     $152 = (($41) + ($138)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $153 = HEAP8[$152>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
     $154 = ($153<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
     if ($154) {
      $$sink1631$i = 2;$inner$sroa$14$1$in$i = $s$sroa$17$0$i;
      label = 64;
     } else {
      __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($41,$s$sroa$17$0$i,2,$138); //@line 1892 "/checkout/src/libcore/str/mod.rs"
      // unreachable; //@line 1892 "/checkout/src/libcore/str/mod.rs"
     }
    }
   } while(0);
   L98: do {
    if ((label|0) == 64) {
     $158 = (($41) + ($$sink1631$i)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $inner$sroa$14$1$i = (($inner$sroa$14$1$in$i) + -3)|0; //@line 1880 "/checkout/src/libcore/str/mod.rs"
     $159 = (($158) + ($inner$sroa$14$1$i)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $chars$i$sroa$0$0 = $158;
     while(1) {
      $160 = ($chars$i$sroa$0$0|0)==($159|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
      if ($160) {
       break;
      }
      $161 = ((($chars$i$sroa$0$0)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
      $162 = HEAP8[$chars$i$sroa$0$0>>0]|0; //@line 497 "/checkout/src/libcore/str/mod.rs"
      $163 = ($162<<24>>24)>(-1); //@line 498 "/checkout/src/libcore/str/mod.rs"
      if ($163) {
       $164 = $162&255; //@line 499 "/checkout/src/libcore/str/mod.rs"
       $194 = $164;$chars$i$sroa$0$5 = $161;$i$02430$i = 0;
      } else {
       $165 = $162 & 31; //@line 472 "/checkout/src/libcore/str/mod.rs"
       $166 = $165&255; //@line 472 "/checkout/src/libcore/str/mod.rs"
       $167 = ($161|0)==($159|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
       if ($167) {
        $_0$0$i16$i$i$i63 = 0;$chars$i$sroa$0$1 = $159;
       } else {
        $168 = ((($chars$i$sroa$0$0)) + 2|0); //@line 623 "/checkout/src/libcore/ptr.rs"
        $169 = HEAP8[$161>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
        $phitmp$i$i$i61 = $169 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
        $_0$0$i16$i$i$i63 = $phitmp$i$i$i61;$chars$i$sroa$0$1 = $168;
       }
       $170 = $166 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
       $171 = $_0$0$i16$i$i$i63&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
       $172 = $171 | $170; //@line 476 "/checkout/src/libcore/str/mod.rs"
       $173 = ($162&255)>(223); //@line 508 "/checkout/src/libcore/str/mod.rs"
       if ($173) {
        $174 = ($chars$i$sroa$0$1|0)==($159|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
        if ($174) {
         $184 = $159;$_0$0$i10$i$i$i68 = 0;$chars$i$sroa$0$2 = $chars$i$sroa$0$1;
        } else {
         $175 = ((($chars$i$sroa$0$1)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
         $176 = HEAP8[$chars$i$sroa$0$1>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
         $phitmp21$i$i$i66 = $176 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
         $184 = $175;$_0$0$i10$i$i$i68 = $phitmp21$i$i$i66;$chars$i$sroa$0$2 = $175;
        }
        $177 = $171 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
        $178 = $_0$0$i10$i$i$i68&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
        $179 = $178 | $177; //@line 476 "/checkout/src/libcore/str/mod.rs"
        $180 = $166 << 12; //@line 513 "/checkout/src/libcore/str/mod.rs"
        $181 = $179 | $180; //@line 513 "/checkout/src/libcore/str/mod.rs"
        $182 = ($162&255)>(239); //@line 514 "/checkout/src/libcore/str/mod.rs"
        if ($182) {
         $183 = ($184|0)==($159|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
         if ($183) {
          $_0$0$i5$i$i$i73 = 0;$chars$i$sroa$0$3 = $chars$i$sroa$0$2;
         } else {
          $185 = ((($184)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
          $186 = HEAP8[$184>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
          $phitmp22$i$i$i71 = $186 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
          $_0$0$i5$i$i$i73 = $phitmp22$i$i$i71;$chars$i$sroa$0$3 = $185;
         }
         $187 = $166 << 18; //@line 518 "/checkout/src/libcore/str/mod.rs"
         $188 = $187 & 1835008; //@line 518 "/checkout/src/libcore/str/mod.rs"
         $189 = $179 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
         $190 = $_0$0$i5$i$i$i73&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
         $191 = $189 | $188; //@line 476 "/checkout/src/libcore/str/mod.rs"
         $192 = $191 | $190; //@line 518 "/checkout/src/libcore/str/mod.rs"
         $193 = ($192|0)==(1114112); //@line 292 "/checkout/src/libstd/sys_common/backtrace.rs"
         if ($193) {
          $chars$i$sroa$0$11 = $chars$i$sroa$0$3;
          label = 93;
          break;
         } else {
          $194 = $192;$chars$i$sroa$0$5 = $chars$i$sroa$0$3;$i$02430$i = 0;
         }
        } else {
         $194 = $181;$chars$i$sroa$0$5 = $chars$i$sroa$0$2;$i$02430$i = 0;
        }
       } else {
        $194 = $172;$chars$i$sroa$0$5 = $chars$i$sroa$0$1;$i$02430$i = 0;
       }
      }
      while(1) {
       $self$off$i$i = (($194) + -48)|0; //@line 777 "/checkout/src/libstd_unicode/char.rs"
       $195 = ($self$off$i$i>>>0)<(10); //@line 777 "/checkout/src/libstd_unicode/char.rs"
       if (!($195)) {
        $196 = ($194>>>0)>(127); //@line 778 "/checkout/src/libstd_unicode/char.rs"
        if (!($196)) {
         $chars$i$sroa$0$6 = $chars$i$sroa$0$5;$i$0$lcssa$i = $i$02430$i;
         break;
        }
        $197 = (__ZN11std_unicode6tables16general_category1N17h3fc679494b052a65E($194)|0); //@line 778 "/checkout/src/libstd_unicode/char.rs"
        if (!($197)) {
         $chars$i$sroa$0$6 = $chars$i$sroa$0$5;$i$0$lcssa$i = $i$02430$i;
         break;
        }
       }
       $199 = ($i$02430$i*10)|0; //@line 294 "/checkout/src/libstd/sys_common/backtrace.rs"
       $200 = (($199) + ($self$off$i$i))|0; //@line 294 "/checkout/src/libstd/sys_common/backtrace.rs"
       $201 = ($chars$i$sroa$0$5|0)==($159|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
       if ($201) {
        $chars$i$sroa$0$6 = $159;$i$0$lcssa$i = $200;
        break;
       }
       $202 = ((($chars$i$sroa$0$5)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
       $203 = HEAP8[$chars$i$sroa$0$5>>0]|0; //@line 497 "/checkout/src/libcore/str/mod.rs"
       $204 = ($203<<24>>24)>(-1); //@line 498 "/checkout/src/libcore/str/mod.rs"
       if ($204) {
        $205 = $203&255; //@line 499 "/checkout/src/libcore/str/mod.rs"
        $194 = $205;$chars$i$sroa$0$5 = $202;$i$02430$i = $200;
        continue;
       }
       $206 = $203 & 31; //@line 472 "/checkout/src/libcore/str/mod.rs"
       $207 = $206&255; //@line 472 "/checkout/src/libcore/str/mod.rs"
       $208 = ($202|0)==($159|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
       if ($208) {
        $_0$0$i16$i$i$i88 = 0;$chars$i$sroa$0$7 = $159;
       } else {
        $209 = ((($chars$i$sroa$0$5)) + 2|0); //@line 623 "/checkout/src/libcore/ptr.rs"
        $210 = HEAP8[$202>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
        $phitmp$i$i$i86 = $210 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
        $_0$0$i16$i$i$i88 = $phitmp$i$i$i86;$chars$i$sroa$0$7 = $209;
       }
       $211 = $207 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
       $212 = $_0$0$i16$i$i$i88&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
       $213 = $212 | $211; //@line 476 "/checkout/src/libcore/str/mod.rs"
       $214 = ($203&255)>(223); //@line 508 "/checkout/src/libcore/str/mod.rs"
       if (!($214)) {
        $194 = $213;$chars$i$sroa$0$5 = $chars$i$sroa$0$7;$i$02430$i = $200;
        continue;
       }
       $215 = ($chars$i$sroa$0$7|0)==($159|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
       if ($215) {
        $225 = $159;$_0$0$i10$i$i$i93 = 0;$chars$i$sroa$0$8 = $chars$i$sroa$0$7;
       } else {
        $216 = ((($chars$i$sroa$0$7)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
        $217 = HEAP8[$chars$i$sroa$0$7>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
        $phitmp21$i$i$i91 = $217 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
        $225 = $216;$_0$0$i10$i$i$i93 = $phitmp21$i$i$i91;$chars$i$sroa$0$8 = $216;
       }
       $218 = $212 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
       $219 = $_0$0$i10$i$i$i93&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
       $220 = $219 | $218; //@line 476 "/checkout/src/libcore/str/mod.rs"
       $221 = $207 << 12; //@line 513 "/checkout/src/libcore/str/mod.rs"
       $222 = $220 | $221; //@line 513 "/checkout/src/libcore/str/mod.rs"
       $223 = ($203&255)>(239); //@line 514 "/checkout/src/libcore/str/mod.rs"
       if (!($223)) {
        $194 = $222;$chars$i$sroa$0$5 = $chars$i$sroa$0$8;$i$02430$i = $200;
        continue;
       }
       $224 = ($225|0)==($159|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
       if ($224) {
        $_0$0$i5$i$i$i98 = 0;$chars$i$sroa$0$9 = $chars$i$sroa$0$8;
       } else {
        $226 = ((($225)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
        $227 = HEAP8[$225>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
        $phitmp22$i$i$i96 = $227 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
        $_0$0$i5$i$i$i98 = $phitmp22$i$i$i96;$chars$i$sroa$0$9 = $226;
       }
       $228 = $207 << 18; //@line 518 "/checkout/src/libcore/str/mod.rs"
       $229 = $228 & 1835008; //@line 518 "/checkout/src/libcore/str/mod.rs"
       $230 = $220 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
       $231 = $_0$0$i5$i$i$i98&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
       $232 = $230 | $229; //@line 476 "/checkout/src/libcore/str/mod.rs"
       $233 = $232 | $231; //@line 518 "/checkout/src/libcore/str/mod.rs"
       $234 = ($233|0)==(1114112); //@line 292 "/checkout/src/libstd/sys_common/backtrace.rs"
       if ($234) {
        $chars$i$sroa$0$6 = $chars$i$sroa$0$9;$i$0$lcssa$i = $200;
        break;
       } else {
        $194 = $233;$chars$i$sroa$0$5 = $chars$i$sroa$0$9;$i$02430$i = $200;
       }
      }
      $198 = ($i$0$lcssa$i|0)==(0); //@line 299 "/checkout/src/libstd/sys_common/backtrace.rs"
      if ($198) {
       $chars$i$sroa$0$11 = $chars$i$sroa$0$6;
       label = 93;
       break;
      }
      $256 = (($i$0$lcssa$i) + -1)|0; //@line 302 "/checkout/src/libstd/sys_common/backtrace.rs"
      $257 = ($256|0)==(0); //@line 2261 "/checkout/src/libcore/iter/mod.rs"
      L140: do {
       if ($257) {
        $_0$0$i$i$i705$i = 0;$chars$i$sroa$0$18 = $chars$i$sroa$0$6;
       } else {
        $accum$0$i$i$i$i$i = 0;$chars$i$sroa$0$13 = $chars$i$sroa$0$6;$self$i$i$i$sroa$4$0 = $256;
        while(1) {
         $258 = ($chars$i$sroa$0$13|0)==($159|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
         if ($258) {
          $_0$0$i$i$i705$i = $accum$0$i$i$i$i$i;$chars$i$sroa$0$18 = $159;
          break L140;
         }
         $259 = ((($chars$i$sroa$0$13)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
         $260 = HEAP8[$chars$i$sroa$0$13>>0]|0; //@line 497 "/checkout/src/libcore/str/mod.rs"
         $261 = ($260<<24>>24)>(-1); //@line 498 "/checkout/src/libcore/str/mod.rs"
         if ($261) {
          $chars$i$sroa$0$17607 = $259;
         } else {
          $262 = $260&255; //@line 472 "/checkout/src/libcore/str/mod.rs"
          $263 = ($259|0)==($159|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
          if ($263) {
           $_0$0$i16$i$i$i121 = 0;$chars$i$sroa$0$14 = $159;
          } else {
           $264 = ((($chars$i$sroa$0$13)) + 2|0); //@line 623 "/checkout/src/libcore/ptr.rs"
           $265 = HEAP8[$259>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
           $phitmp$i$i$i119 = $265 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
           $_0$0$i16$i$i$i121 = $phitmp$i$i$i119;$chars$i$sroa$0$14 = $264;
          }
          $266 = $_0$0$i16$i$i$i121&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
          $267 = ($260&255)>(223); //@line 508 "/checkout/src/libcore/str/mod.rs"
          if ($267) {
           $268 = ($chars$i$sroa$0$14|0)==($159|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
           if ($268) {
            $276 = $159;$_0$0$i10$i$i$i126 = 0;$chars$i$sroa$0$15 = $chars$i$sroa$0$14;
           } else {
            $269 = ((($chars$i$sroa$0$14)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
            $270 = HEAP8[$chars$i$sroa$0$14>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
            $phitmp21$i$i$i124 = $270 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
            $276 = $269;$_0$0$i10$i$i$i126 = $phitmp21$i$i$i124;$chars$i$sroa$0$15 = $269;
           }
           $271 = $266 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
           $272 = $_0$0$i10$i$i$i126&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
           $273 = $272 | $271; //@line 476 "/checkout/src/libcore/str/mod.rs"
           $274 = ($260&255)>(239); //@line 514 "/checkout/src/libcore/str/mod.rs"
           if ($274) {
            $275 = ($276|0)==($159|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
            if ($275) {
             $_0$0$i5$i$i$i131 = 0;$chars$i$sroa$0$16 = $chars$i$sroa$0$15;
            } else {
             $277 = ((($276)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
             $278 = HEAP8[$276>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
             $phitmp22$i$i$i129 = $278 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
             $_0$0$i5$i$i$i131 = $phitmp22$i$i$i129;$chars$i$sroa$0$16 = $277;
            }
            $279 = $262 << 18; //@line 518 "/checkout/src/libcore/str/mod.rs"
            $280 = $279 & 1835008; //@line 518 "/checkout/src/libcore/str/mod.rs"
            $281 = $273 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
            $282 = $_0$0$i5$i$i$i131&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
            $283 = $281 | $280; //@line 476 "/checkout/src/libcore/str/mod.rs"
            $284 = $283 | $282; //@line 518 "/checkout/src/libcore/str/mod.rs"
            $not$$i$i$i$i$i = ($284|0)==(1114112); //@line 1409 "/checkout/src/libcore/iter/iterator.rs"
            if ($not$$i$i$i$i$i) {
             $_0$0$i$i$i705$i = $accum$0$i$i$i$i$i;$chars$i$sroa$0$18 = $chars$i$sroa$0$16;
             break L140;
            } else {
             $chars$i$sroa$0$17607 = $chars$i$sroa$0$16;
            }
           } else {
            $chars$i$sroa$0$17607 = $chars$i$sroa$0$15;
           }
          } else {
           $chars$i$sroa$0$17607 = $chars$i$sroa$0$14;
          }
         }
         $285 = (($self$i$i$i$sroa$4$0) + -1)|0; //@line 2266 "/checkout/src/libcore/iter/mod.rs"
         $286 = (($accum$0$i$i$i$i$i) + 1)|0; //@line 184 "/checkout/src/libcore/iter/iterator.rs"
         $287 = ($285|0)==(0); //@line 2268 "/checkout/src/libcore/iter/mod.rs"
         if ($287) {
          $_0$0$i$i$i705$i = $286;$chars$i$sroa$0$18 = $chars$i$sroa$0$17607;
          break;
         } else {
          $accum$0$i$i$i$i$i = $286;$chars$i$sroa$0$13 = $chars$i$sroa$0$17607;$self$i$i$i$sroa$4$0 = $285;
         }
        }
       }
      } while(0);
      $288 = ($_0$0$i$i$i705$i|0)==($256|0); //@line 302 "/checkout/src/libstd/sys_common/backtrace.rs"
      if ($288) {
       $chars$i$sroa$0$0 = $chars$i$sroa$0$18;
      } else {
       label = 118;
       break L98;
      }
     }
     if ((label|0) == 93) {
      $235 = ($chars$i$sroa$0$11|0)==($159|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
      if (!($235)) {
       $236 = ((($chars$i$sroa$0$11)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
       $237 = HEAP8[$chars$i$sroa$0$11>>0]|0; //@line 497 "/checkout/src/libcore/str/mod.rs"
       $238 = ($237<<24>>24)>(-1); //@line 498 "/checkout/src/libcore/str/mod.rs"
       if ($238) {
        label = 118;
        break;
       }
       $239 = $237&255; //@line 472 "/checkout/src/libcore/str/mod.rs"
       $240 = ($236|0)==($159|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
       if ($240) {
        $246 = $159;$_0$0$i16$i$i1414$i = 0;
       } else {
        $241 = ((($chars$i$sroa$0$11)) + 2|0); //@line 623 "/checkout/src/libcore/ptr.rs"
        $242 = HEAP8[$236>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
        $phitmp$i$i1412$i = $242 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
        $246 = $241;$_0$0$i16$i$i1414$i = $phitmp$i$i1412$i;
       }
       $243 = $_0$0$i16$i$i1414$i&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
       $244 = ($237&255)>(223); //@line 508 "/checkout/src/libcore/str/mod.rs"
       if (!($244)) {
        label = 118;
        break;
       }
       $245 = ($246|0)==($159|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
       if ($245) {
        $254 = $159;$_0$0$i10$i$i1419$i = 0;
       } else {
        $247 = ((($246)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
        $248 = HEAP8[$246>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
        $phitmp21$i$i1417$i = $248 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
        $254 = $247;$_0$0$i10$i$i1419$i = $phitmp21$i$i1417$i;
       }
       $249 = $243 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
       $250 = $_0$0$i10$i$i1419$i&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
       $251 = $250 | $249; //@line 476 "/checkout/src/libcore/str/mod.rs"
       $252 = ($237&255)>(239); //@line 514 "/checkout/src/libcore/str/mod.rs"
       if (!($252)) {
        label = 118;
        break;
       }
       $253 = ($254|0)==($159|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
       if ($253) {
        $_0$0$i5$i$i1424$i = 0;
       } else {
        $255 = HEAP8[$254>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
        $phitmp22$i$i1422$i = $255 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
        $_0$0$i5$i$i1424$i = $phitmp22$i$i1422$i;
       }
       $289 = $239 << 18; //@line 518 "/checkout/src/libcore/str/mod.rs"
       $290 = $289 & 1835008; //@line 518 "/checkout/src/libcore/str/mod.rs"
       $291 = $251 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
       $292 = $_0$0$i5$i$i1424$i&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
       $293 = $291 | $290; //@line 476 "/checkout/src/libcore/str/mod.rs"
       $294 = $293 | $292; //@line 518 "/checkout/src/libcore/str/mod.rs"
       $295 = ($294|0)==(1114112); //@line 215 "/checkout/src/libcore/option.rs"
       if (!($295)) {
        label = 118;
        break;
       }
      }
     }
     if ($7) {
      __ZN4core3str7pattern11StrSearcher3new17had32f170a3a66344E($split$i,$158,$inner$sroa$14$1$i,22799,3); //@line 548 "/checkout/src/libcore/str/pattern.rs"
      $_4$sroa$4$0$$sroa_idx$i$i$i = ((($split$i)) + 64|0); //@line 2290 "/checkout/src/libcore/str/mod.rs"
      HEAP32[$_4$sroa$4$0$$sroa_idx$i$i$i>>2] = 0; //@line 2290 "/checkout/src/libcore/str/mod.rs"
      $_4$sroa$5$0$$sroa_idx$i$i$i = ((($split$i)) + 68|0); //@line 2290 "/checkout/src/libcore/str/mod.rs"
      HEAP32[$_4$sroa$5$0$$sroa_idx$i$i$i>>2] = $inner$sroa$14$1$i; //@line 2290 "/checkout/src/libcore/str/mod.rs"
      $_4$sroa$6$0$$sroa_idx$i$i$i = ((($split$i)) + 72|0); //@line 2290 "/checkout/src/libcore/str/mod.rs"
      HEAP8[$_4$sroa$6$0$$sroa_idx$i$i$i>>0] = 1; //@line 2290 "/checkout/src/libcore/str/mod.rs"
      $_4$sroa$7$0$$sroa_idx$i$i$i = ((($split$i)) + 73|0); //@line 2290 "/checkout/src/libcore/str/mod.rs"
      HEAP8[$_4$sroa$7$0$$sroa_idx$i$i$i>>0] = 0; //@line 2290 "/checkout/src/libcore/str/mod.rs"
      $_4$sroa$9$0$$sroa_idx$i$i$i = ((($split$i)) + 80|0); //@line 2290 "/checkout/src/libcore/str/mod.rs"
      HEAP32[$_4$sroa$9$0$$sroa_idx$i$i$i>>2] = 1; //@line 1179 "/checkout/src/libcore/str/mod.rs"
      __ZN56__LT_core__str__SplitInternal_LT__u27_a_C__u20_P_GT__GT_9next_back17h46532ac3f86e6e8fE($_138$i,$split$i); //@line 1179 "/checkout/src/libcore/str/mod.rs"
      $308 = HEAP32[$_4$sroa$9$0$$sroa_idx$i$i$i>>2]|0; //@line 1177 "/checkout/src/libcore/str/mod.rs"
      L177: do {
       switch ($308|0) {
       case 0:  {
        HEAP32[$_140$i>>2] = 0; //@line 1177 "/checkout/src/libcore/str/mod.rs"
        break;
       }
       case 1:  {
        HEAP32[$_4$sroa$9$0$$sroa_idx$i$i$i>>2] = 0; //@line 1178 "/checkout/src/libcore/str/mod.rs"
        $309 = HEAP8[$_4$sroa$7$0$$sroa_idx$i$i$i>>0]|0; //@line 1051 "/checkout/src/libcore/str/mod.rs"
        $310 = ($309<<24>>24)==(0); //@line 1051 "/checkout/src/libcore/str/mod.rs"
        do {
         if ($310) {
          $311 = HEAP8[$_4$sroa$6$0$$sroa_idx$i$i$i>>0]|0; //@line 1051 "/checkout/src/libcore/str/mod.rs"
          $312 = ($311<<24>>24)==(0); //@line 1051 "/checkout/src/libcore/str/mod.rs"
          if ($312) {
           $313 = HEAP32[$_4$sroa$5$0$$sroa_idx$i$i$i>>2]|0; //@line 1051 "/checkout/src/libcore/str/mod.rs"
           $314 = HEAP32[$_4$sroa$4$0$$sroa_idx$i$i$i>>2]|0; //@line 1051 "/checkout/src/libcore/str/mod.rs"
           $not$$i$i$i1450$i = ($313|0)==($314|0); //@line 1051 "/checkout/src/libcore/str/mod.rs"
           if ($not$$i$i$i1450$i) {
            break;
           } else {
            $318 = $314;$320 = $313;
           }
          } else {
           $$pre$i$i$i1447$i = HEAP32[$_4$sroa$4$0$$sroa_idx$i$i$i>>2]|0;
           $$pre2$i$i$i1448$i = HEAP32[$_4$sroa$5$0$$sroa_idx$i$i$i>>2]|0;
           $318 = $$pre$i$i$i1447$i;$320 = $$pre2$i$i$i1448$i;
          }
          HEAP8[$_4$sroa$7$0$$sroa_idx$i$i$i>>0] = 1; //@line 1052 "/checkout/src/libcore/str/mod.rs"
          $315 = ((($split$i)) + 48|0); //@line 623 "/checkout/src/libcore/str/pattern.rs"
          $316 = HEAP32[$315>>2]|0; //@line 623 "/checkout/src/libcore/str/pattern.rs"
          $317 = (($316) + ($318)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
          $319 = (($320) - ($318))|0; //@line 1880 "/checkout/src/libcore/str/mod.rs"
          HEAP32[$_140$i>>2] = $317; //@line 1055 "/checkout/src/libcore/str/mod.rs"
          $321 = ((($_140$i)) + 4|0); //@line 1055 "/checkout/src/libcore/str/mod.rs"
          HEAP32[$321>>2] = $319; //@line 1055 "/checkout/src/libcore/str/mod.rs"
          break L177;
         }
        } while(0);
        HEAP32[$_140$i>>2] = 0; //@line 1058 "/checkout/src/libcore/str/mod.rs"
        break;
       }
       default: {
        $322 = (($308) + -1)|0; //@line 1179 "/checkout/src/libcore/str/mod.rs"
        HEAP32[$_4$sroa$9$0$$sroa_idx$i$i$i>>2] = $322; //@line 1179 "/checkout/src/libcore/str/mod.rs"
        __ZN56__LT_core__str__SplitInternal_LT__u27_a_C__u20_P_GT__GT_9next_back17h46532ac3f86e6e8fE($_140$i,$split$i); //@line 1179 "/checkout/src/libcore/str/mod.rs"
       }
       }
      } while(0);
      $_137$sroa$0$0$copyload$i = HEAP32[$_138$i>>2]|0; //@line 316 "/checkout/src/libstd/sys_common/backtrace.rs"
      $_137$sroa$5$0$$sroa_idx180$i = ((($_138$i)) + 4|0); //@line 316 "/checkout/src/libstd/sys_common/backtrace.rs"
      $_137$sroa$5$0$copyload$i = HEAP32[$_137$sroa$5$0$$sroa_idx180$i>>2]|0; //@line 316 "/checkout/src/libstd/sys_common/backtrace.rs"
      $323 = $_140$i; //@line 316 "/checkout/src/libstd/sys_common/backtrace.rs"
      $324 = $323; //@line 316 "/checkout/src/libstd/sys_common/backtrace.rs"
      $325 = HEAP32[$324>>2]|0; //@line 316 "/checkout/src/libstd/sys_common/backtrace.rs"
      $326 = (($323) + 4)|0; //@line 316 "/checkout/src/libstd/sys_common/backtrace.rs"
      $327 = $326; //@line 316 "/checkout/src/libstd/sys_common/backtrace.rs"
      $328 = HEAP32[$327>>2]|0; //@line 316 "/checkout/src/libstd/sys_common/backtrace.rs"
      $not$677$i = ($_137$sroa$0$0$copyload$i|0)==(0|0); //@line 317 "/checkout/src/libstd/sys_common/backtrace.rs"
      L189: do {
       if ($not$677$i) {
        $inner$sroa$0$2$i = $158;$inner$sroa$14$2$i = $inner$sroa$14$1$i;
       } else {
        $332 = ($_137$sroa$5$0$copyload$i|0)==(16); //@line 318 "/checkout/src/libstd/sys_common/backtrace.rs"
        if ($332) {
         $333 = ((($_137$sroa$0$0$copyload$i)) + 16|0); //@line 623 "/checkout/src/libcore/ptr.rs"
         $_151$sroa$0$0$i = $_137$sroa$0$0$copyload$i;
         while(1) {
          $334 = ($_151$sroa$0$0$i|0)==($333|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
          $335 = ((($_151$sroa$0$0$i)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
          $_151$sroa$0$0$$i = $334 ? $_151$sroa$0$0$i : $335; //@line 1138 "/checkout/src/libcore/slice/mod.rs"
          $336 = ($_151$sroa$0$0$i|0)==(0|0); //@line 497 "/checkout/src/libcore/str/mod.rs"
          $337 = $334 | $336; //@line 497 "/checkout/src/libcore/str/mod.rs"
          if ($337) {
           break;
          }
          $338 = HEAP8[$_151$sroa$0$0$i>>0]|0; //@line 497 "/checkout/src/libcore/str/mod.rs"
          $339 = ($338<<24>>24)>(-1); //@line 498 "/checkout/src/libcore/str/mod.rs"
          if ($339) {
           $340 = $338&255; //@line 499 "/checkout/src/libcore/str/mod.rs"
           $368 = $340;$_151$sroa$0$61611$i = $_151$sroa$0$0$$i;
          } else {
           $341 = $338 & 31; //@line 472 "/checkout/src/libcore/str/mod.rs"
           $342 = $341&255; //@line 472 "/checkout/src/libcore/str/mod.rs"
           $343 = ($_151$sroa$0$0$$i|0)==($333|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
           if ($343) {
            $_0$0$i16$i$i1487$i = 0;$_151$sroa$0$2$i = $333;
           } else {
            $344 = ((($_151$sroa$0$0$$i)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
            $345 = HEAP8[$_151$sroa$0$0$$i>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
            $phitmp$i$i1485$i = $345 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
            $_0$0$i16$i$i1487$i = $phitmp$i$i1485$i;$_151$sroa$0$2$i = $344;
           }
           $346 = $342 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
           $347 = $_0$0$i16$i$i1487$i&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
           $348 = $347 | $346; //@line 476 "/checkout/src/libcore/str/mod.rs"
           $349 = ($338&255)>(223); //@line 508 "/checkout/src/libcore/str/mod.rs"
           if ($349) {
            $350 = ($_151$sroa$0$2$i|0)==($333|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
            if ($350) {
             $_0$0$i10$i$i1492$i = 0;$_151$sroa$0$3$i = $333;
            } else {
             $351 = ((($_151$sroa$0$2$i)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
             $352 = HEAP8[$_151$sroa$0$2$i>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
             $phitmp21$i$i1490$i = $352 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
             $_0$0$i10$i$i1492$i = $phitmp21$i$i1490$i;$_151$sroa$0$3$i = $351;
            }
            $353 = $347 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
            $354 = $_0$0$i10$i$i1492$i&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
            $355 = $354 | $353; //@line 476 "/checkout/src/libcore/str/mod.rs"
            $356 = $342 << 12; //@line 513 "/checkout/src/libcore/str/mod.rs"
            $357 = $355 | $356; //@line 513 "/checkout/src/libcore/str/mod.rs"
            $358 = ($338&255)>(239); //@line 514 "/checkout/src/libcore/str/mod.rs"
            if ($358) {
             $359 = ($_151$sroa$0$3$i|0)==($333|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
             if ($359) {
              $_0$0$i5$i$i1497$i = 0;$_151$sroa$0$4$i = $333;
             } else {
              $360 = ((($_151$sroa$0$3$i)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
              $361 = HEAP8[$_151$sroa$0$3$i>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
              $phitmp22$i$i1495$i = $361 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
              $_0$0$i5$i$i1497$i = $phitmp22$i$i1495$i;$_151$sroa$0$4$i = $360;
             }
             $362 = $342 << 18; //@line 518 "/checkout/src/libcore/str/mod.rs"
             $363 = $362 & 1835008; //@line 518 "/checkout/src/libcore/str/mod.rs"
             $364 = $355 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
             $365 = $_0$0$i5$i$i1497$i&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
             $366 = $364 | $363; //@line 476 "/checkout/src/libcore/str/mod.rs"
             $367 = $366 | $365; //@line 518 "/checkout/src/libcore/str/mod.rs"
             $not$$i$i715$i = ($367|0)==(1114112); //@line 1409 "/checkout/src/libcore/iter/iterator.rs"
             if ($not$$i$i715$i) {
              break;
             } else {
              $368 = $367;$_151$sroa$0$61611$i = $_151$sroa$0$4$i;
             }
            } else {
             $368 = $357;$_151$sroa$0$61611$i = $_151$sroa$0$3$i;
            }
           } else {
            $368 = $348;$_151$sroa$0$61611$i = $_151$sroa$0$2$i;
           }
          }
          $self$off$i$i$i$i$i$i$i$i = (($368) + -48)|0; //@line 407 "/checkout/src/libcore/char.rs"
          $369 = ($self$off$i$i$i$i$i$i$i$i>>>0)<(10); //@line 407 "/checkout/src/libcore/char.rs"
          if ($369) {
           $$sink$i$i$i$i$i$i$i$i = -48;
          } else {
           $self$off1$i$i$i$i$i$i$i$i = (($368) + -97)|0; //@line 408 "/checkout/src/libcore/char.rs"
           $370 = ($self$off1$i$i$i$i$i$i$i$i>>>0)<(26); //@line 408 "/checkout/src/libcore/char.rs"
           if ($370) {
            $$sink$i$i$i$i$i$i$i$i = -87;
           } else {
            $self$off2$i$i$i$i$i$i$i$i = (($368) + -65)|0; //@line 409 "/checkout/src/libcore/char.rs"
            $371 = ($self$off2$i$i$i$i$i$i$i$i>>>0)<(26); //@line 409 "/checkout/src/libcore/char.rs"
            if ($371) {
             $$sink$i$i$i$i$i$i$i$i = -55;
            } else {
             $inner$sroa$0$2$i = $158;$inner$sroa$14$2$i = $inner$sroa$14$1$i;
             break L189;
            }
           }
          }
          $372 = (($$sink$i$i$i$i$i$i$i$i) + ($368))|0;
          $not$$i$i$i$i = ($372>>>0)>(15); //@line 1530 "/checkout/src/libcore/iter/iterator.rs"
          if ($not$$i$i$i$i) {
           $inner$sroa$0$2$i = $158;$inner$sroa$14$2$i = $inner$sroa$14$1$i;
           break L189;
          } else {
           $_151$sroa$0$0$i = $_151$sroa$0$61611$i;
          }
         }
         $373 = ($325|0)==(0); //@line 357 "/checkout/src/libcore/option.rs"
         $$cast$i$i = $325; //@line 357 "/checkout/src/libcore/option.rs"
         $def$0$sink$i$i = $373 ? 39452 : $$cast$i$i; //@line 357 "/checkout/src/libcore/option.rs"
         $def$1$sink$i$i = $373 ? 0 : $328; //@line 357 "/checkout/src/libcore/option.rs"
         $inner$sroa$0$2$i = $def$0$sink$i$i;$inner$sroa$14$2$i = $def$1$sink$i$i;
        } else {
         $inner$sroa$0$2$i = $158;$inner$sroa$14$2$i = $inner$sroa$14$1$i;
        }
       }
      } while(0);
      $inner$sroa$0$5$ph$i = $inner$sroa$0$2$i;$inner$sroa$14$5$ph$i = $inner$sroa$14$2$i;
     } else {
      $inner$sroa$0$5$ph$i = $158;$inner$sroa$14$5$ph$i = $inner$sroa$14$1$i;
     }
     $329 = ($inner$sroa$14$5$ph$i|0)==(0); //@line 2508 "/checkout/src/libcore/str/mod.rs"
     if ($329) {
      label = 452;
     } else {
      $330 = ((($_192$i)) + 4|0);
      $331 = ((($w$1)) + 20|0);
      $first$0$off02427$i = 1;$inner$sroa$0$52429$i = $inner$sroa$0$5$ph$i;$inner$sroa$14$52428$i = $inner$sroa$14$5$ph$i;
      L218: while(1) {
       if (!($first$0$off02427$i)) {
        $374 = HEAP32[$331>>2]|0; //@line 331 "/checkout/src/libstd/sys_common/backtrace.rs"
        FUNCTION_TABLE_viiii[$374 & 511]($_167$i,$w$0,8708,2); //@line 331 "/checkout/src/libstd/sys_common/backtrace.rs"
        $375 = $_167$i; //@line 1172 "/checkout/src/libcore/result.rs"
        $376 = $375; //@line 1172 "/checkout/src/libcore/result.rs"
        $377 = HEAP32[$376>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
        $378 = (($375) + 4)|0; //@line 1172 "/checkout/src/libcore/result.rs"
        $379 = $378; //@line 1172 "/checkout/src/libcore/result.rs"
        $380 = HEAP32[$379>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
        $381 = $377&255; //@line 1172 "/checkout/src/libcore/result.rs"
        $382 = ($381<<24>>24)==(3); //@line 331 "/checkout/src/libstd/sys_common/backtrace.rs"
        $383 = (_bitshift64Lshr(($377|0),($380|0),8)|0); //@line 331 "/checkout/src/libstd/sys_common/backtrace.rs"
        $384 = tempRet0; //@line 331 "/checkout/src/libstd/sys_common/backtrace.rs"
        if (!($382)) {
         $983 = $384;$984 = $383;$_82$sroa$0$0$ph = $381;
         break L98;
        }
       }
       $385 = (($inner$sroa$0$52429$i) + ($inner$sroa$14$52428$i)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
       $386 = ((($inner$sroa$0$52429$i)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
       $$$i1199 = $386;$$sink$i1198 = $inner$sroa$14$52428$i;$388 = $inner$sroa$0$52429$i;$394 = $385;
       while(1) {
        $387 = HEAP8[$388>>0]|0; //@line 497 "/checkout/src/libcore/str/mod.rs"
        $389 = ($387<<24>>24)>(-1); //@line 498 "/checkout/src/libcore/str/mod.rs"
        if ($389) {
         $390 = $387&255; //@line 499 "/checkout/src/libcore/str/mod.rs"
         $421 = $390;
        } else {
         $391 = $387 & 31; //@line 472 "/checkout/src/libcore/str/mod.rs"
         $392 = $391&255; //@line 472 "/checkout/src/libcore/str/mod.rs"
         $393 = ($$$i1199|0)==($394|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
         if ($393) {
          $402 = $$$i1199;$_0$0$i16$i$i1536$i = 0;
         } else {
          $395 = ((($$$i1199)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
          $396 = HEAP8[$$$i1199>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
          $phitmp$i$i1534$i = $396 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
          $402 = $395;$_0$0$i16$i$i1536$i = $phitmp$i$i1534$i;
         }
         $397 = $392 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
         $398 = $_0$0$i16$i$i1536$i&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
         $399 = $398 | $397; //@line 476 "/checkout/src/libcore/str/mod.rs"
         $400 = ($387&255)>(223); //@line 508 "/checkout/src/libcore/str/mod.rs"
         if ($400) {
          $401 = ($402|0)==($394|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
          if ($401) {
           $412 = $394;$_0$0$i10$i$i1541$i = 0;
          } else {
           $403 = ((($402)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
           $404 = HEAP8[$402>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
           $phitmp21$i$i1539$i = $404 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
           $412 = $403;$_0$0$i10$i$i1541$i = $phitmp21$i$i1539$i;
          }
          $405 = $398 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
          $406 = $_0$0$i10$i$i1541$i&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
          $407 = $406 | $405; //@line 476 "/checkout/src/libcore/str/mod.rs"
          $408 = $392 << 12; //@line 513 "/checkout/src/libcore/str/mod.rs"
          $409 = $407 | $408; //@line 513 "/checkout/src/libcore/str/mod.rs"
          $410 = ($387&255)>(239); //@line 514 "/checkout/src/libcore/str/mod.rs"
          if ($410) {
           $411 = ($412|0)==($394|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
           if ($411) {
            $_0$0$i5$i$i1546$i = 0;
           } else {
            $413 = HEAP8[$412>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
            $phitmp22$i$i1544$i = $413 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
            $_0$0$i5$i$i1546$i = $phitmp22$i$i1544$i;
           }
           $414 = $392 << 18; //@line 518 "/checkout/src/libcore/str/mod.rs"
           $415 = $414 & 1835008; //@line 518 "/checkout/src/libcore/str/mod.rs"
           $416 = $407 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
           $417 = $_0$0$i5$i$i1546$i&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
           $418 = $416 | $415; //@line 476 "/checkout/src/libcore/str/mod.rs"
           $419 = $418 | $417; //@line 518 "/checkout/src/libcore/str/mod.rs"
           $420 = ($419|0)==(1114112); //@line 334 "/checkout/src/libcore/option.rs"
           if ($420) {
            label = 166;
            break L218;
           } else {
            $421 = $419;
           }
          } else {
           $421 = $409;
          }
         } else {
          $421 = $399;
         }
        }
        $self$off$i727$i = (($421) + -48)|0; //@line 777 "/checkout/src/libstd_unicode/char.rs"
        $422 = ($self$off$i727$i>>>0)<(10); //@line 777 "/checkout/src/libstd_unicode/char.rs"
        if (!($422)) {
         $423 = ($421>>>0)>(127); //@line 778 "/checkout/src/libstd_unicode/char.rs"
         if (!($423)) {
          break;
         }
         $424 = (__ZN11std_unicode6tables16general_category1N17h3fc679494b052a65E($421)|0); //@line 778 "/checkout/src/libstd_unicode/char.rs"
         if (!($424)) {
          break;
         }
        }
        switch ($$sink$i1198|0) {
        case 0:  {
         $$sink$lcssa2460$i = 0;
         label = 188;
         break L218;
         break;
        }
        case 1:  {
         break;
        }
        default: {
         $450 = HEAP8[$$$i1199>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
         $451 = ($450<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
         if (!($451)) {
          $$sink$lcssa2460$i = $$sink$i1198;
          label = 188;
          break L218;
         }
        }
        }
        $452 = (($$sink$i1198) + -1)|0; //@line 1975 "/checkout/src/libcore/str/mod.rs"
        $453 = (($$$i1199) + ($452)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
        $454 = ($452|0)==(0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
        $455 = ((($$$i1199)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
        if ($454) {
         label = 166;
         break L218;
        } else {
         $388$phi = $$$i1199;$$$i1199 = $455;$$sink$i1198 = $452;$394 = $453;$388 = $388$phi;
        }
       }
       $425 = (($inner$sroa$14$52428$i) - ($$sink$i1198))|0; //@line 339 "/checkout/src/libstd/sys_common/backtrace.rs"
       $426 = ($425|0)==(0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
       if (!($426)) {
        $427 = ($inner$sroa$14$52428$i>>>0)>($425>>>0); //@line 792 "/checkout/src/libcore/slice/mod.rs"
        if (!($427)) {
         label = 173;
         break;
        }
        $428 = (($inner$sroa$0$52429$i) + ($425)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
        $429 = HEAP8[$428>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
        $430 = ($429<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
        if (!($430)) {
         label = 173;
         break;
        }
       }
       __ZN4core3num54__LT_impl_u20_core__str__FromStr_u20_for_u20_usize_GT_8from_str17h284a887a45c89f3fE($_192$i,$inner$sroa$0$52429$i,$425); //@line 2511 "/checkout/src/libcore/str/mod.rs"
       $431 = HEAP8[$_192$i>>0]|0; //@line 781 "/checkout/src/libcore/result.rs"
       $switch$i$i100 = ($431<<24>>24)==(1); //@line 781 "/checkout/src/libcore/result.rs"
       if ($switch$i$i100) {
        label = 175;
        break;
       }
       $434 = HEAP32[$330>>2]|0; //@line 781 "/checkout/src/libcore/result.rs"
       $435 = ($434|0)==(0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
       $436 = ($$sink$i1198|0)==($434|0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
       $or$cond$i$i$i$i741$i = $435 | $436; //@line 2438 "/checkout/src/libcore/str/mod.rs"
       if ($or$cond$i$i$i$i741$i) {
        $$pre$i$i$i742$i = (($388) + ($434)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
        $$in$i = $$pre$i$i$i742$i;
       } else {
        $437 = ($$sink$i1198>>>0)>($434>>>0); //@line 792 "/checkout/src/libcore/slice/mod.rs"
        if (!($437)) {
         label = 180;
         break;
        }
        $438 = (($388) + ($434)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
        $439 = HEAP8[$438>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
        $440 = ($439<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
        if ($440) {
         $$in$i = $438;
        } else {
         label = 180;
         break;
        }
       }
       $441 = (($$sink$i1198) - ($434))|0; //@line 1975 "/checkout/src/libcore/str/mod.rs"
       $442 = ($434|0)==(2); //@line 2438 "/checkout/src/libcore/str/mod.rs"
       if ($442) {
        label = 184;
       } else {
        $443 = ($434>>>0)>(2); //@line 792 "/checkout/src/libcore/slice/mod.rs"
        if ($443) {
         $444 = ((($388)) + 2|0); //@line 623 "/checkout/src/libcore/ptr.rs"
         $445 = HEAP8[$444>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
         $446 = ($445<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
         if ($446) {
          label = 184;
         } else {
          label = 193;
         }
        } else {
         $rest2$sroa$0$0$ph$i = $388;$rest2$sroa$80$0$ph$i = $434;
         label = 194;
        }
       }
       do {
        if ((label|0) == 184) {
         label = 0;
         $447 = ($388|0)==(22802|0); //@line 2492 "/checkout/src/libcore/slice/mod.rs"
         if (!($447)) {
          $448 = (_memcmp(22802,$388,2)|0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
          $449 = ($448|0)==(0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
          if (!($449)) {
           label = 193;
           break;
          }
         }
         $456 = HEAP8[$$$i1199>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
         $457 = ($456<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
         if (!($457)) {
          label = 191;
          break L218;
         }
         $458 = (($434) + -1)|0; //@line 1975 "/checkout/src/libcore/str/mod.rs"
         $rest2$sroa$0$0$ph$i = $$$i1199;$rest2$sroa$80$0$ph$i = $458;
         label = 194;
        }
       } while(0);
       if ((label|0) == 193) {
        label = 0;
        $rest2$sroa$0$02423$i = $388;$rest2$sroa$80$02424$i = $434;
        label = 195;
       }
       else if ((label|0) == 194) {
        label = 0;
        $459 = ($rest2$sroa$80$0$ph$i|0)==(0); //@line 2508 "/checkout/src/libcore/str/mod.rs"
        if (!($459)) {
         $rest2$sroa$0$02423$i = $rest2$sroa$0$0$ph$i;$rest2$sroa$80$02424$i = $rest2$sroa$80$0$ph$i;
         label = 195;
        }
       }
       L270: do {
        if ((label|0) == 195) {
         L271: while(1) {
          label = 0;
          $460 = ($rest2$sroa$80$02424$i|0)==(1); //@line 2438 "/checkout/src/libcore/str/mod.rs"
          if ($460) {
           label = 197;
          } else {
           $461 = ((($rest2$sroa$0$02423$i)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
           $462 = HEAP8[$461>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
           $463 = ($462<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
           if ($463) {
            label = 197;
           } else {
            label = 232;
           }
          }
          L275: do {
           if ((label|0) == 197) {
            label = 0;
            $464 = ($rest2$sroa$0$02423$i|0)==(11580|0); //@line 2492 "/checkout/src/libcore/slice/mod.rs"
            do {
             if (!($464)) {
              $rhsc661 = HEAP8[$rest2$sroa$0$02423$i>>0]|0; //@line 2497 "/checkout/src/libcore/slice/mod.rs"
              $465 = ($rhsc661<<24>>24)==(46); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
              if ($465) {
               break;
              }
              if (!($460)) {
               $$phi$trans$insert1732 = ((($rest2$sroa$0$02423$i)) + 1|0);
               $$pre1733 = HEAP8[$$phi$trans$insert1732>>0]|0;
               $501 = ($$pre1733<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
               if (!($501)) {
                label = 232;
                break L275;
               }
              }
              $502 = ($rest2$sroa$0$02423$i|0)==(22804|0); //@line 2492 "/checkout/src/libcore/slice/mod.rs"
              if (!($502)) {
               $rhsc641 = HEAP8[$rest2$sroa$0$02423$i>>0]|0; //@line 2497 "/checkout/src/libcore/slice/mod.rs"
               $503 = ($rhsc641<<24>>24)==(36); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
               if (!($503)) {
                label = 232;
                break L275;
               }
              }
              $532 = ($rest2$sroa$80$02424$i|0)==(4); //@line 2438 "/checkout/src/libcore/str/mod.rs"
              do {
               if ($532) {
                label = 230;
               } else {
                $533 = ($rest2$sroa$80$02424$i>>>0)>(4); //@line 792 "/checkout/src/libcore/slice/mod.rs"
                if ($533) {
                 $534 = ((($rest2$sroa$0$02423$i)) + 4|0); //@line 623 "/checkout/src/libcore/ptr.rs"
                 $535 = HEAP8[$534>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
                 $536 = ($535<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
                 if ($536) {
                  label = 230;
                  break;
                 } else {
                  label = 303;
                  break;
                 }
                } else {
                 $707 = ($rest2$sroa$80$02424$i|0)==(3); //@line 2438 "/checkout/src/libcore/str/mod.rs"
                 if ($707) {
                  $997 = 1;
                  label = 304;
                  break;
                 } else {
                  break L271;
                 }
                }
               }
              } while(0);
              L291: do {
               if ((label|0) == 230) {
                label = 0;
                $537 = ($rest2$sroa$0$02423$i|0)==(22805|0); //@line 2492 "/checkout/src/libcore/slice/mod.rs"
                do {
                 if (!($537)) {
                  $538 = (_memcmp(22805,$rest2$sroa$0$02423$i,4)|0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
                  $539 = ($538|0)==(0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
                  if ($539) {
                   break;
                  }
                  if (!($532)) {
                   $$phi$trans$insert1734 = ((($rest2$sroa$0$02423$i)) + 4|0);
                   $$pre1735 = HEAP8[$$phi$trans$insert1734>>0]|0;
                   $599 = ($$pre1735<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
                   if (!($599)) {
                    label = 303;
                    break L291;
                   }
                  }
                  $600 = ($rest2$sroa$0$02423$i|0)==(22809|0); //@line 2492 "/checkout/src/libcore/slice/mod.rs"
                  do {
                   if (!($600)) {
                    $601 = (_memcmp(22809,$rest2$sroa$0$02423$i,4)|0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
                    $602 = ($601|0)==(0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
                    if ($602) {
                     break;
                    }
                    if (!($532)) {
                     $$phi$trans$insert1736 = ((($rest2$sroa$0$02423$i)) + 4|0);
                     $$pre1737 = HEAP8[$$phi$trans$insert1736>>0]|0;
                     $617 = ($$pre1737<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
                     if (!($617)) {
                      label = 303;
                      break L291;
                     }
                    }
                    $618 = ($rest2$sroa$0$02423$i|0)==(22813|0); //@line 2492 "/checkout/src/libcore/slice/mod.rs"
                    do {
                     if (!($618)) {
                      $619 = (_memcmp(22813,$rest2$sroa$0$02423$i,4)|0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
                      $620 = ($619|0)==(0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
                      if ($620) {
                       break;
                      }
                      if (!($532)) {
                       $$phi$trans$insert1738 = ((($rest2$sroa$0$02423$i)) + 4|0);
                       $$pre1739 = HEAP8[$$phi$trans$insert1738>>0]|0;
                       $635 = ($$pre1739<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
                       if (!($635)) {
                        label = 303;
                        break L291;
                       }
                      }
                      $636 = ($rest2$sroa$0$02423$i|0)==(22817|0); //@line 2492 "/checkout/src/libcore/slice/mod.rs"
                      do {
                       if (!($636)) {
                        $637 = (_memcmp(22817,$rest2$sroa$0$02423$i,4)|0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
                        $638 = ($637|0)==(0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
                        if ($638) {
                         break;
                        }
                        if (!($532)) {
                         $$phi$trans$insert1740 = ((($rest2$sroa$0$02423$i)) + 4|0);
                         $$pre1741 = HEAP8[$$phi$trans$insert1740>>0]|0;
                         $653 = ($$pre1741<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
                         if (!($653)) {
                          label = 303;
                          break L291;
                         }
                        }
                        $654 = ($rest2$sroa$0$02423$i|0)==(22821|0); //@line 2492 "/checkout/src/libcore/slice/mod.rs"
                        do {
                         if (!($654)) {
                          $655 = (_memcmp(22821,$rest2$sroa$0$02423$i,4)|0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
                          $656 = ($655|0)==(0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
                          if ($656) {
                           break;
                          }
                          if (!($532)) {
                           $$phi$trans$insert1742 = ((($rest2$sroa$0$02423$i)) + 4|0);
                           $$pre1743 = HEAP8[$$phi$trans$insert1742>>0]|0;
                           $671 = ($$pre1743<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
                           if (!($671)) {
                            label = 303;
                            break L291;
                           }
                          }
                          $672 = ($rest2$sroa$0$02423$i|0)==(22825|0); //@line 2492 "/checkout/src/libcore/slice/mod.rs"
                          do {
                           if (!($672)) {
                            $673 = (_memcmp(22825,$rest2$sroa$0$02423$i,4)|0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
                            $674 = ($673|0)==(0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
                            if ($674) {
                             break;
                            }
                            if (!($532)) {
                             $$phi$trans$insert1744 = ((($rest2$sroa$0$02423$i)) + 4|0);
                             $$pre1745 = HEAP8[$$phi$trans$insert1744>>0]|0;
                             $689 = ($$pre1745<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
                             if (!($689)) {
                              label = 303;
                              break L291;
                             }
                            }
                            $690 = ($rest2$sroa$0$02423$i|0)==(22829|0); //@line 2492 "/checkout/src/libcore/slice/mod.rs"
                            if (!($690)) {
                             $691 = (_memcmp(22829,$rest2$sroa$0$02423$i,4)|0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
                             $692 = ($691|0)==(0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
                             if (!($692)) {
                              label = 303;
                              break L291;
                             }
                            }
                            $696 = HEAP32[$331>>2]|0; //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                            FUNCTION_TABLE_viiii[$696 & 511]($_404$i,$w$0,8760,1); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                            $697 = $_404$i; //@line 1172 "/checkout/src/libcore/result.rs"
                            $698 = $697; //@line 1172 "/checkout/src/libcore/result.rs"
                            $699 = HEAP32[$698>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
                            $700 = (($697) + 4)|0; //@line 1172 "/checkout/src/libcore/result.rs"
                            $701 = $700; //@line 1172 "/checkout/src/libcore/result.rs"
                            $702 = HEAP32[$701>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
                            $703 = $699&255; //@line 1172 "/checkout/src/libcore/result.rs"
                            $704 = ($703<<24>>24)==(3); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                            $705 = (_bitshift64Lshr(($699|0),($702|0),8)|0); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                            $706 = tempRet0; //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                            if (!($704)) {
                             $983 = $706;$984 = $705;$_82$sroa$0$0$ph = $703;
                             break L98;
                            }
                            $$pre$i$i$i990$i = ((($rest2$sroa$0$02423$i)) + 4|0); //@line 623 "/checkout/src/libcore/ptr.rs"
                            if (!($532)) {
                             $714 = HEAP8[$$pre$i$i$i990$i>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
                             $715 = ($714<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
                             if (!($715)) {
                              label = 308;
                              break L218;
                             }
                            }
                            $716 = (($rest2$sroa$80$02424$i) + -4)|0; //@line 1975 "/checkout/src/libcore/str/mod.rs"
                            $$pre$phi$i$i$i1215$sink$iZ2D = $$pre$i$i$i990$i;$rest2$sroa$80$0$be$i = $716;
                            break L275;
                           }
                          } while(0);
                          $678 = HEAP32[$331>>2]|0; //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                          FUNCTION_TABLE_viiii[$678 & 511]($_382$i,$w$0,8756,1); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                          $679 = $_382$i; //@line 1172 "/checkout/src/libcore/result.rs"
                          $680 = $679; //@line 1172 "/checkout/src/libcore/result.rs"
                          $681 = HEAP32[$680>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
                          $682 = (($679) + 4)|0; //@line 1172 "/checkout/src/libcore/result.rs"
                          $683 = $682; //@line 1172 "/checkout/src/libcore/result.rs"
                          $684 = HEAP32[$683>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
                          $685 = $681&255; //@line 1172 "/checkout/src/libcore/result.rs"
                          $686 = ($685<<24>>24)==(3); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                          $687 = (_bitshift64Lshr(($681|0),($684|0),8)|0); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                          $688 = tempRet0; //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                          if (!($686)) {
                           $983 = $688;$984 = $687;$_82$sroa$0$0$ph = $685;
                           break L98;
                          }
                          $$pre$i$i$i973$i = ((($rest2$sroa$0$02423$i)) + 4|0); //@line 623 "/checkout/src/libcore/ptr.rs"
                          if (!($532)) {
                           $693 = HEAP8[$$pre$i$i$i973$i>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
                           $694 = ($693<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
                           if (!($694)) {
                            label = 299;
                            break L218;
                           }
                          }
                          $695 = (($rest2$sroa$80$02424$i) + -4)|0; //@line 1975 "/checkout/src/libcore/str/mod.rs"
                          $$pre$phi$i$i$i1215$sink$iZ2D = $$pre$i$i$i973$i;$rest2$sroa$80$0$be$i = $695;
                          break L275;
                         }
                        } while(0);
                        $660 = HEAP32[$331>>2]|0; //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                        FUNCTION_TABLE_viiii[$660 & 511]($_360$i,$w$0,8752,1); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                        $661 = $_360$i; //@line 1172 "/checkout/src/libcore/result.rs"
                        $662 = $661; //@line 1172 "/checkout/src/libcore/result.rs"
                        $663 = HEAP32[$662>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
                        $664 = (($661) + 4)|0; //@line 1172 "/checkout/src/libcore/result.rs"
                        $665 = $664; //@line 1172 "/checkout/src/libcore/result.rs"
                        $666 = HEAP32[$665>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
                        $667 = $663&255; //@line 1172 "/checkout/src/libcore/result.rs"
                        $668 = ($667<<24>>24)==(3); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                        $669 = (_bitshift64Lshr(($663|0),($666|0),8)|0); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                        $670 = tempRet0; //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                        if (!($668)) {
                         $983 = $670;$984 = $669;$_82$sroa$0$0$ph = $667;
                         break L98;
                        }
                        $$pre$i$i$i956$i = ((($rest2$sroa$0$02423$i)) + 4|0); //@line 623 "/checkout/src/libcore/ptr.rs"
                        if (!($532)) {
                         $675 = HEAP8[$$pre$i$i$i956$i>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
                         $676 = ($675<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
                         if (!($676)) {
                          label = 290;
                          break L218;
                         }
                        }
                        $677 = (($rest2$sroa$80$02424$i) + -4)|0; //@line 1975 "/checkout/src/libcore/str/mod.rs"
                        $$pre$phi$i$i$i1215$sink$iZ2D = $$pre$i$i$i956$i;$rest2$sroa$80$0$be$i = $677;
                        break L275;
                       }
                      } while(0);
                      $642 = HEAP32[$331>>2]|0; //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                      FUNCTION_TABLE_viiii[$642 & 511]($_338$i,$w$0,8748,1); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                      $643 = $_338$i; //@line 1172 "/checkout/src/libcore/result.rs"
                      $644 = $643; //@line 1172 "/checkout/src/libcore/result.rs"
                      $645 = HEAP32[$644>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
                      $646 = (($643) + 4)|0; //@line 1172 "/checkout/src/libcore/result.rs"
                      $647 = $646; //@line 1172 "/checkout/src/libcore/result.rs"
                      $648 = HEAP32[$647>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
                      $649 = $645&255; //@line 1172 "/checkout/src/libcore/result.rs"
                      $650 = ($649<<24>>24)==(3); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                      $651 = (_bitshift64Lshr(($645|0),($648|0),8)|0); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                      $652 = tempRet0; //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                      if (!($650)) {
                       $983 = $652;$984 = $651;$_82$sroa$0$0$ph = $649;
                       break L98;
                      }
                      $$pre$i$i$i939$i = ((($rest2$sroa$0$02423$i)) + 4|0); //@line 623 "/checkout/src/libcore/ptr.rs"
                      if (!($532)) {
                       $657 = HEAP8[$$pre$i$i$i939$i>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
                       $658 = ($657<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
                       if (!($658)) {
                        label = 281;
                        break L218;
                       }
                      }
                      $659 = (($rest2$sroa$80$02424$i) + -4)|0; //@line 1975 "/checkout/src/libcore/str/mod.rs"
                      $$pre$phi$i$i$i1215$sink$iZ2D = $$pre$i$i$i939$i;$rest2$sroa$80$0$be$i = $659;
                      break L275;
                     }
                    } while(0);
                    $624 = HEAP32[$331>>2]|0; //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                    FUNCTION_TABLE_viiii[$624 & 511]($_316$i,$w$0,8744,1); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                    $625 = $_316$i; //@line 1172 "/checkout/src/libcore/result.rs"
                    $626 = $625; //@line 1172 "/checkout/src/libcore/result.rs"
                    $627 = HEAP32[$626>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
                    $628 = (($625) + 4)|0; //@line 1172 "/checkout/src/libcore/result.rs"
                    $629 = $628; //@line 1172 "/checkout/src/libcore/result.rs"
                    $630 = HEAP32[$629>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
                    $631 = $627&255; //@line 1172 "/checkout/src/libcore/result.rs"
                    $632 = ($631<<24>>24)==(3); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                    $633 = (_bitshift64Lshr(($627|0),($630|0),8)|0); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                    $634 = tempRet0; //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                    if (!($632)) {
                     $983 = $634;$984 = $633;$_82$sroa$0$0$ph = $631;
                     break L98;
                    }
                    $$pre$i$i$i922$i = ((($rest2$sroa$0$02423$i)) + 4|0); //@line 623 "/checkout/src/libcore/ptr.rs"
                    if (!($532)) {
                     $639 = HEAP8[$$pre$i$i$i922$i>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
                     $640 = ($639<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
                     if (!($640)) {
                      label = 272;
                      break L218;
                     }
                    }
                    $641 = (($rest2$sroa$80$02424$i) + -4)|0; //@line 1975 "/checkout/src/libcore/str/mod.rs"
                    $$pre$phi$i$i$i1215$sink$iZ2D = $$pre$i$i$i922$i;$rest2$sroa$80$0$be$i = $641;
                    break L275;
                   }
                  } while(0);
                  $606 = HEAP32[$331>>2]|0; //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                  FUNCTION_TABLE_viiii[$606 & 511]($_294$i,$w$0,8740,1); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                  $607 = $_294$i; //@line 1172 "/checkout/src/libcore/result.rs"
                  $608 = $607; //@line 1172 "/checkout/src/libcore/result.rs"
                  $609 = HEAP32[$608>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
                  $610 = (($607) + 4)|0; //@line 1172 "/checkout/src/libcore/result.rs"
                  $611 = $610; //@line 1172 "/checkout/src/libcore/result.rs"
                  $612 = HEAP32[$611>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
                  $613 = $609&255; //@line 1172 "/checkout/src/libcore/result.rs"
                  $614 = ($613<<24>>24)==(3); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                  $615 = (_bitshift64Lshr(($609|0),($612|0),8)|0); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                  $616 = tempRet0; //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                  if (!($614)) {
                   $983 = $616;$984 = $615;$_82$sroa$0$0$ph = $613;
                   break L98;
                  }
                  $$pre$i$i$i905$i = ((($rest2$sroa$0$02423$i)) + 4|0); //@line 623 "/checkout/src/libcore/ptr.rs"
                  if (!($532)) {
                   $621 = HEAP8[$$pre$i$i$i905$i>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
                   $622 = ($621<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
                   if (!($622)) {
                    label = 263;
                    break L218;
                   }
                  }
                  $623 = (($rest2$sroa$80$02424$i) + -4)|0; //@line 1975 "/checkout/src/libcore/str/mod.rs"
                  $$pre$phi$i$i$i1215$sink$iZ2D = $$pre$i$i$i905$i;$rest2$sroa$80$0$be$i = $623;
                  break L275;
                 }
                } while(0);
                $588 = HEAP32[$331>>2]|0; //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                FUNCTION_TABLE_viiii[$588 & 511]($_272$i,$w$0,8736,1); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                $589 = $_272$i; //@line 1172 "/checkout/src/libcore/result.rs"
                $590 = $589; //@line 1172 "/checkout/src/libcore/result.rs"
                $591 = HEAP32[$590>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
                $592 = (($589) + 4)|0; //@line 1172 "/checkout/src/libcore/result.rs"
                $593 = $592; //@line 1172 "/checkout/src/libcore/result.rs"
                $594 = HEAP32[$593>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
                $595 = $591&255; //@line 1172 "/checkout/src/libcore/result.rs"
                $596 = ($595<<24>>24)==(3); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                $597 = (_bitshift64Lshr(($591|0),($594|0),8)|0); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                $598 = tempRet0; //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                if (!($596)) {
                 $983 = $598;$984 = $597;$_82$sroa$0$0$ph = $595;
                 break L98;
                }
                $$pre$i$i$i888$i = ((($rest2$sroa$0$02423$i)) + 4|0); //@line 623 "/checkout/src/libcore/ptr.rs"
                if (!($532)) {
                 $603 = HEAP8[$$pre$i$i$i888$i>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
                 $604 = ($603<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
                 if (!($604)) {
                  label = 254;
                  break L218;
                 }
                }
                $605 = (($rest2$sroa$80$02424$i) + -4)|0; //@line 1975 "/checkout/src/libcore/str/mod.rs"
                $$pre$phi$i$i$i1215$sink$iZ2D = $$pre$i$i$i888$i;$rest2$sroa$80$0$be$i = $605;
                break L275;
               }
              } while(0);
              if ((label|0) == 303) {
               label = 0;
               $708 = ((($rest2$sroa$0$02423$i)) + 3|0); //@line 623 "/checkout/src/libcore/ptr.rs"
               $709 = HEAP8[$708>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
               $710 = ($709<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
               if ($710) {
                $997 = 0;
                label = 304;
               }
              }
              do {
               if ((label|0) == 304) {
                label = 0;
                $711 = ($rest2$sroa$0$02423$i|0)==(22833|0); //@line 2492 "/checkout/src/libcore/slice/mod.rs"
                if (!($711)) {
                 $712 = (_memcmp(22833,$rest2$sroa$0$02423$i,3)|0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
                 $713 = ($712|0)==(0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
                 if (!($713)) {
                  break;
                 }
                }
                $717 = HEAP32[$331>>2]|0; //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                FUNCTION_TABLE_viiii[$717 & 511]($_426$i,$w$0,8764,1); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                $718 = $_426$i; //@line 1172 "/checkout/src/libcore/result.rs"
                $719 = $718; //@line 1172 "/checkout/src/libcore/result.rs"
                $720 = HEAP32[$719>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
                $721 = (($718) + 4)|0; //@line 1172 "/checkout/src/libcore/result.rs"
                $722 = $721; //@line 1172 "/checkout/src/libcore/result.rs"
                $723 = HEAP32[$722>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
                $724 = $720&255; //@line 1172 "/checkout/src/libcore/result.rs"
                $725 = ($724<<24>>24)==(3); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                $726 = (_bitshift64Lshr(($720|0),($723|0),8)|0); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                $727 = tempRet0; //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                if (!($725)) {
                 $983 = $727;$984 = $726;$_82$sroa$0$0$ph = $724;
                 break L98;
                }
                if ($997) {
                 $$pre$i$i$i1007$i = ((($rest2$sroa$0$02423$i)) + 3|0); //@line 623 "/checkout/src/libcore/ptr.rs"
                 $$pre$phi$i$i$i1012$iZ2D = $$pre$i$i$i1007$i;
                } else {
                 $736 = ($rest2$sroa$80$02424$i>>>0)>(3); //@line 792 "/checkout/src/libcore/slice/mod.rs"
                 if (!($736)) {
                  label = 320;
                  break L218;
                 }
                 $737 = ((($rest2$sroa$0$02423$i)) + 3|0); //@line 623 "/checkout/src/libcore/ptr.rs"
                 $738 = HEAP8[$737>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
                 $739 = ($738<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
                 if ($739) {
                  $$pre$phi$i$i$i1012$iZ2D = $737;
                 } else {
                  label = 320;
                  break L218;
                 }
                }
                $740 = (($rest2$sroa$80$02424$i) + -3)|0; //@line 1975 "/checkout/src/libcore/str/mod.rs"
                $$pre$phi$i$i$i1215$sink$iZ2D = $$pre$phi$i$i$i1012$iZ2D;$rest2$sroa$80$0$be$i = $740;
                break L275;
               }
              } while(0);
              $728 = ($rest2$sroa$80$02424$i|0)==(5); //@line 2438 "/checkout/src/libcore/str/mod.rs"
              if ($728) {
               $998 = 1;
              } else {
               $729 = ($rest2$sroa$80$02424$i>>>0)>(5); //@line 792 "/checkout/src/libcore/slice/mod.rs"
               if (!($729)) {
                break L271;
               }
               $730 = ((($rest2$sroa$0$02423$i)) + 5|0); //@line 623 "/checkout/src/libcore/ptr.rs"
               $731 = HEAP8[$730>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
               $732 = ($731<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
               if ($732) {
                $998 = 0;
               } else {
                break L271;
               }
              }
              $733 = ($rest2$sroa$0$02423$i|0)==(22836|0); //@line 2492 "/checkout/src/libcore/slice/mod.rs"
              do {
               if (!($733)) {
                $734 = (_memcmp(22836,$rest2$sroa$0$02423$i,5)|0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
                $735 = ($734|0)==(0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
                if ($735) {
                 break;
                }
                if ($998) {
                 $999 = 1;
                } else {
                 $752 = ($rest2$sroa$80$02424$i>>>0)>(5); //@line 792 "/checkout/src/libcore/slice/mod.rs"
                 if (!($752)) {
                  break L271;
                 }
                 $$phi$trans$insert1746 = ((($rest2$sroa$0$02423$i)) + 5|0);
                 $$pre1747 = HEAP8[$$phi$trans$insert1746>>0]|0;
                 $753 = ($$pre1747<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
                 if ($753) {
                  $999 = 0;
                 } else {
                  break L271;
                 }
                }
                $754 = ($rest2$sroa$0$02423$i|0)==(22841|0); //@line 2492 "/checkout/src/libcore/slice/mod.rs"
                do {
                 if (!($754)) {
                  $755 = (_memcmp(22841,$rest2$sroa$0$02423$i,5)|0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
                  $756 = ($755|0)==(0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
                  if ($756) {
                   break;
                  }
                  if ($999) {
                   $1000 = 1;
                  } else {
                   $773 = ($rest2$sroa$80$02424$i>>>0)>(5); //@line 792 "/checkout/src/libcore/slice/mod.rs"
                   if (!($773)) {
                    break L271;
                   }
                   $$phi$trans$insert1748 = ((($rest2$sroa$0$02423$i)) + 5|0);
                   $$pre1749 = HEAP8[$$phi$trans$insert1748>>0]|0;
                   $774 = ($$pre1749<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
                   if ($774) {
                    $1000 = 0;
                   } else {
                    break L271;
                   }
                  }
                  $775 = ($rest2$sroa$0$02423$i|0)==(22846|0); //@line 2492 "/checkout/src/libcore/slice/mod.rs"
                  do {
                   if (!($775)) {
                    $776 = (_memcmp(22846,$rest2$sroa$0$02423$i,5)|0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
                    $777 = ($776|0)==(0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
                    if ($777) {
                     break;
                    }
                    if ($1000) {
                     $1001 = 1;
                    } else {
                     $794 = ($rest2$sroa$80$02424$i>>>0)>(5); //@line 792 "/checkout/src/libcore/slice/mod.rs"
                     if (!($794)) {
                      break L271;
                     }
                     $$phi$trans$insert1750 = ((($rest2$sroa$0$02423$i)) + 5|0);
                     $$pre1751 = HEAP8[$$phi$trans$insert1750>>0]|0;
                     $795 = ($$pre1751<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
                     if ($795) {
                      $1001 = 0;
                     } else {
                      break L271;
                     }
                    }
                    $796 = ($rest2$sroa$0$02423$i|0)==(22851|0); //@line 2492 "/checkout/src/libcore/slice/mod.rs"
                    do {
                     if (!($796)) {
                      $797 = (_memcmp(22851,$rest2$sroa$0$02423$i,5)|0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
                      $798 = ($797|0)==(0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
                      if ($798) {
                       break;
                      }
                      if ($1001) {
                       $1002 = 1;
                      } else {
                       $815 = ($rest2$sroa$80$02424$i>>>0)>(5); //@line 792 "/checkout/src/libcore/slice/mod.rs"
                       if (!($815)) {
                        break L271;
                       }
                       $$phi$trans$insert1752 = ((($rest2$sroa$0$02423$i)) + 5|0);
                       $$pre1753 = HEAP8[$$phi$trans$insert1752>>0]|0;
                       $816 = ($$pre1753<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
                       if ($816) {
                        $1002 = 0;
                       } else {
                        break L271;
                       }
                      }
                      $817 = ($rest2$sroa$0$02423$i|0)==(22856|0); //@line 2492 "/checkout/src/libcore/slice/mod.rs"
                      do {
                       if (!($817)) {
                        $818 = (_memcmp(22856,$rest2$sroa$0$02423$i,5)|0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
                        $819 = ($818|0)==(0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
                        if ($819) {
                         break;
                        }
                        if ($1002) {
                         $1003 = 1;
                        } else {
                         $836 = ($rest2$sroa$80$02424$i>>>0)>(5); //@line 792 "/checkout/src/libcore/slice/mod.rs"
                         if (!($836)) {
                          break L271;
                         }
                         $$phi$trans$insert1754 = ((($rest2$sroa$0$02423$i)) + 5|0);
                         $$pre1755 = HEAP8[$$phi$trans$insert1754>>0]|0;
                         $837 = ($$pre1755<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
                         if ($837) {
                          $1003 = 0;
                         } else {
                          break L271;
                         }
                        }
                        $838 = ($rest2$sroa$0$02423$i|0)==(22861|0); //@line 2492 "/checkout/src/libcore/slice/mod.rs"
                        do {
                         if (!($838)) {
                          $839 = (_memcmp(22861,$rest2$sroa$0$02423$i,5)|0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
                          $840 = ($839|0)==(0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
                          if ($840) {
                           break;
                          }
                          if ($1003) {
                           $1004 = 1;
                          } else {
                           $857 = ($rest2$sroa$80$02424$i>>>0)>(5); //@line 792 "/checkout/src/libcore/slice/mod.rs"
                           if (!($857)) {
                            break L271;
                           }
                           $$phi$trans$insert1756 = ((($rest2$sroa$0$02423$i)) + 5|0);
                           $$pre1757 = HEAP8[$$phi$trans$insert1756>>0]|0;
                           $858 = ($$pre1757<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
                           if ($858) {
                            $1004 = 0;
                           } else {
                            break L271;
                           }
                          }
                          $859 = ($rest2$sroa$0$02423$i|0)==(22866|0); //@line 2492 "/checkout/src/libcore/slice/mod.rs"
                          do {
                           if (!($859)) {
                            $860 = (_memcmp(22866,$rest2$sroa$0$02423$i,5)|0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
                            $861 = ($860|0)==(0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
                            if ($861) {
                             break;
                            }
                            if ($1004) {
                             $1005 = 1;
                            } else {
                             $878 = ($rest2$sroa$80$02424$i>>>0)>(5); //@line 792 "/checkout/src/libcore/slice/mod.rs"
                             if (!($878)) {
                              break L271;
                             }
                             $$phi$trans$insert1758 = ((($rest2$sroa$0$02423$i)) + 5|0);
                             $$pre1759 = HEAP8[$$phi$trans$insert1758>>0]|0;
                             $879 = ($$pre1759<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
                             if ($879) {
                              $1005 = 0;
                             } else {
                              break L271;
                             }
                            }
                            $880 = ($rest2$sroa$0$02423$i|0)==(22871|0); //@line 2492 "/checkout/src/libcore/slice/mod.rs"
                            do {
                             if (!($880)) {
                              $881 = (_memcmp(22871,$rest2$sroa$0$02423$i,5)|0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
                              $882 = ($881|0)==(0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
                              if ($882) {
                               break;
                              }
                              if ($1005) {
                               $1006 = 1;
                              } else {
                               $899 = ($rest2$sroa$80$02424$i>>>0)>(5); //@line 792 "/checkout/src/libcore/slice/mod.rs"
                               if (!($899)) {
                                break L271;
                               }
                               $$phi$trans$insert1760 = ((($rest2$sroa$0$02423$i)) + 5|0);
                               $$pre1761 = HEAP8[$$phi$trans$insert1760>>0]|0;
                               $900 = ($$pre1761<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
                               if ($900) {
                                $1006 = 0;
                               } else {
                                break L271;
                               }
                              }
                              $901 = ($rest2$sroa$0$02423$i|0)==(22876|0); //@line 2492 "/checkout/src/libcore/slice/mod.rs"
                              do {
                               if (!($901)) {
                                $902 = (_memcmp(22876,$rest2$sroa$0$02423$i,5)|0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
                                $903 = ($902|0)==(0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
                                if ($903) {
                                 break;
                                }
                                if ($1006) {
                                 $1007 = 1;
                                } else {
                                 $920 = ($rest2$sroa$80$02424$i>>>0)>(5); //@line 792 "/checkout/src/libcore/slice/mod.rs"
                                 if (!($920)) {
                                  break L271;
                                 }
                                 $$phi$trans$insert1762 = ((($rest2$sroa$0$02423$i)) + 5|0);
                                 $$pre1763 = HEAP8[$$phi$trans$insert1762>>0]|0;
                                 $921 = ($$pre1763<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
                                 if ($921) {
                                  $1007 = 0;
                                 } else {
                                  break L271;
                                 }
                                }
                                $922 = ($rest2$sroa$0$02423$i|0)==(22881|0); //@line 2492 "/checkout/src/libcore/slice/mod.rs"
                                if (!($922)) {
                                 $923 = (_memcmp(22881,$rest2$sroa$0$02423$i,5)|0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
                                 $924 = ($923|0)==(0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
                                 if (!($924)) {
                                  break L271;
                                 }
                                }
                                $930 = HEAP32[$331>>2]|0; //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                                FUNCTION_TABLE_viiii[$930 & 511]($_646$i,$w$0,8800,1); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                                $931 = $_646$i; //@line 1172 "/checkout/src/libcore/result.rs"
                                $932 = $931; //@line 1172 "/checkout/src/libcore/result.rs"
                                $933 = HEAP32[$932>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
                                $934 = (($931) + 4)|0; //@line 1172 "/checkout/src/libcore/result.rs"
                                $935 = $934; //@line 1172 "/checkout/src/libcore/result.rs"
                                $936 = HEAP32[$935>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
                                $937 = $933&255; //@line 1172 "/checkout/src/libcore/result.rs"
                                $938 = ($937<<24>>24)==(3); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                                $939 = (_bitshift64Lshr(($933|0),($936|0),8)|0); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                                $940 = tempRet0; //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                                if (!($938)) {
                                 $983 = $940;$984 = $939;$_82$sroa$0$0$ph = $937;
                                 break L98;
                                }
                                if ($1007) {
                                 $$pre$i$i$i1177$i = ((($rest2$sroa$0$02423$i)) + 5|0); //@line 623 "/checkout/src/libcore/ptr.rs"
                                 $$pre$phi$i$i$i1182$iZ2D = $$pre$i$i$i1177$i;
                                } else {
                                 $952 = ($rest2$sroa$80$02424$i>>>0)>(5); //@line 792 "/checkout/src/libcore/slice/mod.rs"
                                 if (!($952)) {
                                  label = 436;
                                  break L218;
                                 }
                                 $953 = ((($rest2$sroa$0$02423$i)) + 5|0); //@line 623 "/checkout/src/libcore/ptr.rs"
                                 $954 = HEAP8[$953>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
                                 $955 = ($954<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
                                 if ($955) {
                                  $$pre$phi$i$i$i1182$iZ2D = $953;
                                 } else {
                                  label = 436;
                                  break L218;
                                 }
                                }
                                $956 = (($rest2$sroa$80$02424$i) + -5)|0; //@line 1975 "/checkout/src/libcore/str/mod.rs"
                                $$pre$phi$i$i$i1215$sink$iZ2D = $$pre$phi$i$i$i1182$iZ2D;$rest2$sroa$80$0$be$i = $956;
                                break L275;
                               }
                              } while(0);
                              $909 = HEAP32[$331>>2]|0; //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                              FUNCTION_TABLE_viiii[$909 & 511]($_624$i,$w$0,11588,1); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                              $910 = $_624$i; //@line 1172 "/checkout/src/libcore/result.rs"
                              $911 = $910; //@line 1172 "/checkout/src/libcore/result.rs"
                              $912 = HEAP32[$911>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
                              $913 = (($910) + 4)|0; //@line 1172 "/checkout/src/libcore/result.rs"
                              $914 = $913; //@line 1172 "/checkout/src/libcore/result.rs"
                              $915 = HEAP32[$914>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
                              $916 = $912&255; //@line 1172 "/checkout/src/libcore/result.rs"
                              $917 = ($916<<24>>24)==(3); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                              $918 = (_bitshift64Lshr(($912|0),($915|0),8)|0); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                              $919 = tempRet0; //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                              if (!($917)) {
                               $983 = $919;$984 = $918;$_82$sroa$0$0$ph = $916;
                               break L98;
                              }
                              if ($1006) {
                               $$pre$i$i$i1160$i = ((($rest2$sroa$0$02423$i)) + 5|0); //@line 623 "/checkout/src/libcore/ptr.rs"
                               $$pre$phi$i$i$i1165$iZ2D = $$pre$i$i$i1160$i;
                              } else {
                               $925 = ($rest2$sroa$80$02424$i>>>0)>(5); //@line 792 "/checkout/src/libcore/slice/mod.rs"
                               if (!($925)) {
                                label = 428;
                                break L218;
                               }
                               $926 = ((($rest2$sroa$0$02423$i)) + 5|0); //@line 623 "/checkout/src/libcore/ptr.rs"
                               $927 = HEAP8[$926>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
                               $928 = ($927<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
                               if ($928) {
                                $$pre$phi$i$i$i1165$iZ2D = $926;
                               } else {
                                label = 428;
                                break L218;
                               }
                              }
                              $929 = (($rest2$sroa$80$02424$i) + -5)|0; //@line 1975 "/checkout/src/libcore/str/mod.rs"
                              $$pre$phi$i$i$i1215$sink$iZ2D = $$pre$phi$i$i$i1165$iZ2D;$rest2$sroa$80$0$be$i = $929;
                              break L275;
                             }
                            } while(0);
                            $888 = HEAP32[$331>>2]|0; //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                            FUNCTION_TABLE_viiii[$888 & 511]($_602$i,$w$0,8796,1); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                            $889 = $_602$i; //@line 1172 "/checkout/src/libcore/result.rs"
                            $890 = $889; //@line 1172 "/checkout/src/libcore/result.rs"
                            $891 = HEAP32[$890>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
                            $892 = (($889) + 4)|0; //@line 1172 "/checkout/src/libcore/result.rs"
                            $893 = $892; //@line 1172 "/checkout/src/libcore/result.rs"
                            $894 = HEAP32[$893>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
                            $895 = $891&255; //@line 1172 "/checkout/src/libcore/result.rs"
                            $896 = ($895<<24>>24)==(3); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                            $897 = (_bitshift64Lshr(($891|0),($894|0),8)|0); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                            $898 = tempRet0; //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                            if (!($896)) {
                             $983 = $898;$984 = $897;$_82$sroa$0$0$ph = $895;
                             break L98;
                            }
                            if ($1005) {
                             $$pre$i$i$i1143$i = ((($rest2$sroa$0$02423$i)) + 5|0); //@line 623 "/checkout/src/libcore/ptr.rs"
                             $$pre$phi$i$i$i1148$iZ2D = $$pre$i$i$i1143$i;
                            } else {
                             $904 = ($rest2$sroa$80$02424$i>>>0)>(5); //@line 792 "/checkout/src/libcore/slice/mod.rs"
                             if (!($904)) {
                              label = 416;
                              break L218;
                             }
                             $905 = ((($rest2$sroa$0$02423$i)) + 5|0); //@line 623 "/checkout/src/libcore/ptr.rs"
                             $906 = HEAP8[$905>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
                             $907 = ($906<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
                             if ($907) {
                              $$pre$phi$i$i$i1148$iZ2D = $905;
                             } else {
                              label = 416;
                              break L218;
                             }
                            }
                            $908 = (($rest2$sroa$80$02424$i) + -5)|0; //@line 1975 "/checkout/src/libcore/str/mod.rs"
                            $$pre$phi$i$i$i1215$sink$iZ2D = $$pre$phi$i$i$i1148$iZ2D;$rest2$sroa$80$0$be$i = $908;
                            break L275;
                           }
                          } while(0);
                          $867 = HEAP32[$331>>2]|0; //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                          FUNCTION_TABLE_viiii[$867 & 511]($_580$i,$w$0,8792,1); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                          $868 = $_580$i; //@line 1172 "/checkout/src/libcore/result.rs"
                          $869 = $868; //@line 1172 "/checkout/src/libcore/result.rs"
                          $870 = HEAP32[$869>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
                          $871 = (($868) + 4)|0; //@line 1172 "/checkout/src/libcore/result.rs"
                          $872 = $871; //@line 1172 "/checkout/src/libcore/result.rs"
                          $873 = HEAP32[$872>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
                          $874 = $870&255; //@line 1172 "/checkout/src/libcore/result.rs"
                          $875 = ($874<<24>>24)==(3); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                          $876 = (_bitshift64Lshr(($870|0),($873|0),8)|0); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                          $877 = tempRet0; //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                          if (!($875)) {
                           $983 = $877;$984 = $876;$_82$sroa$0$0$ph = $874;
                           break L98;
                          }
                          if ($1004) {
                           $$pre$i$i$i1126$i = ((($rest2$sroa$0$02423$i)) + 5|0); //@line 623 "/checkout/src/libcore/ptr.rs"
                           $$pre$phi$i$i$i1131$iZ2D = $$pre$i$i$i1126$i;
                          } else {
                           $883 = ($rest2$sroa$80$02424$i>>>0)>(5); //@line 792 "/checkout/src/libcore/slice/mod.rs"
                           if (!($883)) {
                            label = 404;
                            break L218;
                           }
                           $884 = ((($rest2$sroa$0$02423$i)) + 5|0); //@line 623 "/checkout/src/libcore/ptr.rs"
                           $885 = HEAP8[$884>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
                           $886 = ($885<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
                           if ($886) {
                            $$pre$phi$i$i$i1131$iZ2D = $884;
                           } else {
                            label = 404;
                            break L218;
                           }
                          }
                          $887 = (($rest2$sroa$80$02424$i) + -5)|0; //@line 1975 "/checkout/src/libcore/str/mod.rs"
                          $$pre$phi$i$i$i1215$sink$iZ2D = $$pre$phi$i$i$i1131$iZ2D;$rest2$sroa$80$0$be$i = $887;
                          break L275;
                         }
                        } while(0);
                        $846 = HEAP32[$331>>2]|0; //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                        FUNCTION_TABLE_viiii[$846 & 511]($_558$i,$w$0,8788,1); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                        $847 = $_558$i; //@line 1172 "/checkout/src/libcore/result.rs"
                        $848 = $847; //@line 1172 "/checkout/src/libcore/result.rs"
                        $849 = HEAP32[$848>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
                        $850 = (($847) + 4)|0; //@line 1172 "/checkout/src/libcore/result.rs"
                        $851 = $850; //@line 1172 "/checkout/src/libcore/result.rs"
                        $852 = HEAP32[$851>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
                        $853 = $849&255; //@line 1172 "/checkout/src/libcore/result.rs"
                        $854 = ($853<<24>>24)==(3); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                        $855 = (_bitshift64Lshr(($849|0),($852|0),8)|0); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                        $856 = tempRet0; //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                        if (!($854)) {
                         $983 = $856;$984 = $855;$_82$sroa$0$0$ph = $853;
                         break L98;
                        }
                        if ($1003) {
                         $$pre$i$i$i1109$i = ((($rest2$sroa$0$02423$i)) + 5|0); //@line 623 "/checkout/src/libcore/ptr.rs"
                         $$pre$phi$i$i$i1114$iZ2D = $$pre$i$i$i1109$i;
                        } else {
                         $862 = ($rest2$sroa$80$02424$i>>>0)>(5); //@line 792 "/checkout/src/libcore/slice/mod.rs"
                         if (!($862)) {
                          label = 392;
                          break L218;
                         }
                         $863 = ((($rest2$sroa$0$02423$i)) + 5|0); //@line 623 "/checkout/src/libcore/ptr.rs"
                         $864 = HEAP8[$863>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
                         $865 = ($864<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
                         if ($865) {
                          $$pre$phi$i$i$i1114$iZ2D = $863;
                         } else {
                          label = 392;
                          break L218;
                         }
                        }
                        $866 = (($rest2$sroa$80$02424$i) + -5)|0; //@line 1975 "/checkout/src/libcore/str/mod.rs"
                        $$pre$phi$i$i$i1215$sink$iZ2D = $$pre$phi$i$i$i1114$iZ2D;$rest2$sroa$80$0$be$i = $866;
                        break L275;
                       }
                      } while(0);
                      $825 = HEAP32[$331>>2]|0; //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                      FUNCTION_TABLE_viiii[$825 & 511]($_536$i,$w$0,8784,1); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                      $826 = $_536$i; //@line 1172 "/checkout/src/libcore/result.rs"
                      $827 = $826; //@line 1172 "/checkout/src/libcore/result.rs"
                      $828 = HEAP32[$827>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
                      $829 = (($826) + 4)|0; //@line 1172 "/checkout/src/libcore/result.rs"
                      $830 = $829; //@line 1172 "/checkout/src/libcore/result.rs"
                      $831 = HEAP32[$830>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
                      $832 = $828&255; //@line 1172 "/checkout/src/libcore/result.rs"
                      $833 = ($832<<24>>24)==(3); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                      $834 = (_bitshift64Lshr(($828|0),($831|0),8)|0); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                      $835 = tempRet0; //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                      if (!($833)) {
                       $983 = $835;$984 = $834;$_82$sroa$0$0$ph = $832;
                       break L98;
                      }
                      if ($1002) {
                       $$pre$i$i$i1092$i = ((($rest2$sroa$0$02423$i)) + 5|0); //@line 623 "/checkout/src/libcore/ptr.rs"
                       $$pre$phi$i$i$i1097$iZ2D = $$pre$i$i$i1092$i;
                      } else {
                       $841 = ($rest2$sroa$80$02424$i>>>0)>(5); //@line 792 "/checkout/src/libcore/slice/mod.rs"
                       if (!($841)) {
                        label = 380;
                        break L218;
                       }
                       $842 = ((($rest2$sroa$0$02423$i)) + 5|0); //@line 623 "/checkout/src/libcore/ptr.rs"
                       $843 = HEAP8[$842>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
                       $844 = ($843<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
                       if ($844) {
                        $$pre$phi$i$i$i1097$iZ2D = $842;
                       } else {
                        label = 380;
                        break L218;
                       }
                      }
                      $845 = (($rest2$sroa$80$02424$i) + -5)|0; //@line 1975 "/checkout/src/libcore/str/mod.rs"
                      $$pre$phi$i$i$i1215$sink$iZ2D = $$pre$phi$i$i$i1097$iZ2D;$rest2$sroa$80$0$be$i = $845;
                      break L275;
                     }
                    } while(0);
                    $804 = HEAP32[$331>>2]|0; //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                    FUNCTION_TABLE_viiii[$804 & 511]($_514$i,$w$0,8780,1); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                    $805 = $_514$i; //@line 1172 "/checkout/src/libcore/result.rs"
                    $806 = $805; //@line 1172 "/checkout/src/libcore/result.rs"
                    $807 = HEAP32[$806>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
                    $808 = (($805) + 4)|0; //@line 1172 "/checkout/src/libcore/result.rs"
                    $809 = $808; //@line 1172 "/checkout/src/libcore/result.rs"
                    $810 = HEAP32[$809>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
                    $811 = $807&255; //@line 1172 "/checkout/src/libcore/result.rs"
                    $812 = ($811<<24>>24)==(3); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                    $813 = (_bitshift64Lshr(($807|0),($810|0),8)|0); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                    $814 = tempRet0; //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                    if (!($812)) {
                     $983 = $814;$984 = $813;$_82$sroa$0$0$ph = $811;
                     break L98;
                    }
                    if ($1001) {
                     $$pre$i$i$i1075$i = ((($rest2$sroa$0$02423$i)) + 5|0); //@line 623 "/checkout/src/libcore/ptr.rs"
                     $$pre$phi$i$i$i1080$iZ2D = $$pre$i$i$i1075$i;
                    } else {
                     $820 = ($rest2$sroa$80$02424$i>>>0)>(5); //@line 792 "/checkout/src/libcore/slice/mod.rs"
                     if (!($820)) {
                      label = 368;
                      break L218;
                     }
                     $821 = ((($rest2$sroa$0$02423$i)) + 5|0); //@line 623 "/checkout/src/libcore/ptr.rs"
                     $822 = HEAP8[$821>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
                     $823 = ($822<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
                     if ($823) {
                      $$pre$phi$i$i$i1080$iZ2D = $821;
                     } else {
                      label = 368;
                      break L218;
                     }
                    }
                    $824 = (($rest2$sroa$80$02424$i) + -5)|0; //@line 1975 "/checkout/src/libcore/str/mod.rs"
                    $$pre$phi$i$i$i1215$sink$iZ2D = $$pre$phi$i$i$i1080$iZ2D;$rest2$sroa$80$0$be$i = $824;
                    break L275;
                   }
                  } while(0);
                  $783 = HEAP32[$331>>2]|0; //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                  FUNCTION_TABLE_viiii[$783 & 511]($_492$i,$w$0,8776,1); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                  $784 = $_492$i; //@line 1172 "/checkout/src/libcore/result.rs"
                  $785 = $784; //@line 1172 "/checkout/src/libcore/result.rs"
                  $786 = HEAP32[$785>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
                  $787 = (($784) + 4)|0; //@line 1172 "/checkout/src/libcore/result.rs"
                  $788 = $787; //@line 1172 "/checkout/src/libcore/result.rs"
                  $789 = HEAP32[$788>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
                  $790 = $786&255; //@line 1172 "/checkout/src/libcore/result.rs"
                  $791 = ($790<<24>>24)==(3); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                  $792 = (_bitshift64Lshr(($786|0),($789|0),8)|0); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                  $793 = tempRet0; //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                  if (!($791)) {
                   $983 = $793;$984 = $792;$_82$sroa$0$0$ph = $790;
                   break L98;
                  }
                  if ($1000) {
                   $$pre$i$i$i1058$i = ((($rest2$sroa$0$02423$i)) + 5|0); //@line 623 "/checkout/src/libcore/ptr.rs"
                   $$pre$phi$i$i$i1063$iZ2D = $$pre$i$i$i1058$i;
                  } else {
                   $799 = ($rest2$sroa$80$02424$i>>>0)>(5); //@line 792 "/checkout/src/libcore/slice/mod.rs"
                   if (!($799)) {
                    label = 356;
                    break L218;
                   }
                   $800 = ((($rest2$sroa$0$02423$i)) + 5|0); //@line 623 "/checkout/src/libcore/ptr.rs"
                   $801 = HEAP8[$800>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
                   $802 = ($801<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
                   if ($802) {
                    $$pre$phi$i$i$i1063$iZ2D = $800;
                   } else {
                    label = 356;
                    break L218;
                   }
                  }
                  $803 = (($rest2$sroa$80$02424$i) + -5)|0; //@line 1975 "/checkout/src/libcore/str/mod.rs"
                  $$pre$phi$i$i$i1215$sink$iZ2D = $$pre$phi$i$i$i1063$iZ2D;$rest2$sroa$80$0$be$i = $803;
                  break L275;
                 }
                } while(0);
                $762 = HEAP32[$331>>2]|0; //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                FUNCTION_TABLE_viiii[$762 & 511]($_470$i,$w$0,8772,1); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                $763 = $_470$i; //@line 1172 "/checkout/src/libcore/result.rs"
                $764 = $763; //@line 1172 "/checkout/src/libcore/result.rs"
                $765 = HEAP32[$764>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
                $766 = (($763) + 4)|0; //@line 1172 "/checkout/src/libcore/result.rs"
                $767 = $766; //@line 1172 "/checkout/src/libcore/result.rs"
                $768 = HEAP32[$767>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
                $769 = $765&255; //@line 1172 "/checkout/src/libcore/result.rs"
                $770 = ($769<<24>>24)==(3); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                $771 = (_bitshift64Lshr(($765|0),($768|0),8)|0); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                $772 = tempRet0; //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
                if (!($770)) {
                 $983 = $772;$984 = $771;$_82$sroa$0$0$ph = $769;
                 break L98;
                }
                if ($999) {
                 $$pre$i$i$i1041$i = ((($rest2$sroa$0$02423$i)) + 5|0); //@line 623 "/checkout/src/libcore/ptr.rs"
                 $$pre$phi$i$i$i1046$iZ2D = $$pre$i$i$i1041$i;
                } else {
                 $778 = ($rest2$sroa$80$02424$i>>>0)>(5); //@line 792 "/checkout/src/libcore/slice/mod.rs"
                 if (!($778)) {
                  label = 344;
                  break L218;
                 }
                 $779 = ((($rest2$sroa$0$02423$i)) + 5|0); //@line 623 "/checkout/src/libcore/ptr.rs"
                 $780 = HEAP8[$779>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
                 $781 = ($780<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
                 if ($781) {
                  $$pre$phi$i$i$i1046$iZ2D = $779;
                 } else {
                  label = 344;
                  break L218;
                 }
                }
                $782 = (($rest2$sroa$80$02424$i) + -5)|0; //@line 1975 "/checkout/src/libcore/str/mod.rs"
                $$pre$phi$i$i$i1215$sink$iZ2D = $$pre$phi$i$i$i1046$iZ2D;$rest2$sroa$80$0$be$i = $782;
                break L275;
               }
              } while(0);
              $741 = HEAP32[$331>>2]|0; //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
              FUNCTION_TABLE_viiii[$741 & 511]($_448$i,$w$0,8768,1); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
              $742 = $_448$i; //@line 1172 "/checkout/src/libcore/result.rs"
              $743 = $742; //@line 1172 "/checkout/src/libcore/result.rs"
              $744 = HEAP32[$743>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
              $745 = (($742) + 4)|0; //@line 1172 "/checkout/src/libcore/result.rs"
              $746 = $745; //@line 1172 "/checkout/src/libcore/result.rs"
              $747 = HEAP32[$746>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
              $748 = $744&255; //@line 1172 "/checkout/src/libcore/result.rs"
              $749 = ($748<<24>>24)==(3); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
              $750 = (_bitshift64Lshr(($744|0),($747|0),8)|0); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
              $751 = tempRet0; //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
              if (!($749)) {
               $983 = $751;$984 = $750;$_82$sroa$0$0$ph = $748;
               break L98;
              }
              if ($998) {
               $$pre$i$i$i1024$i = ((($rest2$sroa$0$02423$i)) + 5|0); //@line 623 "/checkout/src/libcore/ptr.rs"
               $$pre$phi$i$i$i1029$iZ2D = $$pre$i$i$i1024$i;
              } else {
               $757 = ($rest2$sroa$80$02424$i>>>0)>(5); //@line 792 "/checkout/src/libcore/slice/mod.rs"
               if (!($757)) {
                label = 332;
                break L218;
               }
               $758 = ((($rest2$sroa$0$02423$i)) + 5|0); //@line 623 "/checkout/src/libcore/ptr.rs"
               $759 = HEAP8[$758>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
               $760 = ($759<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
               if ($760) {
                $$pre$phi$i$i$i1029$iZ2D = $758;
               } else {
                label = 332;
                break L218;
               }
              }
              $761 = (($rest2$sroa$80$02424$i) + -5)|0; //@line 1975 "/checkout/src/libcore/str/mod.rs"
              $$pre$phi$i$i$i1215$sink$iZ2D = $$pre$phi$i$i$i1029$iZ2D;$rest2$sroa$80$0$be$i = $761;
              break L275;
             }
            } while(0);
            $$pre$i$i$i768$i = ((($rest2$sroa$0$02423$i)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
            do {
             if ($460) {
              label = 219;
             } else {
              $466 = HEAP8[$$pre$i$i$i768$i>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
              $467 = ($466<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
              if (!($467)) {
               label = 201;
               break L218;
              }
              $468 = (($rest2$sroa$80$02424$i) + -1)|0; //@line 1975 "/checkout/src/libcore/str/mod.rs"
              $$ptr$i = (($$pre$i$i$i768$i) + ($468)|0); //@line 564 "/checkout/src/libcore/str/mod.rs"
              $469 = ($468|0)==(0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
              $470 = ((($rest2$sroa$0$02423$i)) + 2|0); //@line 623 "/checkout/src/libcore/ptr.rs"
              $$1625$i = $469 ? $$pre$i$i$i768$i : $470; //@line 1138 "/checkout/src/libcore/slice/mod.rs"
              if ($469) {
               label = 219;
               break;
              }
              $471 = ($466<<24>>24)>(-1); //@line 498 "/checkout/src/libcore/str/mod.rs"
              do {
               if ($471) {
                $472 = $466&255; //@line 499 "/checkout/src/libcore/str/mod.rs"
                $$sink1627$i = $472;
               } else {
                $473 = $466 & 31; //@line 472 "/checkout/src/libcore/str/mod.rs"
                $474 = $473&255; //@line 472 "/checkout/src/libcore/str/mod.rs"
                $475 = ($$1625$i|0)==($$ptr$i|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
                if ($475) {
                 $483 = $$ptr$i;$_0$0$i16$i$i802$i = 0;
                } else {
                 $476 = ((($$1625$i)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
                 $477 = HEAP8[$$1625$i>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
                 $phitmp$i$i800$i = $477 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
                 $483 = $476;$_0$0$i16$i$i802$i = $phitmp$i$i800$i;
                }
                $478 = $474 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
                $479 = $_0$0$i16$i$i802$i&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
                $480 = $479 | $478; //@line 476 "/checkout/src/libcore/str/mod.rs"
                $481 = ($466&255)>(223); //@line 508 "/checkout/src/libcore/str/mod.rs"
                if (!($481)) {
                 $$sink1627$i = $480;
                 break;
                }
                $482 = ($483|0)==($$ptr$i|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
                if ($482) {
                 $493 = $$ptr$i;$_0$0$i10$i$i807$i = 0;
                } else {
                 $484 = ((($483)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
                 $485 = HEAP8[$483>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
                 $phitmp21$i$i805$i = $485 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
                 $493 = $484;$_0$0$i10$i$i807$i = $phitmp21$i$i805$i;
                }
                $486 = $479 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
                $487 = $_0$0$i10$i$i807$i&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
                $488 = $487 | $486; //@line 476 "/checkout/src/libcore/str/mod.rs"
                $489 = $474 << 12; //@line 513 "/checkout/src/libcore/str/mod.rs"
                $490 = $488 | $489; //@line 513 "/checkout/src/libcore/str/mod.rs"
                $491 = ($466&255)>(239); //@line 514 "/checkout/src/libcore/str/mod.rs"
                if (!($491)) {
                 $$sink1627$i = $490;
                 break;
                }
                $492 = ($493|0)==($$ptr$i|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
                if ($492) {
                 $_0$0$i5$i$i812$i = 0;
                } else {
                 $494 = HEAP8[$493>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
                 $phitmp22$i$i810$i = $494 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
                 $_0$0$i5$i$i812$i = $phitmp22$i$i810$i;
                }
                $495 = $474 << 18; //@line 518 "/checkout/src/libcore/str/mod.rs"
                $496 = $495 & 1835008; //@line 518 "/checkout/src/libcore/str/mod.rs"
                $497 = $488 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
                $498 = $_0$0$i5$i$i812$i&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
                $499 = $497 | $496; //@line 476 "/checkout/src/libcore/str/mod.rs"
                $500 = $499 | $498; //@line 518 "/checkout/src/libcore/str/mod.rs"
                $$sink1627$i = $500;
               }
              } while(0);
              $cond92$i = ($$sink1627$i|0)==(46); //@line 347 "/checkout/src/libstd/sys_common/backtrace.rs"
              if (!($cond92$i)) {
               label = 219;
               break;
              }
              $515 = HEAP32[$331>>2]|0; //@line 348 "/checkout/src/libstd/sys_common/backtrace.rs"
              FUNCTION_TABLE_viiii[$515 & 511]($_234$i,$w$0,8708,2); //@line 348 "/checkout/src/libstd/sys_common/backtrace.rs"
              $516 = $_234$i; //@line 1172 "/checkout/src/libcore/result.rs"
              $517 = $516; //@line 1172 "/checkout/src/libcore/result.rs"
              $518 = HEAP32[$517>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
              $519 = (($516) + 4)|0; //@line 1172 "/checkout/src/libcore/result.rs"
              $520 = $519; //@line 1172 "/checkout/src/libcore/result.rs"
              $521 = HEAP32[$520>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
              $522 = $518&255; //@line 1172 "/checkout/src/libcore/result.rs"
              $523 = ($522<<24>>24)==(3); //@line 348 "/checkout/src/libstd/sys_common/backtrace.rs"
              $524 = (_bitshift64Lshr(($518|0),($521|0),8)|0); //@line 348 "/checkout/src/libstd/sys_common/backtrace.rs"
              $525 = tempRet0; //@line 348 "/checkout/src/libstd/sys_common/backtrace.rs"
              if ($523) {
               $$sink688$i = 2;
              } else {
               $983 = $525;$984 = $524;$_82$sroa$0$0$ph = $522;
               break L98;
              }
             }
            } while(0);
            if ((label|0) == 219) {
             label = 0;
             $504 = HEAP32[$331>>2]|0; //@line 351 "/checkout/src/libstd/sys_common/backtrace.rs"
             FUNCTION_TABLE_viiii[$504 & 511]($_251$i,$w$0,11580,1); //@line 351 "/checkout/src/libstd/sys_common/backtrace.rs"
             $505 = $_251$i; //@line 1172 "/checkout/src/libcore/result.rs"
             $506 = $505; //@line 1172 "/checkout/src/libcore/result.rs"
             $507 = HEAP32[$506>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
             $508 = (($505) + 4)|0; //@line 1172 "/checkout/src/libcore/result.rs"
             $509 = $508; //@line 1172 "/checkout/src/libcore/result.rs"
             $510 = HEAP32[$509>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
             $511 = $507&255; //@line 1172 "/checkout/src/libcore/result.rs"
             $512 = ($511<<24>>24)==(3); //@line 351 "/checkout/src/libstd/sys_common/backtrace.rs"
             $513 = (_bitshift64Lshr(($507|0),($510|0),8)|0); //@line 351 "/checkout/src/libstd/sys_common/backtrace.rs"
             $514 = tempRet0; //@line 351 "/checkout/src/libstd/sys_common/backtrace.rs"
             if ($512) {
              $$sink688$i = 1;
             } else {
              $983 = $514;$984 = $513;$_82$sroa$0$0$ph = $511;
              break L98;
             }
            }
            $526 = ($rest2$sroa$80$02424$i|0)==($$sink688$i|0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
            if ($526) {
             $$pre$i$i$i817$i = (($rest2$sroa$0$02423$i) + ($rest2$sroa$80$02424$i)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
             $$pre$phi$i$i$i822$iZ2D = $$pre$i$i$i817$i;
            } else {
             $527 = ($rest2$sroa$80$02424$i>>>0)>($$sink688$i>>>0); //@line 792 "/checkout/src/libcore/slice/mod.rs"
             if (!($527)) {
              label = 225;
              break L218;
             }
             $528 = (($rest2$sroa$0$02423$i) + ($$sink688$i)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
             $529 = HEAP8[$528>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
             $530 = ($529<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
             if ($530) {
              $$pre$phi$i$i$i822$iZ2D = $528;
             } else {
              label = 225;
              break L218;
             }
            }
            $531 = (($rest2$sroa$80$02424$i) - ($$sink688$i))|0; //@line 1975 "/checkout/src/libcore/str/mod.rs"
            $$pre$phi$i$i$i1215$sink$iZ2D = $$pre$phi$i$i$i822$iZ2D;$rest2$sroa$80$0$be$i = $531;
           }
          } while(0);
          if ((label|0) == 232) {
           label = 0;
           $540 = (($rest2$sroa$0$02423$i) + ($rest2$sroa$80$02424$i)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
           $541 = $rest2$sroa$0$02423$i; //@line 2257 "/checkout/src/libcore/str/mod.rs"
           $_680$sroa$0$0$i = 0;$_680$sroa$5$0$i = $541;
           L550: while(1) {
            $542 = $_680$sroa$5$0$i; //@line 1135 "/checkout/src/libcore/slice/mod.rs"
            $543 = ($542|0)==($540|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
            $544 = ((($542)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
            $545 = $544; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
            $_680$sroa$5$1$i = $543 ? $_680$sroa$5$0$i : $545; //@line 1138 "/checkout/src/libcore/slice/mod.rs"
            $546 = ($_680$sroa$5$0$i|0)==(0); //@line 497 "/checkout/src/libcore/str/mod.rs"
            $547 = $546 | $543; //@line 497 "/checkout/src/libcore/str/mod.rs"
            if ($547) {
             $idx$0$i = $rest2$sroa$80$02424$i;
             break;
            }
            $548 = HEAP8[$542>>0]|0; //@line 497 "/checkout/src/libcore/str/mod.rs"
            $549 = ($548<<24>>24)>(-1); //@line 498 "/checkout/src/libcore/str/mod.rs"
            do {
             if ($549) {
              $550 = $548&255; //@line 499 "/checkout/src/libcore/str/mod.rs"
              $_680$sroa$5$61620$i = $_680$sroa$5$1$i;$trunc$i$i$i$i$i = $550;
             } else {
              $551 = $548 & 31; //@line 472 "/checkout/src/libcore/str/mod.rs"
              $552 = $551&255; //@line 472 "/checkout/src/libcore/str/mod.rs"
              $553 = $_680$sroa$5$1$i; //@line 1135 "/checkout/src/libcore/slice/mod.rs"
              $554 = ($553|0)==($540|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
              if ($554) {
               $563 = $540;$_0$0$i16$i$i863$i = 0;$_680$sroa$5$2$i = $_680$sroa$5$1$i;
              } else {
               $555 = ((($553)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
               $556 = $555; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
               $557 = HEAP8[$553>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
               $phitmp$i$i861$i = $557 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
               $563 = $555;$_0$0$i16$i$i863$i = $phitmp$i$i861$i;$_680$sroa$5$2$i = $556;
              }
              $558 = $552 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
              $559 = $_0$0$i16$i$i863$i&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
              $560 = $559 | $558; //@line 476 "/checkout/src/libcore/str/mod.rs"
              $561 = ($548&255)>(223); //@line 508 "/checkout/src/libcore/str/mod.rs"
              if (!($561)) {
               $_680$sroa$5$61620$i = $_680$sroa$5$2$i;$trunc$i$i$i$i$i = $560;
               break;
              }
              $562 = ($563|0)==($540|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
              if ($562) {
               $574 = $540;$_0$0$i10$i$i868$i = 0;$_680$sroa$5$3$i = $_680$sroa$5$2$i;
              } else {
               $564 = ((($563)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
               $565 = $564; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
               $566 = HEAP8[$563>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
               $phitmp21$i$i866$i = $566 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
               $574 = $564;$_0$0$i10$i$i868$i = $phitmp21$i$i866$i;$_680$sroa$5$3$i = $565;
              }
              $567 = $559 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
              $568 = $_0$0$i10$i$i868$i&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
              $569 = $568 | $567; //@line 476 "/checkout/src/libcore/str/mod.rs"
              $570 = $552 << 12; //@line 513 "/checkout/src/libcore/str/mod.rs"
              $571 = $569 | $570; //@line 513 "/checkout/src/libcore/str/mod.rs"
              $572 = ($548&255)>(239); //@line 514 "/checkout/src/libcore/str/mod.rs"
              if (!($572)) {
               $_680$sroa$5$61620$i = $_680$sroa$5$3$i;$trunc$i$i$i$i$i = $571;
               break;
              }
              $573 = ($574|0)==($540|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
              if ($573) {
               $_0$0$i5$i$i873$i = 0;$_680$sroa$5$4$i = $_680$sroa$5$3$i;
              } else {
               $575 = ((($574)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
               $576 = $575; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
               $577 = HEAP8[$574>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
               $phitmp22$i$i871$i = $577 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
               $_0$0$i5$i$i873$i = $phitmp22$i$i871$i;$_680$sroa$5$4$i = $576;
              }
              $578 = $552 << 18; //@line 518 "/checkout/src/libcore/str/mod.rs"
              $579 = $578 & 1835008; //@line 518 "/checkout/src/libcore/str/mod.rs"
              $580 = $569 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
              $581 = $_0$0$i5$i$i873$i&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
              $582 = $580 | $579; //@line 476 "/checkout/src/libcore/str/mod.rs"
              $583 = $582 | $581; //@line 518 "/checkout/src/libcore/str/mod.rs"
              $584 = ($583|0)==(1114112); //@line 664 "/checkout/src/libcore/str/mod.rs"
              if ($584) {
               $idx$0$i = $rest2$sroa$80$02424$i;
               break L550;
              } else {
               $_680$sroa$5$61620$i = $_680$sroa$5$4$i;$trunc$i$i$i$i$i = $583;
              }
             }
            } while(0);
            $585 = (($_680$sroa$0$0$i) - ($_680$sroa$5$0$i))|0; //@line 668 "/checkout/src/libcore/str/mod.rs"
            $586 = (($585) + ($_680$sroa$5$61620$i))|0; //@line 668 "/checkout/src/libcore/str/mod.rs"
            $trunc$i$i$i$i$i$clear = $trunc$i$i$i$i$i & 2097151; //@line 394 "/checkout/src/libstd/sys_common/backtrace.rs"
            switch ($trunc$i$i$i$i$i$clear|0) {
            case 46: case 36:  {
             label = 246;
             break L550;
             break;
            }
            default: {
             $_680$sroa$0$0$i = $586;$_680$sroa$5$0$i = $_680$sroa$5$61620$i;
            }
            }
           }
           if ((label|0) == 246) {
            label = 0;
            $587 = ($trunc$i$i$i$i$i|0)==(1114112); //@line 382 "/checkout/src/libcore/iter/mod.rs"
            $rest2$sroa$80$0$$i = $587 ? $rest2$sroa$80$02424$i : $_680$sroa$0$0$i; //@line 382 "/checkout/src/libcore/iter/mod.rs"
            $idx$0$i = $rest2$sroa$80$0$$i;
           }
           $958 = ($idx$0$i|0)==(0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
           $959 = ($rest2$sroa$80$02424$i|0)==($idx$0$i|0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
           $or$cond$i$i$i$i1194$i = $958 | $959; //@line 2438 "/checkout/src/libcore/str/mod.rs"
           if (!($or$cond$i$i$i$i1194$i)) {
            $960 = ($rest2$sroa$80$02424$i>>>0)>($idx$0$i>>>0); //@line 792 "/checkout/src/libcore/slice/mod.rs"
            if (!($960)) {
             label = 442;
             break L218;
            }
            $961 = (($rest2$sroa$0$02423$i) + ($idx$0$i)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
            $962 = HEAP8[$961>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
            $963 = ($962<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
            if (!($963)) {
             label = 442;
             break L218;
            }
           }
           $964 = HEAP32[$331>>2]|0; //@line 398 "/checkout/src/libstd/sys_common/backtrace.rs"
           FUNCTION_TABLE_viiii[$964 & 511]($_689$i,$w$0,$rest2$sroa$0$02423$i,$idx$0$i); //@line 398 "/checkout/src/libstd/sys_common/backtrace.rs"
           $965 = $_689$i; //@line 1172 "/checkout/src/libcore/result.rs"
           $966 = $965; //@line 1172 "/checkout/src/libcore/result.rs"
           $967 = HEAP32[$966>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
           $968 = (($965) + 4)|0; //@line 1172 "/checkout/src/libcore/result.rs"
           $969 = $968; //@line 1172 "/checkout/src/libcore/result.rs"
           $970 = HEAP32[$969>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
           $971 = $967&255; //@line 1172 "/checkout/src/libcore/result.rs"
           $972 = ($971<<24>>24)==(3); //@line 398 "/checkout/src/libstd/sys_common/backtrace.rs"
           $973 = (_bitshift64Lshr(($967|0),($970|0),8)|0); //@line 398 "/checkout/src/libstd/sys_common/backtrace.rs"
           $974 = tempRet0; //@line 398 "/checkout/src/libstd/sys_common/backtrace.rs"
           if (!($972)) {
            $983 = $974;$984 = $973;$_82$sroa$0$0$ph = $971;
            break L98;
           }
           if ($or$cond$i$i$i$i1194$i) {
            $$pre$i$i$i1210$i = (($rest2$sroa$0$02423$i) + ($idx$0$i)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
            $$pre$phi$i$i$i1215$iZ2D = $$pre$i$i$i1210$i;
           } else {
            $975 = ($rest2$sroa$80$02424$i>>>0)>($idx$0$i>>>0); //@line 792 "/checkout/src/libcore/slice/mod.rs"
            if (!($975)) {
             label = 448;
             break L218;
            }
            $976 = (($rest2$sroa$0$02423$i) + ($idx$0$i)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
            $977 = HEAP8[$976>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
            $978 = ($977<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
            if ($978) {
             $$pre$phi$i$i$i1215$iZ2D = $976;
            } else {
             label = 448;
             break L218;
            }
           }
           $979 = (($rest2$sroa$80$02424$i) - ($idx$0$i))|0; //@line 1975 "/checkout/src/libcore/str/mod.rs"
           $$pre$phi$i$i$i1215$sink$iZ2D = $$pre$phi$i$i$i1215$iZ2D;$rest2$sroa$80$0$be$i = $979;
          }
          $980 = ($rest2$sroa$80$0$be$i|0)==(0); //@line 2508 "/checkout/src/libcore/str/mod.rs"
          if ($980) {
           break L270;
          } else {
           $rest2$sroa$0$02423$i = $$pre$phi$i$i$i1215$sink$iZ2D;$rest2$sroa$80$02424$i = $rest2$sroa$80$0$be$i;
           label = 195;
          }
         }
         $941 = HEAP32[$331>>2]|0; //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
         FUNCTION_TABLE_viiii[$941 & 511]($_666$i,$w$0,$rest2$sroa$0$02423$i,$rest2$sroa$80$02424$i); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
         $942 = $_666$i; //@line 1172 "/checkout/src/libcore/result.rs"
         $943 = $942; //@line 1172 "/checkout/src/libcore/result.rs"
         $944 = HEAP32[$943>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
         $945 = (($942) + 4)|0; //@line 1172 "/checkout/src/libcore/result.rs"
         $946 = $945; //@line 1172 "/checkout/src/libcore/result.rs"
         $947 = HEAP32[$946>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
         $948 = $944&255; //@line 1172 "/checkout/src/libcore/result.rs"
         $949 = ($948<<24>>24)==(3); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
         $950 = (_bitshift64Lshr(($944|0),($947|0),8)|0); //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
         $951 = tempRet0; //@line 370 "/checkout/src/libstd/sys_common/backtrace.rs"
         if (!($949)) {
          $983 = $951;$984 = $950;$_82$sroa$0$0$ph = $948;
          break L98;
         }
        }
       } while(0);
       $957 = ($441|0)==(0); //@line 2508 "/checkout/src/libcore/str/mod.rs"
       if ($957) {
        label = 452;
        break L98;
       } else {
        $first$0$off02427$i = 0;$inner$sroa$0$52429$i = $$in$i;$inner$sroa$14$52428$i = $441;
       }
      }
      switch (label|0) {
       case 166: {
        __ZN4core9panicking5panic17h9fa3414033a56a4dE(8712); //@line 20 "/checkout/src/libcore/macros.rs"
        // unreachable;
        break;
       }
       case 173: {
        __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($inner$sroa$0$52429$i,$inner$sroa$14$52428$i,0,$425); //@line 1940 "/checkout/src/libcore/str/mod.rs"
        // unreachable; //@line 1940 "/checkout/src/libcore/str/mod.rs"
        break;
       }
       case 175: {
        $432 = ((($_192$i)) + 1|0); //@line 782 "/checkout/src/libcore/result.rs"
        $433 = HEAP8[$432>>0]|0; //@line 782 "/checkout/src/libcore/result.rs"
        __ZN4core6result13unwrap_failed17hd5ce2772ab9af5feE(22190,43,$433); //@line 782 "/checkout/src/libcore/result.rs"
        // unreachable;
        break;
       }
       case 180: {
        __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($388,$$sink$i1198,$434,$$sink$i1198); //@line 1987 "/checkout/src/libcore/str/mod.rs"
        // unreachable; //@line 1987 "/checkout/src/libcore/str/mod.rs"
        break;
       }
       case 188: {
        __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($388,$$sink$lcssa2460$i,1,$$sink$lcssa2460$i); //@line 1987 "/checkout/src/libcore/str/mod.rs"
        // unreachable; //@line 1987 "/checkout/src/libcore/str/mod.rs"
        break;
       }
       case 191: {
        __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($388,$434,1,$434); //@line 1987 "/checkout/src/libcore/str/mod.rs"
        // unreachable; //@line 1987 "/checkout/src/libcore/str/mod.rs"
        break;
       }
       case 201: {
        __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($rest2$sroa$0$02423$i,$rest2$sroa$80$02424$i,1,$rest2$sroa$80$02424$i); //@line 1987 "/checkout/src/libcore/str/mod.rs"
        // unreachable; //@line 1987 "/checkout/src/libcore/str/mod.rs"
        break;
       }
       case 225: {
        __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($rest2$sroa$0$02423$i,$rest2$sroa$80$02424$i,$$sink688$i,$rest2$sroa$80$02424$i); //@line 1987 "/checkout/src/libcore/str/mod.rs"
        // unreachable; //@line 1987 "/checkout/src/libcore/str/mod.rs"
        break;
       }
       case 254: {
        __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($rest2$sroa$0$02423$i,$rest2$sroa$80$02424$i,4,$rest2$sroa$80$02424$i); //@line 1987 "/checkout/src/libcore/str/mod.rs"
        // unreachable; //@line 1987 "/checkout/src/libcore/str/mod.rs"
        break;
       }
       case 263: {
        __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($rest2$sroa$0$02423$i,$rest2$sroa$80$02424$i,4,$rest2$sroa$80$02424$i); //@line 1987 "/checkout/src/libcore/str/mod.rs"
        // unreachable; //@line 1987 "/checkout/src/libcore/str/mod.rs"
        break;
       }
       case 272: {
        __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($rest2$sroa$0$02423$i,$rest2$sroa$80$02424$i,4,$rest2$sroa$80$02424$i); //@line 1987 "/checkout/src/libcore/str/mod.rs"
        // unreachable; //@line 1987 "/checkout/src/libcore/str/mod.rs"
        break;
       }
       case 281: {
        __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($rest2$sroa$0$02423$i,$rest2$sroa$80$02424$i,4,$rest2$sroa$80$02424$i); //@line 1987 "/checkout/src/libcore/str/mod.rs"
        // unreachable; //@line 1987 "/checkout/src/libcore/str/mod.rs"
        break;
       }
       case 290: {
        __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($rest2$sroa$0$02423$i,$rest2$sroa$80$02424$i,4,$rest2$sroa$80$02424$i); //@line 1987 "/checkout/src/libcore/str/mod.rs"
        // unreachable; //@line 1987 "/checkout/src/libcore/str/mod.rs"
        break;
       }
       case 299: {
        __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($rest2$sroa$0$02423$i,$rest2$sroa$80$02424$i,4,$rest2$sroa$80$02424$i); //@line 1987 "/checkout/src/libcore/str/mod.rs"
        // unreachable; //@line 1987 "/checkout/src/libcore/str/mod.rs"
        break;
       }
       case 308: {
        __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($rest2$sroa$0$02423$i,$rest2$sroa$80$02424$i,4,$rest2$sroa$80$02424$i); //@line 1987 "/checkout/src/libcore/str/mod.rs"
        // unreachable; //@line 1987 "/checkout/src/libcore/str/mod.rs"
        break;
       }
       case 320: {
        __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($rest2$sroa$0$02423$i,$rest2$sroa$80$02424$i,3,$rest2$sroa$80$02424$i); //@line 1987 "/checkout/src/libcore/str/mod.rs"
        // unreachable; //@line 1987 "/checkout/src/libcore/str/mod.rs"
        break;
       }
       case 332: {
        __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($rest2$sroa$0$02423$i,$rest2$sroa$80$02424$i,5,$rest2$sroa$80$02424$i); //@line 1987 "/checkout/src/libcore/str/mod.rs"
        // unreachable; //@line 1987 "/checkout/src/libcore/str/mod.rs"
        break;
       }
       case 344: {
        __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($rest2$sroa$0$02423$i,$rest2$sroa$80$02424$i,5,$rest2$sroa$80$02424$i); //@line 1987 "/checkout/src/libcore/str/mod.rs"
        // unreachable; //@line 1987 "/checkout/src/libcore/str/mod.rs"
        break;
       }
       case 356: {
        __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($rest2$sroa$0$02423$i,$rest2$sroa$80$02424$i,5,$rest2$sroa$80$02424$i); //@line 1987 "/checkout/src/libcore/str/mod.rs"
        // unreachable; //@line 1987 "/checkout/src/libcore/str/mod.rs"
        break;
       }
       case 368: {
        __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($rest2$sroa$0$02423$i,$rest2$sroa$80$02424$i,5,$rest2$sroa$80$02424$i); //@line 1987 "/checkout/src/libcore/str/mod.rs"
        // unreachable; //@line 1987 "/checkout/src/libcore/str/mod.rs"
        break;
       }
       case 380: {
        __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($rest2$sroa$0$02423$i,$rest2$sroa$80$02424$i,5,$rest2$sroa$80$02424$i); //@line 1987 "/checkout/src/libcore/str/mod.rs"
        // unreachable; //@line 1987 "/checkout/src/libcore/str/mod.rs"
        break;
       }
       case 392: {
        __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($rest2$sroa$0$02423$i,$rest2$sroa$80$02424$i,5,$rest2$sroa$80$02424$i); //@line 1987 "/checkout/src/libcore/str/mod.rs"
        // unreachable; //@line 1987 "/checkout/src/libcore/str/mod.rs"
        break;
       }
       case 404: {
        __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($rest2$sroa$0$02423$i,$rest2$sroa$80$02424$i,5,$rest2$sroa$80$02424$i); //@line 1987 "/checkout/src/libcore/str/mod.rs"
        // unreachable; //@line 1987 "/checkout/src/libcore/str/mod.rs"
        break;
       }
       case 416: {
        __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($rest2$sroa$0$02423$i,$rest2$sroa$80$02424$i,5,$rest2$sroa$80$02424$i); //@line 1987 "/checkout/src/libcore/str/mod.rs"
        // unreachable; //@line 1987 "/checkout/src/libcore/str/mod.rs"
        break;
       }
       case 428: {
        __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($rest2$sroa$0$02423$i,$rest2$sroa$80$02424$i,5,$rest2$sroa$80$02424$i); //@line 1987 "/checkout/src/libcore/str/mod.rs"
        // unreachable; //@line 1987 "/checkout/src/libcore/str/mod.rs"
        break;
       }
       case 436: {
        __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($rest2$sroa$0$02423$i,$rest2$sroa$80$02424$i,5,$rest2$sroa$80$02424$i); //@line 1987 "/checkout/src/libcore/str/mod.rs"
        // unreachable; //@line 1987 "/checkout/src/libcore/str/mod.rs"
        break;
       }
       case 442: {
        __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($rest2$sroa$0$02423$i,$rest2$sroa$80$02424$i,0,$idx$0$i); //@line 1940 "/checkout/src/libcore/str/mod.rs"
        // unreachable; //@line 1940 "/checkout/src/libcore/str/mod.rs"
        break;
       }
       case 448: {
        __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($rest2$sroa$0$02423$i,$rest2$sroa$80$02424$i,$idx$0$i,$rest2$sroa$80$02424$i); //@line 1987 "/checkout/src/libcore/str/mod.rs"
        // unreachable; //@line 1987 "/checkout/src/libcore/str/mod.rs"
        break;
       }
      }
     }
    }
   } while(0);
   if ((label|0) == 118) {
    $296 = ((($w$1)) + 20|0); //@line 310 "/checkout/src/libstd/sys_common/backtrace.rs"
    $297 = HEAP32[$296>>2]|0; //@line 310 "/checkout/src/libstd/sys_common/backtrace.rs"
    FUNCTION_TABLE_viiii[$297 & 511]($_120$i,$w$0,$41,$s$sroa$17$0$i); //@line 310 "/checkout/src/libstd/sys_common/backtrace.rs"
    $298 = $_120$i; //@line 1172 "/checkout/src/libcore/result.rs"
    $299 = $298; //@line 1172 "/checkout/src/libcore/result.rs"
    $300 = HEAP32[$299>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
    $301 = (($298) + 4)|0; //@line 1172 "/checkout/src/libcore/result.rs"
    $302 = $301; //@line 1172 "/checkout/src/libcore/result.rs"
    $303 = HEAP32[$302>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
    $304 = $300&255; //@line 1172 "/checkout/src/libcore/result.rs"
    $305 = ($304<<24>>24)==(3); //@line 310 "/checkout/src/libstd/sys_common/backtrace.rs"
    $306 = (_bitshift64Lshr(($300|0),($303|0),8)|0); //@line 310 "/checkout/src/libstd/sys_common/backtrace.rs"
    $307 = tempRet0; //@line 310 "/checkout/src/libstd/sys_common/backtrace.rs"
    if ($305) {
     label = 452;
    } else {
     $983 = $307;$984 = $306;$_82$sroa$0$0$ph = $304;
    }
   }
   if ((label|0) == 452) {
    $$phi$trans$insert959 = ((($w$1)) + 20|0);
    $$pre = HEAP32[$$phi$trans$insert959>>2]|0;
    $981 = $$pre;
    break;
   }
   $982 = $983 & 16777215;
   $985 = (_bitshift64Shl(($984|0),($982|0),8)|0); //@line 193 "/checkout/src/libstd/sys_common/backtrace.rs"
   $986 = tempRet0; //@line 193 "/checkout/src/libstd/sys_common/backtrace.rs"
   $987 = $_82$sroa$0$0$ph&255; //@line 193 "/checkout/src/libstd/sys_common/backtrace.rs"
   $988 = $985 | $987; //@line 193 "/checkout/src/libstd/sys_common/backtrace.rs"
   $989 = $0; //@line 1180 "/checkout/src/libcore/result.rs"
   $990 = $989; //@line 1180 "/checkout/src/libcore/result.rs"
   HEAP32[$990>>2] = $988; //@line 1180 "/checkout/src/libcore/result.rs"
   $991 = (($989) + 4)|0; //@line 1180 "/checkout/src/libcore/result.rs"
   $992 = $991; //@line 1180 "/checkout/src/libcore/result.rs"
   HEAP32[$992>>2] = $986; //@line 1180 "/checkout/src/libcore/result.rs"
   STACKTOP = sp;return; //@line 197 "/checkout/src/libstd/sys_common/backtrace.rs"
  }
 } while(0);
 FUNCTION_TABLE_viiii[$981 & 511]($0,$w$0,8804,1); //@line 196 "/checkout/src/libstd/sys_common/backtrace.rs"
 STACKTOP = sp;return; //@line 197 "/checkout/src/libstd/sys_common/backtrace.rs"
}
function __ZN56__LT_core__str__SplitInternal_LT__u27_a_C__u20_P_GT__GT_9next_back17h46532ac3f86e6e8fE($0,$self) {
 $0 = $0|0;
 $self = $self|0;
 var $$$$$i$i$i = 0, $$$$i$i$i = 0, $$$i$i$i = 0, $$pn = 0, $$pre = 0, $$pre17 = 0, $$pre18 = 0, $$sink = 0, $$sink3$in = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $_0$0$i$i$i$i = 0, $_0$0$i9$i$i$i$i = 0, $_18 = 0, $_7 = 0, $ch$0$i$i$i$i = 0, $ch$1$i$i$i$i = 0, $not$ = 0, $or$cond$i$i$i$i$i$i = 0, $phitmp$i$i$i$i = 0, $switch = 0, $switch$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_18 = sp + 8|0;
 $_7 = sp;
 $1 = ((($self)) + 73|0); //@line 1081 "/checkout/src/libcore/str/mod.rs"
 $2 = HEAP8[$1>>0]|0; //@line 1081 "/checkout/src/libcore/str/mod.rs"
 $3 = ($2<<24>>24)==(0); //@line 1081 "/checkout/src/libcore/str/mod.rs"
 if (!($3)) {
  HEAP32[$0>>2] = 0; //@line 1081 "/checkout/src/libcore/str/mod.rs"
  STACKTOP = sp;return; //@line 1103 "/checkout/src/libcore/str/mod.rs"
 }
 $4 = ((($self)) + 72|0); //@line 1083 "/checkout/src/libcore/str/mod.rs"
 $5 = HEAP8[$4>>0]|0; //@line 1083 "/checkout/src/libcore/str/mod.rs"
 $6 = ($5<<24>>24)==(0); //@line 1083 "/checkout/src/libcore/str/mod.rs"
 L5: do {
  if ($6) {
   HEAP8[$4>>0] = 1; //@line 1084 "/checkout/src/libcore/str/mod.rs"
   __ZN56__LT_core__str__SplitInternal_LT__u27_a_C__u20_P_GT__GT_9next_back17h46532ac3f86e6e8fE($_7,$self); //@line 1085 "/checkout/src/libcore/str/mod.rs"
   $7 = HEAP32[$_7>>2]|0; //@line 1086 "/checkout/src/libcore/str/mod.rs"
   $not$ = ($7|0)==(0|0); //@line 1086 "/checkout/src/libcore/str/mod.rs"
   $8 = $7; //@line 1086 "/checkout/src/libcore/str/mod.rs"
   if ($not$) {
    label = 7;
   } else {
    $13 = ((($_7)) + 4|0); //@line 1086 "/checkout/src/libcore/str/mod.rs"
    $10 = HEAP32[$13>>2]|0; //@line 1086 "/checkout/src/libcore/str/mod.rs"
    $14 = ($10|0)==(0); //@line 2508 "/checkout/src/libcore/str/mod.rs"
    if ($14) {
     label = 7;
    } else {
     HEAP32[$0>>2] = $8; //@line 1086 "/checkout/src/libcore/str/mod.rs"
     $9 = ((($0)) + 4|0); //@line 1086 "/checkout/src/libcore/str/mod.rs"
     HEAP32[$9>>2] = $10; //@line 1086 "/checkout/src/libcore/str/mod.rs"
    }
   }
   do {
    if ((label|0) == 7) {
     $11 = HEAP8[$1>>0]|0; //@line 1087 "/checkout/src/libcore/str/mod.rs"
     $12 = ($11<<24>>24)==(0); //@line 1087 "/checkout/src/libcore/str/mod.rs"
     if ($12) {
      break L5;
     } else {
      HEAP32[$0>>2] = 0; //@line 1087 "/checkout/src/libcore/str/mod.rs"
      break;
     }
    }
   } while(0);
   STACKTOP = sp;return; //@line 1103 "/checkout/src/libcore/str/mod.rs"
  }
 } while(0);
 $15 = ((($self)) + 48|0); //@line 623 "/checkout/src/libcore/str/pattern.rs"
 $16 = HEAP32[$15>>2]|0; //@line 623 "/checkout/src/libcore/str/pattern.rs"
 $17 = HEAP32[$self>>2]|0; //@line 744 "/checkout/src/libcore/str/pattern.rs"
 $switch$i = ($17|0)==(1); //@line 744 "/checkout/src/libcore/str/pattern.rs"
 do {
  if ($switch$i) {
   $21 = ((($self)) + 8|0); //@line 753 "/checkout/src/libcore/str/pattern.rs"
   $22 = ((($self)) + 36|0); //@line 754 "/checkout/src/libcore/str/pattern.rs"
   $23 = HEAP32[$22>>2]|0; //@line 754 "/checkout/src/libcore/str/pattern.rs"
   $24 = ($23|0)==(-1); //@line 754 "/checkout/src/libcore/str/pattern.rs"
   $25 = ((($self)) + 52|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ((($self)) + 56|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ((($self)) + 60|0);
   $30 = HEAP32[$29>>2]|0;
   if ($24) {
    __ZN4core3str7pattern14TwoWaySearcher9next_back17h5a458bf414844c6eE($_18,$21,$16,$26,$28,$30,1); //@line 757 "/checkout/src/libcore/str/pattern.rs"
    break;
   } else {
    __ZN4core3str7pattern14TwoWaySearcher9next_back17h5a458bf414844c6eE($_18,$21,$16,$26,$28,$30,0); //@line 761 "/checkout/src/libcore/str/pattern.rs"
    break;
   }
  } else {
   $18 = ((($self)) + 52|0);
   $19 = ((($self)) + 8|0);
   $20 = ((($self)) + 13|0);
   $$pre = HEAP8[$20>>0]|0;
   $$pre17 = HEAP32[$19>>2]|0;
   $$pre18 = HEAP32[$18>>2]|0;
   $32 = $$pre;$36 = $$pre17;
   while(1) {
    $31 = ($32<<24>>24)!=(0); //@line 706 "/checkout/src/libcore/str/pattern.rs"
    $33 = $31 ^ 1; //@line 707 "/checkout/src/libcore/str/pattern.rs"
    $34 = $33&1; //@line 707 "/checkout/src/libcore/str/pattern.rs"
    HEAP8[$20>>0] = $34; //@line 707 "/checkout/src/libcore/str/pattern.rs"
    $35 = ($36|0)==(0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
    $37 = ($$pre18|0)==($36|0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
    $or$cond$i$i$i$i$i$i = $35 | $37; //@line 2438 "/checkout/src/libcore/str/mod.rs"
    if (!($or$cond$i$i$i$i$i$i)) {
     $38 = ($$pre18>>>0)>($36>>>0); //@line 792 "/checkout/src/libcore/slice/mod.rs"
     if (!($38)) {
      label = 18;
      break;
     }
     $39 = (($16) + ($36)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $40 = HEAP8[$39>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
     $41 = ($40<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
     if (!($41)) {
      label = 18;
      break;
     }
    }
    do {
     if ($35) {
      $_0$0$i$i$i$i = 1114112;
     } else {
      $42 = (($16) + ($36)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
      $43 = ((($42)) + -1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
      $44 = HEAP8[$43>>0]|0; //@line 534 "/checkout/src/libcore/str/mod.rs"
      $45 = ($44<<24>>24)>(-1); //@line 534 "/checkout/src/libcore/str/mod.rs"
      if ($45) {
       $46 = $44&255; //@line 534 "/checkout/src/libcore/str/mod.rs"
       $_0$0$i$i$i$i = $46;
       break;
      }
      $47 = ($43|0)==($16|0); //@line 1212 "/checkout/src/libcore/slice/mod.rs"
      if ($47) {
       $ch$1$i$i$i$i = 0;
      } else {
       $48 = ((($42)) + -2|0); //@line 623 "/checkout/src/libcore/ptr.rs"
       $49 = HEAP8[$48>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
       $50 = $49 & 31; //@line 472 "/checkout/src/libcore/str/mod.rs"
       $51 = $50&255; //@line 472 "/checkout/src/libcore/str/mod.rs"
       $52 = $49 & -64; //@line 481 "/checkout/src/libcore/str/mod.rs"
       $53 = ($52<<24>>24)==(-128); //@line 481 "/checkout/src/libcore/str/mod.rs"
       if ($53) {
        $54 = ($48|0)==($16|0); //@line 1212 "/checkout/src/libcore/slice/mod.rs"
        if ($54) {
         $ch$0$i$i$i$i = 0;
        } else {
         $55 = ((($42)) + -3|0); //@line 623 "/checkout/src/libcore/ptr.rs"
         $56 = HEAP8[$55>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
         $57 = $56 & 15; //@line 472 "/checkout/src/libcore/str/mod.rs"
         $58 = $57&255; //@line 472 "/checkout/src/libcore/str/mod.rs"
         $59 = $56 & -64; //@line 481 "/checkout/src/libcore/str/mod.rs"
         $60 = ($59<<24>>24)==(-128); //@line 481 "/checkout/src/libcore/str/mod.rs"
         if ($60) {
          $61 = ($55|0)==($16|0); //@line 1212 "/checkout/src/libcore/slice/mod.rs"
          if ($61) {
           $_0$0$i9$i$i$i$i = 0;
          } else {
           $62 = ((($42)) + -4|0); //@line 623 "/checkout/src/libcore/ptr.rs"
           $63 = HEAP8[$62>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
           $phitmp$i$i$i$i = $63 & 7; //@line 485 "/checkout/src/libcore/str/mod.rs"
           $_0$0$i9$i$i$i$i = $phitmp$i$i$i$i;
          }
          $64 = $_0$0$i9$i$i$i$i&255; //@line 472 "/checkout/src/libcore/str/mod.rs"
          $65 = $64 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
          $66 = $56 & 63; //@line 476 "/checkout/src/libcore/str/mod.rs"
          $67 = $66&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
          $68 = $65 | $67; //@line 476 "/checkout/src/libcore/str/mod.rs"
          $ch$0$i$i$i$i = $68;
         } else {
          $ch$0$i$i$i$i = $58;
         }
        }
        $69 = $ch$0$i$i$i$i << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
        $70 = $49 & 63; //@line 476 "/checkout/src/libcore/str/mod.rs"
        $71 = $70&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
        $72 = $69 | $71; //@line 476 "/checkout/src/libcore/str/mod.rs"
        $ch$1$i$i$i$i = $72;
       } else {
        $ch$1$i$i$i$i = $51;
       }
      }
      $73 = $ch$1$i$i$i$i << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
      $74 = $44 & 63; //@line 476 "/checkout/src/libcore/str/mod.rs"
      $75 = $74&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
      $76 = $73 | $75; //@line 476 "/checkout/src/libcore/str/mod.rs"
      $_0$0$i$i$i$i = $76;
     }
    } while(0);
    if ($31) {
     label = 35;
     break;
    }
    $81 = ($_0$0$i$i$i$i|0)==(1114112); //@line 711 "/checkout/src/libcore/str/pattern.rs"
    if ($81) {
     label = 34;
     break;
    }
    $77 = ($_0$0$i$i$i$i>>>0)<(128); //@line 463 "/checkout/src/libcore/char.rs"
    $78 = ($_0$0$i$i$i$i>>>0)<(2048); //@line 465 "/checkout/src/libcore/char.rs"
    $79 = ($_0$0$i$i$i$i>>>0)<(65536); //@line 467 "/checkout/src/libcore/char.rs"
    $$$i$i$i = $79 ? 3 : 4; //@line 467 "/checkout/src/libcore/char.rs"
    $$$$i$i$i = $78 ? 2 : $$$i$i$i; //@line 465 "/checkout/src/libcore/char.rs"
    $$$$$i$i$i = $77 ? 1 : $$$$i$i$i; //@line 463 "/checkout/src/libcore/char.rs"
    $80 = (($36) - ($$$$$i$i$i))|0; //@line 713 "/checkout/src/libcore/str/pattern.rs"
    HEAP32[$19>>2] = $80; //@line 713 "/checkout/src/libcore/str/pattern.rs"
    $32 = $34;$36 = $80;
   }
   if ((label|0) == 18) {
    __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($16,$$pre18,0,$36); //@line 1940 "/checkout/src/libcore/str/mod.rs"
    // unreachable; //@line 1940 "/checkout/src/libcore/str/mod.rs"
   }
   else if ((label|0) == 34) {
    HEAP32[$_18>>2] = 0; //@line 748 "/checkout/src/libcore/str/pattern.rs"
    break;
   }
   else if ((label|0) == 35) {
    HEAP32[$_18>>2] = 1; //@line 747 "/checkout/src/libcore/str/pattern.rs"
    $82 = ((($_18)) + 4|0); //@line 747 "/checkout/src/libcore/str/pattern.rs"
    HEAP32[$82>>2] = $36; //@line 747 "/checkout/src/libcore/str/pattern.rs"
    $83 = ((($_18)) + 8|0); //@line 747 "/checkout/src/libcore/str/pattern.rs"
    HEAP32[$83>>2] = $36; //@line 747 "/checkout/src/libcore/str/pattern.rs"
    break;
   }
  }
 } while(0);
 $84 = HEAP32[$_18>>2]|0; //@line 1093 "/checkout/src/libcore/str/mod.rs"
 $switch = ($84|0)==(1); //@line 1093 "/checkout/src/libcore/str/mod.rs"
 if ($switch) {
  $90 = ((($_18)) + 4|0); //@line 1093 "/checkout/src/libcore/str/mod.rs"
  $91 = HEAP32[$90>>2]|0; //@line 1093 "/checkout/src/libcore/str/mod.rs"
  $92 = ((($_18)) + 8|0); //@line 1093 "/checkout/src/libcore/str/mod.rs"
  $93 = HEAP32[$92>>2]|0; //@line 1093 "/checkout/src/libcore/str/mod.rs"
  $94 = ((($self)) + 68|0); //@line 1094 "/checkout/src/libcore/str/mod.rs"
  $95 = HEAP32[$94>>2]|0; //@line 1094 "/checkout/src/libcore/str/mod.rs"
  $96 = (($95) - ($93))|0; //@line 1880 "/checkout/src/libcore/str/mod.rs"
  HEAP32[$94>>2] = $91; //@line 1095 "/checkout/src/libcore/str/mod.rs"
  $$pn = $93;$$sink = $96;
 } else {
  HEAP8[$1>>0] = 1; //@line 1099 "/checkout/src/libcore/str/mod.rs"
  $85 = ((($self)) + 64|0); //@line 1100 "/checkout/src/libcore/str/mod.rs"
  $86 = HEAP32[$85>>2]|0; //@line 1100 "/checkout/src/libcore/str/mod.rs"
  $87 = ((($self)) + 68|0); //@line 1100 "/checkout/src/libcore/str/mod.rs"
  $88 = HEAP32[$87>>2]|0; //@line 1100 "/checkout/src/libcore/str/mod.rs"
  $89 = (($88) - ($86))|0; //@line 1880 "/checkout/src/libcore/str/mod.rs"
  $$pn = $86;$$sink = $89;
 }
 $$sink3$in = (($16) + ($$pn)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
 HEAP32[$0>>2] = $$sink3$in;
 $97 = ((($0)) + 4|0);
 HEAP32[$97>>2] = $$sink;
 STACKTOP = sp;return; //@line 1103 "/checkout/src/libcore/str/mod.rs"
}
function __ZN4core3str7pattern14TwoWaySearcher9next_back17h5a458bf414844c6eE($0,$self,$haystack$0,$haystack$1,$needle$0,$needle$1,$long_period) {
 $0 = $0|0;
 $self = $self|0;
 $haystack$0 = $haystack$0|0;
 $haystack$1 = $haystack$1|0;
 $needle$0 = $needle$0|0;
 $needle$1 = $needle$1|0;
 $long_period = $long_period|0;
 var $$arith = 0, $$overflow = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $33$phi = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$sroa$speculated$i = 0, $crit$0 = 0, $iter$sroa$5$0 = 0, $iter1$sroa$0$0 = 0, $needle_end$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($self)) + 24|0); //@line 1039 "/checkout/src/libcore/str/pattern.rs"
 $2 = HEAP32[$1>>2]|0; //@line 1045 "/checkout/src/libcore/str/pattern.rs"
 $3 = (($2) - ($needle$1))|0; //@line 1820 "/checkout/src/libcore/num/mod.rs"
 $4 = ($3>>>0)<($haystack$1>>>0); //@line 792 "/checkout/src/libcore/slice/mod.rs"
 L1: do {
  if ($4) {
   $5 = ((($self)) + 32|0);
   $6 = ((($self)) + 12|0);
   $7 = ((($self)) + 16|0);
   $8 = $self;
   $9 = $8;
   $10 = HEAP32[$9>>2]|0;
   $11 = (($8) + 4)|0;
   $12 = $11;
   $13 = HEAP32[$12>>2]|0;
   $14 = HEAP32[$6>>2]|0;
   $15 = HEAP32[$7>>2]|0;
   $63 = $2;$64 = $3;
   L3: while(1) {
    $65 = $63;$66 = $64;
    L5: while(1) {
     $17 = $66;$33 = $65;
     while(1) {
      $16 = (($haystack$0) + ($17)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
      $18 = HEAP8[$16>>0]|0; //@line 1046 "/checkout/src/libcore/str/pattern.rs"
      $19 = $18 & 63; //@line 941 "/checkout/src/libcore/str/pattern.rs"
      $20 = $19&255; //@line 941 "/checkout/src/libcore/str/pattern.rs"
      $21 = (_bitshift64Shl(1,0,($20|0))|0); //@line 941 "/checkout/src/libcore/str/pattern.rs"
      $22 = tempRet0; //@line 941 "/checkout/src/libcore/str/pattern.rs"
      $23 = $21 & $10; //@line 941 "/checkout/src/libcore/str/pattern.rs"
      $24 = $22 & $13; //@line 941 "/checkout/src/libcore/str/pattern.rs"
      $25 = ($23|0)==(0); //@line 941 "/checkout/src/libcore/str/pattern.rs"
      $26 = ($24|0)==(0); //@line 941 "/checkout/src/libcore/str/pattern.rs"
      $27 = $25 & $26; //@line 941 "/checkout/src/libcore/str/pattern.rs"
      if (!($27)) {
       break;
      }
      HEAP32[$1>>2] = $17; //@line 1059 "/checkout/src/libcore/str/pattern.rs"
      if (!($long_period)) {
       HEAP32[$5>>2] = $needle$1; //@line 1061 "/checkout/src/libcore/str/pattern.rs"
      }
      $28 = (($17) - ($needle$1))|0; //@line 1820 "/checkout/src/libcore/num/mod.rs"
      $29 = ($28>>>0)<($haystack$1>>>0); //@line 792 "/checkout/src/libcore/slice/mod.rs"
      if ($29) {
       $33$phi = $17;$17 = $28;$33 = $33$phi;
      } else {
       break L1;
      }
     }
     if ($long_period) {
      $crit$0 = $14;
     } else {
      $30 = HEAP32[$5>>2]|0; //@line 1068 "/checkout/src/libcore/str/pattern.rs"
      $31 = ($14>>>0)<=($30>>>0); //@line 848 "/checkout/src/libcore/cmp.rs"
      $_0$0$sroa$speculated$i = $31 ? $14 : $30; //@line 478 "/checkout/src/libcore/cmp.rs"
      $crit$0 = $_0$0$sroa$speculated$i;
     }
     $32 = (($33) - ($needle$1))|0;
     $iter$sroa$5$0 = $crit$0;
     while(1) {
      $34 = ($iter$sroa$5$0|0)==(0); //@line 846 "/checkout/src/libcore/cmp.rs"
      $35 = (($iter$sroa$5$0) + -1)|0; //@line 192 "/checkout/src/libcore/ops/arith.rs"
      if ($34) {
       break L5;
      }
      $37 = ($35>>>0)<($needle$1>>>0); //@line 1070 "/checkout/src/libcore/str/pattern.rs"
      if (!($37)) {
       label = 35;
       break L3;
      }
      $38 = (($35) + ($32))|0; //@line 1070 "/checkout/src/libcore/str/pattern.rs"
      $39 = ($38>>>0)<($haystack$1>>>0); //@line 825 "/checkout/src/libcore/slice/mod.rs"
      if (!($39)) {
       label = 18;
       break L3;
      }
      $40 = (($needle$0) + ($35)|0); //@line 1070 "/checkout/src/libcore/str/pattern.rs"
      $41 = HEAP8[$40>>0]|0; //@line 1070 "/checkout/src/libcore/str/pattern.rs"
      $42 = (($haystack$0) + ($38)|0); //@line 825 "/checkout/src/libcore/slice/mod.rs"
      $43 = HEAP8[$42>>0]|0; //@line 1070 "/checkout/src/libcore/str/pattern.rs"
      $44 = ($41<<24>>24)==($43<<24>>24); //@line 1070 "/checkout/src/libcore/str/pattern.rs"
      if ($44) {
       $iter$sroa$5$0 = $35;
      } else {
       break;
      }
     }
     $45 = (($35) + ($33))|0; //@line 1071 "/checkout/src/libcore/str/pattern.rs"
     $46 = (($45) - ($14))|0; //@line 1071 "/checkout/src/libcore/str/pattern.rs"
     HEAP32[$1>>2] = $46; //@line 1071 "/checkout/src/libcore/str/pattern.rs"
     if (!($long_period)) {
      HEAP32[$5>>2] = $needle$1; //@line 1073 "/checkout/src/libcore/str/pattern.rs"
     }
     $47 = (($46) - ($needle$1))|0; //@line 1820 "/checkout/src/libcore/num/mod.rs"
     $48 = ($47>>>0)<($haystack$1>>>0); //@line 792 "/checkout/src/libcore/slice/mod.rs"
     if ($48) {
      $65 = $46;$66 = $47;
     } else {
      break L1;
     }
    }
    $36 = HEAP32[$5>>2]|0; //@line 1081 "/checkout/src/libcore/str/pattern.rs"
    $needle_end$0 = $long_period ? $needle$1 : $36; //@line 1080 "/checkout/src/libcore/str/pattern.rs"
    $iter1$sroa$0$0 = $14;
    while(1) {
     $49 = ($iter1$sroa$0$0>>>0)<($needle_end$0>>>0); //@line 846 "/checkout/src/libcore/cmp.rs"
     if (!($49)) {
      label = 25;
      break L3;
     }
     $$arith = (($iter1$sroa$0$0) + 1)|0; //@line 1982 "/checkout/src/libcore/num/mod.rs"
     $$overflow = ($iter1$sroa$0$0>>>0)>(4294967294); //@line 1982 "/checkout/src/libcore/num/mod.rs"
     if ($$overflow) {
      label = 25;
      break L3;
     }
     $50 = ($iter1$sroa$0$0>>>0)<($needle$1>>>0); //@line 1083 "/checkout/src/libcore/str/pattern.rs"
     if (!($50)) {
      label = 36;
      break L3;
     }
     $51 = (($32) + ($iter1$sroa$0$0))|0; //@line 1083 "/checkout/src/libcore/str/pattern.rs"
     $52 = ($51>>>0)<($haystack$1>>>0); //@line 825 "/checkout/src/libcore/slice/mod.rs"
     if (!($52)) {
      label = 28;
      break L3;
     }
     $53 = (($needle$0) + ($iter1$sroa$0$0)|0); //@line 1083 "/checkout/src/libcore/str/pattern.rs"
     $54 = HEAP8[$53>>0]|0; //@line 1083 "/checkout/src/libcore/str/pattern.rs"
     $55 = (($haystack$0) + ($51)|0); //@line 825 "/checkout/src/libcore/slice/mod.rs"
     $56 = HEAP8[$55>>0]|0; //@line 1083 "/checkout/src/libcore/str/pattern.rs"
     $57 = ($54<<24>>24)==($56<<24>>24); //@line 1083 "/checkout/src/libcore/str/pattern.rs"
     if ($57) {
      $iter1$sroa$0$0 = $$arith;
     } else {
      break;
     }
    }
    $58 = (($33) - ($15))|0; //@line 1084 "/checkout/src/libcore/str/pattern.rs"
    HEAP32[$1>>2] = $58; //@line 1084 "/checkout/src/libcore/str/pattern.rs"
    if (!($long_period)) {
     HEAP32[$5>>2] = $15; //@line 1086 "/checkout/src/libcore/str/pattern.rs"
    }
    $59 = (($58) - ($needle$1))|0; //@line 1820 "/checkout/src/libcore/num/mod.rs"
    $60 = ($59>>>0)<($haystack$1>>>0); //@line 792 "/checkout/src/libcore/slice/mod.rs"
    if ($60) {
     $63 = $58;$64 = $59;
    } else {
     break L1;
    }
   }
   if ((label|0) == 18) {
    __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(8808,$38,$haystack$1); //@line 825 "/checkout/src/libcore/slice/mod.rs"
    // unreachable; //@line 825 "/checkout/src/libcore/slice/mod.rs"
   }
   else if ((label|0) == 25) {
    HEAP32[$1>>2] = $32; //@line 1095 "/checkout/src/libcore/str/pattern.rs"
    if (!($long_period)) {
     HEAP32[$5>>2] = $needle$1; //@line 1097 "/checkout/src/libcore/str/pattern.rs"
    }
    HEAP32[$0>>2] = 1; //@line 1225 "/checkout/src/libcore/str/pattern.rs"
    $61 = ((($0)) + 4|0); //@line 1225 "/checkout/src/libcore/str/pattern.rs"
    HEAP32[$61>>2] = $32; //@line 1225 "/checkout/src/libcore/str/pattern.rs"
    $62 = ((($0)) + 8|0); //@line 1225 "/checkout/src/libcore/str/pattern.rs"
    HEAP32[$62>>2] = $33; //@line 1225 "/checkout/src/libcore/str/pattern.rs"
    return; //@line 1102 "/checkout/src/libcore/str/pattern.rs"
   }
   else if ((label|0) == 28) {
    __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(8808,$51,$haystack$1); //@line 825 "/checkout/src/libcore/slice/mod.rs"
    // unreachable; //@line 825 "/checkout/src/libcore/slice/mod.rs"
   }
   else if ((label|0) == 35) {
    __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(8824,$35,$needle$1); //@line 1070 "/checkout/src/libcore/str/pattern.rs"
    // unreachable; //@line 1070 "/checkout/src/libcore/str/pattern.rs"
   }
   else if ((label|0) == 36) {
    __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(8840,$iter1$sroa$0$0,$needle$1); //@line 1083 "/checkout/src/libcore/str/pattern.rs"
    // unreachable; //@line 1083 "/checkout/src/libcore/str/pattern.rs"
   }
  }
 } while(0);
 HEAP32[$1>>2] = 0; //@line 1048 "/checkout/src/libcore/str/pattern.rs"
 HEAP32[$0>>2] = 0; //@line 1223 "/checkout/src/libcore/str/pattern.rs"
 return; //@line 1102 "/checkout/src/libcore/str/pattern.rs"
}
function __ZN4core3ptr13drop_in_place17hc7d659014c0d680dE_llvm_EF0F654A($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($arg0)) + 4|0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $1 = HEAP32[$0>>2]|0; //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $2 = ($1|0)==(0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 if ($2) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 $3 = HEAP32[$arg0>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 ___rust_dealloc($3,$1,1); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN5alloc4heap8box_free17h52dcefd88bd52819E_llvm_EF0F654A($ptr$0,$ptr$1) {
 $ptr$0 = $ptr$0|0;
 $ptr$1 = $ptr$1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ptr$1)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $1 = HEAP32[$0>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
 $2 = ($1|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
 if ($2) {
  return; //@line 265 "/checkout/src/liballoc/heap.rs"
 }
 $3 = ((($ptr$1)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $4 = HEAP32[$3>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
 ___rust_dealloc($ptr$0,$1,$4); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 265 "/checkout/src/liballoc/heap.rs"
}
function __ZN4core3ptr13drop_in_place17hf6ffb4315b6ccdc9E_llvm_EF0F654A($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($arg0)) + 4|0); //@line 1388 "/checkout/src/liballoc/vec.rs"
 $1 = HEAP32[$0>>2]|0; //@line 1388 "/checkout/src/liballoc/vec.rs"
 $2 = HEAP32[$arg0>>2]|0; //@line 1388 "/checkout/src/liballoc/vec.rs"
 HEAP32[$2>>2] = $1; //@line 1388 "/checkout/src/liballoc/vec.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h1cd4ce965c284f94E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_6$i = 0, $entry$i$i = 0, $iter$sroa$0$015$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $entry$i$i = sp + 8|0;
 $_6$i = sp;
 $0 = HEAP32[$self>>2]|0; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $1 = HEAP32[$0>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 $2 = ((($0)) + 8|0); //@line 1690 "/checkout/src/liballoc/vec.rs"
 $3 = HEAP32[$2>>2]|0; //@line 1690 "/checkout/src/liballoc/vec.rs"
 __ZN4core3fmt9Formatter10debug_list17h56ec3c72e2ce18dfE($_6$i,$f); //@line 1721 "/checkout/src/libcore/fmt/mod.rs"
 $4 = (($1) + ($3)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
 $5 = ($3|0)==(0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
 if ($5) {
  $8 = (__ZN4core3fmt8builders9DebugList6finish17h7208d0b6ae987befE($_6$i)|0); //@line 1721 "/checkout/src/libcore/fmt/mod.rs"
  STACKTOP = sp;return ($8|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 }
 $iter$sroa$0$015$i$i = $1;
 while(1) {
  $6 = ((($iter$sroa$0$015$i$i)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  HEAP32[$entry$i$i>>2] = $iter$sroa$0$015$i$i; //@line 412 "/checkout/src/libcore/fmt/builders.rs"
  (__ZN4core3fmt8builders9DebugList5entry17h1543c7a40da348bfE($_6$i,$entry$i$i,8024)|0); //@line 413 "/checkout/src/libcore/fmt/builders.rs"
  $7 = ($6|0)==($4|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
  if ($7) {
   break;
  } else {
   $iter$sroa$0$015$i$i = $6;
  }
 }
 $8 = (__ZN4core3fmt8builders9DebugList6finish17h7208d0b6ae987befE($_6$i)|0); //@line 1721 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return ($8|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN4core3ptr13drop_in_place17h70fec0c075b910d8E($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10$1$i1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 $1 = ((($arg0)) + 8|0); //@line 1701 "/checkout/src/liballoc/vec.rs"
 $2 = HEAP32[$1>>2]|0; //@line 1701 "/checkout/src/liballoc/vec.rs"
 $3 = (($0) + (($2*12)|0)|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $4 = ($2|0)==(0); //@line 59 "/checkout/src/libcore/ptr.rs"
 if (!($4)) {
  $_10$1$i1$i = $0;
  while(1) {
   $5 = ((($_10$1$i1$i)) + 12|0); //@line 59 "/checkout/src/libcore/ptr.rs"
   $6 = ((($_10$1$i1$i)) + 4|0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
   $7 = HEAP32[$6>>2]|0; //@line 225 "/checkout/src/liballoc/raw_vec.rs"
   $8 = ($7|0)==(0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
   if (!($8)) {
    $10 = HEAP32[$_10$1$i1$i>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
    ___rust_dealloc($10,$7,1); //@line 104 "/checkout/src/liballoc/heap.rs"
   }
   $9 = ($5|0)==($3|0); //@line 59 "/checkout/src/libcore/ptr.rs"
   if ($9) {
    break;
   } else {
    $_10$1$i1$i = $5;
   }
  }
 }
 $11 = ((($arg0)) + 4|0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $12 = HEAP32[$11>>2]|0; //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $13 = ($12|0)==(0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 if ($13) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 $14 = ($12*12)|0; //@line 232 "/checkout/src/liballoc/raw_vec.rs"
 $15 = HEAP32[$arg0>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 ___rust_dealloc($15,$14,4); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN85__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_alloc__vec__SpecExtend_LT_T_C__u20_I_GT__GT_9from_iter17h94e0c69c66786fbbE($0,$iterator) {
 $0 = $0|0;
 $iterator = $iterator|0;
 var $$$i$i$i$i = 0, $$fca$1$gep$i = 0, $$lcssa = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_28$i$sroa$4$0$$sroa_idx = 0, $_28$i$sroa$5$0$$sroa_idx = 0, $_34$i$sroa$0$0$copyload = 0, $_34$i$sroa$7$0$$sroa_idx = 0;
 var $_5$i$i$i = 0, $_5$sroa$0$0$copyload = 0, $_5$sroa$5$0$$sroa_idx = 0, $_5$sroa$5$0$copyload = 0, $_5$sroa$6$0$$sroa_idx = 0, $_5$sroa$6$0$copyload43 = 0, $__next$i$sroa$5$0$$sroa_idx = 0, $iter$i = 0, $local_len$i = 0, $personalityslot$sroa$0$1$i = 0, $personalityslot$sroa$8$1$i = 0, $ptr$0$i46 = 0, $vector = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_5$i$i$i = sp + 36|0;
 $iter$i = sp + 24|0;
 $local_len$i = sp + 16|0;
 $vector = sp;
 HEAP32[$vector>>2] = (4); //@line 322 "/checkout/src/liballoc/vec.rs"
 $1 = ((($vector)) + 4|0); //@line 322 "/checkout/src/liballoc/vec.rs"
 HEAP32[$1>>2] = 0; //@line 322 "/checkout/src/liballoc/vec.rs"
 $2 = ((($vector)) + 8|0); //@line 322 "/checkout/src/liballoc/vec.rs"
 HEAP32[$2>>2] = 0; //@line 322 "/checkout/src/liballoc/vec.rs"
 $_5$sroa$0$0$copyload = HEAP32[$iterator>>2]|0; //@line 1823 "/checkout/src/liballoc/vec.rs"
 $_5$sroa$5$0$$sroa_idx = ((($iterator)) + 4|0); //@line 1823 "/checkout/src/liballoc/vec.rs"
 $_5$sroa$5$0$copyload = HEAP32[$_5$sroa$5$0$$sroa_idx>>2]|0; //@line 1823 "/checkout/src/liballoc/vec.rs"
 $_5$sroa$6$0$$sroa_idx = ((($iterator)) + 8|0); //@line 1823 "/checkout/src/liballoc/vec.rs"
 $_5$sroa$6$0$copyload43 = HEAP32[$_5$sroa$6$0$$sroa_idx>>2]|0; //@line 1823 "/checkout/src/liballoc/vec.rs"
 $3 = ($_5$sroa$5$0$copyload|0)>($_5$sroa$0$0$copyload|0); //@line 113 "/checkout/src/libcore/iter/range.rs"
 $4 = (($_5$sroa$5$0$copyload) - ($_5$sroa$0$0$copyload))|0; //@line 664 "/checkout/src/libcore/num/mod.rs"
 $$$i$i$i$i = $3 ? $4 : 0; //@line 113 "/checkout/src/libcore/iter/range.rs"
 __THREW__ = 0;
 invoke_viii(438,($vector|0),0,($$$i$i$i$i|0)); //@line 461 "/checkout/src/liballoc/vec.rs"
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $30 = ___cxa_find_matching_catch_2()|0;
  $31 = tempRet0;
  $personalityslot$sroa$0$1$i = $30;$personalityslot$sroa$8$1$i = $31;
  __ZN4core3ptr13drop_in_place17h70fec0c075b910d8E($vector); //@line 1825 "/checkout/src/liballoc/vec.rs"
  ___resumeException($personalityslot$sroa$0$1$i|0);
  // unreachable;
 }
 $7 = HEAP32[$vector>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 $8 = HEAP32[$2>>2]|0; //@line 1701 "/checkout/src/liballoc/vec.rs"
 HEAP32[$local_len$i>>2] = $2; //@line 1839 "/checkout/src/liballoc/vec.rs"
 $$fca$1$gep$i = ((($local_len$i)) + 4|0); //@line 1839 "/checkout/src/liballoc/vec.rs"
 HEAP32[$$fca$1$gep$i>>2] = $8; //@line 1839 "/checkout/src/liballoc/vec.rs"
 HEAP32[$iter$i>>2] = $_5$sroa$0$0$copyload; //@line 1840 "/checkout/src/liballoc/vec.rs"
 $_28$i$sroa$4$0$$sroa_idx = ((($iter$i)) + 4|0); //@line 1840 "/checkout/src/liballoc/vec.rs"
 HEAP32[$_28$i$sroa$4$0$$sroa_idx>>2] = $_5$sroa$5$0$copyload; //@line 1840 "/checkout/src/liballoc/vec.rs"
 $_28$i$sroa$5$0$$sroa_idx = ((($iter$i)) + 8|0); //@line 1840 "/checkout/src/liballoc/vec.rs"
 HEAP32[$_28$i$sroa$5$0$$sroa_idx>>2] = $_5$sroa$6$0$copyload43; //@line 1840 "/checkout/src/liballoc/vec.rs"
 if (!($3)) {
  $$lcssa = $8;
  HEAP32[$2>>2] = $$lcssa; //@line 1388 "/checkout/src/liballoc/vec.rs"
  ;HEAP32[$0>>2]=HEAP32[$vector>>2]|0;HEAP32[$0+4>>2]=HEAP32[$vector+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$vector+8>>2]|0; //@line 1824 "/checkout/src/liballoc/vec.rs"
  STACKTOP = sp;return; //@line 1825 "/checkout/src/liballoc/vec.rs"
 }
 $9 = (($7) + (($8*12)|0)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
 $_34$i$sroa$7$0$$sroa_idx = ((($_5$i$i$i)) + 4|0);
 $11 = $_5$sroa$0$0$copyload;$27 = $8;$ptr$0$i46 = $9;
 while(1) {
  $10 = (($11) + 1)|0; //@line 1801 "/checkout/src/libcore/num/mod.rs"
  HEAP32[$iter$i>>2] = $10; //@line 240 "/checkout/src/libcore/ptr.rs"
  __THREW__ = 0;
  invoke_viii(439,($_5$i$i$i|0),($_28$i$sroa$5$0$$sroa_idx|0),($11|0)); //@line 404 "/checkout/src/libcore/option.rs"
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if ($13) {
   label = 9;
   break;
  }
  $_34$i$sroa$0$0$copyload = HEAP32[$_5$i$i$i>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
  $14 = $_34$i$sroa$7$0$$sroa_idx; //@line 404 "/checkout/src/libcore/option.rs"
  $15 = $14; //@line 404 "/checkout/src/libcore/option.rs"
  $16 = HEAP32[$15>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
  $17 = (($14) + 4)|0; //@line 404 "/checkout/src/libcore/option.rs"
  $18 = $17; //@line 404 "/checkout/src/libcore/option.rs"
  $19 = HEAP32[$18>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
  $20 = ($_34$i$sroa$0$0$copyload|0)==(0|0); //@line 1840 "/checkout/src/liballoc/vec.rs"
  if ($20) {
   $$lcssa = $27;
   label = 10;
   break;
  }
  HEAP32[$ptr$0$i46>>2] = $_34$i$sroa$0$0$copyload; //@line 364 "/checkout/src/libcore/ptr.rs"
  $__next$i$sroa$5$0$$sroa_idx = ((($ptr$0$i46)) + 4|0); //@line 364 "/checkout/src/libcore/ptr.rs"
  $21 = $__next$i$sroa$5$0$$sroa_idx; //@line 364 "/checkout/src/libcore/ptr.rs"
  $22 = $21; //@line 364 "/checkout/src/libcore/ptr.rs"
  HEAP32[$22>>2] = $16; //@line 364 "/checkout/src/libcore/ptr.rs"
  $23 = (($21) + 4)|0; //@line 364 "/checkout/src/libcore/ptr.rs"
  $24 = $23; //@line 364 "/checkout/src/libcore/ptr.rs"
  HEAP32[$24>>2] = $19; //@line 364 "/checkout/src/libcore/ptr.rs"
  $25 = ((($ptr$0$i46)) + 12|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $26 = (($27) + 1)|0; //@line 1381 "/checkout/src/liballoc/vec.rs"
  $28 = HEAP32[$_28$i$sroa$4$0$$sroa_idx>>2]|0; //@line 846 "/checkout/src/libcore/cmp.rs"
  $29 = ($10|0)<($28|0); //@line 846 "/checkout/src/libcore/cmp.rs"
  if ($29) {
   $11 = $10;$27 = $26;$ptr$0$i46 = $25;
  } else {
   $$lcssa = $26;
   label = 10;
   break;
  }
 }
 if ((label|0) == 9) {
  $32 = ___cxa_find_matching_catch_2()|0;
  $33 = tempRet0;
  HEAP32[$$fca$1$gep$i>>2] = $27; //@line 1381 "/checkout/src/liballoc/vec.rs"
  __ZN4core3ptr13drop_in_place17hf6ffb4315b6ccdc9E_llvm_EF0F654A($local_len$i); //@line 1846 "/checkout/src/liballoc/vec.rs"
  $personalityslot$sroa$0$1$i = $32;$personalityslot$sroa$8$1$i = $33;
  __ZN4core3ptr13drop_in_place17h70fec0c075b910d8E($vector); //@line 1825 "/checkout/src/liballoc/vec.rs"
  ___resumeException($personalityslot$sroa$0$1$i|0);
  // unreachable;
 }
 else if ((label|0) == 10) {
  HEAP32[$2>>2] = $$lcssa; //@line 1388 "/checkout/src/liballoc/vec.rs"
  ;HEAP32[$0>>2]=HEAP32[$vector>>2]|0;HEAP32[$0+4>>2]=HEAP32[$vector+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$vector+8>>2]|0; //@line 1824 "/checkout/src/liballoc/vec.rs"
  STACKTOP = sp;return; //@line 1825 "/checkout/src/liballoc/vec.rs"
 }
}
function __ZN98__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__convert__From_LT__RF__u27_a_u20__u5b_T_u5d__GT__GT_4from17h74b69389c49da5afE($0,$s$0,$s$1) {
 $0 = $0|0;
 $s$0 = $s$0|0;
 $s$1 = $s$1|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_35$i = 0, $err$i$i = 0, $ptr$0$i = 0, $vector$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $err$i$i = sp + 24|0;
 $_35$i = sp + 12|0;
 $vector$i$i = sp;
 $1 = ($s$1|0)<(0); //@line 5 "<assert macros>"
 if ($1) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(8952); //@line 3 "<panic macros>"
  // unreachable; //@line 3 "<panic macros>"
 }
 $2 = ($s$1|0)==(0); //@line 90 "/checkout/src/liballoc/raw_vec.rs"
 if ($2) {
  $ptr$0$i = (1);
 } else {
  $3 = (___rust_alloc($s$1,1,$err$i$i)|0); //@line 84 "/checkout/src/liballoc/heap.rs"
  $4 = ($3|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
  if ($4) {
   HEAP32[$_35$i>>2] = 0; //@line 101 "/checkout/src/liballoc/raw_vec.rs"
   ___rust_oom($_35$i); //@line 98 "/checkout/src/liballoc/heap.rs"
   // unreachable; //@line 98 "/checkout/src/liballoc/heap.rs"
  } else {
   $ptr$0$i = $3;
  }
 }
 HEAP32[$vector$i$i>>2] = $ptr$0$i; //@line 358 "/checkout/src/liballoc/vec.rs"
 $5 = ((($vector$i$i)) + 4|0); //@line 358 "/checkout/src/liballoc/vec.rs"
 HEAP32[$5>>2] = $s$1; //@line 358 "/checkout/src/liballoc/vec.rs"
 $6 = ((($vector$i$i)) + 8|0); //@line 358 "/checkout/src/liballoc/vec.rs"
 HEAP32[$6>>2] = 0; //@line 358 "/checkout/src/liballoc/vec.rs"
 __THREW__ = 0;
 invoke_viii(410,($vector$i$i|0),0,($s$1|0)); //@line 461 "/checkout/src/liballoc/vec.rs"
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch_2()|0;
  $10 = tempRet0;
  __ZN4core3ptr13drop_in_place17hc7d659014c0d680dE_llvm_EF0F654A($vector$i$i); //@line 168 "/checkout/src/liballoc/slice.rs"
  ___resumeException($9|0);
  // unreachable;
 } else {
  $11 = HEAP32[$6>>2]|0; //@line 1161 "/checkout/src/liballoc/vec.rs"
  $12 = (($11) + ($s$1))|0; //@line 1902 "/checkout/src/liballoc/vec.rs"
  HEAP32[$6>>2] = $12; //@line 678 "/checkout/src/liballoc/vec.rs"
  $13 = HEAP32[$vector$i$i>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
  $14 = (($13) + ($11)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  _memcpy(($14|0),($s$0|0),($s$1|0))|0; //@line 672 "/checkout/src/libcore/slice/mod.rs"
  ;HEAP32[$0>>2]=HEAP32[$vector$i$i>>2]|0;HEAP32[$0+4>>2]=HEAP32[$vector$i$i+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$vector$i$i+8>>2]|0; //@line 167 "/checkout/src/liballoc/slice.rs"
  STACKTOP = sp;return; //@line 2177 "/checkout/src/liballoc/vec.rs"
 }
}
function __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_13reserve_exact17h296c93500f51454bE($self,$used_cap,$needed_extra_cap) {
 $self = $self|0;
 $used_cap = $used_cap|0;
 $needed_extra_cap = $needed_extra_cap|0;
 var $$ = 0, $$arith = 0, $$fca$1$gep$i = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_2$i = 0, $_4$i = 0, $_49 = 0, $e$sroa$0$sroa$4$0$e$sroa$0$0$$sroa_idx4$sroa_idx = 0, $err$i = 0, $err$i10 = 0, $res$sroa$0$1 = 0, $res$sroa$0$2 = 0, $res$sroa$13$4$$sroa_idx = 0, $res$sroa$7$1 = 0, $res$sroa$7$2 = 0;
 var $res$sroa$7$4$copyload23 = 0, $switch = 0, $switch$i$i = 0, $x$sroa$0$0$$sroa_idx$i$i = 0, $x$sroa$0$0$copyload$i$i = 0, $x$sroa$4$0$$sroa_idx$i$i = 0, $x$sroa$4$0$copyload$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_4$i = sp + 56|0;
 $_2$i = sp + 40|0;
 $err$i10 = sp + 24|0;
 $err$i = sp + 12|0;
 $_49 = sp;
 $0 = ((($self)) + 4|0); //@line 210 "/checkout/src/liballoc/raw_vec.rs"
 $1 = HEAP32[$0>>2]|0; //@line 210 "/checkout/src/liballoc/raw_vec.rs"
 $2 = (($1) - ($used_cap))|0; //@line 1820 "/checkout/src/libcore/num/mod.rs"
 $3 = ($2>>>0)<($needed_extra_cap>>>0); //@line 415 "/checkout/src/liballoc/raw_vec.rs"
 if (!($3)) {
  STACKTOP = sp;return; //@line 440 "/checkout/src/liballoc/raw_vec.rs"
 }
 $$arith = (($used_cap) + ($needed_extra_cap))|0; //@line 1982 "/checkout/src/libcore/num/mod.rs"
 $$overflow = ($$arith>>>0)<($used_cap>>>0); //@line 1982 "/checkout/src/libcore/num/mod.rs"
 if ($$overflow) {
  __ZN4core6option13expect_failed17hc7b0dae7b501c3c5E(23094,17); //@line 302 "/checkout/src/libcore/option.rs"
  // unreachable;
 }
 HEAP32[$_4$i>>2] = 1; //@line 296 "/checkout/src/liballoc/allocator.rs"
 $$fca$1$gep$i = ((($_4$i)) + 4|0); //@line 296 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$$fca$1$gep$i>>2] = 1; //@line 296 "/checkout/src/liballoc/allocator.rs"
 __ZN5alloc9allocator6Layout6repeat17h2e8f73e4564db9f2E_llvm_458476A($_2$i,$_4$i,$$arith); //@line 296 "/checkout/src/liballoc/allocator.rs"
 $4 = HEAP32[$_2$i>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
 $switch$i$i = ($4|0)==(1); //@line 404 "/checkout/src/libcore/option.rs"
 if (!($switch$i$i)) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(8880); //@line 3 "<panic macros>"
  // unreachable; //@line 3 "<panic macros>"
 }
 $x$sroa$0$0$$sroa_idx$i$i = ((($_2$i)) + 4|0); //@line 404 "/checkout/src/libcore/option.rs"
 $x$sroa$0$0$copyload$i$i = HEAP32[$x$sroa$0$0$$sroa_idx$i$i>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
 $x$sroa$4$0$$sroa_idx$i$i = ((($_2$i)) + 8|0); //@line 404 "/checkout/src/libcore/option.rs"
 $x$sroa$4$0$copyload$i$i = HEAP32[$x$sroa$4$0$$sroa_idx$i$i>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
 $5 = ($x$sroa$0$0$copyload$i$i|0)<(0); //@line 5 "<assert macros>"
 if ($5) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(8952); //@line 3 "<panic macros>"
  // unreachable; //@line 3 "<panic macros>"
 }
 $6 = HEAP32[$0>>2]|0; //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $7 = ($6|0)==(0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 if ($7) {
  $8 = (___rust_alloc($x$sroa$0$0$copyload$i$i,$x$sroa$4$0$copyload$i$i,$err$i10)|0); //@line 84 "/checkout/src/liballoc/heap.rs"
  $9 = ($8|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
  $$ = $9&1; //@line 87 "/checkout/src/liballoc/heap.rs"
  $21 = 0;$24 = 0;$res$sroa$0$2 = $$;$res$sroa$7$2 = $8;
 } else {
  $10 = HEAP32[$self>>2]|0; //@line 428 "/checkout/src/liballoc/raw_vec.rs"
  $11 = (___rust_realloc($10,$6,1,$x$sroa$0$0$copyload$i$i,$x$sroa$4$0$copyload$i$i,$err$i)|0); //@line 127 "/checkout/src/liballoc/heap.rs"
  $12 = ($11|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
  $res$sroa$7$4$copyload23 = HEAP32[$err$i>>2]|0; //@line 134 "/checkout/src/liballoc/heap.rs"
  $res$sroa$13$4$$sroa_idx = ((($err$i)) + 4|0); //@line 134 "/checkout/src/liballoc/heap.rs"
  $13 = $res$sroa$13$4$$sroa_idx; //@line 134 "/checkout/src/liballoc/heap.rs"
  $14 = $13; //@line 134 "/checkout/src/liballoc/heap.rs"
  $15 = HEAP32[$14>>2]|0; //@line 134 "/checkout/src/liballoc/heap.rs"
  $16 = (($13) + 4)|0; //@line 134 "/checkout/src/liballoc/heap.rs"
  $17 = $16; //@line 134 "/checkout/src/liballoc/heap.rs"
  $18 = HEAP32[$17>>2]|0; //@line 134 "/checkout/src/liballoc/heap.rs"
  $res$sroa$7$1 = $12 ? $res$sroa$7$4$copyload23 : $11; //@line 133 "/checkout/src/liballoc/heap.rs"
  $res$sroa$0$1 = $12&1; //@line 133 "/checkout/src/liballoc/heap.rs"
  $21 = $15;$24 = $18;$res$sroa$0$2 = $res$sroa$0$1;$res$sroa$7$2 = $res$sroa$7$1;
 }
 $switch = ($res$sroa$0$2|0)==(1); //@line 434 "/checkout/src/liballoc/raw_vec.rs"
 if ($switch) {
  HEAP32[$_49>>2] = $res$sroa$7$2; //@line 435 "/checkout/src/liballoc/raw_vec.rs"
  $e$sroa$0$sroa$4$0$e$sroa$0$0$$sroa_idx4$sroa_idx = ((($_49)) + 4|0); //@line 435 "/checkout/src/liballoc/raw_vec.rs"
  $19 = $e$sroa$0$sroa$4$0$e$sroa$0$0$$sroa_idx4$sroa_idx; //@line 435 "/checkout/src/liballoc/raw_vec.rs"
  $20 = $19; //@line 435 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$20>>2] = $21; //@line 435 "/checkout/src/liballoc/raw_vec.rs"
  $22 = (($19) + 4)|0; //@line 435 "/checkout/src/liballoc/raw_vec.rs"
  $23 = $22; //@line 435 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$23>>2] = $24; //@line 435 "/checkout/src/liballoc/raw_vec.rs"
  ___rust_oom($_49); //@line 98 "/checkout/src/liballoc/heap.rs"
  // unreachable; //@line 98 "/checkout/src/liballoc/heap.rs"
 }
 HEAP32[$self>>2] = $res$sroa$7$2; //@line 437 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$0>>2] = $$arith; //@line 438 "/checkout/src/liballoc/raw_vec.rs"
 STACKTOP = sp;return; //@line 440 "/checkout/src/liballoc/raw_vec.rs"
}
function __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_6double17h65ca4c270df6d71fE($self) {
 $self = $self|0;
 var $$fca$1$gep$i$i = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_11$sroa$0$0 = 0, $_11$sroa$5$0$in = 0, $_2$i$i = 0, $_4$i$i = 0, $_42 = 0, $_49$sroa$10$4$$sroa_idx = 0, $_49$sroa$11$4$$sroa_idx = 0, $_58 = 0, $e$sroa$0$sroa$4$0$e$sroa$0$0$$sroa_idx7$sroa_idx = 0, $err$i = 0, $err$i$i = 0, $ptr_res$sroa$5$4$copyload29 = 0, $ptr_res$sroa$9$4$$sroa_idx = 0, $switch$i$i$i = 0;
 var $x$sroa$0$0$$sroa_idx$i$i$i = 0, $x$sroa$0$0$copyload$i$i$i = 0, $x$sroa$4$0$$sroa_idx$i$i$i = 0, $x$sroa$4$0$copyload$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $_4$i$i = sp + 64|0;
 $_2$i$i = sp + 48|0;
 $err$i$i = sp + 36|0;
 $err$i = sp + 24|0;
 $_58 = sp + 12|0;
 $_42 = sp;
 $0 = ((($self)) + 4|0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $1 = HEAP32[$0>>2]|0; //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $2 = ($1|0)==(0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $3 = $1 << 3; //@line 232 "/checkout/src/liballoc/raw_vec.rs"
 if (!($2)) {
  $4 = $1 << 4; //@line 309 "/checkout/src/liballoc/raw_vec.rs"
  $5 = ($4|0)<(0); //@line 5 "<assert macros>"
  if ($5) {
   __ZN4core9panicking5panic17h9fa3414033a56a4dE(8952); //@line 3 "<panic macros>"
   // unreachable; //@line 3 "<panic macros>"
  }
  $6 = HEAP32[$self>>2]|0; //@line 312 "/checkout/src/liballoc/raw_vec.rs"
  $7 = (___rust_realloc($6,$3,4,$4,4,$err$i)|0); //@line 127 "/checkout/src/liballoc/heap.rs"
  $8 = ($7|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
  if ($8) {
   $ptr_res$sroa$5$4$copyload29 = HEAP32[$err$i>>2]|0; //@line 134 "/checkout/src/liballoc/heap.rs"
   $ptr_res$sroa$9$4$$sroa_idx = ((($err$i)) + 4|0); //@line 134 "/checkout/src/liballoc/heap.rs"
   $10 = $ptr_res$sroa$9$4$$sroa_idx; //@line 134 "/checkout/src/liballoc/heap.rs"
   $11 = $10; //@line 134 "/checkout/src/liballoc/heap.rs"
   $12 = HEAP32[$11>>2]|0; //@line 134 "/checkout/src/liballoc/heap.rs"
   $13 = (($10) + 4)|0; //@line 134 "/checkout/src/liballoc/heap.rs"
   $14 = $13; //@line 134 "/checkout/src/liballoc/heap.rs"
   $15 = HEAP32[$14>>2]|0; //@line 134 "/checkout/src/liballoc/heap.rs"
   HEAP32[$_42>>2] = $ptr_res$sroa$5$4$copyload29; //@line 317 "/checkout/src/liballoc/raw_vec.rs"
   $e$sroa$0$sroa$4$0$e$sroa$0$0$$sroa_idx7$sroa_idx = ((($_42)) + 4|0); //@line 317 "/checkout/src/liballoc/raw_vec.rs"
   $16 = $e$sroa$0$sroa$4$0$e$sroa$0$0$$sroa_idx7$sroa_idx; //@line 317 "/checkout/src/liballoc/raw_vec.rs"
   $17 = $16; //@line 317 "/checkout/src/liballoc/raw_vec.rs"
   HEAP32[$17>>2] = $12; //@line 317 "/checkout/src/liballoc/raw_vec.rs"
   $18 = (($16) + 4)|0; //@line 317 "/checkout/src/liballoc/raw_vec.rs"
   $19 = $18; //@line 317 "/checkout/src/liballoc/raw_vec.rs"
   HEAP32[$19>>2] = $15; //@line 317 "/checkout/src/liballoc/raw_vec.rs"
   ___rust_oom($_42); //@line 98 "/checkout/src/liballoc/heap.rs"
   // unreachable; //@line 98 "/checkout/src/liballoc/heap.rs"
  }
  $9 = $1 << 1; //@line 308 "/checkout/src/liballoc/raw_vec.rs"
  $$pre$phiZ2D = $self;$_11$sroa$0$0 = $9;$_11$sroa$5$0$in = $7;
  HEAP32[$$pre$phiZ2D>>2] = $_11$sroa$5$0$in; //@line 330 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$0>>2] = $_11$sroa$0$0; //@line 331 "/checkout/src/liballoc/raw_vec.rs"
  STACKTOP = sp;return; //@line 333 "/checkout/src/liballoc/raw_vec.rs"
 }
 HEAP32[$_4$i$i>>2] = 8; //@line 296 "/checkout/src/liballoc/allocator.rs"
 $$fca$1$gep$i$i = ((($_4$i$i)) + 4|0); //@line 296 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$$fca$1$gep$i$i>>2] = 4; //@line 296 "/checkout/src/liballoc/allocator.rs"
 __ZN5alloc9allocator6Layout6repeat17h2e8f73e4564db9f2E_llvm_458476A($_2$i$i,$_4$i$i,4); //@line 296 "/checkout/src/liballoc/allocator.rs"
 $20 = HEAP32[$_2$i$i>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
 $switch$i$i$i = ($20|0)==(1); //@line 404 "/checkout/src/libcore/option.rs"
 if ($switch$i$i$i) {
  $x$sroa$0$0$$sroa_idx$i$i$i = ((($_2$i$i)) + 4|0); //@line 404 "/checkout/src/libcore/option.rs"
  $x$sroa$0$0$copyload$i$i$i = HEAP32[$x$sroa$0$0$$sroa_idx$i$i$i>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
  $x$sroa$4$0$$sroa_idx$i$i$i = ((($_2$i$i)) + 8|0); //@line 404 "/checkout/src/libcore/option.rs"
  $x$sroa$4$0$copyload$i$i$i = HEAP32[$x$sroa$4$0$$sroa_idx$i$i$i>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
  $23 = ($x$sroa$0$0$copyload$i$i$i|0)==(0); //@line 970 "/checkout/src/liballoc/allocator.rs"
  if (!($23)) {
   $21 = (___rust_alloc($x$sroa$0$0$copyload$i$i$i,$x$sroa$4$0$copyload$i$i$i,$err$i$i)|0); //@line 84 "/checkout/src/liballoc/heap.rs"
   $22 = ($21|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
   if (!($22)) {
    $$pre$phiZ2D = $self;$_11$sroa$0$0 = 4;$_11$sroa$5$0$in = $21;
    HEAP32[$$pre$phiZ2D>>2] = $_11$sroa$5$0$in; //@line 330 "/checkout/src/liballoc/raw_vec.rs"
    HEAP32[$0>>2] = $_11$sroa$0$0; //@line 331 "/checkout/src/liballoc/raw_vec.rs"
    STACKTOP = sp;return; //@line 333 "/checkout/src/liballoc/raw_vec.rs"
   }
  }
 } else {
 }
 HEAP32[$_58>>2] = 1; //@line 326 "/checkout/src/liballoc/raw_vec.rs"
 $_49$sroa$10$4$$sroa_idx = ((($_58)) + 4|0); //@line 326 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$_49$sroa$10$4$$sroa_idx>>2] = 24029; //@line 326 "/checkout/src/liballoc/raw_vec.rs"
 $_49$sroa$11$4$$sroa_idx = ((($_58)) + 8|0); //@line 326 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$_49$sroa$11$4$$sroa_idx>>2] = 30; //@line 326 "/checkout/src/liballoc/raw_vec.rs"
 ___rust_oom($_58); //@line 98 "/checkout/src/liballoc/heap.rs"
 // unreachable; //@line 98 "/checkout/src/liballoc/heap.rs"
}
function __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_6double17h6d0cd599b42ba57cE($self) {
 $self = $self|0;
 var $$fca$1$gep$i$i = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_11$sroa$0$0 = 0, $_11$sroa$5$0 = 0, $_2$i$i = 0, $_4$i$i = 0, $_42 = 0, $_49$sroa$10$4$$sroa_idx = 0, $_49$sroa$11$4$$sroa_idx = 0, $_58 = 0, $e$sroa$0$sroa$4$0$e$sroa$0$0$$sroa_idx7$sroa_idx = 0, $err$i = 0, $err$i$i = 0, $ptr_res$sroa$5$4$copyload2944 = 0, $ptr_res$sroa$9$4$$sroa_idx = 0, $switch$i$i$i = 0, $x$sroa$0$0$$sroa_idx$i$i$i = 0, $x$sroa$0$0$copyload$i$i$i = 0;
 var $x$sroa$4$0$$sroa_idx$i$i$i = 0, $x$sroa$4$0$copyload$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $_4$i$i = sp + 64|0;
 $_2$i$i = sp + 48|0;
 $err$i$i = sp + 36|0;
 $err$i = sp + 24|0;
 $_58 = sp + 12|0;
 $_42 = sp;
 $0 = ((($self)) + 4|0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $1 = HEAP32[$0>>2]|0; //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $2 = ($1|0)==(0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 if (!($2)) {
  $3 = $1 << 1; //@line 308 "/checkout/src/liballoc/raw_vec.rs"
  $4 = ($3|0)<(0); //@line 5 "<assert macros>"
  if ($4) {
   __ZN4core9panicking5panic17h9fa3414033a56a4dE(8952); //@line 3 "<panic macros>"
   // unreachable; //@line 3 "<panic macros>"
  }
  $5 = HEAP32[$self>>2]|0; //@line 312 "/checkout/src/liballoc/raw_vec.rs"
  $6 = (___rust_realloc($5,$1,1,$3,1,$err$i)|0); //@line 127 "/checkout/src/liballoc/heap.rs"
  $7 = ($6|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
  if ($7) {
   $ptr_res$sroa$5$4$copyload2944 = HEAP32[$err$i>>2]|0; //@line 134 "/checkout/src/liballoc/heap.rs"
   $ptr_res$sroa$9$4$$sroa_idx = ((($err$i)) + 4|0); //@line 134 "/checkout/src/liballoc/heap.rs"
   $8 = $ptr_res$sroa$9$4$$sroa_idx; //@line 134 "/checkout/src/liballoc/heap.rs"
   $9 = $8; //@line 134 "/checkout/src/liballoc/heap.rs"
   $10 = HEAP32[$9>>2]|0; //@line 134 "/checkout/src/liballoc/heap.rs"
   $11 = (($8) + 4)|0; //@line 134 "/checkout/src/liballoc/heap.rs"
   $12 = $11; //@line 134 "/checkout/src/liballoc/heap.rs"
   $13 = HEAP32[$12>>2]|0; //@line 134 "/checkout/src/liballoc/heap.rs"
   HEAP32[$_42>>2] = $ptr_res$sroa$5$4$copyload2944; //@line 317 "/checkout/src/liballoc/raw_vec.rs"
   $e$sroa$0$sroa$4$0$e$sroa$0$0$$sroa_idx7$sroa_idx = ((($_42)) + 4|0); //@line 317 "/checkout/src/liballoc/raw_vec.rs"
   $14 = $e$sroa$0$sroa$4$0$e$sroa$0$0$$sroa_idx7$sroa_idx; //@line 317 "/checkout/src/liballoc/raw_vec.rs"
   $15 = $14; //@line 317 "/checkout/src/liballoc/raw_vec.rs"
   HEAP32[$15>>2] = $10; //@line 317 "/checkout/src/liballoc/raw_vec.rs"
   $16 = (($14) + 4)|0; //@line 317 "/checkout/src/liballoc/raw_vec.rs"
   $17 = $16; //@line 317 "/checkout/src/liballoc/raw_vec.rs"
   HEAP32[$17>>2] = $13; //@line 317 "/checkout/src/liballoc/raw_vec.rs"
   ___rust_oom($_42); //@line 98 "/checkout/src/liballoc/heap.rs"
   // unreachable; //@line 98 "/checkout/src/liballoc/heap.rs"
  }
  $$pre$phiZ2D = $self;$_11$sroa$0$0 = $3;$_11$sroa$5$0 = $6;
  HEAP32[$$pre$phiZ2D>>2] = $_11$sroa$5$0; //@line 330 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$0>>2] = $_11$sroa$0$0; //@line 331 "/checkout/src/liballoc/raw_vec.rs"
  STACKTOP = sp;return; //@line 333 "/checkout/src/liballoc/raw_vec.rs"
 }
 HEAP32[$_4$i$i>>2] = 1; //@line 296 "/checkout/src/liballoc/allocator.rs"
 $$fca$1$gep$i$i = ((($_4$i$i)) + 4|0); //@line 296 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$$fca$1$gep$i$i>>2] = 1; //@line 296 "/checkout/src/liballoc/allocator.rs"
 __ZN5alloc9allocator6Layout6repeat17h2e8f73e4564db9f2E_llvm_458476A($_2$i$i,$_4$i$i,4); //@line 296 "/checkout/src/liballoc/allocator.rs"
 $18 = HEAP32[$_2$i$i>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
 $switch$i$i$i = ($18|0)==(1); //@line 404 "/checkout/src/libcore/option.rs"
 if ($switch$i$i$i) {
  $x$sroa$0$0$$sroa_idx$i$i$i = ((($_2$i$i)) + 4|0); //@line 404 "/checkout/src/libcore/option.rs"
  $x$sroa$0$0$copyload$i$i$i = HEAP32[$x$sroa$0$0$$sroa_idx$i$i$i>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
  $x$sroa$4$0$$sroa_idx$i$i$i = ((($_2$i$i)) + 8|0); //@line 404 "/checkout/src/libcore/option.rs"
  $x$sroa$4$0$copyload$i$i$i = HEAP32[$x$sroa$4$0$$sroa_idx$i$i$i>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
  $21 = ($x$sroa$0$0$copyload$i$i$i|0)==(0); //@line 970 "/checkout/src/liballoc/allocator.rs"
  if (!($21)) {
   $19 = (___rust_alloc($x$sroa$0$0$copyload$i$i$i,$x$sroa$4$0$copyload$i$i$i,$err$i$i)|0); //@line 84 "/checkout/src/liballoc/heap.rs"
   $20 = ($19|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
   if (!($20)) {
    $$pre$phiZ2D = $self;$_11$sroa$0$0 = 4;$_11$sroa$5$0 = $19;
    HEAP32[$$pre$phiZ2D>>2] = $_11$sroa$5$0; //@line 330 "/checkout/src/liballoc/raw_vec.rs"
    HEAP32[$0>>2] = $_11$sroa$0$0; //@line 331 "/checkout/src/liballoc/raw_vec.rs"
    STACKTOP = sp;return; //@line 333 "/checkout/src/liballoc/raw_vec.rs"
   }
  }
 } else {
 }
 HEAP32[$_58>>2] = 1; //@line 326 "/checkout/src/liballoc/raw_vec.rs"
 $_49$sroa$10$4$$sroa_idx = ((($_58)) + 4|0); //@line 326 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$_49$sroa$10$4$$sroa_idx>>2] = 24029; //@line 326 "/checkout/src/liballoc/raw_vec.rs"
 $_49$sroa$11$4$$sroa_idx = ((($_58)) + 8|0); //@line 326 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$_49$sroa$11$4$$sroa_idx>>2] = 30; //@line 326 "/checkout/src/liballoc/raw_vec.rs"
 ___rust_oom($_58); //@line 98 "/checkout/src/liballoc/heap.rs"
 // unreachable; //@line 98 "/checkout/src/liballoc/heap.rs"
}
function __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_7reserve17h23ae4e06b7738369E($self,$used_cap,$needed_extra_cap) {
 $self = $self|0;
 $used_cap = $used_cap|0;
 $needed_extra_cap = $needed_extra_cap|0;
 var $$41 = 0, $$arith = 0, $$fca$1$gep$i = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$sroa$speculated$i = 0, $_2$i = 0, $_4$i = 0, $_47 = 0, $e$sroa$0$sroa$4$0$e$sroa$0$0$$sroa_idx4$sroa_idx = 0;
 var $err$i = 0, $err$i10 = 0, $res$sroa$0$1 = 0, $res$sroa$0$2 = 0, $res$sroa$13$4$$sroa_idx = 0, $res$sroa$7$1 = 0, $res$sroa$7$2 = 0, $res$sroa$7$4$copyload19 = 0, $switch = 0, $switch$i$i = 0, $x$sroa$0$0$$sroa_idx$i$i = 0, $x$sroa$0$0$copyload$i$i = 0, $x$sroa$4$0$$sroa_idx$i$i = 0, $x$sroa$4$0$copyload$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_4$i = sp + 56|0;
 $_2$i = sp + 40|0;
 $err$i10 = sp + 24|0;
 $err$i = sp + 12|0;
 $_47 = sp;
 $0 = ((($self)) + 4|0); //@line 210 "/checkout/src/liballoc/raw_vec.rs"
 $1 = HEAP32[$0>>2]|0; //@line 210 "/checkout/src/liballoc/raw_vec.rs"
 $2 = (($1) - ($used_cap))|0; //@line 1820 "/checkout/src/libcore/num/mod.rs"
 $3 = ($2>>>0)<($needed_extra_cap>>>0); //@line 516 "/checkout/src/liballoc/raw_vec.rs"
 if (!($3)) {
  STACKTOP = sp;return; //@line 542 "/checkout/src/liballoc/raw_vec.rs"
 }
 $$arith = (($used_cap) + ($needed_extra_cap))|0; //@line 1982 "/checkout/src/libcore/num/mod.rs"
 $$overflow = ($$arith>>>0)<($used_cap>>>0); //@line 1982 "/checkout/src/libcore/num/mod.rs"
 if ($$overflow) {
  __ZN4core6option13expect_failed17hc7b0dae7b501c3c5E(23094,17); //@line 302 "/checkout/src/libcore/option.rs"
  // unreachable;
 }
 $4 = $1 << 1; //@line 450 "/checkout/src/liballoc/raw_vec.rs"
 $5 = ($$arith>>>0)>=($4>>>0); //@line 850 "/checkout/src/libcore/cmp.rs"
 $_0$0$sroa$speculated$i = $5 ? $$arith : $4; //@line 462 "/checkout/src/libcore/cmp.rs"
 HEAP32[$_4$i>>2] = 12; //@line 296 "/checkout/src/liballoc/allocator.rs"
 $$fca$1$gep$i = ((($_4$i)) + 4|0); //@line 296 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$$fca$1$gep$i>>2] = 4; //@line 296 "/checkout/src/liballoc/allocator.rs"
 __ZN5alloc9allocator6Layout6repeat17h2e8f73e4564db9f2E_llvm_458476A($_2$i,$_4$i,$_0$0$sroa$speculated$i); //@line 296 "/checkout/src/liballoc/allocator.rs"
 $6 = HEAP32[$_2$i>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
 $switch$i$i = ($6|0)==(1); //@line 404 "/checkout/src/libcore/option.rs"
 if (!($switch$i$i)) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(8928); //@line 3 "<panic macros>"
  // unreachable; //@line 3 "<panic macros>"
 }
 $x$sroa$0$0$$sroa_idx$i$i = ((($_2$i)) + 4|0); //@line 404 "/checkout/src/libcore/option.rs"
 $x$sroa$0$0$copyload$i$i = HEAP32[$x$sroa$0$0$$sroa_idx$i$i>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
 $x$sroa$4$0$$sroa_idx$i$i = ((($_2$i)) + 8|0); //@line 404 "/checkout/src/libcore/option.rs"
 $x$sroa$4$0$copyload$i$i = HEAP32[$x$sroa$4$0$$sroa_idx$i$i>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
 $7 = ($x$sroa$0$0$copyload$i$i|0)<(0); //@line 5 "<assert macros>"
 if ($7) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(8952); //@line 3 "<panic macros>"
  // unreachable; //@line 3 "<panic macros>"
 }
 $8 = HEAP32[$0>>2]|0; //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $9 = ($8|0)==(0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 if ($9) {
  $10 = (___rust_alloc($x$sroa$0$0$copyload$i$i,$x$sroa$4$0$copyload$i$i,$err$i10)|0); //@line 84 "/checkout/src/liballoc/heap.rs"
  $11 = ($10|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
  $12 = $10; //@line 90 "/checkout/src/liballoc/heap.rs"
  $$41 = $11&1; //@line 87 "/checkout/src/liballoc/heap.rs"
  $27 = 0;$30 = 0;$res$sroa$0$2 = $$41;$res$sroa$7$2 = $12;
 } else {
  $13 = ($8*12)|0; //@line 232 "/checkout/src/liballoc/raw_vec.rs"
  $14 = HEAP32[$self>>2]|0; //@line 530 "/checkout/src/liballoc/raw_vec.rs"
  $15 = (___rust_realloc($14,$13,4,$x$sroa$0$0$copyload$i$i,$x$sroa$4$0$copyload$i$i,$err$i)|0); //@line 127 "/checkout/src/liballoc/heap.rs"
  $16 = ($15|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
  $res$sroa$7$4$copyload19 = HEAP32[$err$i>>2]|0; //@line 134 "/checkout/src/liballoc/heap.rs"
  $res$sroa$13$4$$sroa_idx = ((($err$i)) + 4|0); //@line 134 "/checkout/src/liballoc/heap.rs"
  $17 = $res$sroa$13$4$$sroa_idx; //@line 134 "/checkout/src/liballoc/heap.rs"
  $18 = $17; //@line 134 "/checkout/src/liballoc/heap.rs"
  $19 = HEAP32[$18>>2]|0; //@line 134 "/checkout/src/liballoc/heap.rs"
  $20 = (($17) + 4)|0; //@line 134 "/checkout/src/liballoc/heap.rs"
  $21 = $20; //@line 134 "/checkout/src/liballoc/heap.rs"
  $22 = HEAP32[$21>>2]|0; //@line 134 "/checkout/src/liballoc/heap.rs"
  $23 = $15; //@line 137 "/checkout/src/liballoc/heap.rs"
  $res$sroa$7$1 = $16 ? $res$sroa$7$4$copyload19 : $23; //@line 133 "/checkout/src/liballoc/heap.rs"
  $res$sroa$0$1 = $16&1; //@line 133 "/checkout/src/liballoc/heap.rs"
  $27 = $19;$30 = $22;$res$sroa$0$2 = $res$sroa$0$1;$res$sroa$7$2 = $res$sroa$7$1;
 }
 $switch = ($res$sroa$0$2|0)==(1); //@line 536 "/checkout/src/liballoc/raw_vec.rs"
 if ($switch) {
  HEAP32[$_47>>2] = $res$sroa$7$2; //@line 537 "/checkout/src/liballoc/raw_vec.rs"
  $e$sroa$0$sroa$4$0$e$sroa$0$0$$sroa_idx4$sroa_idx = ((($_47)) + 4|0); //@line 537 "/checkout/src/liballoc/raw_vec.rs"
  $25 = $e$sroa$0$sroa$4$0$e$sroa$0$0$$sroa_idx4$sroa_idx; //@line 537 "/checkout/src/liballoc/raw_vec.rs"
  $26 = $25; //@line 537 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$26>>2] = $27; //@line 537 "/checkout/src/liballoc/raw_vec.rs"
  $28 = (($25) + 4)|0; //@line 537 "/checkout/src/liballoc/raw_vec.rs"
  $29 = $28; //@line 537 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$29>>2] = $30; //@line 537 "/checkout/src/liballoc/raw_vec.rs"
  ___rust_oom($_47); //@line 98 "/checkout/src/liballoc/heap.rs"
  // unreachable; //@line 98 "/checkout/src/liballoc/heap.rs"
 }
 $24 = $res$sroa$7$2; //@line 75 "/checkout/src/libcore/nonzero.rs"
 HEAP32[$self>>2] = $24; //@line 539 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$0>>2] = $_0$0$sroa$speculated$i; //@line 540 "/checkout/src/liballoc/raw_vec.rs"
 STACKTOP = sp;return; //@line 542 "/checkout/src/liballoc/raw_vec.rs"
}
function __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_7reserve17hbf70593baa5057a1E($self,$used_cap,$needed_extra_cap) {
 $self = $self|0;
 $used_cap = $used_cap|0;
 $needed_extra_cap = $needed_extra_cap|0;
 var $$ = 0, $$arith = 0, $$fca$1$gep$i = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$sroa$speculated$i = 0, $_2$i = 0, $_4$i = 0, $_47 = 0, $e$sroa$0$sroa$4$0$e$sroa$0$0$$sroa_idx4$sroa_idx = 0, $err$i = 0, $err$i10 = 0, $res$sroa$0$1 = 0, $res$sroa$0$2 = 0;
 var $res$sroa$13$4$$sroa_idx = 0, $res$sroa$7$1 = 0, $res$sroa$7$2 = 0, $res$sroa$7$4$copyload19 = 0, $switch = 0, $switch$i$i = 0, $x$sroa$0$0$$sroa_idx$i$i = 0, $x$sroa$0$0$copyload$i$i = 0, $x$sroa$4$0$$sroa_idx$i$i = 0, $x$sroa$4$0$copyload$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_4$i = sp + 56|0;
 $_2$i = sp + 40|0;
 $err$i10 = sp + 24|0;
 $err$i = sp + 12|0;
 $_47 = sp;
 $0 = ((($self)) + 4|0); //@line 210 "/checkout/src/liballoc/raw_vec.rs"
 $1 = HEAP32[$0>>2]|0; //@line 210 "/checkout/src/liballoc/raw_vec.rs"
 $2 = (($1) - ($used_cap))|0; //@line 1820 "/checkout/src/libcore/num/mod.rs"
 $3 = ($2>>>0)<($needed_extra_cap>>>0); //@line 516 "/checkout/src/liballoc/raw_vec.rs"
 if (!($3)) {
  STACKTOP = sp;return; //@line 542 "/checkout/src/liballoc/raw_vec.rs"
 }
 $$arith = (($used_cap) + ($needed_extra_cap))|0; //@line 1982 "/checkout/src/libcore/num/mod.rs"
 $$overflow = ($$arith>>>0)<($used_cap>>>0); //@line 1982 "/checkout/src/libcore/num/mod.rs"
 if ($$overflow) {
  __ZN4core6option13expect_failed17hc7b0dae7b501c3c5E(23094,17); //@line 302 "/checkout/src/libcore/option.rs"
  // unreachable;
 }
 $4 = $1 << 1; //@line 450 "/checkout/src/liballoc/raw_vec.rs"
 $5 = ($$arith>>>0)>=($4>>>0); //@line 850 "/checkout/src/libcore/cmp.rs"
 $_0$0$sroa$speculated$i = $5 ? $$arith : $4; //@line 462 "/checkout/src/libcore/cmp.rs"
 HEAP32[$_4$i>>2] = 1; //@line 296 "/checkout/src/liballoc/allocator.rs"
 $$fca$1$gep$i = ((($_4$i)) + 4|0); //@line 296 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$$fca$1$gep$i>>2] = 1; //@line 296 "/checkout/src/liballoc/allocator.rs"
 __ZN5alloc9allocator6Layout6repeat17h2e8f73e4564db9f2E_llvm_458476A($_2$i,$_4$i,$_0$0$sroa$speculated$i); //@line 296 "/checkout/src/liballoc/allocator.rs"
 $6 = HEAP32[$_2$i>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
 $switch$i$i = ($6|0)==(1); //@line 404 "/checkout/src/libcore/option.rs"
 if (!($switch$i$i)) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(8928); //@line 3 "<panic macros>"
  // unreachable; //@line 3 "<panic macros>"
 }
 $x$sroa$0$0$$sroa_idx$i$i = ((($_2$i)) + 4|0); //@line 404 "/checkout/src/libcore/option.rs"
 $x$sroa$0$0$copyload$i$i = HEAP32[$x$sroa$0$0$$sroa_idx$i$i>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
 $x$sroa$4$0$$sroa_idx$i$i = ((($_2$i)) + 8|0); //@line 404 "/checkout/src/libcore/option.rs"
 $x$sroa$4$0$copyload$i$i = HEAP32[$x$sroa$4$0$$sroa_idx$i$i>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
 $7 = ($x$sroa$0$0$copyload$i$i|0)<(0); //@line 5 "<assert macros>"
 if ($7) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(8952); //@line 3 "<panic macros>"
  // unreachable; //@line 3 "<panic macros>"
 }
 $8 = HEAP32[$0>>2]|0; //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $9 = ($8|0)==(0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 if ($9) {
  $10 = (___rust_alloc($x$sroa$0$0$copyload$i$i,$x$sroa$4$0$copyload$i$i,$err$i10)|0); //@line 84 "/checkout/src/liballoc/heap.rs"
  $11 = ($10|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
  $$ = $11&1; //@line 87 "/checkout/src/liballoc/heap.rs"
  $23 = 0;$26 = 0;$res$sroa$0$2 = $$;$res$sroa$7$2 = $10;
 } else {
  $12 = HEAP32[$self>>2]|0; //@line 530 "/checkout/src/liballoc/raw_vec.rs"
  $13 = (___rust_realloc($12,$8,1,$x$sroa$0$0$copyload$i$i,$x$sroa$4$0$copyload$i$i,$err$i)|0); //@line 127 "/checkout/src/liballoc/heap.rs"
  $14 = ($13|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
  $res$sroa$7$4$copyload19 = HEAP32[$err$i>>2]|0; //@line 134 "/checkout/src/liballoc/heap.rs"
  $res$sroa$13$4$$sroa_idx = ((($err$i)) + 4|0); //@line 134 "/checkout/src/liballoc/heap.rs"
  $15 = $res$sroa$13$4$$sroa_idx; //@line 134 "/checkout/src/liballoc/heap.rs"
  $16 = $15; //@line 134 "/checkout/src/liballoc/heap.rs"
  $17 = HEAP32[$16>>2]|0; //@line 134 "/checkout/src/liballoc/heap.rs"
  $18 = (($15) + 4)|0; //@line 134 "/checkout/src/liballoc/heap.rs"
  $19 = $18; //@line 134 "/checkout/src/liballoc/heap.rs"
  $20 = HEAP32[$19>>2]|0; //@line 134 "/checkout/src/liballoc/heap.rs"
  $res$sroa$7$1 = $14 ? $res$sroa$7$4$copyload19 : $13; //@line 133 "/checkout/src/liballoc/heap.rs"
  $res$sroa$0$1 = $14&1; //@line 133 "/checkout/src/liballoc/heap.rs"
  $23 = $17;$26 = $20;$res$sroa$0$2 = $res$sroa$0$1;$res$sroa$7$2 = $res$sroa$7$1;
 }
 $switch = ($res$sroa$0$2|0)==(1); //@line 536 "/checkout/src/liballoc/raw_vec.rs"
 if ($switch) {
  HEAP32[$_47>>2] = $res$sroa$7$2; //@line 537 "/checkout/src/liballoc/raw_vec.rs"
  $e$sroa$0$sroa$4$0$e$sroa$0$0$$sroa_idx4$sroa_idx = ((($_47)) + 4|0); //@line 537 "/checkout/src/liballoc/raw_vec.rs"
  $21 = $e$sroa$0$sroa$4$0$e$sroa$0$0$$sroa_idx4$sroa_idx; //@line 537 "/checkout/src/liballoc/raw_vec.rs"
  $22 = $21; //@line 537 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$22>>2] = $23; //@line 537 "/checkout/src/liballoc/raw_vec.rs"
  $24 = (($21) + 4)|0; //@line 537 "/checkout/src/liballoc/raw_vec.rs"
  $25 = $24; //@line 537 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$25>>2] = $26; //@line 537 "/checkout/src/liballoc/raw_vec.rs"
  ___rust_oom($_47); //@line 98 "/checkout/src/liballoc/heap.rs"
  // unreachable; //@line 98 "/checkout/src/liballoc/heap.rs"
 }
 HEAP32[$self>>2] = $res$sroa$7$2; //@line 539 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$0>>2] = $_0$0$sroa$speculated$i; //@line 540 "/checkout/src/liballoc/raw_vec.rs"
 STACKTOP = sp;return; //@line 542 "/checkout/src/liballoc/raw_vec.rs"
}
function ___rdl_alloc($size,$align,$err) {
 $size = $size|0;
 $align = $align|0;
 $err = $err|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_0$0 = 0, $_18$sroa$4$0$_6$sroa$0$0$$sroa_idx2$i$sroa_idx16 = 0, $_18$sroa$5$0$_6$sroa$0$0$$sroa_idx2$i$sroa_idx18 = 0, $or$cond$i$i = 0, $out$i$i$i = 0, $ptr$0$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $out$i$i$i = sp;
 $0 = ($align>>>0)>(8); //@line 134 "/checkout/src/liballoc_system/lib.rs"
 $1 = ($align>>>0)>($size>>>0); //@line 134 "/checkout/src/liballoc_system/lib.rs"
 $or$cond$i$i = $0 | $1; //@line 134 "/checkout/src/liballoc_system/lib.rs"
 if ($or$cond$i$i) {
  HEAP32[$out$i$i$i>>2] = 0; //@line 254 "/checkout/src/liballoc_system/lib.rs"
  $2 = (_posix_memalign($out$i$i$i,$align,$size)|0); //@line 255 "/checkout/src/liballoc_system/lib.rs"
  $3 = ($2|0)==(0); //@line 256 "/checkout/src/liballoc_system/lib.rs"
  $4 = HEAP32[$out$i$i$i>>2]|0; //@line 259 "/checkout/src/liballoc_system/lib.rs"
  if ($3) {
   $ptr$0$i$i = $4;
   label = 4;
  }
 } else {
  $5 = (_malloc($size)|0); //@line 135 "/checkout/src/liballoc_system/lib.rs"
  $ptr$0$i$i = $5;
  label = 4;
 }
 if ((label|0) == 4) {
  $6 = ($ptr$0$i$i|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
  if (!($6)) {
   $_0$0 = $ptr$0$i$i;
   STACKTOP = sp;return ($_0$0|0); //@line 44 "/checkout/src/libstd/heap.rs"
  }
 }
 HEAP32[$err>>2] = 0; //@line 364 "/checkout/src/libcore/ptr.rs"
 $_18$sroa$4$0$_6$sroa$0$0$$sroa_idx2$i$sroa_idx16 = ((($err)) + 4|0); //@line 364 "/checkout/src/libcore/ptr.rs"
 HEAP32[$_18$sroa$4$0$_6$sroa$0$0$$sroa_idx2$i$sroa_idx16>>2] = $size; //@line 364 "/checkout/src/libcore/ptr.rs"
 $_18$sroa$5$0$_6$sroa$0$0$$sroa_idx2$i$sroa_idx18 = ((($err)) + 8|0); //@line 364 "/checkout/src/libcore/ptr.rs"
 HEAP32[$_18$sroa$5$0$_6$sroa$0$0$$sroa_idx2$i$sroa_idx18>>2] = $align; //@line 364 "/checkout/src/libcore/ptr.rs"
 $_0$0 = 0;
 STACKTOP = sp;return ($_0$0|0); //@line 44 "/checkout/src/libstd/heap.rs"
}
function ___rdl_oom($err) {
 $err = $err|0;
 var $$sink5$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $_3 = 0, $_4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_3 = sp + 12|0;
 $_4 = sp;
 $0 = HEAP32[$err>>2]|0; //@line 309 "/checkout/src/liballoc/allocator.rs"
 $1 = ((($err)) + 4|0);
 $2 = ((($err)) + 8|0);
 $$sink5$i = HEAP32[$1>>2]|0; //@line 103 "/checkout/src/libcore/clone.rs"
 $3 = HEAP32[$2>>2]|0; //@line 103 "/checkout/src/libcore/clone.rs"
 HEAP32[$_4>>2] = $0; //@line 309 "/checkout/src/liballoc/allocator.rs"
 $4 = ((($_4)) + 4|0); //@line 309 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$4>>2] = $$sink5$i; //@line 309 "/checkout/src/liballoc/allocator.rs"
 $5 = ((($_4)) + 8|0); //@line 309 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$5>>2] = $3; //@line 309 "/checkout/src/liballoc/allocator.rs"
 __ZN64__LT_alloc_system__System_u20_as_u20_alloc__allocator__Alloc_GT_3oom17hdfda2c8531b88263E($_3,$_4); //@line 49 "/checkout/src/libstd/heap.rs"
 // unreachable; //@line 49 "/checkout/src/libstd/heap.rs"
}
function ___rdl_dealloc($ptr,$size,$align) {
 $ptr = $ptr|0;
 $size = $size|0;
 $align = $align|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr); //@line 168 "/checkout/src/liballoc_system/lib.rs"
 return; //@line 58 "/checkout/src/libstd/heap.rs"
}
function ___rdl_realloc($ptr,$old_size,$old_align,$new_size,$new_align,$err) {
 $ptr = $ptr|0;
 $old_size = $old_size|0;
 $old_align = $old_align|0;
 $new_size = $new_size|0;
 $new_align = $new_align|0;
 $err = $err|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0 = 0, $_0$0$sroa$speculated$i = 0, $_13$sroa$13$0$ph = 0, $_13$sroa$16$0$ph = 0, $_13$sroa$7$0$ph = 0, $_26$sroa$4$0$_6$sroa$0$0$$sroa_idx2$i$sroa_idx16 = 0, $_26$sroa$5$0$_6$sroa$0$0$$sroa_idx2$i$sroa_idx18 = 0, $or$cond$i$i = 0, $or$cond21$i$i = 0, $out$i$i$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $out$i$i$i$i = sp;
 $0 = ($old_align|0)==($new_align|0); //@line 176 "/checkout/src/liballoc_system/lib.rs"
 do {
  if ($0) {
   $1 = ($old_align>>>0)>(8); //@line 182 "/checkout/src/liballoc_system/lib.rs"
   $2 = ($old_align>>>0)>($new_size>>>0); //@line 182 "/checkout/src/liballoc_system/lib.rs"
   $or$cond21$i$i = $1 | $2; //@line 182 "/checkout/src/liballoc_system/lib.rs"
   if (!($or$cond21$i$i)) {
    $7 = (_realloc($ptr,$new_size)|0); //@line 183 "/checkout/src/liballoc_system/lib.rs"
    $8 = ($7|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
    if ($8) {
     $_13$sroa$13$0$ph = $new_size;$_13$sroa$16$0$ph = $old_align;$_13$sroa$7$0$ph = 0;
     break;
    } else {
     $_0$0 = $7;
    }
    STACKTOP = sp;return ($_0$0|0); //@line 87 "/checkout/src/libstd/heap.rs"
   }
   HEAP32[$out$i$i$i$i>>2] = 0; //@line 254 "/checkout/src/liballoc_system/lib.rs"
   $3 = (_posix_memalign($out$i$i$i$i,$old_align,$new_size)|0); //@line 255 "/checkout/src/liballoc_system/lib.rs"
   $4 = ($3|0)!=(0); //@line 256 "/checkout/src/liballoc_system/lib.rs"
   $5 = HEAP32[$out$i$i$i$i>>2]|0; //@line 259 "/checkout/src/liballoc_system/lib.rs"
   $6 = ($5|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
   $or$cond$i$i = $4 | $6;
   if ($or$cond$i$i) {
    $_13$sroa$13$0$ph = $new_size;$_13$sroa$16$0$ph = $old_align;$_13$sroa$7$0$ph = 0;
   } else {
    $9 = ($old_size>>>0)<=($new_size>>>0); //@line 848 "/checkout/src/libcore/cmp.rs"
    $_0$0$sroa$speculated$i = $9 ? $old_size : $new_size; //@line 478 "/checkout/src/libcore/cmp.rs"
    _memcpy(($5|0),($ptr|0),($_0$0$sroa$speculated$i|0))|0; //@line 193 "/checkout/src/liballoc_system/lib.rs"
    _free($ptr); //@line 168 "/checkout/src/liballoc_system/lib.rs"
    $_0$0 = $5;
    STACKTOP = sp;return ($_0$0|0); //@line 87 "/checkout/src/libstd/heap.rs"
   }
  } else {
   $_13$sroa$13$0$ph = (23180);$_13$sroa$16$0$ph = 36;$_13$sroa$7$0$ph = 1;
  }
 } while(0);
 HEAP32[$err>>2] = $_13$sroa$7$0$ph; //@line 364 "/checkout/src/libcore/ptr.rs"
 $_26$sroa$4$0$_6$sroa$0$0$$sroa_idx2$i$sroa_idx16 = ((($err)) + 4|0); //@line 364 "/checkout/src/libcore/ptr.rs"
 HEAP32[$_26$sroa$4$0$_6$sroa$0$0$$sroa_idx2$i$sroa_idx16>>2] = $_13$sroa$13$0$ph; //@line 364 "/checkout/src/libcore/ptr.rs"
 $_26$sroa$5$0$_6$sroa$0$0$$sroa_idx2$i$sroa_idx18 = ((($err)) + 8|0); //@line 364 "/checkout/src/libcore/ptr.rs"
 HEAP32[$_26$sroa$5$0$_6$sroa$0$0$$sroa_idx2$i$sroa_idx18>>2] = $_13$sroa$16$0$ph; //@line 364 "/checkout/src/libcore/ptr.rs"
 $_0$0 = 0;
 STACKTOP = sp;return ($_0$0|0); //@line 87 "/checkout/src/libstd/heap.rs"
}
function __ZN58__LT_std__sys_common__remutex__ReentrantMutex_LT_T_GT__GT_3new17h1ef6edaee603850dE($0,$t) {
 $0 = $0|0;
 $t = $t|0;
 var $1 = 0, $2 = 0, $3 = 0, $_5$i$i$i = 0, $attr$i = 0, $err$i$i = 0, $mutex$sroa$4$0$$sroa_idx = 0, $mutex$sroa$5$0$$sroa_idx = 0, $mutex$sroa$6 = 0, $mutex$sroa$6$0$$sroa_idx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $attr$i = sp + 24|0;
 $err$i$i = sp + 12|0;
 $_5$i$i$i = sp;
 $mutex$sroa$6 = sp + 28|0;
 $1 = (___rust_alloc(28,4,$err$i$i)|0); //@line 84 "/checkout/src/liballoc/heap.rs"
 $2 = ($1|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
 if ($2) {
  ___rust_oom($_5$i$i$i); //@line 98 "/checkout/src/liballoc/heap.rs"
  // unreachable; //@line 98 "/checkout/src/liballoc/heap.rs"
 } else {
  $3 = $1; //@line 60 "/checkout/src/libstd/sys_common/remutex.rs"
  (_pthread_mutexattr_init(($attr$i|0))|0); //@line 110 "/checkout/src/libstd/sys/unix/mutex.rs"
  (_pthread_mutexattr_settype(($attr$i|0),1)|0); //@line 112 "/checkout/src/libstd/sys/unix/mutex.rs"
  (_pthread_mutex_init(($1|0),($attr$i|0))|0); //@line 115 "/checkout/src/libstd/sys/unix/mutex.rs"
  (_pthread_mutexattr_destroy(($attr$i|0))|0); //@line 117 "/checkout/src/libstd/sys/unix/mutex.rs"
  HEAP32[$0>>2] = $3; //@line 65 "/checkout/src/libstd/sys_common/remutex.rs"
  $mutex$sroa$4$0$$sroa_idx = ((($0)) + 4|0); //@line 65 "/checkout/src/libstd/sys_common/remutex.rs"
  ;HEAP32[$mutex$sroa$4$0$$sroa_idx>>2]=HEAP32[$t>>2]|0;HEAP32[$mutex$sroa$4$0$$sroa_idx+4>>2]=HEAP32[$t+4>>2]|0;HEAP32[$mutex$sroa$4$0$$sroa_idx+8>>2]=HEAP32[$t+8>>2]|0;HEAP32[$mutex$sroa$4$0$$sroa_idx+12>>2]=HEAP32[$t+12>>2]|0;HEAP32[$mutex$sroa$4$0$$sroa_idx+16>>2]=HEAP32[$t+16>>2]|0;HEAP32[$mutex$sroa$4$0$$sroa_idx+20>>2]=HEAP32[$t+20>>2]|0; //@line 65 "/checkout/src/libstd/sys_common/remutex.rs"
  $mutex$sroa$5$0$$sroa_idx = ((($0)) + 28|0); //@line 65 "/checkout/src/libstd/sys_common/remutex.rs"
  HEAP8[$mutex$sroa$5$0$$sroa_idx>>0] = 0; //@line 65 "/checkout/src/libstd/sys_common/remutex.rs"
  $mutex$sroa$6$0$$sroa_idx = ((($0)) + 29|0); //@line 65 "/checkout/src/libstd/sys_common/remutex.rs"
  ;HEAP8[$mutex$sroa$6$0$$sroa_idx>>0]=HEAP8[$mutex$sroa$6>>0]|0;HEAP8[$mutex$sroa$6$0$$sroa_idx+1>>0]=HEAP8[$mutex$sroa$6+1>>0]|0;HEAP8[$mutex$sroa$6$0$$sroa_idx+2>>0]=HEAP8[$mutex$sroa$6+2>>0]|0; //@line 65 "/checkout/src/libstd/sys_common/remutex.rs"
  STACKTOP = sp;return; //@line 67 "/checkout/src/libstd/sys_common/remutex.rs"
 }
}
function __ZN3std10sys_common11thread_info11THREAD_INFO7__getit17h73db1c7b8997081aE() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN45__LT_std__thread__local__os__Key_LT_T_GT__GT_3get17hc8d8c0c050b83823E(9000)|0); //@line 184 "/checkout/src/libstd/thread/local.rs"
 return ($0|0); //@line 185 "/checkout/src/libstd/thread/local.rs"
}
function __ZN3std10sys_common11thread_info11THREAD_INFO6__init17h7a835eb5b3234f0dE($0) {
 $0 = $0|0;
 var $_1$sroa$0$0$_2$sroa$0$0$$sroa_idx$i$sroa_idx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0; //@line 548 "/checkout/src/libcore/cell.rs"
 $_1$sroa$0$0$_2$sroa$0$0$$sroa_idx$i$sroa_idx = ((($0)) + 4|0); //@line 548 "/checkout/src/libcore/cell.rs"
 HEAP32[$_1$sroa$0$0$_2$sroa$0$0$$sroa_idx$i$sroa_idx>>2] = 2; //@line 548 "/checkout/src/libcore/cell.rs"
 return; //@line 169 "/checkout/src/libstd/thread/local.rs"
}
function __ZN4core3ptr13drop_in_place17he2f106b0e5c5ac18E($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr13drop_in_place17h6ba3782eeecc005cE_llvm_AFEA653B($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0; //@line 2540 "/checkout/src/libcore/ptr.rs"
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1-1)|0); //@line 1529 "/checkout/src/libcore/sync/atomic.rs"
 $2 = ($1|0)==(1); //@line 933 "/checkout/src/liballoc/arc.rs"
 if (!($2)) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 /* fence */; //@line 1706 "/checkout/src/libcore/sync/atomic.rs"
 __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h6b99c066bc6eaea1E($arg0); //@line 968 "/checkout/src/liballoc/arc.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr13drop_in_place17hc40dc5032d794e44E_llvm_AFEA653B($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmp$sroa$0$0$copyload$i$i$i$i = 0, $tmp$sroa$5$0$$sroa_idx2$i$i$i$i = 0, $tmp$sroa$5$0$copyload$i2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($arg0)) + 8|0);
 $1 = ((($arg0)) + 12|0);
 $2 = HEAP32[$0>>2]|0; //@line 2333 "/checkout/src/liballoc/vec.rs"
 $3 = HEAP32[$1>>2]|0; //@line 2333 "/checkout/src/liballoc/vec.rs"
 $4 = ($2|0)==($3|0); //@line 2333 "/checkout/src/liballoc/vec.rs"
 L1: do {
  if (!($4)) {
   $14 = $2;
   while(1) {
    $13 = ((($14)) + 8|0); //@line 623 "/checkout/src/libcore/ptr.rs"
    HEAP32[$0>>2] = $13; //@line 2347 "/checkout/src/liballoc/vec.rs"
    $tmp$sroa$0$0$copyload$i$i$i$i = HEAP32[$14>>2]|0; //@line 288 "/checkout/src/libcore/ptr.rs"
    $tmp$sroa$5$0$$sroa_idx2$i$i$i$i = ((($14)) + 4|0); //@line 288 "/checkout/src/libcore/ptr.rs"
    $tmp$sroa$5$0$copyload$i2$i$i$i = HEAP32[$tmp$sroa$5$0$$sroa_idx2$i$i$i$i>>2]|0; //@line 288 "/checkout/src/libcore/ptr.rs"
    $15 = $tmp$sroa$5$0$copyload$i2$i$i$i; //@line 59 "/checkout/src/libcore/ptr.rs"
    $16 = HEAP32[$15>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
    __THREW__ = 0;
    invoke_vi($16|0,($tmp$sroa$0$0$copyload$i$i$i$i|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if ($18) {
     break;
    }
    $19 = $tmp$sroa$5$0$copyload$i2$i$i$i; //@line 59 "/checkout/src/libcore/ptr.rs"
    $20 = ((($19)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
    $21 = HEAP32[$20>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
    $22 = ($21|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
    if (!($22)) {
     $23 = ((($19)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
     $24 = HEAP32[$23>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
     ___rust_dealloc($tmp$sroa$0$0$copyload$i$i$i$i,$21,$24); //@line 104 "/checkout/src/liballoc/heap.rs"
    }
    $25 = HEAP32[$0>>2]|0; //@line 2333 "/checkout/src/liballoc/vec.rs"
    $26 = HEAP32[$1>>2]|0; //@line 2333 "/checkout/src/liballoc/vec.rs"
    $27 = ($25|0)==($26|0); //@line 2333 "/checkout/src/liballoc/vec.rs"
    if ($27) {
     break L1;
    } else {
     $14 = $25;
    }
   }
   $5 = ___cxa_find_matching_catch_2()|0;
   $6 = tempRet0;
   $7 = $tmp$sroa$5$0$copyload$i2$i$i$i; //@line 59 "/checkout/src/libcore/ptr.rs"
   __ZN5alloc4heap8box_free17h52dcefd88bd52819E_llvm_EF0F654A($tmp$sroa$0$0$copyload$i$i$i$i,$7); //@line 59 "/checkout/src/libcore/ptr.rs"
   ___resumeException($5|0);
   // unreachable;
  }
 } while(0);
 $8 = ((($arg0)) + 4|0); //@line 2422 "/checkout/src/liballoc/vec.rs"
 $9 = HEAP32[$8>>2]|0; //@line 2422 "/checkout/src/liballoc/vec.rs"
 $10 = ($9|0)==(0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 if ($10) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 $11 = $9 << 3; //@line 232 "/checkout/src/liballoc/raw_vec.rs"
 $12 = HEAP32[$arg0>>2]|0; //@line 2422 "/checkout/src/liballoc/vec.rs"
 ___rust_dealloc($12,$11,4); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN5alloc4heap8box_free17hbd26ccffc05cf9e5E_llvm_AFEA653B($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___rust_dealloc($ptr,12,4); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 265 "/checkout/src/liballoc/heap.rs"
}
function __ZN41__LT_std__sync__mutex__Mutex_LT_T_GT__GT_3new17hdf31bf4bc0e25870E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $_5$i$i$i = 0, $attr$i$i = 0, $err$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $attr$i$i = sp + 24|0;
 $err$i$i = sp + 12|0;
 $_5$i$i$i = sp;
 $1 = (___rust_alloc(28,4,$err$i$i)|0); //@line 84 "/checkout/src/liballoc/heap.rs"
 $2 = ($1|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
 if ($2) {
  ___rust_oom($_5$i$i$i); //@line 98 "/checkout/src/liballoc/heap.rs"
  // unreachable; //@line 98 "/checkout/src/liballoc/heap.rs"
 } else {
  ;HEAP32[$1>>2]=HEAP32[(38508)>>2]|0;HEAP32[$1+4>>2]=HEAP32[(38508)+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[(38508)+8>>2]|0;HEAP32[$1+12>>2]=HEAP32[(38508)+12>>2]|0;HEAP32[$1+16>>2]=HEAP32[(38508)+16>>2]|0;HEAP32[$1+20>>2]=HEAP32[(38508)+20>>2]|0;HEAP32[$1+24>>2]=HEAP32[(38508)+24>>2]|0; //@line 27 "/checkout/src/libstd/sys_common/mutex.rs"
  $3 = $1; //@line 180 "/checkout/src/libstd/sync/mutex.rs"
  (_pthread_mutexattr_init(($attr$i$i|0))|0); //@line 56 "/checkout/src/libstd/sys/unix/mutex.rs"
  (_pthread_mutexattr_settype(($attr$i$i|0),0)|0); //@line 58 "/checkout/src/libstd/sys/unix/mutex.rs"
  (_pthread_mutex_init(($1|0),($attr$i$i|0))|0); //@line 60 "/checkout/src/libstd/sys/unix/mutex.rs"
  (_pthread_mutexattr_destroy(($attr$i$i|0))|0); //@line 62 "/checkout/src/libstd/sys/unix/mutex.rs"
  $4 = $0; //@line 187 "/checkout/src/libstd/sync/mutex.rs"
  $5 = $4; //@line 187 "/checkout/src/libstd/sync/mutex.rs"
  HEAP32[$5>>2] = $3; //@line 187 "/checkout/src/libstd/sync/mutex.rs"
  $6 = (($4) + 4)|0; //@line 187 "/checkout/src/libstd/sync/mutex.rs"
  $7 = $6; //@line 187 "/checkout/src/libstd/sync/mutex.rs"
  HEAP32[$7>>2] = 0; //@line 187 "/checkout/src/libstd/sync/mutex.rs"
  STACKTOP = sp;return; //@line 188 "/checkout/src/libstd/sync/mutex.rs"
 }
}
function __ZN3std10sys_common11at_exit_imp7cleanup17hb4394be0afc856b0E() {
 var $$ = 0, $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_40$sroa$4$0$$sroa_idx = 0, $_40$sroa$5$0$$sroa_idx = 0, $_40$sroa$6$0$$sroa_idx = 0, $_41 = 0, $iter$sroa$0$0 = 0, $iter$sroa$0$0$ph = 0, $iter1 = 0, $magicptr = 0, $tmp$sroa$0$0$copyload$i$i = 0, $tmp$sroa$5$0$$sroa_idx2$i$i = 0, $tmp$sroa$5$0$copyload$i2$i811 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $iter1 = sp + 16|0;
 $_41 = sp;
 $0 = ((($_41)) + 8|0);
 $1 = ((($_41)) + 4|0);
 $_40$sroa$4$0$$sroa_idx = ((($iter1)) + 4|0);
 $_40$sroa$5$0$$sroa_idx = ((($iter1)) + 8|0);
 $_40$sroa$6$0$$sroa_idx = ((($iter1)) + 12|0);
 $iter$sroa$0$0$ph = 0;
 L1: while(1) {
  $iter$sroa$0$0 = $iter$sroa$0$0$ph;
  L3: while(1) {
   $2 = ($iter$sroa$0$0>>>0)<(10); //@line 846 "/checkout/src/libcore/cmp.rs"
   if (!($2)) {
    label = 5;
    break L1;
   }
   $$arith = (($iter$sroa$0$0) + 1)|0; //@line 1982 "/checkout/src/libcore/num/mod.rs"
   $$overflow = ($iter$sroa$0$0>>>0)>(4294967294); //@line 1982 "/checkout/src/libcore/num/mod.rs"
   if ($$overflow) {
    label = 5;
    break L1;
   }
   (_pthread_mutex_lock((38480|0))|0); //@line 67 "/checkout/src/libstd/sys/unix/mutex.rs"
   $3 = HEAP32[9618]|0; //@line 50 "/checkout/src/libstd/sys_common/at_exit_imp.rs"
   $4 = ($iter$sroa$0$0|0)==(9); //@line 51 "/checkout/src/libstd/sys_common/at_exit_imp.rs"
   $$ = $4 ? (1) : 0; //@line 51 "/checkout/src/libstd/sys_common/at_exit_imp.rs"
   HEAP32[9618] = $$; //@line 51 "/checkout/src/libstd/sys_common/at_exit_imp.rs"
   (_pthread_mutex_unlock((38480|0))|0); //@line 72 "/checkout/src/libstd/sys/unix/mutex.rs"
   $magicptr = $3; //@line 55 "/checkout/src/libstd/sys_common/at_exit_imp.rs"
   switch ($magicptr|0) {
   case 1:  {
    label = 7;
    break L1;
    break;
   }
   case 0:  {
    $iter$sroa$0$0 = $$arith;
    break;
   }
   default: {
    break L3;
   }
   }
  }
  ;HEAP32[$_41>>2]=HEAP32[$3>>2]|0;HEAP32[$_41+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$_41+8>>2]=HEAP32[$3+8>>2]|0; //@line 60 "/checkout/src/libstd/sys_common/at_exit_imp.rs"
  $5 = HEAP32[$_41>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
  $6 = HEAP32[$0>>2]|0; //@line 1701 "/checkout/src/liballoc/vec.rs"
  $7 = (($5) + ($6<<3)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $8 = HEAP32[$1>>2]|0; //@line 210 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$iter1>>2] = $5; //@line 60 "/checkout/src/libstd/sys_common/at_exit_imp.rs"
  HEAP32[$_40$sroa$4$0$$sroa_idx>>2] = $8; //@line 60 "/checkout/src/libstd/sys_common/at_exit_imp.rs"
  HEAP32[$_40$sroa$5$0$$sroa_idx>>2] = $5; //@line 60 "/checkout/src/libstd/sys_common/at_exit_imp.rs"
  HEAP32[$_40$sroa$6$0$$sroa_idx>>2] = $7; //@line 60 "/checkout/src/libstd/sys_common/at_exit_imp.rs"
  $9 = ($6|0)==(0); //@line 2333 "/checkout/src/liballoc/vec.rs"
  if (!($9)) {
   $15 = $5;
   while(1) {
    $12 = ((($15)) + 8|0); //@line 623 "/checkout/src/libcore/ptr.rs"
    $tmp$sroa$0$0$copyload$i$i = HEAP32[$15>>2]|0; //@line 288 "/checkout/src/libcore/ptr.rs"
    $tmp$sroa$5$0$$sroa_idx2$i$i = ((($15)) + 4|0); //@line 288 "/checkout/src/libcore/ptr.rs"
    $tmp$sroa$5$0$copyload$i2$i811 = HEAP32[$tmp$sroa$5$0$$sroa_idx2$i$i>>2]|0; //@line 288 "/checkout/src/libcore/ptr.rs"
    $16 = ((($tmp$sroa$5$0$copyload$i2$i811)) + 12|0); //@line 827 "/checkout/src/liballoc/boxed.rs"
    $17 = HEAP32[$16>>2]|0; //@line 827 "/checkout/src/liballoc/boxed.rs"
    __THREW__ = 0;
    invoke_vi($17|0,($tmp$sroa$0$0$copyload$i$i|0)); //@line 827 "/checkout/src/liballoc/boxed.rs"
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if ($19) {
     label = 9;
     break L1;
    }
    $20 = ($12|0)==($7|0); //@line 2333 "/checkout/src/liballoc/vec.rs"
    if ($20) {
     break;
    } else {
     $15 = $12;
    }
   }
   HEAP32[$_40$sroa$5$0$$sroa_idx>>2] = $7;
  }
  $13 = ($8|0)==(0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
  if (!($13)) {
   $14 = $8 << 3; //@line 232 "/checkout/src/liballoc/raw_vec.rs"
   ___rust_dealloc($5,$14,4); //@line 104 "/checkout/src/liballoc/heap.rs"
  }
  ___rust_dealloc($3,12,4); //@line 104 "/checkout/src/liballoc/heap.rs"
  $iter$sroa$0$0$ph = $$arith;
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return; //@line 66 "/checkout/src/libstd/sys_common/at_exit_imp.rs"
 }
 else if ((label|0) == 7) {
  __ZN3std9panicking11begin_panic17hc122bd4e5599889dE(23262,37,8976); //@line 55 "/checkout/src/libstd/sys_common/at_exit_imp.rs"
  // unreachable; //@line 55 "/checkout/src/libstd/sys_common/at_exit_imp.rs"
 }
 else if ((label|0) == 9) {
  $10 = ___cxa_find_matching_catch_2()|0;
  $11 = tempRet0;
  HEAP32[$_40$sroa$5$0$$sroa_idx>>2] = $12;
  __ZN4core3ptr13drop_in_place17hc40dc5032d794e44E_llvm_AFEA653B($iter1); //@line 62 "/checkout/src/libstd/sys_common/at_exit_imp.rs"
  __ZN5alloc4heap8box_free17hbd26ccffc05cf9e5E_llvm_AFEA653B($3); //@line 63 "/checkout/src/libstd/sys_common/at_exit_imp.rs"
  ___resumeException($10|0);
  // unreachable;
 }
}
function __ZN3std10sys_common11at_exit_imp4push17h108480f55ebe8470E_llvm_AFEA653B($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_5$i$i$i$i = 0, $err$i$i$i = 0, $ret$0$off012 = 0, $value$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $value$i = sp + 24|0;
 $err$i$i$i = sp + 12|0;
 $_5$i$i$i$i = sp;
 (_pthread_mutex_lock((38480|0))|0); //@line 67 "/checkout/src/libstd/sys/unix/mutex.rs"
 $2 = HEAP32[9618]|0; //@line 35 "/checkout/src/libstd/sys_common/at_exit_imp.rs"
 $3 = $1; //@line 35 "/checkout/src/libstd/sys_common/at_exit_imp.rs"
 $4 = $0; //@line 35 "/checkout/src/libstd/sys_common/at_exit_imp.rs"
 $5 = $2; //@line 35 "/checkout/src/libstd/sys_common/at_exit_imp.rs"
 L1: do {
  switch ($2|0) {
  case 0:  {
   $8 = (___rust_alloc(12,4,$err$i$i$i)|0); //@line 84 "/checkout/src/liballoc/heap.rs"
   $9 = ($8|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
   if ($9) {
    ___rust_oom($_5$i$i$i$i); //@line 98 "/checkout/src/liballoc/heap.rs"
    // unreachable; //@line 98 "/checkout/src/liballoc/heap.rs"
   } else {
    HEAP32[$8>>2] = (4); //@line 322 "/checkout/src/liballoc/vec.rs"
    $10 = ((($8)) + 4|0); //@line 322 "/checkout/src/liballoc/vec.rs"
    HEAP32[$10>>2] = 0; //@line 322 "/checkout/src/liballoc/vec.rs"
    $11 = ((($8)) + 8|0); //@line 322 "/checkout/src/liballoc/vec.rs"
    HEAP32[$11>>2] = 0; //@line 322 "/checkout/src/liballoc/vec.rs"
    HEAP32[9618] = $8; //@line 37 "/checkout/src/libstd/sys_common/at_exit_imp.rs"
    $14 = $8;
    break L1;
   }
   break;
  }
  case 1:  {
   (_pthread_mutex_unlock((38480|0))|0); //@line 72 "/checkout/src/libstd/sys/unix/mutex.rs"
   $27 = HEAP32[$1>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
   __THREW__ = 0;
   invoke_vi($27|0,($0|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   if ($29) {
    $35 = ___cxa_find_matching_catch_2()|0;
    $36 = tempRet0;
    __ZN5alloc4heap8box_free17h52dcefd88bd52819E_1241($0,$1); //@line 59 "/checkout/src/libcore/ptr.rs"
    ___resumeException($35|0);
    // unreachable;
   }
   $30 = ((($1)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
   $31 = HEAP32[$30>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
   $32 = ($31|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
   if ($32) {
    $ret$0$off012 = 0;
    STACKTOP = sp;return ($ret$0$off012|0); //@line 80 "/checkout/src/libstd/sys_common/at_exit_imp.rs"
   }
   $33 = ((($1)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
   $34 = HEAP32[$33>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
   ___rust_dealloc($0,$31,$34); //@line 104 "/checkout/src/liballoc/heap.rs"
   $ret$0$off012 = 0;
   STACKTOP = sp;return ($ret$0$off012|0); //@line 80 "/checkout/src/libstd/sys_common/at_exit_imp.rs"
   break;
  }
  default: {
   $14 = $5;
  }
  }
 } while(0);
 HEAP32[$value$i>>2] = $0;
 $12 = ((($value$i)) + 4|0);
 HEAP32[$12>>2] = $1;
 $13 = ((($14)) + 8|0); //@line 967 "/checkout/src/liballoc/vec.rs"
 $15 = HEAP32[$13>>2]|0; //@line 967 "/checkout/src/liballoc/vec.rs"
 $16 = ((($14)) + 4|0); //@line 210 "/checkout/src/liballoc/raw_vec.rs"
 $17 = HEAP32[$16>>2]|0; //@line 210 "/checkout/src/liballoc/raw_vec.rs"
 $18 = ($15|0)==($17|0); //@line 967 "/checkout/src/liballoc/vec.rs"
 do {
  if ($18) {
   __THREW__ = 0;
   invoke_vi(440,($14|0)); //@line 968 "/checkout/src/liballoc/vec.rs"
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    $6 = ___cxa_find_matching_catch_2()|0;
    $7 = tempRet0;
    __ZN4core3ptr13drop_in_place17h0516bdf26a54dfeeE($value$i); //@line 975 "/checkout/src/liballoc/vec.rs"
    ___resumeException($6|0);
    // unreachable;
   } else {
    $$pre = HEAP32[$13>>2]|0;
    $23 = $$pre;
    break;
   }
  } else {
   $23 = $15;
  }
 } while(0);
 $21 = HEAP32[$14>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 $22 = (($21) + ($23<<3)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
 HEAP32[$22>>2] = $4; //@line 364 "/checkout/src/libcore/ptr.rs"
 $24 = (((($21) + ($23<<3)|0)) + 4|0); //@line 364 "/checkout/src/libcore/ptr.rs"
 HEAP32[$24>>2] = $3; //@line 364 "/checkout/src/libcore/ptr.rs"
 $25 = HEAP32[$13>>2]|0; //@line 973 "/checkout/src/liballoc/vec.rs"
 $26 = (($25) + 1)|0; //@line 973 "/checkout/src/liballoc/vec.rs"
 HEAP32[$13>>2] = $26; //@line 973 "/checkout/src/liballoc/vec.rs"
 (_pthread_mutex_unlock((38480|0))|0); //@line 72 "/checkout/src/libstd/sys/unix/mutex.rs"
 $ret$0$off012 = 1;
 STACKTOP = sp;return ($ret$0$off012|0); //@line 80 "/checkout/src/libstd/sys_common/at_exit_imp.rs"
}
function __ZN4core3ptr13drop_in_place17h0516bdf26a54dfeeE($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $1 = ((($arg0)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $2 = HEAP32[$1>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $3 = HEAP32[$2>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 __THREW__ = 0;
 invoke_vi($3|0,($0|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  $15 = HEAP32[$arg0>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $16 = HEAP32[$1>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  __ZN5alloc4heap8box_free17h52dcefd88bd52819E_1241($15,$16); //@line 59 "/checkout/src/libcore/ptr.rs"
  ___resumeException($13|0);
  // unreachable;
 }
 $6 = HEAP32[$1>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $7 = ((($6)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $8 = HEAP32[$7>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
 $9 = ($8|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
 if ($9) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 $10 = HEAP32[$arg0>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $11 = ((($6)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $12 = HEAP32[$11>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
 ___rust_dealloc($10,$8,$12); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN5alloc4heap8box_free17h52dcefd88bd52819E_1241($ptr$0,$ptr$1) {
 $ptr$0 = $ptr$0|0;
 $ptr$1 = $ptr$1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ptr$1)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $1 = HEAP32[$0>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
 $2 = ($1|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
 if ($2) {
  return; //@line 265 "/checkout/src/liballoc/heap.rs"
 }
 $3 = ((($ptr$1)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $4 = HEAP32[$3>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
 ___rust_dealloc($ptr$0,$1,$4); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 265 "/checkout/src/liballoc/heap.rs"
}
function __ZN3std10sys_common12thread_local9StaticKey9lazy_init17h73ae988f9d1fd857E($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$1 = 0, $_21$i = 0, $_21$i10 = 0, $_28$i = 0, $_5$sroa$0$0$$sroa_idx$i$i = 0, $_5$sroa$0$0$$sroa_idx$i$i15 = 0, $_5$sroa$4$0$$sroa_idx2$i$i = 0, $_5$sroa$4$0$$sroa_idx2$i$i17 = 0, $_6$i = 0, $_6$i13 = 0, $key$i = 0, $key$i14 = 0, $key1$021 = 0, $left_val$i = 0, $left_val$i12 = 0, $right_val$i = 0;
 var $right_val$i11 = 0, $success = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $_21$i10 = sp + 72|0;
 $right_val$i11 = sp + 68|0;
 $left_val$i12 = sp + 64|0;
 $_6$i13 = sp + 60|0;
 $key$i14 = sp + 56|0;
 $_28$i = sp + 40|0;
 $_21$i = sp + 16|0;
 $right_val$i = sp + 12|0;
 $left_val$i = sp + 8|0;
 $_6$i = sp + 4|0;
 $key$i = sp;
 $0 = ((($self)) + 4|0); //@line 185 "/checkout/src/libstd/sys_common/thread_local.rs"
 $1 = HEAP32[$0>>2]|0; //@line 185 "/checkout/src/libstd/sys_common/thread_local.rs"
 HEAP32[$key$i>>2] = 0; //@line 20 "/checkout/src/libstd/sys/unix/thread_local.rs"
 $2 = (_pthread_key_create(($key$i|0),($1|0))|0); //@line 21 "/checkout/src/libstd/sys/unix/thread_local.rs"
 HEAP32[$_6$i>>2] = $2; //@line 21 "/checkout/src/libstd/sys/unix/thread_local.rs"
 HEAP32[$left_val$i>>2] = $_6$i; //@line 21 "/checkout/src/libstd/sys/unix/thread_local.rs"
 HEAP32[$right_val$i>>2] = 38616; //@line 21 "/checkout/src/libstd/sys/unix/thread_local.rs"
 $3 = ($2|0)==(0); //@line 21 "/checkout/src/libstd/sys/unix/thread_local.rs"
 if (!($3)) {
  HEAP32[$_28$i>>2] = $left_val$i; //@line 21 "/checkout/src/libstd/sys/unix/thread_local.rs"
  $4 = ((($_28$i)) + 4|0); //@line 21 "/checkout/src/libstd/sys/unix/thread_local.rs"
  HEAP32[$4>>2] = 441; //@line 21 "/checkout/src/libstd/sys/unix/thread_local.rs"
  $5 = ((($_28$i)) + 8|0); //@line 21 "/checkout/src/libstd/sys/unix/thread_local.rs"
  HEAP32[$5>>2] = $right_val$i; //@line 21 "/checkout/src/libstd/sys/unix/thread_local.rs"
  $6 = ((($_28$i)) + 12|0); //@line 21 "/checkout/src/libstd/sys/unix/thread_local.rs"
  HEAP32[$6>>2] = 441; //@line 21 "/checkout/src/libstd/sys/unix/thread_local.rs"
  HEAP32[$_21$i>>2] = 9024; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $7 = ((($_21$i)) + 4|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$7>>2] = 3; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $_5$sroa$0$0$$sroa_idx$i$i = ((($_21$i)) + 8|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_5$sroa$0$0$$sroa_idx$i$i>>2] = 12044; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $_5$sroa$4$0$$sroa_idx2$i$i = ((($_21$i)) + 12|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_5$sroa$4$0$$sroa_idx2$i$i>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $8 = ((($_21$i)) + 16|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$8>>2] = $_28$i; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $9 = ((($_21$i)) + 20|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$9>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  __ZN3std9panicking15begin_panic_fmt17h4cb2c5614efe15b0E($_21$i,9048); //@line 21 "/checkout/src/libstd/sys/unix/thread_local.rs"
  // unreachable; //@line 21 "/checkout/src/libstd/sys/unix/thread_local.rs"
 }
 $10 = HEAP32[$key$i>>2]|0; //@line 22 "/checkout/src/libstd/sys/unix/thread_local.rs"
 $11 = ($10|0)==(0); //@line 186 "/checkout/src/libstd/sys_common/thread_local.rs"
 if ($11) {
  $12 = HEAP32[$0>>2]|0; //@line 189 "/checkout/src/libstd/sys_common/thread_local.rs"
  HEAP32[$key$i14>>2] = 0; //@line 20 "/checkout/src/libstd/sys/unix/thread_local.rs"
  $13 = (_pthread_key_create(($key$i14|0),($12|0))|0); //@line 21 "/checkout/src/libstd/sys/unix/thread_local.rs"
  HEAP32[$_6$i13>>2] = $13; //@line 21 "/checkout/src/libstd/sys/unix/thread_local.rs"
  HEAP32[$left_val$i12>>2] = $_6$i13; //@line 21 "/checkout/src/libstd/sys/unix/thread_local.rs"
  HEAP32[$right_val$i11>>2] = 38616; //@line 21 "/checkout/src/libstd/sys/unix/thread_local.rs"
  $14 = ($13|0)==(0); //@line 21 "/checkout/src/libstd/sys/unix/thread_local.rs"
  if (!($14)) {
   HEAP32[$_28$i>>2] = $left_val$i12; //@line 21 "/checkout/src/libstd/sys/unix/thread_local.rs"
   $15 = ((($_28$i)) + 4|0); //@line 21 "/checkout/src/libstd/sys/unix/thread_local.rs"
   HEAP32[$15>>2] = 441; //@line 21 "/checkout/src/libstd/sys/unix/thread_local.rs"
   $16 = ((($_28$i)) + 8|0); //@line 21 "/checkout/src/libstd/sys/unix/thread_local.rs"
   HEAP32[$16>>2] = $right_val$i11; //@line 21 "/checkout/src/libstd/sys/unix/thread_local.rs"
   $17 = ((($_28$i)) + 12|0); //@line 21 "/checkout/src/libstd/sys/unix/thread_local.rs"
   HEAP32[$17>>2] = 441; //@line 21 "/checkout/src/libstd/sys/unix/thread_local.rs"
   HEAP32[$_21$i10>>2] = 9024; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
   $18 = ((($_21$i10)) + 4|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
   HEAP32[$18>>2] = 3; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
   $_5$sroa$0$0$$sroa_idx$i$i15 = ((($_21$i10)) + 8|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
   HEAP32[$_5$sroa$0$0$$sroa_idx$i$i15>>2] = 12044; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
   $_5$sroa$4$0$$sroa_idx2$i$i17 = ((($_21$i10)) + 12|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
   HEAP32[$_5$sroa$4$0$$sroa_idx2$i$i17>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
   $19 = ((($_21$i10)) + 16|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
   HEAP32[$19>>2] = $_28$i; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
   $20 = ((($_21$i10)) + 20|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
   HEAP32[$20>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
   __ZN3std9panicking15begin_panic_fmt17h4cb2c5614efe15b0E($_21$i10,9048); //@line 21 "/checkout/src/libstd/sys/unix/thread_local.rs"
   // unreachable; //@line 21 "/checkout/src/libstd/sys/unix/thread_local.rs"
  }
  $21 = HEAP32[$key$i14>>2]|0; //@line 22 "/checkout/src/libstd/sys/unix/thread_local.rs"
  (_pthread_key_delete(0)|0); //@line 38 "/checkout/src/libstd/sys/unix/thread_local.rs"
  $22 = ($21|0)==(0); //@line 193 "/checkout/src/libstd/sys_common/thread_local.rs"
  if ($22) {
   __ZN3std9panicking11begin_panic17hc122bd4e5599889dE(23299,26,9064); //@line 193 "/checkout/src/libstd/sys_common/thread_local.rs"
   // unreachable; //@line 193 "/checkout/src/libstd/sys_common/thread_local.rs"
  } else {
   $key1$021 = $21;
  }
 } else {
  $key1$021 = $10;
 }
 $23 = HEAP32[$self>>2]|0;if (($23|0) == 0) HEAP32[$self>>2] = $key1$021; //@line 1549 "/checkout/src/libcore/sync/atomic.rs"
 $success = ($23|0)==(0);
 if ($success) {
  $_0$1 = $key1$021;
  STACKTOP = sp;return ($_0$1|0); //@line 200 "/checkout/src/libstd/sys_common/thread_local.rs"
 }
 (_pthread_key_delete(($key1$021|0))|0); //@line 38 "/checkout/src/libstd/sys/unix/thread_local.rs"
 $_0$1 = $23;
 STACKTOP = sp;return ($_0$1|0); //@line 200 "/checkout/src/libstd/sys_common/thread_local.rs"
}
function __ZN3std3sys4unix9backtrace8printing6dladdr15resolve_symname17h76819cae94e8df54E($0,$frame$0,$frame$1,$callback,$arg2) {
 $0 = $0|0;
 $frame$0 = $frame$0|0;
 $frame$1 = $frame$1|0;
 $callback = $callback|0;
 $arg2 = $arg2|0;
 var $$$$$i$i$i$i$i$i$i = 0, $$$$i$i$i$i$i$i$i = 0, $$$i$i$i$i$i$i$i = 0, $$pre$i$i$i$i$i$i$i$i$i = 0, $$pre$phi12Z2D = 0, $$promoted$i$i = 0, $$promoted$i$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $_0$0$i$i$i$i$i$i$i$i = 0, $_0$0$i10$i$i$i$i$i$i$i$i = 0, $_0$0$i16$i$i$i$i$i$i$i$i = 0, $_0$0$i5$i$i$i$i$i$i$i$i = 0, $_17 = 0;
 var $_4$i$i$i$i = 0, $_6$i$i$i$i = 0, $info = 0, $not$$i = 0, $or$cond = 0, $or$cond$i$i$i$i$i$i$i$i$i$i = 0, $phitmp$i$i$i$i$i$i$i$i = 0, $phitmp21$i$i$i$i$i$i$i$i = 0, $phitmp22$i$i$i$i$i$i$i$i = 0, $switch$i = 0, $switch$i$i$i$i$i = 0, $switch$i1$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $_6$i$i$i$i = sp;
 $_4$i$i$i$i = sp + 92|0;
 $_17 = sp + 80|0;
 $info = sp + 64|0;
 ;HEAP32[$info>>2]=0|0;HEAP32[$info+4>>2]=0|0;HEAP32[$info+8>>2]=0|0;HEAP32[$info+12>>2]=0|0; //@line 24 "/checkout/src/libstd/sys/unix/backtrace/printing/dladdr.rs"
 $1 = (_dladdr(($frame$0|0),($info|0))|0); //@line 25 "/checkout/src/libstd/sys/unix/backtrace/printing/dladdr.rs"
 $2 = ($1|0)==(0); //@line 25 "/checkout/src/libstd/sys/unix/backtrace/printing/dladdr.rs"
 if ($2) {
  HEAP8[$0>>0] = 3; //@line 114 "/checkout/src/libstd/sys_common/backtrace.rs"
  STACKTOP = sp;return; //@line 33 "/checkout/src/libstd/sys/unix/backtrace/printing/dladdr.rs"
 }
 $11 = ((($info)) + 8|0); //@line 26 "/checkout/src/libstd/sys/unix/backtrace/printing/dladdr.rs"
 $3 = HEAP32[$11>>2]|0; //@line 26 "/checkout/src/libstd/sys/unix/backtrace/printing/dladdr.rs"
 $12 = ($3|0)==(0|0); //@line 532 "/checkout/src/libcore/ptr.rs"
 if ($12) {
  HEAP8[$0>>0] = 3; //@line 114 "/checkout/src/libstd/sys_common/backtrace.rs"
  STACKTOP = sp;return; //@line 33 "/checkout/src/libstd/sys/unix/backtrace/printing/dladdr.rs"
 }
 $4 = (_strlen($3)|0); //@line 902 "/checkout/src/libstd/ffi/c_str.rs"
 $5 = ($4|0)==(-1); //@line 875 "/checkout/src/libcore/slice/mod.rs"
 if ($5) {
  __ZN4core5slice20slice_index_len_fail17h440967be6f416601E(-1,0); //@line 876 "/checkout/src/libcore/slice/mod.rs"
  // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
 }
 __ZN4core3str9from_utf817hbf2fe8d2f1e56658E($_17,$3,$4); //@line 1100 "/checkout/src/libstd/ffi/c_str.rs"
 $6 = HEAP32[$_17>>2]|0; //@line 346 "/checkout/src/libcore/result.rs"
 $switch$i = ($6|0)==(1); //@line 346 "/checkout/src/libcore/result.rs"
 $7 = ((($_17)) + 4|0); //@line 346 "/checkout/src/libcore/result.rs"
 $8 = HEAP32[$7>>2]|0; //@line 346 "/checkout/src/libcore/result.rs"
 $9 = ((($_17)) + 8|0); //@line 346 "/checkout/src/libcore/result.rs"
 $10 = HEAP32[$9>>2]|0; //@line 346 "/checkout/src/libcore/result.rs"
 $not$$i = ($8|0)==(0|0); //@line 108 "/checkout/src/libstd/sys_common/backtrace.rs"
 $or$cond = $switch$i | $not$$i;
 if ($or$cond) {
  HEAP8[$0>>0] = 3; //@line 114 "/checkout/src/libstd/sys_common/backtrace.rs"
  STACKTOP = sp;return; //@line 33 "/checkout/src/libstd/sys/unix/backtrace/printing/dladdr.rs"
 }
 __ZN4core3str7pattern11StrSearcher3new17had32f170a3a66344E($_6$i$i$i$i,$8,$10,23475,28); //@line 548 "/checkout/src/libcore/str/pattern.rs"
 $13 = HEAP32[$_6$i$i$i$i>>2]|0; //@line 674 "/checkout/src/libcore/str/pattern.rs"
 $switch$i$i$i$i$i = ($13|0)==(1); //@line 674 "/checkout/src/libcore/str/pattern.rs"
 do {
  if ($switch$i$i$i$i$i) {
   $14 = ((($_6$i$i$i$i)) + 8|0); //@line 683 "/checkout/src/libcore/str/pattern.rs"
   $15 = ((($_6$i$i$i$i)) + 36|0); //@line 684 "/checkout/src/libcore/str/pattern.rs"
   $16 = HEAP32[$15>>2]|0; //@line 684 "/checkout/src/libcore/str/pattern.rs"
   $17 = ($16|0)==(-1); //@line 684 "/checkout/src/libcore/str/pattern.rs"
   $18 = ((($_6$i$i$i$i)) + 48|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ((($_6$i$i$i$i)) + 52|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ((($_6$i$i$i$i)) + 56|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ((($_6$i$i$i$i)) + 60|0);
   $25 = HEAP32[$24>>2]|0;
   if ($17) {
    __ZN4core3str7pattern14TwoWaySearcher4next17hc52f554c7879b49aE_1257($_4$i$i$i$i,$14,$19,$21,$23,$25,1); //@line 688 "/checkout/src/libcore/str/pattern.rs"
    break;
   } else {
    __ZN4core3str7pattern14TwoWaySearcher4next17hc52f554c7879b49aE_1257($_4$i$i$i$i,$14,$19,$21,$23,$25,0); //@line 692 "/checkout/src/libcore/str/pattern.rs"
    break;
   }
  } else {
   $82 = ((($_6$i$i$i$i)) + 48|0);
   $83 = ((($_6$i$i$i$i)) + 52|0);
   $84 = ((($_6$i$i$i$i)) + 4|0);
   $85 = ((($_6$i$i$i$i)) + 12|0);
   $33 = HEAP32[$83>>2]|0;
   $34 = HEAP32[$82>>2]|0;
   $$promoted$i$i$i = HEAP32[$84>>2]|0; //@line 638 "/checkout/src/libcore/str/pattern.rs"
   $$promoted$i$i = HEAP8[$85>>0]|0; //@line 632 "/checkout/src/libcore/str/pattern.rs"
   $27 = $$promoted$i$i;$31 = $$promoted$i$i$i;
   while(1) {
    $26 = ($27<<24>>24)!=(0); //@line 631 "/checkout/src/libcore/str/pattern.rs"
    $28 = $26 ^ 1; //@line 632 "/checkout/src/libcore/str/pattern.rs"
    $29 = $28&1; //@line 632 "/checkout/src/libcore/str/pattern.rs"
    $30 = ($31|0)==(0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
    $32 = ($33|0)==($31|0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
    $or$cond$i$i$i$i$i$i$i$i$i$i = $30 | $32; //@line 2438 "/checkout/src/libcore/str/mod.rs"
    if ($or$cond$i$i$i$i$i$i$i$i$i$i) {
     $$pre$i$i$i$i$i$i$i$i$i = (($34) + ($31)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $$pre$phi12Z2D = $$pre$i$i$i$i$i$i$i$i$i;
    } else {
     $35 = ($33>>>0)>($31>>>0); //@line 792 "/checkout/src/libcore/slice/mod.rs"
     if (!($35)) {
      label = 12;
      break;
     }
     $36 = (($34) + ($31)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $37 = HEAP8[$36>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
     $38 = ($37<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
     if ($38) {
      $$pre$phi12Z2D = $36;
     } else {
      label = 12;
      break;
     }
    }
    $39 = (($34) + ($31)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
    $40 = (($33) - ($31))|0; //@line 1975 "/checkout/src/libcore/str/mod.rs"
    $41 = (($39) + ($40)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
    $42 = ($$pre$phi12Z2D|0)==($41|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
    do {
     if ($42) {
      $_0$0$i$i$i$i$i$i$i$i = 1114112;
     } else {
      $43 = (($34) + ($31)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
      $44 = ((($43)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
      $45 = HEAP8[$$pre$phi12Z2D>>0]|0; //@line 497 "/checkout/src/libcore/str/mod.rs"
      $46 = ($45<<24>>24)>(-1); //@line 498 "/checkout/src/libcore/str/mod.rs"
      if ($46) {
       $47 = $45&255; //@line 499 "/checkout/src/libcore/str/mod.rs"
       $_0$0$i$i$i$i$i$i$i$i = $47;
       break;
      }
      $48 = $45 & 31; //@line 472 "/checkout/src/libcore/str/mod.rs"
      $49 = $48&255; //@line 472 "/checkout/src/libcore/str/mod.rs"
      $50 = ($40|0)==(1); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
      if ($50) {
       $59 = $41;$_0$0$i16$i$i$i$i$i$i$i$i = 0;
      } else {
       $51 = (($34) + ($31)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
       $52 = ((($51)) + 2|0); //@line 623 "/checkout/src/libcore/ptr.rs"
       $53 = HEAP8[$44>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
       $phitmp$i$i$i$i$i$i$i$i = $53 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
       $59 = $52;$_0$0$i16$i$i$i$i$i$i$i$i = $phitmp$i$i$i$i$i$i$i$i;
      }
      $54 = $49 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
      $55 = $_0$0$i16$i$i$i$i$i$i$i$i&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
      $56 = $55 | $54; //@line 476 "/checkout/src/libcore/str/mod.rs"
      $57 = ($45&255)>(223); //@line 508 "/checkout/src/libcore/str/mod.rs"
      if ($57) {
       $58 = ($59|0)==($41|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
       if ($58) {
        $69 = $41;$_0$0$i10$i$i$i$i$i$i$i$i = 0;
       } else {
        $60 = ((($59)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
        $61 = HEAP8[$59>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
        $phitmp21$i$i$i$i$i$i$i$i = $61 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
        $69 = $60;$_0$0$i10$i$i$i$i$i$i$i$i = $phitmp21$i$i$i$i$i$i$i$i;
       }
       $62 = $55 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
       $63 = $_0$0$i10$i$i$i$i$i$i$i$i&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
       $64 = $63 | $62; //@line 476 "/checkout/src/libcore/str/mod.rs"
       $65 = $49 << 12; //@line 513 "/checkout/src/libcore/str/mod.rs"
       $66 = $64 | $65; //@line 513 "/checkout/src/libcore/str/mod.rs"
       $67 = ($45&255)>(239); //@line 514 "/checkout/src/libcore/str/mod.rs"
       if ($67) {
        $68 = ($69|0)==($41|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
        if ($68) {
         $_0$0$i5$i$i$i$i$i$i$i$i = 0;
        } else {
         $70 = HEAP8[$69>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
         $phitmp22$i$i$i$i$i$i$i$i = $70 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
         $_0$0$i5$i$i$i$i$i$i$i$i = $phitmp22$i$i$i$i$i$i$i$i;
        }
        $71 = $49 << 18; //@line 518 "/checkout/src/libcore/str/mod.rs"
        $72 = $71 & 1835008; //@line 518 "/checkout/src/libcore/str/mod.rs"
        $73 = $64 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
        $74 = $_0$0$i5$i$i$i$i$i$i$i$i&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
        $75 = $73 | $72; //@line 476 "/checkout/src/libcore/str/mod.rs"
        $76 = $75 | $74; //@line 518 "/checkout/src/libcore/str/mod.rs"
        $_0$0$i$i$i$i$i$i$i$i = $76;
       } else {
        $_0$0$i$i$i$i$i$i$i$i = $66;
       }
      } else {
       $_0$0$i$i$i$i$i$i$i$i = $56;
      }
     }
    } while(0);
    if ($26) {
     label = 30;
     break;
    }
    $81 = ($_0$0$i$i$i$i$i$i$i$i|0)==(1114112); //@line 636 "/checkout/src/libcore/str/pattern.rs"
    if ($81) {
     label = 29;
     break;
    }
    $77 = ($_0$0$i$i$i$i$i$i$i$i>>>0)<(128); //@line 463 "/checkout/src/libcore/char.rs"
    $78 = ($_0$0$i$i$i$i$i$i$i$i>>>0)<(2048); //@line 465 "/checkout/src/libcore/char.rs"
    $79 = ($_0$0$i$i$i$i$i$i$i$i>>>0)<(65536); //@line 467 "/checkout/src/libcore/char.rs"
    $$$i$i$i$i$i$i$i = $79 ? 3 : 4; //@line 467 "/checkout/src/libcore/char.rs"
    $$$$i$i$i$i$i$i$i = $78 ? 2 : $$$i$i$i$i$i$i$i; //@line 465 "/checkout/src/libcore/char.rs"
    $$$$$i$i$i$i$i$i$i = $77 ? 1 : $$$$i$i$i$i$i$i$i; //@line 463 "/checkout/src/libcore/char.rs"
    $80 = (($$$$$i$i$i$i$i$i$i) + ($31))|0; //@line 638 "/checkout/src/libcore/str/pattern.rs"
    $27 = $29;$31 = $80;
   }
   if ((label|0) == 12) {
    __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($34,$33,$31,$33); //@line 1987 "/checkout/src/libcore/str/mod.rs"
    // unreachable; //@line 1987 "/checkout/src/libcore/str/mod.rs"
   }
   else if ((label|0) == 29) {
    HEAP8[$85>>0] = $29; //@line 632 "/checkout/src/libcore/str/pattern.rs"
    HEAP32[$84>>2] = $31; //@line 638 "/checkout/src/libcore/str/pattern.rs"
    HEAP32[$_4$i$i$i$i>>2] = 0; //@line 678 "/checkout/src/libcore/str/pattern.rs"
    break;
   }
   else if ((label|0) == 30) {
    HEAP8[$85>>0] = $29; //@line 632 "/checkout/src/libcore/str/pattern.rs"
    HEAP32[$84>>2] = $31; //@line 638 "/checkout/src/libcore/str/pattern.rs"
    HEAP32[$_4$i$i$i$i>>2] = 1; //@line 677 "/checkout/src/libcore/str/pattern.rs"
    $86 = ((($_4$i$i$i$i)) + 4|0); //@line 677 "/checkout/src/libcore/str/pattern.rs"
    HEAP32[$86>>2] = $31; //@line 677 "/checkout/src/libcore/str/pattern.rs"
    $87 = ((($_4$i$i$i$i)) + 8|0); //@line 677 "/checkout/src/libcore/str/pattern.rs"
    HEAP32[$87>>2] = $31; //@line 677 "/checkout/src/libcore/str/pattern.rs"
    break;
   }
  }
 } while(0);
 $88 = HEAP32[$_4$i$i$i$i>>2]|0; //@line 194 "/checkout/src/libcore/option.rs"
 $switch$i1$i$i$i$i = ($88|0)==(1); //@line 194 "/checkout/src/libcore/option.rs"
 if (!($switch$i1$i$i$i$i)) {
  HEAP8[$0>>0] = 3; //@line 114 "/checkout/src/libstd/sys_common/backtrace.rs"
  STACKTOP = sp;return; //@line 33 "/checkout/src/libstd/sys/unix/backtrace/printing/dladdr.rs"
 }
 HEAP8[$callback>>0] = 1; //@line 111 "/checkout/src/libstd/sys_common/backtrace.rs"
 HEAP8[$0>>0] = 3; //@line 114 "/checkout/src/libstd/sys_common/backtrace.rs"
 STACKTOP = sp;return; //@line 33 "/checkout/src/libstd/sys/unix/backtrace/printing/dladdr.rs"
}
function __ZN4core3str7pattern14TwoWaySearcher4next17hc52f554c7879b49aE_1257($0,$self,$haystack$0,$haystack$1,$needle$0,$needle$1,$long_period) {
 $0 = $0|0;
 $self = $self|0;
 $haystack$0 = $haystack$0|0;
 $haystack$1 = $haystack$1|0;
 $needle$0 = $needle$0|0;
 $needle$1 = $needle$1|0;
 $long_period = $long_period|0;
 var $$arith = 0, $$overflow = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$sroa$speculated$i = 0, $iter$sroa$0$0 = 0, $iter3$sroa$5$0 = 0, $start2$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($self)) + 20|0); //@line 955 "/checkout/src/libcore/str/pattern.rs"
 $2 = (($needle$1) + -1)|0; //@line 956 "/checkout/src/libcore/str/pattern.rs"
 $3 = HEAP32[$1>>2]|0; //@line 961 "/checkout/src/libcore/str/pattern.rs"
 $4 = (($3) + ($2))|0; //@line 961 "/checkout/src/libcore/str/pattern.rs"
 $5 = ($4>>>0)<($haystack$1>>>0); //@line 792 "/checkout/src/libcore/slice/mod.rs"
 L1: do {
  if ($5) {
   $6 = ((($self)) + 28|0);
   $7 = ((($self)) + 8|0);
   $8 = ((($self)) + 16|0);
   $9 = $self;
   $10 = $9;
   $11 = HEAP32[$10>>2]|0;
   $12 = (($9) + 4)|0;
   $13 = $12;
   $14 = HEAP32[$13>>2]|0;
   $15 = HEAP32[$7>>2]|0;
   $16 = HEAP32[$8>>2]|0;
   $17 = (($needle$1) - ($16))|0;
   $65 = $4;$66 = $3;
   L3: while(1) {
    $67 = $65;$68 = $66;
    L5: while(1) {
     $19 = $67;$31 = $68;
     while(1) {
      $18 = (($haystack$0) + ($19)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
      $20 = HEAP8[$18>>0]|0; //@line 962 "/checkout/src/libcore/str/pattern.rs"
      $21 = $20 & 63; //@line 941 "/checkout/src/libcore/str/pattern.rs"
      $22 = $21&255; //@line 941 "/checkout/src/libcore/str/pattern.rs"
      $23 = (_bitshift64Shl(1,0,($22|0))|0); //@line 941 "/checkout/src/libcore/str/pattern.rs"
      $24 = tempRet0; //@line 941 "/checkout/src/libcore/str/pattern.rs"
      $25 = $23 & $11; //@line 941 "/checkout/src/libcore/str/pattern.rs"
      $26 = $24 & $14; //@line 941 "/checkout/src/libcore/str/pattern.rs"
      $27 = ($25|0)==(0); //@line 941 "/checkout/src/libcore/str/pattern.rs"
      $28 = ($26|0)==(0); //@line 941 "/checkout/src/libcore/str/pattern.rs"
      $29 = $27 & $28; //@line 941 "/checkout/src/libcore/str/pattern.rs"
      if (!($29)) {
       break;
      }
      $30 = (($31) + ($needle$1))|0; //@line 975 "/checkout/src/libcore/str/pattern.rs"
      HEAP32[$1>>2] = $30; //@line 975 "/checkout/src/libcore/str/pattern.rs"
      if (!($long_period)) {
       HEAP32[$6>>2] = 0; //@line 977 "/checkout/src/libcore/str/pattern.rs"
      }
      $32 = (($30) + ($2))|0; //@line 961 "/checkout/src/libcore/str/pattern.rs"
      $33 = ($32>>>0)<($haystack$1>>>0); //@line 792 "/checkout/src/libcore/slice/mod.rs"
      if ($33) {
       $19 = $32;$31 = $30;
      } else {
       break L1;
      }
     }
     if ($long_period) {
      $iter$sroa$0$0 = $15;
     } else {
      $34 = HEAP32[$6>>2]|0; //@line 984 "/checkout/src/libcore/str/pattern.rs"
      $35 = ($34>>>0)>=($15>>>0); //@line 850 "/checkout/src/libcore/cmp.rs"
      $_0$0$sroa$speculated$i = $35 ? $34 : $15; //@line 462 "/checkout/src/libcore/cmp.rs"
      $iter$sroa$0$0 = $_0$0$sroa$speculated$i;
     }
     while(1) {
      $36 = ($iter$sroa$0$0>>>0)<($needle$1>>>0); //@line 846 "/checkout/src/libcore/cmp.rs"
      if (!($36)) {
       break L5;
      }
      $$arith = (($iter$sroa$0$0) + 1)|0; //@line 1982 "/checkout/src/libcore/num/mod.rs"
      $$overflow = ($iter$sroa$0$0>>>0)>(4294967294); //@line 1982 "/checkout/src/libcore/num/mod.rs"
      if ($$overflow) {
       break L5;
      }
      $38 = (($31) + ($iter$sroa$0$0))|0; //@line 986 "/checkout/src/libcore/str/pattern.rs"
      $39 = ($38>>>0)<($haystack$1>>>0); //@line 825 "/checkout/src/libcore/slice/mod.rs"
      if (!($39)) {
       label = 17;
       break L3;
      }
      $40 = (($needle$0) + ($iter$sroa$0$0)|0); //@line 986 "/checkout/src/libcore/str/pattern.rs"
      $41 = HEAP8[$40>>0]|0; //@line 986 "/checkout/src/libcore/str/pattern.rs"
      $42 = (($haystack$0) + ($38)|0); //@line 825 "/checkout/src/libcore/slice/mod.rs"
      $43 = HEAP8[$42>>0]|0; //@line 986 "/checkout/src/libcore/str/pattern.rs"
      $44 = ($41<<24>>24)==($43<<24>>24); //@line 986 "/checkout/src/libcore/str/pattern.rs"
      if ($44) {
       $iter$sroa$0$0 = $$arith;
      } else {
       break;
      }
     }
     $45 = (($$arith) + ($31))|0; //@line 987 "/checkout/src/libcore/str/pattern.rs"
     $46 = (($45) - ($15))|0; //@line 987 "/checkout/src/libcore/str/pattern.rs"
     HEAP32[$1>>2] = $46; //@line 987 "/checkout/src/libcore/str/pattern.rs"
     if (!($long_period)) {
      HEAP32[$6>>2] = 0; //@line 989 "/checkout/src/libcore/str/pattern.rs"
     }
     $47 = (($46) + ($2))|0; //@line 961 "/checkout/src/libcore/str/pattern.rs"
     $48 = ($47>>>0)<($haystack$1>>>0); //@line 792 "/checkout/src/libcore/slice/mod.rs"
     if ($48) {
      $67 = $47;$68 = $46;
     } else {
      break L1;
     }
    }
    $37 = HEAP32[$6>>2]|0; //@line 996 "/checkout/src/libcore/str/pattern.rs"
    $start2$0 = $long_period ? 0 : $37; //@line 996 "/checkout/src/libcore/str/pattern.rs"
    $iter3$sroa$5$0 = $15;
    while(1) {
     $49 = ($start2$0>>>0)<($iter3$sroa$5$0>>>0); //@line 846 "/checkout/src/libcore/cmp.rs"
     $50 = (($iter3$sroa$5$0) + -1)|0; //@line 192 "/checkout/src/libcore/ops/arith.rs"
     if (!($49)) {
      label = 23;
      break L3;
     }
     $52 = ($50>>>0)<($needle$1>>>0); //@line 998 "/checkout/src/libcore/str/pattern.rs"
     if (!($52)) {
      label = 33;
      break L3;
     }
     $53 = (($50) + ($31))|0; //@line 998 "/checkout/src/libcore/str/pattern.rs"
     $54 = ($53>>>0)<($haystack$1>>>0); //@line 825 "/checkout/src/libcore/slice/mod.rs"
     if (!($54)) {
      label = 26;
      break L3;
     }
     $55 = (($needle$0) + ($50)|0); //@line 998 "/checkout/src/libcore/str/pattern.rs"
     $56 = HEAP8[$55>>0]|0; //@line 998 "/checkout/src/libcore/str/pattern.rs"
     $57 = (($haystack$0) + ($53)|0); //@line 825 "/checkout/src/libcore/slice/mod.rs"
     $58 = HEAP8[$57>>0]|0; //@line 998 "/checkout/src/libcore/str/pattern.rs"
     $59 = ($56<<24>>24)==($58<<24>>24); //@line 998 "/checkout/src/libcore/str/pattern.rs"
     if ($59) {
      $iter3$sroa$5$0 = $50;
     } else {
      break;
     }
    }
    $60 = (($16) + ($31))|0; //@line 999 "/checkout/src/libcore/str/pattern.rs"
    HEAP32[$1>>2] = $60; //@line 999 "/checkout/src/libcore/str/pattern.rs"
    if (!($long_period)) {
     HEAP32[$6>>2] = $17; //@line 1001 "/checkout/src/libcore/str/pattern.rs"
    }
    $61 = (($60) + ($2))|0; //@line 961 "/checkout/src/libcore/str/pattern.rs"
    $62 = ($61>>>0)<($haystack$1>>>0); //@line 792 "/checkout/src/libcore/slice/mod.rs"
    if ($62) {
     $65 = $61;$66 = $60;
    } else {
     break L1;
    }
   }
   if ((label|0) == 17) {
    __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(9080,$38,$haystack$1); //@line 825 "/checkout/src/libcore/slice/mod.rs"
    // unreachable; //@line 825 "/checkout/src/libcore/slice/mod.rs"
   }
   else if ((label|0) == 23) {
    $51 = (($31) + ($needle$1))|0; //@line 1011 "/checkout/src/libcore/str/pattern.rs"
    HEAP32[$1>>2] = $51; //@line 1011 "/checkout/src/libcore/str/pattern.rs"
    if (!($long_period)) {
     HEAP32[$6>>2] = 0; //@line 1013 "/checkout/src/libcore/str/pattern.rs"
    }
    HEAP32[$0>>2] = 1; //@line 1225 "/checkout/src/libcore/str/pattern.rs"
    $63 = ((($0)) + 4|0); //@line 1225 "/checkout/src/libcore/str/pattern.rs"
    HEAP32[$63>>2] = $31; //@line 1225 "/checkout/src/libcore/str/pattern.rs"
    $64 = ((($0)) + 8|0); //@line 1225 "/checkout/src/libcore/str/pattern.rs"
    HEAP32[$64>>2] = $51; //@line 1225 "/checkout/src/libcore/str/pattern.rs"
    return; //@line 1018 "/checkout/src/libcore/str/pattern.rs"
   }
   else if ((label|0) == 26) {
    __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(9080,$53,$haystack$1); //@line 825 "/checkout/src/libcore/slice/mod.rs"
    // unreachable; //@line 825 "/checkout/src/libcore/slice/mod.rs"
   }
   else if ((label|0) == 33) {
    __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(9096,$50,$needle$1); //@line 998 "/checkout/src/libcore/str/pattern.rs"
    // unreachable; //@line 998 "/checkout/src/libcore/str/pattern.rs"
   }
  }
 } while(0);
 HEAP32[$1>>2] = $haystack$1; //@line 964 "/checkout/src/libcore/str/pattern.rs"
 HEAP32[$0>>2] = 0; //@line 1223 "/checkout/src/libcore/str/pattern.rs"
 return; //@line 1018 "/checkout/src/libcore/str/pattern.rs"
}
function __ZN3std3sys4unix9backtrace8printing6dladdr15resolve_symname17h8a3860019f8a2a73E($0,$frame$0,$frame$1,$callback,$arg2) {
 $0 = $0|0;
 $frame$0 = $frame$0|0;
 $frame$1 = $frame$1|0;
 $callback = $callback|0;
 $arg2 = $arg2|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_17 = 0, $_21$sroa$0$0$copyload = 0, $_21$sroa$4$0$$sroa_idx = 0, $_21$sroa$4$0$copyload = 0, $_21$sroa$5$0$$sroa_idx = 0, $_21$sroa$5$0$copyload = 0, $_21$sroa$6$0$$sroa_idx = 0;
 var $_21$sroa$6$0$copyload = 0, $_7$i = 0, $info = 0, $switch$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_7$i = sp;
 $_17 = sp + 24|0;
 $info = sp + 8|0;
 ;HEAP32[$info>>2]=0|0;HEAP32[$info+4>>2]=0|0;HEAP32[$info+8>>2]=0|0;HEAP32[$info+12>>2]=0|0; //@line 24 "/checkout/src/libstd/sys/unix/backtrace/printing/dladdr.rs"
 $1 = (_dladdr(($frame$0|0),($info|0))|0); //@line 25 "/checkout/src/libstd/sys/unix/backtrace/printing/dladdr.rs"
 $2 = ($1|0)==(0); //@line 25 "/checkout/src/libstd/sys/unix/backtrace/printing/dladdr.rs"
 do {
  if ($2) {
   $24 = 0;$25 = 0;$27 = 0;$28 = 0;
  } else {
   $13 = ((($info)) + 8|0); //@line 26 "/checkout/src/libstd/sys/unix/backtrace/printing/dladdr.rs"
   $3 = HEAP32[$13>>2]|0; //@line 26 "/checkout/src/libstd/sys/unix/backtrace/printing/dladdr.rs"
   $14 = ($3|0)==(0|0); //@line 532 "/checkout/src/libcore/ptr.rs"
   if ($14) {
    $24 = 0;$25 = 0;$27 = 0;$28 = 0;
   } else {
    $4 = (_strlen($3)|0); //@line 902 "/checkout/src/libstd/ffi/c_str.rs"
    $5 = ($4|0)==(-1); //@line 875 "/checkout/src/libcore/slice/mod.rs"
    if ($5) {
     __ZN4core5slice20slice_index_len_fail17h440967be6f416601E(-1,0); //@line 876 "/checkout/src/libcore/slice/mod.rs"
     // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
    } else {
     __ZN4core3str9from_utf817hbf2fe8d2f1e56658E($_17,$3,$4); //@line 1100 "/checkout/src/libstd/ffi/c_str.rs"
     $6 = HEAP32[$_17>>2]|0; //@line 346 "/checkout/src/libcore/result.rs"
     $switch$i = ($6|0)==(1); //@line 346 "/checkout/src/libcore/result.rs"
     $7 = ((($_17)) + 4|0); //@line 346 "/checkout/src/libcore/result.rs"
     $8 = HEAP32[$7>>2]|0; //@line 346 "/checkout/src/libcore/result.rs"
     $9 = ((($_17)) + 8|0); //@line 346 "/checkout/src/libcore/result.rs"
     $10 = HEAP32[$9>>2]|0; //@line 346 "/checkout/src/libcore/result.rs"
     $11 = $switch$i ? 0 : $8; //@line 25 "/checkout/src/libstd/sys/unix/backtrace/printing/dladdr.rs"
     $12 = $switch$i ? 0 : 0; //@line 25 "/checkout/src/libstd/sys/unix/backtrace/printing/dladdr.rs"
     $24 = $11;$25 = 0;$27 = $12;$28 = $10;
     break;
    }
   }
  }
 } while(0);
 $_21$sroa$0$0$copyload = HEAP32[$callback>>2]|0; //@line 31 "/checkout/src/libstd/sys/unix/backtrace/printing/dladdr.rs"
 $_21$sroa$4$0$$sroa_idx = ((($callback)) + 4|0); //@line 31 "/checkout/src/libstd/sys/unix/backtrace/printing/dladdr.rs"
 $_21$sroa$4$0$copyload = HEAP32[$_21$sroa$4$0$$sroa_idx>>2]|0; //@line 31 "/checkout/src/libstd/sys/unix/backtrace/printing/dladdr.rs"
 $_21$sroa$5$0$$sroa_idx = ((($callback)) + 8|0); //@line 31 "/checkout/src/libstd/sys/unix/backtrace/printing/dladdr.rs"
 $_21$sroa$5$0$copyload = HEAP32[$_21$sroa$5$0$$sroa_idx>>2]|0; //@line 31 "/checkout/src/libstd/sys/unix/backtrace/printing/dladdr.rs"
 $_21$sroa$6$0$$sroa_idx = ((($callback)) + 12|0); //@line 31 "/checkout/src/libstd/sys/unix/backtrace/printing/dladdr.rs"
 $_21$sroa$6$0$copyload = HEAP32[$_21$sroa$6$0$$sroa_idx>>2]|0; //@line 31 "/checkout/src/libstd/sys/unix/backtrace/printing/dladdr.rs"
 $15 = HEAP32[$_21$sroa$0$0$copyload>>2]|0; //@line 80 "/checkout/src/libstd/sys_common/backtrace.rs"
 $16 = ((($_21$sroa$0$0$copyload)) + 4|0); //@line 80 "/checkout/src/libstd/sys_common/backtrace.rs"
 $17 = HEAP32[$16>>2]|0; //@line 80 "/checkout/src/libstd/sys_common/backtrace.rs"
 $18 = HEAP32[$_21$sroa$4$0$copyload>>2]|0; //@line 80 "/checkout/src/libstd/sys_common/backtrace.rs"
 $19 = HEAP32[$_21$sroa$5$0$copyload>>2]|0; //@line 80 "/checkout/src/libstd/sys_common/backtrace.rs"
 $20 = HEAP32[$19>>2]|0; //@line 80 "/checkout/src/libstd/sys_common/backtrace.rs"
 $21 = ((($19)) + 4|0); //@line 80 "/checkout/src/libstd/sys_common/backtrace.rs"
 $22 = HEAP32[$21>>2]|0; //@line 80 "/checkout/src/libstd/sys_common/backtrace.rs"
 $23 = $24 | $25; //@line 80 "/checkout/src/libstd/sys_common/backtrace.rs"
 $26 = $27 | $28; //@line 80 "/checkout/src/libstd/sys_common/backtrace.rs"
 $29 = $_7$i; //@line 80 "/checkout/src/libstd/sys_common/backtrace.rs"
 $30 = $29; //@line 80 "/checkout/src/libstd/sys_common/backtrace.rs"
 HEAP32[$30>>2] = $23; //@line 80 "/checkout/src/libstd/sys_common/backtrace.rs"
 $31 = (($29) + 4)|0; //@line 80 "/checkout/src/libstd/sys_common/backtrace.rs"
 $32 = $31; //@line 80 "/checkout/src/libstd/sys_common/backtrace.rs"
 HEAP32[$32>>2] = $26; //@line 80 "/checkout/src/libstd/sys_common/backtrace.rs"
 $33 = HEAP8[$_21$sroa$6$0$copyload>>0]|0; //@line 80 "/checkout/src/libstd/sys_common/backtrace.rs"
 __ZN3std10sys_common9backtrace6output17h9c1de3ac202ac2a1E($0,$15,$17,$18,$20,$22,$_7$i,$33); //@line 80 "/checkout/src/libstd/sys_common/backtrace.rs"
 STACKTOP = sp;return; //@line 33 "/checkout/src/libstd/sys/unix/backtrace/printing/dladdr.rs"
}
function __ZN4core3ptr13drop_in_place17hfdb0210616787f77E($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN36__LT_T_u20_as_u20_core__any__Any_GT_11get_type_id17h159ee43a8eb771e8E($self) {
 $self = $self|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 tempRet0 = (-1178862858); //@line 115 "/checkout/src/libcore/any.rs"
 return 364948211; //@line 115 "/checkout/src/libcore/any.rs"
}
function __ZN4core3fmt5Write9write_fmt17ha9719642c9dfd6b6E($self,$args) {
 $self = $self|0;
 $args = $args|0;
 var $0 = 0, $_6 = 0, $_8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_8 = sp + 8|0;
 $_6 = sp;
 HEAP32[$_6>>2] = $self; //@line 223 "/checkout/src/libcore/fmt/mod.rs"
 ;HEAP32[$_8>>2]=HEAP32[$args>>2]|0;HEAP32[$_8+4>>2]=HEAP32[$args+4>>2]|0;HEAP32[$_8+8>>2]=HEAP32[$args+8>>2]|0;HEAP32[$_8+12>>2]=HEAP32[$args+12>>2]|0;HEAP32[$_8+16>>2]=HEAP32[$args+16>>2]|0;HEAP32[$_8+20>>2]=HEAP32[$args+20>>2]|0; //@line 223 "/checkout/src/libcore/fmt/mod.rs"
 $0 = (__ZN4core3fmt5write17h6c8dbcbe50728a23E($_6,9112,$_8)|0); //@line 223 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return ($0|0); //@line 224 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN4core3ptr13drop_in_place17h7099c24ba8976e54E_llvm_27C4321C($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$arg0>>0]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $1 = ($0<<24>>24)==(3); //@line 59 "/checkout/src/libcore/ptr.rs"
 if ($1) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 __ZN4core3ptr13drop_in_place17hb434eb5d905d2ad2E_llvm_27C4321C($arg0); //@line 59 "/checkout/src/libcore/ptr.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr13drop_in_place17hb434eb5d905d2ad2E_llvm_27C4321C($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $switch$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$arg0>>0]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $switch$i = ($0&255)<(2); //@line 59 "/checkout/src/libcore/ptr.rs"
 if ($switch$i) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 $1 = ((($arg0)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $2 = HEAP32[$1>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $3 = HEAP32[$2>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $4 = ((($2)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $5 = HEAP32[$4>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $6 = HEAP32[$5>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 __THREW__ = 0;
 invoke_vi($6|0,($3|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  $18 = HEAP32[$2>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $19 = HEAP32[$4>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  __ZN5alloc4heap8box_free17hb8be26a1f37cb671E_llvm_27C4321C($18,$19); //@line 59 "/checkout/src/libcore/ptr.rs"
  $20 = HEAP32[$1>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  __ZN5alloc4heap8box_free17h0833f2b89912900bE_llvm_27C4321C($20); //@line 59 "/checkout/src/libcore/ptr.rs"
  ___resumeException($16|0);
  // unreachable;
 }
 $9 = HEAP32[$4>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $10 = ((($9)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $11 = HEAP32[$10>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
 $12 = ($11|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
 if (!($12)) {
  $13 = HEAP32[$2>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $14 = ((($9)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
  $15 = HEAP32[$14>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
  ___rust_dealloc($13,$11,$15); //@line 104 "/checkout/src/liballoc/heap.rs"
 }
 $21 = HEAP32[$1>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 ___rust_dealloc($21,12,4); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN5alloc4heap8box_free17hb8be26a1f37cb671E_llvm_27C4321C($ptr$0,$ptr$1) {
 $ptr$0 = $ptr$0|0;
 $ptr$1 = $ptr$1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ptr$1)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $1 = HEAP32[$0>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
 $2 = ($1|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
 if ($2) {
  return; //@line 265 "/checkout/src/liballoc/heap.rs"
 }
 $3 = ((($ptr$1)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $4 = HEAP32[$3>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
 ___rust_dealloc($ptr$0,$1,$4); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 265 "/checkout/src/liballoc/heap.rs"
}
function __ZN5alloc4heap8box_free17h0833f2b89912900bE_llvm_27C4321C($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___rust_dealloc($ptr,12,4); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 265 "/checkout/src/liballoc/heap.rs"
}
function __ZN4core3ptr13drop_in_place17he59d55dacb57c09bE_llvm_27C4321C($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $cond = ($0|0)==(0); //@line 59 "/checkout/src/libcore/ptr.rs"
 if ($cond) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 $1 = ((($arg0)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 __ZN4core3ptr13drop_in_place17hb434eb5d905d2ad2E_llvm_27C4321C($1); //@line 59 "/checkout/src/libcore/ptr.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17hb538d4f6c3ed6b26E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self>>2]|0; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $1 = HEAP32[$0>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 $2 = ((($0)) + 8|0); //@line 1690 "/checkout/src/liballoc/vec.rs"
 $3 = HEAP32[$2>>2]|0; //@line 1690 "/checkout/src/liballoc/vec.rs"
 $4 = (__ZN40__LT_str_u20_as_u20_core__fmt__Debug_GT_3fmt17h05cf80b836a24333E($1,$3,$f)|0); //@line 1770 "/checkout/src/liballoc/string.rs"
 return ($4|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN3std2io5stdio6stdout17he08cc1d9dbe12a05E() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $self$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$i = sp;
 $0 = (__ZN37__LT_std__io__lazy__Lazy_LT_T_GT__GT_3get17h6a06abe4e50ebf23E(9152)|0); //@line 401 "/checkout/src/libstd/io/stdio.rs"
 HEAP32[$self$i>>2] = $0;
 $1 = ($0|0)==(0|0); //@line 301 "/checkout/src/libcore/option.rs"
 if ($1) {
  __THREW__ = 0;
  invoke_vii(364,(23602|0),36); //@line 302 "/checkout/src/libcore/option.rs"
  $2 = __THREW__; __THREW__ = 0;
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  __ZN4core3ptr13drop_in_place17h4a27e6722fbf2a4eE($self$i); //@line 304 "/checkout/src/libcore/option.rs"
  ___resumeException($3|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($0|0); //@line 411 "/checkout/src/libstd/io/stdio.rs"
 }
 return (0)|0;
}
function __ZN4core3ptr13drop_in_place17h4a27e6722fbf2a4eE($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $1 = ($0|0)==(0|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 if ($1) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 $2 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($2-1)|0); //@line 1529 "/checkout/src/libcore/sync/atomic.rs"
 $3 = ($2|0)==(1); //@line 933 "/checkout/src/liballoc/arc.rs"
 if (!($3)) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 /* fence */; //@line 1706 "/checkout/src/libcore/sync/atomic.rs"
 __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17hcb148d3fb287149bE($arg0); //@line 968 "/checkout/src/liballoc/arc.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN3std2io5stdio6stdout11stdout_init17h94bd7fe6d3b58cd4E() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $_35$i$i = 0, $_5$i$i$i$i = 0, $_6 = 0, $_7 = 0, $_8$sroa$0$0$_2$sroa$0$0$$sroa_idx$i$sroa_idx = 0, $_8$sroa$4$0$_2$sroa$0$0$$sroa_idx$i$sroa_idx = 0, $_8$sroa$5$0$_2$sroa$0$0$$sroa_idx$i$sroa_idx = 0, $_8$sroa$6$0$_2$sroa$0$0$$sroa_idx$i$sroa_idx = 0, $_8$sroa$7$0$_2$sroa$0$0$$sroa_idx$i$sroa_idx = 0, $_8$sroa$87$0$_2$sroa$0$0$$sroa_idx$i$sroa_idx = 0, $_8$sroa$9 = 0, $_8$sroa$9$0$_2$sroa$0$0$$sroa_idx$i$sroa_idx = 0, $err$i$i$i = 0, $err$i$i$i1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $err$i$i$i1 = sp + 92|0;
 $_35$i$i = sp + 80|0;
 $err$i$i$i = sp + 68|0;
 $_5$i$i$i$i = sp + 56|0;
 $_8$sroa$9 = sp + 104|0;
 $_7 = sp + 32|0;
 $_6 = sp;
 $0 = (___rust_alloc(1024,1,$err$i$i$i1)|0); //@line 84 "/checkout/src/liballoc/heap.rs"
 $1 = ($0|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
 if ($1) {
  HEAP32[$_35$i$i>>2] = 0; //@line 101 "/checkout/src/liballoc/raw_vec.rs"
  ___rust_oom($_35$i$i); //@line 98 "/checkout/src/liballoc/heap.rs"
  // unreachable; //@line 98 "/checkout/src/liballoc/heap.rs"
 }
 HEAP32[$_7>>2] = 0; //@line 548 "/checkout/src/libcore/cell.rs"
 $_8$sroa$0$0$_2$sroa$0$0$$sroa_idx$i$sroa_idx = ((($_7)) + 4|0); //@line 548 "/checkout/src/libcore/cell.rs"
 HEAP32[$_8$sroa$0$0$_2$sroa$0$0$$sroa_idx$i$sroa_idx>>2] = $0; //@line 548 "/checkout/src/libcore/cell.rs"
 $_8$sroa$4$0$_2$sroa$0$0$$sroa_idx$i$sroa_idx = ((($_7)) + 8|0); //@line 548 "/checkout/src/libcore/cell.rs"
 HEAP32[$_8$sroa$4$0$_2$sroa$0$0$$sroa_idx$i$sroa_idx>>2] = 1024; //@line 548 "/checkout/src/libcore/cell.rs"
 $_8$sroa$5$0$_2$sroa$0$0$$sroa_idx$i$sroa_idx = ((($_7)) + 12|0); //@line 548 "/checkout/src/libcore/cell.rs"
 HEAP32[$_8$sroa$5$0$_2$sroa$0$0$$sroa_idx$i$sroa_idx>>2] = 0; //@line 548 "/checkout/src/libcore/cell.rs"
 $_8$sroa$6$0$_2$sroa$0$0$$sroa_idx$i$sroa_idx = ((($_7)) + 16|0); //@line 548 "/checkout/src/libcore/cell.rs"
 HEAP8[$_8$sroa$6$0$_2$sroa$0$0$$sroa_idx$i$sroa_idx>>0] = 0; //@line 548 "/checkout/src/libcore/cell.rs"
 $_8$sroa$7$0$_2$sroa$0$0$$sroa_idx$i$sroa_idx = ((($_7)) + 17|0); //@line 548 "/checkout/src/libcore/cell.rs"
 HEAP8[$_8$sroa$7$0$_2$sroa$0$0$$sroa_idx$i$sroa_idx>>0] = 0; //@line 548 "/checkout/src/libcore/cell.rs"
 $_8$sroa$87$0$_2$sroa$0$0$$sroa_idx$i$sroa_idx = ((($_7)) + 20|0); //@line 548 "/checkout/src/libcore/cell.rs"
 HEAP8[$_8$sroa$87$0$_2$sroa$0$0$$sroa_idx$i$sroa_idx>>0] = 0; //@line 548 "/checkout/src/libcore/cell.rs"
 $_8$sroa$9$0$_2$sroa$0$0$$sroa_idx$i$sroa_idx = ((($_7)) + 21|0); //@line 548 "/checkout/src/libcore/cell.rs"
 ;HEAP8[$_8$sroa$9$0$_2$sroa$0$0$$sroa_idx$i$sroa_idx>>0]=HEAP8[$_8$sroa$9>>0]|0;HEAP8[$_8$sroa$9$0$_2$sroa$0$0$$sroa_idx$i$sroa_idx+1>>0]=HEAP8[$_8$sroa$9+1>>0]|0;HEAP8[$_8$sroa$9$0$_2$sroa$0$0$$sroa_idx$i$sroa_idx+2>>0]=HEAP8[$_8$sroa$9+2>>0]|0; //@line 548 "/checkout/src/libcore/cell.rs"
 __ZN58__LT_std__sys_common__remutex__ReentrantMutex_LT_T_GT__GT_3new17h1ef6edaee603850dE($_6,$_7); //@line 409 "/checkout/src/libstd/io/stdio.rs"
 $2 = (___rust_alloc(40,4,$err$i$i$i)|0); //@line 84 "/checkout/src/liballoc/heap.rs"
 $3 = ($2|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
 if ($3) {
  ___rust_oom($_5$i$i$i$i); //@line 98 "/checkout/src/liballoc/heap.rs"
  // unreachable; //@line 98 "/checkout/src/liballoc/heap.rs"
 } else {
  HEAP32[$2>>2] = 1; //@line 283 "/checkout/src/liballoc/arc.rs"
  $4 = ((($2)) + 4|0); //@line 283 "/checkout/src/liballoc/arc.rs"
  HEAP32[$4>>2] = 1; //@line 283 "/checkout/src/liballoc/arc.rs"
  $5 = ((($2)) + 8|0); //@line 283 "/checkout/src/liballoc/arc.rs"
  ;HEAP32[$5>>2]=HEAP32[$_6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$_6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$_6+8>>2]|0;HEAP32[$5+12>>2]=HEAP32[$_6+12>>2]|0;HEAP32[$5+16>>2]=HEAP32[$_6+16>>2]|0;HEAP32[$5+20>>2]=HEAP32[$_6+20>>2]|0;HEAP32[$5+24>>2]=HEAP32[$_6+24>>2]|0;HEAP32[$5+28>>2]=HEAP32[$_6+28>>2]|0; //@line 283 "/checkout/src/liballoc/arc.rs"
  STACKTOP = sp;return ($2|0); //@line 410 "/checkout/src/libstd/io/stdio.rs"
 }
 return (0)|0;
}
function __ZN4core3ptr13drop_in_place17hfc4d3ed0cb4378e2E($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($arg0)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $1 = HEAP32[$0>>2]|0; //@line 1105 "/checkout/src/libcore/cell.rs"
 HEAP8[$1>>0]=0&255;HEAP8[$1+1>>0]=(0>>8)&255;HEAP8[$1+2>>0]=(0>>16)&255;HEAP8[$1+3>>0]=0>>24; //@line 239 "/checkout/src/libcore/ptr.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr13drop_in_place17h8e67627a3b9ab3ecE($arg0) {
 $arg0 = $arg0|0;
 var $$pre$i$i$i = 0, $$pre12$i1$i$i = 0, $$sink$in$phi$trans$insert$i2$i$i = 0, $$sink$in$pre$phi$i$i$iZZZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $switch$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0; //@line 159 "/checkout/src/libstd/sys_common/remutex.rs"
 $1 = ((($0)) + 28|0); //@line 159 "/checkout/src/libstd/sys_common/remutex.rs"
 $2 = ((($arg0)) + 4|0); //@line 159 "/checkout/src/libstd/sys_common/remutex.rs"
 $3 = HEAP8[$2>>0]|0; //@line 46 "/checkout/src/libstd/sys_common/poison.rs"
 $4 = ($3<<24>>24)==(0); //@line 46 "/checkout/src/libstd/sys_common/poison.rs"
 if ($4) {
  $5 = HEAP32[2018]|0; //@line 374 "/checkout/src/libstd/thread/local.rs"
  $6 = (FUNCTION_TABLE_i[$5 & 511]()|0); //@line 374 "/checkout/src/libstd/thread/local.rs"
  $7 = ($6|0)==(0|0); //@line 374 "/checkout/src/libstd/thread/local.rs"
  if ($7) {
   __ZN4core6result13unwrap_failed17h6c499c654b178840E(21076,57); //@line 809 "/checkout/src/libcore/result.rs"
   // unreachable;
  }
  $8 = HEAP32[$6>>2]|0; //@line 378 "/checkout/src/libstd/thread/local.rs"
  $switch$i$i$i = ($8|0)==(1); //@line 378 "/checkout/src/libstd/thread/local.rs"
  if ($switch$i$i$i) {
   $$sink$in$phi$trans$insert$i2$i$i = ((($6)) + 4|0);
   $$pre$i$i$i = HEAP32[$$sink$in$phi$trans$insert$i2$i$i>>2]|0;
   $$sink$in$pre$phi$i$i$iZZZ2D = $$sink$in$phi$trans$insert$i2$i$i;$15 = $$pre$i$i$i;
  } else {
   $9 = HEAP32[(8076)>>2]|0; //@line 295 "/checkout/src/libstd/thread/local.rs"
   $10 = (FUNCTION_TABLE_i[$9 & 511]()|0); //@line 295 "/checkout/src/libstd/thread/local.rs"
   $11 = $6; //@line 239 "/checkout/src/libcore/ptr.rs"
   $12 = $11; //@line 239 "/checkout/src/libcore/ptr.rs"
   HEAP32[$12>>2] = 1; //@line 239 "/checkout/src/libcore/ptr.rs"
   $13 = (($11) + 4)|0; //@line 239 "/checkout/src/libcore/ptr.rs"
   $14 = $13; //@line 239 "/checkout/src/libcore/ptr.rs"
   HEAP32[$14>>2] = $10; //@line 239 "/checkout/src/libcore/ptr.rs"
   $$pre12$i1$i$i = ((($6)) + 4|0);
   $$sink$in$pre$phi$i$i$iZZZ2D = $$pre12$i1$i$i;$15 = $10;
  }
  HEAP8[$$sink$in$pre$phi$i$i$iZZZ2D>>0]=$15&255;HEAP8[$$sink$in$pre$phi$i$i$iZZZ2D+1>>0]=($15>>8)&255;HEAP8[$$sink$in$pre$phi$i$i$iZZZ2D+2>>0]=($15>>16)&255;HEAP8[$$sink$in$pre$phi$i$i$iZZZ2D+3>>0]=$15>>24; //@line 239 "/checkout/src/libcore/ptr.rs"
  $16 = ($15|0)==(0); //@line 487 "/checkout/src/libstd/panicking.rs"
  if (!($16)) {
   HEAP8[$1>>0] = 1; //@line 1479 "/checkout/src/libcore/sync/atomic.rs"
  }
 }
 $17 = HEAP32[$arg0>>2]|0; //@line 160 "/checkout/src/libstd/sys_common/remutex.rs"
 $18 = HEAP32[$17>>2]|0; //@line 160 "/checkout/src/libstd/sys_common/remutex.rs"
 (_pthread_mutex_unlock(($18|0))|0); //@line 132 "/checkout/src/libstd/sys/unix/mutex.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN3std2io5Write9write_all17hc644b454b3f66eb7E($0,$self,$1,$2) {
 $0 = $0|0;
 $self = $self|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$fca$1$gep$i = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $_20 = 0, $_6$i = 0, $_8 = 0, $buf$sroa$0$068$ph = 0, $buf$sroa$5$067$ph = 0, $cond = 0;
 var $cond$i$i$i$i = 0, $cond$i$i$i$i15 = 0, $cond1 = 0, $switch = 0, $switch$i$i = 0, $trunc$i = 0, $trunc$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_6$i = sp + 24|0;
 $_20 = sp;
 $_8 = sp + 8|0;
 $3 = ($2|0)==(0); //@line 140 "/checkout/src/libcore/slice/mod.rs"
 L1: do {
  if (!($3)) {
   $4 = ((($_8)) + 4|0);
   $5 = ((($_8)) + 8|0);
   $$fca$1$gep$i = ((($_6$i)) + 4|0);
   $6 = ((($_8)) + 5|0);
   $buf$sroa$0$068$ph = $1;$buf$sroa$5$067$ph = $2;
   L3: while(1) {
    $7 = HEAP32[$self>>2]|0; //@line 151 "/checkout/src/libstd/sys_common/remutex.rs"
    $8 = ((($7)) + 4|0); //@line 151 "/checkout/src/libstd/sys_common/remutex.rs"
    $9 = HEAP32[$8>>2]|0; //@line 240 "/checkout/src/libcore/cell.rs"
    $cond$i$i$i$i15 = ($9|0)==(0); //@line 1113 "/checkout/src/libcore/cell.rs"
    if (!($cond$i$i$i$i15)) {
     label = 6;
     break;
    }
    $10 = $8;$12 = $7;$13 = $8;
    while(1) {
     HEAP8[$10>>0]=-1&255;HEAP8[$10+1>>0]=(-1>>8)&255;HEAP8[$10+2>>0]=(-1>>16)&255;HEAP8[$10+3>>0]=-1>>24; //@line 239 "/checkout/src/libcore/ptr.rs"
     $11 = ((($12)) + 8|0); //@line 803 "/checkout/src/libcore/cell.rs"
     HEAP32[$_6$i>>2] = $11; //@line 465 "/checkout/src/libstd/io/stdio.rs"
     HEAP32[$$fca$1$gep$i>>2] = $13; //@line 465 "/checkout/src/libstd/io/stdio.rs"
     __THREW__ = 0;
     invoke_viiii(442,($_8|0),($11|0),($buf$sroa$0$068$ph|0),($buf$sroa$5$067$ph|0)); //@line 465 "/checkout/src/libstd/io/stdio.rs"
     $14 = __THREW__; __THREW__ = 0;
     $15 = $14&1;
     if ($15) {
      label = 8;
      break L3;
     }
     HEAP8[$10>>0]=0&255;HEAP8[$10+1>>0]=(0>>8)&255;HEAP8[$10+2>>0]=(0>>16)&255;HEAP8[$10+3>>0]=0>>24; //@line 239 "/checkout/src/libcore/ptr.rs"
     $18 = HEAP32[$_8>>2]|0; //@line 1092 "/checkout/src/libstd/io/mod.rs"
     $switch = ($18|0)==(1); //@line 1092 "/checkout/src/libstd/io/mod.rs"
     if (!($switch)) {
      break;
     }
     $trunc$i = HEAP8[$4>>0]|0; //@line 504 "/checkout/src/libstd/io/error.rs"
     $trunc$i$clear = $trunc$i & 3; //@line 504 "/checkout/src/libstd/io/error.rs"
     switch ($trunc$i$clear<<24>>24) {
     case 0:  {
      $34 = HEAP32[$5>>2]|0; //@line 504 "/checkout/src/libstd/io/error.rs"
      $cond = ($34|0)==(4); //@line 98 "/checkout/src/libstd/sys/unix/mod.rs"
      if (!($cond)) {
       label = 13;
       break L3;
      }
      break;
     }
     case 1:  {
      $$sink = $6;
      label = 19;
      break;
     }
     case 2:  {
      $35 = HEAP32[$5>>2]|0; //@line 505 "/checkout/src/libstd/io/error.rs"
      $36 = ((($35)) + 8|0); //@line 505 "/checkout/src/libstd/io/error.rs"
      $$sink = $36;
      label = 19;
      break;
     }
     default: {
      label = 16;
      break L3;
     }
     }
     if ((label|0) == 19) {
      label = 0;
      $37 = HEAP8[$$sink>>0]|0;
      $38 = ($37<<24>>24)==(15); //@line 91 "/checkout/src/libstd/io/error.rs"
      if (!($38)) {
       label = 13;
       break L3;
      }
     }
     $switch$i$i = ($trunc$i&255)<(2); //@line 59 "/checkout/src/libcore/ptr.rs"
     if (!($switch$i$i)) {
      $49 = HEAP32[$5>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
      $50 = HEAP32[$49>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
      $51 = ((($49)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
      $52 = HEAP32[$51>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
      $53 = HEAP32[$52>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
      __THREW__ = 0;
      invoke_vi($53|0,($50|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
      $54 = __THREW__; __THREW__ = 0;
      $55 = $54&1;
      if ($55) {
       label = 26;
       break L3;
      }
      $56 = HEAP32[$51>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
      $57 = ((($56)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
      $58 = HEAP32[$57>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
      $59 = ($58|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
      if (!($59)) {
       $60 = HEAP32[$49>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
       $61 = ((($56)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
       $62 = HEAP32[$61>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
       ___rust_dealloc($60,$58,$62); //@line 104 "/checkout/src/liballoc/heap.rs"
      }
      ___rust_dealloc($49,12,4); //@line 104 "/checkout/src/liballoc/heap.rs"
     }
     $67 = HEAP32[$self>>2]|0; //@line 151 "/checkout/src/libstd/sys_common/remutex.rs"
     $68 = ((($67)) + 4|0); //@line 151 "/checkout/src/libstd/sys_common/remutex.rs"
     $69 = HEAP32[$68>>2]|0; //@line 240 "/checkout/src/libcore/cell.rs"
     $cond$i$i$i$i = ($69|0)==(0); //@line 1113 "/checkout/src/libcore/cell.rs"
     if ($cond$i$i$i$i) {
      $10 = $68;$12 = $67;$13 = $68;
     } else {
      label = 6;
      break L3;
     }
    }
    $22 = HEAP32[$4>>2]|0; //@line 1092 "/checkout/src/libstd/io/mod.rs"
    $cond1 = ($22|0)==(0); //@line 1092 "/checkout/src/libstd/io/mod.rs"
    if ($cond1) {
     label = 10;
     break;
    }
    $21 = ($buf$sroa$5$067$ph>>>0)<($22>>>0); //@line 873 "/checkout/src/libcore/slice/mod.rs"
    if ($21) {
     label = 12;
     break;
    }
    $70 = (($buf$sroa$0$068$ph) + ($22)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
    $71 = (($buf$sroa$5$067$ph) - ($22))|0; //@line 863 "/checkout/src/libcore/slice/mod.rs"
    $72 = ($71|0)==(0); //@line 140 "/checkout/src/libcore/slice/mod.rs"
    if ($72) {
     break L1;
    } else {
     $buf$sroa$0$068$ph = $70;$buf$sroa$5$067$ph = $71;
    }
   }
   do {
    if ((label|0) == 6) {
     __ZN4core6result13unwrap_failed17h5d6248dc8d3b1c92E(23638,16); //@line 809 "/checkout/src/libcore/result.rs"
     // unreachable;
    }
    else if ((label|0) == 8) {
     $16 = ___cxa_find_matching_catch_2()|0;
     $17 = tempRet0;
     __ZN4core3ptr13drop_in_place17hfc4d3ed0cb4378e2E($_6$i); //@line 466 "/checkout/src/libstd/io/stdio.rs"
     ___resumeException($16|0);
     // unreachable;
    }
    else if ((label|0) == 10) {
     __THREW__ = 0;
     invoke_viiii(423,($_20|0),14,(23654|0),28); //@line 1092 "/checkout/src/libstd/io/mod.rs"
     $19 = __THREW__; __THREW__ = 0;
     $20 = $19&1;
     if ($20) {
      $73 = ___cxa_find_matching_catch_2()|0;
      $74 = tempRet0;
      __ZN4core3ptr13drop_in_place17he59d55dacb57c09bE_llvm_27C4321C($_8); //@line 1098 "/checkout/src/libstd/io/mod.rs"
      ___resumeException($73|0);
      // unreachable;
     } else {
      $39 = $_20; //@line 1092 "/checkout/src/libstd/io/mod.rs"
      $40 = $39; //@line 1092 "/checkout/src/libstd/io/mod.rs"
      $41 = HEAP32[$40>>2]|0; //@line 1092 "/checkout/src/libstd/io/mod.rs"
      $42 = (($39) + 4)|0; //@line 1092 "/checkout/src/libstd/io/mod.rs"
      $43 = $42; //@line 1092 "/checkout/src/libstd/io/mod.rs"
      $44 = HEAP32[$43>>2]|0; //@line 1092 "/checkout/src/libstd/io/mod.rs"
      $45 = $0; //@line 1092 "/checkout/src/libstd/io/mod.rs"
      $46 = $45; //@line 1092 "/checkout/src/libstd/io/mod.rs"
      HEAP32[$46>>2] = $41; //@line 1092 "/checkout/src/libstd/io/mod.rs"
      $47 = (($45) + 4)|0; //@line 1092 "/checkout/src/libstd/io/mod.rs"
      $48 = $47; //@line 1092 "/checkout/src/libstd/io/mod.rs"
      HEAP32[$48>>2] = $44; //@line 1092 "/checkout/src/libstd/io/mod.rs"
      break;
     }
    }
    else if ((label|0) == 12) {
     __THREW__ = 0;
     invoke_vii(422,($22|0),($buf$sroa$5$067$ph|0)); //@line 874 "/checkout/src/libcore/slice/mod.rs"
     $23 = __THREW__; __THREW__ = 0;
     $73 = ___cxa_find_matching_catch_2()|0;
     $74 = tempRet0;
     __ZN4core3ptr13drop_in_place17he59d55dacb57c09bE_llvm_27C4321C($_8); //@line 1098 "/checkout/src/libstd/io/mod.rs"
     ___resumeException($73|0);
     // unreachable;
    }
    else if ((label|0) == 13) {
     $24 = $4; //@line 1096 "/checkout/src/libstd/io/mod.rs"
     $25 = $24; //@line 1096 "/checkout/src/libstd/io/mod.rs"
     $26 = HEAP32[$25>>2]|0; //@line 1096 "/checkout/src/libstd/io/mod.rs"
     $27 = (($24) + 4)|0; //@line 1096 "/checkout/src/libstd/io/mod.rs"
     $28 = $27; //@line 1096 "/checkout/src/libstd/io/mod.rs"
     $29 = HEAP32[$28>>2]|0; //@line 1096 "/checkout/src/libstd/io/mod.rs"
     $30 = $0; //@line 1096 "/checkout/src/libstd/io/mod.rs"
     $31 = $30; //@line 1096 "/checkout/src/libstd/io/mod.rs"
     HEAP32[$31>>2] = $26; //@line 1096 "/checkout/src/libstd/io/mod.rs"
     $32 = (($30) + 4)|0; //@line 1096 "/checkout/src/libstd/io/mod.rs"
     $33 = $32; //@line 1096 "/checkout/src/libstd/io/mod.rs"
     HEAP32[$33>>2] = $29; //@line 1096 "/checkout/src/libstd/io/mod.rs"
    }
    else if ((label|0) == 16) {
     // unreachable; //@line 508 "/checkout/src/libstd/io/error.rs"
    }
    else if ((label|0) == 26) {
     $63 = ___cxa_find_matching_catch_2()|0;
     $64 = tempRet0;
     $65 = HEAP32[$49>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
     $66 = HEAP32[$51>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
     __ZN5alloc4heap8box_free17hb8be26a1f37cb671E_llvm_27C4321C($65,$66); //@line 59 "/checkout/src/libcore/ptr.rs"
     __ZN5alloc4heap8box_free17h0833f2b89912900bE_llvm_27C4321C($49); //@line 59 "/checkout/src/libcore/ptr.rs"
     ___resumeException($63|0);
     // unreachable;
    }
   } while(0);
   STACKTOP = sp;return; //@line 1100 "/checkout/src/libstd/io/mod.rs"
  }
 } while(0);
 HEAP8[$0>>0] = 3; //@line 1099 "/checkout/src/libstd/io/mod.rs"
 STACKTOP = sp;return; //@line 1100 "/checkout/src/libstd/io/mod.rs"
}
function __ZN57__LT_std__io__stdio__Stdout_u20_as_u20_std__io__Write_GT_9write_fmt17h1dd739be20d5df93E($0,$self,$args) {
 $0 = $0|0;
 $self = $self|0;
 $args = $args|0;
 var $$expand_i1_val = 0, $$expand_i1_val8 = 0, $$fca$1$gep = 0, $$pre$i$i$i = 0, $$pre$i$i$i$i = 0, $$pre$phi11$iZ2D = 0, $$pre12$i1$i$i = 0, $$pre12$i1$i$i$i = 0, $$sink$in$phi$trans$insert$i2$i$i = 0, $$sink$in$phi$trans$insert$i2$i$i$i = 0, $$sink$in$pre$phi$i$i$i$iZZZ2D = 0, $$sink$in$pre$phi$i$i$iZZZ2D = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $_0$sroa$3$i$0$_0$sroa$3$0$_0$sroa$3$0$_0$sroa$3$4$$i$i = 0, $_0$sroa$3$i$i = 0, $_0$sroa$3$i$i$0$_0$sroa$3$i$i$0$_0$sroa$3$i$0$_0$sroa$3$0$_0$sroa$3$0$_0$sroa$3$4$$i$pre$i = 0, $_11$i = 0, $_17$i = 0, $_4 = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, $not$$i = 0, $output$i = 0, $switch$i$i$i = 0, $switch$i$i$i$i = 0, $trunc$i = 0, $trunc$i$clear = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_17$i = sp;
 $_11$i = sp + 32|0;
 $output$i = sp + 20|0;
 $_0$sroa$3$i$i = sp + 16|0;
 $_4 = sp + 8|0;
 $1 = HEAP32[$self>>2]|0; //@line 2540 "/checkout/src/libcore/ptr.rs"
 $2 = ((($1)) + 8|0); //@line 738 "/checkout/src/liballoc/arc.rs"
 $3 = HEAP32[$2>>2]|0; //@line 82 "/checkout/src/libstd/sys_common/remutex.rs"
 (_pthread_mutex_lock(($3|0))|0); //@line 122 "/checkout/src/libstd/sys/unix/mutex.rs"
 $4 = $2;
 $5 = ((($1)) + 36|0); //@line 138 "/checkout/src/libstd/sys_common/remutex.rs"
 $6 = HEAP32[2018]|0; //@line 374 "/checkout/src/libstd/thread/local.rs"
 $7 = (FUNCTION_TABLE_i[$6 & 511]()|0); //@line 374 "/checkout/src/libstd/thread/local.rs"
 $8 = ($7|0)==(0|0); //@line 374 "/checkout/src/libstd/thread/local.rs"
 if ($8) {
  __ZN4core6result13unwrap_failed17h6c499c654b178840E(21076,57); //@line 809 "/checkout/src/libcore/result.rs"
  // unreachable;
 }
 $9 = HEAP32[$7>>2]|0; //@line 378 "/checkout/src/libstd/thread/local.rs"
 $switch$i$i$i$i = ($9|0)==(1); //@line 378 "/checkout/src/libstd/thread/local.rs"
 if ($switch$i$i$i$i) {
  $$sink$in$phi$trans$insert$i2$i$i$i = ((($7)) + 4|0);
  $$pre$i$i$i$i = HEAP32[$$sink$in$phi$trans$insert$i2$i$i$i>>2]|0;
  $$sink$in$pre$phi$i$i$i$iZZZ2D = $$sink$in$phi$trans$insert$i2$i$i$i;$16 = $$pre$i$i$i$i;
 } else {
  $10 = HEAP32[(8076)>>2]|0; //@line 295 "/checkout/src/libstd/thread/local.rs"
  $11 = (FUNCTION_TABLE_i[$10 & 511]()|0); //@line 295 "/checkout/src/libstd/thread/local.rs"
  $12 = $7; //@line 239 "/checkout/src/libcore/ptr.rs"
  $13 = $12; //@line 239 "/checkout/src/libcore/ptr.rs"
  HEAP32[$13>>2] = 1; //@line 239 "/checkout/src/libcore/ptr.rs"
  $14 = (($12) + 4)|0; //@line 239 "/checkout/src/libcore/ptr.rs"
  $15 = $14; //@line 239 "/checkout/src/libcore/ptr.rs"
  HEAP32[$15>>2] = $11; //@line 239 "/checkout/src/libcore/ptr.rs"
  $$pre12$i1$i$i$i = ((($7)) + 4|0);
  $$sink$in$pre$phi$i$i$i$iZZZ2D = $$pre12$i1$i$i$i;$16 = $11;
 }
 HEAP8[$$sink$in$pre$phi$i$i$i$iZZZ2D>>0]=$16&255;HEAP8[$$sink$in$pre$phi$i$i$i$iZZZ2D+1>>0]=($16>>8)&255;HEAP8[$$sink$in$pre$phi$i$i$i$iZZZ2D+2>>0]=($16>>16)&255;HEAP8[$$sink$in$pre$phi$i$i$i$iZZZ2D+3>>0]=$16>>24; //@line 239 "/checkout/src/libcore/ptr.rs"
 $17 = ($16|0)!=(0); //@line 487 "/checkout/src/libstd/panicking.rs"
 $18 = HEAP8[$5>>0]|0; //@line 1491 "/checkout/src/libcore/sync/atomic.rs"
 $not$$i = ($18<<24>>24)==(0); //@line 37 "/checkout/src/libstd/sys_common/poison.rs"
 $19 = $17&1;
 if ($not$$i) {
  HEAP8[$_0$sroa$3$i$i>>0] = $19; //@line 747 "/checkout/src/libcore/result.rs"
  $_0$sroa$3$i$0$_0$sroa$3$0$_0$sroa$3$0$_0$sroa$3$4$$i$i = $19;
 } else {
  $$expand_i1_val = $17&1; //@line 748 "/checkout/src/libcore/result.rs"
  HEAP8[$_0$sroa$3$i$i>>0] = $$expand_i1_val; //@line 748 "/checkout/src/libcore/result.rs"
  $_0$sroa$3$i$i$0$_0$sroa$3$i$i$0$_0$sroa$3$i$0$_0$sroa$3$0$_0$sroa$3$0$_0$sroa$3$4$$i$pre$i = HEAP8[$_0$sroa$3$i$i>>0]|0;
  $_0$sroa$3$i$0$_0$sroa$3$0$_0$sroa$3$0$_0$sroa$3$4$$i$i = $_0$sroa$3$i$i$0$_0$sroa$3$i$i$0$_0$sroa$3$i$0$_0$sroa$3$0$_0$sroa$3$0$_0$sroa$3$4$$i$pre$i;
 }
 $20 = $_0$sroa$3$i$0$_0$sroa$3$0$_0$sroa$3$0$_0$sroa$3$4$$i$i & 1; //@line 750 "/checkout/src/libcore/result.rs"
 $21 = ($20<<24>>24)!=(0); //@line 750 "/checkout/src/libcore/result.rs"
 HEAP32[$_4>>2] = $4; //@line 459 "/checkout/src/libstd/io/stdio.rs"
 $$fca$1$gep = ((($_4)) + 4|0); //@line 459 "/checkout/src/libstd/io/stdio.rs"
 $$expand_i1_val8 = $21&1; //@line 459 "/checkout/src/libstd/io/stdio.rs"
 HEAP8[$$fca$1$gep>>0] = $$expand_i1_val8; //@line 459 "/checkout/src/libstd/io/stdio.rs"
 HEAP32[$output$i>>2] = $_4; //@line 1161 "/checkout/src/libstd/io/mod.rs"
 $_5$sroa$0$0$$sroa_idx$i = ((($output$i)) + 4|0); //@line 1161 "/checkout/src/libstd/io/mod.rs"
 HEAP8[$_5$sroa$0$0$$sroa_idx$i>>0] = 3; //@line 1161 "/checkout/src/libstd/io/mod.rs"
 ;HEAP32[$_11$i>>2]=HEAP32[$args>>2]|0;HEAP32[$_11$i+4>>2]=HEAP32[$args+4>>2]|0;HEAP32[$_11$i+8>>2]=HEAP32[$args+8>>2]|0;HEAP32[$_11$i+12>>2]=HEAP32[$args+12>>2]|0;HEAP32[$_11$i+16>>2]=HEAP32[$args+16>>2]|0;HEAP32[$_11$i+20>>2]=HEAP32[$args+20>>2]|0; //@line 1162 "/checkout/src/libstd/io/mod.rs"
 __THREW__ = 0;
 $22 = (invoke_iiii(424,($output$i|0),(9188|0),($_11$i|0))|0); //@line 1162 "/checkout/src/libstd/io/mod.rs"
 $23 = __THREW__; __THREW__ = 0;
 $24 = $23&1;
 L12: do {
  if (!($24)) {
   do {
    if ($22) {
     $25 = ((($output$i)) + 4|0); //@line 1166 "/checkout/src/libstd/io/mod.rs"
     $26 = HEAP8[$25>>0]|0; //@line 294 "/checkout/src/libcore/result.rs"
     $27 = ($26<<24>>24)==(3); //@line 317 "/checkout/src/libcore/result.rs"
     if (!($27)) {
      $28 = $25; //@line 1167 "/checkout/src/libstd/io/mod.rs"
      $29 = $28; //@line 1167 "/checkout/src/libstd/io/mod.rs"
      $30 = HEAP32[$29>>2]|0; //@line 1167 "/checkout/src/libstd/io/mod.rs"
      $31 = (($28) + 4)|0; //@line 1167 "/checkout/src/libstd/io/mod.rs"
      $32 = $31; //@line 1167 "/checkout/src/libstd/io/mod.rs"
      $33 = HEAP32[$32>>2]|0; //@line 1167 "/checkout/src/libstd/io/mod.rs"
      $34 = $0; //@line 1167 "/checkout/src/libstd/io/mod.rs"
      $35 = $34; //@line 1167 "/checkout/src/libstd/io/mod.rs"
      HEAP32[$35>>2] = $30; //@line 1167 "/checkout/src/libstd/io/mod.rs"
      $36 = (($34) + 4)|0; //@line 1167 "/checkout/src/libstd/io/mod.rs"
      $37 = $36; //@line 1167 "/checkout/src/libstd/io/mod.rs"
      HEAP32[$37>>2] = $33; //@line 1167 "/checkout/src/libstd/io/mod.rs"
      break;
     }
     __THREW__ = 0;
     invoke_viiii(423,($_17$i|0),16,(23682|0),15); //@line 1169 "/checkout/src/libstd/io/mod.rs"
     $38 = __THREW__; __THREW__ = 0;
     $39 = $38&1;
     if ($39) {
      break L12;
     }
     $40 = $_17$i; //@line 1169 "/checkout/src/libstd/io/mod.rs"
     $41 = $40; //@line 1169 "/checkout/src/libstd/io/mod.rs"
     $42 = HEAP32[$41>>2]|0; //@line 1169 "/checkout/src/libstd/io/mod.rs"
     $43 = (($40) + 4)|0; //@line 1169 "/checkout/src/libstd/io/mod.rs"
     $44 = $43; //@line 1169 "/checkout/src/libstd/io/mod.rs"
     $45 = HEAP32[$44>>2]|0; //@line 1169 "/checkout/src/libstd/io/mod.rs"
     $46 = $0; //@line 1169 "/checkout/src/libstd/io/mod.rs"
     $47 = $46; //@line 1169 "/checkout/src/libstd/io/mod.rs"
     HEAP32[$47>>2] = $42; //@line 1169 "/checkout/src/libstd/io/mod.rs"
     $48 = (($46) + 4)|0; //@line 1169 "/checkout/src/libstd/io/mod.rs"
     $49 = $48; //@line 1169 "/checkout/src/libstd/io/mod.rs"
     HEAP32[$49>>2] = $45; //@line 1169 "/checkout/src/libstd/io/mod.rs"
     $$pre$phi11$iZ2D = $25;
     label = 16;
    } else {
     HEAP8[$0>>0] = 3; //@line 1163 "/checkout/src/libstd/io/mod.rs"
     $$pre$phi11$iZ2D = $_5$sroa$0$0$$sroa_idx$i;
     label = 16;
    }
   } while(0);
   L21: do {
    if ((label|0) == 16) {
     $trunc$i = HEAP8[$$pre$phi11$iZ2D>>0]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
     $trunc$i$clear = $trunc$i & 3; //@line 59 "/checkout/src/libcore/ptr.rs"
     switch ($trunc$i$clear<<24>>24) {
     case 0: case 1: case 3:  {
      break L21;
      break;
     }
     default: {
     }
     }
     $50 = ((($output$i)) + 8|0); //@line 59 "/checkout/src/libcore/ptr.rs"
     $51 = HEAP32[$50>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
     $52 = HEAP32[$51>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
     $53 = ((($51)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
     $54 = HEAP32[$53>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
     $55 = HEAP32[$54>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
     __THREW__ = 0;
     invoke_vi($55|0,($52|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
     $56 = __THREW__; __THREW__ = 0;
     $57 = $56&1;
     if ($57) {
      $65 = ___cxa_find_matching_catch_2()|0;
      $66 = tempRet0;
      $67 = HEAP32[$51>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
      $68 = HEAP32[$53>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
      __ZN5alloc4heap8box_free17hb8be26a1f37cb671E_llvm_27C4321C($67,$68); //@line 59 "/checkout/src/libcore/ptr.rs"
      $69 = HEAP32[$50>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
      __ZN5alloc4heap8box_free17h0833f2b89912900bE_llvm_27C4321C($69); //@line 59 "/checkout/src/libcore/ptr.rs"
      $eh$lpad$body$index3Z2D = $66;$eh$lpad$body$indexZ2D = $65;
      __ZN4core3ptr13drop_in_place17h8e67627a3b9ab3ecE($_4); //@line 460 "/checkout/src/libstd/io/stdio.rs"
      ___resumeException($eh$lpad$body$indexZ2D|0);
      // unreachable;
     }
     $58 = HEAP32[$53>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
     $59 = ((($58)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
     $60 = HEAP32[$59>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
     $61 = ($60|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
     if (!($61)) {
      $62 = HEAP32[$51>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
      $63 = ((($58)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
      $64 = HEAP32[$63>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
      ___rust_dealloc($62,$60,$64); //@line 104 "/checkout/src/liballoc/heap.rs"
     }
     $70 = HEAP32[$50>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
     ___rust_dealloc($70,12,4); //@line 104 "/checkout/src/liballoc/heap.rs"
    }
   } while(0);
   $75 = HEAP32[$_4>>2]|0; //@line 159 "/checkout/src/libstd/sys_common/remutex.rs"
   $76 = ((($75)) + 28|0); //@line 159 "/checkout/src/libstd/sys_common/remutex.rs"
   $77 = HEAP8[$$fca$1$gep>>0]|0; //@line 46 "/checkout/src/libstd/sys_common/poison.rs"
   $78 = ($77<<24>>24)==(0); //@line 46 "/checkout/src/libstd/sys_common/poison.rs"
   if (!($78)) {
    $90 = HEAP32[$_4>>2]|0; //@line 160 "/checkout/src/libstd/sys_common/remutex.rs"
    $91 = HEAP32[$90>>2]|0; //@line 160 "/checkout/src/libstd/sys_common/remutex.rs"
    (_pthread_mutex_unlock(($91|0))|0); //@line 132 "/checkout/src/libstd/sys/unix/mutex.rs"
    STACKTOP = sp;return; //@line 460 "/checkout/src/libstd/io/stdio.rs"
   }
   $79 = (FUNCTION_TABLE_i[$6 & 511]()|0); //@line 374 "/checkout/src/libstd/thread/local.rs"
   $80 = ($79|0)==(0|0); //@line 374 "/checkout/src/libstd/thread/local.rs"
   if ($80) {
    __ZN4core6result13unwrap_failed17h6c499c654b178840E(21076,57); //@line 809 "/checkout/src/libcore/result.rs"
    // unreachable;
   }
   $81 = HEAP32[$79>>2]|0; //@line 378 "/checkout/src/libstd/thread/local.rs"
   $switch$i$i$i = ($81|0)==(1); //@line 378 "/checkout/src/libstd/thread/local.rs"
   if ($switch$i$i$i) {
    $$sink$in$phi$trans$insert$i2$i$i = ((($79)) + 4|0);
    $$pre$i$i$i = HEAP32[$$sink$in$phi$trans$insert$i2$i$i>>2]|0;
    $$sink$in$pre$phi$i$i$iZZZ2D = $$sink$in$phi$trans$insert$i2$i$i;$88 = $$pre$i$i$i;
   } else {
    $82 = HEAP32[(8076)>>2]|0; //@line 295 "/checkout/src/libstd/thread/local.rs"
    $83 = (FUNCTION_TABLE_i[$82 & 511]()|0); //@line 295 "/checkout/src/libstd/thread/local.rs"
    $84 = $79; //@line 239 "/checkout/src/libcore/ptr.rs"
    $85 = $84; //@line 239 "/checkout/src/libcore/ptr.rs"
    HEAP32[$85>>2] = 1; //@line 239 "/checkout/src/libcore/ptr.rs"
    $86 = (($84) + 4)|0; //@line 239 "/checkout/src/libcore/ptr.rs"
    $87 = $86; //@line 239 "/checkout/src/libcore/ptr.rs"
    HEAP32[$87>>2] = $83; //@line 239 "/checkout/src/libcore/ptr.rs"
    $$pre12$i1$i$i = ((($79)) + 4|0);
    $$sink$in$pre$phi$i$i$iZZZ2D = $$pre12$i1$i$i;$88 = $83;
   }
   HEAP8[$$sink$in$pre$phi$i$i$iZZZ2D>>0]=$88&255;HEAP8[$$sink$in$pre$phi$i$i$iZZZ2D+1>>0]=($88>>8)&255;HEAP8[$$sink$in$pre$phi$i$i$iZZZ2D+2>>0]=($88>>16)&255;HEAP8[$$sink$in$pre$phi$i$i$iZZZ2D+3>>0]=$88>>24; //@line 239 "/checkout/src/libcore/ptr.rs"
   $89 = ($88|0)==(0); //@line 487 "/checkout/src/libstd/panicking.rs"
   if ($89) {
    $90 = HEAP32[$_4>>2]|0; //@line 160 "/checkout/src/libstd/sys_common/remutex.rs"
    $91 = HEAP32[$90>>2]|0; //@line 160 "/checkout/src/libstd/sys_common/remutex.rs"
    (_pthread_mutex_unlock(($91|0))|0); //@line 132 "/checkout/src/libstd/sys/unix/mutex.rs"
    STACKTOP = sp;return; //@line 460 "/checkout/src/libstd/io/stdio.rs"
   }
   HEAP8[$76>>0] = 1; //@line 1479 "/checkout/src/libcore/sync/atomic.rs"
   $90 = HEAP32[$_4>>2]|0; //@line 160 "/checkout/src/libstd/sys_common/remutex.rs"
   $91 = HEAP32[$90>>2]|0; //@line 160 "/checkout/src/libstd/sys_common/remutex.rs"
   (_pthread_mutex_unlock(($91|0))|0); //@line 132 "/checkout/src/libstd/sys/unix/mutex.rs"
   STACKTOP = sp;return; //@line 460 "/checkout/src/libstd/io/stdio.rs"
  }
 } while(0);
 $71 = ___cxa_find_matching_catch_2()|0;
 $72 = tempRet0;
 __THREW__ = 0;
 invoke_vi(99,($output$i|0)); //@line 1173 "/checkout/src/libstd/io/mod.rs"
 $73 = __THREW__; __THREW__ = 0;
 $74 = $73&1;
 if (!($74)) {
  $eh$lpad$body$index3Z2D = $72;$eh$lpad$body$indexZ2D = $71;
  __ZN4core3ptr13drop_in_place17h8e67627a3b9ab3ecE($_4); //@line 460 "/checkout/src/libstd/io/stdio.rs"
  ___resumeException($eh$lpad$body$indexZ2D|0);
  // unreachable;
 }
 $92 = ___cxa_find_matching_catch_2()|0;
 $93 = tempRet0;
 $eh$lpad$body$index3Z2D = $93;$eh$lpad$body$indexZ2D = $92;
 __ZN4core3ptr13drop_in_place17h8e67627a3b9ab3ecE($_4); //@line 460 "/checkout/src/libstd/io/stdio.rs"
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __ZN4core3ptr13drop_in_place17hcc842658002ef6e1E($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($arg0)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $1 = HEAP8[$0>>0]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $2 = ($1<<24>>24)==(3); //@line 59 "/checkout/src/libcore/ptr.rs"
 if ($2) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 __ZN4core3ptr13drop_in_place17hb434eb5d905d2ad2E_llvm_27C4321C($0); //@line 59 "/checkout/src/libcore/ptr.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN3std2io5stdio12LOCAL_STDOUT7__getit17h83ddda054464905cE() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN45__LT_std__thread__local__os__Key_LT_T_GT__GT_3get17h2a1a454ef25fc2a0E(9220)|0); //@line 184 "/checkout/src/libstd/thread/local.rs"
 return ($0|0); //@line 185 "/checkout/src/libstd/thread/local.rs"
}
function __ZN3std2io5stdio12LOCAL_STDOUT6__init17h99c73f74cd36edf1E($0) {
 $0 = $0|0;
 var $$sroa_idx2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0; //@line 548 "/checkout/src/libcore/cell.rs"
 $$sroa_idx2 = ((($0)) + 4|0); //@line 548 "/checkout/src/libcore/cell.rs"
 HEAP32[$$sroa_idx2>>2] = 0; //@line 548 "/checkout/src/libcore/cell.rs"
 return; //@line 169 "/checkout/src/libstd/thread/local.rs"
}
function __ZN3std2io5stdio6_print17h5e38a8ff46cfb3e1E($args) {
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10$i = 0, $_12$i = 0, $_21$i = 0;
 var $_28$i = 0, $_3 = 0, $_5$sroa$0$0$$sroa_idx$i$i = 0, $_5$sroa$4$0$$sroa_idx2$i$i = 0, $e$i = 0, $global_s$i = 0, $label$i = 0, $not$$i = 0, $not$2$i = 0, $personalityslot$sroa$0$0$i = 0, $personalityslot$sroa$6$0$i = 0, $result$i = 0, $self$i$i$i = 0, $switch$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $self$i$i$i = sp + 128|0;
 $_28$i = sp + 112|0;
 $_21$i = sp + 88|0;
 $e$i = sp + 8|0;
 $_12$i = sp + 64|0;
 $_10$i = sp + 56|0;
 $result$i = sp;
 $label$i = sp + 48|0;
 $global_s$i = sp + 40|0;
 $_3 = sp + 16|0;
 ;HEAP32[$_3>>2]=HEAP32[$args>>2]|0;HEAP32[$_3+4>>2]=HEAP32[$args+4>>2]|0;HEAP32[$_3+8>>2]=HEAP32[$args+8>>2]|0;HEAP32[$_3+12>>2]=HEAP32[$args+12>>2]|0;HEAP32[$_3+16>>2]=HEAP32[$args+16>>2]|0;HEAP32[$_3+20>>2]=HEAP32[$args+20>>2]|0; //@line 699 "/checkout/src/libstd/io/stdio.rs"
 HEAP32[$global_s$i>>2] = 443;
 HEAP32[$label$i>>2] = 23697;
 $0 = ((($label$i)) + 4|0);
 HEAP32[$0>>2] = 6;
 $1 = (__ZN45__LT_std__thread__local__os__Key_LT_T_GT__GT_3get17h2a1a454ef25fc2a0E(9220)|0); //@line 184 "/checkout/src/libstd/thread/local.rs"
 $2 = ($1|0)==(0|0); //@line 347 "/checkout/src/libstd/thread/local.rs"
 if ($2) {
  label = 4;
 } else {
  $3 = HEAP32[$1>>2]|0; //@line 349 "/checkout/src/libstd/thread/local.rs"
  $switch$i = ($3|0)==(1); //@line 676 "/checkout/src/libstd/io/stdio.rs"
  if ($switch$i) {
   __ZN46__LT_std__thread__local__LocalKey_LT_T_GT__GT_4with17h2bedd286c0eac228E($result$i,9212,$_3,$global_s$i); //@line 679 "/checkout/src/libstd/io/stdio.rs"
  } else {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  $4 = (__ZN37__LT_std__io__lazy__Lazy_LT_T_GT__GT_3get17h6a06abe4e50ebf23E(9152)|0); //@line 401 "/checkout/src/libstd/io/stdio.rs"
  HEAP32[$self$i$i$i>>2] = $4;
  $5 = ($4|0)==(0|0); //@line 301 "/checkout/src/libcore/option.rs"
  if ($5) {
   __THREW__ = 0;
   invoke_vii(364,(23602|0),36); //@line 302 "/checkout/src/libcore/option.rs"
   $6 = __THREW__; __THREW__ = 0;
   $7 = ___cxa_find_matching_catch_2()|0;
   $8 = tempRet0;
   __ZN4core3ptr13drop_in_place17h4a27e6722fbf2a4eE($self$i$i$i); //@line 304 "/checkout/src/libcore/option.rs"
   ___resumeException($7|0);
   // unreachable;
  }
  HEAP32[$_10$i>>2] = $4; //@line 677 "/checkout/src/libstd/io/stdio.rs"
  ;HEAP32[$_12$i>>2]=HEAP32[$_3>>2]|0;HEAP32[$_12$i+4>>2]=HEAP32[$_3+4>>2]|0;HEAP32[$_12$i+8>>2]=HEAP32[$_3+8>>2]|0;HEAP32[$_12$i+12>>2]=HEAP32[$_3+12>>2]|0;HEAP32[$_12$i+16>>2]=HEAP32[$_3+16>>2]|0;HEAP32[$_12$i+20>>2]=HEAP32[$_3+20>>2]|0; //@line 677 "/checkout/src/libstd/io/stdio.rs"
  __THREW__ = 0;
  invoke_viii(403,($result$i|0),($_10$i|0),($_12$i|0)); //@line 677 "/checkout/src/libstd/io/stdio.rs"
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $35 = ___cxa_find_matching_catch_2()|0;
   $36 = tempRet0;
   __ZN4core3ptr13drop_in_place17h5c6384c85e7ed1adE_1336($_10$i); //@line 677 "/checkout/src/libstd/io/stdio.rs"
   $personalityslot$sroa$0$0$i = $35;$personalityslot$sroa$6$0$i = $36;
   ___resumeException($personalityslot$sroa$0$0$i|0);
   // unreachable;
  }
  $12 = HEAP32[$_10$i>>2]|0; //@line 2540 "/checkout/src/libcore/ptr.rs"
  $13 = HEAP32[$12>>2]|0;HEAP32[$12>>2] = (($13-1)|0); //@line 1529 "/checkout/src/libcore/sync/atomic.rs"
  $14 = ($13|0)==(1); //@line 933 "/checkout/src/liballoc/arc.rs"
  if ($14) {
   /* fence */; //@line 1706 "/checkout/src/libcore/sync/atomic.rs"
   __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17hcb148d3fb287149bE($_10$i); //@line 968 "/checkout/src/liballoc/arc.rs"
  }
 }
 $11 = HEAP8[$result$i>>0]|0; //@line 689 "/checkout/src/libstd/io/stdio.rs"
 $not$$i = ($11<<24>>24)==(3); //@line 689 "/checkout/src/libstd/io/stdio.rs"
 if ($not$$i) {
  STACKTOP = sp;return; //@line 700 "/checkout/src/libstd/io/stdio.rs"
 }
 $15 = $result$i; //@line 689 "/checkout/src/libstd/io/stdio.rs"
 $16 = $15; //@line 689 "/checkout/src/libstd/io/stdio.rs"
 $17 = HEAP32[$16>>2]|0; //@line 689 "/checkout/src/libstd/io/stdio.rs"
 $18 = (($15) + 4)|0; //@line 689 "/checkout/src/libstd/io/stdio.rs"
 $19 = $18; //@line 689 "/checkout/src/libstd/io/stdio.rs"
 $20 = HEAP32[$19>>2]|0; //@line 689 "/checkout/src/libstd/io/stdio.rs"
 $21 = $e$i; //@line 689 "/checkout/src/libstd/io/stdio.rs"
 $22 = $21; //@line 689 "/checkout/src/libstd/io/stdio.rs"
 HEAP32[$22>>2] = $17; //@line 689 "/checkout/src/libstd/io/stdio.rs"
 $23 = (($21) + 4)|0; //@line 689 "/checkout/src/libstd/io/stdio.rs"
 $24 = $23; //@line 689 "/checkout/src/libstd/io/stdio.rs"
 HEAP32[$24>>2] = $20; //@line 689 "/checkout/src/libstd/io/stdio.rs"
 HEAP32[$_28$i>>2] = $label$i; //@line 690 "/checkout/src/libstd/io/stdio.rs"
 $25 = ((($_28$i)) + 4|0); //@line 690 "/checkout/src/libstd/io/stdio.rs"
 HEAP32[$25>>2] = 400; //@line 690 "/checkout/src/libstd/io/stdio.rs"
 $26 = ((($_28$i)) + 8|0); //@line 690 "/checkout/src/libstd/io/stdio.rs"
 HEAP32[$26>>2] = $e$i; //@line 690 "/checkout/src/libstd/io/stdio.rs"
 $27 = ((($_28$i)) + 12|0); //@line 690 "/checkout/src/libstd/io/stdio.rs"
 HEAP32[$27>>2] = 435; //@line 690 "/checkout/src/libstd/io/stdio.rs"
 HEAP32[$_21$i>>2] = 9228; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $28 = ((($_21$i)) + 4|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$28>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $_5$sroa$0$0$$sroa_idx$i$i = ((($_21$i)) + 8|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5$sroa$0$0$$sroa_idx$i$i>>2] = 12044; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $_5$sroa$4$0$$sroa_idx2$i$i = ((($_21$i)) + 12|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5$sroa$4$0$$sroa_idx2$i$i>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $29 = ((($_21$i)) + 16|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$29>>2] = $_28$i; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $30 = ((($_21$i)) + 20|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$30>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 __THREW__ = 0;
 invoke_vii(436,($_21$i|0),(9244|0)); //@line 690 "/checkout/src/libstd/io/stdio.rs"
 $31 = __THREW__; __THREW__ = 0;
 $32 = ___cxa_find_matching_catch_2()|0;
 $33 = tempRet0;
 $34 = $17&255; //@line 690 "/checkout/src/libstd/io/stdio.rs"
 __ZN4core3ptr13drop_in_place17hb434eb5d905d2ad2E_llvm_27C4321C($e$i); //@line 691 "/checkout/src/libstd/io/stdio.rs"
 $not$2$i = ($34<<24>>24)==(3); //@line 692 "/checkout/src/libstd/io/stdio.rs"
 if (!($not$2$i)) {
  $personalityslot$sroa$0$0$i = $32;$personalityslot$sroa$6$0$i = $33;
  ___resumeException($personalityslot$sroa$0$0$i|0);
  // unreachable;
 }
 __ZN4core3ptr13drop_in_place17h7099c24ba8976e54E_llvm_27C4321C($result$i); //@line 692 "/checkout/src/libstd/io/stdio.rs"
 $personalityslot$sroa$0$0$i = $32;$personalityslot$sroa$6$0$i = $33;
 ___resumeException($personalityslot$sroa$0$0$i|0);
 // unreachable;
}
function __ZN4core3ptr13drop_in_place17h5c6384c85e7ed1adE_1336($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0; //@line 2540 "/checkout/src/libcore/ptr.rs"
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1-1)|0); //@line 1529 "/checkout/src/libcore/sync/atomic.rs"
 $2 = ($1|0)==(1); //@line 933 "/checkout/src/liballoc/arc.rs"
 if (!($2)) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 /* fence */; //@line 1706 "/checkout/src/libcore/sync/atomic.rs"
 __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17hcb148d3fb287149bE($arg0); //@line 968 "/checkout/src/liballoc/arc.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN82__LT_std__sys_common__poison__PoisonError_LT_T_GT__u20_as_u20_core__fmt__Debug_GT_3fmt17hf629c6fde9c9c67cE($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN40__LT_str_u20_as_u20_core__fmt__Debug_GT_3fmt17h05cf80b836a24333E(23756,25,$f)|0); //@line 150 "/checkout/src/libstd/sys_common/poison.rs"
 return ($0|0); //@line 151 "/checkout/src/libstd/sys_common/poison.rs"
}
function __ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_4find17h298827502daec17dE($0,$self$0,$self$1,$pat$0,$pat$1) {
 $0 = $0|0;
 $self$0 = $self$0|0;
 $self$1 = $self$1|0;
 $pat$0 = $pat$0|0;
 $pat$1 = $pat$1|0;
 var $$ = 0, $$$$$i$i$i = 0, $$$$i$i$i = 0, $$$i$i = 0, $$$i$i$i = 0, $$_0$0$sroa$speculated$i = 0, $$arith = 0, $$lcssa1268 = 0, $$lcssa150$lcssa$ = 0, $$lcssa150$lcssa190 = 0, $$lcssa48$lcssa65 = 0, $$lcssa4854 = 0, $$lcssa51$ = 0, $$lcssa5159 = 0, $$overflow = 0, $$ph = 0, $$pre = 0, $$pre$i$i$i$i$i = 0, $$pre$phi142Z2D = 0, $$pre141 = 0;
 var $$promoted = 0, $$promoted67 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $_0$0$i10$i$i$i$i = 0, $_0$0$i16$i$i$i$i = 0, $_0$0$i5$i$i$i$i = 0, $_0$0$sroa$speculated$i = 0, $_0$0$sroa$speculated$i1 = 0, $_3 = 0, $_5 = 0, $_5$sroa$10$1$ph$i = 0, $_5$sroa$15$1$ph$i = 0, $b$0$lcssa$i$i = 0, $b$060$i$i = 0, $iter$sroa$0$0$i$i$i = 0, $iter3$sroa$5$0$i$i$i = 0, $not$49$i$i$i = 0, $or$cond$i$i$i = 0, $or$cond$i$i$i$i$i$i = 0, $or$cond$i59$i$i = 0;
 var $phitmp$i$i$i$i = 0, $phitmp21$i$i$i$i = 0, $phitmp22$i$i$i$i = 0, $start2$0$i$i$i = 0, $switch$i = 0, $switch$i$i61 = 0, $switch$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $_5 = sp;
 $_3 = sp + 64|0;
 __ZN4core3str7pattern11StrSearcher3new17had32f170a3a66344E($_5,$self$0,$self$1,$pat$0,$pat$1); //@line 548 "/checkout/src/libcore/str/pattern.rs"
 $1 = HEAP32[$_5>>2]|0; //@line 674 "/checkout/src/libcore/str/pattern.rs"
 $switch$i = ($1|0)==(1); //@line 674 "/checkout/src/libcore/str/pattern.rs"
 do {
  if ($switch$i) {
   $13 = ((($_5)) + 8|0); //@line 683 "/checkout/src/libcore/str/pattern.rs"
   $14 = ((($_5)) + 36|0); //@line 684 "/checkout/src/libcore/str/pattern.rs"
   $15 = HEAP32[$14>>2]|0; //@line 684 "/checkout/src/libcore/str/pattern.rs"
   $16 = ($15|0)==(-1); //@line 684 "/checkout/src/libcore/str/pattern.rs"
   $17 = ((($_5)) + 48|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ((($_5)) + 52|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ((($_5)) + 56|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($_5)) + 60|0);
   $24 = HEAP32[$23>>2]|0;
   if ($16) {
    __ZN4core3str7pattern14TwoWaySearcher4next17hc52f554c7879b49aE_1351($_3,$13,$18,$20,$22,$24,1); //@line 688 "/checkout/src/libcore/str/pattern.rs"
    break;
   } else {
    __ZN4core3str7pattern14TwoWaySearcher4next17hc52f554c7879b49aE_1351($_3,$13,$18,$20,$22,$24,0); //@line 692 "/checkout/src/libcore/str/pattern.rs"
    break;
   }
  } else {
   $2 = ((($_5)) + 28|0);
   $3 = ((($_5)) + 48|0);
   $4 = ((($_5)) + 52|0);
   $5 = ((($_5)) + 36|0);
   $6 = ((($_5)) + 56|0);
   $7 = ((($_5)) + 60|0);
   $8 = ((($_5)) + 8|0);
   $9 = ((($_5)) + 16|0);
   $10 = ((($_5)) + 24|0);
   $11 = ((($_5)) + 4|0);
   $12 = ((($_5)) + 12|0);
   $$ph = 0;
   L7: while(1) {
    $switch$i$i61 = ($$ph|0)==(1); //@line 629 "/checkout/src/libcore/str/pattern.rs"
    if ($switch$i$i61) {
     $80 = HEAP32[$4>>2]|0;
     $81 = HEAP32[$3>>2]|0;
     $82 = HEAP32[$6>>2]|0;
     $83 = HEAP32[$7>>2]|0;
     $84 = (($83) + -1)|0;
     $85 = $8;
     $86 = $85;
     $87 = HEAP32[$86>>2]|0;
     $88 = (($85) + 4)|0;
     $89 = $88;
     $90 = HEAP32[$89>>2]|0;
     $91 = HEAP32[$9>>2]|0;
     $92 = HEAP32[$10>>2]|0;
     $93 = (($83) - ($92))|0;
     $94 = (1 - ($91))|0;
     $$promoted = HEAP32[$2>>2]|0; //@line 662 "/checkout/src/libcore/str/pattern.rs"
     $$promoted67 = HEAP32[$5>>2]|0; //@line 977 "/checkout/src/libcore/str/pattern.rs"
     $95 = ($$promoted|0)==($80|0); //@line 649 "/checkout/src/libcore/str/pattern.rs"
     if ($95) {
      label = 56;
      break;
     }
     $97 = ($$promoted67|0)==(-1); //@line 652 "/checkout/src/libcore/str/pattern.rs"
     $98 = (($84) + ($$promoted))|0; //@line 961 "/checkout/src/libcore/str/pattern.rs"
     $99 = ($98>>>0)<($80>>>0); //@line 792 "/checkout/src/libcore/slice/mod.rs"
     L12: do {
      if ($99) {
       $100 = (($83) + ($$promoted))|0;
       $101 = (($100) + ($84))|0;
       $102 = ($101>>>0)<($80>>>0);
       $103 = (($94) + ($$promoted))|0;
       $104 = (($$promoted) + ($92))|0;
       $105 = (($104) + ($84))|0;
       $106 = ($105>>>0)<($80>>>0);
       $$lcssa150$lcssa190 = $$promoted67;$$lcssa48$lcssa65 = $$promoted;$160 = $98;
       while(1) {
        $$lcssa4854 = $$lcssa48$lcssa65;$$lcssa5159 = $$lcssa150$lcssa190;$161 = $160;
        L16: while(1) {
         $107 = $$lcssa4854;$112 = $161;$123 = $$lcssa5159;
         while(1) {
          $not$49$i$i$i = ($$promoted|0)==($107|0); //@line 969 "/checkout/src/libcore/str/pattern.rs"
          if (!($not$49$i$i$i)) {
           $$lcssa1268 = $123;$109 = $107;
           break L12;
          }
          $111 = (($81) + ($112)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
          $113 = HEAP8[$111>>0]|0; //@line 962 "/checkout/src/libcore/str/pattern.rs"
          $114 = $113 & 63; //@line 941 "/checkout/src/libcore/str/pattern.rs"
          $115 = $114&255; //@line 941 "/checkout/src/libcore/str/pattern.rs"
          $116 = (_bitshift64Shl(1,0,($115|0))|0); //@line 941 "/checkout/src/libcore/str/pattern.rs"
          $117 = tempRet0; //@line 941 "/checkout/src/libcore/str/pattern.rs"
          $118 = $116 & $87; //@line 941 "/checkout/src/libcore/str/pattern.rs"
          $119 = $117 & $90; //@line 941 "/checkout/src/libcore/str/pattern.rs"
          $120 = ($118|0)==(0); //@line 941 "/checkout/src/libcore/str/pattern.rs"
          $121 = ($119|0)==(0); //@line 941 "/checkout/src/libcore/str/pattern.rs"
          $122 = $120 & $121; //@line 941 "/checkout/src/libcore/str/pattern.rs"
          if (!($122)) {
           break;
          }
          $$ = $97 ? $123 : 0; //@line 976 "/checkout/src/libcore/str/pattern.rs"
          if ($102) {
           $107 = $100;$112 = $101;$123 = $$;
          } else {
           $$lcssa1268 = $$;$109 = $80;
           break L12;
          }
         }
         $124 = ($123>>>0)>=($91>>>0); //@line 850 "/checkout/src/libcore/cmp.rs"
         $_0$0$sroa$speculated$i = $124 ? $123 : $91; //@line 462 "/checkout/src/libcore/cmp.rs"
         $$_0$0$sroa$speculated$i = $97 ? $91 : $_0$0$sroa$speculated$i; //@line 983 "/checkout/src/libcore/str/pattern.rs"
         $iter$sroa$0$0$i$i$i = $$_0$0$sroa$speculated$i;
         while(1) {
          $125 = ($iter$sroa$0$0$i$i$i>>>0)<($83>>>0); //@line 846 "/checkout/src/libcore/cmp.rs"
          if (!($125)) {
           break L16;
          }
          $$arith = (($iter$sroa$0$0$i$i$i) + 1)|0; //@line 1982 "/checkout/src/libcore/num/mod.rs"
          $$overflow = ($iter$sroa$0$0$i$i$i>>>0)>(4294967294); //@line 1982 "/checkout/src/libcore/num/mod.rs"
          if ($$overflow) {
           break L16;
          }
          $126 = (($iter$sroa$0$0$i$i$i) + ($$promoted))|0; //@line 986 "/checkout/src/libcore/str/pattern.rs"
          $127 = ($126>>>0)<($80>>>0); //@line 825 "/checkout/src/libcore/slice/mod.rs"
          if (!($127)) {
           label = 40;
           break L7;
          }
          $128 = (($82) + ($iter$sroa$0$0$i$i$i)|0); //@line 986 "/checkout/src/libcore/str/pattern.rs"
          $129 = HEAP8[$128>>0]|0; //@line 986 "/checkout/src/libcore/str/pattern.rs"
          $130 = (($81) + ($126)|0); //@line 825 "/checkout/src/libcore/slice/mod.rs"
          $131 = HEAP8[$130>>0]|0; //@line 986 "/checkout/src/libcore/str/pattern.rs"
          $132 = ($129<<24>>24)==($131<<24>>24); //@line 986 "/checkout/src/libcore/str/pattern.rs"
          if ($132) {
           $iter$sroa$0$0$i$i$i = $$arith;
          } else {
           break;
          }
         }
         $133 = (($103) + ($iter$sroa$0$0$i$i$i))|0; //@line 987 "/checkout/src/libcore/str/pattern.rs"
         $$lcssa51$ = $97 ? $123 : 0; //@line 988 "/checkout/src/libcore/str/pattern.rs"
         $134 = (($133) + ($84))|0; //@line 961 "/checkout/src/libcore/str/pattern.rs"
         $135 = ($134>>>0)<($80>>>0); //@line 792 "/checkout/src/libcore/slice/mod.rs"
         if ($135) {
          $$lcssa4854 = $133;$$lcssa5159 = $$lcssa51$;$161 = $134;
         } else {
          $$lcssa1268 = $$lcssa51$;$109 = $80;
          break L12;
         }
        }
        $start2$0$i$i$i = $97 ? 0 : $123; //@line 996 "/checkout/src/libcore/str/pattern.rs"
        $iter3$sroa$5$0$i$i$i = $91;
        while(1) {
         $136 = ($start2$0$i$i$i>>>0)<($iter3$sroa$5$0$i$i$i>>>0); //@line 846 "/checkout/src/libcore/cmp.rs"
         $137 = (($iter3$sroa$5$0$i$i$i) + -1)|0; //@line 192 "/checkout/src/libcore/ops/arith.rs"
         if (!($136)) {
          label = 44;
          break L7;
         }
         $138 = ($137>>>0)<($83>>>0); //@line 998 "/checkout/src/libcore/str/pattern.rs"
         if (!($138)) {
          label = 51;
          break L7;
         }
         $139 = (($137) + ($$promoted))|0; //@line 998 "/checkout/src/libcore/str/pattern.rs"
         $140 = ($139>>>0)<($80>>>0); //@line 825 "/checkout/src/libcore/slice/mod.rs"
         if (!($140)) {
          label = 47;
          break L7;
         }
         $141 = (($82) + ($137)|0); //@line 998 "/checkout/src/libcore/str/pattern.rs"
         $142 = HEAP8[$141>>0]|0; //@line 998 "/checkout/src/libcore/str/pattern.rs"
         $143 = (($81) + ($139)|0); //@line 825 "/checkout/src/libcore/slice/mod.rs"
         $144 = HEAP8[$143>>0]|0; //@line 998 "/checkout/src/libcore/str/pattern.rs"
         $145 = ($142<<24>>24)==($144<<24>>24); //@line 998 "/checkout/src/libcore/str/pattern.rs"
         if ($145) {
          $iter3$sroa$5$0$i$i$i = $137;
         } else {
          break;
         }
        }
        $$lcssa150$lcssa$ = $97 ? $123 : $93; //@line 1000 "/checkout/src/libcore/str/pattern.rs"
        if ($106) {
         $$lcssa150$lcssa190 = $$lcssa150$lcssa$;$$lcssa48$lcssa65 = $104;$160 = $105;
        } else {
         $$lcssa1268 = $$lcssa150$lcssa$;$109 = $80;
         break;
        }
       }
      } else {
       $$lcssa1268 = $$promoted67;$109 = $80;
      }
     } while(0);
     $108 = ($109|0)==(0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
     $110 = ($80|0)==($109|0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
     $or$cond$i59$i$i = $108 | $110; //@line 2438 "/checkout/src/libcore/str/mod.rs"
     L37: do {
      if ($or$cond$i59$i$i) {
       $b$0$lcssa$i$i = $109;
      } else {
       $b$060$i$i = $109;
       while(1) {
        $146 = ($80>>>0)>($b$060$i$i>>>0); //@line 792 "/checkout/src/libcore/slice/mod.rs"
        if ($146) {
         $147 = (($81) + ($b$060$i$i)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
         $148 = HEAP8[$147>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
         $149 = ($148<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
         if ($149) {
          $b$0$lcssa$i$i = $b$060$i$i;
          break L37;
         }
        }
        $151 = (($b$060$i$i) + 1)|0; //@line 660 "/checkout/src/libcore/str/pattern.rs"
        $152 = ($151|0)==(0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
        $153 = ($80|0)==($151|0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
        $or$cond$i$i$i = $152 | $153; //@line 2438 "/checkout/src/libcore/str/mod.rs"
        if ($or$cond$i$i$i) {
         $b$0$lcssa$i$i = $151;
         break;
        } else {
         $b$060$i$i = $151;
        }
       }
      }
     } while(0);
     $150 = ($109>>>0)>=($b$0$lcssa$i$i>>>0); //@line 850 "/checkout/src/libcore/cmp.rs"
     $_0$0$sroa$speculated$i1 = $150 ? $109 : $b$0$lcssa$i$i; //@line 462 "/checkout/src/libcore/cmp.rs"
     HEAP32[$2>>2] = $_0$0$sroa$speculated$i1; //@line 662 "/checkout/src/libcore/str/pattern.rs"
     HEAP32[$5>>2] = $$lcssa1268; //@line 977 "/checkout/src/libcore/str/pattern.rs"
     $32 = $80;$33 = $81;
    } else {
     $$pre = HEAP32[$3>>2]|0;
     $$pre141 = HEAP32[$4>>2]|0;
     $32 = $$pre141;$33 = $$pre;
    }
    $25 = HEAP8[$12>>0]|0; //@line 631 "/checkout/src/libcore/str/pattern.rs"
    $26 = ($25<<24>>24)!=(0); //@line 631 "/checkout/src/libcore/str/pattern.rs"
    $27 = $26 ^ 1; //@line 632 "/checkout/src/libcore/str/pattern.rs"
    $28 = $27&1; //@line 632 "/checkout/src/libcore/str/pattern.rs"
    HEAP8[$12>>0] = $28; //@line 632 "/checkout/src/libcore/str/pattern.rs"
    $29 = HEAP32[$11>>2]|0; //@line 633 "/checkout/src/libcore/str/pattern.rs"
    $30 = ($29|0)==(0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
    $31 = ($32|0)==($29|0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
    $or$cond$i$i$i$i$i$i = $30 | $31; //@line 2438 "/checkout/src/libcore/str/mod.rs"
    if ($or$cond$i$i$i$i$i$i) {
     $$pre$i$i$i$i$i = (($33) + ($29)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $$pre$phi142Z2D = $$pre$i$i$i$i$i;
    } else {
     $34 = ($32>>>0)>($29>>>0); //@line 792 "/checkout/src/libcore/slice/mod.rs"
     if (!($34)) {
      label = 8;
      break;
     }
     $35 = (($33) + ($29)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $36 = HEAP8[$35>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
     $37 = ($36<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
     if ($37) {
      $$pre$phi142Z2D = $35;
     } else {
      label = 8;
      break;
     }
    }
    $38 = (($33) + ($29)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
    $39 = (($33) + ($29)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
    $40 = (($32) - ($29))|0; //@line 1975 "/checkout/src/libcore/str/mod.rs"
    $41 = (($39) + ($40)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
    $42 = ($$pre$phi142Z2D|0)==($41|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
    $43 = ((($38)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
    $$$i$i = $42 ? $$pre$phi142Z2D : $43; //@line 1138 "/checkout/src/libcore/slice/mod.rs"
    do {
     if ($42) {
      $76 = 1114112;
     } else {
      $44 = HEAP8[$$pre$phi142Z2D>>0]|0; //@line 497 "/checkout/src/libcore/str/mod.rs"
      $45 = ($44<<24>>24)>(-1); //@line 498 "/checkout/src/libcore/str/mod.rs"
      if ($45) {
       $46 = $44&255; //@line 499 "/checkout/src/libcore/str/mod.rs"
       $76 = $46;
       break;
      }
      $47 = $44 & 31; //@line 472 "/checkout/src/libcore/str/mod.rs"
      $48 = $47&255; //@line 472 "/checkout/src/libcore/str/mod.rs"
      $49 = ($$$i$i|0)==($41|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
      if ($49) {
       $57 = $41;$_0$0$i16$i$i$i$i = 0;
      } else {
       $50 = ((($$$i$i)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
       $51 = HEAP8[$$$i$i>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
       $phitmp$i$i$i$i = $51 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
       $57 = $50;$_0$0$i16$i$i$i$i = $phitmp$i$i$i$i;
      }
      $52 = $48 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
      $53 = $_0$0$i16$i$i$i$i&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
      $54 = $53 | $52; //@line 476 "/checkout/src/libcore/str/mod.rs"
      $55 = ($44&255)>(223); //@line 508 "/checkout/src/libcore/str/mod.rs"
      if ($55) {
       $56 = ($57|0)==($41|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
       if ($56) {
        $67 = $41;$_0$0$i10$i$i$i$i = 0;
       } else {
        $58 = ((($57)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
        $59 = HEAP8[$57>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
        $phitmp21$i$i$i$i = $59 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
        $67 = $58;$_0$0$i10$i$i$i$i = $phitmp21$i$i$i$i;
       }
       $60 = $53 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
       $61 = $_0$0$i10$i$i$i$i&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
       $62 = $61 | $60; //@line 476 "/checkout/src/libcore/str/mod.rs"
       $63 = $48 << 12; //@line 513 "/checkout/src/libcore/str/mod.rs"
       $64 = $62 | $63; //@line 513 "/checkout/src/libcore/str/mod.rs"
       $65 = ($44&255)>(239); //@line 514 "/checkout/src/libcore/str/mod.rs"
       if ($65) {
        $66 = ($67|0)==($41|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
        if ($66) {
         $_0$0$i5$i$i$i$i = 0;
        } else {
         $68 = HEAP8[$67>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
         $phitmp22$i$i$i$i = $68 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
         $_0$0$i5$i$i$i$i = $phitmp22$i$i$i$i;
        }
        $69 = $48 << 18; //@line 518 "/checkout/src/libcore/str/mod.rs"
        $70 = $69 & 1835008; //@line 518 "/checkout/src/libcore/str/mod.rs"
        $71 = $62 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
        $72 = $_0$0$i5$i$i$i$i&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
        $73 = $71 | $70; //@line 476 "/checkout/src/libcore/str/mod.rs"
        $74 = $73 | $72; //@line 518 "/checkout/src/libcore/str/mod.rs"
        $76 = $74;
       } else {
        $76 = $64;
       }
      } else {
       $76 = $54;
      }
     }
    } while(0);
    if ($26) {
     $_5$sroa$10$1$ph$i = $29;$_5$sroa$15$1$ph$i = $29;
     label = 58;
     break;
    }
    $96 = ($76|0)==(1114112); //@line 636 "/checkout/src/libcore/str/pattern.rs"
    if ($96) {
     label = 57;
     break;
    }
    $75 = ($76>>>0)<(128); //@line 463 "/checkout/src/libcore/char.rs"
    $77 = ($76>>>0)<(2048); //@line 465 "/checkout/src/libcore/char.rs"
    $78 = ($76>>>0)<(65536); //@line 467 "/checkout/src/libcore/char.rs"
    $$$i$i$i = $78 ? 3 : 4; //@line 467 "/checkout/src/libcore/char.rs"
    $$$$i$i$i = $77 ? 2 : $$$i$i$i; //@line 465 "/checkout/src/libcore/char.rs"
    $$$$$i$i$i = $75 ? 1 : $$$$i$i$i; //@line 463 "/checkout/src/libcore/char.rs"
    $79 = (($$$$$i$i$i) + ($29))|0; //@line 638 "/checkout/src/libcore/str/pattern.rs"
    HEAP32[$11>>2] = $79; //@line 638 "/checkout/src/libcore/str/pattern.rs"
    $$ph = $1;
   }
   if ((label|0) == 8) {
    __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($33,$32,$29,$32); //@line 1987 "/checkout/src/libcore/str/mod.rs"
    // unreachable; //@line 1987 "/checkout/src/libcore/str/mod.rs"
   }
   else if ((label|0) == 40) {
    __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(9276,$126,$80); //@line 825 "/checkout/src/libcore/slice/mod.rs"
    // unreachable; //@line 825 "/checkout/src/libcore/slice/mod.rs"
   }
   else if ((label|0) == 44) {
    HEAP32[$5>>2] = $123; //@line 977 "/checkout/src/libcore/str/pattern.rs"
    HEAP32[$2>>2] = $100; //@line 1011 "/checkout/src/libcore/str/pattern.rs"
    if ($97) {
     $_5$sroa$10$1$ph$i = $$promoted;$_5$sroa$15$1$ph$i = $100;
     label = 58;
    } else {
     HEAP32[$5>>2] = 0; //@line 1013 "/checkout/src/libcore/str/pattern.rs"
     $_5$sroa$10$1$ph$i = $$promoted;$_5$sroa$15$1$ph$i = $100;
     label = 58;
    }
   }
   else if ((label|0) == 47) {
    __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(9276,$139,$80); //@line 825 "/checkout/src/libcore/slice/mod.rs"
    // unreachable; //@line 825 "/checkout/src/libcore/slice/mod.rs"
   }
   else if ((label|0) == 51) {
    __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(9292,$137,$83); //@line 998 "/checkout/src/libcore/str/pattern.rs"
    // unreachable; //@line 998 "/checkout/src/libcore/str/pattern.rs"
   }
   else if ((label|0) == 56) {
    HEAP32[$2>>2] = $80; //@line 662 "/checkout/src/libcore/str/pattern.rs"
    label = 57;
   }
   if ((label|0) == 57) {
    HEAP32[$_3>>2] = 0; //@line 678 "/checkout/src/libcore/str/pattern.rs"
    break;
   }
   else if ((label|0) == 58) {
    HEAP32[$_3>>2] = 1; //@line 677 "/checkout/src/libcore/str/pattern.rs"
    $154 = ((($_3)) + 4|0); //@line 677 "/checkout/src/libcore/str/pattern.rs"
    HEAP32[$154>>2] = $_5$sroa$10$1$ph$i; //@line 677 "/checkout/src/libcore/str/pattern.rs"
    $155 = ((($_3)) + 8|0); //@line 677 "/checkout/src/libcore/str/pattern.rs"
    HEAP32[$155>>2] = $_5$sroa$15$1$ph$i; //@line 677 "/checkout/src/libcore/str/pattern.rs"
    break;
   }
  }
 } while(0);
 $156 = HEAP32[$_3>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
 $switch$i3 = ($156|0)==(1); //@line 404 "/checkout/src/libcore/option.rs"
 if ($switch$i3) {
  $157 = ((($_3)) + 4|0); //@line 404 "/checkout/src/libcore/option.rs"
  $158 = HEAP32[$157>>2]|0; //@line 404 "/checkout/src/libcore/option.rs"
  HEAP32[$0>>2] = 1; //@line 404 "/checkout/src/libcore/option.rs"
  $159 = ((($0)) + 4|0); //@line 404 "/checkout/src/libcore/option.rs"
  HEAP32[$159>>2] = $158; //@line 404 "/checkout/src/libcore/option.rs"
  STACKTOP = sp;return; //@line 2458 "/checkout/src/libcore/str/mod.rs"
 } else {
  HEAP32[$0>>2] = 0; //@line 405 "/checkout/src/libcore/option.rs"
  STACKTOP = sp;return; //@line 2458 "/checkout/src/libcore/str/mod.rs"
 }
}
function __ZN4core3str7pattern14TwoWaySearcher4next17hc52f554c7879b49aE_1351($0,$self,$haystack$0,$haystack$1,$needle$0,$needle$1,$long_period) {
 $0 = $0|0;
 $self = $self|0;
 $haystack$0 = $haystack$0|0;
 $haystack$1 = $haystack$1|0;
 $needle$0 = $needle$0|0;
 $needle$1 = $needle$1|0;
 $long_period = $long_period|0;
 var $$arith = 0, $$overflow = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$sroa$speculated$i = 0, $iter$sroa$0$0 = 0, $iter3$sroa$5$0 = 0, $start2$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($self)) + 20|0); //@line 955 "/checkout/src/libcore/str/pattern.rs"
 $2 = (($needle$1) + -1)|0; //@line 956 "/checkout/src/libcore/str/pattern.rs"
 $3 = HEAP32[$1>>2]|0; //@line 961 "/checkout/src/libcore/str/pattern.rs"
 $4 = (($3) + ($2))|0; //@line 961 "/checkout/src/libcore/str/pattern.rs"
 $5 = ($4>>>0)<($haystack$1>>>0); //@line 792 "/checkout/src/libcore/slice/mod.rs"
 L1: do {
  if ($5) {
   $6 = ((($self)) + 28|0);
   $7 = ((($self)) + 8|0);
   $8 = ((($self)) + 16|0);
   $9 = $self;
   $10 = $9;
   $11 = HEAP32[$10>>2]|0;
   $12 = (($9) + 4)|0;
   $13 = $12;
   $14 = HEAP32[$13>>2]|0;
   $15 = HEAP32[$7>>2]|0;
   $16 = HEAP32[$8>>2]|0;
   $17 = (($needle$1) - ($16))|0;
   $65 = $4;$66 = $3;
   L3: while(1) {
    $67 = $65;$68 = $66;
    L5: while(1) {
     $19 = $67;$31 = $68;
     while(1) {
      $18 = (($haystack$0) + ($19)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
      $20 = HEAP8[$18>>0]|0; //@line 962 "/checkout/src/libcore/str/pattern.rs"
      $21 = $20 & 63; //@line 941 "/checkout/src/libcore/str/pattern.rs"
      $22 = $21&255; //@line 941 "/checkout/src/libcore/str/pattern.rs"
      $23 = (_bitshift64Shl(1,0,($22|0))|0); //@line 941 "/checkout/src/libcore/str/pattern.rs"
      $24 = tempRet0; //@line 941 "/checkout/src/libcore/str/pattern.rs"
      $25 = $23 & $11; //@line 941 "/checkout/src/libcore/str/pattern.rs"
      $26 = $24 & $14; //@line 941 "/checkout/src/libcore/str/pattern.rs"
      $27 = ($25|0)==(0); //@line 941 "/checkout/src/libcore/str/pattern.rs"
      $28 = ($26|0)==(0); //@line 941 "/checkout/src/libcore/str/pattern.rs"
      $29 = $27 & $28; //@line 941 "/checkout/src/libcore/str/pattern.rs"
      if (!($29)) {
       break;
      }
      $30 = (($31) + ($needle$1))|0; //@line 975 "/checkout/src/libcore/str/pattern.rs"
      HEAP32[$1>>2] = $30; //@line 975 "/checkout/src/libcore/str/pattern.rs"
      if (!($long_period)) {
       HEAP32[$6>>2] = 0; //@line 977 "/checkout/src/libcore/str/pattern.rs"
      }
      $32 = (($30) + ($2))|0; //@line 961 "/checkout/src/libcore/str/pattern.rs"
      $33 = ($32>>>0)<($haystack$1>>>0); //@line 792 "/checkout/src/libcore/slice/mod.rs"
      if ($33) {
       $19 = $32;$31 = $30;
      } else {
       break L1;
      }
     }
     if ($long_period) {
      $iter$sroa$0$0 = $15;
     } else {
      $34 = HEAP32[$6>>2]|0; //@line 984 "/checkout/src/libcore/str/pattern.rs"
      $35 = ($34>>>0)>=($15>>>0); //@line 850 "/checkout/src/libcore/cmp.rs"
      $_0$0$sroa$speculated$i = $35 ? $34 : $15; //@line 462 "/checkout/src/libcore/cmp.rs"
      $iter$sroa$0$0 = $_0$0$sroa$speculated$i;
     }
     while(1) {
      $36 = ($iter$sroa$0$0>>>0)<($needle$1>>>0); //@line 846 "/checkout/src/libcore/cmp.rs"
      if (!($36)) {
       break L5;
      }
      $$arith = (($iter$sroa$0$0) + 1)|0; //@line 1982 "/checkout/src/libcore/num/mod.rs"
      $$overflow = ($iter$sroa$0$0>>>0)>(4294967294); //@line 1982 "/checkout/src/libcore/num/mod.rs"
      if ($$overflow) {
       break L5;
      }
      $38 = (($31) + ($iter$sroa$0$0))|0; //@line 986 "/checkout/src/libcore/str/pattern.rs"
      $39 = ($38>>>0)<($haystack$1>>>0); //@line 825 "/checkout/src/libcore/slice/mod.rs"
      if (!($39)) {
       label = 17;
       break L3;
      }
      $40 = (($needle$0) + ($iter$sroa$0$0)|0); //@line 986 "/checkout/src/libcore/str/pattern.rs"
      $41 = HEAP8[$40>>0]|0; //@line 986 "/checkout/src/libcore/str/pattern.rs"
      $42 = (($haystack$0) + ($38)|0); //@line 825 "/checkout/src/libcore/slice/mod.rs"
      $43 = HEAP8[$42>>0]|0; //@line 986 "/checkout/src/libcore/str/pattern.rs"
      $44 = ($41<<24>>24)==($43<<24>>24); //@line 986 "/checkout/src/libcore/str/pattern.rs"
      if ($44) {
       $iter$sroa$0$0 = $$arith;
      } else {
       break;
      }
     }
     $45 = (($$arith) + ($31))|0; //@line 987 "/checkout/src/libcore/str/pattern.rs"
     $46 = (($45) - ($15))|0; //@line 987 "/checkout/src/libcore/str/pattern.rs"
     HEAP32[$1>>2] = $46; //@line 987 "/checkout/src/libcore/str/pattern.rs"
     if (!($long_period)) {
      HEAP32[$6>>2] = 0; //@line 989 "/checkout/src/libcore/str/pattern.rs"
     }
     $47 = (($46) + ($2))|0; //@line 961 "/checkout/src/libcore/str/pattern.rs"
     $48 = ($47>>>0)<($haystack$1>>>0); //@line 792 "/checkout/src/libcore/slice/mod.rs"
     if ($48) {
      $67 = $47;$68 = $46;
     } else {
      break L1;
     }
    }
    $37 = HEAP32[$6>>2]|0; //@line 996 "/checkout/src/libcore/str/pattern.rs"
    $start2$0 = $long_period ? 0 : $37; //@line 996 "/checkout/src/libcore/str/pattern.rs"
    $iter3$sroa$5$0 = $15;
    while(1) {
     $49 = ($start2$0>>>0)<($iter3$sroa$5$0>>>0); //@line 846 "/checkout/src/libcore/cmp.rs"
     $50 = (($iter3$sroa$5$0) + -1)|0; //@line 192 "/checkout/src/libcore/ops/arith.rs"
     if (!($49)) {
      label = 23;
      break L3;
     }
     $52 = ($50>>>0)<($needle$1>>>0); //@line 998 "/checkout/src/libcore/str/pattern.rs"
     if (!($52)) {
      label = 33;
      break L3;
     }
     $53 = (($50) + ($31))|0; //@line 998 "/checkout/src/libcore/str/pattern.rs"
     $54 = ($53>>>0)<($haystack$1>>>0); //@line 825 "/checkout/src/libcore/slice/mod.rs"
     if (!($54)) {
      label = 26;
      break L3;
     }
     $55 = (($needle$0) + ($50)|0); //@line 998 "/checkout/src/libcore/str/pattern.rs"
     $56 = HEAP8[$55>>0]|0; //@line 998 "/checkout/src/libcore/str/pattern.rs"
     $57 = (($haystack$0) + ($53)|0); //@line 825 "/checkout/src/libcore/slice/mod.rs"
     $58 = HEAP8[$57>>0]|0; //@line 998 "/checkout/src/libcore/str/pattern.rs"
     $59 = ($56<<24>>24)==($58<<24>>24); //@line 998 "/checkout/src/libcore/str/pattern.rs"
     if ($59) {
      $iter3$sroa$5$0 = $50;
     } else {
      break;
     }
    }
    $60 = (($16) + ($31))|0; //@line 999 "/checkout/src/libcore/str/pattern.rs"
    HEAP32[$1>>2] = $60; //@line 999 "/checkout/src/libcore/str/pattern.rs"
    if (!($long_period)) {
     HEAP32[$6>>2] = $17; //@line 1001 "/checkout/src/libcore/str/pattern.rs"
    }
    $61 = (($60) + ($2))|0; //@line 961 "/checkout/src/libcore/str/pattern.rs"
    $62 = ($61>>>0)<($haystack$1>>>0); //@line 792 "/checkout/src/libcore/slice/mod.rs"
    if ($62) {
     $65 = $61;$66 = $60;
    } else {
     break L1;
    }
   }
   if ((label|0) == 17) {
    __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(9276,$38,$haystack$1); //@line 825 "/checkout/src/libcore/slice/mod.rs"
    // unreachable; //@line 825 "/checkout/src/libcore/slice/mod.rs"
   }
   else if ((label|0) == 23) {
    $51 = (($31) + ($needle$1))|0; //@line 1011 "/checkout/src/libcore/str/pattern.rs"
    HEAP32[$1>>2] = $51; //@line 1011 "/checkout/src/libcore/str/pattern.rs"
    if (!($long_period)) {
     HEAP32[$6>>2] = 0; //@line 1013 "/checkout/src/libcore/str/pattern.rs"
    }
    HEAP32[$0>>2] = 1; //@line 1225 "/checkout/src/libcore/str/pattern.rs"
    $63 = ((($0)) + 4|0); //@line 1225 "/checkout/src/libcore/str/pattern.rs"
    HEAP32[$63>>2] = $31; //@line 1225 "/checkout/src/libcore/str/pattern.rs"
    $64 = ((($0)) + 8|0); //@line 1225 "/checkout/src/libcore/str/pattern.rs"
    HEAP32[$64>>2] = $51; //@line 1225 "/checkout/src/libcore/str/pattern.rs"
    return; //@line 1018 "/checkout/src/libcore/str/pattern.rs"
   }
   else if ((label|0) == 26) {
    __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(9276,$53,$haystack$1); //@line 825 "/checkout/src/libcore/slice/mod.rs"
    // unreachable; //@line 825 "/checkout/src/libcore/slice/mod.rs"
   }
   else if ((label|0) == 33) {
    __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(9292,$50,$needle$1); //@line 998 "/checkout/src/libcore/str/pattern.rs"
    // unreachable; //@line 998 "/checkout/src/libcore/str/pattern.rs"
   }
  }
 } while(0);
 HEAP32[$1>>2] = $haystack$1; //@line 964 "/checkout/src/libcore/str/pattern.rs"
 HEAP32[$0>>2] = 0; //@line 1223 "/checkout/src/libcore/str/pattern.rs"
 return; //@line 1018 "/checkout/src/libcore/str/pattern.rs"
}
function __ZN4core3ops8function5impls91__LT_impl_u20_core__ops__function__FnOnce_LT_A_GT__u20_for_u20__RF__u27_a_u20_mut_u20_F_GT_9call_once17h7eded945303bc572E($0,$self,$1) {
 $0 = $0|0;
 $self = $self|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_35$i = 0, $err$i$i = 0, $ptr$0$i = 0, $vector$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $err$i$i = sp + 24|0;
 $_35$i = sp + 12|0;
 $vector$i$i$i = sp;
 $2 = HEAP32[$self>>2]|0; //@line 85 "/checkout/src/libstd/sys/unix/args.rs"
 $3 = HEAP32[$2>>2]|0; //@line 85 "/checkout/src/libstd/sys/unix/args.rs"
 $4 = (($3) + ($1<<2)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
 $5 = HEAP32[$4>>2]|0; //@line 85 "/checkout/src/libstd/sys/unix/args.rs"
 $6 = (_strlen($5)|0); //@line 902 "/checkout/src/libstd/ffi/c_str.rs"
 $7 = ($6|0)==(-1); //@line 875 "/checkout/src/libcore/slice/mod.rs"
 if ($7) {
  __ZN4core5slice20slice_index_len_fail17h440967be6f416601E(-1,0); //@line 876 "/checkout/src/libcore/slice/mod.rs"
  // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
 }
 $8 = ($6|0)<(0); //@line 5 "<assert macros>"
 if ($8) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(8952); //@line 3 "<panic macros>"
  // unreachable; //@line 3 "<panic macros>"
 }
 $9 = ($6|0)==(0); //@line 90 "/checkout/src/liballoc/raw_vec.rs"
 if ($9) {
  $ptr$0$i = (1);
 } else {
  $10 = (___rust_alloc($6,1,$err$i$i)|0); //@line 84 "/checkout/src/liballoc/heap.rs"
  $11 = ($10|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
  if ($11) {
   HEAP32[$_35$i>>2] = 0; //@line 101 "/checkout/src/liballoc/raw_vec.rs"
   ___rust_oom($_35$i); //@line 98 "/checkout/src/liballoc/heap.rs"
   // unreachable; //@line 98 "/checkout/src/liballoc/heap.rs"
  } else {
   $ptr$0$i = $10;
  }
 }
 HEAP32[$vector$i$i$i>>2] = $ptr$0$i; //@line 358 "/checkout/src/liballoc/vec.rs"
 $12 = ((($vector$i$i$i)) + 4|0); //@line 358 "/checkout/src/liballoc/vec.rs"
 HEAP32[$12>>2] = $6; //@line 358 "/checkout/src/liballoc/vec.rs"
 $13 = ((($vector$i$i$i)) + 8|0); //@line 358 "/checkout/src/liballoc/vec.rs"
 HEAP32[$13>>2] = 0; //@line 358 "/checkout/src/liballoc/vec.rs"
 __THREW__ = 0;
 invoke_viii(410,($vector$i$i$i|0),0,($6|0)); //@line 461 "/checkout/src/liballoc/vec.rs"
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  __ZN4core3ptr13drop_in_place17hc7d659014c0d680dE_llvm_458476A($vector$i$i$i); //@line 168 "/checkout/src/liballoc/slice.rs"
  ___resumeException($16|0);
  // unreachable;
 } else {
  $18 = HEAP32[$13>>2]|0; //@line 1161 "/checkout/src/liballoc/vec.rs"
  $19 = (($18) + ($6))|0; //@line 1902 "/checkout/src/liballoc/vec.rs"
  HEAP32[$13>>2] = $19; //@line 678 "/checkout/src/liballoc/vec.rs"
  $20 = HEAP32[$vector$i$i$i>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
  $21 = (($20) + ($18)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  _memcpy(($21|0),($5|0),($6|0))|0; //@line 672 "/checkout/src/libcore/slice/mod.rs"
  ;HEAP32[$0>>2]=HEAP32[$vector$i$i$i>>2]|0;HEAP32[$0+4>>2]=HEAP32[$vector$i$i$i+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$vector$i$i$i+8>>2]|0; //@line 167 "/checkout/src/liballoc/slice.rs"
  STACKTOP = sp;return; //@line 272 "/checkout/src/libcore/ops/function.rs"
 }
}
function __ZN4core3ptr13drop_in_place17hc7d659014c0d680dE_llvm_458476A($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($arg0)) + 4|0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $1 = HEAP32[$0>>2]|0; //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $2 = ($1|0)==(0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 if ($2) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 $3 = HEAP32[$arg0>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 ___rust_dealloc($3,$1,1); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr13drop_in_place17h70fec0c075b910d8E_llvm_458476A($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10$1$i1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 $1 = ((($arg0)) + 8|0); //@line 1701 "/checkout/src/liballoc/vec.rs"
 $2 = HEAP32[$1>>2]|0; //@line 1701 "/checkout/src/liballoc/vec.rs"
 $3 = (($0) + (($2*12)|0)|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $4 = ($2|0)==(0); //@line 59 "/checkout/src/libcore/ptr.rs"
 if (!($4)) {
  $_10$1$i1$i = $0;
  while(1) {
   $5 = ((($_10$1$i1$i)) + 12|0); //@line 59 "/checkout/src/libcore/ptr.rs"
   $6 = ((($_10$1$i1$i)) + 4|0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
   $7 = HEAP32[$6>>2]|0; //@line 225 "/checkout/src/liballoc/raw_vec.rs"
   $8 = ($7|0)==(0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
   if (!($8)) {
    $10 = HEAP32[$_10$1$i1$i>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
    ___rust_dealloc($10,$7,1); //@line 104 "/checkout/src/liballoc/heap.rs"
   }
   $9 = ($5|0)==($3|0); //@line 59 "/checkout/src/libcore/ptr.rs"
   if ($9) {
    break;
   } else {
    $_10$1$i1$i = $5;
   }
  }
 }
 $11 = ((($arg0)) + 4|0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $12 = HEAP32[$11>>2]|0; //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $13 = ($12|0)==(0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 if ($13) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 $14 = ($12*12)|0; //@line 232 "/checkout/src/liballoc/raw_vec.rs"
 $15 = HEAP32[$arg0>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 ___rust_dealloc($15,$14,4); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN50__LT_F_u20_as_u20_alloc__boxed__FnBox_LT_A_GT__GT_8call_box17h361f0e062a718c91E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0; //@line 817 "/checkout/src/liballoc/boxed.rs"
 (_pthread_mutex_lock(($1|0))|0); //@line 67 "/checkout/src/libstd/sys/unix/mutex.rs"
 $2 = ((($1)) + 28|0); //@line 57 "/checkout/src/libstd/io/lazy.rs"
 $3 = HEAP32[$2>>2]|0; //@line 240 "/checkout/src/libcore/cell.rs"
 HEAP8[$2>>0]=1&255;HEAP8[$2+1>>0]=(1>>8)&255;HEAP8[$2+2>>0]=(1>>16)&255;HEAP8[$2+3>>0]=1>>24; //@line 239 "/checkout/src/libcore/ptr.rs"
 (_pthread_mutex_unlock(($1|0))|0); //@line 72 "/checkout/src/libstd/sys/unix/mutex.rs"
 $4 = HEAP32[$3>>2]|0; //@line 2540 "/checkout/src/libcore/ptr.rs"
 $5 = HEAP32[$4>>2]|0;HEAP32[$4>>2] = (($5-1)|0); //@line 1529 "/checkout/src/libcore/sync/atomic.rs"
 $6 = ($5|0)==(1); //@line 933 "/checkout/src/liballoc/arc.rs"
 if (!($6)) {
  ___rust_dealloc($3,4,4); //@line 104 "/checkout/src/liballoc/heap.rs"
  ___rust_dealloc($0,4,4); //@line 104 "/checkout/src/liballoc/heap.rs"
  return; //@line 818 "/checkout/src/liballoc/boxed.rs"
 }
 /* fence */; //@line 1706 "/checkout/src/libcore/sync/atomic.rs"
 __THREW__ = 0;
 invoke_vi(444,($3|0)); //@line 968 "/checkout/src/liballoc/arc.rs"
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch_2()|0;
  $10 = tempRet0;
  __ZN5alloc4heap8box_free17hf489fc100caad4a1E($3); //@line 59 "/checkout/src/libcore/ptr.rs"
  __ZN5alloc4heap8box_free17h056b3ae2839c2d52E($0); //@line 818 "/checkout/src/liballoc/boxed.rs"
  ___resumeException($9|0);
  // unreachable;
 } else {
  ___rust_dealloc($3,4,4); //@line 104 "/checkout/src/liballoc/heap.rs"
  ___rust_dealloc($0,4,4); //@line 104 "/checkout/src/liballoc/heap.rs"
  return; //@line 818 "/checkout/src/liballoc/boxed.rs"
 }
}
function __ZN5alloc4heap8box_free17hf489fc100caad4a1E($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___rust_dealloc($ptr,4,4); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 265 "/checkout/src/liballoc/heap.rs"
}
function __ZN5alloc4heap8box_free17h056b3ae2839c2d52E($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___rust_dealloc($ptr,4,4); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 265 "/checkout/src/liballoc/heap.rs"
}
function __ZN5alloc9allocator6Layout6repeat17h2e8f73e4564db9f2E_llvm_458476A($0,$self,$n) {
 $0 = $0|0;
 $self = $self|0;
 $n = $n|0;
 var $$arith = 0, $$arith2 = 0, $$denom = 0, $$div = 0, $$iszero = 0, $$overflow = 0, $$overflow3 = 0, $$same = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_27$sroa$0$0$$sroa_idx2 = 0, $_27$sroa$4$0$$sroa_idx4 = 0, $_27$sroa$5$0$$sroa_idx6 = 0, $or$cond19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$self>>2]|0; //@line 220 "/checkout/src/liballoc/allocator.rs"
 $2 = ((($self)) + 4|0); //@line 220 "/checkout/src/liballoc/allocator.rs"
 $3 = HEAP32[$2>>2]|0; //@line 220 "/checkout/src/liballoc/allocator.rs"
 $4 = (($1) + -1)|0; //@line 1801 "/checkout/src/libcore/num/mod.rs"
 $5 = (($4) + ($3))|0; //@line 1820 "/checkout/src/libcore/num/mod.rs"
 $6 = (0 - ($3))|0; //@line 206 "/checkout/src/liballoc/allocator.rs"
 $7 = $5 & $6; //@line 206 "/checkout/src/liballoc/allocator.rs"
 $8 = (($7) - ($1))|0; //@line 1820 "/checkout/src/libcore/num/mod.rs"
 $$arith = (($1) + ($8))|0; //@line 1982 "/checkout/src/libcore/num/mod.rs"
 $$overflow = ($$arith>>>0)<($1>>>0); //@line 1982 "/checkout/src/libcore/num/mod.rs"
 if ($$overflow) {
  HEAP32[$0>>2] = 0; //@line 1201 "/checkout/src/libcore/option.rs"
  return; //@line 228 "/checkout/src/liballoc/allocator.rs"
 }
 $$arith2 = Math_imul($$arith, $n)|0; //@line 2032 "/checkout/src/libcore/num/mod.rs"
 $$iszero = ($n|0)==(0); //@line 2032 "/checkout/src/libcore/num/mod.rs"
 $$denom = $$iszero ? 1 : $n; //@line 2032 "/checkout/src/libcore/num/mod.rs"
 $$div = (($$arith2>>>0) / ($$denom>>>0))&-1; //@line 2032 "/checkout/src/libcore/num/mod.rs"
 $$same = ($$div|0)!=($$arith|0); //@line 2032 "/checkout/src/libcore/num/mod.rs"
 $$overflow3 = $$iszero ? 0 : $$same; //@line 2032 "/checkout/src/libcore/num/mod.rs"
 if ($$overflow3) {
  HEAP32[$0>>2] = 0; //@line 1201 "/checkout/src/libcore/option.rs"
  return; //@line 228 "/checkout/src/liballoc/allocator.rs"
 }
 $9 = (($3) + -1)|0; //@line 1820 "/checkout/src/libcore/num/mod.rs"
 $10 = $3 | -2147483648; //@line 80 "/checkout/src/liballoc/allocator.rs"
 $11 = $9 & $10; //@line 80 "/checkout/src/liballoc/allocator.rs"
 $12 = ($11|0)!=(0); //@line 80 "/checkout/src/liballoc/allocator.rs"
 $13 = ($$arith2>>>0)>($6>>>0); //@line 102 "/checkout/src/liballoc/allocator.rs"
 $or$cond19 = $12 | $13; //@line 80 "/checkout/src/liballoc/allocator.rs"
 if ($or$cond19) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(9308); //@line 20 "/checkout/src/libcore/macros.rs"
  // unreachable;
 }
 HEAP32[$0>>2] = 1; //@line 227 "/checkout/src/liballoc/allocator.rs"
 $_27$sroa$0$0$$sroa_idx2 = ((($0)) + 4|0); //@line 227 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$_27$sroa$0$0$$sroa_idx2>>2] = $$arith2; //@line 227 "/checkout/src/liballoc/allocator.rs"
 $_27$sroa$4$0$$sroa_idx4 = ((($0)) + 8|0); //@line 227 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$_27$sroa$4$0$$sroa_idx4>>2] = $3; //@line 227 "/checkout/src/liballoc/allocator.rs"
 $_27$sroa$5$0$$sroa_idx6 = ((($0)) + 12|0); //@line 227 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$_27$sroa$5$0$$sroa_idx6>>2] = $$arith; //@line 227 "/checkout/src/liballoc/allocator.rs"
 return; //@line 228 "/checkout/src/liballoc/allocator.rs"
}
function __ZN37__LT_std__io__lazy__Lazy_LT_T_GT__GT_3get17h6a06abe4e50ebf23E($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_5$i$i$i$i$i = 0, $_5$i$i$i$i$i2 = 0;
 var $err$i$i$i$i = 0, $err$i$i$i$i1 = 0, $magicptr = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $err$i$i$i$i1 = sp + 36|0;
 $_5$i$i$i$i$i2 = sp + 24|0;
 $err$i$i$i$i = sp + 12|0;
 $_5$i$i$i$i$i = sp;
 (_pthread_mutex_lock(($self|0))|0); //@line 67 "/checkout/src/libstd/sys/unix/mutex.rs"
 $0 = ((($self)) + 28|0); //@line 37 "/checkout/src/libstd/io/lazy.rs"
 $1 = HEAP32[$0>>2]|0; //@line 240 "/checkout/src/libcore/cell.rs"
 $magicptr = $1; //@line 38 "/checkout/src/libstd/io/lazy.rs"
 switch ($magicptr|0) {
 case 0:  {
  $2 = (___rust_alloc(4,4,$err$i$i$i$i1)|0); //@line 84 "/checkout/src/liballoc/heap.rs"
  $3 = ($2|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
  if ($3) {
   ___rust_oom($_5$i$i$i$i$i2); //@line 98 "/checkout/src/liballoc/heap.rs"
   // unreachable; //@line 98 "/checkout/src/liballoc/heap.rs"
  }
  HEAP32[$2>>2] = $self; //@line 242 "/checkout/src/liballoc/boxed.rs"
  $4 = (__ZN3std10sys_common11at_exit_imp4push17h108480f55ebe8470E_llvm_AFEA653B($2,9008)|0); //@line 100 "/checkout/src/libstd/sys_common/mod.rs"
  $5 = ((($self)) + 32|0); //@line 62 "/checkout/src/libstd/io/lazy.rs"
  $6 = HEAP32[$5>>2]|0; //@line 62 "/checkout/src/libstd/io/lazy.rs"
  $7 = (FUNCTION_TABLE_i[$6 & 511]()|0); //@line 62 "/checkout/src/libstd/io/lazy.rs"
  $8 = $7; //@line 63 "/checkout/src/libstd/io/lazy.rs"
  if (!($4)) {
   $ret$0 = $7;
   (_pthread_mutex_unlock(($self|0))|0); //@line 72 "/checkout/src/libstd/sys/unix/mutex.rs"
   STACKTOP = sp;return ($ret$0|0); //@line 48 "/checkout/src/libstd/io/lazy.rs"
  }
  $9 = HEAP32[$7>>2]|0;HEAP32[$7>>2] = (($9+1)|0); //@line 1518 "/checkout/src/libcore/sync/atomic.rs"
  $10 = ($9|0)<(0); //@line 722 "/checkout/src/liballoc/arc.rs"
  if ($10) {
   _llvm_trap(); //@line 724 "/checkout/src/liballoc/arc.rs"
   // unreachable; //@line 724 "/checkout/src/liballoc/arc.rs"
  }
  $11 = (___rust_alloc(4,4,$err$i$i$i$i)|0); //@line 84 "/checkout/src/liballoc/heap.rs"
  $12 = ($11|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
  if ($12) {
   ___rust_oom($_5$i$i$i$i$i); //@line 98 "/checkout/src/liballoc/heap.rs"
   // unreachable; //@line 98 "/checkout/src/liballoc/heap.rs"
  }
  HEAP32[$11>>2] = $8; //@line 242 "/checkout/src/liballoc/boxed.rs"
  $13 = $11;
  HEAP8[$0>>0]=$13&255;HEAP8[$0+1>>0]=($13>>8)&255;HEAP8[$0+2>>0]=($13>>16)&255;HEAP8[$0+3>>0]=$13>>24; //@line 239 "/checkout/src/libcore/ptr.rs"
  $ret$0 = $7;
  (_pthread_mutex_unlock(($self|0))|0); //@line 72 "/checkout/src/libstd/sys/unix/mutex.rs"
  STACKTOP = sp;return ($ret$0|0); //@line 48 "/checkout/src/libstd/io/lazy.rs"
  break;
 }
 case 1:  {
  $ret$0 = 0;
  (_pthread_mutex_unlock(($self|0))|0); //@line 72 "/checkout/src/libstd/sys/unix/mutex.rs"
  STACKTOP = sp;return ($ret$0|0); //@line 48 "/checkout/src/libstd/io/lazy.rs"
  break;
 }
 default: {
  $14 = HEAP32[$1>>2]|0; //@line 2540 "/checkout/src/libcore/ptr.rs"
  $15 = HEAP32[$14>>2]|0;HEAP32[$14>>2] = (($15+1)|0); //@line 1518 "/checkout/src/libcore/sync/atomic.rs"
  $16 = ($15|0)<(0); //@line 722 "/checkout/src/liballoc/arc.rs"
  if ($16) {
   _llvm_trap(); //@line 724 "/checkout/src/liballoc/arc.rs"
   // unreachable; //@line 724 "/checkout/src/liballoc/arc.rs"
  }
  $17 = HEAP32[$1>>2]|0; //@line 728 "/checkout/src/liballoc/arc.rs"
  $ret$0 = $17;
  (_pthread_mutex_unlock(($self|0))|0); //@line 72 "/checkout/src/libstd/sys/unix/mutex.rs"
  STACKTOP = sp;return ($ret$0|0); //@line 48 "/checkout/src/libstd/io/lazy.rs"
 }
 }
 return (0)|0;
}
function __ZN3std3sys4unix4args4init17hc7943941f4c9089dE($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_2$i$i$i = 0, $_3$i$i$i$sroa$4$0$$sroa_idx = 0, $_3$i$i$i$sroa$5$0$$sroa_idx = 0, $_5$i$i$i$i = 0, $args$i = 0, $argv$i = 0, $err$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $err$i$i$i = sp + 40|0;
 $_5$i$i$i$i = sp + 28|0;
 $_2$i$i$i = sp + 16|0;
 $args$i = sp + 4|0;
 $argv$i = sp;
 HEAP32[$argv$i>>2] = $argv;
 HEAP32[$_2$i$i$i>>2] = 0; //@line 257 "/checkout/src/libcore/iter/traits.rs"
 $_3$i$i$i$sroa$4$0$$sroa_idx = ((($_2$i$i$i)) + 4|0); //@line 257 "/checkout/src/libcore/iter/traits.rs"
 HEAP32[$_3$i$i$i$sroa$4$0$$sroa_idx>>2] = $argc; //@line 257 "/checkout/src/libcore/iter/traits.rs"
 $_3$i$i$i$sroa$5$0$$sroa_idx = ((($_2$i$i$i)) + 8|0); //@line 257 "/checkout/src/libcore/iter/traits.rs"
 HEAP32[$_3$i$i$i$sroa$5$0$$sroa_idx>>2] = $argv$i; //@line 257 "/checkout/src/libcore/iter/traits.rs"
 __ZN85__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_alloc__vec__SpecExtend_LT_T_C__u20_I_GT__GT_9from_iter17h94e0c69c66786fbbE($args$i,$_2$i$i$i); //@line 1710 "/checkout/src/liballoc/vec.rs"
 (_pthread_mutex_lock((38540|0))|0); //@line 67 "/checkout/src/libstd/sys/unix/mutex.rs"
 $0 = HEAP32[9634]|0; //@line 194 "/checkout/src/libcore/option.rs"
 $1 = ($0|0)==(0|0); //@line 215 "/checkout/src/libcore/option.rs"
 if (!($1)) {
  __THREW__ = 0;
  invoke_viii(414,(23818|0),34,(9260|0)); //@line 90 "/checkout/src/libstd/sys/unix/args.rs"
  $2 = __THREW__; __THREW__ = 0;
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  __ZN4core3ptr13drop_in_place17h70fec0c075b910d8E_llvm_458476A($args$i); //@line 93 "/checkout/src/libstd/sys/unix/args.rs"
  ___resumeException($3|0);
  // unreachable;
 }
 $5 = (___rust_alloc(12,4,$err$i$i$i)|0); //@line 84 "/checkout/src/liballoc/heap.rs"
 $6 = ($5|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
 if ($6) {
  ___rust_oom($_5$i$i$i$i); //@line 98 "/checkout/src/liballoc/heap.rs"
  // unreachable; //@line 98 "/checkout/src/liballoc/heap.rs"
 } else {
  ;HEAP32[$5>>2]=HEAP32[$args$i>>2]|0;HEAP32[$5+4>>2]=HEAP32[$args$i+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$args$i+8>>2]|0; //@line 91 "/checkout/src/libstd/sys/unix/args.rs"
  HEAP32[9634] = $5; //@line 91 "/checkout/src/libstd/sys/unix/args.rs"
  (_pthread_mutex_unlock((38540|0))|0); //@line 72 "/checkout/src/libstd/sys/unix/mutex.rs"
  STACKTOP = sp;return; //@line 23 "/checkout/src/libstd/sys/unix/args.rs"
 }
}
function __ZN3std3sys4unix4args7cleanup17h6f66480437a2b984E() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10$1$i1$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_pthread_mutex_lock((38540|0))|0); //@line 67 "/checkout/src/libstd/sys/unix/mutex.rs"
 $0 = HEAP32[9634]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $1 = ($0|0)==(0|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 if ($1) {
  HEAP32[9634] = 0; //@line 97 "/checkout/src/libstd/sys/unix/args.rs"
  (_pthread_mutex_unlock((38540|0))|0); //@line 72 "/checkout/src/libstd/sys/unix/mutex.rs"
  return; //@line 26 "/checkout/src/libstd/sys/unix/args.rs"
 }
 $2 = HEAP32[$0>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 $3 = ((($0)) + 8|0); //@line 1701 "/checkout/src/liballoc/vec.rs"
 $4 = HEAP32[$3>>2]|0; //@line 1701 "/checkout/src/liballoc/vec.rs"
 $5 = (($2) + (($4*12)|0)|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $6 = ($4|0)==(0); //@line 59 "/checkout/src/libcore/ptr.rs"
 if (!($6)) {
  $_10$1$i1$i$i = $2;
  while(1) {
   $7 = ((($_10$1$i1$i$i)) + 12|0); //@line 59 "/checkout/src/libcore/ptr.rs"
   $8 = ((($_10$1$i1$i$i)) + 4|0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
   $9 = HEAP32[$8>>2]|0; //@line 225 "/checkout/src/liballoc/raw_vec.rs"
   $10 = ($9|0)==(0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
   if (!($10)) {
    $12 = HEAP32[$_10$1$i1$i$i>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
    ___rust_dealloc($12,$9,1); //@line 104 "/checkout/src/liballoc/heap.rs"
   }
   $11 = ($7|0)==($5|0); //@line 59 "/checkout/src/libcore/ptr.rs"
   if ($11) {
    break;
   } else {
    $_10$1$i1$i$i = $7;
   }
  }
 }
 $13 = ((($0)) + 4|0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $14 = HEAP32[$13>>2]|0; //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $15 = ($14|0)==(0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 if (!($15)) {
  $16 = ($14*12)|0; //@line 232 "/checkout/src/liballoc/raw_vec.rs"
  $17 = HEAP32[$0>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
  ___rust_dealloc($17,$16,4); //@line 104 "/checkout/src/liballoc/heap.rs"
 }
 $18 = HEAP32[9634]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 ___rust_dealloc($18,12,4); //@line 104 "/checkout/src/liballoc/heap.rs"
 HEAP32[9634] = 0; //@line 97 "/checkout/src/libstd/sys/unix/args.rs"
 (_pthread_mutex_unlock((38540|0))|0); //@line 72 "/checkout/src/libstd/sys/unix/mutex.rs"
 return; //@line 26 "/checkout/src/libstd/sys/unix/args.rs"
}
function __ZN4core3ptr13drop_in_place17h3d1ff7f844ce51efE_llvm_2B2D1DAC($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($arg0)) + 8|0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $1 = HEAP32[$0>>2]|0; //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $2 = ($1|0)==(0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 if ($2) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 $3 = ((($arg0)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $4 = HEAP32[$3>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 ___rust_dealloc($4,$1,1); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core6result13unwrap_failed17h6c499c654b178840E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_10 = 0, $_3 = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$4$0$$sroa_idx2$i = 0, $error = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $error = sp + 48|0;
 $_10 = sp + 32|0;
 $_3 = sp + 8|0;
 $msg = sp;
 HEAP32[$msg>>2] = $0;
 $2 = ((($msg)) + 4|0);
 HEAP32[$2>>2] = $1;
 HEAP32[$_10>>2] = $msg; //@line 916 "/checkout/src/libcore/result.rs"
 $3 = ((($_10)) + 4|0); //@line 916 "/checkout/src/libcore/result.rs"
 HEAP32[$3>>2] = 400; //@line 916 "/checkout/src/libcore/result.rs"
 $4 = ((($_10)) + 8|0); //@line 916 "/checkout/src/libcore/result.rs"
 HEAP32[$4>>2] = $error; //@line 916 "/checkout/src/libcore/result.rs"
 $5 = ((($_10)) + 12|0); //@line 916 "/checkout/src/libcore/result.rs"
 HEAP32[$5>>2] = 445; //@line 916 "/checkout/src/libcore/result.rs"
 HEAP32[$_3>>2] = 9332; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $6 = ((($_3)) + 4|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$6>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $_5$sroa$0$0$$sroa_idx$i = ((($_3)) + 8|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 12044; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $_5$sroa$4$0$$sroa_idx2$i = ((($_3)) + 12|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5$sroa$4$0$$sroa_idx2$i>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $7 = ((($_3)) + 16|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$7>>2] = $_10; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $8 = ((($_3)) + 20|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$8>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 __ZN4core9panicking9panic_fmt17hff08f8fc41769480E($_3,9348); //@line 23 "/checkout/src/libcore/macros.rs"
 // unreachable;
}
function __ZN4core3ptr13drop_in_place17h919e3b70606acf7cE_llvm_2B2D1DAC($arg0) {
 $arg0 = $arg0|0;
 var $$pre$i$i$i = 0, $$pre12$i1$i$i = 0, $$sink$in$phi$trans$insert$i2$i$i = 0, $$sink$in$pre$phi$i$i$iZZZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $switch$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0; //@line 456 "/checkout/src/libstd/sync/mutex.rs"
 $1 = ((($0)) + 4|0); //@line 456 "/checkout/src/libstd/sync/mutex.rs"
 $2 = ((($arg0)) + 4|0); //@line 456 "/checkout/src/libstd/sync/mutex.rs"
 $3 = HEAP8[$2>>0]|0; //@line 46 "/checkout/src/libstd/sys_common/poison.rs"
 $4 = ($3<<24>>24)==(0); //@line 46 "/checkout/src/libstd/sys_common/poison.rs"
 if ($4) {
  $5 = HEAP32[2018]|0; //@line 374 "/checkout/src/libstd/thread/local.rs"
  $6 = (FUNCTION_TABLE_i[$5 & 511]()|0); //@line 374 "/checkout/src/libstd/thread/local.rs"
  $7 = ($6|0)==(0|0); //@line 374 "/checkout/src/libstd/thread/local.rs"
  if ($7) {
   __ZN4core6result13unwrap_failed17h6c499c654b178840E(21076,57); //@line 809 "/checkout/src/libcore/result.rs"
   // unreachable;
  }
  $8 = HEAP32[$6>>2]|0; //@line 378 "/checkout/src/libstd/thread/local.rs"
  $switch$i$i$i = ($8|0)==(1); //@line 378 "/checkout/src/libstd/thread/local.rs"
  if ($switch$i$i$i) {
   $$sink$in$phi$trans$insert$i2$i$i = ((($6)) + 4|0);
   $$pre$i$i$i = HEAP32[$$sink$in$phi$trans$insert$i2$i$i>>2]|0;
   $$sink$in$pre$phi$i$i$iZZZ2D = $$sink$in$phi$trans$insert$i2$i$i;$15 = $$pre$i$i$i;
  } else {
   $9 = HEAP32[(8076)>>2]|0; //@line 295 "/checkout/src/libstd/thread/local.rs"
   $10 = (FUNCTION_TABLE_i[$9 & 511]()|0); //@line 295 "/checkout/src/libstd/thread/local.rs"
   $11 = $6; //@line 239 "/checkout/src/libcore/ptr.rs"
   $12 = $11; //@line 239 "/checkout/src/libcore/ptr.rs"
   HEAP32[$12>>2] = 1; //@line 239 "/checkout/src/libcore/ptr.rs"
   $13 = (($11) + 4)|0; //@line 239 "/checkout/src/libcore/ptr.rs"
   $14 = $13; //@line 239 "/checkout/src/libcore/ptr.rs"
   HEAP32[$14>>2] = $10; //@line 239 "/checkout/src/libcore/ptr.rs"
   $$pre12$i1$i$i = ((($6)) + 4|0);
   $$sink$in$pre$phi$i$i$iZZZ2D = $$pre12$i1$i$i;$15 = $10;
  }
  HEAP8[$$sink$in$pre$phi$i$i$iZZZ2D>>0]=$15&255;HEAP8[$$sink$in$pre$phi$i$i$iZZZ2D+1>>0]=($15>>8)&255;HEAP8[$$sink$in$pre$phi$i$i$iZZZ2D+2>>0]=($15>>16)&255;HEAP8[$$sink$in$pre$phi$i$i$iZZZ2D+3>>0]=$15>>24; //@line 239 "/checkout/src/libcore/ptr.rs"
  $16 = ($15|0)==(0); //@line 487 "/checkout/src/libstd/panicking.rs"
  if (!($16)) {
   HEAP8[$1>>0] = 1; //@line 1479 "/checkout/src/libcore/sync/atomic.rs"
  }
 }
 $17 = HEAP32[$arg0>>2]|0; //@line 457 "/checkout/src/libstd/sync/mutex.rs"
 $18 = HEAP32[$17>>2]|0; //@line 457 "/checkout/src/libstd/sync/mutex.rs"
 (_pthread_mutex_unlock(($18|0))|0); //@line 72 "/checkout/src/libstd/sys/unix/mutex.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core6result13unwrap_failed17h237618fa9b803e20E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_10 = 0, $_3 = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$4$0$$sroa_idx2$i = 0, $error = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $error = sp + 48|0;
 $_10 = sp + 32|0;
 $_3 = sp + 8|0;
 $msg = sp;
 HEAP32[$msg>>2] = $0;
 $2 = ((($msg)) + 4|0);
 HEAP32[$2>>2] = $1;
 HEAP32[$_10>>2] = $msg; //@line 916 "/checkout/src/libcore/result.rs"
 $3 = ((($_10)) + 4|0); //@line 916 "/checkout/src/libcore/result.rs"
 HEAP32[$3>>2] = 400; //@line 916 "/checkout/src/libcore/result.rs"
 $4 = ((($_10)) + 8|0); //@line 916 "/checkout/src/libcore/result.rs"
 HEAP32[$4>>2] = $error; //@line 916 "/checkout/src/libcore/result.rs"
 $5 = ((($_10)) + 12|0); //@line 916 "/checkout/src/libcore/result.rs"
 HEAP32[$5>>2] = 446; //@line 916 "/checkout/src/libcore/result.rs"
 HEAP32[$_3>>2] = 9332; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $6 = ((($_3)) + 4|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$6>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $_5$sroa$0$0$$sroa_idx$i = ((($_3)) + 8|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 12044; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $_5$sroa$4$0$$sroa_idx2$i = ((($_3)) + 12|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5$sroa$4$0$$sroa_idx2$i>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $7 = ((($_3)) + 16|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$7>>2] = $_10; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $8 = ((($_3)) + 20|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$8>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 __ZN4core9panicking9panic_fmt17hff08f8fc41769480E($_3,9348); //@line 23 "/checkout/src/libcore/macros.rs"
 // unreachable;
}
function __ZN4core6result13unwrap_failed17h4a2ba668c6e5492cE($0,$1,$error) {
 $0 = $0|0;
 $1 = $1|0;
 $error = $error|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_3 = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$4$0$$sroa_idx2$i = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_10 = sp + 32|0;
 $_3 = sp + 8|0;
 $msg = sp;
 HEAP32[$msg>>2] = $0;
 $2 = ((($msg)) + 4|0);
 HEAP32[$2>>2] = $1;
 HEAP32[$_10>>2] = $msg; //@line 916 "/checkout/src/libcore/result.rs"
 $3 = ((($_10)) + 4|0); //@line 916 "/checkout/src/libcore/result.rs"
 HEAP32[$3>>2] = 400; //@line 916 "/checkout/src/libcore/result.rs"
 $4 = ((($_10)) + 8|0); //@line 916 "/checkout/src/libcore/result.rs"
 HEAP32[$4>>2] = $error; //@line 916 "/checkout/src/libcore/result.rs"
 $5 = ((($_10)) + 12|0); //@line 916 "/checkout/src/libcore/result.rs"
 HEAP32[$5>>2] = 447; //@line 916 "/checkout/src/libcore/result.rs"
 HEAP32[$_3>>2] = 9332; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $6 = ((($_3)) + 4|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$6>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $_5$sroa$0$0$$sroa_idx$i = ((($_3)) + 8|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 12044; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $_5$sroa$4$0$$sroa_idx2$i = ((($_3)) + 12|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5$sroa$4$0$$sroa_idx2$i>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $7 = ((($_3)) + 16|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$7>>2] = $_10; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $8 = ((($_3)) + 20|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$8>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 __THREW__ = 0;
 invoke_vii(448,($_3|0),(9348|0)); //@line 23 "/checkout/src/libcore/macros.rs"
 $9 = __THREW__; __THREW__ = 0;
 $10 = ___cxa_find_matching_catch_2()|0;
 $11 = tempRet0;
 __ZN4core3ptr13drop_in_place17h3d1ff7f844ce51efE_llvm_2B2D1DAC($error); //@line 917 "/checkout/src/libcore/result.rs"
 ___resumeException($10|0);
 // unreachable;
}
function __ZN4core6result13unwrap_failed17h5d6248dc8d3b1c92E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_10 = 0, $_3 = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$4$0$$sroa_idx2$i = 0, $error = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $error = sp + 48|0;
 $_10 = sp + 32|0;
 $_3 = sp + 8|0;
 $msg = sp;
 HEAP32[$msg>>2] = $0;
 $2 = ((($msg)) + 4|0);
 HEAP32[$2>>2] = $1;
 HEAP32[$_10>>2] = $msg; //@line 916 "/checkout/src/libcore/result.rs"
 $3 = ((($_10)) + 4|0); //@line 916 "/checkout/src/libcore/result.rs"
 HEAP32[$3>>2] = 400; //@line 916 "/checkout/src/libcore/result.rs"
 $4 = ((($_10)) + 8|0); //@line 916 "/checkout/src/libcore/result.rs"
 HEAP32[$4>>2] = $error; //@line 916 "/checkout/src/libcore/result.rs"
 $5 = ((($_10)) + 12|0); //@line 916 "/checkout/src/libcore/result.rs"
 HEAP32[$5>>2] = 449; //@line 916 "/checkout/src/libcore/result.rs"
 HEAP32[$_3>>2] = 9332; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $6 = ((($_3)) + 4|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$6>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $_5$sroa$0$0$$sroa_idx$i = ((($_3)) + 8|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 12044; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $_5$sroa$4$0$$sroa_idx2$i = ((($_3)) + 12|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5$sroa$4$0$$sroa_idx2$i>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $7 = ((($_3)) + 16|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$7>>2] = $_10; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $8 = ((($_3)) + 20|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$8>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 __ZN4core9panicking9panic_fmt17hff08f8fc41769480E($_3,9348); //@line 23 "/checkout/src/libcore/macros.rs"
 // unreachable;
}
function __ZN4core6result13unwrap_failed17haaf56fe186515641E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_3 = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$4$0$$sroa_idx2$i = 0, $error = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_10 = sp + 40|0;
 $_3 = sp + 16|0;
 $error = sp + 8|0;
 $msg = sp;
 HEAP32[$msg>>2] = $0;
 $4 = ((($msg)) + 4|0);
 HEAP32[$4>>2] = $1;
 HEAP32[$error>>2] = $2;
 $5 = ((($error)) + 4|0);
 $6 = $3&1;
 HEAP8[$5>>0] = $6;
 HEAP32[$_10>>2] = $msg; //@line 916 "/checkout/src/libcore/result.rs"
 $7 = ((($_10)) + 4|0); //@line 916 "/checkout/src/libcore/result.rs"
 HEAP32[$7>>2] = 400; //@line 916 "/checkout/src/libcore/result.rs"
 $8 = ((($_10)) + 8|0); //@line 916 "/checkout/src/libcore/result.rs"
 HEAP32[$8>>2] = $error; //@line 916 "/checkout/src/libcore/result.rs"
 $9 = ((($_10)) + 12|0); //@line 916 "/checkout/src/libcore/result.rs"
 HEAP32[$9>>2] = 450; //@line 916 "/checkout/src/libcore/result.rs"
 HEAP32[$_3>>2] = 9332; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $10 = ((($_3)) + 4|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$10>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $_5$sroa$0$0$$sroa_idx$i = ((($_3)) + 8|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 12044; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $_5$sroa$4$0$$sroa_idx2$i = ((($_3)) + 12|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5$sroa$4$0$$sroa_idx2$i>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $11 = ((($_3)) + 16|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$11>>2] = $_10; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $12 = ((($_3)) + 20|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$12>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 __THREW__ = 0;
 invoke_vii(448,($_3|0),(9348|0)); //@line 23 "/checkout/src/libcore/macros.rs"
 $13 = __THREW__; __THREW__ = 0;
 $14 = ___cxa_find_matching_catch_2()|0;
 $15 = tempRet0;
 __ZN4core3ptr13drop_in_place17h919e3b70606acf7cE_llvm_2B2D1DAC($error); //@line 917 "/checkout/src/libcore/result.rs"
 ___resumeException($14|0);
 // unreachable;
}
function __ZN4core6result13unwrap_failed17hbfacf1b84c01e45fE($0,$1,$error) {
 $0 = $0|0;
 $1 = $1|0;
 $error = $error|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_10 = 0, $_3 = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$4$0$$sroa_idx2$i = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_10 = sp + 32|0;
 $_3 = sp + 8|0;
 $msg = sp;
 HEAP32[$msg>>2] = $0;
 $2 = ((($msg)) + 4|0);
 HEAP32[$2>>2] = $1;
 HEAP32[$_10>>2] = $msg; //@line 916 "/checkout/src/libcore/result.rs"
 $3 = ((($_10)) + 4|0); //@line 916 "/checkout/src/libcore/result.rs"
 HEAP32[$3>>2] = 400; //@line 916 "/checkout/src/libcore/result.rs"
 $4 = ((($_10)) + 8|0); //@line 916 "/checkout/src/libcore/result.rs"
 HEAP32[$4>>2] = $error; //@line 916 "/checkout/src/libcore/result.rs"
 $5 = ((($_10)) + 12|0); //@line 916 "/checkout/src/libcore/result.rs"
 HEAP32[$5>>2] = 451; //@line 916 "/checkout/src/libcore/result.rs"
 HEAP32[$_3>>2] = 9332; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $6 = ((($_3)) + 4|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$6>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $_5$sroa$0$0$$sroa_idx$i = ((($_3)) + 8|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 12044; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $_5$sroa$4$0$$sroa_idx2$i = ((($_3)) + 12|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5$sroa$4$0$$sroa_idx2$i>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $7 = ((($_3)) + 16|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$7>>2] = $_10; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $8 = ((($_3)) + 20|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$8>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 __ZN4core9panicking9panic_fmt17hff08f8fc41769480E($_3,9348); //@line 23 "/checkout/src/libcore/macros.rs"
 // unreachable;
}
function __ZN4core6result13unwrap_failed17hd5ce2772ab9af5feE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_3 = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$4$0$$sroa_idx2$i = 0, $error = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_10 = sp + 32|0;
 $_3 = sp + 8|0;
 $error = sp + 48|0;
 $msg = sp;
 HEAP32[$msg>>2] = $0;
 $3 = ((($msg)) + 4|0);
 HEAP32[$3>>2] = $1;
 HEAP8[$error>>0] = $2;
 HEAP32[$_10>>2] = $msg; //@line 916 "/checkout/src/libcore/result.rs"
 $4 = ((($_10)) + 4|0); //@line 916 "/checkout/src/libcore/result.rs"
 HEAP32[$4>>2] = 400; //@line 916 "/checkout/src/libcore/result.rs"
 $5 = ((($_10)) + 8|0); //@line 916 "/checkout/src/libcore/result.rs"
 HEAP32[$5>>2] = $error; //@line 916 "/checkout/src/libcore/result.rs"
 $6 = ((($_10)) + 12|0); //@line 916 "/checkout/src/libcore/result.rs"
 HEAP32[$6>>2] = 452; //@line 916 "/checkout/src/libcore/result.rs"
 HEAP32[$_3>>2] = 9332; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $7 = ((($_3)) + 4|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$7>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $_5$sroa$0$0$$sroa_idx$i = ((($_3)) + 8|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 12044; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $_5$sroa$4$0$$sroa_idx2$i = ((($_3)) + 12|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5$sroa$4$0$$sroa_idx2$i>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $8 = ((($_3)) + 16|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$8>>2] = $_10; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $9 = ((($_3)) + 20|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$9>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 __ZN4core9panicking9panic_fmt17hff08f8fc41769480E($_3,9348); //@line 23 "/checkout/src/libcore/macros.rs"
 // unreachable;
}
function __ZN4core3ptr13drop_in_place17h4db32639b770ce6bE($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr13drop_in_place17hca5fbe08253c01adE($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr13drop_in_place17h52cca3c08630257aE($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr13drop_in_place17he028ebbf82a79ee5E($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($arg0)) + 4|0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $1 = HEAP32[$0>>2]|0; //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $2 = ($1|0)==(0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 if ($2) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 $3 = HEAP32[$arg0>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 ___rust_dealloc($3,$1,1); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN281__LT_std__error___LT_impl_u20_core__convert__From_LT_alloc__string__String_GT__u20_for_u20_alloc__boxed__Box_LT_std__error__Error_u20__u2b__u20_core__marker__Send_u20__u2b__u20_core__marker__Sync_u20__u2b__u20__u27_static_GT__GT___from__StringError_u20_as_u20_std__error__Error_GT_11description17h786925ca32da1049E($retVal,$self) {
 $retVal = $retVal|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 $1 = ((($self)) + 8|0); //@line 1690 "/checkout/src/liballoc/vec.rs"
 $2 = HEAP32[$1>>2]|0; //@line 1690 "/checkout/src/liballoc/vec.rs"
 HEAP32[$retVal>>2] = $0; //@line 187 "/checkout/src/libstd/error.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 187 "/checkout/src/libstd/error.rs"
 HEAP32[$retVal$index1>>2] = $2; //@line 187 "/checkout/src/libstd/error.rs"
 return; //@line 187 "/checkout/src/libstd/error.rs"
}
function __ZN3std5error5Error5cause17h2e93e9fdd9d452eaE($0,$self) {
 $0 = $0|0;
 $self = $self|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0; //@line 154 "/checkout/src/libstd/error.rs"
 return; //@line 154 "/checkout/src/libstd/error.rs"
}
function __ZN3std5error5Error7type_id17hb7daff084262935aE($self) {
 $self = $self|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 tempRet0 = (-818835886); //@line 163 "/checkout/src/libstd/error.rs"
 return 357726248; //@line 163 "/checkout/src/libstd/error.rs"
}
function __ZN282__LT_std__error___LT_impl_u20_core__convert__From_LT_alloc__string__String_GT__u20_for_u20_alloc__boxed__Box_LT_std__error__Error_u20__u2b__u20_core__marker__Send_u20__u2b__u20_core__marker__Sync_u20__u2b__u20__u27_static_GT__GT___from__StringError_u20_as_u20_core__fmt__Display_GT_3fmt17h37c04ca12f17f2b2E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 $1 = ((($self)) + 8|0); //@line 1690 "/checkout/src/liballoc/vec.rs"
 $2 = HEAP32[$1>>2]|0; //@line 1690 "/checkout/src/liballoc/vec.rs"
 $3 = (__ZN42__LT_str_u20_as_u20_core__fmt__Display_GT_3fmt17hd64e49219890df95E($0,$2,$f)|0); //@line 1762 "/checkout/src/liballoc/string.rs"
 return ($3|0); //@line 193 "/checkout/src/libstd/error.rs"
}
function __ZN280__LT_std__error___LT_impl_u20_core__convert__From_LT_alloc__string__String_GT__u20_for_u20_alloc__boxed__Box_LT_std__error__Error_u20__u2b__u20_core__marker__Send_u20__u2b__u20_core__marker__Sync_u20__u2b__u20__u27_static_GT__GT___from__StringError_u20_as_u20_core__fmt__Debug_GT_3fmt17h263789a3eb6f5e6cE($self,$__arg_0) {
 $self = $self|0;
 $__arg_0 = $__arg_0|0;
 var $0 = 0, $_13 = 0, $builder = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_13 = sp + 12|0;
 $builder = sp;
 __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder,$__arg_0,24059,11); //@line 183 "/checkout/src/libstd/error.rs"
 HEAP32[$_13>>2] = $self; //@line 184 "/checkout/src/libstd/error.rs"
 (__ZN4core3fmt8builders10DebugTuple5field17hf986ac1f5cbaa58cE($builder,$_13,9476)|0); //@line 183 "/checkout/src/libstd/error.rs"
 $0 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder)|0); //@line 183 "/checkout/src/libstd/error.rs"
 STACKTOP = sp;return ($0|0); //@line 183 "/checkout/src/libstd/error.rs"
}
function __ZN4core3ptr13drop_in_place17he31d89decadc9446E_1555($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr13drop_in_place17h5d8910a8677d354cE($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN3std4sync4once4Once9call_once28__u7b__u7b_closure_u7d__u7d_17hd8edbcb9bf7675e1E($arg0,$arg1) {
 $arg0 = $arg0|0;
 $arg1 = $arg1|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0; //@line 227 "/checkout/src/libstd/sync/once.rs"
 $1 = HEAP8[$0>>0]|0; //@line 238 "/checkout/src/libcore/ptr.rs"
 HEAP8[$0>>0] = 0; //@line 239 "/checkout/src/libcore/ptr.rs"
 $2 = ($1<<24>>24)==(0); //@line 691 "/checkout/src/libcore/mem.rs"
 if ($2) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(9528); //@line 20 "/checkout/src/libcore/macros.rs"
  // unreachable;
 } else {
  __ZN3std3sys4unix4args7cleanup17h6f66480437a2b984E(); //@line 111 "/checkout/src/libstd/sys_common/mod.rs"
  __ZN3std10sys_common11at_exit_imp7cleanup17hb4394be0afc856b0E(); //@line 113 "/checkout/src/libstd/sys_common/mod.rs"
  return; //@line 227 "/checkout/src/libstd/sync/once.rs"
 }
}
function __ZN4core3ops8function6FnOnce9call_once17h740dd06527719856E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0; //@line 238 "/checkout/src/libcore/ptr.rs"
 HEAP8[$0>>0] = 0; //@line 239 "/checkout/src/libcore/ptr.rs"
 $3 = ($2<<24>>24)==(0); //@line 691 "/checkout/src/libcore/mem.rs"
 if ($3) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(9528); //@line 20 "/checkout/src/libcore/macros.rs"
  // unreachable;
 } else {
  __ZN3std3sys4unix4args7cleanup17h6f66480437a2b984E(); //@line 111 "/checkout/src/libstd/sys_common/mod.rs"
  __ZN3std10sys_common11at_exit_imp7cleanup17hb4394be0afc856b0E(); //@line 113 "/checkout/src/libstd/sys_common/mod.rs"
  return; //@line 223 "/checkout/src/libcore/ops/function.rs"
 }
}
function __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h6b99c066bc6eaea1E($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self>>2]|0; //@line 513 "/checkout/src/liballoc/arc.rs"
 $1 = ((($0)) + 16|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $2 = HEAP32[$1>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $3 = ($2|0)==(0|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 if (!($3)) {
  HEAP8[$2>>0] = 0; //@line 622 "/checkout/src/libstd/ffi/c_str.rs"
  $4 = ((($0)) + 20|0); //@line 59 "/checkout/src/libcore/ptr.rs"
  $5 = HEAP32[$4>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $6 = ($5|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
  if (!($6)) {
   $7 = HEAP32[$1>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
   ___rust_dealloc($7,$5,1); //@line 104 "/checkout/src/liballoc/heap.rs"
  }
 }
 $8 = ((($0)) + 28|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $9 = HEAP32[$8>>2]|0; //@line 381 "/checkout/src/libstd/sync/mutex.rs"
 (_pthread_mutex_destroy(($9|0))|0); //@line 82 "/checkout/src/libstd/sys/unix/mutex.rs"
 $10 = HEAP32[$8>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 ___rust_dealloc($10,28,4); //@line 104 "/checkout/src/liballoc/heap.rs"
 $11 = ((($0)) + 36|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $12 = HEAP32[$11>>2]|0; //@line 475 "/checkout/src/libstd/sync/condvar.rs"
 (_pthread_cond_destroy(($12|0))|0); //@line 173 "/checkout/src/libstd/sys/unix/condvar.rs"
 $13 = HEAP32[$11>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 ___rust_dealloc($13,48,4); //@line 104 "/checkout/src/liballoc/heap.rs"
 $14 = HEAP32[$self>>2]|0; //@line 2540 "/checkout/src/libcore/ptr.rs"
 $15 = ((($14)) + 4|0); //@line 519 "/checkout/src/liballoc/arc.rs"
 $16 = HEAP32[$15>>2]|0;HEAP32[$15>>2] = (($16-1)|0); //@line 1529 "/checkout/src/libcore/sync/atomic.rs"
 $17 = ($16|0)==(1); //@line 519 "/checkout/src/liballoc/arc.rs"
 if (!($17)) {
  return; //@line 523 "/checkout/src/liballoc/arc.rs"
 }
 /* fence */; //@line 1706 "/checkout/src/libcore/sync/atomic.rs"
 ___rust_dealloc($0,48,8); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 523 "/checkout/src/liballoc/arc.rs"
}
function __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17hcb148d3fb287149bE($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self>>2]|0; //@line 513 "/checkout/src/liballoc/arc.rs"
 $1 = ((($0)) + 8|0); //@line 517 "/checkout/src/liballoc/arc.rs"
 $2 = HEAP32[$1>>2]|0; //@line 112 "/checkout/src/libstd/sys_common/remutex.rs"
 (_pthread_mutex_destroy(($2|0))|0); //@line 137 "/checkout/src/libstd/sys/unix/mutex.rs"
 $3 = HEAP32[$1>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 ___rust_dealloc($3,28,4); //@line 104 "/checkout/src/liballoc/heap.rs"
 $4 = ((($0)) + 16|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 __THREW__ = 0;
 invoke_vi(453,($4|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  __ZN4core3ptr13drop_in_place17hc7d659014c0d680dE_llvm_DBC6AE32($4); //@line 59 "/checkout/src/libcore/ptr.rs"
  ___resumeException($7|0);
  // unreachable;
 }
 $9 = ((($0)) + 20|0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $10 = HEAP32[$9>>2]|0; //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $11 = ($10|0)==(0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 if (!($11)) {
  $12 = HEAP32[$4>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
  ___rust_dealloc($12,$10,1); //@line 104 "/checkout/src/liballoc/heap.rs"
 }
 $13 = HEAP32[$self>>2]|0; //@line 2540 "/checkout/src/libcore/ptr.rs"
 $14 = ((($13)) + 4|0); //@line 519 "/checkout/src/liballoc/arc.rs"
 $15 = HEAP32[$14>>2]|0;HEAP32[$14>>2] = (($15-1)|0); //@line 1529 "/checkout/src/libcore/sync/atomic.rs"
 $16 = ($15|0)==(1); //@line 519 "/checkout/src/liballoc/arc.rs"
 if (!($16)) {
  return; //@line 523 "/checkout/src/liballoc/arc.rs"
 }
 /* fence */; //@line 1706 "/checkout/src/libcore/sync/atomic.rs"
 ___rust_dealloc($0,40,4); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 523 "/checkout/src/liballoc/arc.rs"
}
function __ZN4core3ptr13drop_in_place17hc7d659014c0d680dE_llvm_DBC6AE32($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($arg0)) + 4|0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $1 = HEAP32[$0>>2]|0; //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $2 = ($1|0)==(0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 if ($2) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 $3 = HEAP32[$arg0>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 ___rust_dealloc($3,$1,1); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3fmt5Write10write_char17h8a01fa0e9f290dbeE($self,$c) {
 $self = $self|0;
 $c = $c|0;
 var $$sink$i = 0, $$sink$sink$i = 0, $$sink11$i = 0, $$sink14$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$off034$i = 0, $_10 = 0, $_3$i = 0, $len$1$i = 0, $len$2$i = 0, $not$$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_3$i = sp;
 $_10 = sp + 8|0;
 HEAP32[$_10>>2] = 0; //@line 177 "/checkout/src/libcore/fmt/mod.rs"
 $0 = ($c>>>0)<(128); //@line 485 "/checkout/src/libcore/char.rs"
 if ($0) {
  $1 = $c&255; //@line 486 "/checkout/src/libcore/char.rs"
  HEAP8[$_10>>0] = $1; //@line 486 "/checkout/src/libcore/char.rs"
  $len$2$i = 1;
 } else {
  $2 = ($c>>>0)<(2048); //@line 488 "/checkout/src/libcore/char.rs"
  do {
   if ($2) {
    $$sink$i = 0;$$sink$sink$i = 1;$$sink11$i = -64;$$sink14$i = 31;$len$1$i = 2;
   } else {
    $3 = ($c>>>0)<(65536); //@line 492 "/checkout/src/libcore/char.rs"
    if ($3) {
     $4 = $c >>> 12; //@line 493 "/checkout/src/libcore/char.rs"
     $5 = $4 & 15; //@line 493 "/checkout/src/libcore/char.rs"
     $6 = $5&255; //@line 493 "/checkout/src/libcore/char.rs"
     $7 = $6 | -32; //@line 493 "/checkout/src/libcore/char.rs"
     HEAP8[$_10>>0] = $7; //@line 493 "/checkout/src/libcore/char.rs"
     $$sink$i = 1;$$sink$sink$i = 2;$$sink11$i = -128;$$sink14$i = 63;$len$1$i = 3;
     break;
    } else {
     $8 = $c >>> 18; //@line 498 "/checkout/src/libcore/char.rs"
     $9 = $8&255; //@line 498 "/checkout/src/libcore/char.rs"
     $10 = $9 | -16; //@line 498 "/checkout/src/libcore/char.rs"
     HEAP8[$_10>>0] = $10; //@line 498 "/checkout/src/libcore/char.rs"
     $11 = $c >>> 12; //@line 499 "/checkout/src/libcore/char.rs"
     $12 = $11 & 63; //@line 499 "/checkout/src/libcore/char.rs"
     $13 = $12&255; //@line 499 "/checkout/src/libcore/char.rs"
     $14 = ((($_10)) + 1|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
     $15 = $13 | -128; //@line 499 "/checkout/src/libcore/char.rs"
     HEAP8[$14>>0] = $15; //@line 499 "/checkout/src/libcore/char.rs"
     $$sink$i = 2;$$sink$sink$i = 3;$$sink11$i = -128;$$sink14$i = 63;$len$1$i = 4;
     break;
    }
   }
  } while(0);
  $16 = $c >>> 6;
  $17 = $$sink14$i & $16;
  $18 = $17&255;
  $19 = (($_10) + ($$sink$i)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $20 = $18 | $$sink11$i;
  HEAP8[$19>>0] = $20;
  $21 = $c & 63;
  $22 = $21&255;
  $23 = (($_10) + ($$sink$sink$i)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $24 = $22 | -128;
  HEAP8[$23>>0] = $24;
  $len$2$i = $len$1$i;
 }
 $25 = HEAP32[$self>>2]|0; //@line 1151 "/checkout/src/libstd/io/mod.rs"
 __ZN3std2io5Write9write_all17h8167ba58fb9df2caE($_3$i,$25,$_10,$len$2$i); //@line 1151 "/checkout/src/libstd/io/mod.rs"
 $26 = HEAP8[$_3$i>>0]|0; //@line 1152 "/checkout/src/libstd/io/mod.rs"
 $27 = ($26<<24>>24)==(3); //@line 1152 "/checkout/src/libstd/io/mod.rs"
 if ($27) {
  $_0$0$off034$i = 0;
  STACKTOP = sp;return ($_0$0$off034$i|0); //@line 178 "/checkout/src/libcore/fmt/mod.rs"
 }
 $29 = $_3$i; //@line 1153 "/checkout/src/libstd/io/mod.rs"
 $30 = $29; //@line 1153 "/checkout/src/libstd/io/mod.rs"
 $31 = HEAP32[$30>>2]|0; //@line 1153 "/checkout/src/libstd/io/mod.rs"
 $32 = (($29) + 4)|0; //@line 1153 "/checkout/src/libstd/io/mod.rs"
 $33 = $32; //@line 1153 "/checkout/src/libstd/io/mod.rs"
 $34 = HEAP32[$33>>2]|0; //@line 1153 "/checkout/src/libstd/io/mod.rs"
 $35 = ((($self)) + 4|0); //@line 1154 "/checkout/src/libstd/io/mod.rs"
 $36 = HEAP8[$35>>0]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $37 = ($36<<24>>24)==(3); //@line 59 "/checkout/src/libcore/ptr.rs"
 $38 = $31&255; //@line 59 "/checkout/src/libcore/ptr.rs"
 if (!($37)) {
  __THREW__ = 0;
  invoke_vi(454,($35|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
  $39 = __THREW__; __THREW__ = 0;
  $40 = $39&1;
  if ($40) {
   $28 = ___cxa_find_matching_catch_2()|0;
   $45 = tempRet0;
   $46 = $35; //@line 1154 "/checkout/src/libstd/io/mod.rs"
   $47 = $46; //@line 1154 "/checkout/src/libstd/io/mod.rs"
   HEAP32[$47>>2] = $31; //@line 1154 "/checkout/src/libstd/io/mod.rs"
   $48 = (($46) + 4)|0; //@line 1154 "/checkout/src/libstd/io/mod.rs"
   $49 = $48; //@line 1154 "/checkout/src/libstd/io/mod.rs"
   HEAP32[$49>>2] = $34; //@line 1154 "/checkout/src/libstd/io/mod.rs"
   $not$$i = ($38<<24>>24)==(3); //@line 1158 "/checkout/src/libstd/io/mod.rs"
   if (!($not$$i)) {
    ___resumeException($28|0);
    // unreachable;
   }
   __ZN4core3ptr13drop_in_place17h7099c24ba8976e54E_llvm_DBC6AE32($_3$i); //@line 1158 "/checkout/src/libstd/io/mod.rs"
   ___resumeException($28|0);
   // unreachable;
  }
 }
 $41 = $35; //@line 1154 "/checkout/src/libstd/io/mod.rs"
 $42 = $41; //@line 1154 "/checkout/src/libstd/io/mod.rs"
 HEAP32[$42>>2] = $31; //@line 1154 "/checkout/src/libstd/io/mod.rs"
 $43 = (($41) + 4)|0; //@line 1154 "/checkout/src/libstd/io/mod.rs"
 $44 = $43; //@line 1154 "/checkout/src/libstd/io/mod.rs"
 HEAP32[$44>>2] = $34; //@line 1154 "/checkout/src/libstd/io/mod.rs"
 $_0$0$off034$i = 1;
 STACKTOP = sp;return ($_0$0$off034$i|0); //@line 178 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN4core3ptr13drop_in_place17hb434eb5d905d2ad2E_llvm_DBC6AE32($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $switch$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$arg0>>0]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $switch$i = ($0&255)<(2); //@line 59 "/checkout/src/libcore/ptr.rs"
 if ($switch$i) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 $1 = ((($arg0)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $2 = HEAP32[$1>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $3 = HEAP32[$2>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $4 = ((($2)) + 4|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 $5 = HEAP32[$4>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $6 = HEAP32[$5>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 __THREW__ = 0;
 invoke_vi($6|0,($3|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  $18 = HEAP32[$2>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $19 = HEAP32[$4>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  __ZN5alloc4heap8box_free17hb8be26a1f37cb671E_llvm_DBC6AE32($18,$19); //@line 59 "/checkout/src/libcore/ptr.rs"
  $20 = HEAP32[$1>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  __ZN5alloc4heap8box_free17h0833f2b89912900bE_llvm_DBC6AE32($20); //@line 59 "/checkout/src/libcore/ptr.rs"
  ___resumeException($16|0);
  // unreachable;
 }
 $9 = HEAP32[$4>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $10 = ((($9)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $11 = HEAP32[$10>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
 $12 = ($11|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
 if (!($12)) {
  $13 = HEAP32[$2>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
  $14 = ((($9)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
  $15 = HEAP32[$14>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
  ___rust_dealloc($13,$11,$15); //@line 104 "/checkout/src/liballoc/heap.rs"
 }
 $21 = HEAP32[$1>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 ___rust_dealloc($21,12,4); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr13drop_in_place17h7099c24ba8976e54E_llvm_DBC6AE32($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$arg0>>0]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $1 = ($0<<24>>24)==(3); //@line 59 "/checkout/src/libcore/ptr.rs"
 if ($1) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 __ZN4core3ptr13drop_in_place17hb434eb5d905d2ad2E_llvm_DBC6AE32($arg0); //@line 59 "/checkout/src/libcore/ptr.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN5alloc4heap8box_free17hb8be26a1f37cb671E_llvm_DBC6AE32($ptr$0,$ptr$1) {
 $ptr$0 = $ptr$0|0;
 $ptr$1 = $ptr$1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ptr$1)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $1 = HEAP32[$0>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
 $2 = ($1|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
 if ($2) {
  return; //@line 265 "/checkout/src/liballoc/heap.rs"
 }
 $3 = ((($ptr$1)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $4 = HEAP32[$3>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
 ___rust_dealloc($ptr$0,$1,$4); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 265 "/checkout/src/liballoc/heap.rs"
}
function __ZN5alloc4heap8box_free17h0833f2b89912900bE_llvm_DBC6AE32($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___rust_dealloc($ptr,12,4); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 265 "/checkout/src/liballoc/heap.rs"
}
function __ZN4core3fmt5Write10write_char17he7f5bfbab3a3636bE($self,$c) {
 $self = $self|0;
 $c = $c|0;
 var $$sink$i = 0, $$sink$sink$i = 0, $$sink11$i = 0, $$sink14$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$off034$i = 0, $_10 = 0, $_3$i = 0, $len$1$i = 0, $len$2$i = 0, $not$$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_3$i = sp;
 $_10 = sp + 8|0;
 HEAP32[$_10>>2] = 0; //@line 177 "/checkout/src/libcore/fmt/mod.rs"
 $0 = ($c>>>0)<(128); //@line 485 "/checkout/src/libcore/char.rs"
 if ($0) {
  $1 = $c&255; //@line 486 "/checkout/src/libcore/char.rs"
  HEAP8[$_10>>0] = $1; //@line 486 "/checkout/src/libcore/char.rs"
  $len$2$i = 1;
 } else {
  $2 = ($c>>>0)<(2048); //@line 488 "/checkout/src/libcore/char.rs"
  do {
   if ($2) {
    $$sink$i = 0;$$sink$sink$i = 1;$$sink11$i = -64;$$sink14$i = 31;$len$1$i = 2;
   } else {
    $3 = ($c>>>0)<(65536); //@line 492 "/checkout/src/libcore/char.rs"
    if ($3) {
     $4 = $c >>> 12; //@line 493 "/checkout/src/libcore/char.rs"
     $5 = $4 & 15; //@line 493 "/checkout/src/libcore/char.rs"
     $6 = $5&255; //@line 493 "/checkout/src/libcore/char.rs"
     $7 = $6 | -32; //@line 493 "/checkout/src/libcore/char.rs"
     HEAP8[$_10>>0] = $7; //@line 493 "/checkout/src/libcore/char.rs"
     $$sink$i = 1;$$sink$sink$i = 2;$$sink11$i = -128;$$sink14$i = 63;$len$1$i = 3;
     break;
    } else {
     $8 = $c >>> 18; //@line 498 "/checkout/src/libcore/char.rs"
     $9 = $8&255; //@line 498 "/checkout/src/libcore/char.rs"
     $10 = $9 | -16; //@line 498 "/checkout/src/libcore/char.rs"
     HEAP8[$_10>>0] = $10; //@line 498 "/checkout/src/libcore/char.rs"
     $11 = $c >>> 12; //@line 499 "/checkout/src/libcore/char.rs"
     $12 = $11 & 63; //@line 499 "/checkout/src/libcore/char.rs"
     $13 = $12&255; //@line 499 "/checkout/src/libcore/char.rs"
     $14 = ((($_10)) + 1|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
     $15 = $13 | -128; //@line 499 "/checkout/src/libcore/char.rs"
     HEAP8[$14>>0] = $15; //@line 499 "/checkout/src/libcore/char.rs"
     $$sink$i = 2;$$sink$sink$i = 3;$$sink11$i = -128;$$sink14$i = 63;$len$1$i = 4;
     break;
    }
   }
  } while(0);
  $16 = $c >>> 6;
  $17 = $$sink14$i & $16;
  $18 = $17&255;
  $19 = (($_10) + ($$sink$i)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $20 = $18 | $$sink11$i;
  HEAP8[$19>>0] = $20;
  $21 = $c & 63;
  $22 = $21&255;
  $23 = (($_10) + ($$sink$sink$i)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $24 = $22 | -128;
  HEAP8[$23>>0] = $24;
  $len$2$i = $len$1$i;
 }
 $25 = HEAP32[$self>>2]|0; //@line 1151 "/checkout/src/libstd/io/mod.rs"
 __ZN3std2io5Write9write_all17hc644b454b3f66eb7E($_3$i,$25,$_10,$len$2$i); //@line 1151 "/checkout/src/libstd/io/mod.rs"
 $26 = HEAP8[$_3$i>>0]|0; //@line 1152 "/checkout/src/libstd/io/mod.rs"
 $27 = ($26<<24>>24)==(3); //@line 1152 "/checkout/src/libstd/io/mod.rs"
 if ($27) {
  $_0$0$off034$i = 0;
  STACKTOP = sp;return ($_0$0$off034$i|0); //@line 178 "/checkout/src/libcore/fmt/mod.rs"
 }
 $29 = $_3$i; //@line 1153 "/checkout/src/libstd/io/mod.rs"
 $30 = $29; //@line 1153 "/checkout/src/libstd/io/mod.rs"
 $31 = HEAP32[$30>>2]|0; //@line 1153 "/checkout/src/libstd/io/mod.rs"
 $32 = (($29) + 4)|0; //@line 1153 "/checkout/src/libstd/io/mod.rs"
 $33 = $32; //@line 1153 "/checkout/src/libstd/io/mod.rs"
 $34 = HEAP32[$33>>2]|0; //@line 1153 "/checkout/src/libstd/io/mod.rs"
 $35 = ((($self)) + 4|0); //@line 1154 "/checkout/src/libstd/io/mod.rs"
 $36 = HEAP8[$35>>0]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $37 = ($36<<24>>24)==(3); //@line 59 "/checkout/src/libcore/ptr.rs"
 $38 = $31&255; //@line 59 "/checkout/src/libcore/ptr.rs"
 if (!($37)) {
  __THREW__ = 0;
  invoke_vi(454,($35|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
  $39 = __THREW__; __THREW__ = 0;
  $40 = $39&1;
  if ($40) {
   $28 = ___cxa_find_matching_catch_2()|0;
   $45 = tempRet0;
   $46 = $35; //@line 1154 "/checkout/src/libstd/io/mod.rs"
   $47 = $46; //@line 1154 "/checkout/src/libstd/io/mod.rs"
   HEAP32[$47>>2] = $31; //@line 1154 "/checkout/src/libstd/io/mod.rs"
   $48 = (($46) + 4)|0; //@line 1154 "/checkout/src/libstd/io/mod.rs"
   $49 = $48; //@line 1154 "/checkout/src/libstd/io/mod.rs"
   HEAP32[$49>>2] = $34; //@line 1154 "/checkout/src/libstd/io/mod.rs"
   $not$$i = ($38<<24>>24)==(3); //@line 1158 "/checkout/src/libstd/io/mod.rs"
   if (!($not$$i)) {
    ___resumeException($28|0);
    // unreachable;
   }
   __ZN4core3ptr13drop_in_place17h7099c24ba8976e54E_llvm_DBC6AE32($_3$i); //@line 1158 "/checkout/src/libstd/io/mod.rs"
   ___resumeException($28|0);
   // unreachable;
  }
 }
 $41 = $35; //@line 1154 "/checkout/src/libstd/io/mod.rs"
 $42 = $41; //@line 1154 "/checkout/src/libstd/io/mod.rs"
 HEAP32[$42>>2] = $31; //@line 1154 "/checkout/src/libstd/io/mod.rs"
 $43 = (($41) + 4)|0; //@line 1154 "/checkout/src/libstd/io/mod.rs"
 $44 = $43; //@line 1154 "/checkout/src/libstd/io/mod.rs"
 HEAP32[$44>>2] = $34; //@line 1154 "/checkout/src/libstd/io/mod.rs"
 $_0$0$off034$i = 1;
 STACKTOP = sp;return ($_0$0$off034$i|0); //@line 178 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN4core3fmt5Write9write_fmt17h4203fb7fb914f24aE($self,$args) {
 $self = $self|0;
 $args = $args|0;
 var $0 = 0, $_6 = 0, $_8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_8 = sp + 8|0;
 $_6 = sp;
 HEAP32[$_6>>2] = $self; //@line 223 "/checkout/src/libcore/fmt/mod.rs"
 ;HEAP32[$_8>>2]=HEAP32[$args>>2]|0;HEAP32[$_8+4>>2]=HEAP32[$args+4>>2]|0;HEAP32[$_8+8>>2]=HEAP32[$args+8>>2]|0;HEAP32[$_8+12>>2]=HEAP32[$args+12>>2]|0;HEAP32[$_8+16>>2]=HEAP32[$args+16>>2]|0;HEAP32[$_8+20>>2]=HEAP32[$args+20>>2]|0; //@line 223 "/checkout/src/libcore/fmt/mod.rs"
 $0 = (__ZN4core3fmt5write17h6c8dbcbe50728a23E($_6,9364,$_8)|0); //@line 223 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return ($0|0); //@line 224 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN4core3fmt5Write9write_fmt17hdef3dceabe5d17adE($self,$args) {
 $self = $self|0;
 $args = $args|0;
 var $0 = 0, $_6 = 0, $_8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_8 = sp + 8|0;
 $_6 = sp;
 HEAP32[$_6>>2] = $self; //@line 223 "/checkout/src/libcore/fmt/mod.rs"
 ;HEAP32[$_8>>2]=HEAP32[$args>>2]|0;HEAP32[$_8+4>>2]=HEAP32[$args+4>>2]|0;HEAP32[$_8+8>>2]=HEAP32[$args+8>>2]|0;HEAP32[$_8+12>>2]=HEAP32[$args+12>>2]|0;HEAP32[$_8+16>>2]=HEAP32[$args+16>>2]|0;HEAP32[$_8+20>>2]=HEAP32[$args+20>>2]|0; //@line 223 "/checkout/src/libcore/fmt/mod.rs"
 $0 = (__ZN4core3fmt5write17h6c8dbcbe50728a23E($_6,9388,$_8)|0); //@line 223 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return ($0|0); //@line 224 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN4core3ptr13drop_in_place17hab16597baac572fdE_llvm_DBC6AE32($arg0) {
 $arg0 = $arg0|0;
 var $$pre$i$i$i = 0, $$pre12$i1$i$i = 0, $$sink$in$phi$trans$insert$i2$i$i = 0, $$sink$in$pre$phi$i$i$iZZZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $switch$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0; //@line 456 "/checkout/src/libstd/sync/mutex.rs"
 $1 = ((($0)) + 4|0); //@line 456 "/checkout/src/libstd/sync/mutex.rs"
 $2 = ((($arg0)) + 4|0); //@line 456 "/checkout/src/libstd/sync/mutex.rs"
 $3 = HEAP8[$2>>0]|0; //@line 46 "/checkout/src/libstd/sys_common/poison.rs"
 $4 = ($3<<24>>24)==(0); //@line 46 "/checkout/src/libstd/sys_common/poison.rs"
 if ($4) {
  $5 = HEAP32[2018]|0; //@line 374 "/checkout/src/libstd/thread/local.rs"
  $6 = (FUNCTION_TABLE_i[$5 & 511]()|0); //@line 374 "/checkout/src/libstd/thread/local.rs"
  $7 = ($6|0)==(0|0); //@line 374 "/checkout/src/libstd/thread/local.rs"
  if ($7) {
   __ZN4core6result13unwrap_failed17h6c499c654b178840E(21076,57); //@line 809 "/checkout/src/libcore/result.rs"
   // unreachable;
  }
  $8 = HEAP32[$6>>2]|0; //@line 378 "/checkout/src/libstd/thread/local.rs"
  $switch$i$i$i = ($8|0)==(1); //@line 378 "/checkout/src/libstd/thread/local.rs"
  if ($switch$i$i$i) {
   $$sink$in$phi$trans$insert$i2$i$i = ((($6)) + 4|0);
   $$pre$i$i$i = HEAP32[$$sink$in$phi$trans$insert$i2$i$i>>2]|0;
   $$sink$in$pre$phi$i$i$iZZZ2D = $$sink$in$phi$trans$insert$i2$i$i;$15 = $$pre$i$i$i;
  } else {
   $9 = HEAP32[(8076)>>2]|0; //@line 295 "/checkout/src/libstd/thread/local.rs"
   $10 = (FUNCTION_TABLE_i[$9 & 511]()|0); //@line 295 "/checkout/src/libstd/thread/local.rs"
   $11 = $6; //@line 239 "/checkout/src/libcore/ptr.rs"
   $12 = $11; //@line 239 "/checkout/src/libcore/ptr.rs"
   HEAP32[$12>>2] = 1; //@line 239 "/checkout/src/libcore/ptr.rs"
   $13 = (($11) + 4)|0; //@line 239 "/checkout/src/libcore/ptr.rs"
   $14 = $13; //@line 239 "/checkout/src/libcore/ptr.rs"
   HEAP32[$14>>2] = $10; //@line 239 "/checkout/src/libcore/ptr.rs"
   $$pre12$i1$i$i = ((($6)) + 4|0);
   $$sink$in$pre$phi$i$i$iZZZ2D = $$pre12$i1$i$i;$15 = $10;
  }
  HEAP8[$$sink$in$pre$phi$i$i$iZZZ2D>>0]=$15&255;HEAP8[$$sink$in$pre$phi$i$i$iZZZ2D+1>>0]=($15>>8)&255;HEAP8[$$sink$in$pre$phi$i$i$iZZZ2D+2>>0]=($15>>16)&255;HEAP8[$$sink$in$pre$phi$i$i$iZZZ2D+3>>0]=$15>>24; //@line 239 "/checkout/src/libcore/ptr.rs"
  $16 = ($15|0)==(0); //@line 487 "/checkout/src/libstd/panicking.rs"
  if (!($16)) {
   HEAP8[$1>>0] = 1; //@line 1479 "/checkout/src/libcore/sync/atomic.rs"
  }
 }
 $17 = HEAP32[$arg0>>2]|0; //@line 457 "/checkout/src/libstd/sync/mutex.rs"
 $18 = HEAP32[$17>>2]|0; //@line 457 "/checkout/src/libstd/sync/mutex.rs"
 (_pthread_mutex_unlock(($18|0))|0); //@line 72 "/checkout/src/libstd/sys/unix/mutex.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr13drop_in_place17hd527af13dee23674E_llvm_DBC6AE32($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0; //@line 475 "/checkout/src/libstd/sync/condvar.rs"
 (_pthread_cond_destroy(($0|0))|0); //@line 173 "/checkout/src/libstd/sys/unix/condvar.rs"
 $1 = HEAP32[$arg0>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 ___rust_dealloc($1,48,4); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN94__LT_std__io__Write__write_fmt__Adaptor_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17hc580dfdea9cbcaefE($self,$s$0,$s$1) {
 $self = $self|0;
 $s$0 = $s$0|0;
 $s$1 = $s$1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$off034 = 0, $_3 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_3 = sp;
 $0 = HEAP32[$self>>2]|0; //@line 1151 "/checkout/src/libstd/io/mod.rs"
 __ZN3std2io5Write9write_all17h8167ba58fb9df2caE($_3,$0,$s$0,$s$1); //@line 1151 "/checkout/src/libstd/io/mod.rs"
 $1 = HEAP8[$_3>>0]|0; //@line 1152 "/checkout/src/libstd/io/mod.rs"
 $2 = ($1<<24>>24)==(3); //@line 1152 "/checkout/src/libstd/io/mod.rs"
 if ($2) {
  $_0$0$off034 = 0;
  STACKTOP = sp;return ($_0$0$off034|0); //@line 1158 "/checkout/src/libstd/io/mod.rs"
 }
 $4 = $_3; //@line 1153 "/checkout/src/libstd/io/mod.rs"
 $5 = $4; //@line 1153 "/checkout/src/libstd/io/mod.rs"
 $6 = HEAP32[$5>>2]|0; //@line 1153 "/checkout/src/libstd/io/mod.rs"
 $7 = (($4) + 4)|0; //@line 1153 "/checkout/src/libstd/io/mod.rs"
 $8 = $7; //@line 1153 "/checkout/src/libstd/io/mod.rs"
 $9 = HEAP32[$8>>2]|0; //@line 1153 "/checkout/src/libstd/io/mod.rs"
 $10 = ((($self)) + 4|0); //@line 1154 "/checkout/src/libstd/io/mod.rs"
 $11 = HEAP8[$10>>0]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $12 = ($11<<24>>24)==(3); //@line 59 "/checkout/src/libcore/ptr.rs"
 $13 = $6&255; //@line 59 "/checkout/src/libcore/ptr.rs"
 if (!($12)) {
  __THREW__ = 0;
  invoke_vi(454,($10|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
  $14 = __THREW__; __THREW__ = 0;
  $15 = $14&1;
  if ($15) {
   $3 = ___cxa_find_matching_catch_2()|0;
   $20 = tempRet0;
   $21 = $10; //@line 1154 "/checkout/src/libstd/io/mod.rs"
   $22 = $21; //@line 1154 "/checkout/src/libstd/io/mod.rs"
   HEAP32[$22>>2] = $6; //@line 1154 "/checkout/src/libstd/io/mod.rs"
   $23 = (($21) + 4)|0; //@line 1154 "/checkout/src/libstd/io/mod.rs"
   $24 = $23; //@line 1154 "/checkout/src/libstd/io/mod.rs"
   HEAP32[$24>>2] = $9; //@line 1154 "/checkout/src/libstd/io/mod.rs"
   $not$ = ($13<<24>>24)==(3); //@line 1158 "/checkout/src/libstd/io/mod.rs"
   if (!($not$)) {
    ___resumeException($3|0);
    // unreachable;
   }
   __ZN4core3ptr13drop_in_place17h7099c24ba8976e54E_llvm_DBC6AE32($_3); //@line 1158 "/checkout/src/libstd/io/mod.rs"
   ___resumeException($3|0);
   // unreachable;
  }
 }
 $16 = $10; //@line 1154 "/checkout/src/libstd/io/mod.rs"
 $17 = $16; //@line 1154 "/checkout/src/libstd/io/mod.rs"
 HEAP32[$17>>2] = $6; //@line 1154 "/checkout/src/libstd/io/mod.rs"
 $18 = (($16) + 4)|0; //@line 1154 "/checkout/src/libstd/io/mod.rs"
 $19 = $18; //@line 1154 "/checkout/src/libstd/io/mod.rs"
 HEAP32[$19>>2] = $9; //@line 1154 "/checkout/src/libstd/io/mod.rs"
 $_0$0$off034 = 1;
 STACKTOP = sp;return ($_0$0$off034|0); //@line 1158 "/checkout/src/libstd/io/mod.rs"
}
function __ZN94__LT_std__io__Write__write_fmt__Adaptor_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17hdafd0d40251d9b64E($self,$s$0,$s$1) {
 $self = $self|0;
 $s$0 = $s$0|0;
 $s$1 = $s$1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$off034 = 0, $_3 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_3 = sp;
 $0 = HEAP32[$self>>2]|0; //@line 1151 "/checkout/src/libstd/io/mod.rs"
 __ZN3std2io5Write9write_all17hc644b454b3f66eb7E($_3,$0,$s$0,$s$1); //@line 1151 "/checkout/src/libstd/io/mod.rs"
 $1 = HEAP8[$_3>>0]|0; //@line 1152 "/checkout/src/libstd/io/mod.rs"
 $2 = ($1<<24>>24)==(3); //@line 1152 "/checkout/src/libstd/io/mod.rs"
 if ($2) {
  $_0$0$off034 = 0;
  STACKTOP = sp;return ($_0$0$off034|0); //@line 1158 "/checkout/src/libstd/io/mod.rs"
 }
 $4 = $_3; //@line 1153 "/checkout/src/libstd/io/mod.rs"
 $5 = $4; //@line 1153 "/checkout/src/libstd/io/mod.rs"
 $6 = HEAP32[$5>>2]|0; //@line 1153 "/checkout/src/libstd/io/mod.rs"
 $7 = (($4) + 4)|0; //@line 1153 "/checkout/src/libstd/io/mod.rs"
 $8 = $7; //@line 1153 "/checkout/src/libstd/io/mod.rs"
 $9 = HEAP32[$8>>2]|0; //@line 1153 "/checkout/src/libstd/io/mod.rs"
 $10 = ((($self)) + 4|0); //@line 1154 "/checkout/src/libstd/io/mod.rs"
 $11 = HEAP8[$10>>0]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $12 = ($11<<24>>24)==(3); //@line 59 "/checkout/src/libcore/ptr.rs"
 $13 = $6&255; //@line 59 "/checkout/src/libcore/ptr.rs"
 if (!($12)) {
  __THREW__ = 0;
  invoke_vi(454,($10|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
  $14 = __THREW__; __THREW__ = 0;
  $15 = $14&1;
  if ($15) {
   $3 = ___cxa_find_matching_catch_2()|0;
   $20 = tempRet0;
   $21 = $10; //@line 1154 "/checkout/src/libstd/io/mod.rs"
   $22 = $21; //@line 1154 "/checkout/src/libstd/io/mod.rs"
   HEAP32[$22>>2] = $6; //@line 1154 "/checkout/src/libstd/io/mod.rs"
   $23 = (($21) + 4)|0; //@line 1154 "/checkout/src/libstd/io/mod.rs"
   $24 = $23; //@line 1154 "/checkout/src/libstd/io/mod.rs"
   HEAP32[$24>>2] = $9; //@line 1154 "/checkout/src/libstd/io/mod.rs"
   $not$ = ($13<<24>>24)==(3); //@line 1158 "/checkout/src/libstd/io/mod.rs"
   if (!($not$)) {
    ___resumeException($3|0);
    // unreachable;
   }
   __ZN4core3ptr13drop_in_place17h7099c24ba8976e54E_llvm_DBC6AE32($_3); //@line 1158 "/checkout/src/libstd/io/mod.rs"
   ___resumeException($3|0);
   // unreachable;
  }
 }
 $16 = $10; //@line 1154 "/checkout/src/libstd/io/mod.rs"
 $17 = $16; //@line 1154 "/checkout/src/libstd/io/mod.rs"
 HEAP32[$17>>2] = $6; //@line 1154 "/checkout/src/libstd/io/mod.rs"
 $18 = (($16) + 4)|0; //@line 1154 "/checkout/src/libstd/io/mod.rs"
 $19 = $18; //@line 1154 "/checkout/src/libstd/io/mod.rs"
 HEAP32[$19>>2] = $9; //@line 1154 "/checkout/src/libstd/io/mod.rs"
 $_0$0$off034 = 1;
 STACKTOP = sp;return ($_0$0$off034|0); //@line 1158 "/checkout/src/libstd/io/mod.rs"
}
function __ZN3std4sync7condvar7Condvar3new17h6e14e1012796ca03E($retVal) {
 $retVal = $retVal|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $_101$i$i = 0, $_108$i$i = 0, $_141$i$i = 0, $_148$i$i = 0, $_19$i$i = 0, $_26$i$i = 0, $_5$i$i$i = 0, $_5$sroa$0$0$$sroa_idx$i$i$i = 0, $_5$sroa$0$0$$sroa_idx$i19$i$i = 0, $_5$sroa$0$0$$sroa_idx$i23$i$i = 0, $_5$sroa$0$0$$sroa_idx$i27$i$i = 0, $_5$sroa$4$0$$sroa_idx2$i$i$i = 0, $_5$sroa$4$0$$sroa_idx2$i21$i$i = 0, $_5$sroa$4$0$$sroa_idx2$i25$i$i = 0, $_5$sroa$4$0$$sroa_idx2$i29$i$i = 0, $_59$i$i = 0, $_66$i$i = 0, $attr$i$i = 0;
 var $c = 0, $err$i$i = 0, $left_val$i$i = 0, $left_val2$i$i = 0, $left_val5$i$i = 0, $left_val8$i$i = 0, $r$i$i = 0, $r1$i$i = 0, $r4$i$i = 0, $r7$i$i = 0, $retVal$index1 = 0, $right_val$i$i = 0, $right_val3$i$i = 0, $right_val6$i$i = 0, $right_val9$i$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $_148$i$i = sp + 240|0;
 $_141$i$i = sp + 216|0;
 $right_val9$i$i = sp + 208|0;
 $left_val8$i$i = sp + 204|0;
 $r7$i$i = sp + 200|0;
 $_108$i$i = sp + 184|0;
 $_101$i$i = sp + 160|0;
 $right_val6$i$i = sp + 152|0;
 $left_val5$i$i = sp + 148|0;
 $r4$i$i = sp + 144|0;
 $_66$i$i = sp + 128|0;
 $_59$i$i = sp + 104|0;
 $right_val3$i$i = sp + 96|0;
 $left_val2$i$i = sp + 92|0;
 $r1$i$i = sp + 88|0;
 $_26$i$i = sp + 72|0;
 $_19$i$i = sp + 48|0;
 $right_val$i$i = sp + 44|0;
 $left_val$i$i = sp + 40|0;
 $r$i$i = sp + 36|0;
 $attr$i$i = sp + 32|0;
 $err$i$i = sp + 20|0;
 $_5$i$i$i = sp + 8|0;
 $c = sp;
 $0 = (___rust_alloc(48,4,$err$i$i)|0); //@line 84 "/checkout/src/liballoc/heap.rs"
 $1 = ($0|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
 if ($1) {
  ___rust_oom($_5$i$i$i); //@line 98 "/checkout/src/liballoc/heap.rs"
  // unreachable; //@line 98 "/checkout/src/liballoc/heap.rs"
 }
 dest=$0; src=(38568); stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0)); //@line 28 "/checkout/src/libstd/sys_common/condvar.rs"
 $4 = $0; //@line 139 "/checkout/src/libstd/sync/condvar.rs"
 HEAP32[$c>>2] = $4; //@line 138 "/checkout/src/libstd/sync/condvar.rs"
 $5 = ((($c)) + 4|0); //@line 138 "/checkout/src/libstd/sync/condvar.rs"
 HEAP32[$5>>2] = 0; //@line 138 "/checkout/src/libstd/sync/condvar.rs"
 $6 = (_pthread_condattr_init(($attr$i$i|0))|0); //@line 54 "/checkout/src/libstd/sys/unix/condvar.rs"
 HEAP32[$r$i$i>>2] = $6; //@line 54 "/checkout/src/libstd/sys/unix/condvar.rs"
 HEAP32[$left_val$i$i>>2] = $r$i$i; //@line 55 "/checkout/src/libstd/sys/unix/condvar.rs"
 HEAP32[$right_val$i$i>>2] = 38616; //@line 55 "/checkout/src/libstd/sys/unix/condvar.rs"
 $7 = ($6|0)==(0); //@line 55 "/checkout/src/libstd/sys/unix/condvar.rs"
 if (!($7)) {
  HEAP32[$_26$i$i>>2] = $left_val$i$i; //@line 55 "/checkout/src/libstd/sys/unix/condvar.rs"
  $8 = ((($_26$i$i)) + 4|0); //@line 55 "/checkout/src/libstd/sys/unix/condvar.rs"
  HEAP32[$8>>2] = 441; //@line 55 "/checkout/src/libstd/sys/unix/condvar.rs"
  $9 = ((($_26$i$i)) + 8|0); //@line 55 "/checkout/src/libstd/sys/unix/condvar.rs"
  HEAP32[$9>>2] = $right_val$i$i; //@line 55 "/checkout/src/libstd/sys/unix/condvar.rs"
  $10 = ((($_26$i$i)) + 12|0); //@line 55 "/checkout/src/libstd/sys/unix/condvar.rs"
  HEAP32[$10>>2] = 441; //@line 55 "/checkout/src/libstd/sys/unix/condvar.rs"
  HEAP32[$_19$i$i>>2] = 9552; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $11 = ((($_19$i$i)) + 4|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$11>>2] = 3; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $_5$sroa$0$0$$sroa_idx$i27$i$i = ((($_19$i$i)) + 8|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_5$sroa$0$0$$sroa_idx$i27$i$i>>2] = 12044; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $_5$sroa$4$0$$sroa_idx2$i29$i$i = ((($_19$i$i)) + 12|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_5$sroa$4$0$$sroa_idx2$i29$i$i>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $12 = ((($_19$i$i)) + 16|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$12>>2] = $_26$i$i; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $13 = ((($_19$i$i)) + 20|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$13>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  __THREW__ = 0;
  invoke_vii(436,($_19$i$i|0),(9576|0)); //@line 55 "/checkout/src/libstd/sys/unix/condvar.rs"
  $14 = __THREW__; __THREW__ = 0;
  $2 = ___cxa_find_matching_catch_2()|0;
  $3 = tempRet0;
  __ZN4core3ptr13drop_in_place17hd527af13dee23674E_llvm_DBC6AE32($c); //@line 146 "/checkout/src/libstd/sync/condvar.rs"
  ___resumeException($2|0);
  // unreachable;
 }
 $15 = (_pthread_condattr_setclock(($attr$i$i|0),1)|0); //@line 56 "/checkout/src/libstd/sys/unix/condvar.rs"
 HEAP32[$r1$i$i>>2] = $15; //@line 56 "/checkout/src/libstd/sys/unix/condvar.rs"
 HEAP32[$left_val2$i$i>>2] = $r1$i$i; //@line 57 "/checkout/src/libstd/sys/unix/condvar.rs"
 HEAP32[$right_val3$i$i>>2] = 38616; //@line 57 "/checkout/src/libstd/sys/unix/condvar.rs"
 $16 = ($15|0)==(0); //@line 57 "/checkout/src/libstd/sys/unix/condvar.rs"
 if (!($16)) {
  HEAP32[$_66$i$i>>2] = $left_val2$i$i; //@line 57 "/checkout/src/libstd/sys/unix/condvar.rs"
  $17 = ((($_66$i$i)) + 4|0); //@line 57 "/checkout/src/libstd/sys/unix/condvar.rs"
  HEAP32[$17>>2] = 441; //@line 57 "/checkout/src/libstd/sys/unix/condvar.rs"
  $18 = ((($_66$i$i)) + 8|0); //@line 57 "/checkout/src/libstd/sys/unix/condvar.rs"
  HEAP32[$18>>2] = $right_val3$i$i; //@line 57 "/checkout/src/libstd/sys/unix/condvar.rs"
  $19 = ((($_66$i$i)) + 12|0); //@line 57 "/checkout/src/libstd/sys/unix/condvar.rs"
  HEAP32[$19>>2] = 441; //@line 57 "/checkout/src/libstd/sys/unix/condvar.rs"
  HEAP32[$_59$i$i>>2] = 9552; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $20 = ((($_59$i$i)) + 4|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$20>>2] = 3; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $_5$sroa$0$0$$sroa_idx$i23$i$i = ((($_59$i$i)) + 8|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_5$sroa$0$0$$sroa_idx$i23$i$i>>2] = 12044; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $_5$sroa$4$0$$sroa_idx2$i25$i$i = ((($_59$i$i)) + 12|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_5$sroa$4$0$$sroa_idx2$i25$i$i>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $21 = ((($_59$i$i)) + 16|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$21>>2] = $_66$i$i; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $22 = ((($_59$i$i)) + 20|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$22>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  __THREW__ = 0;
  invoke_vii(436,($_59$i$i|0),(9592|0)); //@line 57 "/checkout/src/libstd/sys/unix/condvar.rs"
  $23 = __THREW__; __THREW__ = 0;
  $2 = ___cxa_find_matching_catch_2()|0;
  $3 = tempRet0;
  __ZN4core3ptr13drop_in_place17hd527af13dee23674E_llvm_DBC6AE32($c); //@line 146 "/checkout/src/libstd/sync/condvar.rs"
  ___resumeException($2|0);
  // unreachable;
 }
 $24 = (_pthread_cond_init(($0|0),($attr$i$i|0))|0); //@line 58 "/checkout/src/libstd/sys/unix/condvar.rs"
 HEAP32[$r4$i$i>>2] = $24; //@line 58 "/checkout/src/libstd/sys/unix/condvar.rs"
 HEAP32[$left_val5$i$i>>2] = $r4$i$i; //@line 59 "/checkout/src/libstd/sys/unix/condvar.rs"
 HEAP32[$right_val6$i$i>>2] = 38616; //@line 59 "/checkout/src/libstd/sys/unix/condvar.rs"
 $25 = ($24|0)==(0); //@line 59 "/checkout/src/libstd/sys/unix/condvar.rs"
 if (!($25)) {
  HEAP32[$_108$i$i>>2] = $left_val5$i$i; //@line 59 "/checkout/src/libstd/sys/unix/condvar.rs"
  $26 = ((($_108$i$i)) + 4|0); //@line 59 "/checkout/src/libstd/sys/unix/condvar.rs"
  HEAP32[$26>>2] = 441; //@line 59 "/checkout/src/libstd/sys/unix/condvar.rs"
  $27 = ((($_108$i$i)) + 8|0); //@line 59 "/checkout/src/libstd/sys/unix/condvar.rs"
  HEAP32[$27>>2] = $right_val6$i$i; //@line 59 "/checkout/src/libstd/sys/unix/condvar.rs"
  $28 = ((($_108$i$i)) + 12|0); //@line 59 "/checkout/src/libstd/sys/unix/condvar.rs"
  HEAP32[$28>>2] = 441; //@line 59 "/checkout/src/libstd/sys/unix/condvar.rs"
  HEAP32[$_101$i$i>>2] = 9552; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $29 = ((($_101$i$i)) + 4|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$29>>2] = 3; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $_5$sroa$0$0$$sroa_idx$i19$i$i = ((($_101$i$i)) + 8|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_5$sroa$0$0$$sroa_idx$i19$i$i>>2] = 12044; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $_5$sroa$4$0$$sroa_idx2$i21$i$i = ((($_101$i$i)) + 12|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_5$sroa$4$0$$sroa_idx2$i21$i$i>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $30 = ((($_101$i$i)) + 16|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$30>>2] = $_108$i$i; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $31 = ((($_101$i$i)) + 20|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$31>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  __THREW__ = 0;
  invoke_vii(436,($_101$i$i|0),(9608|0)); //@line 59 "/checkout/src/libstd/sys/unix/condvar.rs"
  $32 = __THREW__; __THREW__ = 0;
  $2 = ___cxa_find_matching_catch_2()|0;
  $3 = tempRet0;
  __ZN4core3ptr13drop_in_place17hd527af13dee23674E_llvm_DBC6AE32($c); //@line 146 "/checkout/src/libstd/sync/condvar.rs"
  ___resumeException($2|0);
  // unreachable;
 }
 $33 = (_pthread_condattr_destroy(($attr$i$i|0))|0); //@line 60 "/checkout/src/libstd/sys/unix/condvar.rs"
 HEAP32[$r7$i$i>>2] = $33; //@line 60 "/checkout/src/libstd/sys/unix/condvar.rs"
 HEAP32[$left_val8$i$i>>2] = $r7$i$i; //@line 61 "/checkout/src/libstd/sys/unix/condvar.rs"
 HEAP32[$right_val9$i$i>>2] = 38616; //@line 61 "/checkout/src/libstd/sys/unix/condvar.rs"
 $34 = ($33|0)==(0); //@line 61 "/checkout/src/libstd/sys/unix/condvar.rs"
 if ($34) {
  HEAP32[$retVal>>2] = $0; //@line 146 "/checkout/src/libstd/sync/condvar.rs"
  $retVal$index1 = ((($retVal)) + 4|0); //@line 146 "/checkout/src/libstd/sync/condvar.rs"
  HEAP32[$retVal$index1>>2] = 0; //@line 146 "/checkout/src/libstd/sync/condvar.rs"
  STACKTOP = sp;return; //@line 146 "/checkout/src/libstd/sync/condvar.rs"
 }
 HEAP32[$_148$i$i>>2] = $left_val8$i$i; //@line 61 "/checkout/src/libstd/sys/unix/condvar.rs"
 $35 = ((($_148$i$i)) + 4|0); //@line 61 "/checkout/src/libstd/sys/unix/condvar.rs"
 HEAP32[$35>>2] = 441; //@line 61 "/checkout/src/libstd/sys/unix/condvar.rs"
 $36 = ((($_148$i$i)) + 8|0); //@line 61 "/checkout/src/libstd/sys/unix/condvar.rs"
 HEAP32[$36>>2] = $right_val9$i$i; //@line 61 "/checkout/src/libstd/sys/unix/condvar.rs"
 $37 = ((($_148$i$i)) + 12|0); //@line 61 "/checkout/src/libstd/sys/unix/condvar.rs"
 HEAP32[$37>>2] = 441; //@line 61 "/checkout/src/libstd/sys/unix/condvar.rs"
 HEAP32[$_141$i$i>>2] = 9552; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $38 = ((($_141$i$i)) + 4|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$38>>2] = 3; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $_5$sroa$0$0$$sroa_idx$i$i$i = ((($_141$i$i)) + 8|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5$sroa$0$0$$sroa_idx$i$i$i>>2] = 12044; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $_5$sroa$4$0$$sroa_idx2$i$i$i = ((($_141$i$i)) + 12|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5$sroa$4$0$$sroa_idx2$i$i$i>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $39 = ((($_141$i$i)) + 16|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$39>>2] = $_148$i$i; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $40 = ((($_141$i$i)) + 20|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$40>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 __THREW__ = 0;
 invoke_vii(436,($_141$i$i|0),(9624|0)); //@line 61 "/checkout/src/libstd/sys/unix/condvar.rs"
 $41 = __THREW__; __THREW__ = 0;
 $2 = ___cxa_find_matching_catch_2()|0;
 $3 = tempRet0;
 __ZN4core3ptr13drop_in_place17hd527af13dee23674E_llvm_DBC6AE32($c); //@line 146 "/checkout/src/libstd/sync/condvar.rs"
 ___resumeException($2|0);
 // unreachable;
}
function __ZN3std4sync4once4Once10call_inner17hf9e906ed11e12d21E($self,$ignore_poisoning,$init$0,$init$1) {
 $self = $self|0;
 $ignore_poisoning = $ignore_poisoning|0;
 $init$0 = $init$0|0;
 $init$1 = $init$1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $complete = 0, $node = 0, $personalityslot$sroa$0$0 = 0, $personalityslot$sroa$8$0 = 0, $self$i$i = 0, $state$0 = 0, $state$1 = 0, $success = 0, $success1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $self$i$i = sp + 20|0;
 $node = sp + 8|0;
 $complete = sp;
 $0 = HEAP32[$self>>2]|0; //@line 1492 "/checkout/src/libcore/sync/atomic.rs"
 $1 = ((($node)) + 8|0);
 $2 = ((($node)) + 4|0);
 $3 = $node;
 $4 = $3 | 2;
 $state$0 = $0;
 L1: while(1) {
  switch ($state$0|0) {
  case 3:  {
   label = 8;
   break L1;
   break;
  }
  case 1:  {
   if (!($ignore_poisoning)) {
    label = 4;
    break L1;
   }
   break;
  }
  case 0:  {
   break;
  }
  default: {
   $6 = $state$0 & 3; //@line 351 "/checkout/src/libstd/sync/once.rs"
   $7 = ($6|0)==(2); //@line 351 "/checkout/src/libstd/sync/once.rs"
   if (!($7)) {
    label = 11;
    break L1;
   }
   $14 = (__ZN46__LT_std__thread__local__LocalKey_LT_T_GT__GT_8try_with17ha1e39309185d6fdbE(8992)|0); //@line 25 "/checkout/src/libstd/sys_common/thread_info.rs"
   HEAP32[$self$i$i>>2] = $14;
   $15 = ($14|0)==(0|0); //@line 301 "/checkout/src/libcore/option.rs"
   if ($15) {
    label = 13;
    break L1;
   }
   $19 = $14; //@line 353 "/checkout/src/libstd/sync/once.rs"
   HEAP32[$node>>2] = $19; //@line 352 "/checkout/src/libstd/sync/once.rs"
   HEAP8[$1>>0] = 0; //@line 352 "/checkout/src/libstd/sync/once.rs"
   HEAP32[$2>>2] = 0; //@line 352 "/checkout/src/libstd/sync/once.rs"
   $state$1 = $state$0;
   while(1) {
    $20 = $state$1 & 3; //@line 360 "/checkout/src/libstd/sync/once.rs"
    $21 = ($20|0)==(2); //@line 360 "/checkout/src/libstd/sync/once.rs"
    if (!($21)) {
     label = 16;
     break;
    }
    $26 = $state$1 & -4; //@line 361 "/checkout/src/libstd/sync/once.rs"
    $27 = $26; //@line 361 "/checkout/src/libstd/sync/once.rs"
    HEAP32[$2>>2] = $27; //@line 361 "/checkout/src/libstd/sync/once.rs"
    $28 = HEAP32[$self>>2]|0;if (($28|0) == ($state$1|0)) HEAP32[$self>>2] = $4; //@line 1549 "/checkout/src/libcore/sync/atomic.rs"
    $success1 = ($28|0)==($state$1|0);
    if ($success1) {
     break;
    } else {
     $state$1 = $28;
    }
   }
   if ((label|0) == 16) {
    label = 0;
    $22 = HEAP32[$node>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
    $23 = ($22|0)==(0|0); //@line 59 "/checkout/src/libcore/ptr.rs"
    if (!($23)) {
     $24 = HEAP32[$22>>2]|0;HEAP32[$22>>2] = (($24-1)|0); //@line 1529 "/checkout/src/libcore/sync/atomic.rs"
     $25 = ($24|0)==(1); //@line 933 "/checkout/src/liballoc/arc.rs"
     if ($25) {
      /* fence */; //@line 1706 "/checkout/src/libcore/sync/atomic.rs"
      __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h6b99c066bc6eaea1E($node); //@line 968 "/checkout/src/liballoc/arc.rs"
     }
    }
    $state$0 = $state$1;
    continue L1;
   }
   while(1) {
    $29 = HEAP8[$1>>0]|0; //@line 1492 "/checkout/src/libcore/sync/atomic.rs"
    $30 = ($29<<24>>24)==(0); //@line 316 "/checkout/src/libcore/sync/atomic.rs"
    if (!($30)) {
     break;
    }
    __THREW__ = 0;
    invoke_v(455); //@line 374 "/checkout/src/libstd/sync/once.rs"
    $31 = __THREW__; __THREW__ = 0;
    $32 = $31&1;
    if ($32) {
     label = 27;
     break L1;
    }
   }
   $33 = HEAP32[$self>>2]|0; //@line 1492 "/checkout/src/libcore/sync/atomic.rs"
   $34 = HEAP32[$node>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
   $35 = ($34|0)==(0|0); //@line 59 "/checkout/src/libcore/ptr.rs"
   if (!($35)) {
    $36 = HEAP32[$34>>2]|0;HEAP32[$34>>2] = (($36-1)|0); //@line 1529 "/checkout/src/libcore/sync/atomic.rs"
    $37 = ($36|0)==(1); //@line 933 "/checkout/src/liballoc/arc.rs"
    if ($37) {
     /* fence */; //@line 1706 "/checkout/src/libcore/sync/atomic.rs"
     __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h6b99c066bc6eaea1E($node); //@line 968 "/checkout/src/liballoc/arc.rs"
    }
   }
   $state$0 = $33;
   continue L1;
  }
  }
  $5 = HEAP32[$self>>2]|0;if (($5|0) == ($state$0|0)) HEAP32[$self>>2] = 2; //@line 1549 "/checkout/src/libcore/sync/atomic.rs"
  $success = ($5|0)==($state$0|0);
  if ($success) {
   label = 9;
   break;
  } else {
   $state$0 = $5;
  }
 }
 if ((label|0) == 4) {
  __ZN3std9panicking11begin_panic17hc122bd4e5599889dE(24332,42,9640); //@line 315 "/checkout/src/libstd/sync/once.rs"
  // unreachable; //@line 315 "/checkout/src/libstd/sync/once.rs"
 }
 else if ((label|0) == 8) {
  STACKTOP = sp;return; //@line 382 "/checkout/src/libstd/sync/once.rs"
 }
 else if ((label|0) == 9) {
  $8 = ((($complete)) + 4|0); //@line 336 "/checkout/src/libstd/sync/once.rs"
  HEAP8[$8>>0] = 1; //@line 336 "/checkout/src/libstd/sync/once.rs"
  HEAP32[$complete>>2] = $self; //@line 336 "/checkout/src/libstd/sync/once.rs"
  $9 = ($state$0|0)==(1); //@line 340 "/checkout/src/libstd/sync/once.rs"
  $10 = ((($init$1)) + 12|0); //@line 340 "/checkout/src/libstd/sync/once.rs"
  $11 = HEAP32[$10>>2]|0; //@line 340 "/checkout/src/libstd/sync/once.rs"
  __THREW__ = 0;
  invoke_vii($11|0,($init$0|0),($9|0)); //@line 340 "/checkout/src/libstd/sync/once.rs"
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if ($13) {
   $40 = ___cxa_find_matching_catch_2()|0;
   $41 = tempRet0;
   __ZN4core3ptr13drop_in_place17hafc54ef8f3130dbcE($complete); //@line 343 "/checkout/src/libstd/sync/once.rs"
   $personalityslot$sroa$0$0 = $40;$personalityslot$sroa$8$0 = $41;
   ___resumeException($personalityslot$sroa$0$0|0);
   // unreachable;
  } else {
   HEAP8[$8>>0] = 0; //@line 341 "/checkout/src/libstd/sync/once.rs"
   __ZN65__LT_std__sync__once__Finish_u20_as_u20_core__ops__drop__Drop_GT_4drop17h336c7e16a0ade3a1E($complete); //@line 59 "/checkout/src/libcore/ptr.rs"
   STACKTOP = sp;return; //@line 382 "/checkout/src/libstd/sync/once.rs"
  }
 }
 else if ((label|0) == 11) {
  __ZN3std9panicking11begin_panic17hc122bd4e5599889dE(24374,47,9656); //@line 351 "/checkout/src/libstd/sync/once.rs"
  // unreachable; //@line 351 "/checkout/src/libstd/sync/once.rs"
 }
 else if ((label|0) == 13) {
  __THREW__ = 0;
  invoke_vii(364,(22233|0),94); //@line 302 "/checkout/src/libcore/option.rs"
  $16 = __THREW__; __THREW__ = 0;
  $17 = ___cxa_find_matching_catch_2()|0;
  $18 = tempRet0;
  __ZN4core3ptr13drop_in_place17ha37d92841bbc0d35E_llvm_2964622($self$i$i); //@line 304 "/checkout/src/libcore/option.rs"
  ___resumeException($17|0);
  // unreachable;
 }
 else if ((label|0) == 27) {
  $38 = ___cxa_find_matching_catch_2()|0;
  $39 = tempRet0;
  __ZN4core3ptr13drop_in_place17h0d3c6a23e37423d8E($node); //@line 379 "/checkout/src/libstd/sync/once.rs"
  $personalityslot$sroa$0$0 = $38;$personalityslot$sroa$8$0 = $39;
  ___resumeException($personalityslot$sroa$0$0|0);
  // unreachable;
 }
}
function __ZN65__LT_std__sync__once__Finish_u20_as_u20_core__ops__drop__Drop_GT_4drop17h336c7e16a0ade3a1E($self) {
 $self = $self|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_11 = 0, $_22 = 0, $_29 = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$4$0$$sroa_idx2$i = 0, $left_val = 0, $queue1$012 = 0;
 var $right_val = 0, $self$i = 0, $thread = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $self$i = sp + 60|0;
 $thread = sp + 56|0;
 $_29 = sp + 40|0;
 $_22 = sp + 16|0;
 $right_val = sp + 8|0;
 $left_val = sp + 4|0;
 $_11 = sp;
 $0 = ((($self)) + 4|0); //@line 396 "/checkout/src/libstd/sync/once.rs"
 $1 = HEAP8[$0>>0]|0; //@line 396 "/checkout/src/libstd/sync/once.rs"
 $2 = ($1<<24>>24)==(0); //@line 396 "/checkout/src/libstd/sync/once.rs"
 $3 = HEAP32[$self>>2]|0;
 $$sink = $2 ? 3 : 1; //@line 396 "/checkout/src/libstd/sync/once.rs"
 $4 = HEAP32[$3>>2]|0;HEAP32[$3>>2] = $$sink; //@line 1506 "/checkout/src/libcore/sync/atomic.rs"
 $5 = $4 & 3; //@line 401 "/checkout/src/libstd/sync/once.rs"
 HEAP32[$_11>>2] = $5; //@line 401 "/checkout/src/libstd/sync/once.rs"
 HEAP32[$left_val>>2] = $_11; //@line 401 "/checkout/src/libstd/sync/once.rs"
 HEAP32[$right_val>>2] = 9672; //@line 401 "/checkout/src/libstd/sync/once.rs"
 $6 = ($5|0)==(2); //@line 401 "/checkout/src/libstd/sync/once.rs"
 if (!($6)) {
  HEAP32[$_29>>2] = $left_val; //@line 401 "/checkout/src/libstd/sync/once.rs"
  $7 = ((($_29)) + 4|0); //@line 401 "/checkout/src/libstd/sync/once.rs"
  HEAP32[$7>>2] = 86; //@line 401 "/checkout/src/libstd/sync/once.rs"
  $8 = ((($_29)) + 8|0); //@line 401 "/checkout/src/libstd/sync/once.rs"
  HEAP32[$8>>2] = $right_val; //@line 401 "/checkout/src/libstd/sync/once.rs"
  $9 = ((($_29)) + 12|0); //@line 401 "/checkout/src/libstd/sync/once.rs"
  HEAP32[$9>>2] = 86; //@line 401 "/checkout/src/libstd/sync/once.rs"
  HEAP32[$_22>>2] = 9552; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $10 = ((($_22)) + 4|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$10>>2] = 3; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $_5$sroa$0$0$$sroa_idx$i = ((($_22)) + 8|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 12044; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $_5$sroa$4$0$$sroa_idx2$i = ((($_22)) + 12|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_5$sroa$4$0$$sroa_idx2$i>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $11 = ((($_22)) + 16|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$11>>2] = $_29; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $12 = ((($_22)) + 20|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$12>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  __ZN3std9panicking15begin_panic_fmt17h4cb2c5614efe15b0E($_22,9676); //@line 401 "/checkout/src/libstd/sync/once.rs"
  // unreachable; //@line 401 "/checkout/src/libstd/sync/once.rs"
 }
 $13 = $4 & -4; //@line 408 "/checkout/src/libstd/sync/once.rs"
 $14 = ($13|0)==(0); //@line 1170 "/checkout/src/libcore/ptr.rs"
 if ($14) {
  STACKTOP = sp;return; //@line 417 "/checkout/src/libstd/sync/once.rs"
 }
 $15 = $13; //@line 408 "/checkout/src/libstd/sync/once.rs"
 $queue1$012 = $15;
 while(1) {
  $16 = ((($queue1$012)) + 4|0); //@line 410 "/checkout/src/libstd/sync/once.rs"
  $17 = HEAP32[$16>>2]|0; //@line 410 "/checkout/src/libstd/sync/once.rs"
  $18 = HEAPU8[$queue1$012>>0]|(HEAPU8[$queue1$012+1>>0]<<8)|(HEAPU8[$queue1$012+2>>0]<<16)|(HEAPU8[$queue1$012+3>>0]<<24); //@line 238 "/checkout/src/libcore/ptr.rs"
  HEAP8[$queue1$012>>0]=0&255;HEAP8[$queue1$012+1>>0]=(0>>8)&255;HEAP8[$queue1$012+2>>0]=(0>>16)&255;HEAP8[$queue1$012+3>>0]=0>>24; //@line 239 "/checkout/src/libcore/ptr.rs"
  HEAP32[$self$i>>2] = $18;
  $19 = ($18|0)==(0|0); //@line 334 "/checkout/src/libcore/option.rs"
  if ($19) {
   label = 7;
   break;
  }
  HEAP32[$thread>>2] = $18; //@line 411 "/checkout/src/libstd/sync/once.rs"
  $23 = ((($queue1$012)) + 8|0); //@line 412 "/checkout/src/libstd/sync/once.rs"
  HEAP8[$23>>0] = 1; //@line 1480 "/checkout/src/libcore/sync/atomic.rs"
  __THREW__ = 0;
  invoke_vi(456,($thread|0)); //@line 413 "/checkout/src/libstd/sync/once.rs"
  $24 = __THREW__; __THREW__ = 0;
  $25 = $24&1;
  if ($25) {
   label = 12;
   break;
  }
  $26 = HEAP32[$thread>>2]|0; //@line 2540 "/checkout/src/libcore/ptr.rs"
  $27 = HEAP32[$26>>2]|0;HEAP32[$26>>2] = (($27-1)|0); //@line 1529 "/checkout/src/libcore/sync/atomic.rs"
  $28 = ($27|0)==(1); //@line 933 "/checkout/src/liballoc/arc.rs"
  if ($28) {
   /* fence */; //@line 1706 "/checkout/src/libcore/sync/atomic.rs"
   __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h6b99c066bc6eaea1E($thread); //@line 968 "/checkout/src/liballoc/arc.rs"
  }
  $29 = ($17|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
  if ($29) {
   label = 5;
   break;
  } else {
   $queue1$012 = $17;
  }
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return; //@line 417 "/checkout/src/libstd/sync/once.rs"
 }
 else if ((label|0) == 7) {
  __THREW__ = 0;
  invoke_vi(297,(9528|0)); //@line 20 "/checkout/src/libcore/macros.rs"
  $20 = __THREW__; __THREW__ = 0;
  $21 = ___cxa_find_matching_catch_2()|0;
  $22 = tempRet0;
  __ZN4core3ptr13drop_in_place17ha37d92841bbc0d35E_1683($self$i); //@line 337 "/checkout/src/libcore/option.rs"
  ___resumeException($21|0);
  // unreachable;
 }
 else if ((label|0) == 12) {
  $30 = ___cxa_find_matching_catch_2()|0;
  $31 = tempRet0;
  __ZN4core3ptr13drop_in_place17h6ba3782eeecc005cE_1684($thread); //@line 415 "/checkout/src/libstd/sync/once.rs"
  ___resumeException($30|0);
  // unreachable;
 }
}
function __ZN4core3ptr13drop_in_place17h0d3c6a23e37423d8E($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $1 = ($0|0)==(0|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 if ($1) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 $2 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($2-1)|0); //@line 1529 "/checkout/src/libcore/sync/atomic.rs"
 $3 = ($2|0)==(1); //@line 933 "/checkout/src/liballoc/arc.rs"
 if (!($3)) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 /* fence */; //@line 1706 "/checkout/src/libcore/sync/atomic.rs"
 __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h6b99c066bc6eaea1E($arg0); //@line 968 "/checkout/src/liballoc/arc.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr13drop_in_place17hafc54ef8f3130dbcE($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN65__LT_std__sync__once__Finish_u20_as_u20_core__ops__drop__Drop_GT_4drop17h336c7e16a0ade3a1E($arg0); //@line 59 "/checkout/src/libcore/ptr.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr13drop_in_place17ha37d92841bbc0d35E_1683($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $1 = ($0|0)==(0|0); //@line 59 "/checkout/src/libcore/ptr.rs"
 if ($1) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 $2 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($2-1)|0); //@line 1529 "/checkout/src/libcore/sync/atomic.rs"
 $3 = ($2|0)==(1); //@line 933 "/checkout/src/liballoc/arc.rs"
 if (!($3)) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 /* fence */; //@line 1706 "/checkout/src/libcore/sync/atomic.rs"
 __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h6b99c066bc6eaea1E($arg0); //@line 968 "/checkout/src/liballoc/arc.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr13drop_in_place17h6ba3782eeecc005cE_1684($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg0>>2]|0; //@line 2540 "/checkout/src/libcore/ptr.rs"
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1-1)|0); //@line 1529 "/checkout/src/libcore/sync/atomic.rs"
 $2 = ($1|0)==(1); //@line 933 "/checkout/src/liballoc/arc.rs"
 if (!($2)) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 /* fence */; //@line 1706 "/checkout/src/libcore/sync/atomic.rs"
 __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h6b99c066bc6eaea1E($arg0); //@line 968 "/checkout/src/liballoc/arc.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN52__LT__BP_const_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h1ae7c5142ae442afE($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_25$i = 0, $_4$sroa$0$0$$sroa_idx$i = 0, $cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_25$i = sp;
 $_4$sroa$0$0$$sroa_idx$i = ((($f)) + 8|0); //@line 1630 "/checkout/src/libcore/fmt/mod.rs"
 $0 = $_4$sroa$0$0$$sroa_idx$i; //@line 1630 "/checkout/src/libcore/fmt/mod.rs"
 $1 = $0; //@line 1630 "/checkout/src/libcore/fmt/mod.rs"
 $2 = HEAP32[$1>>2]|0; //@line 1630 "/checkout/src/libcore/fmt/mod.rs"
 $3 = (($0) + 4)|0; //@line 1630 "/checkout/src/libcore/fmt/mod.rs"
 $4 = $3; //@line 1630 "/checkout/src/libcore/fmt/mod.rs"
 $5 = HEAP32[$4>>2]|0; //@line 1630 "/checkout/src/libcore/fmt/mod.rs"
 $6 = HEAP32[$f>>2]|0; //@line 1631 "/checkout/src/libcore/fmt/mod.rs"
 $7 = (__ZN4core3fmt9Formatter9alternate17h0111877dc7b59e0eE($f)|0); //@line 1637 "/checkout/src/libcore/fmt/mod.rs"
 $8 = HEAP32[$f>>2]|0;
 if ($7) {
  $9 = $8 | 8; //@line 1638 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$f>>2] = $9; //@line 1638 "/checkout/src/libcore/fmt/mod.rs"
  $10 = ((($f)) + 8|0); //@line 1640 "/checkout/src/libcore/fmt/mod.rs"
  $11 = HEAP32[$10>>2]|0; //@line 1640 "/checkout/src/libcore/fmt/mod.rs"
  $cond$i = ($11|0)==(0); //@line 1640 "/checkout/src/libcore/fmt/mod.rs"
  if ($cond$i) {
   HEAP32[$10>>2] = 1; //@line 1641 "/checkout/src/libcore/fmt/mod.rs"
   $12 = ((($f)) + 12|0); //@line 1641 "/checkout/src/libcore/fmt/mod.rs"
   HEAP32[$12>>2] = 10; //@line 1641 "/checkout/src/libcore/fmt/mod.rs"
   $14 = $9;
  } else {
   $14 = $9;
  }
 } else {
  $14 = $8;
 }
 $13 = $14 | 4; //@line 1644 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$f>>2] = $13; //@line 1644 "/checkout/src/libcore/fmt/mod.rs"
 $15 = HEAP32[$self>>2]|0; //@line 1646 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_25$i>>2] = $15; //@line 1646 "/checkout/src/libcore/fmt/mod.rs"
 $16 = (__ZN4core3fmt3num55__LT_impl_u20_core__fmt__LowerHex_u20_for_u20_usize_GT_3fmt17h82070d0f7b249d5cE($_25$i,$f)|0); //@line 1646 "/checkout/src/libcore/fmt/mod.rs"
 $17 = $_4$sroa$0$0$$sroa_idx$i; //@line 1648 "/checkout/src/libcore/fmt/mod.rs"
 $18 = $17; //@line 1648 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$18>>2] = $2; //@line 1648 "/checkout/src/libcore/fmt/mod.rs"
 $19 = (($17) + 4)|0; //@line 1648 "/checkout/src/libcore/fmt/mod.rs"
 $20 = $19; //@line 1648 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$20>>2] = $5; //@line 1648 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$f>>2] = $6; //@line 1649 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return ($16|0); //@line 1680 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h0ffbbe1350e3d249E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self>>2]|0; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $1 = (__ZN4core3fmt3num52__LT_impl_u20_core__fmt__Debug_u20_for_u20_usize_GT_3fmt17heec4ebcff62c8923E($0,$f)|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 return ($1|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h4ccb3ed4250078f0E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self>>2]|0; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $1 = (__ZN4core3fmt3num50__LT_impl_u20_core__fmt__Debug_u20_for_u20_i32_GT_3fmt17h6be49b2b2c2ab878E($0,$f)|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 return ($1|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17hcd39cb2d1b68af27E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self>>2]|0; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $1 = (__ZN4core3fmt3num49__LT_impl_u20_core__fmt__Debug_u20_for_u20_u8_GT_3fmt17h2976fb9686b0bdc3E($0,$f)|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 return ($1|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17he961a94e1c0dddd3E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self>>2]|0; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $1 = ((($self)) + 4|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $2 = HEAP32[$1>>2]|0; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $3 = (__ZN42__LT_str_u20_as_u20_core__fmt__Display_GT_3fmt17hd64e49219890df95E($0,$2,$f)|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 return ($3|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h6feba2c9496a2e63E($self,$c) {
 $self = $self|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self>>2]|0; //@line 215 "/checkout/src/libcore/fmt/mod.rs"
 $1 = (__ZN4core3fmt5Write10write_char17he7f5bfbab3a3636bE($0,$c)|0); //@line 215 "/checkout/src/libcore/fmt/mod.rs"
 return ($1|0); //@line 216 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17he7a9ed95c31cf6afE($self,$c) {
 $self = $self|0;
 $c = $c|0;
 var $$pre = 0, $$sink$i$i = 0, $$sink$i$i$i$i = 0, $$sink$i$i$ph$i$i = 0, $$sink$sink$i$i$i$i = 0, $$sink$sink$i$i$ph$i$i = 0, $$sink11$i$i$i$i = 0, $$sink14$i$i$i$i = 0, $$sink3$i$i = 0, $$sink6$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_17$i$i = 0, $len$1$i$i$i$i = 0, $len$1$i$i$ph$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_17$i$i = sp;
 $0 = HEAP32[$self>>2]|0; //@line 215 "/checkout/src/libcore/fmt/mod.rs"
 $1 = ($c>>>0)<(128); //@line 463 "/checkout/src/libcore/char.rs"
 $2 = ($c>>>0)<(65536); //@line 467 "/checkout/src/libcore/char.rs"
 if ($1) {
  $3 = $c&255; //@line 965 "/checkout/src/liballoc/string.rs"
  $4 = ((($0)) + 8|0); //@line 967 "/checkout/src/liballoc/vec.rs"
  $5 = HEAP32[$4>>2]|0; //@line 967 "/checkout/src/liballoc/vec.rs"
  $6 = ((($0)) + 4|0); //@line 210 "/checkout/src/liballoc/raw_vec.rs"
  $7 = HEAP32[$6>>2]|0; //@line 210 "/checkout/src/liballoc/raw_vec.rs"
  $8 = ($5|0)==($7|0); //@line 967 "/checkout/src/liballoc/vec.rs"
  if ($8) {
   __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_6double17h6d0cd599b42ba57cE($0); //@line 968 "/checkout/src/liballoc/vec.rs"
   $$pre = HEAP32[$4>>2]|0;
   $11 = $$pre;
  } else {
   $11 = $5;
  }
  $9 = HEAP32[$0>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
  $10 = (($9) + ($11)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  HEAP8[$10>>0] = $3; //@line 364 "/checkout/src/libcore/ptr.rs"
  $12 = HEAP32[$4>>2]|0; //@line 973 "/checkout/src/liballoc/vec.rs"
  $13 = (($12) + 1)|0; //@line 973 "/checkout/src/liballoc/vec.rs"
  HEAP32[$4>>2] = $13; //@line 973 "/checkout/src/liballoc/vec.rs"
  STACKTOP = sp;return 0; //@line 216 "/checkout/src/libcore/fmt/mod.rs"
 }
 $14 = ($c>>>0)<(2048); //@line 465 "/checkout/src/libcore/char.rs"
 HEAP32[$_17$i$i>>2] = 0; //@line 966 "/checkout/src/liballoc/string.rs"
 if ($14) {
  $$sink$i$i$i$i = 0;$$sink$sink$i$i$i$i = 1;$$sink11$i$i$i$i = -64;$$sink14$i$i$i$i = 31;$len$1$i$i$i$i = 2;
 } else {
  if ($2) {
   $$sink$i$i = 0;$$sink$i$i$ph$i$i = 1;$$sink$sink$i$i$ph$i$i = 2;$$sink3$i$i = -32;$$sink6$i$i = 15;$len$1$i$i$ph$i$i = 3;
  } else {
   $15 = $c >>> 18; //@line 498 "/checkout/src/libcore/char.rs"
   $16 = $15&255; //@line 498 "/checkout/src/libcore/char.rs"
   $17 = $16 | -16; //@line 498 "/checkout/src/libcore/char.rs"
   HEAP8[$_17$i$i>>0] = $17; //@line 498 "/checkout/src/libcore/char.rs"
   $$sink$i$i = 1;$$sink$i$i$ph$i$i = 2;$$sink$sink$i$i$ph$i$i = 3;$$sink3$i$i = -128;$$sink6$i$i = 63;$len$1$i$i$ph$i$i = 4;
  }
  $18 = $c >>> 12;
  $19 = $$sink6$i$i & $18;
  $20 = $19&255;
  $21 = (($_17$i$i) + ($$sink$i$i)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $22 = $20 | $$sink3$i$i;
  HEAP8[$21>>0] = $22;
  $$sink$i$i$i$i = $$sink$i$i$ph$i$i;$$sink$sink$i$i$i$i = $$sink$sink$i$i$ph$i$i;$$sink11$i$i$i$i = -128;$$sink14$i$i$i$i = 63;$len$1$i$i$i$i = $len$1$i$i$ph$i$i;
 }
 $23 = $c >>> 6;
 $24 = $$sink14$i$i$i$i & $23;
 $25 = $24&255;
 $26 = (($_17$i$i) + ($$sink$i$i$i$i)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
 $27 = $25 | $$sink11$i$i$i$i;
 HEAP8[$26>>0] = $27;
 $28 = $c & 63;
 $29 = $28&255;
 $30 = (($_17$i$i) + ($$sink$sink$i$i$i$i)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
 $31 = $29 | -128;
 HEAP8[$30>>0] = $31;
 $32 = ((($0)) + 8|0); //@line 461 "/checkout/src/liballoc/vec.rs"
 $33 = HEAP32[$32>>2]|0; //@line 461 "/checkout/src/liballoc/vec.rs"
 __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_7reserve17hbf70593baa5057a1E($0,$33,$len$1$i$i$i$i); //@line 461 "/checkout/src/liballoc/vec.rs"
 $34 = HEAP32[$32>>2]|0; //@line 1161 "/checkout/src/liballoc/vec.rs"
 $35 = (($34) + ($len$1$i$i$i$i))|0; //@line 1902 "/checkout/src/liballoc/vec.rs"
 HEAP32[$32>>2] = $35; //@line 678 "/checkout/src/liballoc/vec.rs"
 $36 = HEAP32[$0>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 $37 = (($36) + ($34)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
 _memcpy(($37|0),($_17$i$i|0),($len$1$i$i$i$i|0))|0; //@line 672 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return 0; //@line 216 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17hfcb276db77d5bb4aE($self,$c) {
 $self = $self|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self>>2]|0; //@line 215 "/checkout/src/libcore/fmt/mod.rs"
 $1 = (__ZN4core3fmt5Write10write_char17h8a01fa0e9f290dbeE($0,$c)|0); //@line 215 "/checkout/src/libcore/fmt/mod.rs"
 return ($1|0); //@line 216 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17h2eff75272aab797aE($self,$args) {
 $self = $self|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $_6$i = 0, $_8$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_8$i = sp + 8|0;
 $_6$i = sp;
 $0 = HEAP32[$self>>2]|0; //@line 219 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_6$i>>2] = $0; //@line 223 "/checkout/src/libcore/fmt/mod.rs"
 ;HEAP32[$_8$i>>2]=HEAP32[$args>>2]|0;HEAP32[$_8$i+4>>2]=HEAP32[$args+4>>2]|0;HEAP32[$_8$i+8>>2]=HEAP32[$args+8>>2]|0;HEAP32[$_8$i+12>>2]=HEAP32[$args+12>>2]|0;HEAP32[$_8$i+16>>2]=HEAP32[$args+16>>2]|0;HEAP32[$_8$i+20>>2]=HEAP32[$args+20>>2]|0; //@line 223 "/checkout/src/libcore/fmt/mod.rs"
 $1 = (__ZN4core3fmt5write17h6c8dbcbe50728a23E($_6$i,9112,$_8$i)|0); //@line 223 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return ($1|0); //@line 220 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17h8870975ff34002a5E($self,$args) {
 $self = $self|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $_6$i = 0, $_8$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_8$i = sp + 8|0;
 $_6$i = sp;
 $0 = HEAP32[$self>>2]|0; //@line 219 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_6$i>>2] = $0; //@line 223 "/checkout/src/libcore/fmt/mod.rs"
 ;HEAP32[$_8$i>>2]=HEAP32[$args>>2]|0;HEAP32[$_8$i+4>>2]=HEAP32[$args+4>>2]|0;HEAP32[$_8$i+8>>2]=HEAP32[$args+8>>2]|0;HEAP32[$_8$i+12>>2]=HEAP32[$args+12>>2]|0;HEAP32[$_8$i+16>>2]=HEAP32[$args+16>>2]|0;HEAP32[$_8$i+20>>2]=HEAP32[$args+20>>2]|0; //@line 223 "/checkout/src/libcore/fmt/mod.rs"
 $1 = (__ZN4core3fmt5write17h6c8dbcbe50728a23E($_6$i,9388,$_8$i)|0); //@line 223 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return ($1|0); //@line 220 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17h93c000a4fcb94546E($self,$args) {
 $self = $self|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $_6$i = 0, $_8$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_8$i = sp + 8|0;
 $_6$i = sp;
 $0 = HEAP32[$self>>2]|0; //@line 219 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_6$i>>2] = $0; //@line 223 "/checkout/src/libcore/fmt/mod.rs"
 ;HEAP32[$_8$i>>2]=HEAP32[$args>>2]|0;HEAP32[$_8$i+4>>2]=HEAP32[$args+4>>2]|0;HEAP32[$_8$i+8>>2]=HEAP32[$args+8>>2]|0;HEAP32[$_8$i+12>>2]=HEAP32[$args+12>>2]|0;HEAP32[$_8$i+16>>2]=HEAP32[$args+16>>2]|0;HEAP32[$_8$i+20>>2]=HEAP32[$args+20>>2]|0; //@line 223 "/checkout/src/libcore/fmt/mod.rs"
 $1 = (__ZN4core3fmt5write17h6c8dbcbe50728a23E($_6$i,9364,$_8$i)|0); //@line 223 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return ($1|0); //@line 220 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h5f28a8b590256c56E($self,$s$0,$s$1) {
 $self = $self|0;
 $s$0 = $s$0|0;
 $s$1 = $s$1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$off034$i = 0, $_3$i = 0, $not$$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_3$i = sp;
 $0 = HEAP32[$self>>2]|0; //@line 211 "/checkout/src/libcore/fmt/mod.rs"
 $1 = HEAP32[$0>>2]|0; //@line 1151 "/checkout/src/libstd/io/mod.rs"
 __ZN3std2io5Write9write_all17h8167ba58fb9df2caE($_3$i,$1,$s$0,$s$1); //@line 1151 "/checkout/src/libstd/io/mod.rs"
 $2 = HEAP8[$_3$i>>0]|0; //@line 1152 "/checkout/src/libstd/io/mod.rs"
 $3 = ($2<<24>>24)==(3); //@line 1152 "/checkout/src/libstd/io/mod.rs"
 if ($3) {
  $_0$0$off034$i = 0;
  STACKTOP = sp;return ($_0$0$off034$i|0); //@line 212 "/checkout/src/libcore/fmt/mod.rs"
 }
 $5 = $_3$i; //@line 1153 "/checkout/src/libstd/io/mod.rs"
 $6 = $5; //@line 1153 "/checkout/src/libstd/io/mod.rs"
 $7 = HEAP32[$6>>2]|0; //@line 1153 "/checkout/src/libstd/io/mod.rs"
 $8 = (($5) + 4)|0; //@line 1153 "/checkout/src/libstd/io/mod.rs"
 $9 = $8; //@line 1153 "/checkout/src/libstd/io/mod.rs"
 $10 = HEAP32[$9>>2]|0; //@line 1153 "/checkout/src/libstd/io/mod.rs"
 $11 = ((($0)) + 4|0); //@line 1154 "/checkout/src/libstd/io/mod.rs"
 $12 = HEAP8[$11>>0]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $13 = ($12<<24>>24)==(3); //@line 59 "/checkout/src/libcore/ptr.rs"
 $14 = $7&255; //@line 59 "/checkout/src/libcore/ptr.rs"
 if (!($13)) {
  __THREW__ = 0;
  invoke_vi(454,($11|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if ($16) {
   $4 = ___cxa_find_matching_catch_2()|0;
   $21 = tempRet0;
   $22 = $11; //@line 1154 "/checkout/src/libstd/io/mod.rs"
   $23 = $22; //@line 1154 "/checkout/src/libstd/io/mod.rs"
   HEAP32[$23>>2] = $7; //@line 1154 "/checkout/src/libstd/io/mod.rs"
   $24 = (($22) + 4)|0; //@line 1154 "/checkout/src/libstd/io/mod.rs"
   $25 = $24; //@line 1154 "/checkout/src/libstd/io/mod.rs"
   HEAP32[$25>>2] = $10; //@line 1154 "/checkout/src/libstd/io/mod.rs"
   $not$$i = ($14<<24>>24)==(3); //@line 1158 "/checkout/src/libstd/io/mod.rs"
   if (!($not$$i)) {
    ___resumeException($4|0);
    // unreachable;
   }
   __ZN4core3ptr13drop_in_place17h7099c24ba8976e54E_llvm_DBC6AE32($_3$i); //@line 1158 "/checkout/src/libstd/io/mod.rs"
   ___resumeException($4|0);
   // unreachable;
  }
 }
 $17 = $11; //@line 1154 "/checkout/src/libstd/io/mod.rs"
 $18 = $17; //@line 1154 "/checkout/src/libstd/io/mod.rs"
 HEAP32[$18>>2] = $7; //@line 1154 "/checkout/src/libstd/io/mod.rs"
 $19 = (($17) + 4)|0; //@line 1154 "/checkout/src/libstd/io/mod.rs"
 $20 = $19; //@line 1154 "/checkout/src/libstd/io/mod.rs"
 HEAP32[$20>>2] = $10; //@line 1154 "/checkout/src/libstd/io/mod.rs"
 $_0$0$off034$i = 1;
 STACKTOP = sp;return ($_0$0$off034$i|0); //@line 212 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17ha35fdc72574ef215E($self,$s$0,$s$1) {
 $self = $self|0;
 $s$0 = $s$0|0;
 $s$1 = $s$1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self>>2]|0; //@line 211 "/checkout/src/libcore/fmt/mod.rs"
 $1 = ((($0)) + 8|0); //@line 461 "/checkout/src/liballoc/vec.rs"
 $2 = HEAP32[$1>>2]|0; //@line 461 "/checkout/src/liballoc/vec.rs"
 __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_7reserve17hbf70593baa5057a1E($0,$2,$s$1); //@line 461 "/checkout/src/liballoc/vec.rs"
 $3 = HEAP32[$1>>2]|0; //@line 1161 "/checkout/src/liballoc/vec.rs"
 $4 = (($3) + ($s$1))|0; //@line 1902 "/checkout/src/liballoc/vec.rs"
 HEAP32[$1>>2] = $4; //@line 678 "/checkout/src/liballoc/vec.rs"
 $5 = HEAP32[$0>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 $6 = (($5) + ($3)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
 _memcpy(($6|0),($s$0|0),($s$1|0))|0; //@line 672 "/checkout/src/libcore/slice/mod.rs"
 return 0; //@line 212 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17hde67e0a1b4102f16E($self,$s$0,$s$1) {
 $self = $self|0;
 $s$0 = $s$0|0;
 $s$1 = $s$1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$off034$i = 0, $_3$i = 0, $not$$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_3$i = sp;
 $0 = HEAP32[$self>>2]|0; //@line 211 "/checkout/src/libcore/fmt/mod.rs"
 $1 = HEAP32[$0>>2]|0; //@line 1151 "/checkout/src/libstd/io/mod.rs"
 __ZN3std2io5Write9write_all17hc644b454b3f66eb7E($_3$i,$1,$s$0,$s$1); //@line 1151 "/checkout/src/libstd/io/mod.rs"
 $2 = HEAP8[$_3$i>>0]|0; //@line 1152 "/checkout/src/libstd/io/mod.rs"
 $3 = ($2<<24>>24)==(3); //@line 1152 "/checkout/src/libstd/io/mod.rs"
 if ($3) {
  $_0$0$off034$i = 0;
  STACKTOP = sp;return ($_0$0$off034$i|0); //@line 212 "/checkout/src/libcore/fmt/mod.rs"
 }
 $5 = $_3$i; //@line 1153 "/checkout/src/libstd/io/mod.rs"
 $6 = $5; //@line 1153 "/checkout/src/libstd/io/mod.rs"
 $7 = HEAP32[$6>>2]|0; //@line 1153 "/checkout/src/libstd/io/mod.rs"
 $8 = (($5) + 4)|0; //@line 1153 "/checkout/src/libstd/io/mod.rs"
 $9 = $8; //@line 1153 "/checkout/src/libstd/io/mod.rs"
 $10 = HEAP32[$9>>2]|0; //@line 1153 "/checkout/src/libstd/io/mod.rs"
 $11 = ((($0)) + 4|0); //@line 1154 "/checkout/src/libstd/io/mod.rs"
 $12 = HEAP8[$11>>0]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 $13 = ($12<<24>>24)==(3); //@line 59 "/checkout/src/libcore/ptr.rs"
 $14 = $7&255; //@line 59 "/checkout/src/libcore/ptr.rs"
 if (!($13)) {
  __THREW__ = 0;
  invoke_vi(454,($11|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if ($16) {
   $4 = ___cxa_find_matching_catch_2()|0;
   $21 = tempRet0;
   $22 = $11; //@line 1154 "/checkout/src/libstd/io/mod.rs"
   $23 = $22; //@line 1154 "/checkout/src/libstd/io/mod.rs"
   HEAP32[$23>>2] = $7; //@line 1154 "/checkout/src/libstd/io/mod.rs"
   $24 = (($22) + 4)|0; //@line 1154 "/checkout/src/libstd/io/mod.rs"
   $25 = $24; //@line 1154 "/checkout/src/libstd/io/mod.rs"
   HEAP32[$25>>2] = $10; //@line 1154 "/checkout/src/libstd/io/mod.rs"
   $not$$i = ($14<<24>>24)==(3); //@line 1158 "/checkout/src/libstd/io/mod.rs"
   if (!($not$$i)) {
    ___resumeException($4|0);
    // unreachable;
   }
   __ZN4core3ptr13drop_in_place17h7099c24ba8976e54E_llvm_DBC6AE32($_3$i); //@line 1158 "/checkout/src/libstd/io/mod.rs"
   ___resumeException($4|0);
   // unreachable;
  }
 }
 $17 = $11; //@line 1154 "/checkout/src/libstd/io/mod.rs"
 $18 = $17; //@line 1154 "/checkout/src/libstd/io/mod.rs"
 HEAP32[$18>>2] = $7; //@line 1154 "/checkout/src/libstd/io/mod.rs"
 $19 = (($17) + 4)|0; //@line 1154 "/checkout/src/libstd/io/mod.rs"
 $20 = $19; //@line 1154 "/checkout/src/libstd/io/mod.rs"
 HEAP32[$20>>2] = $10; //@line 1154 "/checkout/src/libstd/io/mod.rs"
 $_0$0$off034$i = 1;
 STACKTOP = sp;return ($_0$0$off034$i|0); //@line 212 "/checkout/src/libcore/fmt/mod.rs"
}
function ___rust_maybe_catch_panic($f,$data,$data_ptr,$vtable_ptr) {
 $f = $f|0;
 $data = $data|0;
 $data_ptr = $data_ptr|0;
 $vtable_ptr = $vtable_ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $_0$0 = 0, $tmp$sroa$0$0$copyload$i$i = 0, $tmp$sroa$5$0$$sroa_idx2$i$i = 0, $tmp$sroa$5$0$copyload$i$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi($f|0,($data|0)); //@line 101 "/checkout/src/libpanic_unwind/lib.rs"
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  $_0$0 = 0;
  return ($_0$0|0); //@line 109 "/checkout/src/libpanic_unwind/lib.rs"
 }
 $2 = ___cxa_find_matching_catch_3(0|0)|0;
 $3 = tempRet0;
 $4 = ($2|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
 if ($4) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(9692); //@line 33 "/checkout/src/libpanic_unwind/emcc.rs"
  // unreachable; //@line 33 "/checkout/src/libpanic_unwind/emcc.rs"
 }
 $tmp$sroa$0$0$copyload$i$i = HEAP32[$2>>2]|0; //@line 288 "/checkout/src/libcore/ptr.rs"
 $tmp$sroa$5$0$$sroa_idx2$i$i = ((($2)) + 4|0); //@line 288 "/checkout/src/libcore/ptr.rs"
 $tmp$sroa$5$0$copyload$i$i1 = HEAP32[$tmp$sroa$5$0$$sroa_idx2$i$i>>2]|0; //@line 288 "/checkout/src/libcore/ptr.rs"
 ___cxa_free_exception(($2|0)); //@line 35 "/checkout/src/libpanic_unwind/emcc.rs"
 $5 = $tmp$sroa$0$0$copyload$i$i; //@line 105 "/checkout/src/libpanic_unwind/lib.rs"
 HEAP32[$data_ptr>>2] = $5; //@line 105 "/checkout/src/libpanic_unwind/lib.rs"
 HEAP32[$vtable_ptr>>2] = $tmp$sroa$5$0$copyload$i$i1; //@line 106 "/checkout/src/libpanic_unwind/lib.rs"
 $_0$0 = 1;
 return ($_0$0|0); //@line 109 "/checkout/src/libpanic_unwind/lib.rs"
}
function ___rust_start_panic($data,$vtable) {
 $data = $data|0;
 $vtable = $vtable|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $vtable; //@line 118 "/checkout/src/libpanic_unwind/lib.rs"
 $1 = $data; //@line 116 "/checkout/src/libpanic_unwind/lib.rs"
 $2 = (__ZN12panic_unwind3imp5panic17he541f10ea5d24446E($1,$0)|0); //@line 116 "/checkout/src/libpanic_unwind/lib.rs"
 return ($2|0); //@line 120 "/checkout/src/libpanic_unwind/lib.rs"
}
function __ZN5alloc4heap8box_free17h3d6d43903e96dcbeE_llvm_27DC143($ptr$0,$ptr$1) {
 $ptr$0 = $ptr$0|0;
 $ptr$1 = $ptr$1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ptr$1)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $1 = HEAP32[$0>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
 $2 = ($1|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
 if ($2) {
  return; //@line 265 "/checkout/src/liballoc/heap.rs"
 }
 $3 = ((($ptr$1)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $4 = HEAP32[$3>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
 ___rust_dealloc($ptr$0,$1,$4); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 265 "/checkout/src/liballoc/heap.rs"
}
function _rust_eh_personality($version,$actions,$0,$1,$exception_object,$context) {
 $version = $version|0;
 $actions = $actions|0;
 $0 = $0|0;
 $1 = $1|0;
 $exception_object = $exception_object|0;
 $context = $context|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___gxx_personality_v0(($version|0),($actions|0),($0|0),($1|0),($exception_object|0),($context|0))|0); //@line 60 "/checkout/src/libpanic_unwind/emcc.rs"
 return ($2|0); //@line 61 "/checkout/src/libpanic_unwind/emcc.rs"
}
function __ZN12panic_unwind3imp5panic17he541f10ea5d24446E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___cxa_allocate_exception(8)|0); //@line 41 "/checkout/src/libpanic_unwind/emcc.rs"
 $3 = ($2|0)==(0|0); //@line 42 "/checkout/src/libpanic_unwind/emcc.rs"
 if (!($3)) {
  $14 = $0; //@line 42 "/checkout/src/libpanic_unwind/emcc.rs"
  $15 = $1; //@line 42 "/checkout/src/libpanic_unwind/emcc.rs"
  HEAP32[$2>>2] = $14; //@line 364 "/checkout/src/libcore/ptr.rs"
  $16 = ((($2)) + 4|0); //@line 364 "/checkout/src/libcore/ptr.rs"
  HEAP32[$16>>2] = $15; //@line 364 "/checkout/src/libcore/ptr.rs"
  ___cxa_throw(($2|0),(0|0),(0|0)); //@line 47 "/checkout/src/libpanic_unwind/emcc.rs"
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(9716); //@line 49 "/checkout/src/libpanic_unwind/emcc.rs"
  // unreachable;
 }
 $4 = HEAP32[$1>>2]|0; //@line 59 "/checkout/src/libcore/ptr.rs"
 __THREW__ = 0;
 invoke_vi($4|0,($0|0)); //@line 59 "/checkout/src/libcore/ptr.rs"
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $12 = ___cxa_find_matching_catch_2()|0;
  $13 = tempRet0;
  __ZN5alloc4heap8box_free17h3d6d43903e96dcbeE_llvm_27DC143($0,$1); //@line 59 "/checkout/src/libcore/ptr.rs"
  ___resumeException($12|0);
  // unreachable;
 }
 $7 = ((($1)) + 4|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $8 = HEAP32[$7>>2]|0; //@line 258 "/checkout/src/liballoc/heap.rs"
 $9 = ($8|0)==(0); //@line 261 "/checkout/src/liballoc/heap.rs"
 if ($9) {
  return 3; //@line 50 "/checkout/src/libpanic_unwind/emcc.rs"
 }
 $10 = ((($1)) + 8|0); //@line 258 "/checkout/src/liballoc/heap.rs"
 $11 = HEAP32[$10>>2]|0; //@line 259 "/checkout/src/liballoc/heap.rs"
 ___rust_dealloc($0,$8,$11); //@line 104 "/checkout/src/liballoc/heap.rs"
 return 3; //@line 50 "/checkout/src/libpanic_unwind/emcc.rs"
}
function __ZN75__LT_unwind__libunwind___Unwind_Reason_Code_u20_as_u20_core__fmt__Debug_GT_3fmt17h2629a786098247d4E($self,$__arg_0) {
 $self = $self|0;
 $__arg_0 = $__arg_0|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$in = 0, $builder = 0, $builder1 = 0, $builder2 = 0, $builder3 = 0, $builder4 = 0, $builder5 = 0, $builder6 = 0, $builder7 = 0;
 var $builder8 = 0, $builder9 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $builder9 = sp + 108|0;
 $builder8 = sp + 96|0;
 $builder7 = sp + 84|0;
 $builder6 = sp + 72|0;
 $builder5 = sp + 60|0;
 $builder4 = sp + 48|0;
 $builder3 = sp + 36|0;
 $builder2 = sp + 24|0;
 $builder1 = sp + 12|0;
 $builder = sp;
 $0 = HEAP32[$self>>2]|0; //@line 21 "/checkout/src/libunwind/libunwind.rs"
 $trunc = $0&255; //@line 21 "/checkout/src/libunwind/libunwind.rs"
 $trunc$clear = $trunc & 15; //@line 21 "/checkout/src/libunwind/libunwind.rs"
 do {
  switch ($trunc$clear<<24>>24) {
  case 0:  {
   __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder,$__arg_0,24563,14); //@line 21 "/checkout/src/libunwind/libunwind.rs"
   $1 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder)|0); //@line 21 "/checkout/src/libunwind/libunwind.rs"
   $_0$0$in = $1;
   break;
  }
  case 1:  {
   __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder1,$__arg_0,24577,29); //@line 21 "/checkout/src/libunwind/libunwind.rs"
   $2 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder1)|0); //@line 21 "/checkout/src/libunwind/libunwind.rs"
   $_0$0$in = $2;
   break;
  }
  case 2:  {
   __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder2,$__arg_0,24606,23); //@line 21 "/checkout/src/libunwind/libunwind.rs"
   $3 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder2)|0); //@line 21 "/checkout/src/libunwind/libunwind.rs"
   $_0$0$in = $3;
   break;
  }
  case 3:  {
   __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder3,$__arg_0,24629,23); //@line 21 "/checkout/src/libunwind/libunwind.rs"
   $4 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder3)|0); //@line 21 "/checkout/src/libunwind/libunwind.rs"
   $_0$0$in = $4;
   break;
  }
  case 4:  {
   __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder4,$__arg_0,24652,16); //@line 21 "/checkout/src/libunwind/libunwind.rs"
   $5 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder4)|0); //@line 21 "/checkout/src/libunwind/libunwind.rs"
   $_0$0$in = $5;
   break;
  }
  case 5:  {
   __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder5,$__arg_0,24668,17); //@line 21 "/checkout/src/libunwind/libunwind.rs"
   $6 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder5)|0); //@line 21 "/checkout/src/libunwind/libunwind.rs"
   $_0$0$in = $6;
   break;
  }
  case 6:  {
   __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder6,$__arg_0,24685,18); //@line 21 "/checkout/src/libunwind/libunwind.rs"
   $7 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder6)|0); //@line 21 "/checkout/src/libunwind/libunwind.rs"
   $_0$0$in = $7;
   break;
  }
  case 7:  {
   __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder7,$__arg_0,24703,20); //@line 21 "/checkout/src/libunwind/libunwind.rs"
   $8 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder7)|0); //@line 21 "/checkout/src/libunwind/libunwind.rs"
   $_0$0$in = $8;
   break;
  }
  case 8:  {
   __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder8,$__arg_0,24723,20); //@line 21 "/checkout/src/libunwind/libunwind.rs"
   $9 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder8)|0); //@line 21 "/checkout/src/libunwind/libunwind.rs"
   $_0$0$in = $9;
   break;
  }
  case 9:  {
   __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder9,$__arg_0,24743,12); //@line 21 "/checkout/src/libunwind/libunwind.rs"
   $10 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder9)|0); //@line 21 "/checkout/src/libunwind/libunwind.rs"
   $_0$0$in = $10;
   break;
  }
  default: {
   // unreachable; //@line 21 "/checkout/src/libunwind/libunwind.rs"
  }
  }
 } while(0);
 STACKTOP = sp;return ($_0$0$in|0); //@line 21 "/checkout/src/libunwind/libunwind.rs"
}
function __ZN64__LT_alloc_system__System_u20_as_u20_alloc__allocator__Alloc_GT_3oom17hdfda2c8531b88263E($self,$err) {
 $self = $self|0;
 $err = $err|0;
 var $_5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_5 = sp;
 ;HEAP32[$_5>>2]=HEAP32[$err>>2]|0;HEAP32[$_5+4>>2]=HEAP32[$err+4>>2]|0;HEAP32[$_5+8>>2]=HEAP32[$err+8>>2]|0; //@line 81 "/checkout/src/liballoc_system/lib.rs"
 __ZN12alloc_system8platform89__LT_impl_u20_alloc__allocator__Alloc_u20_for_u20__RF__u27_a_u20_alloc_system__System_GT_3oom17h9b20bb110bd38049E(0,$_5); //@line 81 "/checkout/src/liballoc_system/lib.rs"
 // unreachable; //@line 81 "/checkout/src/liballoc_system/lib.rs"
}
function __ZN12alloc_system8platform89__LT_impl_u20_alloc__allocator__Alloc_u20_for_u20__RF__u27_a_u20_alloc_system__System_GT_3oom17h9b20bb110bd38049E($self,$err) {
 $self = $self|0;
 $err = $err|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $_14 = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$4$0$$sroa_idx2$i = 0, $_6 = 0, $_7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_6 = sp + 32|0;
 $_14 = sp + 24|0;
 $_7 = sp;
 HEAP32[$_14>>2] = $err; //@line 208 "/checkout/src/liballoc_system/lib.rs"
 $0 = ((($_14)) + 4|0); //@line 208 "/checkout/src/liballoc_system/lib.rs"
 HEAP32[$0>>2] = 457; //@line 208 "/checkout/src/liballoc_system/lib.rs"
 HEAP32[$_7>>2] = 9740; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $1 = ((($_7)) + 4|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$1>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $_5$sroa$0$0$$sroa_idx$i = ((($_7)) + 8|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 11348; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $_5$sroa$4$0$$sroa_idx2$i = ((($_7)) + 12|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5$sroa$4$0$$sroa_idx2$i>>2] = 1; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $2 = ((($_7)) + 16|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$2>>2] = $_14; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $3 = ((($_7)) + 20|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$3>>2] = 1; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 (__ZN4core3fmt5Write9write_fmt17ha7ed3de1c8f77613E($_6,$_7)|0); //@line 208 "/checkout/src/liballoc_system/lib.rs"
 _llvm_trap(); //@line 210 "/checkout/src/liballoc_system/lib.rs"
 // unreachable; //@line 210 "/checkout/src/liballoc_system/lib.rs"
}
function __ZN4core3ptr13drop_in_place17heb60fb1ea7d874d7E($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3fmt5Write9write_fmt17ha7ed3de1c8f77613E($self,$args) {
 $self = $self|0;
 $args = $args|0;
 var $0 = 0, $_6 = 0, $_8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_8 = sp + 8|0;
 $_6 = sp;
 HEAP32[$_6>>2] = $self; //@line 223 "/checkout/src/libcore/fmt/mod.rs"
 ;HEAP32[$_8>>2]=HEAP32[$args>>2]|0;HEAP32[$_8+4>>2]=HEAP32[$args+4>>2]|0;HEAP32[$_8+8>>2]=HEAP32[$args+8>>2]|0;HEAP32[$_8+12>>2]=HEAP32[$args+12>>2]|0;HEAP32[$_8+16>>2]=HEAP32[$args+16>>2]|0;HEAP32[$_8+20>>2]=HEAP32[$args+20>>2]|0; //@line 223 "/checkout/src/libcore/fmt/mod.rs"
 $0 = (__ZN4core3fmt5write17h6c8dbcbe50728a23E($_6,9756,$_8)|0); //@line 223 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return ($0|0); //@line 224 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h3c9a1d78d4c7dab0E($self,$c) {
 $self = $self|0;
 $c = $c|0;
 var $$sink$i$i = 0, $$sink$sink$i$i = 0, $$sink11$i$i = 0, $$sink14$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10$i = 0, $len$1$i$i = 0, $len$2$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_10$i = sp;
 HEAP32[$_10$i>>2] = 0; //@line 177 "/checkout/src/libcore/fmt/mod.rs"
 $0 = ($c>>>0)<(128); //@line 485 "/checkout/src/libcore/char.rs"
 if ($0) {
  $1 = $c&255; //@line 486 "/checkout/src/libcore/char.rs"
  HEAP8[$_10$i>>0] = $1; //@line 486 "/checkout/src/libcore/char.rs"
  $len$2$i$i = 1;
  (_write(2,$_10$i,$len$2$i$i)|0); //@line 218 "/checkout/src/liballoc_system/lib.rs"
  STACKTOP = sp;return 0; //@line 216 "/checkout/src/libcore/fmt/mod.rs"
 }
 $2 = ($c>>>0)<(2048); //@line 488 "/checkout/src/libcore/char.rs"
 do {
  if ($2) {
   $$sink$i$i = 0;$$sink$sink$i$i = 1;$$sink11$i$i = -64;$$sink14$i$i = 31;$len$1$i$i = 2;
  } else {
   $3 = ($c>>>0)<(65536); //@line 492 "/checkout/src/libcore/char.rs"
   if ($3) {
    $4 = $c >>> 12; //@line 493 "/checkout/src/libcore/char.rs"
    $5 = $4 & 15; //@line 493 "/checkout/src/libcore/char.rs"
    $6 = $5&255; //@line 493 "/checkout/src/libcore/char.rs"
    $7 = $6 | -32; //@line 493 "/checkout/src/libcore/char.rs"
    HEAP8[$_10$i>>0] = $7; //@line 493 "/checkout/src/libcore/char.rs"
    $$sink$i$i = 1;$$sink$sink$i$i = 2;$$sink11$i$i = -128;$$sink14$i$i = 63;$len$1$i$i = 3;
    break;
   } else {
    $8 = $c >>> 18; //@line 498 "/checkout/src/libcore/char.rs"
    $9 = $8&255; //@line 498 "/checkout/src/libcore/char.rs"
    $10 = $9 | -16; //@line 498 "/checkout/src/libcore/char.rs"
    HEAP8[$_10$i>>0] = $10; //@line 498 "/checkout/src/libcore/char.rs"
    $11 = $c >>> 12; //@line 499 "/checkout/src/libcore/char.rs"
    $12 = $11 & 63; //@line 499 "/checkout/src/libcore/char.rs"
    $13 = $12&255; //@line 499 "/checkout/src/libcore/char.rs"
    $14 = ((($_10$i)) + 1|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
    $15 = $13 | -128; //@line 499 "/checkout/src/libcore/char.rs"
    HEAP8[$14>>0] = $15; //@line 499 "/checkout/src/libcore/char.rs"
    $$sink$i$i = 2;$$sink$sink$i$i = 3;$$sink11$i$i = -128;$$sink14$i$i = 63;$len$1$i$i = 4;
    break;
   }
  }
 } while(0);
 $16 = $c >>> 6;
 $17 = $$sink14$i$i & $16;
 $18 = $17&255;
 $19 = (($_10$i) + ($$sink$i$i)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
 $20 = $18 | $$sink11$i$i;
 HEAP8[$19>>0] = $20;
 $21 = $c & 63;
 $22 = $21&255;
 $23 = (($_10$i) + ($$sink$sink$i$i)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
 $24 = $22 | -128;
 HEAP8[$23>>0] = $24;
 $len$2$i$i = $len$1$i$i;
 (_write(2,$_10$i,$len$2$i$i)|0); //@line 218 "/checkout/src/liballoc_system/lib.rs"
 STACKTOP = sp;return 0; //@line 216 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17hfac2ac9a40073f70E($self,$args) {
 $self = $self|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $_6$i = 0, $_8$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_8$i = sp + 8|0;
 $_6$i = sp;
 $0 = HEAP32[$self>>2]|0; //@line 219 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_6$i>>2] = $0; //@line 223 "/checkout/src/libcore/fmt/mod.rs"
 ;HEAP32[$_8$i>>2]=HEAP32[$args>>2]|0;HEAP32[$_8$i+4>>2]=HEAP32[$args+4>>2]|0;HEAP32[$_8$i+8>>2]=HEAP32[$args+8>>2]|0;HEAP32[$_8$i+12>>2]=HEAP32[$args+12>>2]|0;HEAP32[$_8$i+16>>2]=HEAP32[$args+16>>2]|0;HEAP32[$_8$i+20>>2]=HEAP32[$args+20>>2]|0; //@line 223 "/checkout/src/libcore/fmt/mod.rs"
 $1 = (__ZN4core3fmt5write17h6c8dbcbe50728a23E($_6$i,9756,$_8$i)|0); //@line 223 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return ($1|0); //@line 220 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h33935be6da5ad51eE($self,$s$0,$s$1) {
 $self = $self|0;
 $s$0 = $s$0|0;
 $s$1 = $s$1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_write(2,$s$0,$s$1)|0); //@line 218 "/checkout/src/liballoc_system/lib.rs"
 return 0; //@line 212 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN4core3ptr13drop_in_place17hf92fb41beb304176E($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN87__LT_alloc__string__String_u20_as_u20_core__convert__From_LT__RF__u27_a_u20_str_GT__GT_4from17h54dddae36c47961eE($0,$s$0,$s$1) {
 $0 = $0|0;
 $s$0 = $s$0|0;
 $s$1 = $s$1|0;
 var $_2$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_2$i = sp;
 __ZN5alloc5slice64__LT_impl_u20_alloc__borrow__ToOwned_u20_for_u20__u5b_T_u5d__GT_8to_owned17h7c578cd7fcf6faf7E($_2$i,$s$0,$s$1); //@line 189 "/checkout/src/liballoc/str.rs"
 ;HEAP32[$0>>2]=HEAP32[$_2$i>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_2$i+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_2$i+8>>2]|0; //@line 729 "/checkout/src/liballoc/string.rs"
 STACKTOP = sp;return; //@line 2104 "/checkout/src/liballoc/string.rs"
}
function __ZN5alloc3str56__LT_impl_u20_alloc__borrow__ToOwned_u20_for_u20_str_GT_8to_owned17habeeaee441196d3bE($0,$self$0,$self$1) {
 $0 = $0|0;
 $self$0 = $self$0|0;
 $self$1 = $self$1|0;
 var $_2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_2 = sp;
 __ZN5alloc5slice64__LT_impl_u20_alloc__borrow__ToOwned_u20_for_u20__u5b_T_u5d__GT_8to_owned17h7c578cd7fcf6faf7E($_2,$self$0,$self$1); //@line 189 "/checkout/src/liballoc/str.rs"
 ;HEAP32[$0>>2]=HEAP32[$_2>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_2+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_2+8>>2]|0; //@line 729 "/checkout/src/liballoc/string.rs"
 STACKTOP = sp;return; //@line 190 "/checkout/src/liballoc/str.rs"
}
function __ZN4core3ptr13drop_in_place17hd3808eb88bb7aad4E_llvm_CBB0296A($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($arg0)) + 4|0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $1 = HEAP32[$0>>2]|0; //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $2 = ($1|0)==(0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 if ($2) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 $3 = HEAP32[$arg0>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 ___rust_dealloc($3,$1,1); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN5alloc3fmt6format17h9b28a0d324b081e9E($0,$args) {
 $0 = $0|0;
 $args = $args|0;
 var $$arith = 0, $$arith7 = 0, $$index = 0, $$index2 = 0, $$overflow = 0, $$overflow8 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_2$sroa$4$0$$sroa_idx$i = 0, $_2$sroa$5$0$$sroa_idx$i = 0, $_35$i = 0;
 var $_6$i = 0, $_8$i = 0, $accum$0$lcssa$i$i$i$i = 0, $accum$012$i$i$i$i = 0, $err$i$i = 0, $output = 0, $ptr$0$i = 0, $self$sroa$0$011$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_8$i = sp + 40|0;
 $_6$i = sp + 36|0;
 $err$i$i = sp + 24|0;
 $_35$i = sp + 12|0;
 $output = sp;
 $1 = HEAP32[$args>>2]|0; //@line 377 "/checkout/src/libcore/fmt/mod.rs"
 $2 = ((($args)) + 4|0); //@line 377 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$2>>2]|0; //@line 377 "/checkout/src/libcore/fmt/mod.rs"
 $4 = (($1) + ($3<<3)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
 $5 = ($1|0)==($4|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
 if ($5) {
  $accum$0$lcssa$i$i$i$i = 0;
 } else {
  $accum$012$i$i$i$i = 0;$self$sroa$0$011$i$i$i$i = $1;
  while(1) {
   $6 = ((($self$sroa$0$011$i$i$i$i)) + 8|0); //@line 623 "/checkout/src/libcore/ptr.rs"
   $7 = ((($self$sroa$0$011$i$i$i$i)) + 4|0); //@line 378 "/checkout/src/libcore/fmt/mod.rs"
   $8 = HEAP32[$7>>2]|0; //@line 378 "/checkout/src/libcore/fmt/mod.rs"
   $9 = (($8) + ($accum$012$i$i$i$i))|0; //@line 97 "/checkout/src/libcore/ops/arith.rs"
   $10 = ($6|0)==($4|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
   if ($10) {
    $accum$0$lcssa$i$i$i$i = $9;
    break;
   } else {
    $accum$012$i$i$i$i = $9;$self$sroa$0$011$i$i$i$i = $6;
   }
  }
 }
 $11 = ((($args)) + 20|0); //@line 380 "/checkout/src/libcore/fmt/mod.rs"
 $12 = HEAP32[$11>>2]|0; //@line 380 "/checkout/src/libcore/fmt/mod.rs"
 $13 = ($12|0)==(0); //@line 140 "/checkout/src/libcore/slice/mod.rs"
 do {
  if ($13) {
   $20 = $accum$0$lcssa$i$i$i$i;
   label = 12;
  } else {
   $14 = ($3|0)==(0); //@line 382 "/checkout/src/libcore/fmt/mod.rs"
   if ($14) {
    __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(9804,0,0); //@line 382 "/checkout/src/libcore/fmt/mod.rs"
    // unreachable; //@line 382 "/checkout/src/libcore/fmt/mod.rs"
   }
   $15 = ((($1)) + 4|0); //@line 912 "/checkout/src/libcore/cmp.rs"
   $16 = HEAP32[$15>>2]|0; //@line 912 "/checkout/src/libcore/cmp.rs"
   $17 = ($16|0)==(0); //@line 2489 "/checkout/src/libcore/slice/mod.rs"
   if ($17) {
    $18 = ($accum$0$lcssa$i$i$i$i>>>0)<(16); //@line 382 "/checkout/src/libcore/fmt/mod.rs"
    $$arith = $accum$0$lcssa$i$i$i$i<<1; //@line 2032 "/checkout/src/libcore/num/mod.rs"
    $$overflow = ($accum$0$lcssa$i$i$i$i>>>0)>(2147483647); //@line 2032 "/checkout/src/libcore/num/mod.rs"
    if (!($18)) {
     $$index = $$arith;$$index2 = $$overflow;
     label = 6;
    }
   } else {
    $$arith7 = $accum$0$lcssa$i$i$i$i<<1; //@line 2032 "/checkout/src/libcore/num/mod.rs"
    $$overflow8 = ($accum$0$lcssa$i$i$i$i>>>0)>(2147483647); //@line 2032 "/checkout/src/libcore/num/mod.rs"
    $$index = $$arith7;$$index2 = $$overflow8;
    label = 6;
   }
   if ((label|0) == 6) {
    if (!($$index2)) {
     $20 = $$index;
     label = 12;
     break;
    }
   }
   $24 = 0;$29 = $output;$ptr$0$i = (1);
  }
 } while(0);
 if ((label|0) == 12) {
  $19 = ($20|0)<(0); //@line 714 "/checkout/src/liballoc/raw_vec.rs"
  if ($19) {
   __ZN4core9panicking5panic17h9fa3414033a56a4dE(9860); //@line 714 "/checkout/src/liballoc/raw_vec.rs"
   // unreachable; //@line 714 "/checkout/src/liballoc/raw_vec.rs"
  }
  $21 = ($20|0)==(0); //@line 90 "/checkout/src/liballoc/raw_vec.rs"
  if ($21) {
   $24 = 0;$29 = $output;$ptr$0$i = (1);
  } else {
   $22 = (___rust_alloc($20,1,$err$i$i)|0); //@line 84 "/checkout/src/liballoc/heap.rs"
   $23 = ($22|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
   if ($23) {
    HEAP32[$_35$i>>2] = 0; //@line 101 "/checkout/src/liballoc/raw_vec.rs"
    ___rust_oom($_35$i); //@line 98 "/checkout/src/liballoc/heap.rs"
    // unreachable; //@line 98 "/checkout/src/liballoc/heap.rs"
   } else {
    $24 = $20;$29 = $output;$ptr$0$i = $22;
   }
  }
 }
 HEAP32[$output>>2] = $ptr$0$i; //@line 427 "/checkout/src/liballoc/string.rs"
 $_2$sroa$4$0$$sroa_idx$i = ((($output)) + 4|0); //@line 427 "/checkout/src/liballoc/string.rs"
 HEAP32[$_2$sroa$4$0$$sroa_idx$i>>2] = $24; //@line 427 "/checkout/src/liballoc/string.rs"
 $_2$sroa$5$0$$sroa_idx$i = ((($output)) + 8|0); //@line 427 "/checkout/src/liballoc/string.rs"
 HEAP32[$_2$sroa$5$0$$sroa_idx$i>>2] = 0; //@line 427 "/checkout/src/liballoc/string.rs"
 HEAP32[$_6$i>>2] = $output; //@line 223 "/checkout/src/libcore/fmt/mod.rs"
 ;HEAP32[$_8$i>>2]=HEAP32[$args>>2]|0;HEAP32[$_8$i+4>>2]=HEAP32[$args+4>>2]|0;HEAP32[$_8$i+8>>2]=HEAP32[$args+8>>2]|0;HEAP32[$_8$i+12>>2]=HEAP32[$args+12>>2]|0;HEAP32[$_8$i+16>>2]=HEAP32[$args+16>>2]|0;HEAP32[$_8$i+20>>2]=HEAP32[$args+20>>2]|0; //@line 223 "/checkout/src/libcore/fmt/mod.rs"
 __THREW__ = 0;
 $25 = (invoke_iiii(424,($_6$i|0),(9780|0),($_8$i|0))|0); //@line 223 "/checkout/src/libcore/fmt/mod.rs"
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $30 = ___cxa_find_matching_catch_2()|0;
  $31 = tempRet0;
  __ZN4core3ptr13drop_in_place17ha8cdf43b1c20df98E_1875($output); //@line 567 "/checkout/src/liballoc/fmt.rs"
  ___resumeException($30|0);
  // unreachable;
 }
 if (!($25)) {
  ;HEAP32[$0>>2]=HEAP32[$29>>2]|0;HEAP32[$0+4>>2]=HEAP32[$29+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$29+8>>2]|0; //@line 566 "/checkout/src/liballoc/fmt.rs"
  STACKTOP = sp;return; //@line 567 "/checkout/src/liballoc/fmt.rs"
 }
 __THREW__ = 0;
 invoke_vii(458,(24777|0),51); //@line 809 "/checkout/src/libcore/result.rs"
 $28 = __THREW__; __THREW__ = 0;
 $30 = ___cxa_find_matching_catch_2()|0;
 $31 = tempRet0;
 __ZN4core3ptr13drop_in_place17ha8cdf43b1c20df98E_1875($output); //@line 567 "/checkout/src/liballoc/fmt.rs"
 ___resumeException($30|0);
 // unreachable;
}
function __ZN4core3ptr13drop_in_place17ha8cdf43b1c20df98E_1875($arg0) {
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($arg0)) + 4|0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $1 = HEAP32[$0>>2]|0; //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $2 = ($1|0)==(0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 if ($2) {
  return; //@line 59 "/checkout/src/libcore/ptr.rs"
 }
 $3 = HEAP32[$arg0>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 ___rust_dealloc($3,$1,1); //@line 104 "/checkout/src/liballoc/heap.rs"
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN5alloc5slice64__LT_impl_u20_alloc__borrow__ToOwned_u20_for_u20__u5b_T_u5d__GT_8to_owned17h7c578cd7fcf6faf7E($0,$self$0,$self$1) {
 $0 = $0|0;
 $self$0 = $self$0|0;
 $self$1 = $self$1|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_35$i = 0, $err$i$i = 0, $ptr$0$i = 0, $vector$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $err$i$i = sp + 24|0;
 $_35$i = sp + 12|0;
 $vector$i$i = sp;
 $1 = ($self$1|0)<(0); //@line 714 "/checkout/src/liballoc/raw_vec.rs"
 if ($1) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(9860); //@line 714 "/checkout/src/liballoc/raw_vec.rs"
  // unreachable; //@line 714 "/checkout/src/liballoc/raw_vec.rs"
 }
 $2 = ($self$1|0)==(0); //@line 90 "/checkout/src/liballoc/raw_vec.rs"
 if ($2) {
  $ptr$0$i = (1);
 } else {
  $3 = (___rust_alloc($self$1,1,$err$i$i)|0); //@line 84 "/checkout/src/liballoc/heap.rs"
  $4 = ($3|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
  if ($4) {
   HEAP32[$_35$i>>2] = 0; //@line 101 "/checkout/src/liballoc/raw_vec.rs"
   ___rust_oom($_35$i); //@line 98 "/checkout/src/liballoc/heap.rs"
   // unreachable; //@line 98 "/checkout/src/liballoc/heap.rs"
  } else {
   $ptr$0$i = $3;
  }
 }
 HEAP32[$vector$i$i>>2] = $ptr$0$i; //@line 358 "/checkout/src/liballoc/vec.rs"
 $5 = ((($vector$i$i)) + 4|0); //@line 358 "/checkout/src/liballoc/vec.rs"
 HEAP32[$5>>2] = $self$1; //@line 358 "/checkout/src/liballoc/vec.rs"
 $6 = ((($vector$i$i)) + 8|0); //@line 358 "/checkout/src/liballoc/vec.rs"
 HEAP32[$6>>2] = 0; //@line 358 "/checkout/src/liballoc/vec.rs"
 __THREW__ = 0;
 invoke_viii(459,($vector$i$i|0),0,($self$1|0)); //@line 461 "/checkout/src/liballoc/vec.rs"
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch_2()|0;
  $10 = tempRet0;
  __ZN4core3ptr13drop_in_place17hd3808eb88bb7aad4E_llvm_CBB0296A($vector$i$i); //@line 168 "/checkout/src/liballoc/slice.rs"
  ___resumeException($9|0);
  // unreachable;
 } else {
  $11 = HEAP32[$6>>2]|0; //@line 1161 "/checkout/src/liballoc/vec.rs"
  $12 = (($11) + ($self$1))|0; //@line 1902 "/checkout/src/liballoc/vec.rs"
  HEAP32[$6>>2] = $12; //@line 678 "/checkout/src/liballoc/vec.rs"
  $13 = HEAP32[$vector$i$i>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
  $14 = (($13) + ($11)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  _memcpy(($14|0),($self$0|0),($self$1|0))|0; //@line 672 "/checkout/src/libcore/slice/mod.rs"
  ;HEAP32[$0>>2]=HEAP32[$vector$i$i>>2]|0;HEAP32[$0+4>>2]=HEAP32[$vector$i$i+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$vector$i$i+8>>2]|0; //@line 167 "/checkout/src/liballoc/slice.rs"
  STACKTOP = sp;return; //@line 1822 "/checkout/src/liballoc/slice.rs"
 }
}
function __ZN4core6result13unwrap_failed17h6d6f2059aaef4274E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_10 = 0, $_3 = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$4$0$$sroa_idx2$i = 0, $error = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $error = sp + 48|0;
 $_10 = sp + 32|0;
 $_3 = sp + 8|0;
 $msg = sp;
 HEAP32[$msg>>2] = $0;
 $2 = ((($msg)) + 4|0);
 HEAP32[$2>>2] = $1;
 HEAP32[$_10>>2] = $msg; //@line 916 "/checkout/src/libcore/result.rs"
 $3 = ((($_10)) + 4|0); //@line 916 "/checkout/src/libcore/result.rs"
 HEAP32[$3>>2] = 460; //@line 916 "/checkout/src/libcore/result.rs"
 $4 = ((($_10)) + 8|0); //@line 916 "/checkout/src/libcore/result.rs"
 HEAP32[$4>>2] = $error; //@line 916 "/checkout/src/libcore/result.rs"
 $5 = ((($_10)) + 12|0); //@line 916 "/checkout/src/libcore/result.rs"
 HEAP32[$5>>2] = 461; //@line 916 "/checkout/src/libcore/result.rs"
 HEAP32[$_3>>2] = 9820; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $6 = ((($_3)) + 4|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$6>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $_5$sroa$0$0$$sroa_idx$i = ((($_3)) + 8|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 12044; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $_5$sroa$4$0$$sroa_idx2$i = ((($_3)) + 12|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5$sroa$4$0$$sroa_idx2$i>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $7 = ((($_3)) + 16|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$7>>2] = $_10; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $8 = ((($_3)) + 20|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$8>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 __ZN4core9panicking9panic_fmt17hff08f8fc41769480E($_3,9836); //@line 23 "/checkout/src/libcore/macros.rs"
 // unreachable;
}
function __ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17h423824ef576159ecE($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self>>2]|0; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $1 = ((($self)) + 4|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $2 = HEAP32[$1>>2]|0; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $3 = (__ZN42__LT_str_u20_as_u20_core__fmt__Display_GT_3fmt17hd64e49219890df95E($0,$2,$f)|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 return ($3|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17hd2cbec55527f97a4E($self,$c) {
 $self = $self|0;
 $c = $c|0;
 var $$pre = 0, $$sink$i$i = 0, $$sink$i$i$i$i = 0, $$sink$i$i$ph$i$i = 0, $$sink$sink$i$i$i$i = 0, $$sink$sink$i$i$ph$i$i = 0, $$sink11$i$i$i$i = 0, $$sink14$i$i$i$i = 0, $$sink3$i$i = 0, $$sink6$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_17$i$i = 0, $len$1$i$i$i$i = 0, $len$1$i$i$ph$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_17$i$i = sp;
 $0 = HEAP32[$self>>2]|0; //@line 215 "/checkout/src/libcore/fmt/mod.rs"
 $1 = ($c>>>0)<(128); //@line 463 "/checkout/src/libcore/char.rs"
 $2 = ($c>>>0)<(65536); //@line 467 "/checkout/src/libcore/char.rs"
 if ($1) {
  $3 = $c&255; //@line 965 "/checkout/src/liballoc/string.rs"
  $4 = ((($0)) + 8|0); //@line 967 "/checkout/src/liballoc/vec.rs"
  $5 = HEAP32[$4>>2]|0; //@line 967 "/checkout/src/liballoc/vec.rs"
  $6 = ((($0)) + 4|0); //@line 210 "/checkout/src/liballoc/raw_vec.rs"
  $7 = HEAP32[$6>>2]|0; //@line 210 "/checkout/src/liballoc/raw_vec.rs"
  $8 = ($5|0)==($7|0); //@line 967 "/checkout/src/liballoc/vec.rs"
  if ($8) {
   __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_6double17h0a073022f1d0d7d1E($0); //@line 968 "/checkout/src/liballoc/vec.rs"
   $$pre = HEAP32[$4>>2]|0;
   $11 = $$pre;
  } else {
   $11 = $5;
  }
  $9 = HEAP32[$0>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
  $10 = (($9) + ($11)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  HEAP8[$10>>0] = $3; //@line 364 "/checkout/src/libcore/ptr.rs"
  $12 = HEAP32[$4>>2]|0; //@line 973 "/checkout/src/liballoc/vec.rs"
  $13 = (($12) + 1)|0; //@line 973 "/checkout/src/liballoc/vec.rs"
  HEAP32[$4>>2] = $13; //@line 973 "/checkout/src/liballoc/vec.rs"
  STACKTOP = sp;return 0; //@line 216 "/checkout/src/libcore/fmt/mod.rs"
 }
 $14 = ($c>>>0)<(2048); //@line 465 "/checkout/src/libcore/char.rs"
 HEAP32[$_17$i$i>>2] = 0; //@line 966 "/checkout/src/liballoc/string.rs"
 if ($14) {
  $$sink$i$i$i$i = 0;$$sink$sink$i$i$i$i = 1;$$sink11$i$i$i$i = -64;$$sink14$i$i$i$i = 31;$len$1$i$i$i$i = 2;
 } else {
  if ($2) {
   $$sink$i$i = 0;$$sink$i$i$ph$i$i = 1;$$sink$sink$i$i$ph$i$i = 2;$$sink3$i$i = -32;$$sink6$i$i = 15;$len$1$i$i$ph$i$i = 3;
  } else {
   $15 = $c >>> 18; //@line 498 "/checkout/src/libcore/char.rs"
   $16 = $15&255; //@line 498 "/checkout/src/libcore/char.rs"
   $17 = $16 | -16; //@line 498 "/checkout/src/libcore/char.rs"
   HEAP8[$_17$i$i>>0] = $17; //@line 498 "/checkout/src/libcore/char.rs"
   $$sink$i$i = 1;$$sink$i$i$ph$i$i = 2;$$sink$sink$i$i$ph$i$i = 3;$$sink3$i$i = -128;$$sink6$i$i = 63;$len$1$i$i$ph$i$i = 4;
  }
  $18 = $c >>> 12;
  $19 = $$sink6$i$i & $18;
  $20 = $19&255;
  $21 = (($_17$i$i) + ($$sink$i$i)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $22 = $20 | $$sink3$i$i;
  HEAP8[$21>>0] = $22;
  $$sink$i$i$i$i = $$sink$i$i$ph$i$i;$$sink$sink$i$i$i$i = $$sink$sink$i$i$ph$i$i;$$sink11$i$i$i$i = -128;$$sink14$i$i$i$i = 63;$len$1$i$i$i$i = $len$1$i$i$ph$i$i;
 }
 $23 = $c >>> 6;
 $24 = $$sink14$i$i$i$i & $23;
 $25 = $24&255;
 $26 = (($_17$i$i) + ($$sink$i$i$i$i)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
 $27 = $25 | $$sink11$i$i$i$i;
 HEAP8[$26>>0] = $27;
 $28 = $c & 63;
 $29 = $28&255;
 $30 = (($_17$i$i) + ($$sink$sink$i$i$i$i)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
 $31 = $29 | -128;
 HEAP8[$30>>0] = $31;
 $32 = ((($0)) + 8|0); //@line 461 "/checkout/src/liballoc/vec.rs"
 $33 = HEAP32[$32>>2]|0; //@line 461 "/checkout/src/liballoc/vec.rs"
 __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_7reserve17h793d16a411821ec0E($0,$33,$len$1$i$i$i$i); //@line 461 "/checkout/src/liballoc/vec.rs"
 $34 = HEAP32[$32>>2]|0; //@line 1161 "/checkout/src/liballoc/vec.rs"
 $35 = (($34) + ($len$1$i$i$i$i))|0; //@line 1902 "/checkout/src/liballoc/vec.rs"
 HEAP32[$32>>2] = $35; //@line 678 "/checkout/src/liballoc/vec.rs"
 $36 = HEAP32[$0>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 $37 = (($36) + ($34)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
 _memcpy(($37|0),($_17$i$i|0),($len$1$i$i$i$i|0))|0; //@line 672 "/checkout/src/libcore/slice/mod.rs"
 STACKTOP = sp;return 0; //@line 216 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17he36c70978b1b5980E($self,$args) {
 $self = $self|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $_6$i = 0, $_8$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_8$i = sp + 8|0;
 $_6$i = sp;
 $0 = HEAP32[$self>>2]|0; //@line 219 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_6$i>>2] = $0; //@line 223 "/checkout/src/libcore/fmt/mod.rs"
 ;HEAP32[$_8$i>>2]=HEAP32[$args>>2]|0;HEAP32[$_8$i+4>>2]=HEAP32[$args+4>>2]|0;HEAP32[$_8$i+8>>2]=HEAP32[$args+8>>2]|0;HEAP32[$_8$i+12>>2]=HEAP32[$args+12>>2]|0;HEAP32[$_8$i+16>>2]=HEAP32[$args+16>>2]|0;HEAP32[$_8$i+20>>2]=HEAP32[$args+20>>2]|0; //@line 223 "/checkout/src/libcore/fmt/mod.rs"
 $1 = (__ZN4core3fmt5write17h6c8dbcbe50728a23E($_6$i,9780,$_8$i)|0); //@line 223 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return ($1|0); //@line 220 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h74586ea09786e1c8E($self,$s$0,$s$1) {
 $self = $self|0;
 $s$0 = $s$0|0;
 $s$1 = $s$1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self>>2]|0; //@line 211 "/checkout/src/libcore/fmt/mod.rs"
 $1 = ((($0)) + 8|0); //@line 461 "/checkout/src/liballoc/vec.rs"
 $2 = HEAP32[$1>>2]|0; //@line 461 "/checkout/src/liballoc/vec.rs"
 __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_7reserve17h793d16a411821ec0E($0,$2,$s$1); //@line 461 "/checkout/src/liballoc/vec.rs"
 $3 = HEAP32[$1>>2]|0; //@line 1161 "/checkout/src/liballoc/vec.rs"
 $4 = (($3) + ($s$1))|0; //@line 1902 "/checkout/src/liballoc/vec.rs"
 HEAP32[$1>>2] = $4; //@line 678 "/checkout/src/liballoc/vec.rs"
 $5 = HEAP32[$0>>2]|0; //@line 199 "/checkout/src/liballoc/raw_vec.rs"
 $6 = (($5) + ($3)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
 _memcpy(($6|0),($s$0|0),($s$1|0))|0; //@line 672 "/checkout/src/libcore/slice/mod.rs"
 return 0; //@line 212 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN5alloc6string104__LT_impl_u20_core__convert__From_LT_alloc__string__String_GT__u20_for_u20_alloc__vec__Vec_LT_u8_GT__GT_4from17hff8cf27d000af801E($0,$string) {
 $0 = $0|0;
 $string = $string|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=HEAP32[$string>>2]|0;HEAP32[$0+4>>2]=HEAP32[$string+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$string+8>>2]|0; //@line 749 "/checkout/src/liballoc/string.rs"
 return; //@line 2171 "/checkout/src/liballoc/string.rs"
}
function __ZN65__LT_alloc__allocator__AllocErr_u20_as_u20_core__fmt__Display_GT_3fmt17h51086bd8dbdc56a7E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $$fca$1$gep = 0, $$sink$i = 0, $$sink2$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $_11 = 0, $_14 = 0, $_4 = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$4$0$$sroa_idx2$i = 0, $switch$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_14 = sp + 32|0;
 $_11 = sp + 24|0;
 $_4 = sp;
 $0 = HEAP32[$self>>2]|0; //@line 344 "/checkout/src/liballoc/allocator.rs"
 $switch$i = ($0|0)!=(1); //@line 344 "/checkout/src/liballoc/allocator.rs"
 $$sink2$i = $switch$i ? 24893 : 24919; //@line 344 "/checkout/src/liballoc/allocator.rs"
 $$sink$i = $switch$i ? 26 : 29; //@line 344 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$_14>>2] = $$sink2$i; //@line 353 "/checkout/src/liballoc/allocator.rs"
 $$fca$1$gep = ((($_14)) + 4|0); //@line 353 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$$fca$1$gep>>2] = $$sink$i; //@line 353 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$_11>>2] = $_14; //@line 353 "/checkout/src/liballoc/allocator.rs"
 $1 = ((($_11)) + 4|0); //@line 353 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$1>>2] = 460; //@line 353 "/checkout/src/liballoc/allocator.rs"
 HEAP32[$_4>>2] = 9852; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $2 = ((($_4)) + 4|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$2>>2] = 1; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $_5$sroa$0$0$$sroa_idx$i = ((($_4)) + 8|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 11348; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $_5$sroa$4$0$$sroa_idx2$i = ((($_4)) + 12|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5$sroa$4$0$$sroa_idx2$i>>2] = 1; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $3 = ((($_4)) + 16|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$3>>2] = $_11; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $4 = ((($_4)) + 20|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$4>>2] = 1; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $5 = (__ZN4core3fmt9Formatter9write_fmt17h650e8f365614dc75E($f,$_4)|0); //@line 353 "/checkout/src/liballoc/allocator.rs"
 STACKTOP = sp;return ($5|0); //@line 354 "/checkout/src/liballoc/allocator.rs"
}
function __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_6double17h0a073022f1d0d7d1E($self) {
 $self = $self|0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_11$sroa$0$0 = 0, $_11$sroa$5$0 = 0, $_42 = 0, $_58 = 0, $e$sroa$0$sroa$4$0$e$sroa$0$0$$sroa_idx7$sroa_idx = 0, $err$i = 0, $err$i$i = 0, $ptr_res$sroa$5$4$copyload2944 = 0, $ptr_res$sroa$9$4$$sroa_idx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $err$i$i = sp + 36|0;
 $err$i = sp + 24|0;
 $_58 = sp + 12|0;
 $_42 = sp;
 $0 = ((($self)) + 4|0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $1 = HEAP32[$0>>2]|0; //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 $2 = ($1|0)==(0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 if ($2) {
  $18 = (___rust_alloc(4,1,$err$i$i)|0); //@line 84 "/checkout/src/liballoc/heap.rs"
  $19 = ($18|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
  if ($19) {
   ___rust_oom($_58); //@line 98 "/checkout/src/liballoc/heap.rs"
   // unreachable; //@line 98 "/checkout/src/liballoc/heap.rs"
  }
  $$pre$phiZ2D = $self;$_11$sroa$0$0 = 4;$_11$sroa$5$0 = $18;
  HEAP32[$$pre$phiZ2D>>2] = $_11$sroa$5$0; //@line 330 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$0>>2] = $_11$sroa$0$0; //@line 331 "/checkout/src/liballoc/raw_vec.rs"
  STACKTOP = sp;return; //@line 333 "/checkout/src/liballoc/raw_vec.rs"
 }
 $3 = $1 << 1; //@line 308 "/checkout/src/liballoc/raw_vec.rs"
 $4 = ($3|0)<(0); //@line 714 "/checkout/src/liballoc/raw_vec.rs"
 if ($4) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(9860); //@line 714 "/checkout/src/liballoc/raw_vec.rs"
  // unreachable; //@line 714 "/checkout/src/liballoc/raw_vec.rs"
 }
 $5 = HEAP32[$self>>2]|0; //@line 312 "/checkout/src/liballoc/raw_vec.rs"
 $6 = (___rust_realloc($5,$1,1,$3,1,$err$i)|0); //@line 127 "/checkout/src/liballoc/heap.rs"
 $7 = ($6|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
 if ($7) {
  $ptr_res$sroa$5$4$copyload2944 = HEAP32[$err$i>>2]|0; //@line 134 "/checkout/src/liballoc/heap.rs"
  $ptr_res$sroa$9$4$$sroa_idx = ((($err$i)) + 4|0); //@line 134 "/checkout/src/liballoc/heap.rs"
  $8 = $ptr_res$sroa$9$4$$sroa_idx; //@line 134 "/checkout/src/liballoc/heap.rs"
  $9 = $8; //@line 134 "/checkout/src/liballoc/heap.rs"
  $10 = HEAP32[$9>>2]|0; //@line 134 "/checkout/src/liballoc/heap.rs"
  $11 = (($8) + 4)|0; //@line 134 "/checkout/src/liballoc/heap.rs"
  $12 = $11; //@line 134 "/checkout/src/liballoc/heap.rs"
  $13 = HEAP32[$12>>2]|0; //@line 134 "/checkout/src/liballoc/heap.rs"
  HEAP32[$_42>>2] = $ptr_res$sroa$5$4$copyload2944; //@line 317 "/checkout/src/liballoc/raw_vec.rs"
  $e$sroa$0$sroa$4$0$e$sroa$0$0$$sroa_idx7$sroa_idx = ((($_42)) + 4|0); //@line 317 "/checkout/src/liballoc/raw_vec.rs"
  $14 = $e$sroa$0$sroa$4$0$e$sroa$0$0$$sroa_idx7$sroa_idx; //@line 317 "/checkout/src/liballoc/raw_vec.rs"
  $15 = $14; //@line 317 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$15>>2] = $10; //@line 317 "/checkout/src/liballoc/raw_vec.rs"
  $16 = (($14) + 4)|0; //@line 317 "/checkout/src/liballoc/raw_vec.rs"
  $17 = $16; //@line 317 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$17>>2] = $13; //@line 317 "/checkout/src/liballoc/raw_vec.rs"
  ___rust_oom($_42); //@line 98 "/checkout/src/liballoc/heap.rs"
  // unreachable; //@line 98 "/checkout/src/liballoc/heap.rs"
 }
 $$pre$phiZ2D = $self;$_11$sroa$0$0 = $3;$_11$sroa$5$0 = $6;
 HEAP32[$$pre$phiZ2D>>2] = $_11$sroa$5$0; //@line 330 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$0>>2] = $_11$sroa$0$0; //@line 331 "/checkout/src/liballoc/raw_vec.rs"
 STACKTOP = sp;return; //@line 333 "/checkout/src/liballoc/raw_vec.rs"
}
function __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_7reserve17h793d16a411821ec0E($self,$used_cap,$needed_extra_cap) {
 $self = $self|0;
 $used_cap = $used_cap|0;
 $needed_extra_cap = $needed_extra_cap|0;
 var $$ = 0, $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$sroa$speculated$i = 0, $_47 = 0, $e$sroa$0$sroa$4$0$e$sroa$0$0$$sroa_idx4$sroa_idx = 0, $err$i = 0, $err$i10 = 0, $res$sroa$0$1 = 0, $res$sroa$0$2 = 0, $res$sroa$13$4$$sroa_idx = 0, $res$sroa$7$1 = 0, $res$sroa$7$2 = 0, $res$sroa$7$4$copyload19 = 0, $switch = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $err$i10 = sp + 24|0;
 $err$i = sp + 12|0;
 $_47 = sp;
 $0 = ((($self)) + 4|0); //@line 210 "/checkout/src/liballoc/raw_vec.rs"
 $1 = HEAP32[$0>>2]|0; //@line 210 "/checkout/src/liballoc/raw_vec.rs"
 $2 = (($1) - ($used_cap))|0; //@line 1820 "/checkout/src/libcore/num/mod.rs"
 $3 = ($2>>>0)<($needed_extra_cap>>>0); //@line 516 "/checkout/src/liballoc/raw_vec.rs"
 if (!($3)) {
  STACKTOP = sp;return; //@line 542 "/checkout/src/liballoc/raw_vec.rs"
 }
 $$arith = (($used_cap) + ($needed_extra_cap))|0; //@line 1982 "/checkout/src/libcore/num/mod.rs"
 $$overflow = ($$arith>>>0)<($used_cap>>>0); //@line 1982 "/checkout/src/libcore/num/mod.rs"
 if ($$overflow) {
  __ZN4core6option13expect_failed17hc7b0dae7b501c3c5E(24948,17); //@line 302 "/checkout/src/libcore/option.rs"
  // unreachable;
 }
 $4 = $1 << 1; //@line 450 "/checkout/src/liballoc/raw_vec.rs"
 $5 = ($$arith>>>0)>=($4>>>0); //@line 850 "/checkout/src/libcore/cmp.rs"
 $_0$0$sroa$speculated$i = $5 ? $$arith : $4; //@line 462 "/checkout/src/libcore/cmp.rs"
 $6 = ($_0$0$sroa$speculated$i|0)<(0); //@line 714 "/checkout/src/liballoc/raw_vec.rs"
 if ($6) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(9860); //@line 714 "/checkout/src/liballoc/raw_vec.rs"
  // unreachable; //@line 714 "/checkout/src/liballoc/raw_vec.rs"
 }
 $7 = ($1|0)==(0); //@line 225 "/checkout/src/liballoc/raw_vec.rs"
 if ($7) {
  $8 = (___rust_alloc($_0$0$sroa$speculated$i,1,$err$i10)|0); //@line 84 "/checkout/src/liballoc/heap.rs"
  $9 = ($8|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
  $$ = $9&1; //@line 87 "/checkout/src/liballoc/heap.rs"
  $21 = 0;$24 = 0;$res$sroa$0$2 = $$;$res$sroa$7$2 = $8;
 } else {
  $10 = HEAP32[$self>>2]|0; //@line 530 "/checkout/src/liballoc/raw_vec.rs"
  $11 = (___rust_realloc($10,$1,1,$_0$0$sroa$speculated$i,1,$err$i)|0); //@line 127 "/checkout/src/liballoc/heap.rs"
  $12 = ($11|0)==(0|0); //@line 1170 "/checkout/src/libcore/ptr.rs"
  $res$sroa$7$4$copyload19 = HEAP32[$err$i>>2]|0; //@line 134 "/checkout/src/liballoc/heap.rs"
  $res$sroa$13$4$$sroa_idx = ((($err$i)) + 4|0); //@line 134 "/checkout/src/liballoc/heap.rs"
  $13 = $res$sroa$13$4$$sroa_idx; //@line 134 "/checkout/src/liballoc/heap.rs"
  $14 = $13; //@line 134 "/checkout/src/liballoc/heap.rs"
  $15 = HEAP32[$14>>2]|0; //@line 134 "/checkout/src/liballoc/heap.rs"
  $16 = (($13) + 4)|0; //@line 134 "/checkout/src/liballoc/heap.rs"
  $17 = $16; //@line 134 "/checkout/src/liballoc/heap.rs"
  $18 = HEAP32[$17>>2]|0; //@line 134 "/checkout/src/liballoc/heap.rs"
  $res$sroa$7$1 = $12 ? $res$sroa$7$4$copyload19 : $11; //@line 133 "/checkout/src/liballoc/heap.rs"
  $res$sroa$0$1 = $12&1; //@line 133 "/checkout/src/liballoc/heap.rs"
  $21 = $15;$24 = $18;$res$sroa$0$2 = $res$sroa$0$1;$res$sroa$7$2 = $res$sroa$7$1;
 }
 $switch = ($res$sroa$0$2|0)==(1); //@line 536 "/checkout/src/liballoc/raw_vec.rs"
 if ($switch) {
  HEAP32[$_47>>2] = $res$sroa$7$2; //@line 537 "/checkout/src/liballoc/raw_vec.rs"
  $e$sroa$0$sroa$4$0$e$sroa$0$0$$sroa_idx4$sroa_idx = ((($_47)) + 4|0); //@line 537 "/checkout/src/liballoc/raw_vec.rs"
  $19 = $e$sroa$0$sroa$4$0$e$sroa$0$0$$sroa_idx4$sroa_idx; //@line 537 "/checkout/src/liballoc/raw_vec.rs"
  $20 = $19; //@line 537 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$20>>2] = $21; //@line 537 "/checkout/src/liballoc/raw_vec.rs"
  $22 = (($19) + 4)|0; //@line 537 "/checkout/src/liballoc/raw_vec.rs"
  $23 = $22; //@line 537 "/checkout/src/liballoc/raw_vec.rs"
  HEAP32[$23>>2] = $24; //@line 537 "/checkout/src/liballoc/raw_vec.rs"
  ___rust_oom($_47); //@line 98 "/checkout/src/liballoc/heap.rs"
  // unreachable; //@line 98 "/checkout/src/liballoc/heap.rs"
 }
 HEAP32[$self>>2] = $res$sroa$7$2; //@line 539 "/checkout/src/liballoc/raw_vec.rs"
 HEAP32[$0>>2] = $_0$0$sroa$speculated$i; //@line 540 "/checkout/src/liballoc/raw_vec.rs"
 STACKTOP = sp;return; //@line 542 "/checkout/src/liballoc/raw_vec.rs"
}
function __ZN11std_unicode6tables16general_category1N17h3fc679494b052a65E($c) {
 $c = $c|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN11std_unicode6tables23trie_lookup_range_table17hb3ccc76f7ab64b27E($c,8)|0); //@line 215 "/checkout/src/libstd_unicode/tables.rs"
 return ($0|0); //@line 216 "/checkout/src/libstd_unicode/tables.rs"
}
function __ZN11std_unicode5lossy9Utf8Lossy10from_bytes17h6a57cfbac7497386E($retVal,$bytes$0,$bytes$1) {
 $retVal = $retVal|0;
 $bytes$0 = $bytes$0|0;
 $bytes$1 = $bytes$1|0;
 var $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$retVal>>2] = $bytes$0; //@line 31 "/checkout/src/libstd_unicode/lossy.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 31 "/checkout/src/libstd_unicode/lossy.rs"
 HEAP32[$retVal$index1>>2] = $bytes$1; //@line 31 "/checkout/src/libstd_unicode/lossy.rs"
 return; //@line 31 "/checkout/src/libstd_unicode/lossy.rs"
}
function __ZN104__LT_std_unicode__lossy__Utf8LossyChunksIter_LT__u27_a_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17h9f990d690cd0c16cE($0,$self) {
 $0 = $0|0;
 $self = $self|0;
 var $$off = 0, $$off329 = 0, $$off331 = 0, $$sink = 0, $$sink209 = 0, $$sink211 = 0, $$sink214 = 0, $$sink215 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $_231$sroa$4$0$$sroa_idx188 = 0;
 var $_231$sroa$5$0$$sroa_idx190 = 0, $_231$sroa$6$0$$sroa_idx192 = 0, $cond = 0, $cond10 = 0, $cond8 = 0, $cond9 = 0, $i$0$be = 0, $i$0373 = 0, $or$cond218 = 0, $or$cond219 = 0, $or$cond220 = 0, $or$cond221 = 0, $or$cond223 = 0, $or$cond224 = 0, $or$cond228 = 0, $or$cond229 = 0, $or$cond230 = 0, $or$cond231 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($self)) + 4|0); //@line 61 "/checkout/src/libstd_unicode/lossy.rs"
 $2 = HEAP32[$1>>2]|0; //@line 61 "/checkout/src/libstd_unicode/lossy.rs"
 $3 = ($2|0)==(0); //@line 61 "/checkout/src/libstd_unicode/lossy.rs"
 if ($3) {
  HEAP32[$0>>2] = 0; //@line 62 "/checkout/src/libstd_unicode/lossy.rs"
  return; //@line 151 "/checkout/src/libstd_unicode/lossy.rs"
 }
 $4 = HEAP32[$self>>2]|0;
 $i$0373 = 0;
 L5: while(1) {
  $5 = (($4) + ($i$0373)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $6 = HEAP8[$5>>0]|0; //@line 67 "/checkout/src/libstd_unicode/lossy.rs"
  $7 = (($i$0373) + 1)|0; //@line 78 "/checkout/src/libstd_unicode/lossy.rs"
  $8 = ($6<<24>>24)>(-1); //@line 80 "/checkout/src/libstd_unicode/lossy.rs"
  L7: do {
   if ($8) {
    $i$0$be = $7;
   } else {
    $9 = $6&255; //@line 1569 "/checkout/src/libcore/str/mod.rs"
    $10 = (28633 + ($9)|0); //@line 1569 "/checkout/src/libcore/str/mod.rs"
    $11 = HEAP8[$10>>0]|0; //@line 1569 "/checkout/src/libcore/str/mod.rs"
    switch ($11<<24>>24) {
    case 2:  {
     $12 = ($2>>>0)>($7>>>0); //@line 70 "/checkout/src/libstd_unicode/lossy.rs"
     if (!($12)) {
      label = 18;
      break L5;
     }
     $13 = (($4) + ($7)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $14 = HEAP8[$13>>0]|0; //@line 67 "/checkout/src/libstd_unicode/lossy.rs"
     $15 = $14 & -64; //@line 98 "/checkout/src/libstd_unicode/lossy.rs"
     $16 = ($15<<24>>24)==(-128); //@line 98 "/checkout/src/libstd_unicode/lossy.rs"
     if (!($16)) {
      label = 18;
      break L5;
     }
     $37 = (($i$0373) + 2)|0; //@line 101 "/checkout/src/libstd_unicode/lossy.rs"
     $i$0$be = $37;
     break L7;
     break;
    }
    case 3:  {
     $17 = ($2>>>0)>($7>>>0); //@line 70 "/checkout/src/libstd_unicode/lossy.rs"
     if (!($17)) {
      label = 25;
      break L5;
     }
     $18 = (($4) + ($7)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $19 = HEAP8[$18>>0]|0; //@line 67 "/checkout/src/libstd_unicode/lossy.rs"
     $cond9 = ($6<<24>>24)==(-32); //@line 105 "/checkout/src/libstd_unicode/lossy.rs"
     $20 = ($19&255)<(192); //@line 105 "/checkout/src/libstd_unicode/lossy.rs"
     $21 = $19 & -32; //@line 105 "/checkout/src/libstd_unicode/lossy.rs"
     $22 = ($21<<24>>24)==(-96); //@line 105 "/checkout/src/libstd_unicode/lossy.rs"
     $23 = $cond9 & $22; //@line 105 "/checkout/src/libstd_unicode/lossy.rs"
     if (!($23)) {
      $$off331 = (($6) + 31)<<24>>24; //@line 106 "/checkout/src/libstd_unicode/lossy.rs"
      $42 = ($$off331&255)<(12); //@line 106 "/checkout/src/libstd_unicode/lossy.rs"
      $43 = ($19<<24>>24)<(0); //@line 106 "/checkout/src/libstd_unicode/lossy.rs"
      $or$cond218 = $42 & $43; //@line 106 "/checkout/src/libstd_unicode/lossy.rs"
      $or$cond219 = $20 & $or$cond218; //@line 106 "/checkout/src/libstd_unicode/lossy.rs"
      if (!($or$cond219)) {
       $cond10 = ($6<<24>>24)==(-19); //@line 107 "/checkout/src/libstd_unicode/lossy.rs"
       $or$cond220 = $cond10 & $43; //@line 107 "/checkout/src/libstd_unicode/lossy.rs"
       $44 = ($19&255)<(160); //@line 107 "/checkout/src/libstd_unicode/lossy.rs"
       $or$cond221 = $44 & $or$cond220; //@line 107 "/checkout/src/libstd_unicode/lossy.rs"
       if (!($or$cond221)) {
        $45 = $6 & -2; //@line 108 "/checkout/src/libstd_unicode/lossy.rs"
        $46 = ($45<<24>>24)==(-18); //@line 108 "/checkout/src/libstd_unicode/lossy.rs"
        $or$cond223 = $46 & $43; //@line 108 "/checkout/src/libstd_unicode/lossy.rs"
        $or$cond224 = $20 & $or$cond223; //@line 108 "/checkout/src/libstd_unicode/lossy.rs"
        if (!($or$cond224)) {
         label = 25;
         break L5;
        }
       }
      }
     }
     $47 = (($i$0373) + 2)|0; //@line 113 "/checkout/src/libstd_unicode/lossy.rs"
     $48 = ($2>>>0)>($47>>>0); //@line 70 "/checkout/src/libstd_unicode/lossy.rs"
     if (!($48)) {
      label = 35;
      break L5;
     }
     $49 = (($4) + ($47)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $50 = HEAP8[$49>>0]|0; //@line 67 "/checkout/src/libstd_unicode/lossy.rs"
     $51 = $50 & -64; //@line 114 "/checkout/src/libstd_unicode/lossy.rs"
     $52 = ($51<<24>>24)==(-128); //@line 114 "/checkout/src/libstd_unicode/lossy.rs"
     if (!($52)) {
      label = 35;
      break L5;
     }
     $58 = (($i$0373) + 3)|0; //@line 117 "/checkout/src/libstd_unicode/lossy.rs"
     $i$0$be = $58;
     break L7;
     break;
    }
    case 4:  {
     $24 = ($2>>>0)>($7>>>0); //@line 70 "/checkout/src/libstd_unicode/lossy.rs"
     if (!($24)) {
      label = 43;
      break L5;
     }
     $25 = (($4) + ($7)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $26 = HEAP8[$25>>0]|0; //@line 67 "/checkout/src/libstd_unicode/lossy.rs"
     $cond = ($6<<24>>24)==(-16); //@line 121 "/checkout/src/libstd_unicode/lossy.rs"
     $$off = (($26) + 112)<<24>>24; //@line 121 "/checkout/src/libstd_unicode/lossy.rs"
     $27 = ($$off&255)<(48); //@line 121 "/checkout/src/libstd_unicode/lossy.rs"
     $28 = $cond & $27; //@line 121 "/checkout/src/libstd_unicode/lossy.rs"
     if (!($28)) {
      $64 = ($26&255)<(192); //@line 121 "/checkout/src/libstd_unicode/lossy.rs"
      $$off329 = (($6) + 15)<<24>>24; //@line 122 "/checkout/src/libstd_unicode/lossy.rs"
      $65 = ($$off329&255)<(3); //@line 122 "/checkout/src/libstd_unicode/lossy.rs"
      $66 = ($26<<24>>24)<(0); //@line 122 "/checkout/src/libstd_unicode/lossy.rs"
      $or$cond228 = $65 & $66; //@line 122 "/checkout/src/libstd_unicode/lossy.rs"
      $or$cond229 = $64 & $or$cond228; //@line 122 "/checkout/src/libstd_unicode/lossy.rs"
      if (!($or$cond229)) {
       $cond8 = ($6<<24>>24)==(-12); //@line 123 "/checkout/src/libstd_unicode/lossy.rs"
       $or$cond230 = $cond8 & $66; //@line 123 "/checkout/src/libstd_unicode/lossy.rs"
       $67 = ($26&255)<(144); //@line 123 "/checkout/src/libstd_unicode/lossy.rs"
       $or$cond231 = $67 & $or$cond230; //@line 123 "/checkout/src/libstd_unicode/lossy.rs"
       if (!($or$cond231)) {
        label = 43;
        break L5;
       }
      }
     }
     $68 = (($i$0373) + 2)|0; //@line 128 "/checkout/src/libstd_unicode/lossy.rs"
     $69 = ($2>>>0)>($68>>>0); //@line 70 "/checkout/src/libstd_unicode/lossy.rs"
     if (!($69)) {
      label = 54;
      break L5;
     }
     $70 = (($4) + ($68)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $71 = HEAP8[$70>>0]|0; //@line 67 "/checkout/src/libstd_unicode/lossy.rs"
     $72 = $71 & -64; //@line 129 "/checkout/src/libstd_unicode/lossy.rs"
     $73 = ($72<<24>>24)==(-128); //@line 129 "/checkout/src/libstd_unicode/lossy.rs"
     if (!($73)) {
      label = 54;
      break L5;
     }
     $79 = (($i$0373) + 3)|0; //@line 132 "/checkout/src/libstd_unicode/lossy.rs"
     $80 = ($2>>>0)>($79>>>0); //@line 70 "/checkout/src/libstd_unicode/lossy.rs"
     if (!($80)) {
      label = 63;
      break L5;
     }
     $81 = (($4) + ($79)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $82 = HEAP8[$81>>0]|0; //@line 67 "/checkout/src/libstd_unicode/lossy.rs"
     $83 = $82 & -64; //@line 133 "/checkout/src/libstd_unicode/lossy.rs"
     $84 = ($83<<24>>24)==(-128); //@line 133 "/checkout/src/libstd_unicode/lossy.rs"
     if (!($84)) {
      label = 63;
      break L5;
     }
     $90 = (($i$0373) + 4)|0; //@line 136 "/checkout/src/libstd_unicode/lossy.rs"
     $i$0$be = $90;
     break L7;
     break;
    }
    default: {
     label = 13;
     break L5;
    }
    }
   }
  } while(0);
  $91 = ($i$0$be>>>0)<($2>>>0); //@line 74 "/checkout/src/libstd_unicode/lossy.rs"
  if ($91) {
   $i$0373 = $i$0$be;
  } else {
   $$sink = 0;$$sink209 = 39452;$$sink211 = $2;$$sink214 = 0;$$sink215 = 39452;
   break;
  }
 }
 do {
  if ((label|0) == 13) {
   $29 = ($2>>>0)<($i$0373>>>0); //@line 875 "/checkout/src/libcore/slice/mod.rs"
   if ($29) {
    __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($i$0373,$2); //@line 876 "/checkout/src/libcore/slice/mod.rs"
    // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
   }
   $30 = ($2>>>0)<($7>>>0); //@line 875 "/checkout/src/libcore/slice/mod.rs"
   if ($30) {
    __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($7,$2); //@line 876 "/checkout/src/libcore/slice/mod.rs"
    // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
   } else {
    $31 = (($4) + ($7)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
    $32 = (($2) - ($7))|0; //@line 863 "/checkout/src/libcore/slice/mod.rs"
    $$sink = 1;$$sink209 = $5;$$sink211 = $i$0373;$$sink214 = $32;$$sink215 = $31;
    break;
   }
  }
  else if ((label|0) == 18) {
   $33 = ($2>>>0)<($i$0373>>>0); //@line 875 "/checkout/src/libcore/slice/mod.rs"
   if ($33) {
    __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($i$0373,$2); //@line 876 "/checkout/src/libcore/slice/mod.rs"
    // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
   }
   $34 = ($2>>>0)<($7>>>0); //@line 875 "/checkout/src/libcore/slice/mod.rs"
   if ($34) {
    __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($7,$2); //@line 876 "/checkout/src/libcore/slice/mod.rs"
    // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
   } else {
    $35 = (($4) + ($7)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
    $36 = (($2) - ($7))|0; //@line 863 "/checkout/src/libcore/slice/mod.rs"
    $$sink = 1;$$sink209 = $5;$$sink211 = $i$0373;$$sink214 = $36;$$sink215 = $35;
    break;
   }
  }
  else if ((label|0) == 25) {
   $38 = ($2>>>0)<($i$0373>>>0); //@line 875 "/checkout/src/libcore/slice/mod.rs"
   if ($38) {
    __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($i$0373,$2); //@line 876 "/checkout/src/libcore/slice/mod.rs"
    // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
   }
   $39 = ($2>>>0)<($7>>>0); //@line 875 "/checkout/src/libcore/slice/mod.rs"
   if ($39) {
    __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($7,$2); //@line 876 "/checkout/src/libcore/slice/mod.rs"
    // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
   } else {
    $40 = (($4) + ($7)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
    $41 = (($2) - ($7))|0; //@line 863 "/checkout/src/libcore/slice/mod.rs"
    $$sink = 1;$$sink209 = $5;$$sink211 = $i$0373;$$sink214 = $41;$$sink215 = $40;
    break;
   }
  }
  else if ((label|0) == 35) {
   $53 = ($2>>>0)<($i$0373>>>0); //@line 875 "/checkout/src/libcore/slice/mod.rs"
   if ($53) {
    __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($i$0373,$2); //@line 876 "/checkout/src/libcore/slice/mod.rs"
    // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
   }
   $54 = ($i$0373>>>0)>(4294967293); //@line 873 "/checkout/src/libcore/slice/mod.rs"
   if ($54) {
    __ZN4core5slice22slice_index_order_fail17h620f0e130a93079bE($i$0373,$47); //@line 874 "/checkout/src/libcore/slice/mod.rs"
    // unreachable; //@line 874 "/checkout/src/libcore/slice/mod.rs"
   }
   $55 = ($2>>>0)<($47>>>0); //@line 875 "/checkout/src/libcore/slice/mod.rs"
   if ($55) {
    __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($47,$2); //@line 876 "/checkout/src/libcore/slice/mod.rs"
    // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
   } else {
    $56 = (($4) + ($47)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
    $57 = (($2) - ($47))|0; //@line 863 "/checkout/src/libcore/slice/mod.rs"
    $$sink = 2;$$sink209 = $5;$$sink211 = $i$0373;$$sink214 = $57;$$sink215 = $56;
    break;
   }
  }
  else if ((label|0) == 43) {
   $59 = ($2>>>0)<($i$0373>>>0); //@line 875 "/checkout/src/libcore/slice/mod.rs"
   if ($59) {
    __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($i$0373,$2); //@line 876 "/checkout/src/libcore/slice/mod.rs"
    // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
   }
   $60 = ($i$0373|0)==(-1); //@line 873 "/checkout/src/libcore/slice/mod.rs"
   if ($60) {
    __ZN4core5slice22slice_index_order_fail17h620f0e130a93079bE(-1,$7); //@line 874 "/checkout/src/libcore/slice/mod.rs"
    // unreachable; //@line 874 "/checkout/src/libcore/slice/mod.rs"
   }
   $61 = ($2>>>0)<($7>>>0); //@line 875 "/checkout/src/libcore/slice/mod.rs"
   if ($61) {
    __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($7,$2); //@line 876 "/checkout/src/libcore/slice/mod.rs"
    // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
   } else {
    $62 = (($4) + ($7)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
    $63 = (($2) - ($7))|0; //@line 863 "/checkout/src/libcore/slice/mod.rs"
    $$sink = 1;$$sink209 = $5;$$sink211 = $i$0373;$$sink214 = $63;$$sink215 = $62;
    break;
   }
  }
  else if ((label|0) == 54) {
   $74 = ($2>>>0)<($i$0373>>>0); //@line 875 "/checkout/src/libcore/slice/mod.rs"
   if ($74) {
    __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($i$0373,$2); //@line 876 "/checkout/src/libcore/slice/mod.rs"
    // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
   }
   $75 = ($i$0373>>>0)>(4294967293); //@line 873 "/checkout/src/libcore/slice/mod.rs"
   if ($75) {
    __ZN4core5slice22slice_index_order_fail17h620f0e130a93079bE($i$0373,$68); //@line 874 "/checkout/src/libcore/slice/mod.rs"
    // unreachable; //@line 874 "/checkout/src/libcore/slice/mod.rs"
   }
   $76 = ($2>>>0)<($68>>>0); //@line 875 "/checkout/src/libcore/slice/mod.rs"
   if ($76) {
    __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($68,$2); //@line 876 "/checkout/src/libcore/slice/mod.rs"
    // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
   } else {
    $77 = (($4) + ($68)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
    $78 = (($2) - ($68))|0; //@line 863 "/checkout/src/libcore/slice/mod.rs"
    $$sink = 2;$$sink209 = $5;$$sink211 = $i$0373;$$sink214 = $78;$$sink215 = $77;
    break;
   }
  }
  else if ((label|0) == 63) {
   $85 = ($2>>>0)<($i$0373>>>0); //@line 875 "/checkout/src/libcore/slice/mod.rs"
   if ($85) {
    __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($i$0373,$2); //@line 876 "/checkout/src/libcore/slice/mod.rs"
    // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
   }
   $86 = ($i$0373>>>0)>(4294967292); //@line 873 "/checkout/src/libcore/slice/mod.rs"
   if ($86) {
    __ZN4core5slice22slice_index_order_fail17h620f0e130a93079bE($i$0373,$79); //@line 874 "/checkout/src/libcore/slice/mod.rs"
    // unreachable; //@line 874 "/checkout/src/libcore/slice/mod.rs"
   }
   $87 = ($2>>>0)<($79>>>0); //@line 875 "/checkout/src/libcore/slice/mod.rs"
   if ($87) {
    __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($79,$2); //@line 876 "/checkout/src/libcore/slice/mod.rs"
    // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
   } else {
    $88 = (($4) + ($79)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
    $89 = (($2) - ($79))|0; //@line 863 "/checkout/src/libcore/slice/mod.rs"
    $$sink = 3;$$sink209 = $5;$$sink211 = $i$0373;$$sink214 = $89;$$sink215 = $88;
    break;
   }
  }
 } while(0);
 HEAP32[$self>>2] = $$sink215;
 HEAP32[$1>>2] = $$sink214;
 HEAP32[$0>>2] = $4;
 $_231$sroa$4$0$$sroa_idx188 = ((($0)) + 4|0);
 HEAP32[$_231$sroa$4$0$$sroa_idx188>>2] = $$sink211;
 $_231$sroa$5$0$$sroa_idx190 = ((($0)) + 8|0);
 HEAP32[$_231$sroa$5$0$$sroa_idx190>>2] = $$sink209;
 $_231$sroa$6$0$$sroa_idx192 = ((($0)) + 12|0);
 HEAP32[$_231$sroa$6$0$$sroa_idx192>>2] = $$sink;
 return; //@line 151 "/checkout/src/libstd_unicode/lossy.rs"
}
function __ZN66__LT_std_unicode__lossy__Utf8Lossy_u20_as_u20_core__fmt__Debug_GT_3fmt17ha08a3fcb523c8b46E($self$0,$self$1,$f) {
 $self$0 = $self$0|0;
 $self$1 = $self$1|0;
 $f = $f|0;
 var $$$$$i$i = 0, $$$$i$i = 0, $$$i$i = 0, $$pre$i$i$i = 0, $$pre$phi$i$i$iZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $_0$0$i10$i$i$i = 0, $_0$0$i16$i$i$i = 0, $_0$0$i5$i$i$i = 0, $_0$0$off0 = 0, $_10$i = 0, $_11$sroa$0$sroa$4$0$_11$sroa$0$0$$sroa_idx9$sroa_idx22$i$i = 0, $_138 = 0, $_145 = 0, $_18$i = 0, $_22 = 0, $_25$i = 0, $_4$i = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$0$0$$sroa_idx$i$i = 0, $_5$sroa$4$0$$sroa_idx2$i = 0, $_5$sroa$4$0$$sroa_idx2$i$i = 0, $b = 0, $esc = 0, $from$0$lcssa = 0;
 var $from$0$lcssa92 = 0, $from$0$lcssa93 = 0, $from$059 = 0, $from$1 = 0, $init_state$sroa$0$0$i$i = 0, $init_state$sroa$9$0$i$i = 0, $iter = 0, $iter1$sroa$0$058 = 0, $iter1$sroa$6$057 = 0, $iter1$sroa$6$1 = 0, $iter1$sroa$6$161 = 0, $iter1$sroa$6$2 = 0, $iter1$sroa$6$3 = 0, $iter1$sroa$6$4 = 0, $iter1$sroa$6$7 = 0, $iter2 = 0, $iter3$sroa$0$0136 = 0, $left_val$i = 0, $or$cond$i = 0, $or$cond$i$i$i$i = 0;
 var $or$cond$i$i$i$i60 = 0, $or$cond$i1$i$i$i = 0, $phitmp$i$i$i = 0, $phitmp21$i$i$i = 0, $phitmp22$i$i$i = 0, $right_val$i = 0, $upper$i = 0, $val$sroa$0$0$copyload$in = 0, $val$sroa$5$0$$sroa_idx34 = 0, $val$sroa$5$0$copyload = 0, $val$sroa$6$0$$sroa_idx37 = 0, $val$sroa$6$0$copyload = 0, $val$sroa$7$0$$sroa_idx40 = 0, $val$sroa$7$0$copyload = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $_25$i = sp + 152|0;
 $_18$i = sp + 128|0;
 $right_val$i = sp + 124|0;
 $left_val$i = sp + 120|0;
 $_10$i = sp + 112|0;
 $_4$i = sp + 96|0;
 $upper$i = sp;
 $_145 = sp + 88|0;
 $_138 = sp + 64|0;
 $b = sp + 168|0;
 $iter2 = sp + 48|0;
 $esc = sp + 32|0;
 $_22 = sp + 16|0;
 $iter = sp + 8|0;
 $0 = (__ZN71__LT_core__fmt__Formatter_LT__u27_a_GT__u20_as_u20_core__fmt__Write_GT_10write_char17hc5577ad36874d504E($f,34)|0); //@line 183 "/checkout/src/libstd_unicode/lossy.rs"
 if ($0) {
  $_0$0$off0 = 1;
  STACKTOP = sp;return ($_0$0$off0|0); //@line 212 "/checkout/src/libstd_unicode/lossy.rs"
 }
 HEAP32[$iter>>2] = $self$0; //@line 185 "/checkout/src/libstd_unicode/lossy.rs"
 $1 = ((($iter)) + 4|0); //@line 185 "/checkout/src/libstd_unicode/lossy.rs"
 HEAP32[$1>>2] = $self$1; //@line 185 "/checkout/src/libstd_unicode/lossy.rs"
 __ZN104__LT_std_unicode__lossy__Utf8LossyChunksIter_LT__u27_a_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17h9f990d690cd0c16cE($_22,$iter); //@line 185 "/checkout/src/libstd_unicode/lossy.rs"
 $2 = HEAP32[$_22>>2]|0; //@line 185 "/checkout/src/libstd_unicode/lossy.rs"
 $3 = ($2|0)==(0|0); //@line 185 "/checkout/src/libstd_unicode/lossy.rs"
 L4: do {
  if (!($3)) {
   $val$sroa$5$0$$sroa_idx34 = ((($_22)) + 4|0);
   $val$sroa$6$0$$sroa_idx37 = ((($_22)) + 8|0);
   $val$sroa$7$0$$sroa_idx40 = ((($_22)) + 12|0);
   $_11$sroa$0$sroa$4$0$_11$sroa$0$0$$sroa_idx9$sroa_idx22$i$i = ((($esc)) + 4|0);
   $4 = ((($esc)) + 8|0);
   $5 = ((($_4$i)) + 4|0);
   $6 = ((($_10$i)) + 4|0);
   $7 = ((($_145)) + 4|0);
   $8 = ((($_138)) + 4|0);
   $_5$sroa$0$0$$sroa_idx$i = ((($_138)) + 8|0);
   $_5$sroa$4$0$$sroa_idx2$i = ((($_138)) + 12|0);
   $9 = ((($_138)) + 16|0);
   $10 = ((($_138)) + 20|0);
   $val$sroa$0$0$copyload$in = $2;
   L6: while(1) {
    $val$sroa$5$0$copyload = HEAP32[$val$sroa$5$0$$sroa_idx34>>2]|0; //@line 185 "/checkout/src/libstd_unicode/lossy.rs"
    $val$sroa$6$0$copyload = HEAP32[$val$sroa$6$0$$sroa_idx37>>2]|0; //@line 185 "/checkout/src/libstd_unicode/lossy.rs"
    $val$sroa$7$0$copyload = HEAP32[$val$sroa$7$0$$sroa_idx40>>2]|0; //@line 185 "/checkout/src/libstd_unicode/lossy.rs"
    $14 = (($val$sroa$0$0$copyload$in) + ($val$sroa$5$0$copyload)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
    $15 = ($val$sroa$0$0$copyload$in|0)==($14|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
    $16 = ($val$sroa$0$0$copyload$in|0)==(0|0); //@line 497 "/checkout/src/libcore/str/mod.rs"
    $17 = $16 | $15; //@line 497 "/checkout/src/libcore/str/mod.rs"
    if ($17) {
     $from$0$lcssa93 = 0;
     label = 21;
    } else {
     $18 = $val$sroa$0$0$copyload$in; //@line 2257 "/checkout/src/libcore/str/mod.rs"
     $19 = ((($val$sroa$0$0$copyload$in)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $20 = $19; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
     $22 = $val$sroa$0$0$copyload$in;$from$059 = 0;$iter1$sroa$0$058 = 0;$iter1$sroa$6$057 = $18;$iter1$sroa$6$161 = $20;
     while(1) {
      $21 = HEAP8[$22>>0]|0; //@line 497 "/checkout/src/libcore/str/mod.rs"
      $23 = ($21<<24>>24)>(-1); //@line 498 "/checkout/src/libcore/str/mod.rs"
      if ($23) {
       $24 = $21&255; //@line 499 "/checkout/src/libcore/str/mod.rs"
       $69 = $24;$iter1$sroa$6$7 = $iter1$sroa$6$161;
      } else {
       $25 = $21 & 31; //@line 472 "/checkout/src/libcore/str/mod.rs"
       $26 = $25&255; //@line 472 "/checkout/src/libcore/str/mod.rs"
       $27 = $iter1$sroa$6$161; //@line 1135 "/checkout/src/libcore/slice/mod.rs"
       $28 = ($27|0)==($14|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
       if ($28) {
        $37 = $14;$_0$0$i16$i$i$i = 0;$iter1$sroa$6$2 = $iter1$sroa$6$161;
       } else {
        $29 = ((($27)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
        $30 = $29; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
        $31 = HEAP8[$27>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
        $phitmp$i$i$i = $31 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
        $37 = $29;$_0$0$i16$i$i$i = $phitmp$i$i$i;$iter1$sroa$6$2 = $30;
       }
       $32 = $26 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
       $33 = $_0$0$i16$i$i$i&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
       $34 = $33 | $32; //@line 476 "/checkout/src/libcore/str/mod.rs"
       $35 = ($21&255)>(223); //@line 508 "/checkout/src/libcore/str/mod.rs"
       if ($35) {
        $36 = ($37|0)==($14|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
        if ($36) {
         $48 = $14;$_0$0$i10$i$i$i = 0;$iter1$sroa$6$3 = $iter1$sroa$6$2;
        } else {
         $38 = ((($37)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
         $39 = $38; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
         $40 = HEAP8[$37>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
         $phitmp21$i$i$i = $40 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
         $48 = $38;$_0$0$i10$i$i$i = $phitmp21$i$i$i;$iter1$sroa$6$3 = $39;
        }
        $41 = $33 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
        $42 = $_0$0$i10$i$i$i&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
        $43 = $42 | $41; //@line 476 "/checkout/src/libcore/str/mod.rs"
        $44 = $26 << 12; //@line 513 "/checkout/src/libcore/str/mod.rs"
        $45 = $43 | $44; //@line 513 "/checkout/src/libcore/str/mod.rs"
        $46 = ($21&255)>(239); //@line 514 "/checkout/src/libcore/str/mod.rs"
        if ($46) {
         $47 = ($48|0)==($14|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
         if ($47) {
          $_0$0$i5$i$i$i = 0;$iter1$sroa$6$4 = $iter1$sroa$6$3;
         } else {
          $49 = ((($48)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
          $50 = $49; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
          $51 = HEAP8[$48>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
          $phitmp22$i$i$i = $51 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
          $_0$0$i5$i$i$i = $phitmp22$i$i$i;$iter1$sroa$6$4 = $50;
         }
         $52 = $26 << 18; //@line 518 "/checkout/src/libcore/str/mod.rs"
         $53 = $52 & 1835008; //@line 518 "/checkout/src/libcore/str/mod.rs"
         $54 = $43 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
         $55 = $_0$0$i5$i$i$i&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
         $56 = $54 | $53; //@line 476 "/checkout/src/libcore/str/mod.rs"
         $57 = $56 | $55; //@line 518 "/checkout/src/libcore/str/mod.rs"
         $58 = ($57|0)==(1114112); //@line 664 "/checkout/src/libcore/str/mod.rs"
         if ($58) {
          $from$0$lcssa = $from$059;
          break;
         } else {
          $69 = $57;$iter1$sroa$6$7 = $iter1$sroa$6$4;
         }
        } else {
         $69 = $45;$iter1$sroa$6$7 = $iter1$sroa$6$3;
        }
       } else {
        $69 = $34;$iter1$sroa$6$7 = $iter1$sroa$6$2;
       }
      }
      $67 = (($iter1$sroa$0$058) - ($iter1$sroa$6$057))|0; //@line 668 "/checkout/src/libcore/str/mod.rs"
      $68 = (($67) + ($iter1$sroa$6$7))|0; //@line 668 "/checkout/src/libcore/str/mod.rs"
      switch ($69|0) {
      case 9:  {
       $77 = 0;$80 = 0;$init_state$sroa$0$0$i$i = 2;$init_state$sroa$9$0$i$i = 116;
       break;
      }
      case 13:  {
       $77 = 0;$80 = 0;$init_state$sroa$0$0$i$i = 2;$init_state$sroa$9$0$i$i = 114;
       break;
      }
      case 10:  {
       $77 = 0;$80 = 0;$init_state$sroa$0$0$i$i = 2;$init_state$sroa$9$0$i$i = 110;
       break;
      }
      case 34: case 39: case 92:  {
       $77 = 0;$80 = 0;$init_state$sroa$0$0$i$i = 2;$init_state$sroa$9$0$i$i = $69;
       break;
      }
      default: {
       $74 = (__ZN4core12char_private12is_printable17h984811d8dbf8afa6E($69)|0); //@line 454 "/checkout/src/libcore/char.rs"
       if ($74) {
        $77 = 0;$80 = 0;$init_state$sroa$0$0$i$i = 1;$init_state$sroa$9$0$i$i = $69;
       } else {
        $70 = $69 | 1; //@line 423 "/checkout/src/libcore/char.rs"
        $71 = (Math_clz32(($70|0))|0); //@line 1381 "/checkout/src/libcore/num/mod.rs"
        $72 = $71 >>> 2; //@line 426 "/checkout/src/libcore/char.rs"
        $73 = $72 ^ 7; //@line 426 "/checkout/src/libcore/char.rs"
        $77 = $73;$80 = 5;$init_state$sroa$0$0$i$i = 3;$init_state$sroa$9$0$i$i = $69;
       }
      }
      }
      HEAP32[$esc>>2] = $init_state$sroa$0$0$i$i; //@line 457 "/checkout/src/libcore/char.rs"
      HEAP32[$_11$sroa$0$sroa$4$0$_11$sroa$0$0$$sroa_idx9$sroa_idx22$i$i>>2] = $init_state$sroa$9$0$i$i; //@line 457 "/checkout/src/libcore/char.rs"
      $75 = $4; //@line 457 "/checkout/src/libcore/char.rs"
      $76 = $75; //@line 457 "/checkout/src/libcore/char.rs"
      HEAP32[$76>>2] = $77; //@line 457 "/checkout/src/libcore/char.rs"
      $78 = (($75) + 4)|0; //@line 457 "/checkout/src/libcore/char.rs"
      $79 = $78; //@line 457 "/checkout/src/libcore/char.rs"
      HEAP32[$79>>2] = $80; //@line 457 "/checkout/src/libcore/char.rs"
      __ZN74__LT_core__char__EscapeDebug_u20_as_u20_core__iter__iterator__Iterator_GT_9size_hint17h36a47ff5f05b1413E($_4$i,$esc); //@line 688 "/checkout/src/libcore/iter/traits.rs"
      $81 = HEAP32[$_4$i>>2]|0; //@line 688 "/checkout/src/libcore/iter/traits.rs"
      $82 = $5; //@line 688 "/checkout/src/libcore/iter/traits.rs"
      $83 = $82; //@line 688 "/checkout/src/libcore/iter/traits.rs"
      $84 = HEAP32[$83>>2]|0; //@line 688 "/checkout/src/libcore/iter/traits.rs"
      $85 = (($82) + 4)|0; //@line 688 "/checkout/src/libcore/iter/traits.rs"
      $86 = $85; //@line 688 "/checkout/src/libcore/iter/traits.rs"
      $87 = HEAP32[$86>>2]|0; //@line 688 "/checkout/src/libcore/iter/traits.rs"
      $88 = $upper$i; //@line 688 "/checkout/src/libcore/iter/traits.rs"
      $89 = $88; //@line 688 "/checkout/src/libcore/iter/traits.rs"
      HEAP32[$89>>2] = $84; //@line 688 "/checkout/src/libcore/iter/traits.rs"
      $90 = (($88) + 4)|0; //@line 688 "/checkout/src/libcore/iter/traits.rs"
      $91 = $90; //@line 688 "/checkout/src/libcore/iter/traits.rs"
      HEAP32[$91>>2] = $87; //@line 688 "/checkout/src/libcore/iter/traits.rs"
      HEAP32[$_10$i>>2] = 1; //@line 693 "/checkout/src/libcore/iter/traits.rs"
      HEAP32[$6>>2] = $81; //@line 693 "/checkout/src/libcore/iter/traits.rs"
      HEAP32[$left_val$i>>2] = $upper$i; //@line 114 "/checkout/src/libcore/macros.rs"
      HEAP32[$right_val$i>>2] = $_10$i; //@line 114 "/checkout/src/libcore/macros.rs"
      $92 = ($84|0)==(1); //@line 157 "/checkout/src/libcore/option.rs"
      $93 = ($87|0)==($81|0); //@line 766 "/checkout/src/libcore/cmp.rs"
      $or$cond$i = $92 & $93; //@line 157 "/checkout/src/libcore/option.rs"
      if (!($or$cond$i)) {
       label = 33;
       break L6;
      }
      $100 = ($81|0)==(1); //@line 194 "/checkout/src/libstd_unicode/lossy.rs"
      if ($100) {
       $from$1 = $from$059;
      } else {
       $101 = ($iter1$sroa$0$058>>>0)<($from$059>>>0); //@line 1859 "/checkout/src/libcore/str/mod.rs"
       if ($101) {
        label = 42;
        break L6;
       }
       $108 = ($from$059|0)==(0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
       $109 = ($val$sroa$5$0$copyload|0)==($from$059|0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
       $or$cond$i1$i$i$i = $108 | $109; //@line 2438 "/checkout/src/libcore/str/mod.rs"
       if (!($or$cond$i1$i$i$i)) {
        $110 = ($val$sroa$5$0$copyload>>>0)>($from$059>>>0); //@line 792 "/checkout/src/libcore/slice/mod.rs"
        if (!($110)) {
         label = 42;
         break L6;
        }
        $111 = (($val$sroa$0$0$copyload$in) + ($from$059)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
        $112 = HEAP8[$111>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
        $113 = ($112<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
        if (!($113)) {
         label = 42;
         break L6;
        }
       }
       $102 = ($iter1$sroa$0$058|0)==(0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
       $103 = ($val$sroa$5$0$copyload|0)==($iter1$sroa$0$058|0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
       $or$cond$i$i$i$i = $102 | $103; //@line 2438 "/checkout/src/libcore/str/mod.rs"
       if (!($or$cond$i$i$i$i)) {
        $104 = ($val$sroa$5$0$copyload>>>0)>($iter1$sroa$0$058>>>0); //@line 792 "/checkout/src/libcore/slice/mod.rs"
        if (!($104)) {
         label = 42;
         break L6;
        }
        $105 = (($val$sroa$0$0$copyload$in) + ($iter1$sroa$0$058)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
        $106 = HEAP8[$105>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
        $107 = ($106<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
        if (!($107)) {
         label = 42;
         break L6;
        }
       }
       $114 = (($val$sroa$0$0$copyload$in) + ($from$059)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
       $115 = (($iter1$sroa$0$058) - ($from$059))|0; //@line 1880 "/checkout/src/libcore/str/mod.rs"
       $116 = (__ZN4core3fmt9Formatter9write_str17h6edbdf57936018acE($f,$114,$115)|0); //@line 195 "/checkout/src/libstd_unicode/lossy.rs"
       if ($116) {
        label = 45;
        break L6;
       }
       ;HEAP32[$iter2>>2]=HEAP32[$esc>>2]|0;HEAP32[$iter2+4>>2]=HEAP32[$esc+4>>2]|0;HEAP32[$iter2+8>>2]=HEAP32[$esc+8>>2]|0;HEAP32[$iter2+12>>2]=HEAP32[$esc+12>>2]|0; //@line 196 "/checkout/src/libstd_unicode/lossy.rs"
       while(1) {
        $117 = (__ZN74__LT_core__char__EscapeDebug_u20_as_u20_core__iter__iterator__Iterator_GT_4next17h7b8a7edf9fa3076bE($iter2)|0); //@line 196 "/checkout/src/libstd_unicode/lossy.rs"
        $118 = ($117|0)==(1114112); //@line 196 "/checkout/src/libstd_unicode/lossy.rs"
        if ($118) {
         break;
        }
        $123 = (__ZN71__LT_core__fmt__Formatter_LT__u27_a_GT__u20_as_u20_core__fmt__Write_GT_10write_char17hc5577ad36874d504E($f,$117)|0); //@line 197 "/checkout/src/libstd_unicode/lossy.rs"
        if ($123) {
         label = 50;
         break L6;
        }
       }
       $119 = ($69>>>0)<(128); //@line 463 "/checkout/src/libcore/char.rs"
       $120 = ($69>>>0)<(2048); //@line 465 "/checkout/src/libcore/char.rs"
       $121 = ($69>>>0)<(65536); //@line 467 "/checkout/src/libcore/char.rs"
       $$$i$i = $121 ? 3 : 4; //@line 467 "/checkout/src/libcore/char.rs"
       $$$$i$i = $120 ? 2 : $$$i$i; //@line 465 "/checkout/src/libcore/char.rs"
       $$$$$i$i = $119 ? 1 : $$$$i$i; //@line 463 "/checkout/src/libcore/char.rs"
       $122 = (($$$$$i$i) + ($iter1$sroa$0$058))|0; //@line 199 "/checkout/src/libstd_unicode/lossy.rs"
       $from$1 = $122;
      }
      $124 = $iter1$sroa$6$7; //@line 1135 "/checkout/src/libcore/slice/mod.rs"
      $125 = ($124|0)==($14|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
      $126 = ((($124)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
      $127 = $126; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
      $iter1$sroa$6$1 = $125 ? $iter1$sroa$6$7 : $127; //@line 1138 "/checkout/src/libcore/slice/mod.rs"
      $128 = ($iter1$sroa$6$7|0)==(0); //@line 497 "/checkout/src/libcore/str/mod.rs"
      $129 = $128 | $125; //@line 497 "/checkout/src/libcore/str/mod.rs"
      if ($129) {
       $from$0$lcssa = $from$1;
       break;
      } else {
       $22 = $124;$from$059 = $from$1;$iter1$sroa$0$058 = $68;$iter1$sroa$6$057 = $iter1$sroa$6$7;$iter1$sroa$6$161 = $iter1$sroa$6$1;
      }
     }
     $59 = ($from$0$lcssa|0)==(0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
     $60 = ($val$sroa$5$0$copyload|0)==($from$0$lcssa|0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
     $or$cond$i$i$i$i60 = $59 | $60; //@line 2438 "/checkout/src/libcore/str/mod.rs"
     if ($or$cond$i$i$i$i60) {
      $from$0$lcssa93 = $from$0$lcssa;
      label = 21;
     } else {
      $61 = ($val$sroa$5$0$copyload>>>0)>($from$0$lcssa>>>0); //@line 792 "/checkout/src/libcore/slice/mod.rs"
      if (!($61)) {
       label = 24;
       break;
      }
      $62 = (($val$sroa$0$0$copyload$in) + ($from$0$lcssa)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
      $63 = HEAP8[$62>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
      $64 = ($63<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
      if ($64) {
       $$pre$phi$i$i$iZ2D = $62;$from$0$lcssa92 = $from$0$lcssa;
      } else {
       label = 24;
       break;
      }
     }
    }
    if ((label|0) == 21) {
     label = 0;
     $$pre$i$i$i = (($val$sroa$0$0$copyload$in) + ($from$0$lcssa93)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $$pre$phi$i$i$iZ2D = $$pre$i$i$i;$from$0$lcssa92 = $from$0$lcssa93;
    }
    $65 = (($val$sroa$5$0$copyload) - ($from$0$lcssa92))|0; //@line 1975 "/checkout/src/libcore/str/mod.rs"
    $66 = (__ZN4core3fmt9Formatter9write_str17h6edbdf57936018acE($f,$$pre$phi$i$i$iZ2D,$65)|0); //@line 202 "/checkout/src/libstd_unicode/lossy.rs"
    if ($66) {
     break;
    }
    $130 = (($val$sroa$6$0$copyload) + ($val$sroa$7$0$copyload)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
    $131 = ($val$sroa$7$0$copyload|0)==(0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
    if (!($131)) {
     $iter3$sroa$0$0136 = $val$sroa$6$0$copyload;
     while(1) {
      $132 = HEAP8[$iter3$sroa$0$0136>>0]|0; //@line 206 "/checkout/src/libstd_unicode/lossy.rs"
      HEAP8[$b>>0] = $132; //@line 206 "/checkout/src/libstd_unicode/lossy.rs"
      HEAP32[$_145>>2] = $b; //@line 207 "/checkout/src/libstd_unicode/lossy.rs"
      HEAP32[$7>>2] = 463; //@line 207 "/checkout/src/libstd_unicode/lossy.rs"
      HEAP32[$_138>>2] = 9924; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
      HEAP32[$8>>2] = 1; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
      HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 9932; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
      HEAP32[$_5$sroa$4$0$$sroa_idx2$i>>2] = 1; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
      HEAP32[$9>>2] = $_145; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
      HEAP32[$10>>2] = 1; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
      $133 = (__ZN4core3fmt9Formatter9write_fmt17h650e8f365614dc75E($f,$_138)|0); //@line 207 "/checkout/src/libstd_unicode/lossy.rs"
      if ($133) {
       label = 56;
       break L6;
      }
      $134 = ((($iter3$sroa$0$0136)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
      $135 = ($134|0)==($130|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
      if ($135) {
       break;
      } else {
       $iter3$sroa$0$0136 = $134;
      }
     }
    }
    __ZN104__LT_std_unicode__lossy__Utf8LossyChunksIter_LT__u27_a_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17h9f990d690cd0c16cE($_22,$iter); //@line 185 "/checkout/src/libstd_unicode/lossy.rs"
    $11 = HEAP32[$_22>>2]|0; //@line 185 "/checkout/src/libstd_unicode/lossy.rs"
    $12 = ($11|0)==(0|0); //@line 185 "/checkout/src/libstd_unicode/lossy.rs"
    if ($12) {
     break L4;
    } else {
     $val$sroa$0$0$copyload$in = $11;
    }
   }
   if ((label|0) == 24) {
    __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($val$sroa$0$0$copyload$in,$val$sroa$5$0$copyload,$from$0$lcssa,$val$sroa$5$0$copyload); //@line 1987 "/checkout/src/libcore/str/mod.rs"
    // unreachable; //@line 1987 "/checkout/src/libcore/str/mod.rs"
   }
   else if ((label|0) == 33) {
    HEAP32[$_25$i>>2] = $left_val$i; //@line 116 "/checkout/src/libcore/macros.rs"
    $94 = ((($_25$i)) + 4|0); //@line 116 "/checkout/src/libcore/macros.rs"
    HEAP32[$94>>2] = 462; //@line 116 "/checkout/src/libcore/macros.rs"
    $95 = ((($_25$i)) + 8|0); //@line 116 "/checkout/src/libcore/macros.rs"
    HEAP32[$95>>2] = $right_val$i; //@line 116 "/checkout/src/libcore/macros.rs"
    $96 = ((($_25$i)) + 12|0); //@line 116 "/checkout/src/libcore/macros.rs"
    HEAP32[$96>>2] = 462; //@line 116 "/checkout/src/libcore/macros.rs"
    HEAP32[$_18$i>>2] = 9884; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
    $97 = ((($_18$i)) + 4|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
    HEAP32[$97>>2] = 3; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
    $_5$sroa$0$0$$sroa_idx$i$i = ((($_18$i)) + 8|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
    HEAP32[$_5$sroa$0$0$$sroa_idx$i$i>>2] = 12044; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
    $_5$sroa$4$0$$sroa_idx2$i$i = ((($_18$i)) + 12|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
    HEAP32[$_5$sroa$4$0$$sroa_idx2$i$i>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
    $98 = ((($_18$i)) + 16|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
    HEAP32[$98>>2] = $_25$i; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
    $99 = ((($_18$i)) + 20|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
    HEAP32[$99>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
    __ZN4core9panicking9panic_fmt17hff08f8fc41769480E($_18$i,9908); //@line 23 "/checkout/src/libcore/macros.rs"
    // unreachable; //@line 23 "/checkout/src/libcore/macros.rs"
   }
   else if ((label|0) == 42) {
    __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($val$sroa$0$0$copyload$in,$val$sroa$5$0$copyload,$from$059,$iter1$sroa$0$058); //@line 1892 "/checkout/src/libcore/str/mod.rs"
    // unreachable; //@line 1892 "/checkout/src/libcore/str/mod.rs"
   }
   else if ((label|0) == 50) {
    label = 45;
   }
   else if ((label|0) == 56) {
   }
   if ((label|0) == 45) {
   }
   $_0$0$off0 = 1;
   STACKTOP = sp;return ($_0$0$off0|0); //@line 212 "/checkout/src/libstd_unicode/lossy.rs"
  }
 } while(0);
 $13 = (__ZN71__LT_core__fmt__Formatter_LT__u27_a_GT__u20_as_u20_core__fmt__Write_GT_10write_char17hc5577ad36874d504E($f,34)|0); //@line 211 "/checkout/src/libstd_unicode/lossy.rs"
 $_0$0$off0 = $13;
 STACKTOP = sp;return ($_0$0$off0|0); //@line 212 "/checkout/src/libstd_unicode/lossy.rs"
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17hbc154887b124d996E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $_0$0$in$i = 0, $_21$i = 0, $builder$i = 0, $builder1$i = 0, $switch$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_21$i = sp + 24|0;
 $builder1$i = sp + 12|0;
 $builder$i = sp;
 $0 = HEAP32[$self>>2]|0; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $1 = HEAP32[$0>>2]|0; //@line 157 "/checkout/src/libcore/option.rs"
 $switch$i = ($1|0)==(1); //@line 157 "/checkout/src/libcore/option.rs"
 if ($switch$i) {
  $3 = ((($0)) + 4|0); //@line 165 "/checkout/src/libcore/option.rs"
  __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder1$i,$f,25546,4); //@line 157 "/checkout/src/libcore/option.rs"
  HEAP32[$_21$i>>2] = $3; //@line 165 "/checkout/src/libcore/option.rs"
  (__ZN4core3fmt8builders10DebugTuple5field17hf986ac1f5cbaa58cE($builder1$i,$_21$i,9968)|0); //@line 157 "/checkout/src/libcore/option.rs"
  $4 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder1$i)|0); //@line 157 "/checkout/src/libcore/option.rs"
  $_0$0$in$i = $4;
  STACKTOP = sp;return ($_0$0$in$i|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 } else {
  __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($builder$i,$f,25542,4); //@line 157 "/checkout/src/libcore/option.rs"
  $2 = (__ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($builder$i)|0); //@line 157 "/checkout/src/libcore/option.rs"
  $_0$0$in$i = $2;
  STACKTOP = sp;return ($_0$0$in$i|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 }
 return (0)|0;
}
function __ZN4core3ptr13drop_in_place17hba9770ae2f637f1dE($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN11std_unicode6tables23trie_lookup_range_table17hb3ccc76f7ab64b27E($c,$r) {
 $c = $c|0;
 $r = $r|0;
 var $$sink2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c>>>0)<(2048); //@line 82 "/checkout/src/libstd_unicode/tables.rs"
 do {
  if ($0) {
   $1 = $c >>> 6; //@line 83 "/checkout/src/libstd_unicode/tables.rs"
   $2 = (($r) + ($1<<3)|0); //@line 825 "/checkout/src/libcore/slice/mod.rs"
   $$sink2 = $2;
  } else {
   $3 = ($c>>>0)<(65536); //@line 84 "/checkout/src/libstd_unicode/tables.rs"
   if ($3) {
    $4 = $c >>> 6; //@line 85 "/checkout/src/libstd_unicode/tables.rs"
    $5 = (($4) + -32)|0; //@line 85 "/checkout/src/libstd_unicode/tables.rs"
    $6 = ($5>>>0)<(992); //@line 825 "/checkout/src/libcore/slice/mod.rs"
    if (!($6)) {
     __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(9984,$5,992); //@line 825 "/checkout/src/libcore/slice/mod.rs"
     // unreachable; //@line 825 "/checkout/src/libcore/slice/mod.rs"
    }
    $7 = (((($r)) + 280|0) + ($5)|0); //@line 825 "/checkout/src/libcore/slice/mod.rs"
    $8 = HEAP8[$7>>0]|0; //@line 85 "/checkout/src/libstd_unicode/tables.rs"
    $9 = $8&255; //@line 86 "/checkout/src/libstd_unicode/tables.rs"
    $10 = ((($r)) + 260|0); //@line 86 "/checkout/src/libstd_unicode/tables.rs"
    $11 = HEAP32[$10>>2]|0; //@line 86 "/checkout/src/libstd_unicode/tables.rs"
    $12 = ($9>>>0)<($11>>>0); //@line 86 "/checkout/src/libstd_unicode/tables.rs"
    if ($12) {
     $34 = ((($r)) + 256|0); //@line 86 "/checkout/src/libstd_unicode/tables.rs"
     $35 = HEAP32[$34>>2]|0; //@line 86 "/checkout/src/libstd_unicode/tables.rs"
     $36 = (($35) + ($9<<3)|0); //@line 86 "/checkout/src/libstd_unicode/tables.rs"
     $$sink2 = $36;
     break;
    } else {
     __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(10000,$9,$11); //@line 86 "/checkout/src/libstd_unicode/tables.rs"
     // unreachable; //@line 86 "/checkout/src/libstd_unicode/tables.rs"
    }
   }
   $13 = $c >>> 12; //@line 88 "/checkout/src/libstd_unicode/tables.rs"
   $14 = (($13) + -16)|0; //@line 88 "/checkout/src/libstd_unicode/tables.rs"
   $15 = ($14>>>0)<(256); //@line 825 "/checkout/src/libcore/slice/mod.rs"
   if (!($15)) {
    __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(9984,$14,256); //@line 825 "/checkout/src/libcore/slice/mod.rs"
    // unreachable; //@line 825 "/checkout/src/libcore/slice/mod.rs"
   }
   $16 = (((($r)) + 1272|0) + ($14)|0); //@line 825 "/checkout/src/libcore/slice/mod.rs"
   $17 = HEAP8[$16>>0]|0; //@line 88 "/checkout/src/libstd_unicode/tables.rs"
   $18 = ((($r)) + 268|0); //@line 89 "/checkout/src/libstd_unicode/tables.rs"
   $19 = HEAP32[$18>>2]|0; //@line 89 "/checkout/src/libstd_unicode/tables.rs"
   $20 = $17&255; //@line 89 "/checkout/src/libstd_unicode/tables.rs"
   $21 = $20 << 6; //@line 89 "/checkout/src/libstd_unicode/tables.rs"
   $22 = $c >>> 6; //@line 89 "/checkout/src/libstd_unicode/tables.rs"
   $23 = $22 & 63; //@line 89 "/checkout/src/libstd_unicode/tables.rs"
   $24 = $21 | $23; //@line 89 "/checkout/src/libstd_unicode/tables.rs"
   $25 = ($24>>>0)<($19>>>0); //@line 825 "/checkout/src/libcore/slice/mod.rs"
   if (!($25)) {
    __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(9984,$24,$19); //@line 825 "/checkout/src/libcore/slice/mod.rs"
    // unreachable; //@line 825 "/checkout/src/libcore/slice/mod.rs"
   }
   $26 = ((($r)) + 264|0); //@line 89 "/checkout/src/libstd_unicode/tables.rs"
   $27 = HEAP32[$26>>2]|0; //@line 89 "/checkout/src/libstd_unicode/tables.rs"
   $28 = (($27) + ($24)|0); //@line 825 "/checkout/src/libcore/slice/mod.rs"
   $29 = HEAP8[$28>>0]|0; //@line 89 "/checkout/src/libstd_unicode/tables.rs"
   $30 = $29&255; //@line 90 "/checkout/src/libstd_unicode/tables.rs"
   $31 = ((($r)) + 276|0); //@line 90 "/checkout/src/libstd_unicode/tables.rs"
   $32 = HEAP32[$31>>2]|0; //@line 90 "/checkout/src/libstd_unicode/tables.rs"
   $33 = ($30>>>0)<($32>>>0); //@line 90 "/checkout/src/libstd_unicode/tables.rs"
   if ($33) {
    $37 = ((($r)) + 272|0); //@line 90 "/checkout/src/libstd_unicode/tables.rs"
    $38 = HEAP32[$37>>2]|0; //@line 90 "/checkout/src/libstd_unicode/tables.rs"
    $39 = (($38) + ($30<<3)|0); //@line 90 "/checkout/src/libstd_unicode/tables.rs"
    $$sink2 = $39;
    break;
   } else {
    __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(10016,$30,$32); //@line 90 "/checkout/src/libstd_unicode/tables.rs"
    // unreachable; //@line 90 "/checkout/src/libstd_unicode/tables.rs"
   }
  }
 } while(0);
 $40 = $$sink2;
 $41 = $40;
 $42 = HEAP32[$41>>2]|0;
 $43 = (($40) + 4)|0;
 $44 = $43;
 $45 = HEAP32[$44>>2]|0;
 $46 = $c & 63; //@line 77 "/checkout/src/libstd_unicode/tables.rs"
 $47 = (_bitshift64Shl(1,0,($46|0))|0); //@line 77 "/checkout/src/libstd_unicode/tables.rs"
 $48 = tempRet0; //@line 77 "/checkout/src/libstd_unicode/tables.rs"
 $49 = $42 & $47; //@line 77 "/checkout/src/libstd_unicode/tables.rs"
 $50 = $45 & $48; //@line 77 "/checkout/src/libstd_unicode/tables.rs"
 $51 = ($49|0)!=(0); //@line 77 "/checkout/src/libstd_unicode/tables.rs"
 $52 = ($50|0)!=(0); //@line 77 "/checkout/src/libstd_unicode/tables.rs"
 $53 = $51 | $52; //@line 77 "/checkout/src/libstd_unicode/tables.rs"
 return ($53|0); //@line 92 "/checkout/src/libstd_unicode/tables.rs"
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17hb6592d31a2b66213E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self>>2]|0; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $1 = (__ZN4core3fmt3num52__LT_impl_u20_core__fmt__Debug_u20_for_u20_usize_GT_3fmt17heec4ebcff62c8923E($0,$f)|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 return ($1|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN4core3fmt3num52__LT_impl_u20_core__fmt__Debug_u20_for_u20_isize_GT_3fmt17h687fda3961afe305E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN4core3fmt3num54__LT_impl_u20_core__fmt__Display_u20_for_u20_isize_GT_3fmt17h8af2a8dc431746efE($self,$f)|0); //@line 161 "/checkout/src/libcore/fmt/num.rs"
 return ($0|0); //@line 162 "/checkout/src/libcore/fmt/num.rs"
}
function __ZN4core3fmt3num54__LT_impl_u20_core__fmt__Display_u20_for_u20_isize_GT_3fmt17h8af2a8dc431746efE($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $$ = 0, $$old5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $buf = 0, $curr$0 = 0, $curr$1 = 0, $curr$2 = 0, $curr$3 = 0, $n$1 = 0, $n$2 = 0, $n1$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $buf = sp;
 $0 = HEAP32[$self>>2]|0; //@line 202 "/checkout/src/libcore/fmt/num.rs"
 $1 = ($0|0)>(-1); //@line 202 "/checkout/src/libcore/fmt/num.rs"
 $2 = (0 - ($0))|0; //@line 1801 "/checkout/src/libcore/num/mod.rs"
 $$ = $1 ? $0 : $2; //@line 203 "/checkout/src/libcore/fmt/num.rs"
 $3 = ($$>>>0)>(9999); //@line 218 "/checkout/src/libcore/fmt/num.rs"
 if ($3) {
  $curr$0 = 39;$n$1 = $$;
  while(1) {
   $4 = (($n$1>>>0) % 10000)&-1; //@line 219 "/checkout/src/libcore/fmt/num.rs"
   $5 = (($n$1>>>0) / 10000)&-1; //@line 220 "/checkout/src/libcore/fmt/num.rs"
   $6 = (($4>>>0) / 100)&-1; //@line 222 "/checkout/src/libcore/fmt/num.rs"
   $7 = $6 << 1; //@line 222 "/checkout/src/libcore/fmt/num.rs"
   $8 = (($4>>>0) % 100)&-1; //@line 223 "/checkout/src/libcore/fmt/num.rs"
   $9 = $8 << 1; //@line 223 "/checkout/src/libcore/fmt/num.rs"
   $10 = (($curr$0) + -4)|0; //@line 224 "/checkout/src/libcore/fmt/num.rs"
   $11 = (10032 + ($7)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
   $12 = (($buf) + ($10)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
   $13 = HEAP16[$11>>1]|0; //@line 225 "/checkout/src/libcore/fmt/num.rs"
   HEAP8[$12>>0]=$13&255;HEAP8[$12+1>>0]=$13>>8; //@line 225 "/checkout/src/libcore/fmt/num.rs"
   $14 = (10032 + ($9)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
   $15 = (($curr$0) + -2)|0; //@line 226 "/checkout/src/libcore/fmt/num.rs"
   $16 = (($buf) + ($15)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
   $17 = HEAP16[$14>>1]|0; //@line 226 "/checkout/src/libcore/fmt/num.rs"
   HEAP8[$16>>0]=$17&255;HEAP8[$16+1>>0]=$17>>8; //@line 226 "/checkout/src/libcore/fmt/num.rs"
   $$old5 = ($n$1>>>0)>(99999999); //@line 218 "/checkout/src/libcore/fmt/num.rs"
   if ($$old5) {
    $curr$0 = $10;$n$1 = $5;
   } else {
    $curr$1 = $10;$n$2 = $5;
    break;
   }
  }
 } else {
  $curr$1 = 39;$n$2 = $$;
 }
 $18 = ($n$2|0)>(99); //@line 234 "/checkout/src/libcore/fmt/num.rs"
 if ($18) {
  $19 = (($n$2>>>0) % 100)&-1;
  $20 = $19 << 1; //@line 235 "/checkout/src/libcore/fmt/num.rs"
  $21 = (($n$2>>>0) / 100)&-1;
  $22 = (($curr$1) + -2)|0; //@line 237 "/checkout/src/libcore/fmt/num.rs"
  $23 = (10032 + ($20)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $24 = (($buf) + ($22)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $25 = HEAP16[$23>>1]|0; //@line 238 "/checkout/src/libcore/fmt/num.rs"
  HEAP8[$24>>0]=$25&255;HEAP8[$24+1>>0]=$25>>8; //@line 238 "/checkout/src/libcore/fmt/num.rs"
  $curr$2 = $22;$n1$0 = $21;
 } else {
  $curr$2 = $curr$1;$n1$0 = $n$2;
 }
 $26 = ($n1$0|0)<(10); //@line 242 "/checkout/src/libcore/fmt/num.rs"
 if ($26) {
  $27 = (($curr$2) + -1)|0; //@line 243 "/checkout/src/libcore/fmt/num.rs"
  $28 = $n1$0&255; //@line 244 "/checkout/src/libcore/fmt/num.rs"
  $29 = (($buf) + ($27)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $30 = (($28) + 48)<<24>>24; //@line 244 "/checkout/src/libcore/fmt/num.rs"
  HEAP8[$29>>0] = $30; //@line 244 "/checkout/src/libcore/fmt/num.rs"
  $curr$3 = $27;
  $36 = (($buf) + ($curr$3)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $37 = (39 - ($curr$3))|0; //@line 254 "/checkout/src/libcore/fmt/num.rs"
  $38 = (__ZN4core3fmt9Formatter12pad_integral17h3050cf392a622772E($f,$1,39452,0,$36,$37)|0); //@line 256 "/checkout/src/libcore/fmt/num.rs"
  STACKTOP = sp;return ($38|0); //@line 257 "/checkout/src/libcore/fmt/num.rs"
 } else {
  $31 = $n1$0 << 1; //@line 246 "/checkout/src/libcore/fmt/num.rs"
  $32 = (($curr$2) + -2)|0; //@line 247 "/checkout/src/libcore/fmt/num.rs"
  $33 = (10032 + ($31)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $34 = (($buf) + ($32)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $35 = HEAP16[$33>>1]|0; //@line 248 "/checkout/src/libcore/fmt/num.rs"
  HEAP8[$34>>0]=$35&255;HEAP8[$34+1>>0]=$35>>8; //@line 248 "/checkout/src/libcore/fmt/num.rs"
  $curr$3 = $32;
  $36 = (($buf) + ($curr$3)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $37 = (39 - ($curr$3))|0; //@line 254 "/checkout/src/libcore/fmt/num.rs"
  $38 = (__ZN4core3fmt9Formatter12pad_integral17h3050cf392a622772E($f,$1,39452,0,$36,$37)|0); //@line 256 "/checkout/src/libcore/fmt/num.rs"
  STACKTOP = sp;return ($38|0); //@line 257 "/checkout/src/libcore/fmt/num.rs"
 }
 return (0)|0;
}
function __ZN4core3fmt3num55__LT_impl_u20_core__fmt__LowerHex_u20_for_u20_usize_GT_3fmt17h82070d0f7b249d5cE($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $$sink$i11$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf$i = 0, $curr$0$i = 0, $iter$sroa$4$0$i = 0, $x$0$i = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $buf$i = sp;
 $0 = HEAP32[$self>>2]|0; //@line 150 "/checkout/src/libcore/fmt/num.rs"
 dest=$buf$i; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0)); //@line 68 "/checkout/src/libcore/fmt/num.rs"
 $1 = ((($buf$i)) + 128|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
 $curr$0$i = 128;$iter$sroa$4$0$i = $1;$x$0$i = $0;
 while(1) {
  $2 = ((($iter$sroa$4$0$i)) + -1|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $3 = $x$0$i & 15; //@line 513 "/checkout/src/libcore/ops/arith.rs"
  $4 = $x$0$i >>> 4; //@line 431 "/checkout/src/libcore/ops/arith.rs"
  $5 = $3&255; //@line 39 "/checkout/src/libcore/fmt/num.rs"
  $6 = ($5&255)<(10); //@line 140 "/checkout/src/libcore/fmt/num.rs"
  $$sink$i11$i = $6 ? 48 : 87; //@line 140 "/checkout/src/libcore/fmt/num.rs"
  $7 = (($$sink$i11$i) + ($5))<<24>>24;
  HEAP8[$2>>0] = $7; //@line 77 "/checkout/src/libcore/fmt/num.rs"
  $8 = (($curr$0$i) + -1)|0; //@line 78 "/checkout/src/libcore/fmt/num.rs"
  $9 = ($4|0)==(0); //@line 766 "/checkout/src/libcore/cmp.rs"
  if ($9) {
   break;
  } else {
   $curr$0$i = $8;$iter$sroa$4$0$i = $2;$x$0$i = $4;
  }
 }
 $10 = ($8>>>0)>(128); //@line 873 "/checkout/src/libcore/slice/mod.rs"
 if ($10) {
  __ZN4core5slice22slice_index_order_fail17h620f0e130a93079bE($8,128); //@line 874 "/checkout/src/libcore/slice/mod.rs"
  // unreachable; //@line 874 "/checkout/src/libcore/slice/mod.rs"
 } else {
  $11 = (($buf$i) + ($8)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $12 = (129 - ($curr$0$i))|0; //@line 863 "/checkout/src/libcore/slice/mod.rs"
  $13 = (__ZN4core3fmt9Formatter12pad_integral17h3050cf392a622772E($f,1,25622,2,$11,$12)|0); //@line 98 "/checkout/src/libcore/fmt/num.rs"
  STACKTOP = sp;return ($13|0); //@line 151 "/checkout/src/libcore/fmt/num.rs"
 }
 return (0)|0;
}
function __ZN4core3fmt3num52__LT_impl_u20_core__fmt__Debug_u20_for_u20_usize_GT_3fmt17heec4ebcff62c8923E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN4core3fmt3num54__LT_impl_u20_core__fmt__Display_u20_for_u20_usize_GT_3fmt17h36438de9cd0d1868E($self,$f)|0); //@line 161 "/checkout/src/libcore/fmt/num.rs"
 return ($0|0); //@line 162 "/checkout/src/libcore/fmt/num.rs"
}
function __ZN4core3fmt3num54__LT_impl_u20_core__fmt__Display_u20_for_u20_usize_GT_3fmt17h36438de9cd0d1868E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $$old5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $curr$0 = 0;
 var $curr$1 = 0, $curr$2 = 0, $curr$3 = 0, $n$1 = 0, $n$2 = 0, $n1$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $buf = sp;
 $0 = HEAP32[$self>>2]|0; //@line 41 "/checkout/src/libcore/fmt/num.rs"
 $1 = ($0>>>0)>(9999); //@line 218 "/checkout/src/libcore/fmt/num.rs"
 if ($1) {
  $curr$0 = 39;$n$1 = $0;
  while(1) {
   $2 = (($n$1>>>0) % 10000)&-1; //@line 219 "/checkout/src/libcore/fmt/num.rs"
   $3 = (($n$1>>>0) / 10000)&-1; //@line 220 "/checkout/src/libcore/fmt/num.rs"
   $4 = (($2>>>0) / 100)&-1; //@line 222 "/checkout/src/libcore/fmt/num.rs"
   $5 = $4 << 1; //@line 222 "/checkout/src/libcore/fmt/num.rs"
   $6 = (($2>>>0) % 100)&-1; //@line 223 "/checkout/src/libcore/fmt/num.rs"
   $7 = $6 << 1; //@line 223 "/checkout/src/libcore/fmt/num.rs"
   $8 = (($curr$0) + -4)|0; //@line 224 "/checkout/src/libcore/fmt/num.rs"
   $9 = (10032 + ($5)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
   $10 = (($buf) + ($8)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
   $11 = HEAP16[$9>>1]|0; //@line 225 "/checkout/src/libcore/fmt/num.rs"
   HEAP8[$10>>0]=$11&255;HEAP8[$10+1>>0]=$11>>8; //@line 225 "/checkout/src/libcore/fmt/num.rs"
   $12 = (10032 + ($7)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
   $13 = (($curr$0) + -2)|0; //@line 226 "/checkout/src/libcore/fmt/num.rs"
   $14 = (($buf) + ($13)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
   $15 = HEAP16[$12>>1]|0; //@line 226 "/checkout/src/libcore/fmt/num.rs"
   HEAP8[$14>>0]=$15&255;HEAP8[$14+1>>0]=$15>>8; //@line 226 "/checkout/src/libcore/fmt/num.rs"
   $$old5 = ($n$1>>>0)>(99999999); //@line 218 "/checkout/src/libcore/fmt/num.rs"
   if ($$old5) {
    $curr$0 = $8;$n$1 = $3;
   } else {
    $curr$1 = $8;$n$2 = $3;
    break;
   }
  }
 } else {
  $curr$1 = 39;$n$2 = $0;
 }
 $16 = ($n$2|0)>(99); //@line 234 "/checkout/src/libcore/fmt/num.rs"
 if ($16) {
  $17 = (($n$2>>>0) % 100)&-1;
  $18 = $17 << 1; //@line 235 "/checkout/src/libcore/fmt/num.rs"
  $19 = (($n$2>>>0) / 100)&-1;
  $20 = (($curr$1) + -2)|0; //@line 237 "/checkout/src/libcore/fmt/num.rs"
  $21 = (10032 + ($18)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $22 = (($buf) + ($20)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $23 = HEAP16[$21>>1]|0; //@line 238 "/checkout/src/libcore/fmt/num.rs"
  HEAP8[$22>>0]=$23&255;HEAP8[$22+1>>0]=$23>>8; //@line 238 "/checkout/src/libcore/fmt/num.rs"
  $curr$2 = $20;$n1$0 = $19;
 } else {
  $curr$2 = $curr$1;$n1$0 = $n$2;
 }
 $24 = ($n1$0|0)<(10); //@line 242 "/checkout/src/libcore/fmt/num.rs"
 if ($24) {
  $25 = (($curr$2) + -1)|0; //@line 243 "/checkout/src/libcore/fmt/num.rs"
  $26 = $n1$0&255; //@line 244 "/checkout/src/libcore/fmt/num.rs"
  $27 = (($buf) + ($25)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $28 = (($26) + 48)<<24>>24; //@line 244 "/checkout/src/libcore/fmt/num.rs"
  HEAP8[$27>>0] = $28; //@line 244 "/checkout/src/libcore/fmt/num.rs"
  $curr$3 = $25;
  $34 = (($buf) + ($curr$3)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $35 = (39 - ($curr$3))|0; //@line 254 "/checkout/src/libcore/fmt/num.rs"
  $36 = (__ZN4core3fmt9Formatter12pad_integral17h3050cf392a622772E($f,1,39452,0,$34,$35)|0); //@line 256 "/checkout/src/libcore/fmt/num.rs"
  STACKTOP = sp;return ($36|0); //@line 257 "/checkout/src/libcore/fmt/num.rs"
 } else {
  $29 = $n1$0 << 1; //@line 246 "/checkout/src/libcore/fmt/num.rs"
  $30 = (($curr$2) + -2)|0; //@line 247 "/checkout/src/libcore/fmt/num.rs"
  $31 = (10032 + ($29)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $32 = (($buf) + ($30)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $33 = HEAP16[$31>>1]|0; //@line 248 "/checkout/src/libcore/fmt/num.rs"
  HEAP8[$32>>0]=$33&255;HEAP8[$32+1>>0]=$33>>8; //@line 248 "/checkout/src/libcore/fmt/num.rs"
  $curr$3 = $30;
  $34 = (($buf) + ($curr$3)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $35 = (39 - ($curr$3))|0; //@line 254 "/checkout/src/libcore/fmt/num.rs"
  $36 = (__ZN4core3fmt9Formatter12pad_integral17h3050cf392a622772E($f,1,39452,0,$34,$35)|0); //@line 256 "/checkout/src/libcore/fmt/num.rs"
  STACKTOP = sp;return ($36|0); //@line 257 "/checkout/src/libcore/fmt/num.rs"
 }
 return (0)|0;
}
function __ZN4core3fmt3num49__LT_impl_u20_core__fmt__Debug_u20_for_u20_i8_GT_3fmt17hd378e4308ae63536E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $$$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf$i = 0, $curr$2$i = 0, $curr$3$i = 0, $n1$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $buf$i = sp;
 $0 = HEAP8[$self>>0]|0; //@line 202 "/checkout/src/libcore/fmt/num.rs"
 $1 = ($0<<24>>24)>(-1); //@line 202 "/checkout/src/libcore/fmt/num.rs"
 $2 = $0 << 24 >> 24; //@line 41 "/checkout/src/libcore/fmt/num.rs"
 $3 = (0 - ($2))|0; //@line 1801 "/checkout/src/libcore/num/mod.rs"
 $$$i = $1 ? $2 : $3; //@line 203 "/checkout/src/libcore/fmt/num.rs"
 $4 = ($$$i|0)>(99); //@line 234 "/checkout/src/libcore/fmt/num.rs"
 if ($4) {
  $5 = (($$$i>>>0) % 100)&-1;
  $6 = $5 << 1; //@line 235 "/checkout/src/libcore/fmt/num.rs"
  $7 = (($$$i>>>0) / 100)&-1;
  $8 = (10032 + ($6)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $9 = ((($buf$i)) + 37|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $10 = HEAP16[$8>>1]|0; //@line 238 "/checkout/src/libcore/fmt/num.rs"
  HEAP8[$9>>0]=$10&255;HEAP8[$9+1>>0]=$10>>8; //@line 238 "/checkout/src/libcore/fmt/num.rs"
  $curr$2$i = 37;$n1$0$i = $7;
 } else {
  $curr$2$i = 39;$n1$0$i = $$$i;
 }
 $11 = ($n1$0$i|0)<(10); //@line 242 "/checkout/src/libcore/fmt/num.rs"
 if ($11) {
  $12 = (($curr$2$i) + -1)|0; //@line 243 "/checkout/src/libcore/fmt/num.rs"
  $13 = $n1$0$i&255; //@line 244 "/checkout/src/libcore/fmt/num.rs"
  $14 = (($buf$i) + ($12)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $15 = (($13) + 48)<<24>>24; //@line 244 "/checkout/src/libcore/fmt/num.rs"
  HEAP8[$14>>0] = $15; //@line 244 "/checkout/src/libcore/fmt/num.rs"
  $curr$3$i = $12;
  $21 = (($buf$i) + ($curr$3$i)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $22 = (39 - ($curr$3$i))|0; //@line 254 "/checkout/src/libcore/fmt/num.rs"
  $23 = (__ZN4core3fmt9Formatter12pad_integral17h3050cf392a622772E($f,$1,39452,0,$21,$22)|0); //@line 256 "/checkout/src/libcore/fmt/num.rs"
  STACKTOP = sp;return ($23|0); //@line 162 "/checkout/src/libcore/fmt/num.rs"
 } else {
  $16 = $n1$0$i << 1; //@line 246 "/checkout/src/libcore/fmt/num.rs"
  $17 = (($curr$2$i) + -2)|0; //@line 247 "/checkout/src/libcore/fmt/num.rs"
  $18 = (10032 + ($16)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $19 = (($buf$i) + ($17)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $20 = HEAP16[$18>>1]|0; //@line 248 "/checkout/src/libcore/fmt/num.rs"
  HEAP8[$19>>0]=$20&255;HEAP8[$19+1>>0]=$20>>8; //@line 248 "/checkout/src/libcore/fmt/num.rs"
  $curr$3$i = $17;
  $21 = (($buf$i) + ($curr$3$i)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $22 = (39 - ($curr$3$i))|0; //@line 254 "/checkout/src/libcore/fmt/num.rs"
  $23 = (__ZN4core3fmt9Formatter12pad_integral17h3050cf392a622772E($f,$1,39452,0,$21,$22)|0); //@line 256 "/checkout/src/libcore/fmt/num.rs"
  STACKTOP = sp;return ($23|0); //@line 162 "/checkout/src/libcore/fmt/num.rs"
 }
 return (0)|0;
}
function __ZN4core3fmt3num52__LT_impl_u20_core__fmt__LowerHex_u20_for_u20_u8_GT_3fmt17h84496651f977fedcE($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $$$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf$i = 0, $curr$0$i = 0, $iter$sroa$4$0$i = 0, $x$0$i = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $buf$i = sp;
 $0 = HEAP8[$self>>0]|0; //@line 150 "/checkout/src/libcore/fmt/num.rs"
 dest=$buf$i; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0)); //@line 68 "/checkout/src/libcore/fmt/num.rs"
 $1 = ((($buf$i)) + 128|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
 $curr$0$i = 128;$iter$sroa$4$0$i = $1;$x$0$i = $0;
 while(1) {
  $2 = ((($iter$sroa$4$0$i)) + -1|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $3 = $x$0$i & 15; //@line 513 "/checkout/src/libcore/ops/arith.rs"
  $4 = ($x$0$i&255) >>> 4; //@line 431 "/checkout/src/libcore/ops/arith.rs"
  $5 = ($3&255)<(10); //@line 140 "/checkout/src/libcore/fmt/num.rs"
  $$$i = $5 ? 48 : 87; //@line 140 "/checkout/src/libcore/fmt/num.rs"
  $6 = (($$$i) + ($3))<<24>>24;
  HEAP8[$2>>0] = $6; //@line 77 "/checkout/src/libcore/fmt/num.rs"
  $7 = (($curr$0$i) + -1)|0; //@line 78 "/checkout/src/libcore/fmt/num.rs"
  $8 = ($4<<24>>24)==(0); //@line 766 "/checkout/src/libcore/cmp.rs"
  if ($8) {
   break;
  } else {
   $curr$0$i = $7;$iter$sroa$4$0$i = $2;$x$0$i = $4;
  }
 }
 $9 = ($7>>>0)>(128); //@line 873 "/checkout/src/libcore/slice/mod.rs"
 if ($9) {
  __ZN4core5slice22slice_index_order_fail17h620f0e130a93079bE($7,128); //@line 874 "/checkout/src/libcore/slice/mod.rs"
  // unreachable; //@line 874 "/checkout/src/libcore/slice/mod.rs"
 } else {
  $10 = (($buf$i) + ($7)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $11 = (129 - ($curr$0$i))|0; //@line 863 "/checkout/src/libcore/slice/mod.rs"
  $12 = (__ZN4core3fmt9Formatter12pad_integral17h3050cf392a622772E($f,1,25622,2,$10,$11)|0); //@line 98 "/checkout/src/libcore/fmt/num.rs"
  STACKTOP = sp;return ($12|0); //@line 151 "/checkout/src/libcore/fmt/num.rs"
 }
 return (0)|0;
}
function __ZN4core3fmt3num49__LT_impl_u20_core__fmt__Debug_u20_for_u20_u8_GT_3fmt17h2976fb9686b0bdc3E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $buf$i = 0, $curr$230$i = 0, $curr$3$i = 0, $div$i = 0, $n1$029$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $buf$i = sp;
 $0 = HEAP8[$self>>0]|0; //@line 41 "/checkout/src/libcore/fmt/num.rs"
 $1 = $0&255; //@line 41 "/checkout/src/libcore/fmt/num.rs"
 $2 = ($0&255)>(99); //@line 234 "/checkout/src/libcore/fmt/num.rs"
 if ($2) {
  $3 = (($0&255) % 100)&-1;
  $4 = ($3 << 1)&255; //@line 235 "/checkout/src/libcore/fmt/num.rs"
  $5 = $4&255; //@line 235 "/checkout/src/libcore/fmt/num.rs"
  $div$i = (($0&255) / 100)&-1;
  $6 = $div$i&255;
  $7 = (10032 + ($5)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $8 = ((($buf$i)) + 37|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $9 = HEAP16[$7>>1]|0; //@line 238 "/checkout/src/libcore/fmt/num.rs"
  HEAP8[$8>>0]=$9&255;HEAP8[$8+1>>0]=$9>>8; //@line 238 "/checkout/src/libcore/fmt/num.rs"
  $curr$230$i = 36;$n1$029$i = $6;
  label = 4;
 } else {
  $10 = ($0&255)<(10); //@line 242 "/checkout/src/libcore/fmt/num.rs"
  if ($10) {
   $curr$230$i = 38;$n1$029$i = $1;
   label = 4;
  } else {
   $14 = $1 << 1; //@line 246 "/checkout/src/libcore/fmt/num.rs"
   $15 = (10032 + ($14)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
   $16 = ((($buf$i)) + 37|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
   $17 = HEAP16[$15>>1]|0; //@line 248 "/checkout/src/libcore/fmt/num.rs"
   HEAP8[$16>>0]=$17&255;HEAP8[$16+1>>0]=$17>>8; //@line 248 "/checkout/src/libcore/fmt/num.rs"
   $curr$3$i = 37;
  }
 }
 if ((label|0) == 4) {
  $11 = $n1$029$i&255; //@line 244 "/checkout/src/libcore/fmt/num.rs"
  $12 = (($buf$i) + ($curr$230$i)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $13 = (($11) + 48)<<24>>24; //@line 244 "/checkout/src/libcore/fmt/num.rs"
  HEAP8[$12>>0] = $13; //@line 244 "/checkout/src/libcore/fmt/num.rs"
  $curr$3$i = $curr$230$i;
 }
 $18 = (($buf$i) + ($curr$3$i)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
 $19 = (39 - ($curr$3$i))|0; //@line 254 "/checkout/src/libcore/fmt/num.rs"
 $20 = (__ZN4core3fmt9Formatter12pad_integral17h3050cf392a622772E($f,1,39452,0,$18,$19)|0); //@line 256 "/checkout/src/libcore/fmt/num.rs"
 STACKTOP = sp;return ($20|0); //@line 162 "/checkout/src/libcore/fmt/num.rs"
}
function __ZN4core3fmt3num50__LT_impl_u20_core__fmt__Debug_u20_for_u20_i32_GT_3fmt17h6be49b2b2c2ab878E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN4core3fmt3num52__LT_impl_u20_core__fmt__Display_u20_for_u20_i32_GT_3fmt17h945b40ba8a32e7e6E($self,$f)|0); //@line 161 "/checkout/src/libcore/fmt/num.rs"
 return ($0|0); //@line 162 "/checkout/src/libcore/fmt/num.rs"
}
function __ZN4core3fmt3num52__LT_impl_u20_core__fmt__Display_u20_for_u20_i32_GT_3fmt17h945b40ba8a32e7e6E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $$ = 0, $$old5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $buf = 0, $curr$0 = 0, $curr$1 = 0, $curr$2 = 0, $curr$3 = 0, $n$1 = 0, $n$2 = 0, $n1$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $buf = sp;
 $0 = HEAP32[$self>>2]|0; //@line 202 "/checkout/src/libcore/fmt/num.rs"
 $1 = ($0|0)>(-1); //@line 202 "/checkout/src/libcore/fmt/num.rs"
 $2 = (0 - ($0))|0; //@line 1801 "/checkout/src/libcore/num/mod.rs"
 $$ = $1 ? $0 : $2; //@line 203 "/checkout/src/libcore/fmt/num.rs"
 $3 = ($$>>>0)>(9999); //@line 218 "/checkout/src/libcore/fmt/num.rs"
 if ($3) {
  $curr$0 = 39;$n$1 = $$;
  while(1) {
   $4 = (($n$1>>>0) % 10000)&-1; //@line 219 "/checkout/src/libcore/fmt/num.rs"
   $5 = (($n$1>>>0) / 10000)&-1; //@line 220 "/checkout/src/libcore/fmt/num.rs"
   $6 = (($4>>>0) / 100)&-1; //@line 222 "/checkout/src/libcore/fmt/num.rs"
   $7 = $6 << 1; //@line 222 "/checkout/src/libcore/fmt/num.rs"
   $8 = (($4>>>0) % 100)&-1; //@line 223 "/checkout/src/libcore/fmt/num.rs"
   $9 = $8 << 1; //@line 223 "/checkout/src/libcore/fmt/num.rs"
   $10 = (($curr$0) + -4)|0; //@line 224 "/checkout/src/libcore/fmt/num.rs"
   $11 = (10032 + ($7)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
   $12 = (($buf) + ($10)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
   $13 = HEAP16[$11>>1]|0; //@line 225 "/checkout/src/libcore/fmt/num.rs"
   HEAP8[$12>>0]=$13&255;HEAP8[$12+1>>0]=$13>>8; //@line 225 "/checkout/src/libcore/fmt/num.rs"
   $14 = (10032 + ($9)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
   $15 = (($curr$0) + -2)|0; //@line 226 "/checkout/src/libcore/fmt/num.rs"
   $16 = (($buf) + ($15)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
   $17 = HEAP16[$14>>1]|0; //@line 226 "/checkout/src/libcore/fmt/num.rs"
   HEAP8[$16>>0]=$17&255;HEAP8[$16+1>>0]=$17>>8; //@line 226 "/checkout/src/libcore/fmt/num.rs"
   $$old5 = ($n$1>>>0)>(99999999); //@line 218 "/checkout/src/libcore/fmt/num.rs"
   if ($$old5) {
    $curr$0 = $10;$n$1 = $5;
   } else {
    $curr$1 = $10;$n$2 = $5;
    break;
   }
  }
 } else {
  $curr$1 = 39;$n$2 = $$;
 }
 $18 = ($n$2|0)>(99); //@line 234 "/checkout/src/libcore/fmt/num.rs"
 if ($18) {
  $19 = (($n$2>>>0) % 100)&-1;
  $20 = $19 << 1; //@line 235 "/checkout/src/libcore/fmt/num.rs"
  $21 = (($n$2>>>0) / 100)&-1;
  $22 = (($curr$1) + -2)|0; //@line 237 "/checkout/src/libcore/fmt/num.rs"
  $23 = (10032 + ($20)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $24 = (($buf) + ($22)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $25 = HEAP16[$23>>1]|0; //@line 238 "/checkout/src/libcore/fmt/num.rs"
  HEAP8[$24>>0]=$25&255;HEAP8[$24+1>>0]=$25>>8; //@line 238 "/checkout/src/libcore/fmt/num.rs"
  $curr$2 = $22;$n1$0 = $21;
 } else {
  $curr$2 = $curr$1;$n1$0 = $n$2;
 }
 $26 = ($n1$0|0)<(10); //@line 242 "/checkout/src/libcore/fmt/num.rs"
 if ($26) {
  $27 = (($curr$2) + -1)|0; //@line 243 "/checkout/src/libcore/fmt/num.rs"
  $28 = $n1$0&255; //@line 244 "/checkout/src/libcore/fmt/num.rs"
  $29 = (($buf) + ($27)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $30 = (($28) + 48)<<24>>24; //@line 244 "/checkout/src/libcore/fmt/num.rs"
  HEAP8[$29>>0] = $30; //@line 244 "/checkout/src/libcore/fmt/num.rs"
  $curr$3 = $27;
  $36 = (($buf) + ($curr$3)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $37 = (39 - ($curr$3))|0; //@line 254 "/checkout/src/libcore/fmt/num.rs"
  $38 = (__ZN4core3fmt9Formatter12pad_integral17h3050cf392a622772E($f,$1,39452,0,$36,$37)|0); //@line 256 "/checkout/src/libcore/fmt/num.rs"
  STACKTOP = sp;return ($38|0); //@line 257 "/checkout/src/libcore/fmt/num.rs"
 } else {
  $31 = $n1$0 << 1; //@line 246 "/checkout/src/libcore/fmt/num.rs"
  $32 = (($curr$2) + -2)|0; //@line 247 "/checkout/src/libcore/fmt/num.rs"
  $33 = (10032 + ($31)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $34 = (($buf) + ($32)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $35 = HEAP16[$33>>1]|0; //@line 248 "/checkout/src/libcore/fmt/num.rs"
  HEAP8[$34>>0]=$35&255;HEAP8[$34+1>>0]=$35>>8; //@line 248 "/checkout/src/libcore/fmt/num.rs"
  $curr$3 = $32;
  $36 = (($buf) + ($curr$3)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $37 = (39 - ($curr$3))|0; //@line 254 "/checkout/src/libcore/fmt/num.rs"
  $38 = (__ZN4core3fmt9Formatter12pad_integral17h3050cf392a622772E($f,$1,39452,0,$36,$37)|0); //@line 256 "/checkout/src/libcore/fmt/num.rs"
  STACKTOP = sp;return ($38|0); //@line 257 "/checkout/src/libcore/fmt/num.rs"
 }
 return (0)|0;
}
function __ZN4core3fmt3num50__LT_impl_u20_core__fmt__Debug_u20_for_u20_u32_GT_3fmt17h132f420c75d3aee9E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN4core3fmt3num52__LT_impl_u20_core__fmt__Display_u20_for_u20_u32_GT_3fmt17h846ef3ae61db4016E($self,$f)|0); //@line 161 "/checkout/src/libcore/fmt/num.rs"
 return ($0|0); //@line 162 "/checkout/src/libcore/fmt/num.rs"
}
function __ZN4core3fmt3num52__LT_impl_u20_core__fmt__Display_u20_for_u20_u32_GT_3fmt17h846ef3ae61db4016E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $$old5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $curr$0 = 0;
 var $curr$1 = 0, $curr$2 = 0, $curr$3 = 0, $n$1 = 0, $n$2 = 0, $n1$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $buf = sp;
 $0 = HEAP32[$self>>2]|0; //@line 41 "/checkout/src/libcore/fmt/num.rs"
 $1 = ($0>>>0)>(9999); //@line 218 "/checkout/src/libcore/fmt/num.rs"
 if ($1) {
  $curr$0 = 39;$n$1 = $0;
  while(1) {
   $2 = (($n$1>>>0) % 10000)&-1; //@line 219 "/checkout/src/libcore/fmt/num.rs"
   $3 = (($n$1>>>0) / 10000)&-1; //@line 220 "/checkout/src/libcore/fmt/num.rs"
   $4 = (($2>>>0) / 100)&-1; //@line 222 "/checkout/src/libcore/fmt/num.rs"
   $5 = $4 << 1; //@line 222 "/checkout/src/libcore/fmt/num.rs"
   $6 = (($2>>>0) % 100)&-1; //@line 223 "/checkout/src/libcore/fmt/num.rs"
   $7 = $6 << 1; //@line 223 "/checkout/src/libcore/fmt/num.rs"
   $8 = (($curr$0) + -4)|0; //@line 224 "/checkout/src/libcore/fmt/num.rs"
   $9 = (10032 + ($5)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
   $10 = (($buf) + ($8)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
   $11 = HEAP16[$9>>1]|0; //@line 225 "/checkout/src/libcore/fmt/num.rs"
   HEAP8[$10>>0]=$11&255;HEAP8[$10+1>>0]=$11>>8; //@line 225 "/checkout/src/libcore/fmt/num.rs"
   $12 = (10032 + ($7)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
   $13 = (($curr$0) + -2)|0; //@line 226 "/checkout/src/libcore/fmt/num.rs"
   $14 = (($buf) + ($13)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
   $15 = HEAP16[$12>>1]|0; //@line 226 "/checkout/src/libcore/fmt/num.rs"
   HEAP8[$14>>0]=$15&255;HEAP8[$14+1>>0]=$15>>8; //@line 226 "/checkout/src/libcore/fmt/num.rs"
   $$old5 = ($n$1>>>0)>(99999999); //@line 218 "/checkout/src/libcore/fmt/num.rs"
   if ($$old5) {
    $curr$0 = $8;$n$1 = $3;
   } else {
    $curr$1 = $8;$n$2 = $3;
    break;
   }
  }
 } else {
  $curr$1 = 39;$n$2 = $0;
 }
 $16 = ($n$2|0)>(99); //@line 234 "/checkout/src/libcore/fmt/num.rs"
 if ($16) {
  $17 = (($n$2>>>0) % 100)&-1;
  $18 = $17 << 1; //@line 235 "/checkout/src/libcore/fmt/num.rs"
  $19 = (($n$2>>>0) / 100)&-1;
  $20 = (($curr$1) + -2)|0; //@line 237 "/checkout/src/libcore/fmt/num.rs"
  $21 = (10032 + ($18)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $22 = (($buf) + ($20)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $23 = HEAP16[$21>>1]|0; //@line 238 "/checkout/src/libcore/fmt/num.rs"
  HEAP8[$22>>0]=$23&255;HEAP8[$22+1>>0]=$23>>8; //@line 238 "/checkout/src/libcore/fmt/num.rs"
  $curr$2 = $20;$n1$0 = $19;
 } else {
  $curr$2 = $curr$1;$n1$0 = $n$2;
 }
 $24 = ($n1$0|0)<(10); //@line 242 "/checkout/src/libcore/fmt/num.rs"
 if ($24) {
  $25 = (($curr$2) + -1)|0; //@line 243 "/checkout/src/libcore/fmt/num.rs"
  $26 = $n1$0&255; //@line 244 "/checkout/src/libcore/fmt/num.rs"
  $27 = (($buf) + ($25)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $28 = (($26) + 48)<<24>>24; //@line 244 "/checkout/src/libcore/fmt/num.rs"
  HEAP8[$27>>0] = $28; //@line 244 "/checkout/src/libcore/fmt/num.rs"
  $curr$3 = $25;
  $34 = (($buf) + ($curr$3)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $35 = (39 - ($curr$3))|0; //@line 254 "/checkout/src/libcore/fmt/num.rs"
  $36 = (__ZN4core3fmt9Formatter12pad_integral17h3050cf392a622772E($f,1,39452,0,$34,$35)|0); //@line 256 "/checkout/src/libcore/fmt/num.rs"
  STACKTOP = sp;return ($36|0); //@line 257 "/checkout/src/libcore/fmt/num.rs"
 } else {
  $29 = $n1$0 << 1; //@line 246 "/checkout/src/libcore/fmt/num.rs"
  $30 = (($curr$2) + -2)|0; //@line 247 "/checkout/src/libcore/fmt/num.rs"
  $31 = (10032 + ($29)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $32 = (($buf) + ($30)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $33 = HEAP16[$31>>1]|0; //@line 248 "/checkout/src/libcore/fmt/num.rs"
  HEAP8[$32>>0]=$33&255;HEAP8[$32+1>>0]=$33>>8; //@line 248 "/checkout/src/libcore/fmt/num.rs"
  $curr$3 = $30;
  $34 = (($buf) + ($curr$3)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $35 = (39 - ($curr$3))|0; //@line 254 "/checkout/src/libcore/fmt/num.rs"
  $36 = (__ZN4core3fmt9Formatter12pad_integral17h3050cf392a622772E($f,1,39452,0,$34,$35)|0); //@line 256 "/checkout/src/libcore/fmt/num.rs"
  STACKTOP = sp;return ($36|0); //@line 257 "/checkout/src/libcore/fmt/num.rs"
 }
 return (0)|0;
}
function __ZN4core3fmt3num52__LT_impl_u20_core__fmt__Display_u20_for_u20_u64_GT_3fmt17h86a0faa196607cfcE($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $curr$0 = 0, $curr$1 = 0, $curr$2 = 0, $curr$3 = 0;
 var $n$2$off0 = 0, $n1$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $buf = sp;
 $0 = $self; //@line 42 "/checkout/src/libcore/fmt/num.rs"
 $1 = $0; //@line 42 "/checkout/src/libcore/fmt/num.rs"
 $2 = HEAP32[$1>>2]|0; //@line 42 "/checkout/src/libcore/fmt/num.rs"
 $3 = (($0) + 4)|0; //@line 42 "/checkout/src/libcore/fmt/num.rs"
 $4 = $3; //@line 42 "/checkout/src/libcore/fmt/num.rs"
 $5 = HEAP32[$4>>2]|0; //@line 42 "/checkout/src/libcore/fmt/num.rs"
 $6 = ($5>>>0)>(0); //@line 218 "/checkout/src/libcore/fmt/num.rs"
 $7 = ($2>>>0)>(9999); //@line 218 "/checkout/src/libcore/fmt/num.rs"
 $8 = ($5|0)==(0); //@line 218 "/checkout/src/libcore/fmt/num.rs"
 $9 = $8 & $7; //@line 218 "/checkout/src/libcore/fmt/num.rs"
 $10 = $6 | $9; //@line 218 "/checkout/src/libcore/fmt/num.rs"
 if ($10) {
  $11 = $2;$12 = $5;$curr$0 = 39;
  while(1) {
   $13 = (___uremdi3(($11|0),($12|0),10000,0)|0); //@line 219 "/checkout/src/libcore/fmt/num.rs"
   $14 = tempRet0; //@line 219 "/checkout/src/libcore/fmt/num.rs"
   $15 = (___udivdi3(($11|0),($12|0),10000,0)|0); //@line 220 "/checkout/src/libcore/fmt/num.rs"
   $16 = tempRet0; //@line 220 "/checkout/src/libcore/fmt/num.rs"
   $17 = (($13>>>0) / 100)&-1; //@line 222 "/checkout/src/libcore/fmt/num.rs"
   $18 = $17 << 1; //@line 222 "/checkout/src/libcore/fmt/num.rs"
   $19 = (($13>>>0) % 100)&-1; //@line 223 "/checkout/src/libcore/fmt/num.rs"
   $20 = $19 << 1; //@line 223 "/checkout/src/libcore/fmt/num.rs"
   $21 = (($curr$0) + -4)|0; //@line 224 "/checkout/src/libcore/fmt/num.rs"
   $22 = (10032 + ($18)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
   $23 = (($buf) + ($21)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
   $24 = HEAP16[$22>>1]|0; //@line 225 "/checkout/src/libcore/fmt/num.rs"
   HEAP8[$23>>0]=$24&255;HEAP8[$23+1>>0]=$24>>8; //@line 225 "/checkout/src/libcore/fmt/num.rs"
   $25 = (10032 + ($20)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
   $26 = (($curr$0) + -2)|0; //@line 226 "/checkout/src/libcore/fmt/num.rs"
   $27 = (($buf) + ($26)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
   $28 = HEAP16[$25>>1]|0; //@line 226 "/checkout/src/libcore/fmt/num.rs"
   HEAP8[$27>>0]=$28&255;HEAP8[$27+1>>0]=$28>>8; //@line 226 "/checkout/src/libcore/fmt/num.rs"
   $29 = ($12>>>0)>(0); //@line 218 "/checkout/src/libcore/fmt/num.rs"
   $30 = ($11>>>0)>(99999999); //@line 218 "/checkout/src/libcore/fmt/num.rs"
   $31 = ($12|0)==(0); //@line 218 "/checkout/src/libcore/fmt/num.rs"
   $32 = $31 & $30; //@line 218 "/checkout/src/libcore/fmt/num.rs"
   $33 = $29 | $32; //@line 218 "/checkout/src/libcore/fmt/num.rs"
   if ($33) {
    $11 = $15;$12 = $16;$curr$0 = $21;
   } else {
    break;
   }
  }
  $curr$1 = $21;$n$2$off0 = $15;
 } else {
  $curr$1 = 39;$n$2$off0 = $2;
 }
 $34 = ($n$2$off0|0)>(99); //@line 234 "/checkout/src/libcore/fmt/num.rs"
 if ($34) {
  $35 = (($n$2$off0>>>0) % 100)&-1;
  $36 = $35 << 1; //@line 235 "/checkout/src/libcore/fmt/num.rs"
  $37 = (($n$2$off0>>>0) / 100)&-1;
  $38 = (($curr$1) + -2)|0; //@line 237 "/checkout/src/libcore/fmt/num.rs"
  $39 = (10032 + ($36)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $40 = (($buf) + ($38)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $41 = HEAP16[$39>>1]|0; //@line 238 "/checkout/src/libcore/fmt/num.rs"
  HEAP8[$40>>0]=$41&255;HEAP8[$40+1>>0]=$41>>8; //@line 238 "/checkout/src/libcore/fmt/num.rs"
  $curr$2 = $38;$n1$0 = $37;
 } else {
  $curr$2 = $curr$1;$n1$0 = $n$2$off0;
 }
 $42 = ($n1$0|0)<(10); //@line 242 "/checkout/src/libcore/fmt/num.rs"
 if ($42) {
  $43 = (($curr$2) + -1)|0; //@line 243 "/checkout/src/libcore/fmt/num.rs"
  $44 = $n1$0&255; //@line 244 "/checkout/src/libcore/fmt/num.rs"
  $45 = (($buf) + ($43)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $46 = (($44) + 48)<<24>>24; //@line 244 "/checkout/src/libcore/fmt/num.rs"
  HEAP8[$45>>0] = $46; //@line 244 "/checkout/src/libcore/fmt/num.rs"
  $curr$3 = $43;
  $52 = (($buf) + ($curr$3)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $53 = (39 - ($curr$3))|0; //@line 254 "/checkout/src/libcore/fmt/num.rs"
  $54 = (__ZN4core3fmt9Formatter12pad_integral17h3050cf392a622772E($f,1,39452,0,$52,$53)|0); //@line 256 "/checkout/src/libcore/fmt/num.rs"
  STACKTOP = sp;return ($54|0); //@line 257 "/checkout/src/libcore/fmt/num.rs"
 } else {
  $47 = $n1$0 << 1; //@line 246 "/checkout/src/libcore/fmt/num.rs"
  $48 = (($curr$2) + -2)|0; //@line 247 "/checkout/src/libcore/fmt/num.rs"
  $49 = (10032 + ($47)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $50 = (($buf) + ($48)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $51 = HEAP16[$49>>1]|0; //@line 248 "/checkout/src/libcore/fmt/num.rs"
  HEAP8[$50>>0]=$51&255;HEAP8[$50+1>>0]=$51>>8; //@line 248 "/checkout/src/libcore/fmt/num.rs"
  $curr$3 = $48;
  $52 = (($buf) + ($curr$3)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $53 = (39 - ($curr$3))|0; //@line 254 "/checkout/src/libcore/fmt/num.rs"
  $54 = (__ZN4core3fmt9Formatter12pad_integral17h3050cf392a622772E($f,1,39452,0,$52,$53)|0); //@line 256 "/checkout/src/libcore/fmt/num.rs"
  STACKTOP = sp;return ($54|0); //@line 257 "/checkout/src/libcore/fmt/num.rs"
 }
 return (0)|0;
}
function __ZN4core3fmt3num51__LT_impl_u20_core__fmt__Display_u20_for_u20_i8_GT_3fmt17h9e8d3c2adbf23969E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $curr$2 = 0, $curr$3 = 0, $n1$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $buf = sp;
 $0 = HEAP8[$self>>0]|0; //@line 202 "/checkout/src/libcore/fmt/num.rs"
 $1 = ($0<<24>>24)>(-1); //@line 202 "/checkout/src/libcore/fmt/num.rs"
 $2 = $0 << 24 >> 24; //@line 41 "/checkout/src/libcore/fmt/num.rs"
 $3 = (0 - ($2))|0; //@line 1801 "/checkout/src/libcore/num/mod.rs"
 $$ = $1 ? $2 : $3; //@line 203 "/checkout/src/libcore/fmt/num.rs"
 $4 = ($$|0)>(99); //@line 234 "/checkout/src/libcore/fmt/num.rs"
 if ($4) {
  $5 = (($$>>>0) % 100)&-1;
  $6 = $5 << 1; //@line 235 "/checkout/src/libcore/fmt/num.rs"
  $7 = (($$>>>0) / 100)&-1;
  $8 = (10032 + ($6)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $9 = ((($buf)) + 37|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $10 = HEAP16[$8>>1]|0; //@line 238 "/checkout/src/libcore/fmt/num.rs"
  HEAP8[$9>>0]=$10&255;HEAP8[$9+1>>0]=$10>>8; //@line 238 "/checkout/src/libcore/fmt/num.rs"
  $curr$2 = 37;$n1$0 = $7;
 } else {
  $curr$2 = 39;$n1$0 = $$;
 }
 $11 = ($n1$0|0)<(10); //@line 242 "/checkout/src/libcore/fmt/num.rs"
 if ($11) {
  $12 = (($curr$2) + -1)|0; //@line 243 "/checkout/src/libcore/fmt/num.rs"
  $13 = $n1$0&255; //@line 244 "/checkout/src/libcore/fmt/num.rs"
  $14 = (($buf) + ($12)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $15 = (($13) + 48)<<24>>24; //@line 244 "/checkout/src/libcore/fmt/num.rs"
  HEAP8[$14>>0] = $15; //@line 244 "/checkout/src/libcore/fmt/num.rs"
  $curr$3 = $12;
  $21 = (($buf) + ($curr$3)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $22 = (39 - ($curr$3))|0; //@line 254 "/checkout/src/libcore/fmt/num.rs"
  $23 = (__ZN4core3fmt9Formatter12pad_integral17h3050cf392a622772E($f,$1,39452,0,$21,$22)|0); //@line 256 "/checkout/src/libcore/fmt/num.rs"
  STACKTOP = sp;return ($23|0); //@line 257 "/checkout/src/libcore/fmt/num.rs"
 } else {
  $16 = $n1$0 << 1; //@line 246 "/checkout/src/libcore/fmt/num.rs"
  $17 = (($curr$2) + -2)|0; //@line 247 "/checkout/src/libcore/fmt/num.rs"
  $18 = (10032 + ($16)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $19 = (($buf) + ($17)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $20 = HEAP16[$18>>1]|0; //@line 248 "/checkout/src/libcore/fmt/num.rs"
  HEAP8[$19>>0]=$20&255;HEAP8[$19+1>>0]=$20>>8; //@line 248 "/checkout/src/libcore/fmt/num.rs"
  $curr$3 = $17;
  $21 = (($buf) + ($curr$3)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $22 = (39 - ($curr$3))|0; //@line 254 "/checkout/src/libcore/fmt/num.rs"
  $23 = (__ZN4core3fmt9Formatter12pad_integral17h3050cf392a622772E($f,$1,39452,0,$21,$22)|0); //@line 256 "/checkout/src/libcore/fmt/num.rs"
  STACKTOP = sp;return ($23|0); //@line 257 "/checkout/src/libcore/fmt/num.rs"
 }
 return (0)|0;
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17he14e4b5b01783aadE($self,$s$0,$s$1) {
 $self = $self|0;
 $s$0 = $s$0|0;
 $s$1 = $s$1|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self>>2]|0; //@line 211 "/checkout/src/libcore/fmt/mod.rs"
 $1 = (__ZN96__LT_core__fmt__builders__PadAdapter_LT__u27_a_C__u20__u27_b_GT__u20_as_u20_core__fmt__Write_GT_9write_str17he552cbab6976e207E($0,$s$0,$s$1)|0); //@line 211 "/checkout/src/libcore/fmt/mod.rs"
 return ($1|0); //@line 212 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h5faf6f1192f832d9E($self,$c) {
 $self = $self|0;
 $c = $c|0;
 var $$sink$i$i = 0, $$sink$sink$i$i = 0, $$sink11$i$i = 0, $$sink14$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10$i = 0, $len$1$i$i = 0, $len$2$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_10$i = sp;
 $0 = HEAP32[$self>>2]|0; //@line 215 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_10$i>>2] = 0; //@line 177 "/checkout/src/libcore/fmt/mod.rs"
 $1 = ($c>>>0)<(128); //@line 485 "/checkout/src/libcore/char.rs"
 if ($1) {
  $2 = $c&255; //@line 486 "/checkout/src/libcore/char.rs"
  HEAP8[$_10$i>>0] = $2; //@line 486 "/checkout/src/libcore/char.rs"
  $len$2$i$i = 1;
  $26 = (__ZN96__LT_core__fmt__builders__PadAdapter_LT__u27_a_C__u20__u27_b_GT__u20_as_u20_core__fmt__Write_GT_9write_str17he552cbab6976e207E($0,$_10$i,$len$2$i$i)|0); //@line 177 "/checkout/src/libcore/fmt/mod.rs"
  STACKTOP = sp;return ($26|0); //@line 216 "/checkout/src/libcore/fmt/mod.rs"
 }
 $3 = ($c>>>0)<(2048); //@line 488 "/checkout/src/libcore/char.rs"
 do {
  if ($3) {
   $$sink$i$i = 0;$$sink$sink$i$i = 1;$$sink11$i$i = -64;$$sink14$i$i = 31;$len$1$i$i = 2;
  } else {
   $4 = ($c>>>0)<(65536); //@line 492 "/checkout/src/libcore/char.rs"
   if ($4) {
    $5 = $c >>> 12; //@line 493 "/checkout/src/libcore/char.rs"
    $6 = $5 & 15; //@line 493 "/checkout/src/libcore/char.rs"
    $7 = $6&255; //@line 493 "/checkout/src/libcore/char.rs"
    $8 = $7 | -32; //@line 493 "/checkout/src/libcore/char.rs"
    HEAP8[$_10$i>>0] = $8; //@line 493 "/checkout/src/libcore/char.rs"
    $$sink$i$i = 1;$$sink$sink$i$i = 2;$$sink11$i$i = -128;$$sink14$i$i = 63;$len$1$i$i = 3;
    break;
   } else {
    $9 = $c >>> 18; //@line 498 "/checkout/src/libcore/char.rs"
    $10 = $9&255; //@line 498 "/checkout/src/libcore/char.rs"
    $11 = $10 | -16; //@line 498 "/checkout/src/libcore/char.rs"
    HEAP8[$_10$i>>0] = $11; //@line 498 "/checkout/src/libcore/char.rs"
    $12 = $c >>> 12; //@line 499 "/checkout/src/libcore/char.rs"
    $13 = $12 & 63; //@line 499 "/checkout/src/libcore/char.rs"
    $14 = $13&255; //@line 499 "/checkout/src/libcore/char.rs"
    $15 = ((($_10$i)) + 1|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
    $16 = $14 | -128; //@line 499 "/checkout/src/libcore/char.rs"
    HEAP8[$15>>0] = $16; //@line 499 "/checkout/src/libcore/char.rs"
    $$sink$i$i = 2;$$sink$sink$i$i = 3;$$sink11$i$i = -128;$$sink14$i$i = 63;$len$1$i$i = 4;
    break;
   }
  }
 } while(0);
 $17 = $c >>> 6;
 $18 = $$sink14$i$i & $17;
 $19 = $18&255;
 $20 = (($_10$i) + ($$sink$i$i)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
 $21 = $19 | $$sink11$i$i;
 HEAP8[$20>>0] = $21;
 $22 = $c & 63;
 $23 = $22&255;
 $24 = (($_10$i) + ($$sink$sink$i$i)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
 $25 = $23 | -128;
 HEAP8[$24>>0] = $25;
 $len$2$i$i = $len$1$i$i;
 $26 = (__ZN96__LT_core__fmt__builders__PadAdapter_LT__u27_a_C__u20__u27_b_GT__u20_as_u20_core__fmt__Write_GT_9write_str17he552cbab6976e207E($0,$_10$i,$len$2$i$i)|0); //@line 177 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return ($26|0); //@line 216 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17hfd93ed91c526585aE($self,$args) {
 $self = $self|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $_6$i = 0, $_8$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_8$i = sp + 8|0;
 $_6$i = sp;
 $0 = HEAP32[$self>>2]|0; //@line 219 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_6$i>>2] = $0; //@line 223 "/checkout/src/libcore/fmt/mod.rs"
 ;HEAP32[$_8$i>>2]=HEAP32[$args>>2]|0;HEAP32[$_8$i+4>>2]=HEAP32[$args+4>>2]|0;HEAP32[$_8$i+8>>2]=HEAP32[$args+8>>2]|0;HEAP32[$_8$i+12>>2]=HEAP32[$args+12>>2]|0;HEAP32[$_8$i+16>>2]=HEAP32[$args+16>>2]|0;HEAP32[$_8$i+20>>2]=HEAP32[$args+20>>2]|0; //@line 223 "/checkout/src/libcore/fmt/mod.rs"
 $1 = (__ZN4core3fmt5write17h6c8dbcbe50728a23E($_6$i,10360,$_8$i)|0); //@line 223 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return ($1|0); //@line 220 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN4core3fmt5write17h6c8dbcbe50728a23E($output$0,$output$1,$args) {
 $output$0 = $output$0|0;
 $output$1 = $output$1|0;
 $args = $args|0;
 var $$fca$1$gep = 0, $$lcssa77 = 0, $$lcssa92 = 0, $$pre$phiZ2D = 0, $$sink6$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_0$0$off0 = 0, $_10$sroa$10$0$i = 0, $_4$sroa$0$0$$sroa_idx = 0, $_5$sroa$0$0$$sroa_idx = 0, $_6$sroa$10$0$i = 0;
 var $formatter = 0, $iter$sroa$0$0 = 0, $iter1$sroa$0$0 = 0, $pieces = 0, $switch$i = 0, $trunc$i$i = 0, $trunc$i$i$clear = 0, $trunc$i10$i = 0, $trunc$i10$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $pieces = sp + 56|0;
 $formatter = sp;
 $0 = ((($args)) + 16|0); //@line 1004 "/checkout/src/libcore/fmt/mod.rs"
 $1 = HEAP32[$0>>2]|0; //@line 1004 "/checkout/src/libcore/fmt/mod.rs"
 $2 = ((($args)) + 20|0); //@line 1004 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$2>>2]|0; //@line 1004 "/checkout/src/libcore/fmt/mod.rs"
 $4 = (($1) + ($3<<3)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
 HEAP32[$formatter>>2] = 0; //@line 997 "/checkout/src/libcore/fmt/mod.rs"
 $5 = ((($formatter)) + 4|0); //@line 997 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$5>>2] = 32; //@line 997 "/checkout/src/libcore/fmt/mod.rs"
 $6 = ((($formatter)) + 48|0); //@line 997 "/checkout/src/libcore/fmt/mod.rs"
 HEAP8[$6>>0] = 3; //@line 997 "/checkout/src/libcore/fmt/mod.rs"
 $_4$sroa$0$0$$sroa_idx = ((($formatter)) + 8|0); //@line 997 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_4$sroa$0$0$$sroa_idx>>2] = 0; //@line 997 "/checkout/src/libcore/fmt/mod.rs"
 $_5$sroa$0$0$$sroa_idx = ((($formatter)) + 16|0); //@line 997 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5$sroa$0$0$$sroa_idx>>2] = 0; //@line 997 "/checkout/src/libcore/fmt/mod.rs"
 $7 = ((($formatter)) + 24|0); //@line 997 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$7>>2] = $output$0; //@line 997 "/checkout/src/libcore/fmt/mod.rs"
 $8 = ((($formatter)) + 28|0); //@line 997 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$8>>2] = $output$1; //@line 997 "/checkout/src/libcore/fmt/mod.rs"
 $9 = ((($formatter)) + 32|0); //@line 997 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$9>>2] = $1; //@line 997 "/checkout/src/libcore/fmt/mod.rs"
 $10 = ((($formatter)) + 36|0); //@line 997 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$10>>2] = $4; //@line 997 "/checkout/src/libcore/fmt/mod.rs"
 $11 = ((($formatter)) + 40|0); //@line 997 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$11>>2] = $1; //@line 997 "/checkout/src/libcore/fmt/mod.rs"
 $12 = ((($formatter)) + 44|0); //@line 997 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$12>>2] = $3; //@line 997 "/checkout/src/libcore/fmt/mod.rs"
 $13 = HEAP32[$args>>2]|0; //@line 1008 "/checkout/src/libcore/fmt/mod.rs"
 $14 = ((($args)) + 4|0); //@line 1008 "/checkout/src/libcore/fmt/mod.rs"
 $15 = HEAP32[$14>>2]|0; //@line 1008 "/checkout/src/libcore/fmt/mod.rs"
 $16 = (($13) + ($15<<3)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
 HEAP32[$pieces>>2] = $13; //@line 1008 "/checkout/src/libcore/fmt/mod.rs"
 $$fca$1$gep = ((($pieces)) + 4|0); //@line 1008 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$$fca$1$gep>>2] = $16; //@line 1008 "/checkout/src/libcore/fmt/mod.rs"
 $17 = ((($args)) + 8|0); //@line 1011 "/checkout/src/libcore/fmt/mod.rs"
 $18 = HEAP32[$17>>2]|0; //@line 1011 "/checkout/src/libcore/fmt/mod.rs"
 $19 = ($18|0)==(0|0); //@line 1011 "/checkout/src/libcore/fmt/mod.rs"
 do {
  if ($19) {
   $31 = $13;$iter$sroa$0$0 = $1;
   while(1) {
    $28 = ($iter$sroa$0$0|0)==($4|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
    if ($28) {
     $$lcssa77 = $31;
     label = 4;
     break;
    }
    $29 = ((($iter$sroa$0$0)) + 8|0); //@line 623 "/checkout/src/libcore/ptr.rs"
    $30 = ($31|0)==($16|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
    if ($30) {
     $$lcssa77 = $16;
     label = 4;
     break;
    }
    $32 = ((($31)) + 8|0); //@line 623 "/checkout/src/libcore/ptr.rs"
    $33 = HEAP32[$7>>2]|0; //@line 1014 "/checkout/src/libcore/fmt/mod.rs"
    $34 = HEAP32[$8>>2]|0; //@line 1014 "/checkout/src/libcore/fmt/mod.rs"
    $35 = HEAP32[$31>>2]|0; //@line 1014 "/checkout/src/libcore/fmt/mod.rs"
    $36 = ((($31)) + 4|0); //@line 1014 "/checkout/src/libcore/fmt/mod.rs"
    $37 = HEAP32[$36>>2]|0; //@line 1014 "/checkout/src/libcore/fmt/mod.rs"
    $38 = ((($34)) + 12|0); //@line 1014 "/checkout/src/libcore/fmt/mod.rs"
    $39 = HEAP32[$38>>2]|0; //@line 1014 "/checkout/src/libcore/fmt/mod.rs"
    $40 = (FUNCTION_TABLE_iiii[$39 & 511]($33,$35,$37)|0); //@line 1014 "/checkout/src/libcore/fmt/mod.rs"
    if ($40) {
     label = 12;
     break;
    }
    $41 = ((($iter$sroa$0$0)) + 4|0); //@line 1015 "/checkout/src/libcore/fmt/mod.rs"
    $42 = HEAP32[$41>>2]|0; //@line 1015 "/checkout/src/libcore/fmt/mod.rs"
    $43 = HEAP32[$iter$sroa$0$0>>2]|0; //@line 1015 "/checkout/src/libcore/fmt/mod.rs"
    $44 = (FUNCTION_TABLE_iii[$42 & 511]($43,$formatter)|0); //@line 1015 "/checkout/src/libcore/fmt/mod.rs"
    if ($44) {
     label = 12;
     break;
    } else {
     $31 = $32;$iter$sroa$0$0 = $29;
    }
   }
   if ((label|0) == 4) {
    HEAP32[$pieces>>2] = $$lcssa77; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
    $$pre$phiZ2D = $pieces;$27 = $$lcssa77;
    label = 6;
    break;
   }
   else if ((label|0) == 12) {
    HEAP32[$pieces>>2] = $32; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
    break;
   }
  } else {
   $20 = ((($args)) + 12|0); //@line 1018 "/checkout/src/libcore/fmt/mod.rs"
   $21 = HEAP32[$20>>2]|0; //@line 1018 "/checkout/src/libcore/fmt/mod.rs"
   $22 = (($18) + (($21*36)|0)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
   $23 = ((($formatter)) + 8|0);
   $24 = ((($formatter)) + 16|0);
   $25 = ((($formatter)) + 32|0);
   $49 = $13;$iter1$sroa$0$0 = $18;
   L12: while(1) {
    $46 = ($iter1$sroa$0$0|0)==($22|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
    if ($46) {
     $$lcssa92 = $49;
     label = 5;
     break;
    }
    $47 = ((($iter1$sroa$0$0)) + 36|0); //@line 623 "/checkout/src/libcore/ptr.rs"
    $48 = ($49|0)==($16|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
    if ($48) {
     $$lcssa92 = $16;
     label = 5;
     break;
    }
    $45 = ((($49)) + 8|0); //@line 623 "/checkout/src/libcore/ptr.rs"
    $50 = HEAP32[$7>>2]|0; //@line 1022 "/checkout/src/libcore/fmt/mod.rs"
    $51 = HEAP32[$8>>2]|0; //@line 1022 "/checkout/src/libcore/fmt/mod.rs"
    $52 = HEAP32[$49>>2]|0; //@line 1022 "/checkout/src/libcore/fmt/mod.rs"
    $53 = ((($49)) + 4|0); //@line 1022 "/checkout/src/libcore/fmt/mod.rs"
    $54 = HEAP32[$53>>2]|0; //@line 1022 "/checkout/src/libcore/fmt/mod.rs"
    $55 = ((($51)) + 12|0); //@line 1022 "/checkout/src/libcore/fmt/mod.rs"
    $56 = HEAP32[$55>>2]|0; //@line 1022 "/checkout/src/libcore/fmt/mod.rs"
    $57 = (FUNCTION_TABLE_iiii[$56 & 511]($50,$52,$54)|0); //@line 1022 "/checkout/src/libcore/fmt/mod.rs"
    if ($57) {
     label = 13;
     break;
    }
    $58 = ((($iter1$sroa$0$0)) + 8|0); //@line 1042 "/checkout/src/libcore/fmt/mod.rs"
    $59 = HEAP32[$58>>2]|0; //@line 1042 "/checkout/src/libcore/fmt/mod.rs"
    HEAP32[$5>>2] = $59; //@line 1042 "/checkout/src/libcore/fmt/mod.rs"
    $60 = ((($iter1$sroa$0$0)) + 32|0); //@line 1043 "/checkout/src/libcore/fmt/mod.rs"
    $61 = HEAP8[$60>>0]|0; //@line 1043 "/checkout/src/libcore/fmt/mod.rs"
    HEAP8[$6>>0] = $61; //@line 1043 "/checkout/src/libcore/fmt/mod.rs"
    $62 = ((($iter1$sroa$0$0)) + 12|0); //@line 1044 "/checkout/src/libcore/fmt/mod.rs"
    $63 = HEAP32[$62>>2]|0; //@line 1044 "/checkout/src/libcore/fmt/mod.rs"
    HEAP32[$formatter>>2] = $63; //@line 1044 "/checkout/src/libcore/fmt/mod.rs"
    $64 = ((($iter1$sroa$0$0)) + 24|0); //@line 1045 "/checkout/src/libcore/fmt/mod.rs"
    $65 = HEAP32[$64>>2]|0; //@line 1060 "/checkout/src/libcore/fmt/mod.rs"
    $trunc$i$i = $65&255; //@line 1060 "/checkout/src/libcore/fmt/mod.rs"
    $trunc$i$i$clear = $trunc$i$i & 3; //@line 1060 "/checkout/src/libcore/fmt/mod.rs"
    switch ($trunc$i$i$clear<<24>>24) {
    case 0:  {
     $75 = ((($iter1$sroa$0$0)) + 28|0); //@line 1060 "/checkout/src/libcore/fmt/mod.rs"
     $76 = HEAP32[$75>>2]|0; //@line 1060 "/checkout/src/libcore/fmt/mod.rs"
     $89 = 0;$92 = 1;$_6$sroa$10$0$i = $76;
     break;
    }
    case 1:  {
     $77 = ((($iter1$sroa$0$0)) + 28|0); //@line 1062 "/checkout/src/libcore/fmt/mod.rs"
     $78 = HEAP32[$77>>2]|0; //@line 1062 "/checkout/src/libcore/fmt/mod.rs"
     $79 = HEAP32[$12>>2]|0; //@line 1063 "/checkout/src/libcore/fmt/mod.rs"
     $80 = ($78>>>0)<($79>>>0); //@line 1063 "/checkout/src/libcore/fmt/mod.rs"
     if (!($80)) {
      label = 27;
      break L12;
     }
     $81 = HEAP32[$11>>2]|0; //@line 1063 "/checkout/src/libcore/fmt/mod.rs"
     $82 = (((($81) + ($78<<3)|0)) + 4|0); //@line 323 "/checkout/src/libcore/fmt/mod.rs"
     $83 = HEAP32[$82>>2]|0; //@line 323 "/checkout/src/libcore/fmt/mod.rs"
     $84 = ($83|0)==((464)|0); //@line 323 "/checkout/src/libcore/fmt/mod.rs"
     if ($84) {
      $85 = (($81) + ($78<<3)|0); //@line 1063 "/checkout/src/libcore/fmt/mod.rs"
      $86 = HEAP32[$85>>2]|0; //@line 324 "/checkout/src/libcore/fmt/mod.rs"
      $87 = HEAP32[$86>>2]|0; //@line 324 "/checkout/src/libcore/fmt/mod.rs"
      $89 = 0;$92 = 1;$_6$sroa$10$0$i = $87;
     } else {
      $89 = 0;$92 = 0;$_6$sroa$10$0$i = 0;
     }
     break;
    }
    case 2:  {
     $66 = HEAP32[$25>>2]|0; //@line 1135 "/checkout/src/libcore/slice/mod.rs"
     $67 = HEAP32[$10>>2]|0; //@line 1136 "/checkout/src/libcore/slice/mod.rs"
     $68 = ($66|0)==($67|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
     if ($68) {
      $89 = 0;$92 = 0;$_6$sroa$10$0$i = 0;
     } else {
      $69 = ((($66)) + 8|0); //@line 623 "/checkout/src/libcore/ptr.rs"
      HEAP32[$25>>2] = $69; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
      $70 = ((($66)) + 4|0); //@line 323 "/checkout/src/libcore/fmt/mod.rs"
      $71 = HEAP32[$70>>2]|0; //@line 323 "/checkout/src/libcore/fmt/mod.rs"
      $72 = ($71|0)==((464)|0); //@line 323 "/checkout/src/libcore/fmt/mod.rs"
      if ($72) {
       $73 = HEAP32[$66>>2]|0; //@line 324 "/checkout/src/libcore/fmt/mod.rs"
       $74 = HEAP32[$73>>2]|0; //@line 324 "/checkout/src/libcore/fmt/mod.rs"
       $89 = 0;$92 = 1;$_6$sroa$10$0$i = $74;
      } else {
       $89 = 0;$92 = 0;$_6$sroa$10$0$i = 0;
      }
     }
     break;
    }
    case 3:  {
     $89 = 0;$92 = 0;$_6$sroa$10$0$i = 0;
     break;
    }
    default: {
     label = 22;
     break L12;
    }
    }
    $88 = $_6$sroa$10$0$i | $89; //@line 1045 "/checkout/src/libcore/fmt/mod.rs"
    $90 = $23; //@line 1045 "/checkout/src/libcore/fmt/mod.rs"
    $91 = $90; //@line 1045 "/checkout/src/libcore/fmt/mod.rs"
    HEAP32[$91>>2] = $92; //@line 1045 "/checkout/src/libcore/fmt/mod.rs"
    $93 = (($90) + 4)|0; //@line 1045 "/checkout/src/libcore/fmt/mod.rs"
    $94 = $93; //@line 1045 "/checkout/src/libcore/fmt/mod.rs"
    HEAP32[$94>>2] = $88; //@line 1045 "/checkout/src/libcore/fmt/mod.rs"
    $95 = ((($iter1$sroa$0$0)) + 16|0); //@line 1046 "/checkout/src/libcore/fmt/mod.rs"
    $96 = HEAP32[$95>>2]|0; //@line 1060 "/checkout/src/libcore/fmt/mod.rs"
    $trunc$i10$i = $96&255; //@line 1060 "/checkout/src/libcore/fmt/mod.rs"
    $trunc$i10$i$clear = $trunc$i10$i & 3; //@line 1060 "/checkout/src/libcore/fmt/mod.rs"
    switch ($trunc$i10$i$clear<<24>>24) {
    case 0:  {
     $106 = ((($iter1$sroa$0$0)) + 20|0); //@line 1060 "/checkout/src/libcore/fmt/mod.rs"
     $107 = HEAP32[$106>>2]|0; //@line 1060 "/checkout/src/libcore/fmt/mod.rs"
     $120 = 0;$123 = 1;$_10$sroa$10$0$i = $107;
     break;
    }
    case 1:  {
     $108 = ((($iter1$sroa$0$0)) + 20|0); //@line 1062 "/checkout/src/libcore/fmt/mod.rs"
     $109 = HEAP32[$108>>2]|0; //@line 1062 "/checkout/src/libcore/fmt/mod.rs"
     $110 = HEAP32[$12>>2]|0; //@line 1063 "/checkout/src/libcore/fmt/mod.rs"
     $111 = ($109>>>0)<($110>>>0); //@line 1063 "/checkout/src/libcore/fmt/mod.rs"
     if (!($111)) {
      label = 37;
      break L12;
     }
     $112 = HEAP32[$11>>2]|0; //@line 1063 "/checkout/src/libcore/fmt/mod.rs"
     $113 = (((($112) + ($109<<3)|0)) + 4|0); //@line 323 "/checkout/src/libcore/fmt/mod.rs"
     $114 = HEAP32[$113>>2]|0; //@line 323 "/checkout/src/libcore/fmt/mod.rs"
     $115 = ($114|0)==((464)|0); //@line 323 "/checkout/src/libcore/fmt/mod.rs"
     if ($115) {
      $116 = (($112) + ($109<<3)|0); //@line 1063 "/checkout/src/libcore/fmt/mod.rs"
      $117 = HEAP32[$116>>2]|0; //@line 324 "/checkout/src/libcore/fmt/mod.rs"
      $118 = HEAP32[$117>>2]|0; //@line 324 "/checkout/src/libcore/fmt/mod.rs"
      $120 = 0;$123 = 1;$_10$sroa$10$0$i = $118;
     } else {
      $120 = 0;$123 = 0;$_10$sroa$10$0$i = 0;
     }
     break;
    }
    case 2:  {
     $97 = HEAP32[$25>>2]|0; //@line 1135 "/checkout/src/libcore/slice/mod.rs"
     $98 = HEAP32[$10>>2]|0; //@line 1136 "/checkout/src/libcore/slice/mod.rs"
     $99 = ($97|0)==($98|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
     if ($99) {
      $120 = 0;$123 = 0;$_10$sroa$10$0$i = 0;
     } else {
      $100 = ((($97)) + 8|0); //@line 623 "/checkout/src/libcore/ptr.rs"
      HEAP32[$25>>2] = $100; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
      $101 = ((($97)) + 4|0); //@line 323 "/checkout/src/libcore/fmt/mod.rs"
      $102 = HEAP32[$101>>2]|0; //@line 323 "/checkout/src/libcore/fmt/mod.rs"
      $103 = ($102|0)==((464)|0); //@line 323 "/checkout/src/libcore/fmt/mod.rs"
      if ($103) {
       $104 = HEAP32[$97>>2]|0; //@line 324 "/checkout/src/libcore/fmt/mod.rs"
       $105 = HEAP32[$104>>2]|0; //@line 324 "/checkout/src/libcore/fmt/mod.rs"
       $120 = 0;$123 = 1;$_10$sroa$10$0$i = $105;
      } else {
       $120 = 0;$123 = 0;$_10$sroa$10$0$i = 0;
      }
     }
     break;
    }
    case 3:  {
     $120 = 0;$123 = 0;$_10$sroa$10$0$i = 0;
     break;
    }
    default: {
     label = 32;
     break L12;
    }
    }
    $119 = $_10$sroa$10$0$i | $120; //@line 1046 "/checkout/src/libcore/fmt/mod.rs"
    $121 = $24; //@line 1046 "/checkout/src/libcore/fmt/mod.rs"
    $122 = $121; //@line 1046 "/checkout/src/libcore/fmt/mod.rs"
    HEAP32[$122>>2] = $123; //@line 1046 "/checkout/src/libcore/fmt/mod.rs"
    $124 = (($121) + 4)|0; //@line 1046 "/checkout/src/libcore/fmt/mod.rs"
    $125 = $124; //@line 1046 "/checkout/src/libcore/fmt/mod.rs"
    HEAP32[$125>>2] = $119; //@line 1046 "/checkout/src/libcore/fmt/mod.rs"
    $126 = HEAP32[$iter1$sroa$0$0>>2]|0; //@line 1050 "/checkout/src/libcore/fmt/mod.rs"
    $switch$i = ($126|0)==(1); //@line 1050 "/checkout/src/libcore/fmt/mod.rs"
    if ($switch$i) {
     $131 = ((($iter1$sroa$0$0)) + 4|0); //@line 1051 "/checkout/src/libcore/fmt/mod.rs"
     $132 = HEAP32[$131>>2]|0; //@line 1051 "/checkout/src/libcore/fmt/mod.rs"
     $133 = HEAP32[$12>>2]|0; //@line 1051 "/checkout/src/libcore/fmt/mod.rs"
     $134 = ($132>>>0)<($133>>>0); //@line 1051 "/checkout/src/libcore/fmt/mod.rs"
     if (!($134)) {
      label = 44;
      break;
     }
     $135 = HEAP32[$11>>2]|0; //@line 1051 "/checkout/src/libcore/fmt/mod.rs"
     $136 = (($135) + ($132<<3)|0); //@line 1051 "/checkout/src/libcore/fmt/mod.rs"
     $$sink6$i = $136;
    } else {
     $127 = HEAP32[$25>>2]|0; //@line 1135 "/checkout/src/libcore/slice/mod.rs"
     $128 = HEAP32[$10>>2]|0; //@line 1136 "/checkout/src/libcore/slice/mod.rs"
     $129 = ($127|0)==($128|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
     if ($129) {
      label = 40;
      break;
     }
     $130 = ((($127)) + 8|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     HEAP32[$25>>2] = $130; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
     $$sink6$i = $127;
    }
    $137 = HEAP32[$$sink6$i>>2]|0;
    $138 = ((($$sink6$i)) + 4|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = (FUNCTION_TABLE_iii[$139 & 511]($137,$formatter)|0); //@line 1055 "/checkout/src/libcore/fmt/mod.rs"
    if ($140) {
     label = 13;
     break;
    } else {
     $49 = $45;$iter1$sroa$0$0 = $47;
    }
   }
   if ((label|0) == 5) {
    HEAP32[$pieces>>2] = $$lcssa92; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
    $$pre$phiZ2D = $pieces;$27 = $$lcssa92;
    label = 6;
    break;
   }
   else if ((label|0) == 13) {
    HEAP32[$pieces>>2] = $45; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
    break;
   }
   else if ((label|0) == 22) {
    // unreachable;
   }
   else if ((label|0) == 27) {
    __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(10232,$78,$79); //@line 1063 "/checkout/src/libcore/fmt/mod.rs"
    // unreachable; //@line 1063 "/checkout/src/libcore/fmt/mod.rs"
   }
   else if ((label|0) == 32) {
    // unreachable;
   }
   else if ((label|0) == 37) {
    __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(10232,$109,$110); //@line 1063 "/checkout/src/libcore/fmt/mod.rs"
    // unreachable; //@line 1063 "/checkout/src/libcore/fmt/mod.rs"
   }
   else if ((label|0) == 40) {
    __ZN4core9panicking5panic17h9fa3414033a56a4dE(10248); //@line 335 "/checkout/src/libcore/option.rs"
    // unreachable;
   }
   else if ((label|0) == 44) {
    __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(10272,$132,$133); //@line 1051 "/checkout/src/libcore/fmt/mod.rs"
    // unreachable; //@line 1051 "/checkout/src/libcore/fmt/mod.rs"
   }
  }
 } while(0);
 do {
  if ((label|0) == 6) {
   $26 = ($27|0)==($16|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
   if (!($26)) {
    $141 = ((($27)) + 8|0); //@line 623 "/checkout/src/libcore/ptr.rs"
    HEAP32[$$pre$phiZ2D>>2] = $141; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
    $142 = HEAP32[$7>>2]|0; //@line 1030 "/checkout/src/libcore/fmt/mod.rs"
    $143 = HEAP32[$8>>2]|0; //@line 1030 "/checkout/src/libcore/fmt/mod.rs"
    $144 = HEAP32[$27>>2]|0; //@line 1030 "/checkout/src/libcore/fmt/mod.rs"
    $145 = ((($27)) + 4|0); //@line 1030 "/checkout/src/libcore/fmt/mod.rs"
    $146 = HEAP32[$145>>2]|0; //@line 1030 "/checkout/src/libcore/fmt/mod.rs"
    $147 = ((($143)) + 12|0); //@line 1030 "/checkout/src/libcore/fmt/mod.rs"
    $148 = HEAP32[$147>>2]|0; //@line 1030 "/checkout/src/libcore/fmt/mod.rs"
    $149 = (FUNCTION_TABLE_iiii[$148 & 511]($142,$144,$146)|0); //@line 1030 "/checkout/src/libcore/fmt/mod.rs"
    if ($149) {
     break;
    }
   }
   $_0$0$off0 = 0;
   STACKTOP = sp;return ($_0$0$off0|0); //@line 1034 "/checkout/src/libcore/fmt/mod.rs"
  }
 } while(0);
 $_0$0$off0 = 1;
 STACKTOP = sp;return ($_0$0$off0|0); //@line 1034 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN4core3fmt10ArgumentV110show_usize17hed36fe242b98ff16E_llvm_CE121B61($x,$f) {
 $x = $x|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN4core3fmt3num54__LT_impl_u20_core__fmt__Display_u20_for_u20_usize_GT_3fmt17h36438de9cd0d1868E($x,$f)|0); //@line 299 "/checkout/src/libcore/fmt/mod.rs"
 return ($0|0); //@line 300 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN4core3fmt10ArgumentV110from_usize17h5a20d86b3b66d825E($retVal,$x) {
 $retVal = $retVal|0;
 $x = $x|0;
 var $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$retVal>>2] = $x; //@line 320 "/checkout/src/libcore/fmt/mod.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 320 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$retVal$index1>>2] = 464; //@line 320 "/checkout/src/libcore/fmt/mod.rs"
 return; //@line 320 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN73__LT_core__fmt__Arguments_LT__u27_a_GT__u20_as_u20_core__fmt__Display_GT_3fmt17hf4480b626ca55887E($self,$fmt) {
 $self = $self|0;
 $fmt = $fmt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $_5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_5 = sp;
 $0 = ((($fmt)) + 24|0); //@line 433 "/checkout/src/libcore/fmt/mod.rs"
 $1 = HEAP32[$0>>2]|0; //@line 433 "/checkout/src/libcore/fmt/mod.rs"
 $2 = ((($fmt)) + 28|0); //@line 433 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$2>>2]|0; //@line 433 "/checkout/src/libcore/fmt/mod.rs"
 ;HEAP32[$_5>>2]=HEAP32[$self>>2]|0;HEAP32[$_5+4>>2]=HEAP32[$self+4>>2]|0;HEAP32[$_5+8>>2]=HEAP32[$self+8>>2]|0;HEAP32[$_5+12>>2]=HEAP32[$self+12>>2]|0;HEAP32[$_5+16>>2]=HEAP32[$self+16>>2]|0;HEAP32[$_5+20>>2]=HEAP32[$self+20>>2]|0; //@line 433 "/checkout/src/libcore/fmt/mod.rs"
 $4 = (__ZN4core3fmt5write17h6c8dbcbe50728a23E($1,$3,$_5)|0); //@line 433 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return ($4|0); //@line 434 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN4core3fmt9Formatter12pad_integral17h3050cf392a622772E($self,$is_nonnegative,$0,$1,$2,$3) {
 $self = $self|0;
 $is_nonnegative = $is_nonnegative|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$arith = 0, $$arith10 = 0, $$arith2 = 0, $$arith6 = 0, $$overflow = 0, $$overflow11 = 0, $$overflow3 = 0, $$overflow7 = 0, $$pre = 0, $$sink$i = 0, $$sink$i$i = 0, $$sink$i$i35 = 0, $$sink$i25 = 0, $$sink$sink$i$i = 0, $$sink$sink$i$i37 = 0, $$sink11$i$i = 0, $$sink11$i$i36 = 0, $$sink14$i$i = 0, $$sink14$i$i34 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_0$0$in = 0, $_0$1$off0 = 0, $align$0$off0$i = 0, $align$0$off0$i$clear = 0, $align$0$off0$i22 = 0, $align$0$off0$i22$clear = 0, $cond$i = 0, $cond$i20 = 0, $cont_bytes$0$lcssa$i = 0, $cont_bytes$09$i = 0, $extract$t$i = 0, $extract$t$i21 = 0;
 var $fill$i = 0, $fill$i19 = 0, $iter$sroa$0$0$i = 0, $iter$sroa$0$0$i43 = 0, $iter$sroa$0$08$i = 0, $iter1$sroa$0$0$i = 0, $iter1$sroa$0$0$i50 = 0, $len$1$i$i = 0, $len$1$i$i38 = 0, $len$2$i$i = 0, $len$2$i$i40 = 0, $padding$sink$i = 0, $padding$sink$i26 = 0, $prefix = 0, $prefixed = 0, $sign = 0, $switch = 0, $width$0 = 0, $width$1 = 0, $write_prefix = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $fill$i19 = sp + 28|0;
 $fill$i = sp + 24|0;
 $write_prefix = sp + 12|0;
 $prefixed = sp + 32|0;
 $sign = sp + 8|0;
 $prefix = sp;
 HEAP32[$prefix>>2] = $0;
 $4 = ((($prefix)) + 4|0);
 HEAP32[$4>>2] = $1;
 HEAP32[$sign>>2] = 1114112; //@line 1095 "/checkout/src/libcore/fmt/mod.rs"
 if ($is_nonnegative) {
  $6 = HEAP32[$self>>2]|0; //@line 1359 "/checkout/src/libcore/fmt/mod.rs"
  $7 = $6 & 1; //@line 1359 "/checkout/src/libcore/fmt/mod.rs"
  $8 = ($7|0)==(0); //@line 1359 "/checkout/src/libcore/fmt/mod.rs"
  if ($8) {
   $11 = $6;$width$0 = $3;
  } else {
   $9 = (($3) + 1)|0; //@line 1099 "/checkout/src/libcore/fmt/mod.rs"
   HEAP32[$sign>>2] = 43; //@line 1099 "/checkout/src/libcore/fmt/mod.rs"
   $11 = $6;$width$0 = $9;
  }
 } else {
  HEAP32[$sign>>2] = 45; //@line 1097 "/checkout/src/libcore/fmt/mod.rs"
  $5 = (($3) + 1)|0; //@line 1097 "/checkout/src/libcore/fmt/mod.rs"
  $$pre = HEAP32[$self>>2]|0;
  $11 = $$pre;$width$0 = $5;
 }
 HEAP8[$prefixed>>0] = 0; //@line 1102 "/checkout/src/libcore/fmt/mod.rs"
 $10 = $11 & 4; //@line 1367 "/checkout/src/libcore/fmt/mod.rs"
 $12 = ($10|0)==(0); //@line 1367 "/checkout/src/libcore/fmt/mod.rs"
 if ($12) {
  $width$1 = $width$0;
 } else {
  HEAP8[$prefixed>>0] = 1; //@line 1104 "/checkout/src/libcore/fmt/mod.rs"
  $13 = (($0) + ($1)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $14 = ($1|0)==(0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
  if ($14) {
   $cont_bytes$0$lcssa$i = 0;
  } else {
   $cont_bytes$09$i = 0;$iter$sroa$0$08$i = $0;
   while(1) {
    $15 = ((($iter$sroa$0$08$i)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
    $16 = HEAP8[$iter$sroa$0$08$i>>0]|0; //@line 577 "/checkout/src/libcore/str/mod.rs"
    $17 = $16 & -64; //@line 481 "/checkout/src/libcore/str/mod.rs"
    $18 = ($17<<24>>24)==(-128); //@line 481 "/checkout/src/libcore/str/mod.rs"
    $19 = $18&1; //@line 578 "/checkout/src/libcore/str/mod.rs"
    $20 = (($19) + ($cont_bytes$09$i))|0; //@line 578 "/checkout/src/libcore/str/mod.rs"
    $21 = ($15|0)==($13|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
    if ($21) {
     $cont_bytes$0$lcssa$i = $20;
     break;
    } else {
     $cont_bytes$09$i = $20;$iter$sroa$0$08$i = $15;
    }
   }
  }
  $22 = (($width$0) + ($1))|0; //@line 580 "/checkout/src/libcore/str/mod.rs"
  $23 = (($22) - ($cont_bytes$0$lcssa$i))|0; //@line 1104 "/checkout/src/libcore/fmt/mod.rs"
  $width$1 = $23;
 }
 HEAP32[$write_prefix>>2] = $sign; //@line 1108 "/checkout/src/libcore/fmt/mod.rs"
 $24 = ((($write_prefix)) + 4|0); //@line 1108 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$24>>2] = $prefixed; //@line 1108 "/checkout/src/libcore/fmt/mod.rs"
 $25 = ((($write_prefix)) + 8|0); //@line 1108 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$25>>2] = $prefix; //@line 1108 "/checkout/src/libcore/fmt/mod.rs"
 $26 = ((($self)) + 8|0); //@line 1120 "/checkout/src/libcore/fmt/mod.rs"
 $27 = HEAP32[$26>>2]|0; //@line 1120 "/checkout/src/libcore/fmt/mod.rs"
 $switch = ($27|0)==(1); //@line 1120 "/checkout/src/libcore/fmt/mod.rs"
 L14: do {
  if ($switch) {
   $88 = ((($self)) + 12|0); //@line 1125 "/checkout/src/libcore/fmt/mod.rs"
   $36 = HEAP32[$88>>2]|0; //@line 1125 "/checkout/src/libcore/fmt/mod.rs"
   $89 = ($36>>>0)>($width$1>>>0); //@line 1125 "/checkout/src/libcore/fmt/mod.rs"
   if (!($89)) {
    $29 = (__ZN4core3fmt9Formatter12pad_integral28__u7b__u7b_closure_u7d__u7d_17h7bc2e700c9808e5bE($write_prefix,$self)|0); //@line 1126 "/checkout/src/libcore/fmt/mod.rs"
    if ($29) {
     label = 41;
     break;
    }
    $97 = ((($self)) + 24|0); //@line 1126 "/checkout/src/libcore/fmt/mod.rs"
    $98 = HEAP32[$97>>2]|0; //@line 1126 "/checkout/src/libcore/fmt/mod.rs"
    $99 = ((($self)) + 28|0); //@line 1126 "/checkout/src/libcore/fmt/mod.rs"
    $100 = HEAP32[$99>>2]|0; //@line 1126 "/checkout/src/libcore/fmt/mod.rs"
    $101 = ((($100)) + 12|0); //@line 1126 "/checkout/src/libcore/fmt/mod.rs"
    $102 = HEAP32[$101>>2]|0; //@line 1126 "/checkout/src/libcore/fmt/mod.rs"
    $103 = (FUNCTION_TABLE_iiii[$102 & 511]($98,$2,$3)|0); //@line 1126 "/checkout/src/libcore/fmt/mod.rs"
    $_0$0$in = $103;
    label = 38;
    break;
   }
   $33 = $11 & 8; //@line 1372 "/checkout/src/libcore/fmt/mod.rs"
   $34 = ($33|0)==(0); //@line 1372 "/checkout/src/libcore/fmt/mod.rs"
   if ($34) {
    $35 = (($36) - ($width$1))|0; //@line 1140 "/checkout/src/libcore/fmt/mod.rs"
    $37 = ((($self)) + 48|0); //@line 1206 "/checkout/src/libcore/fmt/mod.rs"
    $extract$t$i21 = HEAP8[$37>>0]|0; //@line 1206 "/checkout/src/libcore/fmt/mod.rs"
    $cond$i20 = ($extract$t$i21<<24>>24)==(3); //@line 1206 "/checkout/src/libcore/fmt/mod.rs"
    $align$0$off0$i22 = $cond$i20 ? 1 : $extract$t$i21; //@line 1206 "/checkout/src/libcore/fmt/mod.rs"
    $align$0$off0$i22$clear = $align$0$off0$i22 & 3; //@line 1206 "/checkout/src/libcore/fmt/mod.rs"
    switch ($align$0$off0$i22$clear<<24>>24) {
    case 0:  {
     $$sink$i25 = 0;$padding$sink$i26 = $35;
     break;
    }
    case 3: case 1:  {
     $$sink$i25 = $35;$padding$sink$i26 = 0;
     break;
    }
    case 2:  {
     $67 = $35 >>> 1; //@line 1214 "/checkout/src/libcore/fmt/mod.rs"
     $68 = (($35) + 1)|0; //@line 1214 "/checkout/src/libcore/fmt/mod.rs"
     $69 = $68 >>> 1; //@line 1214 "/checkout/src/libcore/fmt/mod.rs"
     $$sink$i25 = $67;$padding$sink$i26 = $69;
     break;
    }
    default: {
     // unreachable; //@line 1231 "/checkout/src/libcore/fmt/mod.rs"
    }
    }
    HEAP32[$fill$i19>>2] = 0; //@line 1217 "/checkout/src/libcore/fmt/mod.rs"
    $38 = ((($self)) + 4|0); //@line 1218 "/checkout/src/libcore/fmt/mod.rs"
    $39 = HEAP32[$38>>2]|0; //@line 1218 "/checkout/src/libcore/fmt/mod.rs"
    $40 = ($39>>>0)<(128); //@line 485 "/checkout/src/libcore/char.rs"
    if ($40) {
     $41 = $39&255; //@line 486 "/checkout/src/libcore/char.rs"
     HEAP8[$fill$i19>>0] = $41; //@line 486 "/checkout/src/libcore/char.rs"
     $len$2$i$i40 = 1;
    } else {
     $42 = ($39>>>0)<(2048); //@line 488 "/checkout/src/libcore/char.rs"
     do {
      if ($42) {
       $$sink$i$i35 = 0;$$sink$sink$i$i37 = 1;$$sink11$i$i36 = -64;$$sink14$i$i34 = 31;$len$1$i$i38 = 2;
      } else {
       $43 = ($39>>>0)<(65536); //@line 492 "/checkout/src/libcore/char.rs"
       if ($43) {
        $44 = $39 >>> 12; //@line 493 "/checkout/src/libcore/char.rs"
        $45 = $44 & 15; //@line 493 "/checkout/src/libcore/char.rs"
        $46 = $45&255; //@line 493 "/checkout/src/libcore/char.rs"
        $47 = $46 | -32; //@line 493 "/checkout/src/libcore/char.rs"
        HEAP8[$fill$i19>>0] = $47; //@line 493 "/checkout/src/libcore/char.rs"
        $$sink$i$i35 = 1;$$sink$sink$i$i37 = 2;$$sink11$i$i36 = -128;$$sink14$i$i34 = 63;$len$1$i$i38 = 3;
        break;
       } else {
        $48 = $39 >>> 18; //@line 498 "/checkout/src/libcore/char.rs"
        $49 = $48&255; //@line 498 "/checkout/src/libcore/char.rs"
        $50 = $49 | -16; //@line 498 "/checkout/src/libcore/char.rs"
        HEAP8[$fill$i19>>0] = $50; //@line 498 "/checkout/src/libcore/char.rs"
        $51 = $39 >>> 12; //@line 499 "/checkout/src/libcore/char.rs"
        $52 = $51 & 63; //@line 499 "/checkout/src/libcore/char.rs"
        $53 = $52&255; //@line 499 "/checkout/src/libcore/char.rs"
        $54 = ((($fill$i19)) + 1|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
        $55 = $53 | -128; //@line 499 "/checkout/src/libcore/char.rs"
        HEAP8[$54>>0] = $55; //@line 499 "/checkout/src/libcore/char.rs"
        $$sink$i$i35 = 2;$$sink$sink$i$i37 = 3;$$sink11$i$i36 = -128;$$sink14$i$i34 = 63;$len$1$i$i38 = 4;
        break;
       }
      }
     } while(0);
     $56 = $39 >>> 6;
     $57 = $$sink14$i$i34 & $56;
     $58 = $57&255;
     $59 = (($fill$i19) + ($$sink$i$i35)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
     $60 = $58 | $$sink11$i$i36;
     HEAP8[$59>>0] = $60;
     $61 = $39 & 63;
     $62 = $61&255;
     $63 = (($fill$i19) + ($$sink$sink$i$i37)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
     $64 = $62 | -128;
     HEAP8[$63>>0] = $64;
     $len$2$i$i40 = $len$1$i$i38;
    }
    $65 = ((($self)) + 24|0);
    $66 = ((($self)) + 28|0);
    $iter$sroa$0$0$i43 = 0;
    while(1) {
     $70 = ($iter$sroa$0$0$i43>>>0)<($$sink$i25>>>0); //@line 846 "/checkout/src/libcore/cmp.rs"
     if (!($70)) {
      label = 29;
      break;
     }
     $$arith10 = (($iter$sroa$0$0$i43) + 1)|0; //@line 1982 "/checkout/src/libcore/num/mod.rs"
     $$overflow11 = ($iter$sroa$0$0$i43>>>0)>(4294967294); //@line 1982 "/checkout/src/libcore/num/mod.rs"
     if ($$overflow11) {
      label = 29;
      break;
     }
     $77 = HEAP32[$65>>2]|0; //@line 1221 "/checkout/src/libcore/fmt/mod.rs"
     $78 = HEAP32[$66>>2]|0; //@line 1221 "/checkout/src/libcore/fmt/mod.rs"
     $79 = ((($78)) + 12|0); //@line 1221 "/checkout/src/libcore/fmt/mod.rs"
     $80 = HEAP32[$79>>2]|0; //@line 1221 "/checkout/src/libcore/fmt/mod.rs"
     $81 = (FUNCTION_TABLE_iiii[$80 & 511]($77,$fill$i19,$len$2$i$i40)|0); //@line 1221 "/checkout/src/libcore/fmt/mod.rs"
     if ($81) {
      break;
     } else {
      $iter$sroa$0$0$i43 = $$arith10;
     }
    }
    L41: do {
     if ((label|0) == 29) {
      $71 = (__ZN4core3fmt9Formatter12pad_integral28__u7b__u7b_closure_u7d__u7d_17h7bc2e700c9808e5bE($write_prefix,$self)|0); //@line 1141 "/checkout/src/libcore/fmt/mod.rs"
      if (!($71)) {
       $72 = HEAP32[$65>>2]|0; //@line 1141 "/checkout/src/libcore/fmt/mod.rs"
       $73 = HEAP32[$66>>2]|0; //@line 1141 "/checkout/src/libcore/fmt/mod.rs"
       $74 = ((($73)) + 12|0); //@line 1141 "/checkout/src/libcore/fmt/mod.rs"
       $75 = HEAP32[$74>>2]|0; //@line 1141 "/checkout/src/libcore/fmt/mod.rs"
       $76 = (FUNCTION_TABLE_iiii[$75 & 511]($72,$2,$3)|0); //@line 1141 "/checkout/src/libcore/fmt/mod.rs"
       if (!($76)) {
        $iter1$sroa$0$0$i50 = 0;
        while(1) {
         $82 = ($iter1$sroa$0$0$i50>>>0)<($padding$sink$i26>>>0); //@line 846 "/checkout/src/libcore/cmp.rs"
         if (!($82)) {
          break;
         }
         $$arith6 = (($iter1$sroa$0$0$i50) + 1)|0; //@line 1982 "/checkout/src/libcore/num/mod.rs"
         $$overflow7 = ($iter1$sroa$0$0$i50>>>0)>(4294967294); //@line 1982 "/checkout/src/libcore/num/mod.rs"
         if ($$overflow7) {
          break;
         }
         $83 = HEAP32[$65>>2]|0; //@line 1227 "/checkout/src/libcore/fmt/mod.rs"
         $84 = HEAP32[$66>>2]|0; //@line 1227 "/checkout/src/libcore/fmt/mod.rs"
         $85 = ((($84)) + 12|0); //@line 1227 "/checkout/src/libcore/fmt/mod.rs"
         $86 = HEAP32[$85>>2]|0; //@line 1227 "/checkout/src/libcore/fmt/mod.rs"
         $87 = (FUNCTION_TABLE_iiii[$86 & 511]($83,$fill$i19,$len$2$i$i40)|0); //@line 1227 "/checkout/src/libcore/fmt/mod.rs"
         if ($87) {
          break L41;
         } else {
          $iter1$sroa$0$0$i50 = $$arith6;
         }
        }
        $_0$0$in = 0;
        label = 38;
        break L14;
       }
      }
     }
    } while(0);
    $_0$0$in = 1;
    label = 38;
    break;
   } else {
    $30 = ((($self)) + 4|0); //@line 1131 "/checkout/src/libcore/fmt/mod.rs"
    HEAP32[$30>>2] = 48; //@line 1131 "/checkout/src/libcore/fmt/mod.rs"
    $31 = ((($self)) + 48|0); //@line 1132 "/checkout/src/libcore/fmt/mod.rs"
    HEAP8[$31>>0] = 1; //@line 1132 "/checkout/src/libcore/fmt/mod.rs"
    $32 = (__ZN4core3fmt9Formatter12pad_integral28__u7b__u7b_closure_u7d__u7d_17h7bc2e700c9808e5bE($write_prefix,$self)|0); //@line 1133 "/checkout/src/libcore/fmt/mod.rs"
    if ($32) {
     label = 41;
     break;
    }
    $104 = (($36) - ($width$1))|0; //@line 1134 "/checkout/src/libcore/fmt/mod.rs"
    $extract$t$i = HEAP8[$31>>0]|0; //@line 1206 "/checkout/src/libcore/fmt/mod.rs"
    $cond$i = ($extract$t$i<<24>>24)==(3); //@line 1206 "/checkout/src/libcore/fmt/mod.rs"
    $align$0$off0$i = $cond$i ? 1 : $extract$t$i; //@line 1206 "/checkout/src/libcore/fmt/mod.rs"
    $align$0$off0$i$clear = $align$0$off0$i & 3; //@line 1206 "/checkout/src/libcore/fmt/mod.rs"
    switch ($align$0$off0$i$clear<<24>>24) {
    case 0:  {
     $$sink$i = 0;$padding$sink$i = $104;
     break;
    }
    case 3: case 1:  {
     $$sink$i = $104;$padding$sink$i = 0;
     break;
    }
    case 2:  {
     $133 = $104 >>> 1; //@line 1214 "/checkout/src/libcore/fmt/mod.rs"
     $134 = (($104) + 1)|0; //@line 1214 "/checkout/src/libcore/fmt/mod.rs"
     $135 = $134 >>> 1; //@line 1214 "/checkout/src/libcore/fmt/mod.rs"
     $$sink$i = $133;$padding$sink$i = $135;
     break;
    }
    default: {
     // unreachable; //@line 1231 "/checkout/src/libcore/fmt/mod.rs"
    }
    }
    HEAP32[$fill$i>>2] = 0; //@line 1217 "/checkout/src/libcore/fmt/mod.rs"
    $105 = HEAP32[$30>>2]|0; //@line 1218 "/checkout/src/libcore/fmt/mod.rs"
    $106 = ($105>>>0)<(128); //@line 485 "/checkout/src/libcore/char.rs"
    if ($106) {
     $107 = $105&255; //@line 486 "/checkout/src/libcore/char.rs"
     HEAP8[$fill$i>>0] = $107; //@line 486 "/checkout/src/libcore/char.rs"
     $len$2$i$i = 1;
    } else {
     $108 = ($105>>>0)<(2048); //@line 488 "/checkout/src/libcore/char.rs"
     do {
      if ($108) {
       $$sink$i$i = 0;$$sink$sink$i$i = 1;$$sink11$i$i = -64;$$sink14$i$i = 31;$len$1$i$i = 2;
      } else {
       $109 = ($105>>>0)<(65536); //@line 492 "/checkout/src/libcore/char.rs"
       if ($109) {
        $110 = $105 >>> 12; //@line 493 "/checkout/src/libcore/char.rs"
        $111 = $110 & 15; //@line 493 "/checkout/src/libcore/char.rs"
        $112 = $111&255; //@line 493 "/checkout/src/libcore/char.rs"
        $113 = $112 | -32; //@line 493 "/checkout/src/libcore/char.rs"
        HEAP8[$fill$i>>0] = $113; //@line 493 "/checkout/src/libcore/char.rs"
        $$sink$i$i = 1;$$sink$sink$i$i = 2;$$sink11$i$i = -128;$$sink14$i$i = 63;$len$1$i$i = 3;
        break;
       } else {
        $114 = $105 >>> 18; //@line 498 "/checkout/src/libcore/char.rs"
        $115 = $114&255; //@line 498 "/checkout/src/libcore/char.rs"
        $116 = $115 | -16; //@line 498 "/checkout/src/libcore/char.rs"
        HEAP8[$fill$i>>0] = $116; //@line 498 "/checkout/src/libcore/char.rs"
        $117 = $105 >>> 12; //@line 499 "/checkout/src/libcore/char.rs"
        $118 = $117 & 63; //@line 499 "/checkout/src/libcore/char.rs"
        $119 = $118&255; //@line 499 "/checkout/src/libcore/char.rs"
        $120 = ((($fill$i)) + 1|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
        $121 = $119 | -128; //@line 499 "/checkout/src/libcore/char.rs"
        HEAP8[$120>>0] = $121; //@line 499 "/checkout/src/libcore/char.rs"
        $$sink$i$i = 2;$$sink$sink$i$i = 3;$$sink11$i$i = -128;$$sink14$i$i = 63;$len$1$i$i = 4;
        break;
       }
      }
     } while(0);
     $122 = $105 >>> 6;
     $123 = $$sink14$i$i & $122;
     $124 = $123&255;
     $125 = (($fill$i) + ($$sink$i$i)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
     $126 = $124 | $$sink11$i$i;
     HEAP8[$125>>0] = $126;
     $127 = $105 & 63;
     $128 = $127&255;
     $129 = (($fill$i) + ($$sink$sink$i$i)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
     $130 = $128 | -128;
     HEAP8[$129>>0] = $130;
     $len$2$i$i = $len$1$i$i;
    }
    $131 = ((($self)) + 24|0);
    $132 = ((($self)) + 28|0);
    $iter$sroa$0$0$i = 0;
    while(1) {
     $136 = ($iter$sroa$0$0$i>>>0)<($$sink$i>>>0); //@line 846 "/checkout/src/libcore/cmp.rs"
     if (!($136)) {
      label = 57;
      break;
     }
     $$arith2 = (($iter$sroa$0$0$i) + 1)|0; //@line 1982 "/checkout/src/libcore/num/mod.rs"
     $$overflow3 = ($iter$sroa$0$0$i>>>0)>(4294967294); //@line 1982 "/checkout/src/libcore/num/mod.rs"
     if ($$overflow3) {
      label = 57;
      break;
     }
     $142 = HEAP32[$131>>2]|0; //@line 1221 "/checkout/src/libcore/fmt/mod.rs"
     $143 = HEAP32[$132>>2]|0; //@line 1221 "/checkout/src/libcore/fmt/mod.rs"
     $144 = ((($143)) + 12|0); //@line 1221 "/checkout/src/libcore/fmt/mod.rs"
     $145 = HEAP32[$144>>2]|0; //@line 1221 "/checkout/src/libcore/fmt/mod.rs"
     $146 = (FUNCTION_TABLE_iiii[$145 & 511]($142,$fill$i,$len$2$i$i)|0); //@line 1221 "/checkout/src/libcore/fmt/mod.rs"
     if ($146) {
      break;
     } else {
      $iter$sroa$0$0$i = $$arith2;
     }
    }
    L71: do {
     if ((label|0) == 57) {
      $137 = HEAP32[$131>>2]|0; //@line 1135 "/checkout/src/libcore/fmt/mod.rs"
      $138 = HEAP32[$132>>2]|0; //@line 1135 "/checkout/src/libcore/fmt/mod.rs"
      $139 = ((($138)) + 12|0); //@line 1135 "/checkout/src/libcore/fmt/mod.rs"
      $140 = HEAP32[$139>>2]|0; //@line 1135 "/checkout/src/libcore/fmt/mod.rs"
      $141 = (FUNCTION_TABLE_iiii[$140 & 511]($137,$2,$3)|0); //@line 1135 "/checkout/src/libcore/fmt/mod.rs"
      if (!($141)) {
       $iter1$sroa$0$0$i = 0;
       while(1) {
        $147 = ($iter1$sroa$0$0$i>>>0)<($padding$sink$i>>>0); //@line 846 "/checkout/src/libcore/cmp.rs"
        if (!($147)) {
         break;
        }
        $$arith = (($iter1$sroa$0$0$i) + 1)|0; //@line 1982 "/checkout/src/libcore/num/mod.rs"
        $$overflow = ($iter1$sroa$0$0$i>>>0)>(4294967294); //@line 1982 "/checkout/src/libcore/num/mod.rs"
        if ($$overflow) {
         break;
        }
        $148 = HEAP32[$131>>2]|0; //@line 1227 "/checkout/src/libcore/fmt/mod.rs"
        $149 = HEAP32[$132>>2]|0; //@line 1227 "/checkout/src/libcore/fmt/mod.rs"
        $150 = ((($149)) + 12|0); //@line 1227 "/checkout/src/libcore/fmt/mod.rs"
        $151 = HEAP32[$150>>2]|0; //@line 1227 "/checkout/src/libcore/fmt/mod.rs"
        $152 = (FUNCTION_TABLE_iiii[$151 & 511]($148,$fill$i,$len$2$i$i)|0); //@line 1227 "/checkout/src/libcore/fmt/mod.rs"
        if ($152) {
         break L71;
        } else {
         $iter1$sroa$0$0$i = $$arith;
        }
       }
       $_0$0$in = 0;
       label = 38;
       break L14;
      }
     }
    } while(0);
    $_0$0$in = 1;
    label = 38;
    break;
   }
  } else {
   $28 = (__ZN4core3fmt9Formatter12pad_integral28__u7b__u7b_closure_u7d__u7d_17h7bc2e700c9808e5bE($write_prefix,$self)|0); //@line 1121 "/checkout/src/libcore/fmt/mod.rs"
   if ($28) {
    label = 41;
   } else {
    $90 = ((($self)) + 24|0); //@line 1121 "/checkout/src/libcore/fmt/mod.rs"
    $91 = HEAP32[$90>>2]|0; //@line 1121 "/checkout/src/libcore/fmt/mod.rs"
    $92 = ((($self)) + 28|0); //@line 1121 "/checkout/src/libcore/fmt/mod.rs"
    $93 = HEAP32[$92>>2]|0; //@line 1121 "/checkout/src/libcore/fmt/mod.rs"
    $94 = ((($93)) + 12|0); //@line 1121 "/checkout/src/libcore/fmt/mod.rs"
    $95 = HEAP32[$94>>2]|0; //@line 1121 "/checkout/src/libcore/fmt/mod.rs"
    $96 = (FUNCTION_TABLE_iiii[$95 & 511]($91,$2,$3)|0); //@line 1121 "/checkout/src/libcore/fmt/mod.rs"
    $_0$0$in = $96;
    label = 38;
   }
  }
 } while(0);
 if ((label|0) == 38) {
  $_0$1$off0 = $_0$0$in;
  STACKTOP = sp;return ($_0$1$off0|0); //@line 1145 "/checkout/src/libcore/fmt/mod.rs"
 }
 else if ((label|0) == 41) {
  $_0$1$off0 = 1;
  STACKTOP = sp;return ($_0$1$off0|0); //@line 1145 "/checkout/src/libcore/fmt/mod.rs"
 }
 return (0)|0;
}
function __ZN4core3fmt9Formatter12pad_integral28__u7b__u7b_closure_u7d__u7d_17h7bc2e700c9808e5bE($arg0,$f) {
 $arg0 = $arg0|0;
 $f = $f|0;
 var $$sink$i = 0, $$sink$sink$i = 0, $$sink11$i = 0, $$sink14$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$shrunk = 0, $_16 = 0, $len$1$i = 0, $len$2$i = 0, $not$ = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_16 = sp;
 $0 = HEAP32[$arg0>>2]|0; //@line 1109 "/checkout/src/libcore/fmt/mod.rs"
 $1 = HEAP32[$0>>2]|0; //@line 1109 "/checkout/src/libcore/fmt/mod.rs"
 $not$ = ($1|0)==(1114112); //@line 1109 "/checkout/src/libcore/fmt/mod.rs"
 if (!($not$)) {
  $2 = ((($f)) + 24|0); //@line 1110 "/checkout/src/libcore/fmt/mod.rs"
  $3 = HEAP32[$2>>2]|0; //@line 1110 "/checkout/src/libcore/fmt/mod.rs"
  $4 = ((($f)) + 28|0); //@line 1110 "/checkout/src/libcore/fmt/mod.rs"
  $5 = HEAP32[$4>>2]|0; //@line 1110 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_16>>2] = 0; //@line 1110 "/checkout/src/libcore/fmt/mod.rs"
  $6 = ($1>>>0)<(128); //@line 485 "/checkout/src/libcore/char.rs"
  if ($6) {
   $7 = $1&255; //@line 486 "/checkout/src/libcore/char.rs"
   HEAP8[$_16>>0] = $7; //@line 486 "/checkout/src/libcore/char.rs"
   $len$2$i = 1;
  } else {
   $8 = ($1>>>0)<(2048); //@line 488 "/checkout/src/libcore/char.rs"
   do {
    if ($8) {
     $$sink$i = 0;$$sink$sink$i = 1;$$sink11$i = -64;$$sink14$i = 31;$len$1$i = 2;
    } else {
     $9 = ($1>>>0)<(65536); //@line 492 "/checkout/src/libcore/char.rs"
     if ($9) {
      $10 = $1 >>> 12; //@line 493 "/checkout/src/libcore/char.rs"
      $11 = $10 & 15; //@line 493 "/checkout/src/libcore/char.rs"
      $12 = $11&255; //@line 493 "/checkout/src/libcore/char.rs"
      $13 = $12 | -32; //@line 493 "/checkout/src/libcore/char.rs"
      HEAP8[$_16>>0] = $13; //@line 493 "/checkout/src/libcore/char.rs"
      $$sink$i = 1;$$sink$sink$i = 2;$$sink11$i = -128;$$sink14$i = 63;$len$1$i = 3;
      break;
     } else {
      $14 = $1 >>> 18; //@line 498 "/checkout/src/libcore/char.rs"
      $15 = $14&255; //@line 498 "/checkout/src/libcore/char.rs"
      $16 = $15 | -16; //@line 498 "/checkout/src/libcore/char.rs"
      HEAP8[$_16>>0] = $16; //@line 498 "/checkout/src/libcore/char.rs"
      $17 = $1 >>> 12; //@line 499 "/checkout/src/libcore/char.rs"
      $18 = $17 & 63; //@line 499 "/checkout/src/libcore/char.rs"
      $19 = $18&255; //@line 499 "/checkout/src/libcore/char.rs"
      $20 = ((($_16)) + 1|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
      $21 = $19 | -128; //@line 499 "/checkout/src/libcore/char.rs"
      HEAP8[$20>>0] = $21; //@line 499 "/checkout/src/libcore/char.rs"
      $$sink$i = 2;$$sink$sink$i = 3;$$sink11$i = -128;$$sink14$i = 63;$len$1$i = 4;
      break;
     }
    }
   } while(0);
   $22 = $1 >>> 6;
   $23 = $$sink14$i & $22;
   $24 = $23&255;
   $25 = (($_16) + ($$sink$i)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
   $26 = $24 | $$sink11$i;
   HEAP8[$25>>0] = $26;
   $27 = $1 & 63;
   $28 = $27&255;
   $29 = (($_16) + ($$sink$sink$i)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
   $30 = $28 | -128;
   HEAP8[$29>>0] = $30;
   $len$2$i = $len$1$i;
  }
  $31 = ((($5)) + 12|0); //@line 1110 "/checkout/src/libcore/fmt/mod.rs"
  $32 = HEAP32[$31>>2]|0; //@line 1110 "/checkout/src/libcore/fmt/mod.rs"
  $33 = (FUNCTION_TABLE_iiii[$32 & 511]($3,$_16,$len$2$i)|0); //@line 1110 "/checkout/src/libcore/fmt/mod.rs"
  if ($33) {
   $_0$0$shrunk = 1;
   STACKTOP = sp;return ($_0$0$shrunk|0); //@line 1114 "/checkout/src/libcore/fmt/mod.rs"
  }
 }
 $34 = ((($arg0)) + 4|0); //@line 1112 "/checkout/src/libcore/fmt/mod.rs"
 $35 = HEAP32[$34>>2]|0; //@line 1112 "/checkout/src/libcore/fmt/mod.rs"
 $36 = HEAP8[$35>>0]|0; //@line 1112 "/checkout/src/libcore/fmt/mod.rs"
 $37 = ($36<<24>>24)==(0); //@line 1112 "/checkout/src/libcore/fmt/mod.rs"
 if ($37) {
  $_0$0$shrunk = 0;
  STACKTOP = sp;return ($_0$0$shrunk|0); //@line 1114 "/checkout/src/libcore/fmt/mod.rs"
 }
 $38 = ((($f)) + 24|0); //@line 1112 "/checkout/src/libcore/fmt/mod.rs"
 $39 = HEAP32[$38>>2]|0; //@line 1112 "/checkout/src/libcore/fmt/mod.rs"
 $40 = ((($f)) + 28|0); //@line 1112 "/checkout/src/libcore/fmt/mod.rs"
 $41 = HEAP32[$40>>2]|0; //@line 1112 "/checkout/src/libcore/fmt/mod.rs"
 $42 = ((($arg0)) + 8|0); //@line 1112 "/checkout/src/libcore/fmt/mod.rs"
 $43 = HEAP32[$42>>2]|0; //@line 1112 "/checkout/src/libcore/fmt/mod.rs"
 $44 = HEAP32[$43>>2]|0; //@line 1112 "/checkout/src/libcore/fmt/mod.rs"
 $45 = ((($43)) + 4|0); //@line 1112 "/checkout/src/libcore/fmt/mod.rs"
 $46 = HEAP32[$45>>2]|0; //@line 1112 "/checkout/src/libcore/fmt/mod.rs"
 $47 = ((($41)) + 12|0); //@line 1112 "/checkout/src/libcore/fmt/mod.rs"
 $48 = HEAP32[$47>>2]|0; //@line 1112 "/checkout/src/libcore/fmt/mod.rs"
 $49 = (FUNCTION_TABLE_iiii[$48 & 511]($39,$44,$46)|0); //@line 1112 "/checkout/src/libcore/fmt/mod.rs"
 $_0$0$shrunk = $49;
 STACKTOP = sp;return ($_0$0$shrunk|0); //@line 1114 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN4core3fmt9Formatter3pad17he7dfc3104845bdf3E($self,$0,$1) {
 $self = $self|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$arith = 0, $$arith2 = 0, $$overflow = 0, $$overflow3 = 0, $$ph = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre53 = 0, $$sink = 0, $$sink$i = 0, $$sink$i$i = 0, $$sink$sink$i$i = 0, $$sink11$i$i = 0, $$sink14$i$i = 0, $$sink23 = 0, $$sink2332 = 0, $$sink25 = 0, $$sink2533 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $_0$0$i10$i$i$i = 0, $_0$0$i16$i$i$i = 0, $_0$0$i5$i$i$i = 0, $_0$0$in = 0, $_16 = 0, $_17$sroa$4$0$$sroa_idx = 0, $_17$sroa$5$0$$sroa_idx = 0, $align$0$off0$i = 0, $align$0$off0$i$clear = 0, $cond = 0, $cond$i = 0, $cont_bytes$0$lcssa$i = 0, $cont_bytes$0$lcssa$i19 = 0, $cont_bytes$09$i = 0, $cont_bytes$09$i21 = 0, $extract$t$i = 0, $fill$i = 0, $iter$sroa$0$0$i = 0;
 var $iter$sroa$0$08$i = 0, $iter$sroa$0$08$i22 = 0, $iter1$sroa$0$0$i = 0, $len$1$i$i = 0, $len$2$i$i = 0, $n$08$i$i35 = 0, $or$cond$i$i$i$i = 0, $padding$sink$i = 0, $phitmp$i$i$i = 0, $phitmp21$i$i$i = 0, $phitmp22$i$i$i = 0, $s1$sroa$9$061 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $fill$i = sp + 16|0;
 $_16 = sp;
 $2 = ((($self)) + 8|0); //@line 1161 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$2>>2]|0; //@line 194 "/checkout/src/libcore/option.rs"
 $4 = ($3|0)==(1); //@line 215 "/checkout/src/libcore/option.rs"
 $$phi$trans$insert = ((($self)) + 16|0);
 $$pre = HEAP32[$$phi$trans$insert>>2]|0;
 $cond = ($$pre|0)==(1);
 if ($4) {
  if ($cond) {
   label = 7;
  } else {
   $$pre$phiZ2D = $0;$s1$sroa$9$061 = $1;
  }
 } else {
  if ($cond) {
   label = 7;
  } else {
   $5 = ((($self)) + 24|0); //@line 1162 "/checkout/src/libcore/fmt/mod.rs"
   $6 = HEAP32[$5>>2]|0; //@line 1162 "/checkout/src/libcore/fmt/mod.rs"
   $7 = ((($self)) + 28|0); //@line 1162 "/checkout/src/libcore/fmt/mod.rs"
   $8 = HEAP32[$7>>2]|0; //@line 1162 "/checkout/src/libcore/fmt/mod.rs"
   $9 = ((($8)) + 12|0); //@line 1162 "/checkout/src/libcore/fmt/mod.rs"
   $10 = HEAP32[$9>>2]|0; //@line 1162 "/checkout/src/libcore/fmt/mod.rs"
   $11 = (FUNCTION_TABLE_iiii[$10 & 511]($6,$0,$1)|0); //@line 1162 "/checkout/src/libcore/fmt/mod.rs"
   $_0$0$in = $11;
   STACKTOP = sp;return ($_0$0$in|0); //@line 1197 "/checkout/src/libcore/fmt/mod.rs"
  }
 }
 if ((label|0) == 7) {
  $12 = ((($self)) + 20|0); //@line 1166 "/checkout/src/libcore/fmt/mod.rs"
  $13 = HEAP32[$12>>2]|0; //@line 1166 "/checkout/src/libcore/fmt/mod.rs"
  $14 = (($0) + ($1)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  HEAP32[$_16>>2] = 0; //@line 911 "/checkout/src/libcore/iter/iterator.rs"
  $_17$sroa$4$0$$sroa_idx = ((($_16)) + 4|0); //@line 911 "/checkout/src/libcore/iter/iterator.rs"
  HEAP32[$_17$sroa$4$0$$sroa_idx>>2] = $0; //@line 911 "/checkout/src/libcore/iter/iterator.rs"
  $_17$sroa$5$0$$sroa_idx = ((($_16)) + 8|0); //@line 911 "/checkout/src/libcore/iter/iterator.rs"
  HEAP32[$_17$sroa$5$0$$sroa_idx>>2] = $14; //@line 911 "/checkout/src/libcore/iter/iterator.rs"
  $15 = ((($_16)) + 12|0); //@line 911 "/checkout/src/libcore/iter/iterator.rs"
  HEAP32[$15>>2] = $13; //@line 911 "/checkout/src/libcore/iter/iterator.rs"
  $16 = ($13|0)==(0); //@line 2083 "/checkout/src/libcore/iter/mod.rs"
  $17 = $0; //@line 2083 "/checkout/src/libcore/iter/mod.rs"
  L9: do {
   if ($16) {
    $36 = ($1|0)==(0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
    if ($36) {
     $$sink = 0;
    } else {
     $37 = ((($0)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     HEAP32[$_17$sroa$4$0$$sroa_idx>>2] = $37; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
     $38 = $37; //@line 497 "/checkout/src/libcore/str/mod.rs"
     $39 = HEAP8[$0>>0]|0; //@line 497 "/checkout/src/libcore/str/mod.rs"
     $40 = ($39<<24>>24)>(-1); //@line 498 "/checkout/src/libcore/str/mod.rs"
     if ($40) {
      $$ph = $38;
     } else {
      $41 = $39&255; //@line 472 "/checkout/src/libcore/str/mod.rs"
      $42 = ($1|0)==(1); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
      if ($42) {
       $162 = $38;$49 = $14;$_0$0$i16$i$i$i = 0;
      } else {
       $43 = ((($0)) + 2|0); //@line 623 "/checkout/src/libcore/ptr.rs"
       HEAP32[$_17$sroa$4$0$$sroa_idx>>2] = $43; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
       $44 = HEAP8[$37>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
       $phitmp$i$i$i = $44 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
       $45 = $43; //@line 485 "/checkout/src/libcore/str/mod.rs"
       $162 = $45;$49 = $43;$_0$0$i16$i$i$i = $phitmp$i$i$i;
      }
      $46 = $_0$0$i16$i$i$i&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
      $47 = ($39&255)>(223); //@line 508 "/checkout/src/libcore/str/mod.rs"
      if ($47) {
       $48 = ($49|0)==($14|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
       if ($48) {
        $163 = $162;$58 = $14;$_0$0$i10$i$i$i = 0;
       } else {
        $50 = ((($49)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
        HEAP32[$_17$sroa$4$0$$sroa_idx>>2] = $50; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
        $51 = HEAP8[$49>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
        $phitmp21$i$i$i = $51 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
        $52 = $50; //@line 485 "/checkout/src/libcore/str/mod.rs"
        $163 = $52;$58 = $50;$_0$0$i10$i$i$i = $phitmp21$i$i$i;
       }
       $53 = $46 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
       $54 = $_0$0$i10$i$i$i&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
       $55 = $54 | $53; //@line 476 "/checkout/src/libcore/str/mod.rs"
       $56 = ($39&255)>(239); //@line 514 "/checkout/src/libcore/str/mod.rs"
       if ($56) {
        $57 = ($58|0)==($14|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
        if ($57) {
         $164 = $163;$_0$0$i5$i$i$i = 0;
        } else {
         $59 = ((($58)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
         HEAP32[$_17$sroa$4$0$$sroa_idx>>2] = $59; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
         $60 = HEAP8[$58>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
         $phitmp22$i$i$i = $60 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
         $61 = $59; //@line 485 "/checkout/src/libcore/str/mod.rs"
         $164 = $61;$_0$0$i5$i$i$i = $phitmp22$i$i$i;
        }
        $62 = $41 << 18; //@line 518 "/checkout/src/libcore/str/mod.rs"
        $63 = $62 & 1835008; //@line 518 "/checkout/src/libcore/str/mod.rs"
        $64 = $55 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
        $65 = $_0$0$i5$i$i$i&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
        $66 = $64 | $63; //@line 476 "/checkout/src/libcore/str/mod.rs"
        $67 = $66 | $65; //@line 518 "/checkout/src/libcore/str/mod.rs"
        $68 = ($67|0)==(1114112); //@line 664 "/checkout/src/libcore/str/mod.rs"
        if ($68) {
         $$sink = $1;
         break;
        } else {
         $$ph = $164;
        }
       } else {
        $$ph = $163;
       }
      } else {
       $$ph = $162;
      }
     }
     $69 = (($$ph) - ($17))|0; //@line 668 "/checkout/src/libcore/str/mod.rs"
     HEAP32[$_16>>2] = $69; //@line 668 "/checkout/src/libcore/str/mod.rs"
     $$sink = 0;
    }
   } else {
    HEAP32[$15>>2] = 0; //@line 2087 "/checkout/src/libcore/iter/mod.rs"
    $18 = ((($_16)) + 4|0); //@line 662 "/checkout/src/libcore/str/mod.rs"
    $19 = (__ZN81__LT_core__str__Chars_LT__u27_a_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17hc1ee35ddbdcf551bE_llvm_3BE8BC2C($18)|0); //@line 663 "/checkout/src/libcore/str/mod.rs"
    $20 = ($19|0)==(1114112); //@line 664 "/checkout/src/libcore/str/mod.rs"
    if ($20) {
     $$sink = $1;
    } else {
     $21 = HEAP32[$_16>>2]|0; //@line 666 "/checkout/src/libcore/str/mod.rs"
     $$sink2332 = HEAP32[$_17$sroa$5$0$$sroa_idx>>2]|0; //@line 1148 "/checkout/src/libcore/slice/mod.rs"
     $$sink2533 = HEAP32[$18>>2]|0; //@line 1148 "/checkout/src/libcore/slice/mod.rs"
     $22 = (($21) + ($1))|0; //@line 664 "/checkout/src/libcore/num/mod.rs"
     $23 = (($22) - ($$sink2332))|0; //@line 668 "/checkout/src/libcore/str/mod.rs"
     $24 = (($23) + ($$sink2533))|0; //@line 668 "/checkout/src/libcore/str/mod.rs"
     HEAP32[$_16>>2] = $24; //@line 668 "/checkout/src/libcore/str/mod.rs"
     $30 = $$sink2332;$31 = $$sink2533;$n$08$i$i35 = $13;
     while(1) {
      $25 = (__ZN81__LT_core__str__Chars_LT__u27_a_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17hc1ee35ddbdcf551bE_llvm_3BE8BC2C($18)|0); //@line 663 "/checkout/src/libcore/str/mod.rs"
      $26 = ($25|0)==(1114112); //@line 664 "/checkout/src/libcore/str/mod.rs"
      if ($26) {
       $$sink = $1;
       break L9;
      }
      $27 = (($n$08$i$i35) + -1)|0; //@line 260 "/checkout/src/libcore/iter/iterator.rs"
      $28 = HEAP32[$_16>>2]|0; //@line 666 "/checkout/src/libcore/str/mod.rs"
      $29 = (($30) - ($31))|0; //@line 668 "/checkout/src/libcore/str/mod.rs"
      $$sink23 = HEAP32[$_17$sroa$5$0$$sroa_idx>>2]|0; //@line 1148 "/checkout/src/libcore/slice/mod.rs"
      $$sink25 = HEAP32[$18>>2]|0; //@line 1148 "/checkout/src/libcore/slice/mod.rs"
      $32 = (($29) + ($28))|0; //@line 664 "/checkout/src/libcore/num/mod.rs"
      $33 = (($32) - ($$sink23))|0; //@line 668 "/checkout/src/libcore/str/mod.rs"
      $34 = (($33) + ($$sink25))|0; //@line 668 "/checkout/src/libcore/str/mod.rs"
      HEAP32[$_16>>2] = $34; //@line 668 "/checkout/src/libcore/str/mod.rs"
      $35 = ($27|0)==(0); //@line 259 "/checkout/src/libcore/iter/iterator.rs"
      if ($35) {
       break;
      } else {
       $30 = $$sink23;$31 = $$sink25;$n$08$i$i35 = $27;
      }
     }
     $70 = ($28|0)==(0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
     $71 = ($28|0)==($1|0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
     $or$cond$i$i$i$i = $70 | $71; //@line 2438 "/checkout/src/libcore/str/mod.rs"
     if ($or$cond$i$i$i$i) {
      $$sink = $28;
     } else {
      $72 = ($28>>>0)<($1>>>0); //@line 792 "/checkout/src/libcore/slice/mod.rs"
      if (!($72)) {
       __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($0,$1,0,$28); //@line 1940 "/checkout/src/libcore/str/mod.rs"
       // unreachable; //@line 1940 "/checkout/src/libcore/str/mod.rs"
      }
      $73 = (($0) + ($28)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
      $74 = HEAP8[$73>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
      $75 = ($74<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
      if ($75) {
       $$sink = $28;
      } else {
       __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($0,$1,0,$28); //@line 1940 "/checkout/src/libcore/str/mod.rs"
       // unreachable; //@line 1940 "/checkout/src/libcore/str/mod.rs"
      }
     }
    }
   }
  } while(0);
  $$pre53 = HEAP32[$2>>2]|0;
  $switch = ($$pre53|0)==(1); //@line 1182 "/checkout/src/libcore/fmt/mod.rs"
  if ($switch) {
   $$pre$phiZ2D = $0;$s1$sroa$9$061 = $$sink;
  } else {
   $76 = ((($self)) + 24|0); //@line 1182 "/checkout/src/libcore/fmt/mod.rs"
   $77 = HEAP32[$76>>2]|0; //@line 1182 "/checkout/src/libcore/fmt/mod.rs"
   $78 = ((($self)) + 28|0); //@line 1182 "/checkout/src/libcore/fmt/mod.rs"
   $79 = HEAP32[$78>>2]|0; //@line 1182 "/checkout/src/libcore/fmt/mod.rs"
   $80 = ((($79)) + 12|0); //@line 1182 "/checkout/src/libcore/fmt/mod.rs"
   $81 = HEAP32[$80>>2]|0; //@line 1182 "/checkout/src/libcore/fmt/mod.rs"
   $82 = (FUNCTION_TABLE_iiii[$81 & 511]($77,$0,$$sink)|0); //@line 1182 "/checkout/src/libcore/fmt/mod.rs"
   $_0$0$in = $82;
   STACKTOP = sp;return ($_0$0$in|0); //@line 1197 "/checkout/src/libcore/fmt/mod.rs"
  }
 }
 $151 = ((($self)) + 12|0); //@line 1185 "/checkout/src/libcore/fmt/mod.rs"
 $100 = HEAP32[$151>>2]|0; //@line 1185 "/checkout/src/libcore/fmt/mod.rs"
 $97 = (($0) + ($s1$sroa$9$061)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
 $152 = ($s1$sroa$9$061|0)==(0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
 if ($152) {
  $cont_bytes$0$lcssa$i = 0;
 } else {
  $cont_bytes$09$i = 0;$iter$sroa$0$08$i = $$pre$phiZ2D;
  while(1) {
   $153 = ((($iter$sroa$0$08$i)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
   $154 = HEAP8[$iter$sroa$0$08$i>>0]|0; //@line 577 "/checkout/src/libcore/str/mod.rs"
   $155 = $154 & -64; //@line 481 "/checkout/src/libcore/str/mod.rs"
   $156 = ($155<<24>>24)==(-128); //@line 481 "/checkout/src/libcore/str/mod.rs"
   $157 = $156&1; //@line 578 "/checkout/src/libcore/str/mod.rs"
   $158 = (($157) + ($cont_bytes$09$i))|0; //@line 578 "/checkout/src/libcore/str/mod.rs"
   $159 = ($153|0)==($97|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
   if ($159) {
    $cont_bytes$0$lcssa$i = $158;
    break;
   } else {
    $cont_bytes$09$i = $158;$iter$sroa$0$08$i = $153;
   }
  }
 }
 $160 = (($s1$sroa$9$061) - ($cont_bytes$0$lcssa$i))|0; //@line 580 "/checkout/src/libcore/str/mod.rs"
 $161 = ($160>>>0)<($100>>>0); //@line 1185 "/checkout/src/libcore/fmt/mod.rs"
 if (!($161)) {
  $83 = ((($self)) + 24|0); //@line 1186 "/checkout/src/libcore/fmt/mod.rs"
  $84 = HEAP32[$83>>2]|0; //@line 1186 "/checkout/src/libcore/fmt/mod.rs"
  $85 = ((($self)) + 28|0); //@line 1186 "/checkout/src/libcore/fmt/mod.rs"
  $86 = HEAP32[$85>>2]|0; //@line 1186 "/checkout/src/libcore/fmt/mod.rs"
  $87 = ((($86)) + 12|0); //@line 1186 "/checkout/src/libcore/fmt/mod.rs"
  $88 = HEAP32[$87>>2]|0; //@line 1186 "/checkout/src/libcore/fmt/mod.rs"
  $89 = (FUNCTION_TABLE_iiii[$88 & 511]($84,$0,$s1$sroa$9$061)|0); //@line 1186 "/checkout/src/libcore/fmt/mod.rs"
  $_0$0$in = $89;
  STACKTOP = sp;return ($_0$0$in|0); //@line 1197 "/checkout/src/libcore/fmt/mod.rs"
 }
 if ($152) {
  $cont_bytes$0$lcssa$i19 = 0;
 } else {
  $cont_bytes$09$i21 = 0;$iter$sroa$0$08$i22 = $$pre$phiZ2D;
  while(1) {
   $90 = ((($iter$sroa$0$08$i22)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
   $91 = HEAP8[$iter$sroa$0$08$i22>>0]|0; //@line 577 "/checkout/src/libcore/str/mod.rs"
   $92 = $91 & -64; //@line 481 "/checkout/src/libcore/str/mod.rs"
   $93 = ($92<<24>>24)==(-128); //@line 481 "/checkout/src/libcore/str/mod.rs"
   $94 = $93&1; //@line 578 "/checkout/src/libcore/str/mod.rs"
   $95 = (($94) + ($cont_bytes$09$i21))|0; //@line 578 "/checkout/src/libcore/str/mod.rs"
   $96 = ($90|0)==($97|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
   if ($96) {
    $cont_bytes$0$lcssa$i19 = $95;
    break;
   } else {
    $cont_bytes$09$i21 = $95;$iter$sroa$0$08$i22 = $90;
   }
  }
 }
 $98 = (($cont_bytes$0$lcssa$i19) - ($s1$sroa$9$061))|0; //@line 1192 "/checkout/src/libcore/fmt/mod.rs"
 $99 = (($98) + ($100))|0; //@line 1192 "/checkout/src/libcore/fmt/mod.rs"
 $101 = ((($self)) + 48|0); //@line 1206 "/checkout/src/libcore/fmt/mod.rs"
 $extract$t$i = HEAP8[$101>>0]|0; //@line 1206 "/checkout/src/libcore/fmt/mod.rs"
 $cond$i = ($extract$t$i<<24>>24)==(3); //@line 1206 "/checkout/src/libcore/fmt/mod.rs"
 $align$0$off0$i = $cond$i ? 0 : $extract$t$i; //@line 1206 "/checkout/src/libcore/fmt/mod.rs"
 $align$0$off0$i$clear = $align$0$off0$i & 3; //@line 1206 "/checkout/src/libcore/fmt/mod.rs"
 switch ($align$0$off0$i$clear<<24>>24) {
 case 0:  {
  $$sink$i = 0;$padding$sink$i = $99;
  break;
 }
 case 3: case 1:  {
  $$sink$i = $99;$padding$sink$i = 0;
  break;
 }
 case 2:  {
  $131 = $99 >>> 1; //@line 1214 "/checkout/src/libcore/fmt/mod.rs"
  $132 = (($99) + 1)|0; //@line 1214 "/checkout/src/libcore/fmt/mod.rs"
  $133 = $132 >>> 1; //@line 1214 "/checkout/src/libcore/fmt/mod.rs"
  $$sink$i = $131;$padding$sink$i = $133;
  break;
 }
 default: {
  // unreachable; //@line 1231 "/checkout/src/libcore/fmt/mod.rs"
 }
 }
 HEAP32[$fill$i>>2] = 0; //@line 1217 "/checkout/src/libcore/fmt/mod.rs"
 $102 = ((($self)) + 4|0); //@line 1218 "/checkout/src/libcore/fmt/mod.rs"
 $103 = HEAP32[$102>>2]|0; //@line 1218 "/checkout/src/libcore/fmt/mod.rs"
 $104 = ($103>>>0)<(128); //@line 485 "/checkout/src/libcore/char.rs"
 if ($104) {
  $105 = $103&255; //@line 486 "/checkout/src/libcore/char.rs"
  HEAP8[$fill$i>>0] = $105; //@line 486 "/checkout/src/libcore/char.rs"
  $len$2$i$i = 1;
 } else {
  $106 = ($103>>>0)<(2048); //@line 488 "/checkout/src/libcore/char.rs"
  do {
   if ($106) {
    $$sink$i$i = 0;$$sink$sink$i$i = 1;$$sink11$i$i = -64;$$sink14$i$i = 31;$len$1$i$i = 2;
   } else {
    $107 = ($103>>>0)<(65536); //@line 492 "/checkout/src/libcore/char.rs"
    if ($107) {
     $108 = $103 >>> 12; //@line 493 "/checkout/src/libcore/char.rs"
     $109 = $108 & 15; //@line 493 "/checkout/src/libcore/char.rs"
     $110 = $109&255; //@line 493 "/checkout/src/libcore/char.rs"
     $111 = $110 | -32; //@line 493 "/checkout/src/libcore/char.rs"
     HEAP8[$fill$i>>0] = $111; //@line 493 "/checkout/src/libcore/char.rs"
     $$sink$i$i = 1;$$sink$sink$i$i = 2;$$sink11$i$i = -128;$$sink14$i$i = 63;$len$1$i$i = 3;
     break;
    } else {
     $112 = $103 >>> 18; //@line 498 "/checkout/src/libcore/char.rs"
     $113 = $112&255; //@line 498 "/checkout/src/libcore/char.rs"
     $114 = $113 | -16; //@line 498 "/checkout/src/libcore/char.rs"
     HEAP8[$fill$i>>0] = $114; //@line 498 "/checkout/src/libcore/char.rs"
     $115 = $103 >>> 12; //@line 499 "/checkout/src/libcore/char.rs"
     $116 = $115 & 63; //@line 499 "/checkout/src/libcore/char.rs"
     $117 = $116&255; //@line 499 "/checkout/src/libcore/char.rs"
     $118 = ((($fill$i)) + 1|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
     $119 = $117 | -128; //@line 499 "/checkout/src/libcore/char.rs"
     HEAP8[$118>>0] = $119; //@line 499 "/checkout/src/libcore/char.rs"
     $$sink$i$i = 2;$$sink$sink$i$i = 3;$$sink11$i$i = -128;$$sink14$i$i = 63;$len$1$i$i = 4;
     break;
    }
   }
  } while(0);
  $120 = $103 >>> 6;
  $121 = $$sink14$i$i & $120;
  $122 = $121&255;
  $123 = (($fill$i) + ($$sink$i$i)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $124 = $122 | $$sink11$i$i;
  HEAP8[$123>>0] = $124;
  $125 = $103 & 63;
  $126 = $125&255;
  $127 = (($fill$i) + ($$sink$sink$i$i)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $128 = $126 | -128;
  HEAP8[$127>>0] = $128;
  $len$2$i$i = $len$1$i$i;
 }
 $129 = ((($self)) + 24|0);
 $130 = ((($self)) + 28|0);
 $iter$sroa$0$0$i = 0;
 while(1) {
  $134 = ($iter$sroa$0$0$i>>>0)<($$sink$i>>>0); //@line 846 "/checkout/src/libcore/cmp.rs"
  if (!($134)) {
   label = 47;
   break;
  }
  $$arith2 = (($iter$sroa$0$0$i) + 1)|0; //@line 1982 "/checkout/src/libcore/num/mod.rs"
  $$overflow3 = ($iter$sroa$0$0$i>>>0)>(4294967294); //@line 1982 "/checkout/src/libcore/num/mod.rs"
  if ($$overflow3) {
   label = 47;
   break;
  }
  $140 = HEAP32[$129>>2]|0; //@line 1221 "/checkout/src/libcore/fmt/mod.rs"
  $141 = HEAP32[$130>>2]|0; //@line 1221 "/checkout/src/libcore/fmt/mod.rs"
  $142 = ((($141)) + 12|0); //@line 1221 "/checkout/src/libcore/fmt/mod.rs"
  $143 = HEAP32[$142>>2]|0; //@line 1221 "/checkout/src/libcore/fmt/mod.rs"
  $144 = (FUNCTION_TABLE_iiii[$143 & 511]($140,$fill$i,$len$2$i$i)|0); //@line 1221 "/checkout/src/libcore/fmt/mod.rs"
  if ($144) {
   break;
  } else {
   $iter$sroa$0$0$i = $$arith2;
  }
 }
 L72: do {
  if ((label|0) == 47) {
   $135 = HEAP32[$129>>2]|0; //@line 1193 "/checkout/src/libcore/fmt/mod.rs"
   $136 = HEAP32[$130>>2]|0; //@line 1193 "/checkout/src/libcore/fmt/mod.rs"
   $137 = ((($136)) + 12|0); //@line 1193 "/checkout/src/libcore/fmt/mod.rs"
   $138 = HEAP32[$137>>2]|0; //@line 1193 "/checkout/src/libcore/fmt/mod.rs"
   $139 = (FUNCTION_TABLE_iiii[$138 & 511]($135,$0,$s1$sroa$9$061)|0); //@line 1193 "/checkout/src/libcore/fmt/mod.rs"
   if (!($139)) {
    $iter1$sroa$0$0$i = 0;
    while(1) {
     $145 = ($iter1$sroa$0$0$i>>>0)<($padding$sink$i>>>0); //@line 846 "/checkout/src/libcore/cmp.rs"
     if (!($145)) {
      break;
     }
     $$arith = (($iter1$sroa$0$0$i) + 1)|0; //@line 1982 "/checkout/src/libcore/num/mod.rs"
     $$overflow = ($iter1$sroa$0$0$i>>>0)>(4294967294); //@line 1982 "/checkout/src/libcore/num/mod.rs"
     if ($$overflow) {
      break;
     }
     $146 = HEAP32[$129>>2]|0; //@line 1227 "/checkout/src/libcore/fmt/mod.rs"
     $147 = HEAP32[$130>>2]|0; //@line 1227 "/checkout/src/libcore/fmt/mod.rs"
     $148 = ((($147)) + 12|0); //@line 1227 "/checkout/src/libcore/fmt/mod.rs"
     $149 = HEAP32[$148>>2]|0; //@line 1227 "/checkout/src/libcore/fmt/mod.rs"
     $150 = (FUNCTION_TABLE_iiii[$149 & 511]($146,$fill$i,$len$2$i$i)|0); //@line 1227 "/checkout/src/libcore/fmt/mod.rs"
     if ($150) {
      break L72;
     } else {
      $iter1$sroa$0$0$i = $$arith;
     }
    }
    $_0$0$in = 0;
    STACKTOP = sp;return ($_0$0$in|0); //@line 1197 "/checkout/src/libcore/fmt/mod.rs"
   }
  }
 } while(0);
 $_0$0$in = 1;
 STACKTOP = sp;return ($_0$0$in|0); //@line 1197 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN4core3fmt9Formatter19pad_formatted_parts17h15239b62a734549fE($self,$formatted) {
 $self = $self|0;
 $formatted = $formatted|0;
 var $$ = 0, $$$1$i$i = 0, $$$i$i = 0, $$1$i$i = 0, $$arith = 0, $$arith2 = 0, $$off0 = 0, $$off0$clear = 0, $$overflow = 0, $$overflow3 = 0, $$sink$i = 0, $$sink$i$i = 0, $$sink$sink$i$i = 0, $$sink11$i$i = 0, $$sink14$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $_0$1$in = 0, $cond = 0, $extract$t = 0, $fill$i = 0, $formatted1 = 0, $iter$sroa$0$0$i = 0, $iter$sroa$0$010$i = 0;
 var $iter1$sroa$0$0$i = 0, $len$0$lcssa$i = 0, $len$011$i = 0, $len$1$i$i = 0, $len$2$i$i = 0, $padding$sink$i = 0, $ret$0$in = 0, $trunc$i$i = 0, $trunc$i$i$clear = 0, $width$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $fill$i = sp + 16|0;
 $formatted1 = sp;
 $0 = ((($self)) + 8|0); //@line 1237 "/checkout/src/libcore/fmt/mod.rs"
 $1 = HEAP32[$0>>2]|0; //@line 1237 "/checkout/src/libcore/fmt/mod.rs"
 $cond = ($1|0)==(1); //@line 1237 "/checkout/src/libcore/fmt/mod.rs"
 if (!($cond)) {
  $2 = (__ZN4core3fmt9Formatter21write_formatted_parts17hfee7ad6db828a2a8E($self,$formatted)|0); //@line 1271 "/checkout/src/libcore/fmt/mod.rs"
  $_0$1$in = $2;
  STACKTOP = sp;return ($_0$1$in|0); //@line 1273 "/checkout/src/libcore/fmt/mod.rs"
 }
 $3 = ((($self)) + 12|0); //@line 1237 "/checkout/src/libcore/fmt/mod.rs"
 $4 = HEAP32[$3>>2]|0; //@line 1237 "/checkout/src/libcore/fmt/mod.rs"
 $5 = HEAP32[$formatted>>2]|0; //@line 103 "/checkout/src/libcore/clone.rs"
 $6 = ((($formatted)) + 4|0); //@line 103 "/checkout/src/libcore/clone.rs"
 $7 = HEAP32[$6>>2]|0; //@line 103 "/checkout/src/libcore/clone.rs"
 $8 = ((($formatted)) + 8|0); //@line 103 "/checkout/src/libcore/clone.rs"
 $9 = HEAP32[$8>>2]|0; //@line 103 "/checkout/src/libcore/clone.rs"
 $10 = ((($formatted)) + 12|0); //@line 103 "/checkout/src/libcore/clone.rs"
 $11 = HEAP32[$10>>2]|0; //@line 103 "/checkout/src/libcore/clone.rs"
 HEAP32[$formatted1>>2] = $5; //@line 225 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $12 = ((($formatted1)) + 4|0); //@line 225 "/checkout/src/libcore/num/flt2dec/mod.rs"
 HEAP32[$12>>2] = $7; //@line 225 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $13 = ((($formatted1)) + 8|0); //@line 225 "/checkout/src/libcore/num/flt2dec/mod.rs"
 HEAP32[$13>>2] = $9; //@line 225 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $14 = ((($formatted1)) + 12|0); //@line 225 "/checkout/src/libcore/num/flt2dec/mod.rs"
 HEAP32[$14>>2] = $11; //@line 225 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $15 = ((($self)) + 4|0); //@line 1241 "/checkout/src/libcore/fmt/mod.rs"
 $16 = HEAP32[$15>>2]|0; //@line 1241 "/checkout/src/libcore/fmt/mod.rs"
 $17 = ((($self)) + 48|0); //@line 1242 "/checkout/src/libcore/fmt/mod.rs"
 $extract$t = HEAP8[$17>>0]|0; //@line 1242 "/checkout/src/libcore/fmt/mod.rs"
 $18 = HEAP32[$self>>2]|0; //@line 1372 "/checkout/src/libcore/fmt/mod.rs"
 $19 = $18 & 8; //@line 1372 "/checkout/src/libcore/fmt/mod.rs"
 $20 = ($19|0)==(0); //@line 1372 "/checkout/src/libcore/fmt/mod.rs"
 $21 = $9; //@line 1244 "/checkout/src/libcore/fmt/mod.rs"
 do {
  if ($20) {
   $$off0 = $extract$t;$54 = $16;$97 = $7;$width$0 = $4;
  } else {
   $22 = $5; //@line 1244 "/checkout/src/libcore/fmt/mod.rs"
   $23 = ((($self)) + 24|0); //@line 1247 "/checkout/src/libcore/fmt/mod.rs"
   $24 = HEAP32[$23>>2]|0; //@line 1247 "/checkout/src/libcore/fmt/mod.rs"
   $25 = ((($self)) + 28|0); //@line 1247 "/checkout/src/libcore/fmt/mod.rs"
   $26 = HEAP32[$25>>2]|0; //@line 1247 "/checkout/src/libcore/fmt/mod.rs"
   $27 = ((($26)) + 12|0); //@line 1247 "/checkout/src/libcore/fmt/mod.rs"
   $28 = HEAP32[$27>>2]|0; //@line 1247 "/checkout/src/libcore/fmt/mod.rs"
   $29 = (FUNCTION_TABLE_iiii[$28 & 511]($24,$22,$7)|0); //@line 1247 "/checkout/src/libcore/fmt/mod.rs"
   if (!($29)) {
    HEAP32[$formatted1>>2] = 38620; //@line 1250 "/checkout/src/libcore/fmt/mod.rs"
    HEAP32[$12>>2] = 0; //@line 1250 "/checkout/src/libcore/fmt/mod.rs"
    $30 = ($4>>>0)<($7>>>0); //@line 1251 "/checkout/src/libcore/fmt/mod.rs"
    $31 = (($4) - ($7))|0; //@line 1251 "/checkout/src/libcore/fmt/mod.rs"
    $$ = $30 ? 0 : $31; //@line 1251 "/checkout/src/libcore/fmt/mod.rs"
    HEAP32[$15>>2] = 48; //@line 1253 "/checkout/src/libcore/fmt/mod.rs"
    HEAP8[$17>>0] = 1; //@line 1254 "/checkout/src/libcore/fmt/mod.rs"
    $$off0 = 1;$54 = 48;$97 = 0;$width$0 = $$;
    break;
   }
   $_0$1$in = 1;
   STACKTOP = sp;return ($_0$1$in|0); //@line 1273 "/checkout/src/libcore/fmt/mod.rs"
  }
 } while(0);
 $32 = (($21) + (($11*12)|0)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
 $33 = ($11|0)==(0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
 L12: do {
  if ($33) {
   $len$0$lcssa$i = $97;
  } else {
   $34 = $9; //@line 289 "/checkout/src/libcore/slice/mod.rs"
   $iter$sroa$0$010$i = $34;$len$011$i = $97;
   L14: while(1) {
    $35 = ((($iter$sroa$0$010$i)) + 12|0); //@line 623 "/checkout/src/libcore/ptr.rs"
    $36 = HEAP16[$iter$sroa$0$010$i>>1]|0; //@line 188 "/checkout/src/libcore/num/flt2dec/mod.rs"
    $trunc$i$i = $36&255; //@line 188 "/checkout/src/libcore/num/flt2dec/mod.rs"
    $trunc$i$i$clear = $trunc$i$i & 3; //@line 188 "/checkout/src/libcore/num/flt2dec/mod.rs"
    L16: do {
     switch ($trunc$i$i$clear<<24>>24) {
     case 0:  {
      $37 = ((($iter$sroa$0$010$i)) + 4|0); //@line 188 "/checkout/src/libcore/num/flt2dec/mod.rs"
      $38 = HEAP32[$37>>2]|0; //@line 188 "/checkout/src/libcore/num/flt2dec/mod.rs"
      $48 = $38;
      break;
     }
     case 1:  {
      $39 = ((($iter$sroa$0$010$i)) + 2|0); //@line 189 "/checkout/src/libcore/num/flt2dec/mod.rs"
      $40 = HEAP16[$39>>1]|0; //@line 189 "/checkout/src/libcore/num/flt2dec/mod.rs"
      $41 = ($40&65535)<(1000); //@line 189 "/checkout/src/libcore/num/flt2dec/mod.rs"
      if ($41) {
       $44 = ($40&65535)<(10); //@line 189 "/checkout/src/libcore/num/flt2dec/mod.rs"
       $45 = ($40&65535)<(100); //@line 189 "/checkout/src/libcore/num/flt2dec/mod.rs"
       $$1$i$i = $45 ? 2 : 3; //@line 189 "/checkout/src/libcore/num/flt2dec/mod.rs"
       $$$1$i$i = $44 ? 1 : $$1$i$i; //@line 189 "/checkout/src/libcore/num/flt2dec/mod.rs"
       $48 = $$$1$i$i;
       break L16;
      } else {
       $46 = ($40&65535)<(10000); //@line 190 "/checkout/src/libcore/num/flt2dec/mod.rs"
       $$$i$i = $46 ? 4 : 5; //@line 190 "/checkout/src/libcore/num/flt2dec/mod.rs"
       $48 = $$$i$i;
       break L16;
      }
      break;
     }
     case 2:  {
      $42 = ((($iter$sroa$0$010$i)) + 8|0); //@line 191 "/checkout/src/libcore/num/flt2dec/mod.rs"
      $43 = HEAP32[$42>>2]|0; //@line 191 "/checkout/src/libcore/num/flt2dec/mod.rs"
      $48 = $43;
      break;
     }
     default: {
      break L14;
     }
     }
    } while(0);
    $47 = (($48) + ($len$011$i))|0; //@line 238 "/checkout/src/libcore/num/flt2dec/mod.rs"
    $49 = ($35|0)==($32|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
    if ($49) {
     $len$0$lcssa$i = $47;
     break L12;
    } else {
     $iter$sroa$0$010$i = $35;$len$011$i = $47;
    }
   }
   // unreachable; //@line 193 "/checkout/src/libcore/num/flt2dec/mod.rs"
  }
 } while(0);
 $50 = ($width$0>>>0)>($len$0$lcssa$i>>>0); //@line 1259 "/checkout/src/libcore/fmt/mod.rs"
 L26: do {
  if ($50) {
   $52 = (($width$0) - ($len$0$lcssa$i))|0; //@line 1262 "/checkout/src/libcore/fmt/mod.rs"
   $$off0$clear = $$off0 & 3;
   switch ($$off0$clear<<24>>24) {
   case 0:  {
    $$sink$i = 0;$padding$sink$i = $52;
    break;
   }
   case 3: case 1:  {
    $$sink$i = $52;$padding$sink$i = 0;
    break;
   }
   case 2:  {
    $81 = $52 >>> 1; //@line 1214 "/checkout/src/libcore/fmt/mod.rs"
    $82 = (($52) + 1)|0; //@line 1214 "/checkout/src/libcore/fmt/mod.rs"
    $83 = $82 >>> 1; //@line 1214 "/checkout/src/libcore/fmt/mod.rs"
    $$sink$i = $81;$padding$sink$i = $83;
    break;
   }
   default: {
    // unreachable; //@line 1231 "/checkout/src/libcore/fmt/mod.rs"
   }
   }
   HEAP32[$fill$i>>2] = 0; //@line 1217 "/checkout/src/libcore/fmt/mod.rs"
   $53 = ($54>>>0)<(128); //@line 485 "/checkout/src/libcore/char.rs"
   if ($53) {
    $55 = $54&255; //@line 486 "/checkout/src/libcore/char.rs"
    HEAP8[$fill$i>>0] = $55; //@line 486 "/checkout/src/libcore/char.rs"
    $len$2$i$i = 1;
   } else {
    $56 = ($54>>>0)<(2048); //@line 488 "/checkout/src/libcore/char.rs"
    do {
     if ($56) {
      $$sink$i$i = 0;$$sink$sink$i$i = 1;$$sink11$i$i = -64;$$sink14$i$i = 31;$len$1$i$i = 2;
     } else {
      $57 = ($54>>>0)<(65536); //@line 492 "/checkout/src/libcore/char.rs"
      if ($57) {
       $58 = $54 >>> 12; //@line 493 "/checkout/src/libcore/char.rs"
       $59 = $58 & 15; //@line 493 "/checkout/src/libcore/char.rs"
       $60 = $59&255; //@line 493 "/checkout/src/libcore/char.rs"
       $61 = $60 | -32; //@line 493 "/checkout/src/libcore/char.rs"
       HEAP8[$fill$i>>0] = $61; //@line 493 "/checkout/src/libcore/char.rs"
       $$sink$i$i = 1;$$sink$sink$i$i = 2;$$sink11$i$i = -128;$$sink14$i$i = 63;$len$1$i$i = 3;
       break;
      } else {
       $62 = $54 >>> 18; //@line 498 "/checkout/src/libcore/char.rs"
       $63 = $62&255; //@line 498 "/checkout/src/libcore/char.rs"
       $64 = $63 | -16; //@line 498 "/checkout/src/libcore/char.rs"
       HEAP8[$fill$i>>0] = $64; //@line 498 "/checkout/src/libcore/char.rs"
       $65 = $54 >>> 12; //@line 499 "/checkout/src/libcore/char.rs"
       $66 = $65 & 63; //@line 499 "/checkout/src/libcore/char.rs"
       $67 = $66&255; //@line 499 "/checkout/src/libcore/char.rs"
       $68 = ((($fill$i)) + 1|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
       $69 = $67 | -128; //@line 499 "/checkout/src/libcore/char.rs"
       HEAP8[$68>>0] = $69; //@line 499 "/checkout/src/libcore/char.rs"
       $$sink$i$i = 2;$$sink$sink$i$i = 3;$$sink11$i$i = -128;$$sink14$i$i = 63;$len$1$i$i = 4;
       break;
      }
     }
    } while(0);
    $70 = $54 >>> 6;
    $71 = $$sink14$i$i & $70;
    $72 = $71&255;
    $73 = (($fill$i) + ($$sink$i$i)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
    $74 = $72 | $$sink11$i$i;
    HEAP8[$73>>0] = $74;
    $75 = $54 & 63;
    $76 = $75&255;
    $77 = (($fill$i) + ($$sink$sink$i$i)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
    $78 = $76 | -128;
    HEAP8[$77>>0] = $78;
    $len$2$i$i = $len$1$i$i;
   }
   $79 = ((($self)) + 24|0);
   $80 = ((($self)) + 28|0);
   $iter$sroa$0$0$i = 0;
   while(1) {
    $84 = ($iter$sroa$0$0$i>>>0)<($$sink$i>>>0); //@line 846 "/checkout/src/libcore/cmp.rs"
    if (!($84)) {
     label = 34;
     break;
    }
    $$arith2 = (($iter$sroa$0$0$i) + 1)|0; //@line 1982 "/checkout/src/libcore/num/mod.rs"
    $$overflow3 = ($iter$sroa$0$0$i>>>0)>(4294967294); //@line 1982 "/checkout/src/libcore/num/mod.rs"
    if ($$overflow3) {
     label = 34;
     break;
    }
    $86 = HEAP32[$79>>2]|0; //@line 1221 "/checkout/src/libcore/fmt/mod.rs"
    $87 = HEAP32[$80>>2]|0; //@line 1221 "/checkout/src/libcore/fmt/mod.rs"
    $88 = ((($87)) + 12|0); //@line 1221 "/checkout/src/libcore/fmt/mod.rs"
    $89 = HEAP32[$88>>2]|0; //@line 1221 "/checkout/src/libcore/fmt/mod.rs"
    $90 = (FUNCTION_TABLE_iiii[$89 & 511]($86,$fill$i,$len$2$i$i)|0); //@line 1221 "/checkout/src/libcore/fmt/mod.rs"
    if ($90) {
     break;
    } else {
     $iter$sroa$0$0$i = $$arith2;
    }
   }
   L47: do {
    if ((label|0) == 34) {
     $85 = (__ZN4core3fmt9Formatter21write_formatted_parts17hfee7ad6db828a2a8E($self,$formatted1)|0); //@line 1263 "/checkout/src/libcore/fmt/mod.rs"
     if (!($85)) {
      $iter1$sroa$0$0$i = 0;
      while(1) {
       $91 = ($iter1$sroa$0$0$i>>>0)<($padding$sink$i>>>0); //@line 846 "/checkout/src/libcore/cmp.rs"
       if (!($91)) {
        break;
       }
       $$arith = (($iter1$sroa$0$0$i) + 1)|0; //@line 1982 "/checkout/src/libcore/num/mod.rs"
       $$overflow = ($iter1$sroa$0$0$i>>>0)>(4294967294); //@line 1982 "/checkout/src/libcore/num/mod.rs"
       if ($$overflow) {
        break;
       }
       $92 = HEAP32[$79>>2]|0; //@line 1227 "/checkout/src/libcore/fmt/mod.rs"
       $93 = HEAP32[$80>>2]|0; //@line 1227 "/checkout/src/libcore/fmt/mod.rs"
       $94 = ((($93)) + 12|0); //@line 1227 "/checkout/src/libcore/fmt/mod.rs"
       $95 = HEAP32[$94>>2]|0; //@line 1227 "/checkout/src/libcore/fmt/mod.rs"
       $96 = (FUNCTION_TABLE_iiii[$95 & 511]($92,$fill$i,$len$2$i$i)|0); //@line 1227 "/checkout/src/libcore/fmt/mod.rs"
       if ($96) {
        break L47;
       } else {
        $iter1$sroa$0$0$i = $$arith;
       }
      }
      $ret$0$in = 0;
      break L26;
     }
    }
   } while(0);
   $ret$0$in = 1;
  } else {
   $51 = (__ZN4core3fmt9Formatter21write_formatted_parts17hfee7ad6db828a2a8E($self,$formatted1)|0); //@line 1260 "/checkout/src/libcore/fmt/mod.rs"
   $ret$0$in = $51;
  }
 } while(0);
 HEAP32[$15>>2] = $16; //@line 1266 "/checkout/src/libcore/fmt/mod.rs"
 HEAP8[$17>>0] = $extract$t; //@line 1267 "/checkout/src/libcore/fmt/mod.rs"
 $_0$1$in = $ret$0$in;
 STACKTOP = sp;return ($_0$1$in|0); //@line 1273 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN4core3fmt9Formatter21write_formatted_parts17hfee7ad6db828a2a8E($self,$formatted) {
 $self = $self|0;
 $formatted = $formatted|0;
 var $$$1$i = 0, $$$i = 0, $$1$i = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $_0$0$shrunk = 0, $iter$sroa$0$038 = 0;
 var $iter1$sroa$4$035 = 0, $nzeroes$0$lcssa42 = 0, $nzeroes$037 = 0, $s = 0, $trunc = 0, $trunc$clear = 0, $trunc$i = 0, $trunc$i$clear = 0, $v$036 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $s = sp;
 $0 = ((($formatted)) + 4|0); //@line 1280 "/checkout/src/libcore/fmt/mod.rs"
 $1 = HEAP32[$0>>2]|0; //@line 1280 "/checkout/src/libcore/fmt/mod.rs"
 $2 = ($1|0)==(0); //@line 140 "/checkout/src/libcore/slice/mod.rs"
 if (!($2)) {
  $3 = HEAP32[$formatted>>2]|0; //@line 1280 "/checkout/src/libcore/fmt/mod.rs"
  $4 = ((($self)) + 24|0); //@line 1281 "/checkout/src/libcore/fmt/mod.rs"
  $5 = HEAP32[$4>>2]|0; //@line 1281 "/checkout/src/libcore/fmt/mod.rs"
  $6 = ((($self)) + 28|0); //@line 1281 "/checkout/src/libcore/fmt/mod.rs"
  $7 = HEAP32[$6>>2]|0; //@line 1281 "/checkout/src/libcore/fmt/mod.rs"
  $8 = ((($7)) + 12|0); //@line 1277 "/checkout/src/libcore/fmt/mod.rs"
  $9 = HEAP32[$8>>2]|0; //@line 1277 "/checkout/src/libcore/fmt/mod.rs"
  $10 = (FUNCTION_TABLE_iiii[$9 & 511]($5,$3,$1)|0); //@line 1277 "/checkout/src/libcore/fmt/mod.rs"
  if ($10) {
   $_0$0$shrunk = 1;
   STACKTOP = sp;return ($_0$0$shrunk|0); //@line 1311 "/checkout/src/libcore/fmt/mod.rs"
  }
 }
 $11 = ((($formatted)) + 8|0); //@line 1283 "/checkout/src/libcore/fmt/mod.rs"
 $12 = HEAP32[$11>>2]|0; //@line 1283 "/checkout/src/libcore/fmt/mod.rs"
 $13 = ((($formatted)) + 12|0); //@line 1283 "/checkout/src/libcore/fmt/mod.rs"
 $14 = HEAP32[$13>>2]|0; //@line 1283 "/checkout/src/libcore/fmt/mod.rs"
 $15 = (($12) + (($14*12)|0)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
 $16 = ($12|0)==($15|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
 if ($16) {
  $_0$0$shrunk = 0;
  STACKTOP = sp;return ($_0$0$shrunk|0); //@line 1311 "/checkout/src/libcore/fmt/mod.rs"
 }
 $17 = ((($self)) + 24|0);
 $18 = ((($self)) + 28|0);
 $iter$sroa$0$038 = $12;
 L8: while(1) {
  $19 = ((($iter$sroa$0$038)) + 12|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $20 = HEAP16[$iter$sroa$0$038>>1]|0; //@line 1285 "/checkout/src/libcore/fmt/mod.rs"
  $trunc = $20&255; //@line 1285 "/checkout/src/libcore/fmt/mod.rs"
  $trunc$clear = $trunc & 3; //@line 1285 "/checkout/src/libcore/fmt/mod.rs"
  L10: do {
   switch ($trunc$clear<<24>>24) {
   case 0:  {
    $21 = ((($iter$sroa$0$038)) + 4|0); //@line 1285 "/checkout/src/libcore/fmt/mod.rs"
    $22 = HEAP32[$21>>2]|0; //@line 1285 "/checkout/src/libcore/fmt/mod.rs"
    $23 = ($22>>>0)>(64); //@line 1288 "/checkout/src/libcore/fmt/mod.rs"
    if ($23) {
     $nzeroes$037 = $22;
     while(1) {
      $50 = HEAP32[$17>>2]|0; //@line 1289 "/checkout/src/libcore/fmt/mod.rs"
      $51 = HEAP32[$18>>2]|0; //@line 1289 "/checkout/src/libcore/fmt/mod.rs"
      $52 = ((($51)) + 12|0); //@line 1289 "/checkout/src/libcore/fmt/mod.rs"
      $53 = HEAP32[$52>>2]|0; //@line 1289 "/checkout/src/libcore/fmt/mod.rs"
      $54 = (FUNCTION_TABLE_iiii[$53 & 511]($50,25730,64)|0); //@line 1289 "/checkout/src/libcore/fmt/mod.rs"
      if ($54) {
       $_0$0$shrunk = 1;
       label = 4;
       break L8;
      }
      $55 = (($nzeroes$037) + -64)|0; //@line 1290 "/checkout/src/libcore/fmt/mod.rs"
      $56 = ($55>>>0)>(64); //@line 1288 "/checkout/src/libcore/fmt/mod.rs"
      if ($56) {
       $nzeroes$037 = $55;
      } else {
       $nzeroes$0$lcssa42 = $55;
       break;
      }
     }
    } else {
     $48 = ($22|0)==(0); //@line 1292 "/checkout/src/libcore/fmt/mod.rs"
     if ($48) {
      break L10;
     } else {
      $nzeroes$0$lcssa42 = $22;
     }
    }
    $57 = HEAP32[$18>>2]|0; //@line 1293 "/checkout/src/libcore/fmt/mod.rs"
    $58 = HEAP32[$17>>2]|0; //@line 1293 "/checkout/src/libcore/fmt/mod.rs"
    $59 = ((($57)) + 12|0); //@line 1293 "/checkout/src/libcore/fmt/mod.rs"
    $60 = HEAP32[$59>>2]|0; //@line 1293 "/checkout/src/libcore/fmt/mod.rs"
    $61 = (FUNCTION_TABLE_iiii[$60 & 511]($58,25730,$nzeroes$0$lcssa42)|0); //@line 1293 "/checkout/src/libcore/fmt/mod.rs"
    if ($61) {
     $_0$0$shrunk = 1;
     label = 4;
     break L8;
    }
    break;
   }
   case 1:  {
    $24 = ((($iter$sroa$0$038)) + 2|0); //@line 1296 "/checkout/src/libcore/fmt/mod.rs"
    $25 = HEAP16[$24>>1]|0; //@line 1296 "/checkout/src/libcore/fmt/mod.rs"
    ;HEAP8[$s>>0]=0|0;HEAP8[$s+1>>0]=0|0;HEAP8[$s+2>>0]=0|0;HEAP8[$s+3>>0]=0|0;HEAP8[$s+4>>0]=0|0; //@line 1297 "/checkout/src/libcore/fmt/mod.rs"
    $26 = HEAP16[$iter$sroa$0$038>>1]|0; //@line 188 "/checkout/src/libcore/num/flt2dec/mod.rs"
    $trunc$i = $26&255; //@line 188 "/checkout/src/libcore/num/flt2dec/mod.rs"
    $trunc$i$clear = $trunc$i & 3; //@line 188 "/checkout/src/libcore/num/flt2dec/mod.rs"
    L19: do {
     switch ($trunc$i$clear<<24>>24) {
     case 0:  {
      $$sink = 4;
      label = 15;
      break;
     }
     case 1:  {
      $27 = ((($iter$sroa$0$038)) + 2|0); //@line 189 "/checkout/src/libcore/num/flt2dec/mod.rs"
      $28 = HEAP16[$27>>1]|0; //@line 189 "/checkout/src/libcore/num/flt2dec/mod.rs"
      $29 = ($28&65535)<(1000); //@line 189 "/checkout/src/libcore/num/flt2dec/mod.rs"
      if ($29) {
       $30 = ($28&65535)<(10); //@line 189 "/checkout/src/libcore/num/flt2dec/mod.rs"
       $31 = ($28&65535)<(100); //@line 189 "/checkout/src/libcore/num/flt2dec/mod.rs"
       $$1$i = $31 ? 2 : 3; //@line 189 "/checkout/src/libcore/num/flt2dec/mod.rs"
       $$$1$i = $30 ? 1 : $$1$i; //@line 189 "/checkout/src/libcore/num/flt2dec/mod.rs"
       $38 = $$$1$i;
       label = 18;
       break L19;
      } else {
       $32 = ($28&65535)<(10000); //@line 190 "/checkout/src/libcore/num/flt2dec/mod.rs"
       $$$i = $32 ? 4 : 5; //@line 190 "/checkout/src/libcore/num/flt2dec/mod.rs"
       $38 = $$$i;
       label = 18;
       break L19;
      }
      break;
     }
     case 2:  {
      $$sink = 8;
      label = 15;
      break;
     }
     default: {
      label = 10;
      break L8;
     }
     }
    } while(0);
    if ((label|0) == 15) {
     label = 0;
     $33 = (($iter$sroa$0$038) + ($$sink)|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ($34>>>0)>(5); //@line 887 "/checkout/src/libcore/slice/mod.rs"
     if ($35) {
      label = 16;
      break L8;
     }
     $36 = ($34|0)==(0); //@line 1212 "/checkout/src/libcore/slice/mod.rs"
     if ($36) {
      $72 = 0;
     } else {
      $38 = $34;
      label = 18;
     }
    }
    if ((label|0) == 18) {
     label = 0;
     $37 = (($s) + ($38)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
     $iter1$sroa$4$035 = $37;$v$036 = $25;
     while(1) {
      $62 = ((($iter1$sroa$4$035)) + -1|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
      $63 = (($v$036&65535) % 10)&-1; //@line 1300 "/checkout/src/libcore/fmt/mod.rs"
      $64 = $63&255; //@line 1300 "/checkout/src/libcore/fmt/mod.rs"
      $65 = $64 | 48; //@line 1300 "/checkout/src/libcore/fmt/mod.rs"
      HEAP8[$62>>0] = $65; //@line 1300 "/checkout/src/libcore/fmt/mod.rs"
      $66 = (($v$036&65535) / 10)&-1; //@line 1301 "/checkout/src/libcore/fmt/mod.rs"
      $67 = ($62|0)==($s|0); //@line 1212 "/checkout/src/libcore/slice/mod.rs"
      if ($67) {
       $72 = $38;
       break;
      } else {
       $iter1$sroa$4$035 = $62;$v$036 = $66;
      }
     }
    }
    $68 = HEAP32[$17>>2]|0; //@line 1303 "/checkout/src/libcore/fmt/mod.rs"
    $69 = HEAP32[$18>>2]|0; //@line 1303 "/checkout/src/libcore/fmt/mod.rs"
    $70 = ((($69)) + 12|0); //@line 1277 "/checkout/src/libcore/fmt/mod.rs"
    $71 = HEAP32[$70>>2]|0; //@line 1277 "/checkout/src/libcore/fmt/mod.rs"
    $73 = (FUNCTION_TABLE_iiii[$71 & 511]($68,$s,$72)|0); //@line 1277 "/checkout/src/libcore/fmt/mod.rs"
    if ($73) {
     $_0$0$shrunk = 1;
     label = 4;
     break L8;
    }
    break;
   }
   case 2:  {
    $39 = ((($iter$sroa$0$038)) + 4|0); //@line 1305 "/checkout/src/libcore/fmt/mod.rs"
    $40 = HEAP32[$39>>2]|0; //@line 1305 "/checkout/src/libcore/fmt/mod.rs"
    $41 = ((($iter$sroa$0$038)) + 8|0); //@line 1305 "/checkout/src/libcore/fmt/mod.rs"
    $42 = HEAP32[$41>>2]|0; //@line 1305 "/checkout/src/libcore/fmt/mod.rs"
    $43 = HEAP32[$17>>2]|0; //@line 1306 "/checkout/src/libcore/fmt/mod.rs"
    $44 = HEAP32[$18>>2]|0; //@line 1306 "/checkout/src/libcore/fmt/mod.rs"
    $45 = ((($44)) + 12|0); //@line 1277 "/checkout/src/libcore/fmt/mod.rs"
    $46 = HEAP32[$45>>2]|0; //@line 1277 "/checkout/src/libcore/fmt/mod.rs"
    $47 = (FUNCTION_TABLE_iiii[$46 & 511]($43,$40,$42)|0); //@line 1277 "/checkout/src/libcore/fmt/mod.rs"
    if ($47) {
     $_0$0$shrunk = 1;
     label = 4;
     break L8;
    }
    break;
   }
   default: {
    label = 3;
    break L8;
   }
   }
  } while(0);
  $49 = ($19|0)==($15|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
  if ($49) {
   $_0$0$shrunk = 0;
   label = 4;
   break;
  } else {
   $iter$sroa$0$038 = $19;
  }
 }
 if ((label|0) == 3) {
  // unreachable; //@line 1311 "/checkout/src/libcore/fmt/mod.rs"
 }
 else if ((label|0) == 4) {
  STACKTOP = sp;return ($_0$0$shrunk|0); //@line 1311 "/checkout/src/libcore/fmt/mod.rs"
 }
 else if ((label|0) == 10) {
  // unreachable; //@line 193 "/checkout/src/libcore/num/flt2dec/mod.rs"
 }
 else if ((label|0) == 16) {
  __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($34,5); //@line 888 "/checkout/src/libcore/slice/mod.rs"
  // unreachable; //@line 888 "/checkout/src/libcore/slice/mod.rs"
 }
 return (0)|0;
}
function __ZN4core3fmt9Formatter9write_str17h6edbdf57936018acE($self,$data$0,$data$1) {
 $self = $self|0;
 $data$0 = $data$0|0;
 $data$1 = $data$1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($self)) + 24|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $1 = HEAP32[$0>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $2 = ((($self)) + 28|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$2>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $4 = ((($3)) + 12|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $5 = HEAP32[$4>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $6 = (FUNCTION_TABLE_iiii[$5 & 511]($1,$data$0,$data$1)|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 return ($6|0); //@line 1318 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN4core3fmt9Formatter9write_fmt17h650e8f365614dc75E($self,$fmt) {
 $self = $self|0;
 $fmt = $fmt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $_5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_5 = sp;
 $0 = ((($self)) + 24|0); //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
 $1 = HEAP32[$0>>2]|0; //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
 $2 = ((($self)) + 28|0); //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$2>>2]|0; //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
 ;HEAP32[$_5>>2]=HEAP32[$fmt>>2]|0;HEAP32[$_5+4>>2]=HEAP32[$fmt+4>>2]|0;HEAP32[$_5+8>>2]=HEAP32[$fmt+8>>2]|0;HEAP32[$_5+12>>2]=HEAP32[$fmt+12>>2]|0;HEAP32[$_5+16>>2]=HEAP32[$fmt+16>>2]|0;HEAP32[$_5+20>>2]=HEAP32[$fmt+20>>2]|0; //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
 $4 = (__ZN4core3fmt5write17h6c8dbcbe50728a23E($1,$3,$_5)|0); //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return ($4|0); //@line 1324 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN4core3fmt9Formatter9alternate17h0111877dc7b59e0eE($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self>>2]|0; //@line 1367 "/checkout/src/libcore/fmt/mod.rs"
 $1 = $0 & 4; //@line 1367 "/checkout/src/libcore/fmt/mod.rs"
 $2 = ($1|0)!=(0); //@line 1367 "/checkout/src/libcore/fmt/mod.rs"
 return ($2|0); //@line 1367 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN4core3fmt9Formatter12debug_struct17h2d24fc5dad9395cdE($0,$self,$name$0,$name$1) {
 $0 = $0|0;
 $self = $self|0;
 $name$0 = $name$0|0;
 $name$1 = $name$1|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($self)) + 24|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $2 = HEAP32[$1>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $3 = ((($self)) + 28|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $4 = HEAP32[$3>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $5 = ((($4)) + 12|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $6 = HEAP32[$5>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $7 = (FUNCTION_TABLE_iiii[$6 & 511]($2,$name$0,$name$1)|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$0>>2] = $self; //@line 96 "/checkout/src/libcore/fmt/builders.rs"
 $8 = ((($0)) + 4|0); //@line 96 "/checkout/src/libcore/fmt/builders.rs"
 $9 = $7&1; //@line 96 "/checkout/src/libcore/fmt/builders.rs"
 HEAP8[$8>>0] = $9; //@line 96 "/checkout/src/libcore/fmt/builders.rs"
 $10 = ((($0)) + 5|0); //@line 96 "/checkout/src/libcore/fmt/builders.rs"
 HEAP8[$10>>0] = 0; //@line 96 "/checkout/src/libcore/fmt/builders.rs"
 return; //@line 1406 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN4core3fmt9Formatter11debug_tuple17h5d500564198b0162E($0,$self,$name$0,$name$1) {
 $0 = $0|0;
 $self = $self|0;
 $name$0 = $name$0|0;
 $name$1 = $name$1|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($self)) + 24|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $2 = HEAP32[$1>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $3 = ((($self)) + 28|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $4 = HEAP32[$3>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $5 = ((($4)) + 12|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $6 = HEAP32[$5>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $7 = (FUNCTION_TABLE_iiii[$6 & 511]($2,$name$0,$name$1)|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $8 = ($name$1|0)==(0); //@line 2508 "/checkout/src/libcore/str/mod.rs"
 HEAP32[$0>>2] = $self; //@line 187 "/checkout/src/libcore/fmt/builders.rs"
 $9 = ((($0)) + 8|0); //@line 187 "/checkout/src/libcore/fmt/builders.rs"
 $10 = $7&1; //@line 187 "/checkout/src/libcore/fmt/builders.rs"
 HEAP8[$9>>0] = $10; //@line 187 "/checkout/src/libcore/fmt/builders.rs"
 $11 = ((($0)) + 4|0); //@line 187 "/checkout/src/libcore/fmt/builders.rs"
 HEAP32[$11>>2] = 0; //@line 187 "/checkout/src/libcore/fmt/builders.rs"
 $12 = ((($0)) + 9|0); //@line 187 "/checkout/src/libcore/fmt/builders.rs"
 $13 = $8&1; //@line 187 "/checkout/src/libcore/fmt/builders.rs"
 HEAP8[$12>>0] = $13; //@line 187 "/checkout/src/libcore/fmt/builders.rs"
 return; //@line 1433 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN4core3fmt9Formatter10debug_list17h56ec3c72e2ce18dfE($0,$self) {
 $0 = $0|0;
 $self = $self|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_4$sroa$4$0$$sroa_idx$i = 0, $_4$sroa$5$0$$sroa_idx$i = 0, $_4$sroa$65$0$$sroa_idx$i = 0, $_4$sroa$7$0$$sroa_idx$i = 0, $_5$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_5$i$i = sp;
 $1 = ((($self)) + 24|0); //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
 $2 = HEAP32[$1>>2]|0; //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
 $3 = ((($self)) + 28|0); //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
 $4 = HEAP32[$3>>2]|0; //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5$i$i>>2] = 10352; //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
 $_4$sroa$4$0$$sroa_idx$i = ((($_5$i$i)) + 4|0); //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_4$sroa$4$0$$sroa_idx$i>>2] = 1; //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
 $_4$sroa$5$0$$sroa_idx$i = ((($_5$i$i)) + 8|0); //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_4$sroa$5$0$$sroa_idx$i>>2] = 0; //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
 $_4$sroa$65$0$$sroa_idx$i = ((($_5$i$i)) + 16|0); //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_4$sroa$65$0$$sroa_idx$i>>2] = 38620; //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
 $_4$sroa$7$0$$sroa_idx$i = ((($_5$i$i)) + 20|0); //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_4$sroa$7$0$$sroa_idx$i>>2] = 0; //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
 $5 = (__ZN4core3fmt5write17h6c8dbcbe50728a23E($2,$4,$_5$i$i)|0); //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
 $6 = $5&1; //@line 390 "/checkout/src/libcore/fmt/builders.rs"
 HEAP32[$0>>2] = $self; //@line 389 "/checkout/src/libcore/fmt/builders.rs"
 $7 = ((($0)) + 4|0); //@line 389 "/checkout/src/libcore/fmt/builders.rs"
 HEAP8[$7>>0] = $6; //@line 389 "/checkout/src/libcore/fmt/builders.rs"
 $8 = ((($0)) + 5|0); //@line 389 "/checkout/src/libcore/fmt/builders.rs"
 HEAP8[$8>>0] = 0; //@line 389 "/checkout/src/libcore/fmt/builders.rs"
 STACKTOP = sp;return; //@line 1457 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN71__LT_core__fmt__Formatter_LT__u27_a_GT__u20_as_u20_core__fmt__Write_GT_10write_char17hc5577ad36874d504E($self,$c) {
 $self = $self|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($self)) + 24|0); //@line 1515 "/checkout/src/libcore/fmt/mod.rs"
 $1 = HEAP32[$0>>2]|0; //@line 1515 "/checkout/src/libcore/fmt/mod.rs"
 $2 = ((($self)) + 28|0); //@line 1515 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$2>>2]|0; //@line 1515 "/checkout/src/libcore/fmt/mod.rs"
 $4 = ((($3)) + 16|0); //@line 1515 "/checkout/src/libcore/fmt/mod.rs"
 $5 = HEAP32[$4>>2]|0; //@line 1515 "/checkout/src/libcore/fmt/mod.rs"
 $6 = (FUNCTION_TABLE_iii[$5 & 511]($1,$c)|0); //@line 1515 "/checkout/src/libcore/fmt/mod.rs"
 return ($6|0); //@line 1516 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN40__LT_str_u20_as_u20_core__fmt__Debug_GT_3fmt17h05cf80b836a24333E($self$0,$self$1,$f) {
 $self$0 = $self$0|0;
 $self$1 = $self$1|0;
 $f = $f|0;
 var $$$$$i = 0, $$$$i = 0, $$$i = 0, $$ph111 = 0, $$ph124 = 0, $$pn = 0, $$pre$i$i$i = 0, $$pre$phi$i$i$iZ2D = 0, $$pre$phiZ2D = 0, $$sink1$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $_0$0$i$i119 = 0, $_0$0$i10$i$i$i = 0, $_0$0$i10$i$i$i14 = 0, $_0$0$i16$i$i$i = 0, $_0$0$i16$i$i$i9 = 0, $_0$0$i5$i$i$i = 0, $_0$0$i5$i$i$i19 = 0, $_0$0$off0 = 0, $_23$sroa$0$1 = 0, $_3$0$i$i$i$i = 0, $from$0$lcssa115 = 0, $from$0$lcssa116 = 0, $from$040 = 0, $from$1 = 0, $init_state$sroa$0$0$i = 0, $init_state$sroa$9$0$i = 0, $iter$sroa$0$1 = 0;
 var $iter$sroa$8$0 = 0, $iter$sroa$8$1 = 0, $iter$sroa$8$2 = 0, $iter$sroa$8$3$ph = 0, $iter$sroa$8$5 = 0, $iter$sroa$8$6 = 0, $iter$sroa$8$7 = 0, $iter$sroa$8$8 = 0, $iter$sroa$8$9$ph = 0, $iter1$sroa$0$0 = 0, $iter1$sroa$0$1117 = 0, $or$cond$i$i$i$i = 0, $or$cond$i$i$i$i18 = 0, $or$cond$i1$i$i$i = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i7 = 0, $phitmp21$i$i$i = 0, $phitmp21$i$i$i12 = 0, $phitmp22$i$i$i = 0, $phitmp22$i$i$i17 = 0;
 var $trunc = 0, $trunc$clear = 0, $trunc$i$i = 0, $trunc$i$i$clear = 0, $trunc$i$i$i$clear = 0, $trunc$i$i$i$i$clear = 0, $trunc$i$i$i30 = 0, $trunc$i$i$i30$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 24|0); //@line 1515 "/checkout/src/libcore/fmt/mod.rs"
 $1 = HEAP32[$0>>2]|0; //@line 1515 "/checkout/src/libcore/fmt/mod.rs"
 $2 = ((($f)) + 28|0); //@line 1515 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$2>>2]|0; //@line 1515 "/checkout/src/libcore/fmt/mod.rs"
 $4 = ((($3)) + 16|0); //@line 1515 "/checkout/src/libcore/fmt/mod.rs"
 $5 = HEAP32[$4>>2]|0; //@line 1515 "/checkout/src/libcore/fmt/mod.rs"
 $6 = (FUNCTION_TABLE_iii[$5 & 511]($1,34)|0); //@line 1515 "/checkout/src/libcore/fmt/mod.rs"
 if ($6) {
  $_0$0$off0 = 1;
  return ($_0$0$off0|0); //@line 1595 "/checkout/src/libcore/fmt/mod.rs"
 }
 $7 = (($self$0) + ($self$1)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
 $8 = $7; //@line 1582 "/checkout/src/libcore/fmt/mod.rs"
 $9 = ($self$1|0)==(0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
 do {
  if ($9) {
   $from$0$lcssa115 = 0;
   label = 17;
  } else {
   $10 = ((($self$0)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
   $11 = $10; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
   $12 = HEAP8[$self$0>>0]|0; //@line 497 "/checkout/src/libcore/str/mod.rs"
   $13 = ($12<<24>>24)>(-1); //@line 498 "/checkout/src/libcore/str/mod.rs"
   if ($13) {
    $14 = $12&255; //@line 499 "/checkout/src/libcore/str/mod.rs"
    $$ph111 = $14;$iter$sroa$8$3$ph = $11;
   } else {
    $15 = $12 & 31; //@line 472 "/checkout/src/libcore/str/mod.rs"
    $16 = $15&255; //@line 472 "/checkout/src/libcore/str/mod.rs"
    $17 = ($self$1|0)==(1); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
    if ($17) {
     $26 = $7;$_0$0$i16$i$i$i9 = 0;$iter$sroa$8$0 = $11;
    } else {
     $18 = ((($self$0)) + 2|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $19 = $18; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
     $20 = HEAP8[$10>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
     $phitmp$i$i$i7 = $20 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
     $26 = $18;$_0$0$i16$i$i$i9 = $phitmp$i$i$i7;$iter$sroa$8$0 = $19;
    }
    $21 = $16 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
    $22 = $_0$0$i16$i$i$i9&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
    $23 = $22 | $21; //@line 476 "/checkout/src/libcore/str/mod.rs"
    $24 = ($12&255)>(223); //@line 508 "/checkout/src/libcore/str/mod.rs"
    if ($24) {
     $25 = ($26|0)==($7|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
     if ($25) {
      $37 = $7;$_0$0$i10$i$i$i14 = 0;$iter$sroa$8$1 = $iter$sroa$8$0;
     } else {
      $27 = ((($26)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
      $28 = $27; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
      $29 = HEAP8[$26>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
      $phitmp21$i$i$i12 = $29 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
      $37 = $27;$_0$0$i10$i$i$i14 = $phitmp21$i$i$i12;$iter$sroa$8$1 = $28;
     }
     $30 = $22 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
     $31 = $_0$0$i10$i$i$i14&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
     $32 = $31 | $30; //@line 476 "/checkout/src/libcore/str/mod.rs"
     $33 = $16 << 12; //@line 513 "/checkout/src/libcore/str/mod.rs"
     $34 = $32 | $33; //@line 513 "/checkout/src/libcore/str/mod.rs"
     $35 = ($12&255)>(239); //@line 514 "/checkout/src/libcore/str/mod.rs"
     if ($35) {
      $36 = ($37|0)==($7|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
      if ($36) {
       $_0$0$i5$i$i$i19 = 0;$iter$sroa$8$2 = $iter$sroa$8$1;
      } else {
       $38 = ((($37)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
       $39 = $38; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
       $40 = HEAP8[$37>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
       $phitmp22$i$i$i17 = $40 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
       $_0$0$i5$i$i$i19 = $phitmp22$i$i$i17;$iter$sroa$8$2 = $39;
      }
      $41 = $16 << 18; //@line 518 "/checkout/src/libcore/str/mod.rs"
      $42 = $41 & 1835008; //@line 518 "/checkout/src/libcore/str/mod.rs"
      $43 = $32 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
      $44 = $_0$0$i5$i$i$i19&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
      $45 = $43 | $42; //@line 476 "/checkout/src/libcore/str/mod.rs"
      $46 = $45 | $44; //@line 518 "/checkout/src/libcore/str/mod.rs"
      $47 = ($46|0)==(1114112); //@line 664 "/checkout/src/libcore/str/mod.rs"
      if ($47) {
       $from$0$lcssa115 = 0;
       label = 17;
       break;
      } else {
       $$ph111 = $46;$iter$sroa$8$3$ph = $iter$sroa$8$2;
      }
     } else {
      $$ph111 = $34;$iter$sroa$8$3$ph = $iter$sroa$8$1;
     }
    } else {
     $$ph111 = $23;$iter$sroa$8$3$ph = $iter$sroa$8$0;
    }
   }
   $48 = (($iter$sroa$8$3$ph) + ($self$1))|0; //@line 668 "/checkout/src/libcore/str/mod.rs"
   $$pn = $48;$_23$sroa$0$1 = 0;$from$040 = 0;$iter$sroa$8$5 = $iter$sroa$8$3$ph;$trunc = $$ph111;
   L21: while(1) {
    $iter$sroa$0$1 = (($$pn) - ($8))|0; //@line 668 "/checkout/src/libcore/str/mod.rs"
    $trunc$clear = $trunc & 2097151; //@line 450 "/checkout/src/libcore/char.rs"
    switch ($trunc$clear|0) {
    case 9:  {
     $67 = 0;$69 = 0;$init_state$sroa$0$0$i = 2;$init_state$sroa$9$0$i = 116;
     break;
    }
    case 13:  {
     $67 = 0;$69 = 0;$init_state$sroa$0$0$i = 2;$init_state$sroa$9$0$i = 114;
     break;
    }
    case 10:  {
     $67 = 0;$69 = 0;$init_state$sroa$0$0$i = 2;$init_state$sroa$9$0$i = 110;
     break;
    }
    case 34: case 39: case 92:  {
     $67 = 0;$69 = 0;$init_state$sroa$0$0$i = 2;$init_state$sroa$9$0$i = $trunc;
     break;
    }
    default: {
     $65 = (__ZN4core12char_private12is_printable17h984811d8dbf8afa6E($trunc)|0); //@line 454 "/checkout/src/libcore/char.rs"
     if ($65) {
      $67 = 0;$69 = 0;$init_state$sroa$0$0$i = 1;$init_state$sroa$9$0$i = $trunc;
     } else {
      $61 = $trunc | 1; //@line 423 "/checkout/src/libcore/char.rs"
      $62 = (Math_clz32(($61|0))|0); //@line 1381 "/checkout/src/libcore/num/mod.rs"
      $63 = $62 >>> 2; //@line 426 "/checkout/src/libcore/char.rs"
      $64 = $63 ^ 7; //@line 426 "/checkout/src/libcore/char.rs"
      $67 = 5;$69 = $64;$init_state$sroa$0$0$i = 3;$init_state$sroa$9$0$i = $trunc;
     }
    }
    }
    $trunc$i$i$i30 = $init_state$sroa$0$0$i&255; //@line 751 "/checkout/src/libcore/char.rs"
    $trunc$i$i$i30$clear = $trunc$i$i$i30 & 3; //@line 751 "/checkout/src/libcore/char.rs"
    switch ($trunc$i$i$i30$clear<<24>>24) {
    case 2: case 0:  {
     label = 38;
     break;
    }
    case 1:  {
     $from$1 = $from$040;
     break;
    }
    case 3:  {
     $66 = $67&255; //@line 636 "/checkout/src/libcore/char.rs"
     $trunc$i$i$i$i$clear = $66 & 7; //@line 636 "/checkout/src/libcore/char.rs"
     switch ($trunc$i$i$i$i$clear<<24>>24) {
     case 0:  {
      $_3$0$i$i$i$i = 0;
      break;
     }
     case 1:  {
      $_3$0$i$i$i$i = 1;
      break;
     }
     case 2:  {
      $_3$0$i$i$i$i = 2;
      break;
     }
     case 3:  {
      $_3$0$i$i$i$i = 3;
      break;
     }
     case 4:  {
      $_3$0$i$i$i$i = 4;
      break;
     }
     case 5:  {
      $_3$0$i$i$i$i = 5;
      break;
     }
     default: {
      label = 36;
      break L21;
     }
     }
     $68 = (($_3$0$i$i$i$i) + ($69))|0; //@line 635 "/checkout/src/libcore/char.rs"
     $70 = ($68|0)==(1); //@line 1585 "/checkout/src/libcore/fmt/mod.rs"
     if ($70) {
      $from$1 = $from$040;
     } else {
      label = 38;
     }
     break;
    }
    default: {
     label = 29;
     break L21;
    }
    }
    if ((label|0) == 38) {
     label = 0;
     $71 = ($_23$sroa$0$1>>>0)<($from$040>>>0); //@line 1859 "/checkout/src/libcore/str/mod.rs"
     if ($71) {
      label = 45;
      break;
     }
     $78 = ($from$040|0)==(0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
     $79 = ($from$040|0)==($self$1|0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
     $or$cond$i1$i$i$i = $78 | $79; //@line 2438 "/checkout/src/libcore/str/mod.rs"
     if (!($or$cond$i1$i$i$i)) {
      $80 = ($from$040>>>0)<($self$1>>>0); //@line 792 "/checkout/src/libcore/slice/mod.rs"
      if (!($80)) {
       label = 45;
       break;
      }
      $81 = (($self$0) + ($from$040)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
      $82 = HEAP8[$81>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
      $83 = ($82<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
      if (!($83)) {
       label = 45;
       break;
      }
     }
     $72 = ($_23$sroa$0$1|0)==(0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
     $73 = ($_23$sroa$0$1|0)==($self$1|0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
     $or$cond$i$i$i$i18 = $72 | $73; //@line 2438 "/checkout/src/libcore/str/mod.rs"
     if (!($or$cond$i$i$i$i18)) {
      $74 = ($_23$sroa$0$1>>>0)<($self$1>>>0); //@line 792 "/checkout/src/libcore/slice/mod.rs"
      if (!($74)) {
       label = 45;
       break;
      }
      $75 = (($self$0) + ($_23$sroa$0$1)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
      $76 = HEAP8[$75>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
      $77 = ($76<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
      if (!($77)) {
       label = 45;
       break;
      }
     }
     $84 = (($self$0) + ($from$040)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $85 = (($_23$sroa$0$1) - ($from$040))|0; //@line 1880 "/checkout/src/libcore/str/mod.rs"
     $86 = HEAP32[$0>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
     $87 = HEAP32[$2>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
     $88 = ((($87)) + 12|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
     $89 = HEAP32[$88>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
     $90 = (FUNCTION_TABLE_iiii[$89 & 511]($86,$84,$85)|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
     if ($90) {
      $_0$0$off0 = 1;
      label = 15;
      break;
     }
     $91 = ($init_state$sroa$9$0$i|0)==(1114112);
     $101 = $69;$93 = $67;$iter1$sroa$0$0 = $init_state$sroa$0$0$i;
     L51: while(1) {
      $trunc$i$i = $iter1$sroa$0$0&255; //@line 686 "/checkout/src/libcore/char.rs"
      $trunc$i$i$clear = $trunc$i$i & 3; //@line 686 "/checkout/src/libcore/char.rs"
      L53: do {
       switch ($trunc$i$i$clear<<24>>24) {
       case 0:  {
        break L51;
        break;
       }
       case 1:  {
        if ($91) {
         break L51;
        } else {
         $171 = $101;$172 = $93;$_0$0$i$i119 = $init_state$sroa$9$0$i;$iter1$sroa$0$1117 = 0;
        }
        break;
       }
       case 2:  {
        $171 = $101;$172 = $93;$_0$0$i$i119 = 92;$iter1$sroa$0$1117 = 1;
        break;
       }
       case 3:  {
        $92 = $93&255; //@line 576 "/checkout/src/libcore/char.rs"
        $trunc$i$i$i$clear = $92 & 7; //@line 576 "/checkout/src/libcore/char.rs"
        switch ($trunc$i$i$i$clear<<24>>24) {
        case 0:  {
         break L51;
         break;
        }
        case 1:  {
         $109 = $93 & -256; //@line 599 "/checkout/src/libcore/char.rs"
         $171 = $101;$172 = $109;$_0$0$i$i119 = 125;$iter1$sroa$0$1117 = $iter1$sroa$0$0;
         break L53;
         break;
        }
        case 2:  {
         $100 = $101 << 2; //@line 589 "/checkout/src/libcore/char.rs"
         $102 = $100 & 28; //@line 589 "/checkout/src/libcore/char.rs"
         $103 = $init_state$sroa$9$0$i >>> $102; //@line 589 "/checkout/src/libcore/char.rs"
         $104 = $103 & 15; //@line 589 "/checkout/src/libcore/char.rs"
         $105 = $104&255; //@line 355 "/checkout/src/libcore/char.rs"
         $106 = ($105&255)<(10); //@line 356 "/checkout/src/libcore/char.rs"
         $$sink1$i$i$i = $106 ? 48 : 87; //@line 356 "/checkout/src/libcore/char.rs"
         $107 = (($$sink1$i$i$i) + ($104))|0;
         $108 = ($101|0)==(0); //@line 591 "/checkout/src/libcore/char.rs"
         if ($108) {
          $110 = $93 & -256; //@line 592 "/checkout/src/libcore/char.rs"
          $111 = $110 | 1; //@line 592 "/checkout/src/libcore/char.rs"
          $171 = $101;$172 = $111;$_0$0$i$i119 = $107;$iter1$sroa$0$1117 = $iter1$sroa$0$0;
          break L53;
         } else {
          $112 = (($101) + -1)|0; //@line 594 "/checkout/src/libcore/char.rs"
          $171 = $112;$172 = $93;$_0$0$i$i119 = $107;$iter1$sroa$0$1117 = $iter1$sroa$0$0;
          break L53;
         }
         break;
        }
        case 3:  {
         $98 = $93 & -256; //@line 585 "/checkout/src/libcore/char.rs"
         $99 = $98 | 2; //@line 585 "/checkout/src/libcore/char.rs"
         $171 = $101;$172 = $99;$_0$0$i$i119 = 123;$iter1$sroa$0$1117 = $iter1$sroa$0$0;
         break L53;
         break;
        }
        case 4:  {
         $96 = $93 & -256; //@line 581 "/checkout/src/libcore/char.rs"
         $97 = $96 | 3; //@line 581 "/checkout/src/libcore/char.rs"
         $171 = $101;$172 = $97;$_0$0$i$i119 = 117;$iter1$sroa$0$1117 = $iter1$sroa$0$0;
         break L53;
         break;
        }
        case 5:  {
         $94 = $93 & -256; //@line 577 "/checkout/src/libcore/char.rs"
         $95 = $94 | 4; //@line 577 "/checkout/src/libcore/char.rs"
         $171 = $101;$172 = $95;$_0$0$i$i119 = 92;$iter1$sroa$0$1117 = $iter1$sroa$0$0;
         break L53;
         break;
        }
        default: {
         label = 56;
         break L21;
        }
        }
        break;
       }
       default: {
        label = 49;
        break L21;
       }
       }
      } while(0);
      $117 = HEAP32[$0>>2]|0; //@line 1515 "/checkout/src/libcore/fmt/mod.rs"
      $118 = HEAP32[$2>>2]|0; //@line 1515 "/checkout/src/libcore/fmt/mod.rs"
      $119 = ((($118)) + 16|0); //@line 1515 "/checkout/src/libcore/fmt/mod.rs"
      $120 = HEAP32[$119>>2]|0; //@line 1515 "/checkout/src/libcore/fmt/mod.rs"
      $121 = (FUNCTION_TABLE_iii[$120 & 511]($117,$_0$0$i$i119)|0); //@line 1515 "/checkout/src/libcore/fmt/mod.rs"
      if ($121) {
       $_0$0$off0 = 1;
       label = 15;
       break L21;
      } else {
       $101 = $171;$93 = $172;$iter1$sroa$0$0 = $iter1$sroa$0$1117;
      }
     }
     $113 = ($trunc>>>0)<(128); //@line 463 "/checkout/src/libcore/char.rs"
     $114 = ($trunc>>>0)<(2048); //@line 465 "/checkout/src/libcore/char.rs"
     $115 = ($trunc>>>0)<(65536); //@line 467 "/checkout/src/libcore/char.rs"
     $$$i = $115 ? 3 : 4; //@line 467 "/checkout/src/libcore/char.rs"
     $$$$i = $114 ? 2 : $$$i; //@line 465 "/checkout/src/libcore/char.rs"
     $$$$$i = $113 ? 1 : $$$$i; //@line 463 "/checkout/src/libcore/char.rs"
     $116 = (($$$$$i) + ($_23$sroa$0$1))|0; //@line 1590 "/checkout/src/libcore/fmt/mod.rs"
     $from$1 = $116;
    }
    $122 = $iter$sroa$8$5; //@line 1135 "/checkout/src/libcore/slice/mod.rs"
    $123 = ($122|0)==($7|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
    if ($123) {
     label = 16;
     break;
    }
    $124 = ((($122)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
    $125 = $124; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
    $126 = ($iter$sroa$8$5|0)==(0); //@line 497 "/checkout/src/libcore/str/mod.rs"
    if ($126) {
     label = 16;
     break;
    }
    $127 = HEAP8[$122>>0]|0; //@line 497 "/checkout/src/libcore/str/mod.rs"
    $128 = ($127<<24>>24)>(-1); //@line 498 "/checkout/src/libcore/str/mod.rs"
    if ($128) {
     $129 = $127&255; //@line 499 "/checkout/src/libcore/str/mod.rs"
     $$ph124 = $129;$iter$sroa$8$9$ph = $125;
    } else {
     $130 = $127 & 31; //@line 472 "/checkout/src/libcore/str/mod.rs"
     $131 = $130&255; //@line 472 "/checkout/src/libcore/str/mod.rs"
     $132 = ($124|0)==($7|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
     if ($132) {
      $141 = $7;$_0$0$i16$i$i$i = 0;$iter$sroa$8$6 = $125;
     } else {
      $133 = ((($122)) + 2|0); //@line 623 "/checkout/src/libcore/ptr.rs"
      $134 = $133; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
      $135 = HEAP8[$124>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
      $phitmp$i$i$i = $135 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
      $141 = $133;$_0$0$i16$i$i$i = $phitmp$i$i$i;$iter$sroa$8$6 = $134;
     }
     $136 = $131 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
     $137 = $_0$0$i16$i$i$i&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
     $138 = $137 | $136; //@line 476 "/checkout/src/libcore/str/mod.rs"
     $139 = ($127&255)>(223); //@line 508 "/checkout/src/libcore/str/mod.rs"
     if ($139) {
      $140 = ($141|0)==($7|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
      if ($140) {
       $152 = $7;$_0$0$i10$i$i$i = 0;$iter$sroa$8$7 = $iter$sroa$8$6;
      } else {
       $142 = ((($141)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
       $143 = $142; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
       $144 = HEAP8[$141>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
       $phitmp21$i$i$i = $144 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
       $152 = $142;$_0$0$i10$i$i$i = $phitmp21$i$i$i;$iter$sroa$8$7 = $143;
      }
      $145 = $137 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
      $146 = $_0$0$i10$i$i$i&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
      $147 = $146 | $145; //@line 476 "/checkout/src/libcore/str/mod.rs"
      $148 = $131 << 12; //@line 513 "/checkout/src/libcore/str/mod.rs"
      $149 = $147 | $148; //@line 513 "/checkout/src/libcore/str/mod.rs"
      $150 = ($127&255)>(239); //@line 514 "/checkout/src/libcore/str/mod.rs"
      if ($150) {
       $151 = ($152|0)==($7|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
       if ($151) {
        $_0$0$i5$i$i$i = 0;$iter$sroa$8$8 = $iter$sroa$8$7;
       } else {
        $153 = ((($152)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
        $154 = $153; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
        $155 = HEAP8[$152>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
        $phitmp22$i$i$i = $155 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
        $_0$0$i5$i$i$i = $phitmp22$i$i$i;$iter$sroa$8$8 = $154;
       }
       $156 = $131 << 18; //@line 518 "/checkout/src/libcore/str/mod.rs"
       $157 = $156 & 1835008; //@line 518 "/checkout/src/libcore/str/mod.rs"
       $158 = $147 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
       $159 = $_0$0$i5$i$i$i&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
       $160 = $158 | $157; //@line 476 "/checkout/src/libcore/str/mod.rs"
       $161 = $160 | $159; //@line 518 "/checkout/src/libcore/str/mod.rs"
       $162 = ($161|0)==(1114112); //@line 664 "/checkout/src/libcore/str/mod.rs"
       if ($162) {
        label = 16;
        break;
       } else {
        $$ph124 = $161;$iter$sroa$8$9$ph = $iter$sroa$8$8;
       }
      } else {
       $$ph124 = $149;$iter$sroa$8$9$ph = $iter$sroa$8$7;
      }
     } else {
      $$ph124 = $138;$iter$sroa$8$9$ph = $iter$sroa$8$6;
     }
    }
    $163 = (($8) - ($iter$sroa$8$5))|0; //@line 668 "/checkout/src/libcore/str/mod.rs"
    $164 = (($163) + ($iter$sroa$0$1))|0; //@line 664 "/checkout/src/libcore/num/mod.rs"
    $165 = (($164) + ($iter$sroa$8$9$ph))|0; //@line 668 "/checkout/src/libcore/str/mod.rs"
    $$pn = $165;$_23$sroa$0$1 = $iter$sroa$0$1;$from$040 = $from$1;$iter$sroa$8$5 = $iter$sroa$8$9$ph;$trunc = $$ph124;
   }
   if ((label|0) == 15) {
    return ($_0$0$off0|0); //@line 1595 "/checkout/src/libcore/fmt/mod.rs"
   }
   else if ((label|0) == 16) {
    $49 = ($from$1|0)==(0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
    $50 = ($from$1|0)==($self$1|0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
    $or$cond$i$i$i$i = $49 | $50; //@line 2438 "/checkout/src/libcore/str/mod.rs"
    if ($or$cond$i$i$i$i) {
     $from$0$lcssa115 = $from$1;
     label = 17;
     break;
    }
    $51 = ($from$1>>>0)<($self$1>>>0); //@line 792 "/checkout/src/libcore/slice/mod.rs"
    if (!($51)) {
     __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($self$0,$self$1,$from$1,$self$1); //@line 1987 "/checkout/src/libcore/str/mod.rs"
     // unreachable; //@line 1987 "/checkout/src/libcore/str/mod.rs"
    }
    $52 = (($self$0) + ($from$1)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
    $53 = HEAP8[$52>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
    $54 = ($53<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
    if ($54) {
     $$pre$phi$i$i$iZ2D = $52;$$pre$phiZ2D = $2;$from$0$lcssa116 = $from$1;
     break;
    }
    __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($self$0,$self$1,$from$1,$self$1); //@line 1987 "/checkout/src/libcore/str/mod.rs"
    // unreachable; //@line 1987 "/checkout/src/libcore/str/mod.rs"
   }
   else if ((label|0) == 29) {
    // unreachable; //@line 756 "/checkout/src/libcore/char.rs"
   }
   else if ((label|0) == 36) {
    // unreachable; //@line 643 "/checkout/src/libcore/char.rs"
   }
   else if ((label|0) == 45) {
    __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($self$0,$self$1,$from$040,$_23$sroa$0$1); //@line 1892 "/checkout/src/libcore/str/mod.rs"
    // unreachable; //@line 1892 "/checkout/src/libcore/str/mod.rs"
   }
   else if ((label|0) == 49) {
    // unreachable; //@line 697 "/checkout/src/libcore/char.rs"
   }
   else if ((label|0) == 56) {
    // unreachable; //@line 604 "/checkout/src/libcore/char.rs"
   }
  }
 } while(0);
 if ((label|0) == 17) {
  $$pre$i$i$i = (($self$0) + ($from$0$lcssa115)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $$pre$phi$i$i$iZ2D = $$pre$i$i$i;$$pre$phiZ2D = $2;$from$0$lcssa116 = $from$0$lcssa115;
 }
 $55 = (($self$1) - ($from$0$lcssa116))|0; //@line 1975 "/checkout/src/libcore/str/mod.rs"
 $56 = HEAP32[$0>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $57 = HEAP32[$$pre$phiZ2D>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $58 = ((($57)) + 12|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $59 = HEAP32[$58>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $60 = (FUNCTION_TABLE_iiii[$59 & 511]($56,$$pre$phi$i$i$iZ2D,$55)|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 if ($60) {
  $_0$0$off0 = 1;
  return ($_0$0$off0|0); //@line 1595 "/checkout/src/libcore/fmt/mod.rs"
 }
 $166 = HEAP32[$0>>2]|0; //@line 1515 "/checkout/src/libcore/fmt/mod.rs"
 $167 = HEAP32[$2>>2]|0; //@line 1515 "/checkout/src/libcore/fmt/mod.rs"
 $168 = ((($167)) + 16|0); //@line 1515 "/checkout/src/libcore/fmt/mod.rs"
 $169 = HEAP32[$168>>2]|0; //@line 1515 "/checkout/src/libcore/fmt/mod.rs"
 $170 = (FUNCTION_TABLE_iii[$169 & 511]($166,34)|0); //@line 1515 "/checkout/src/libcore/fmt/mod.rs"
 $_0$0$off0 = $170;
 return ($_0$0$off0|0); //@line 1595 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN42__LT_str_u20_as_u20_core__fmt__Display_GT_3fmt17hd64e49219890df95E($self$0,$self$1,$f) {
 $self$0 = $self$0|0;
 $self$1 = $self$1|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN4core3fmt9Formatter3pad17he7dfc3104845bdf3E($f,$self$0,$self$1)|0); //@line 1601 "/checkout/src/libcore/fmt/mod.rs"
 return ($0|0); //@line 1602 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN41__LT_char_u20_as_u20_core__fmt__Debug_GT_3fmt17h18e7ecc08f627b6cE($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $$sink1$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$i$i$ph = 0, $_0$0$in = 0, $init_state$sroa$0$0$i = 0, $init_state$sroa$9$0$i = 0, $iter$sroa$0$0 = 0, $iter$sroa$0$1$ph = 0, $trunc = 0, $trunc$clear = 0, $trunc$i$i = 0, $trunc$i$i$clear = 0, $trunc$i$i$i$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 24|0); //@line 1515 "/checkout/src/libcore/fmt/mod.rs"
 $1 = HEAP32[$0>>2]|0; //@line 1515 "/checkout/src/libcore/fmt/mod.rs"
 $2 = ((($f)) + 28|0); //@line 1515 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$2>>2]|0; //@line 1515 "/checkout/src/libcore/fmt/mod.rs"
 $4 = ((($3)) + 16|0); //@line 1515 "/checkout/src/libcore/fmt/mod.rs"
 $5 = HEAP32[$4>>2]|0; //@line 1515 "/checkout/src/libcore/fmt/mod.rs"
 $6 = (FUNCTION_TABLE_iii[$5 & 511]($1,39)|0); //@line 1515 "/checkout/src/libcore/fmt/mod.rs"
 if ($6) {
  $_0$0$in = 1;
  return ($_0$0$in|0); //@line 1613 "/checkout/src/libcore/fmt/mod.rs"
 }
 $trunc = HEAP32[$self>>2]|0; //@line 1609 "/checkout/src/libcore/fmt/mod.rs"
 $trunc$clear = $trunc & 2097151; //@line 450 "/checkout/src/libcore/char.rs"
 switch ($trunc$clear|0) {
 case 9:  {
  $43 = 0;$44 = 0;$init_state$sroa$0$0$i = 2;$init_state$sroa$9$0$i = 116;
  break;
 }
 case 13:  {
  $43 = 0;$44 = 0;$init_state$sroa$0$0$i = 2;$init_state$sroa$9$0$i = 114;
  break;
 }
 case 10:  {
  $43 = 0;$44 = 0;$init_state$sroa$0$0$i = 2;$init_state$sroa$9$0$i = 110;
  break;
 }
 case 34: case 39: case 92:  {
  $43 = 0;$44 = 0;$init_state$sroa$0$0$i = 2;$init_state$sroa$9$0$i = $trunc;
  break;
 }
 default: {
  $11 = (__ZN4core12char_private12is_printable17h984811d8dbf8afa6E($trunc)|0); //@line 454 "/checkout/src/libcore/char.rs"
  if ($11) {
   $43 = 0;$44 = 0;$init_state$sroa$0$0$i = 1;$init_state$sroa$9$0$i = $trunc;
  } else {
   $7 = $trunc | 1; //@line 423 "/checkout/src/libcore/char.rs"
   $8 = (Math_clz32(($7|0))|0); //@line 1381 "/checkout/src/libcore/num/mod.rs"
   $9 = $8 >>> 2; //@line 426 "/checkout/src/libcore/char.rs"
   $10 = $9 ^ 7; //@line 426 "/checkout/src/libcore/char.rs"
   $43 = $10;$44 = 5;$init_state$sroa$0$0$i = 3;$init_state$sroa$9$0$i = $trunc;
  }
 }
 }
 $13 = $44;$21 = $43;$iter$sroa$0$0 = $init_state$sroa$0$0$i;
 L11: while(1) {
  $trunc$i$i = $iter$sroa$0$0&255; //@line 686 "/checkout/src/libcore/char.rs"
  $trunc$i$i$clear = $trunc$i$i & 3; //@line 686 "/checkout/src/libcore/char.rs"
  L13: do {
   switch ($trunc$i$i$clear<<24>>24) {
   case 0:  {
    label = 22;
    break L11;
    break;
   }
   case 1:  {
    $45 = $21;$46 = $13;$_0$0$i$i$ph = $init_state$sroa$9$0$i;$iter$sroa$0$1$ph = 0;
    break;
   }
   case 2:  {
    $45 = $21;$46 = $13;$_0$0$i$i$ph = 92;$iter$sroa$0$1$ph = 1;
    break;
   }
   case 3:  {
    $12 = $13&255; //@line 576 "/checkout/src/libcore/char.rs"
    $trunc$i$i$i$clear = $12 & 7; //@line 576 "/checkout/src/libcore/char.rs"
    switch ($trunc$i$i$i$clear<<24>>24) {
    case 0:  {
     label = 22;
     break L11;
     break;
    }
    case 1:  {
     $29 = $13 & -256; //@line 599 "/checkout/src/libcore/char.rs"
     $45 = $21;$46 = $29;$_0$0$i$i$ph = 125;$iter$sroa$0$1$ph = $iter$sroa$0$0;
     break L13;
     break;
    }
    case 2:  {
     $20 = $21 << 2; //@line 589 "/checkout/src/libcore/char.rs"
     $22 = $20 & 28; //@line 589 "/checkout/src/libcore/char.rs"
     $23 = $init_state$sroa$9$0$i >>> $22; //@line 589 "/checkout/src/libcore/char.rs"
     $24 = $23 & 15; //@line 589 "/checkout/src/libcore/char.rs"
     $25 = $24&255; //@line 355 "/checkout/src/libcore/char.rs"
     $26 = ($25&255)<(10); //@line 356 "/checkout/src/libcore/char.rs"
     $$sink1$i$i$i = $26 ? 48 : 87; //@line 356 "/checkout/src/libcore/char.rs"
     $27 = (($$sink1$i$i$i) + ($24))|0;
     $28 = ($21|0)==(0); //@line 591 "/checkout/src/libcore/char.rs"
     if ($28) {
      $30 = $13 & -256; //@line 592 "/checkout/src/libcore/char.rs"
      $31 = $30 | 1; //@line 592 "/checkout/src/libcore/char.rs"
      $45 = $21;$46 = $31;$_0$0$i$i$ph = $27;$iter$sroa$0$1$ph = $iter$sroa$0$0;
      break L13;
     } else {
      $32 = (($21) + -1)|0; //@line 594 "/checkout/src/libcore/char.rs"
      $45 = $32;$46 = $13;$_0$0$i$i$ph = $27;$iter$sroa$0$1$ph = $iter$sroa$0$0;
      break L13;
     }
     break;
    }
    case 3:  {
     $18 = $13 & -256; //@line 585 "/checkout/src/libcore/char.rs"
     $19 = $18 | 2; //@line 585 "/checkout/src/libcore/char.rs"
     $45 = $21;$46 = $19;$_0$0$i$i$ph = 123;$iter$sroa$0$1$ph = $iter$sroa$0$0;
     break L13;
     break;
    }
    case 4:  {
     $16 = $13 & -256; //@line 581 "/checkout/src/libcore/char.rs"
     $17 = $16 | 3; //@line 581 "/checkout/src/libcore/char.rs"
     $45 = $21;$46 = $17;$_0$0$i$i$ph = 117;$iter$sroa$0$1$ph = $iter$sroa$0$0;
     break L13;
     break;
    }
    case 5:  {
     $14 = $13 & -256; //@line 577 "/checkout/src/libcore/char.rs"
     $15 = $14 | 4; //@line 577 "/checkout/src/libcore/char.rs"
     $45 = $21;$46 = $15;$_0$0$i$i$ph = 92;$iter$sroa$0$1$ph = $iter$sroa$0$0;
     break L13;
     break;
    }
    default: {
     label = 19;
     break L11;
    }
    }
    break;
   }
   default: {
    label = 11;
    break L11;
   }
   }
  } while(0);
  $38 = HEAP32[$0>>2]|0; //@line 1515 "/checkout/src/libcore/fmt/mod.rs"
  $39 = HEAP32[$2>>2]|0; //@line 1515 "/checkout/src/libcore/fmt/mod.rs"
  $40 = ((($39)) + 16|0); //@line 1515 "/checkout/src/libcore/fmt/mod.rs"
  $41 = HEAP32[$40>>2]|0; //@line 1515 "/checkout/src/libcore/fmt/mod.rs"
  $42 = (FUNCTION_TABLE_iii[$41 & 511]($38,$_0$0$i$i$ph)|0); //@line 1515 "/checkout/src/libcore/fmt/mod.rs"
  if ($42) {
   $_0$0$in = 1;
   label = 9;
   break;
  } else {
   $13 = $46;$21 = $45;$iter$sroa$0$0 = $iter$sroa$0$1$ph;
  }
 }
 if ((label|0) == 9) {
  return ($_0$0$in|0); //@line 1613 "/checkout/src/libcore/fmt/mod.rs"
 }
 else if ((label|0) == 11) {
  // unreachable; //@line 697 "/checkout/src/libcore/char.rs"
 }
 else if ((label|0) == 19) {
  // unreachable; //@line 604 "/checkout/src/libcore/char.rs"
 }
 else if ((label|0) == 22) {
  $33 = HEAP32[$0>>2]|0; //@line 1515 "/checkout/src/libcore/fmt/mod.rs"
  $34 = HEAP32[$2>>2]|0; //@line 1515 "/checkout/src/libcore/fmt/mod.rs"
  $35 = ((($34)) + 16|0); //@line 1515 "/checkout/src/libcore/fmt/mod.rs"
  $36 = HEAP32[$35>>2]|0; //@line 1515 "/checkout/src/libcore/fmt/mod.rs"
  $37 = (FUNCTION_TABLE_iii[$36 & 511]($33,39)|0); //@line 1515 "/checkout/src/libcore/fmt/mod.rs"
  $_0$0$in = $37;
  return ($_0$0$in|0); //@line 1613 "/checkout/src/libcore/fmt/mod.rs"
 }
 return (0)|0;
}
function __ZN53__LT_core__fmt__Error_u20_as_u20_core__fmt__Debug_GT_3fmt17h03b2748a480128faE($self,$__arg_0) {
 $self = $self|0;
 $__arg_0 = $__arg_0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($__arg_0)) + 24|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $1 = HEAP32[$0>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $2 = ((($__arg_0)) + 28|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$2>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $4 = ((($3)) + 12|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $5 = HEAP32[$4>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $6 = (FUNCTION_TABLE_iiii[$5 & 511]($1,25794,5)|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 return ($6|0); //@line 101 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h008a30c8d23343c5E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $buf$i$i = 0, $curr$230$i$i = 0, $curr$3$i$i = 0, $div$i$i = 0, $n1$029$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $buf$i$i = sp;
 $0 = HEAP32[$self>>2]|0; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $1 = HEAP8[$0>>0]|0; //@line 41 "/checkout/src/libcore/fmt/num.rs"
 $2 = $1&255; //@line 41 "/checkout/src/libcore/fmt/num.rs"
 $3 = ($1&255)>(99); //@line 234 "/checkout/src/libcore/fmt/num.rs"
 if ($3) {
  $4 = (($1&255) % 100)&-1;
  $5 = ($4 << 1)&255; //@line 235 "/checkout/src/libcore/fmt/num.rs"
  $6 = $5&255; //@line 235 "/checkout/src/libcore/fmt/num.rs"
  $div$i$i = (($1&255) / 100)&-1;
  $7 = $div$i$i&255;
  $8 = (10032 + ($6)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $9 = ((($buf$i$i)) + 37|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $10 = HEAP16[$8>>1]|0; //@line 238 "/checkout/src/libcore/fmt/num.rs"
  HEAP8[$9>>0]=$10&255;HEAP8[$9+1>>0]=$10>>8; //@line 238 "/checkout/src/libcore/fmt/num.rs"
  $curr$230$i$i = 36;$n1$029$i$i = $7;
 } else {
  $11 = ($1&255)<(10); //@line 242 "/checkout/src/libcore/fmt/num.rs"
  if ($11) {
   $curr$230$i$i = 38;$n1$029$i$i = $2;
  } else {
   $15 = $2 << 1; //@line 246 "/checkout/src/libcore/fmt/num.rs"
   $16 = (10032 + ($15)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
   $17 = ((($buf$i$i)) + 37|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
   $18 = HEAP16[$16>>1]|0; //@line 248 "/checkout/src/libcore/fmt/num.rs"
   HEAP8[$17>>0]=$18&255;HEAP8[$17+1>>0]=$18>>8; //@line 248 "/checkout/src/libcore/fmt/num.rs"
   $curr$3$i$i = 37;
   $19 = (($buf$i$i) + ($curr$3$i$i)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
   $20 = (39 - ($curr$3$i$i))|0; //@line 254 "/checkout/src/libcore/fmt/num.rs"
   $21 = (__ZN4core3fmt9Formatter12pad_integral17h3050cf392a622772E($f,1,39452,0,$19,$20)|0); //@line 256 "/checkout/src/libcore/fmt/num.rs"
   STACKTOP = sp;return ($21|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
  }
 }
 $12 = $n1$029$i$i&255; //@line 244 "/checkout/src/libcore/fmt/num.rs"
 $13 = (($buf$i$i) + ($curr$230$i$i)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
 $14 = (($12) + 48)<<24>>24; //@line 244 "/checkout/src/libcore/fmt/num.rs"
 HEAP8[$13>>0] = $14; //@line 244 "/checkout/src/libcore/fmt/num.rs"
 $curr$3$i$i = $curr$230$i$i;
 $19 = (($buf$i$i) + ($curr$3$i$i)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
 $20 = (39 - ($curr$3$i$i))|0; //@line 254 "/checkout/src/libcore/fmt/num.rs"
 $21 = (__ZN4core3fmt9Formatter12pad_integral17h3050cf392a622772E($f,1,39452,0,$19,$20)|0); //@line 256 "/checkout/src/libcore/fmt/num.rs"
 STACKTOP = sp;return ($21|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h3bdaf55f9a9e78b7E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self>>2]|0; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $1 = (__ZN4core3fmt3num52__LT_impl_u20_core__fmt__Display_u20_for_u20_u64_GT_3fmt17h86a0faa196607cfcE($0,$f)|0); //@line 161 "/checkout/src/libcore/fmt/num.rs"
 return ($1|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h63a452c57d86e38cE($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self>>2]|0; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $1 = (__ZN4core3fmt3num54__LT_impl_u20_core__fmt__Display_u20_for_u20_usize_GT_3fmt17h36438de9cd0d1868E($0,$f)|0); //@line 161 "/checkout/src/libcore/fmt/num.rs"
 return ($1|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h85b91ea6449cbdc2E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self>>2]|0; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $1 = ((($self)) + 4|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $2 = HEAP32[$1>>2]|0; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $3 = ((($2)) + 12|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $4 = HEAP32[$3>>2]|0; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $5 = (FUNCTION_TABLE_iii[$4 & 511]($0,$f)|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 return ($5|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17h54d337e1209f0957E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self>>2]|0; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $1 = ((($self)) + 4|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $2 = HEAP32[$1>>2]|0; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $3 = (__ZN4core3fmt9Formatter3pad17he7dfc3104845bdf3E($f,$0,$2)|0); //@line 1601 "/checkout/src/libcore/fmt/mod.rs"
 return ($3|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $_10 = 0, $_3 = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$4$0$$sroa_idx2$i = 0, $index = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_10 = sp + 32|0;
 $_3 = sp + 8|0;
 $len = sp + 4|0;
 $index = sp;
 HEAP32[$index>>2] = $0;
 HEAP32[$len>>2] = $1;
 HEAP32[$_10>>2] = $index; //@line 745 "/checkout/src/libcore/slice/mod.rs"
 $2 = ((($_10)) + 4|0); //@line 745 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$2>>2] = 289; //@line 745 "/checkout/src/libcore/slice/mod.rs"
 $3 = ((($_10)) + 8|0); //@line 745 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$3>>2] = $len; //@line 745 "/checkout/src/libcore/slice/mod.rs"
 $4 = ((($_10)) + 12|0); //@line 745 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$4>>2] = 289; //@line 745 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$_3>>2] = 10288; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $5 = ((($_3)) + 4|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$5>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $_5$sroa$0$0$$sroa_idx$i = ((($_3)) + 8|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 12044; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $_5$sroa$4$0$$sroa_idx2$i = ((($_3)) + 12|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5$sroa$4$0$$sroa_idx2$i>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $6 = ((($_3)) + 16|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$6>>2] = $_10; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $7 = ((($_3)) + 20|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$7>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 __ZN4core9panicking9panic_fmt17hff08f8fc41769480E($_3,10304); //@line 745 "/checkout/src/libcore/slice/mod.rs"
 // unreachable; //@line 745 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN4core5slice22slice_index_order_fail17h620f0e130a93079bE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $_10 = 0, $_3 = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$4$0$$sroa_idx2$i = 0, $end = 0, $index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_10 = sp + 32|0;
 $_3 = sp + 8|0;
 $end = sp + 4|0;
 $index = sp;
 HEAP32[$index>>2] = $0;
 HEAP32[$end>>2] = $1;
 HEAP32[$_10>>2] = $index; //@line 751 "/checkout/src/libcore/slice/mod.rs"
 $2 = ((($_10)) + 4|0); //@line 751 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$2>>2] = 289; //@line 751 "/checkout/src/libcore/slice/mod.rs"
 $3 = ((($_10)) + 8|0); //@line 751 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$3>>2] = $end; //@line 751 "/checkout/src/libcore/slice/mod.rs"
 $4 = ((($_10)) + 12|0); //@line 751 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$4>>2] = 289; //@line 751 "/checkout/src/libcore/slice/mod.rs"
 HEAP32[$_3>>2] = 10320; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $5 = ((($_3)) + 4|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$5>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $_5$sroa$0$0$$sroa_idx$i = ((($_3)) + 8|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 12044; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $_5$sroa$4$0$$sroa_idx2$i = ((($_3)) + 12|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5$sroa$4$0$$sroa_idx2$i>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $6 = ((($_3)) + 16|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$6>>2] = $_10; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $7 = ((($_3)) + 20|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$7>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 __ZN4core9panicking9panic_fmt17hff08f8fc41769480E($_3,10336); //@line 751 "/checkout/src/libcore/slice/mod.rs"
 // unreachable; //@line 751 "/checkout/src/libcore/slice/mod.rs"
}
function __ZN60__LT_core__cell__BorrowError_u20_as_u20_core__fmt__Debug_GT_3fmt17h34a0450e2db10484E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 24|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $1 = HEAP32[$0>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $2 = ((($f)) + 28|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$2>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $4 = ((($3)) + 12|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $5 = HEAP32[$4>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $6 = (FUNCTION_TABLE_iiii[$5 & 511]($1,25908,11)|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 return ($6|0); //@line 499 "/checkout/src/libcore/cell.rs"
}
function __ZN63__LT_core__cell__BorrowMutError_u20_as_u20_core__fmt__Debug_GT_3fmt17hce0f034cf9657997E($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 24|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $1 = HEAP32[$0>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $2 = ((($f)) + 28|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$2>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $4 = ((($3)) + 12|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $5 = HEAP32[$4>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $6 = (FUNCTION_TABLE_iiii[$5 & 511]($1,25919,14)|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 return ($6|0); //@line 519 "/checkout/src/libcore/cell.rs"
}
function __ZN4core3ptr13drop_in_place17hb84be76021358c0dE($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN96__LT_core__fmt__builders__PadAdapter_LT__u27_a_C__u20__u27_b_GT__u20_as_u20_core__fmt__Write_GT_9write_str17he552cbab6976e207E($self,$0,$1) {
 $self = $self|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$pre$i$i$i = 0, $$pre$phi$i$i$iZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$shrunk = 0, $_23 = 0;
 var $or$cond$i$i$i$i16 = 0, $s$sroa$0$030 = 0, $s$sroa$7$029 = 0, $split$0 = 0, $switch1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_23 = sp;
 $2 = ($1|0)==(0); //@line 2508 "/checkout/src/libcore/str/mod.rs"
 if ($2) {
  $_0$0$shrunk = 0;
  STACKTOP = sp;return ($_0$0$shrunk|0); //@line 49 "/checkout/src/libcore/fmt/builders.rs"
 }
 $3 = ((($self)) + 4|0);
 $4 = ((($_23)) + 4|0);
 $s$sroa$0$030 = $0;$s$sroa$7$029 = $1;
 while(1) {
  $5 = HEAP8[$3>>0]|0; //@line 30 "/checkout/src/libcore/fmt/builders.rs"
  $6 = ($5<<24>>24)==(0); //@line 30 "/checkout/src/libcore/fmt/builders.rs"
  if (!($6)) {
   $7 = HEAP32[$self>>2]|0; //@line 31 "/checkout/src/libcore/fmt/builders.rs"
   $8 = ((($7)) + 24|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
   $9 = HEAP32[$8>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
   $10 = ((($7)) + 28|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
   $11 = HEAP32[$10>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
   $12 = ((($11)) + 12|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
   $13 = HEAP32[$12>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
   $14 = (FUNCTION_TABLE_iiii[$13 & 511]($9,25933,4)|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
   if ($14) {
    $_0$0$shrunk = 1;
    label = 5;
    break;
   }
  }
  __ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_4find17hc80c29e7710dcacdE($_23,$s$sroa$0$030,$s$sroa$7$029,10); //@line 34 "/checkout/src/libcore/fmt/builders.rs"
  $15 = HEAP32[$_23>>2]|0; //@line 35 "/checkout/src/libcore/fmt/builders.rs"
  $switch1 = ($15|0)==(1); //@line 35 "/checkout/src/libcore/fmt/builders.rs"
  if ($switch1) {
   $16 = HEAP32[$4>>2]|0; //@line 35 "/checkout/src/libcore/fmt/builders.rs"
   HEAP8[$3>>0] = 1; //@line 36 "/checkout/src/libcore/fmt/builders.rs"
   $17 = (($16) + 1)|0; //@line 37 "/checkout/src/libcore/fmt/builders.rs"
   $split$0 = $17;
  } else {
   HEAP8[$3>>0] = 0; //@line 40 "/checkout/src/libcore/fmt/builders.rs"
   $split$0 = $s$sroa$7$029;
  }
  $18 = HEAP32[$self>>2]|0; //@line 44 "/checkout/src/libcore/fmt/builders.rs"
  $19 = ($split$0|0)==(0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
  $20 = ($s$sroa$7$029|0)==($split$0|0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
  $or$cond$i$i$i$i16 = $19 | $20; //@line 2438 "/checkout/src/libcore/str/mod.rs"
  if (!($or$cond$i$i$i$i16)) {
   $21 = ($s$sroa$7$029>>>0)>($split$0>>>0); //@line 792 "/checkout/src/libcore/slice/mod.rs"
   if (!($21)) {
    label = 12;
    break;
   }
   $22 = (($s$sroa$0$030) + ($split$0)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
   $23 = HEAP8[$22>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
   $24 = ($23<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
   if (!($24)) {
    label = 12;
    break;
   }
  }
  $25 = ((($18)) + 24|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $26 = HEAP32[$25>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $27 = ((($18)) + 28|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $28 = HEAP32[$27>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $29 = ((($28)) + 12|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $30 = HEAP32[$29>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $31 = (FUNCTION_TABLE_iiii[$30 & 511]($26,$s$sroa$0$030,$split$0)|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  if ($31) {
   $_0$0$shrunk = 1;
   label = 5;
   break;
  }
  if ($or$cond$i$i$i$i16) {
   $$pre$i$i$i = (($s$sroa$0$030) + ($split$0)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
   $$pre$phi$i$i$iZ2D = $$pre$i$i$i;
  } else {
   $32 = ($s$sroa$7$029>>>0)>($split$0>>>0); //@line 792 "/checkout/src/libcore/slice/mod.rs"
   if (!($32)) {
    label = 18;
    break;
   }
   $33 = (($s$sroa$0$030) + ($split$0)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
   $34 = HEAP8[$33>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
   $35 = ($34<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
   if ($35) {
    $$pre$phi$i$i$iZ2D = $33;
   } else {
    label = 18;
    break;
   }
  }
  $36 = (($s$sroa$7$029) - ($split$0))|0; //@line 1975 "/checkout/src/libcore/str/mod.rs"
  $37 = ($36|0)==(0); //@line 2508 "/checkout/src/libcore/str/mod.rs"
  if ($37) {
   $_0$0$shrunk = 0;
   label = 5;
   break;
  } else {
   $s$sroa$0$030 = $$pre$phi$i$i$iZ2D;$s$sroa$7$029 = $36;
  }
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return ($_0$0$shrunk|0); //@line 49 "/checkout/src/libcore/fmt/builders.rs"
 }
 else if ((label|0) == 12) {
  __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($s$sroa$0$030,$s$sroa$7$029,0,$split$0); //@line 1940 "/checkout/src/libcore/str/mod.rs"
  // unreachable; //@line 1940 "/checkout/src/libcore/str/mod.rs"
 }
 else if ((label|0) == 18) {
  __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($s$sroa$0$030,$s$sroa$7$029,$split$0,$s$sroa$7$029); //@line 1987 "/checkout/src/libcore/str/mod.rs"
  // unreachable; //@line 1987 "/checkout/src/libcore/str/mod.rs"
 }
 return (0)|0;
}
function __ZN4core3fmt8builders11DebugStruct5field17h5f57368d80e04997E($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$expand_i1_val = 0, $$fca$1$gep$i$i = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink$i$i = 0, $$sink2$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_0$0$in$i$i = 0, $_0$0$off0$i = 0, $_13$i$i = 0, $_20$i$i = 0, $_41$i$i$sroa$4$0$$sroa_idx = 0, $_41$i$i$sroa$5$0$$sroa_idx = 0, $_41$i$i$sroa$6$0$$sroa_idx = 0, $_41$i$i$sroa$7$0$$sroa_idx = 0, $_41$i$i$sroa$8$0$$sroa_idx = 0, $_48$i$i = 0, $_5$i = 0, $_5$sroa$0$0$$sroa_idx$i9$i$i = 0, $_5$sroa$4$0$$sroa_idx2$i11$i$i = 0, $name = 0, $prefix$i$i = 0, $value = 0, $writer$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $_5$i = sp + 104|0;
 $_48$i$i = sp + 80|0;
 $_20$i$i = sp + 56|0;
 $_13$i$i = sp + 32|0;
 $writer$i$i = sp + 24|0;
 $prefix$i$i = sp + 16|0;
 $value = sp + 8|0;
 $name = sp;
 HEAP32[$name>>2] = $1;
 $5 = ((($name)) + 4|0);
 HEAP32[$5>>2] = $2;
 HEAP32[$value>>2] = $3;
 $6 = ((($value)) + 4|0);
 HEAP32[$6>>2] = $4;
 $7 = ((($0)) + 4|0); //@line 107 "/checkout/src/libcore/fmt/builders.rs"
 $8 = HEAP8[$7>>0]|0; //@line 107 "/checkout/src/libcore/fmt/builders.rs"
 $9 = ($8<<24>>24)==(0); //@line 107 "/checkout/src/libcore/fmt/builders.rs"
 if (!($9)) {
  $$pre = ((($0)) + 5|0); //@line 123 "/checkout/src/libcore/fmt/builders.rs"
  $$pre$phiZ2D = $$pre;$_0$0$off0$i = 1;
  $38 = $_0$0$off0$i&1; //@line 107 "/checkout/src/libcore/fmt/builders.rs"
  HEAP8[$7>>0] = $38; //@line 107 "/checkout/src/libcore/fmt/builders.rs"
  HEAP8[$$pre$phiZ2D>>0] = 1; //@line 123 "/checkout/src/libcore/fmt/builders.rs"
  STACKTOP = sp;return ($0|0); //@line 125 "/checkout/src/libcore/fmt/builders.rs"
 }
 $10 = ((($0)) + 5|0); //@line 108 "/checkout/src/libcore/fmt/builders.rs"
 $11 = HEAP8[$10>>0]|0; //@line 108 "/checkout/src/libcore/fmt/builders.rs"
 $12 = ($11<<24>>24)!=(0); //@line 108 "/checkout/src/libcore/fmt/builders.rs"
 $$sink2$i$i = $12 ? 25937 : 25944; //@line 108 "/checkout/src/libcore/fmt/builders.rs"
 $$sink$i$i = $12 ? 1 : 2; //@line 108 "/checkout/src/libcore/fmt/builders.rs"
 HEAP32[$prefix$i$i>>2] = $$sink2$i$i;
 $13 = ((($prefix$i$i)) + 4|0);
 HEAP32[$13>>2] = $$sink$i$i;
 $14 = HEAP32[$0>>2]|0; //@line 143 "/checkout/src/libcore/fmt/builders.rs"
 $15 = HEAP32[$14>>2]|0; //@line 1367 "/checkout/src/libcore/fmt/mod.rs"
 $16 = $15 & 4; //@line 1367 "/checkout/src/libcore/fmt/mod.rs"
 $17 = ($16|0)==(0); //@line 1367 "/checkout/src/libcore/fmt/mod.rs"
 if ($17) {
  HEAP32[$_48$i$i>>2] = $prefix$i$i; //@line 119 "/checkout/src/libcore/fmt/builders.rs"
  $28 = ((($_48$i$i)) + 4|0); //@line 119 "/checkout/src/libcore/fmt/builders.rs"
  HEAP32[$28>>2] = 465; //@line 119 "/checkout/src/libcore/fmt/builders.rs"
  $29 = ((($_48$i$i)) + 8|0); //@line 119 "/checkout/src/libcore/fmt/builders.rs"
  HEAP32[$29>>2] = $name; //@line 119 "/checkout/src/libcore/fmt/builders.rs"
  $30 = ((($_48$i$i)) + 12|0); //@line 119 "/checkout/src/libcore/fmt/builders.rs"
  HEAP32[$30>>2] = 465; //@line 119 "/checkout/src/libcore/fmt/builders.rs"
  $31 = ((($_48$i$i)) + 16|0); //@line 119 "/checkout/src/libcore/fmt/builders.rs"
  HEAP32[$31>>2] = $value; //@line 119 "/checkout/src/libcore/fmt/builders.rs"
  $32 = ((($_48$i$i)) + 20|0); //@line 119 "/checkout/src/libcore/fmt/builders.rs"
  HEAP32[$32>>2] = 466; //@line 119 "/checkout/src/libcore/fmt/builders.rs"
  $33 = ((($14)) + 24|0); //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  $34 = HEAP32[$33>>2]|0; //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  $35 = ((($14)) + 28|0); //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  $36 = HEAP32[$35>>2]|0; //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_5$i>>2] = 10540; //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  $_41$i$i$sroa$4$0$$sroa_idx = ((($_5$i)) + 4|0); //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_41$i$i$sroa$4$0$$sroa_idx>>2] = 3; //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  $_41$i$i$sroa$5$0$$sroa_idx = ((($_5$i)) + 8|0); //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_41$i$i$sroa$5$0$$sroa_idx>>2] = 12364; //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  $_41$i$i$sroa$6$0$$sroa_idx = ((($_5$i)) + 12|0); //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_41$i$i$sroa$6$0$$sroa_idx>>2] = 3; //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  $_41$i$i$sroa$7$0$$sroa_idx = ((($_5$i)) + 16|0); //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_41$i$i$sroa$7$0$$sroa_idx>>2] = $_48$i$i; //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  $_41$i$i$sroa$8$0$$sroa_idx = ((($_5$i)) + 20|0); //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_41$i$i$sroa$8$0$$sroa_idx>>2] = 3; //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  $37 = (__ZN4core3fmt5write17h6c8dbcbe50728a23E($34,$36,$_5$i)|0); //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  $_0$0$in$i$i = $37;
 } else {
  $18 = $14; //@line 114 "/checkout/src/libcore/fmt/builders.rs"
  HEAP32[$writer$i$i>>2] = $18; //@line 115 "/checkout/src/libcore/fmt/builders.rs"
  $$fca$1$gep$i$i = ((($writer$i$i)) + 4|0); //@line 115 "/checkout/src/libcore/fmt/builders.rs"
  $$expand_i1_val = 0; //@line 115 "/checkout/src/libcore/fmt/builders.rs"
  HEAP8[$$fca$1$gep$i$i>>0] = $$expand_i1_val; //@line 115 "/checkout/src/libcore/fmt/builders.rs"
  HEAP32[$_20$i$i>>2] = $prefix$i$i; //@line 117 "/checkout/src/libcore/fmt/builders.rs"
  $19 = ((($_20$i$i)) + 4|0); //@line 117 "/checkout/src/libcore/fmt/builders.rs"
  HEAP32[$19>>2] = 465; //@line 117 "/checkout/src/libcore/fmt/builders.rs"
  $20 = ((($_20$i$i)) + 8|0); //@line 117 "/checkout/src/libcore/fmt/builders.rs"
  HEAP32[$20>>2] = $name; //@line 117 "/checkout/src/libcore/fmt/builders.rs"
  $21 = ((($_20$i$i)) + 12|0); //@line 117 "/checkout/src/libcore/fmt/builders.rs"
  HEAP32[$21>>2] = 465; //@line 117 "/checkout/src/libcore/fmt/builders.rs"
  $22 = ((($_20$i$i)) + 16|0); //@line 117 "/checkout/src/libcore/fmt/builders.rs"
  HEAP32[$22>>2] = $value; //@line 117 "/checkout/src/libcore/fmt/builders.rs"
  $23 = ((($_20$i$i)) + 20|0); //@line 117 "/checkout/src/libcore/fmt/builders.rs"
  HEAP32[$23>>2] = 466; //@line 117 "/checkout/src/libcore/fmt/builders.rs"
  HEAP32[$_13$i$i>>2] = 10384; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $24 = ((($_13$i$i)) + 4|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$24>>2] = 3; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $_5$sroa$0$0$$sroa_idx$i9$i$i = ((($_13$i$i)) + 8|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_5$sroa$0$0$$sroa_idx$i9$i$i>>2] = 10408; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $_5$sroa$4$0$$sroa_idx2$i11$i$i = ((($_13$i$i)) + 12|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_5$sroa$4$0$$sroa_idx2$i11$i$i>>2] = 3; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $25 = ((($_13$i$i)) + 16|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$25>>2] = $_20$i$i; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $26 = ((($_13$i$i)) + 20|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$26>>2] = 3; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $27 = (__ZN4core3fmt5write17h6c8dbcbe50728a23E($writer$i$i,10516,$_13$i$i)|0); //@line 116 "/checkout/src/libcore/fmt/builders.rs"
  $_0$0$in$i$i = $27;
 }
 $$pre$phiZ2D = $10;$_0$0$off0$i = $_0$0$in$i$i;
 $38 = $_0$0$off0$i&1; //@line 107 "/checkout/src/libcore/fmt/builders.rs"
 HEAP8[$7>>0] = $38; //@line 107 "/checkout/src/libcore/fmt/builders.rs"
 HEAP8[$$pre$phiZ2D>>0] = 1; //@line 123 "/checkout/src/libcore/fmt/builders.rs"
 STACKTOP = sp;return ($0|0); //@line 125 "/checkout/src/libcore/fmt/builders.rs"
}
function __ZN4core3ptr13drop_in_place17h7daa23394e1cac32E($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3fmt5Write10write_char17h98205dc15e3040d9E($self,$c) {
 $self = $self|0;
 $c = $c|0;
 var $$sink$i = 0, $$sink$sink$i = 0, $$sink11$i = 0, $$sink14$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $len$1$i = 0, $len$2$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_10 = sp;
 HEAP32[$_10>>2] = 0; //@line 177 "/checkout/src/libcore/fmt/mod.rs"
 $0 = ($c>>>0)<(128); //@line 485 "/checkout/src/libcore/char.rs"
 if ($0) {
  $1 = $c&255; //@line 486 "/checkout/src/libcore/char.rs"
  HEAP8[$_10>>0] = $1; //@line 486 "/checkout/src/libcore/char.rs"
  $len$2$i = 1;
  $25 = (__ZN96__LT_core__fmt__builders__PadAdapter_LT__u27_a_C__u20__u27_b_GT__u20_as_u20_core__fmt__Write_GT_9write_str17he552cbab6976e207E($self,$_10,$len$2$i)|0); //@line 177 "/checkout/src/libcore/fmt/mod.rs"
  STACKTOP = sp;return ($25|0); //@line 178 "/checkout/src/libcore/fmt/mod.rs"
 }
 $2 = ($c>>>0)<(2048); //@line 488 "/checkout/src/libcore/char.rs"
 do {
  if ($2) {
   $$sink$i = 0;$$sink$sink$i = 1;$$sink11$i = -64;$$sink14$i = 31;$len$1$i = 2;
  } else {
   $3 = ($c>>>0)<(65536); //@line 492 "/checkout/src/libcore/char.rs"
   if ($3) {
    $4 = $c >>> 12; //@line 493 "/checkout/src/libcore/char.rs"
    $5 = $4 & 15; //@line 493 "/checkout/src/libcore/char.rs"
    $6 = $5&255; //@line 493 "/checkout/src/libcore/char.rs"
    $7 = $6 | -32; //@line 493 "/checkout/src/libcore/char.rs"
    HEAP8[$_10>>0] = $7; //@line 493 "/checkout/src/libcore/char.rs"
    $$sink$i = 1;$$sink$sink$i = 2;$$sink11$i = -128;$$sink14$i = 63;$len$1$i = 3;
    break;
   } else {
    $8 = $c >>> 18; //@line 498 "/checkout/src/libcore/char.rs"
    $9 = $8&255; //@line 498 "/checkout/src/libcore/char.rs"
    $10 = $9 | -16; //@line 498 "/checkout/src/libcore/char.rs"
    HEAP8[$_10>>0] = $10; //@line 498 "/checkout/src/libcore/char.rs"
    $11 = $c >>> 12; //@line 499 "/checkout/src/libcore/char.rs"
    $12 = $11 & 63; //@line 499 "/checkout/src/libcore/char.rs"
    $13 = $12&255; //@line 499 "/checkout/src/libcore/char.rs"
    $14 = ((($_10)) + 1|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
    $15 = $13 | -128; //@line 499 "/checkout/src/libcore/char.rs"
    HEAP8[$14>>0] = $15; //@line 499 "/checkout/src/libcore/char.rs"
    $$sink$i = 2;$$sink$sink$i = 3;$$sink11$i = -128;$$sink14$i = 63;$len$1$i = 4;
    break;
   }
  }
 } while(0);
 $16 = $c >>> 6;
 $17 = $$sink14$i & $16;
 $18 = $17&255;
 $19 = (($_10) + ($$sink$i)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
 $20 = $18 | $$sink11$i;
 HEAP8[$19>>0] = $20;
 $21 = $c & 63;
 $22 = $21&255;
 $23 = (($_10) + ($$sink$sink$i)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
 $24 = $22 | -128;
 HEAP8[$23>>0] = $24;
 $len$2$i = $len$1$i;
 $25 = (__ZN96__LT_core__fmt__builders__PadAdapter_LT__u27_a_C__u20__u27_b_GT__u20_as_u20_core__fmt__Write_GT_9write_str17he552cbab6976e207E($self,$_10,$len$2$i)|0); //@line 177 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return ($25|0); //@line 178 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN4core3fmt5Write9write_fmt17h8f4e2e40b5d0a201E($self,$args) {
 $self = $self|0;
 $args = $args|0;
 var $0 = 0, $_6 = 0, $_8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_8 = sp + 8|0;
 $_6 = sp;
 HEAP32[$_6>>2] = $self; //@line 223 "/checkout/src/libcore/fmt/mod.rs"
 ;HEAP32[$_8>>2]=HEAP32[$args>>2]|0;HEAP32[$_8+4>>2]=HEAP32[$args+4>>2]|0;HEAP32[$_8+8>>2]=HEAP32[$args+8>>2]|0;HEAP32[$_8+12>>2]=HEAP32[$args+12>>2]|0;HEAP32[$_8+16>>2]=HEAP32[$args+16>>2]|0;HEAP32[$_8+20>>2]=HEAP32[$args+20>>2]|0; //@line 223 "/checkout/src/libcore/fmt/mod.rs"
 $0 = (__ZN4core3fmt5write17h6c8dbcbe50728a23E($_6,10360,$_8)|0); //@line 223 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return ($0|0); //@line 224 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN4core3fmt8builders11DebugStruct6finish17h63c8c54de379106dE($0) {
 $0 = $0|0;
 var $$phi$trans$insert = 0, $$pre = 0, $$sink$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_0$0$off0$i = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 5|0); //@line 130 "/checkout/src/libcore/fmt/builders.rs"
 $2 = HEAP8[$1>>0]|0; //@line 130 "/checkout/src/libcore/fmt/builders.rs"
 $3 = ($2<<24>>24)==(0); //@line 130 "/checkout/src/libcore/fmt/builders.rs"
 $$phi$trans$insert = ((($0)) + 4|0);
 $$pre = HEAP8[$$phi$trans$insert>>0]|0;
 if ($3) {
  $17 = $$pre;
  $16 = ($17<<24>>24)!=(0); //@line 139 "/checkout/src/libcore/fmt/builders.rs"
  return ($16|0); //@line 140 "/checkout/src/libcore/fmt/builders.rs"
 }
 $4 = ($$pre<<24>>24)==(0); //@line 131 "/checkout/src/libcore/fmt/builders.rs"
 if ($4) {
  $5 = HEAP32[$0>>2]|0; //@line 143 "/checkout/src/libcore/fmt/builders.rs"
  $6 = HEAP32[$5>>2]|0; //@line 1367 "/checkout/src/libcore/fmt/mod.rs"
  $7 = $6 & 4; //@line 1367 "/checkout/src/libcore/fmt/mod.rs"
  $8 = ($7|0)!=(0); //@line 1367 "/checkout/src/libcore/fmt/mod.rs"
  $$sink$i$i = $8 ? 25939 : 25941; //@line 132 "/checkout/src/libcore/fmt/builders.rs"
  $9 = ((($5)) + 24|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $10 = HEAP32[$9>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $11 = ((($5)) + 28|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $12 = HEAP32[$11>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $13 = ((($12)) + 12|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $14 = HEAP32[$13>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $15 = (FUNCTION_TABLE_iiii[$14 & 511]($10,$$sink$i$i,2)|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $phitmp = $15&1;
  $_0$0$off0$i = $phitmp;
 } else {
  $_0$0$off0$i = 1;
 }
 HEAP8[$$phi$trans$insert>>0] = $_0$0$off0$i; //@line 131 "/checkout/src/libcore/fmt/builders.rs"
 $17 = $_0$0$off0$i;
 $16 = ($17<<24>>24)!=(0); //@line 139 "/checkout/src/libcore/fmt/builders.rs"
 return ($16|0); //@line 140 "/checkout/src/libcore/fmt/builders.rs"
}
function __ZN4core3fmt8builders10DebugTuple5field17hf986ac1f5cbaa58cE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$fca$1$gep$i$i = 0, $$sink$i$i = 0, $$sink6$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$in$i$i = 0, $_0$0$off0$i = 0;
 var $_15$i$i = 0, $_22$i$i = 0, $_38$i$i$sroa$4$0$$sroa_idx = 0, $_38$i$i$sroa$5$0$$sroa_idx = 0, $_38$i$i$sroa$6$0$$sroa_idx = 0, $_38$i$i$sroa$7$0$$sroa_idx = 0, $_38$i$i$sroa$8$0$$sroa_idx = 0, $_45$i$i = 0, $_5$i = 0, $_5$sroa$0$0$$sroa_idx$i16$i$i = 0, $_5$sroa$4$0$$sroa_idx2$i18$i$i = 0, $prefix$i$i = 0, $space$i$i = 0, $str$c$sink$i$i = 0, $value = 0, $writer$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $_5$i = sp + 96|0;
 $_45$i$i = sp + 72|0;
 $_22$i$i = sp + 56|0;
 $_15$i$i = sp + 32|0;
 $writer$i$i = sp + 24|0;
 $space$i$i = sp + 16|0;
 $prefix$i$i = sp + 8|0;
 $value = sp;
 HEAP32[$value>>2] = $1;
 $3 = ((($value)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = ((($0)) + 8|0); //@line 199 "/checkout/src/libcore/fmt/builders.rs"
 $5 = HEAP8[$4>>0]|0; //@line 199 "/checkout/src/libcore/fmt/builders.rs"
 $6 = ($5<<24>>24)==(0); //@line 199 "/checkout/src/libcore/fmt/builders.rs"
 $7 = ((($0)) + 4|0);
 if (!($6)) {
  $_0$0$off0$i = 1;
  $34 = $_0$0$off0$i&1; //@line 199 "/checkout/src/libcore/fmt/builders.rs"
  HEAP8[$4>>0] = $34; //@line 199 "/checkout/src/libcore/fmt/builders.rs"
  $35 = HEAP32[$7>>2]|0; //@line 214 "/checkout/src/libcore/fmt/builders.rs"
  $36 = (($35) + 1)|0; //@line 214 "/checkout/src/libcore/fmt/builders.rs"
  HEAP32[$7>>2] = $36; //@line 214 "/checkout/src/libcore/fmt/builders.rs"
  STACKTOP = sp;return ($0|0); //@line 216 "/checkout/src/libcore/fmt/builders.rs"
 }
 $8 = HEAP32[$7>>2]|0; //@line 200 "/checkout/src/libcore/fmt/builders.rs"
 $9 = ($8|0)!=(0); //@line 200 "/checkout/src/libcore/fmt/builders.rs"
 $$sink6$i$i = $9 ? 25937 : 8756; //@line 200 "/checkout/src/libcore/fmt/builders.rs"
 $str$c$sink$i$i = $9 ? 25946 : 39452; //@line 200 "/checkout/src/libcore/fmt/builders.rs"
 $$sink$i$i = $9&1; //@line 200 "/checkout/src/libcore/fmt/builders.rs"
 HEAP32[$prefix$i$i>>2] = $$sink6$i$i; //@line 200 "/checkout/src/libcore/fmt/builders.rs"
 $10 = ((($prefix$i$i)) + 4|0); //@line 200 "/checkout/src/libcore/fmt/builders.rs"
 HEAP32[$10>>2] = 1; //@line 200 "/checkout/src/libcore/fmt/builders.rs"
 HEAP32[$space$i$i>>2] = $str$c$sink$i$i; //@line 200 "/checkout/src/libcore/fmt/builders.rs"
 $11 = ((($space$i$i)) + 4|0); //@line 200 "/checkout/src/libcore/fmt/builders.rs"
 HEAP32[$11>>2] = $$sink$i$i; //@line 200 "/checkout/src/libcore/fmt/builders.rs"
 $12 = HEAP32[$0>>2]|0; //@line 236 "/checkout/src/libcore/fmt/builders.rs"
 $13 = HEAP32[$12>>2]|0; //@line 1367 "/checkout/src/libcore/fmt/mod.rs"
 $14 = $13 & 4; //@line 1367 "/checkout/src/libcore/fmt/mod.rs"
 $15 = ($14|0)==(0); //@line 1367 "/checkout/src/libcore/fmt/mod.rs"
 if ($15) {
  HEAP32[$_45$i$i>>2] = $prefix$i$i; //@line 210 "/checkout/src/libcore/fmt/builders.rs"
  $24 = ((($_45$i$i)) + 4|0); //@line 210 "/checkout/src/libcore/fmt/builders.rs"
  HEAP32[$24>>2] = 465; //@line 210 "/checkout/src/libcore/fmt/builders.rs"
  $25 = ((($_45$i$i)) + 8|0); //@line 210 "/checkout/src/libcore/fmt/builders.rs"
  HEAP32[$25>>2] = $space$i$i; //@line 210 "/checkout/src/libcore/fmt/builders.rs"
  $26 = ((($_45$i$i)) + 12|0); //@line 210 "/checkout/src/libcore/fmt/builders.rs"
  HEAP32[$26>>2] = 465; //@line 210 "/checkout/src/libcore/fmt/builders.rs"
  $27 = ((($_45$i$i)) + 16|0); //@line 210 "/checkout/src/libcore/fmt/builders.rs"
  HEAP32[$27>>2] = $value; //@line 210 "/checkout/src/libcore/fmt/builders.rs"
  $28 = ((($_45$i$i)) + 20|0); //@line 210 "/checkout/src/libcore/fmt/builders.rs"
  HEAP32[$28>>2] = 466; //@line 210 "/checkout/src/libcore/fmt/builders.rs"
  $29 = ((($12)) + 24|0); //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  $30 = HEAP32[$29>>2]|0; //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  $31 = ((($12)) + 28|0); //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  $32 = HEAP32[$31>>2]|0; //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_5$i>>2] = 10652; //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  $_38$i$i$sroa$4$0$$sroa_idx = ((($_5$i)) + 4|0); //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_38$i$i$sroa$4$0$$sroa_idx>>2] = 3; //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  $_38$i$i$sroa$5$0$$sroa_idx = ((($_5$i)) + 8|0); //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_38$i$i$sroa$5$0$$sroa_idx>>2] = 12364; //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  $_38$i$i$sroa$6$0$$sroa_idx = ((($_5$i)) + 12|0); //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_38$i$i$sroa$6$0$$sroa_idx>>2] = 3; //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  $_38$i$i$sroa$7$0$$sroa_idx = ((($_5$i)) + 16|0); //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_38$i$i$sroa$7$0$$sroa_idx>>2] = $_45$i$i; //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  $_38$i$i$sroa$8$0$$sroa_idx = ((($_5$i)) + 20|0); //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_38$i$i$sroa$8$0$$sroa_idx>>2] = 3; //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  $33 = (__ZN4core3fmt5write17h6c8dbcbe50728a23E($30,$32,$_5$i)|0); //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  $_0$0$in$i$i = $33;
 } else {
  $16 = $12; //@line 206 "/checkout/src/libcore/fmt/builders.rs"
  HEAP32[$writer$i$i>>2] = $16; //@line 207 "/checkout/src/libcore/fmt/builders.rs"
  $$fca$1$gep$i$i = ((($writer$i$i)) + 4|0); //@line 207 "/checkout/src/libcore/fmt/builders.rs"
  $$expand_i1_val = 0; //@line 207 "/checkout/src/libcore/fmt/builders.rs"
  HEAP8[$$fca$1$gep$i$i>>0] = $$expand_i1_val; //@line 207 "/checkout/src/libcore/fmt/builders.rs"
  HEAP32[$_22$i$i>>2] = $prefix$i$i; //@line 208 "/checkout/src/libcore/fmt/builders.rs"
  $17 = ((($_22$i$i)) + 4|0); //@line 208 "/checkout/src/libcore/fmt/builders.rs"
  HEAP32[$17>>2] = 465; //@line 208 "/checkout/src/libcore/fmt/builders.rs"
  $18 = ((($_22$i$i)) + 8|0); //@line 208 "/checkout/src/libcore/fmt/builders.rs"
  HEAP32[$18>>2] = $value; //@line 208 "/checkout/src/libcore/fmt/builders.rs"
  $19 = ((($_22$i$i)) + 12|0); //@line 208 "/checkout/src/libcore/fmt/builders.rs"
  HEAP32[$19>>2] = 466; //@line 208 "/checkout/src/libcore/fmt/builders.rs"
  HEAP32[$_15$i$i>>2] = 10564; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $20 = ((($_15$i$i)) + 4|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$20>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $_5$sroa$0$0$$sroa_idx$i16$i$i = ((($_15$i$i)) + 8|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_5$sroa$0$0$$sroa_idx$i16$i$i>>2] = 10580; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $_5$sroa$4$0$$sroa_idx2$i18$i$i = ((($_15$i$i)) + 12|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_5$sroa$4$0$$sroa_idx2$i18$i$i>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $21 = ((($_15$i$i)) + 16|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$21>>2] = $_22$i$i; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $22 = ((($_15$i$i)) + 20|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$22>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $23 = (__ZN4core3fmt5write17h6c8dbcbe50728a23E($writer$i$i,10516,$_15$i$i)|0); //@line 208 "/checkout/src/libcore/fmt/builders.rs"
  $_0$0$in$i$i = $23;
 }
 $_0$0$off0$i = $_0$0$in$i$i;
 $34 = $_0$0$off0$i&1; //@line 199 "/checkout/src/libcore/fmt/builders.rs"
 HEAP8[$4>>0] = $34; //@line 199 "/checkout/src/libcore/fmt/builders.rs"
 $35 = HEAP32[$7>>2]|0; //@line 214 "/checkout/src/libcore/fmt/builders.rs"
 $36 = (($35) + 1)|0; //@line 214 "/checkout/src/libcore/fmt/builders.rs"
 HEAP32[$7>>2] = $36; //@line 214 "/checkout/src/libcore/fmt/builders.rs"
 STACKTOP = sp;return ($0|0); //@line 216 "/checkout/src/libcore/fmt/builders.rs"
}
function __ZN4core3fmt8builders10DebugTuple6finish17hb69207fbfcd175acE($0) {
 $0 = $0|0;
 var $$phi$trans$insert = 0, $$pre = 0, $$pre1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_0$0$off0$i = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0); //@line 221 "/checkout/src/libcore/fmt/builders.rs"
 $2 = HEAP32[$1>>2]|0; //@line 221 "/checkout/src/libcore/fmt/builders.rs"
 $3 = ($2|0)==(0); //@line 221 "/checkout/src/libcore/fmt/builders.rs"
 $$phi$trans$insert = ((($0)) + 8|0);
 $$pre = HEAP8[$$phi$trans$insert>>0]|0;
 if ($3) {
  $38 = $$pre;
  $37 = ($38<<24>>24)!=(0); //@line 232 "/checkout/src/libcore/fmt/builders.rs"
  return ($37|0); //@line 233 "/checkout/src/libcore/fmt/builders.rs"
 }
 $4 = ($$pre<<24>>24)==(0); //@line 222 "/checkout/src/libcore/fmt/builders.rs"
 do {
  if ($4) {
   $5 = HEAP32[$0>>2]|0; //@line 236 "/checkout/src/libcore/fmt/builders.rs"
   $6 = HEAP32[$5>>2]|0; //@line 1367 "/checkout/src/libcore/fmt/mod.rs"
   $7 = $6 & 4; //@line 1367 "/checkout/src/libcore/fmt/mod.rs"
   $8 = ($7|0)==(0); //@line 1367 "/checkout/src/libcore/fmt/mod.rs"
   if ($8) {
    $17 = $2;
   } else {
    $9 = ((($5)) + 24|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
    $10 = HEAP32[$9>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
    $11 = ((($5)) + 28|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
    $12 = HEAP32[$11>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
    $13 = ((($12)) + 12|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
    $14 = HEAP32[$13>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
    $15 = (FUNCTION_TABLE_iiii[$14 & 511]($10,25938,1)|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
    if ($15) {
     $_0$0$off0$i = 1;
     break;
    }
    $$pre1 = HEAP32[$1>>2]|0;
    $17 = $$pre1;
   }
   $16 = ($17|0)==(1); //@line 226 "/checkout/src/libcore/fmt/builders.rs"
   if ($16) {
    $18 = ((($0)) + 9|0); //@line 226 "/checkout/src/libcore/fmt/builders.rs"
    $19 = HEAP8[$18>>0]|0; //@line 226 "/checkout/src/libcore/fmt/builders.rs"
    $20 = ($19<<24>>24)==(0); //@line 226 "/checkout/src/libcore/fmt/builders.rs"
    if (!($20)) {
     $21 = HEAP32[$0>>2]|0; //@line 227 "/checkout/src/libcore/fmt/builders.rs"
     $22 = ((($21)) + 24|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
     $23 = HEAP32[$22>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
     $24 = ((($21)) + 28|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
     $25 = HEAP32[$24>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
     $26 = ((($25)) + 12|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
     $27 = HEAP32[$26>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
     $28 = (FUNCTION_TABLE_iiii[$27 & 511]($23,25937,1)|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
     if ($28) {
      $_0$0$off0$i = 1;
      break;
     }
    }
   }
   $29 = HEAP32[$0>>2]|0; //@line 229 "/checkout/src/libcore/fmt/builders.rs"
   $30 = ((($29)) + 24|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
   $31 = HEAP32[$30>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
   $32 = ((($29)) + 28|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
   $33 = HEAP32[$32>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
   $34 = ((($33)) + 12|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
   $35 = HEAP32[$34>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
   $36 = (FUNCTION_TABLE_iiii[$35 & 511]($31,25943,1)|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
   $phitmp = $36&1; //@line 230 "/checkout/src/libcore/fmt/builders.rs"
   $_0$0$off0$i = $phitmp;
  } else {
   $_0$0$off0$i = 1;
  }
 } while(0);
 HEAP8[$$phi$trans$insert>>0] = $_0$0$off0$i; //@line 222 "/checkout/src/libcore/fmt/builders.rs"
 $38 = $_0$0$off0$i;
 $37 = ($38<<24>>24)!=(0); //@line 232 "/checkout/src/libcore/fmt/builders.rs"
 return ($37|0); //@line 233 "/checkout/src/libcore/fmt/builders.rs"
}
function __ZN4core3fmt8builders10DebugInner5entry17h8cc0e21ae4fbd1fcE_llvm_74AC89CB($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$fca$1$gep$i$i = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink4$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$off0$i = 0, $_13$i$i = 0, $_20$i$i = 0;
 var $_39$i$i$sroa$4$0$$sroa_idx = 0, $_39$i$i$sroa$5$0$$sroa_idx = 0, $_39$i$i$sroa$6$0$$sroa_idx = 0, $_39$i$i$sroa$7$0$$sroa_idx = 0, $_39$i$i$sroa$8$0$$sroa_idx = 0, $_46$i$i = 0, $_5$i = 0, $_5$sroa$0$0$$sroa_idx$i11$i$i = 0, $_5$sroa$4$0$$sroa_idx2$i13$i$i = 0, $entry = 0, $prefix$i$i = 0, $prefix1$i$i = 0, $str$c$sink$i$i = 0, $str$c$sink6$i$i = 0, $writer$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $_5$i = sp + 88|0;
 $_46$i$i = sp + 72|0;
 $prefix1$i$i = sp + 64|0;
 $_20$i$i = sp + 48|0;
 $_13$i$i = sp + 24|0;
 $prefix$i$i = sp + 16|0;
 $writer$i$i = sp + 8|0;
 $entry = sp;
 HEAP32[$entry>>2] = $1;
 $3 = ((($entry)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = ((($0)) + 4|0); //@line 248 "/checkout/src/libcore/fmt/builders.rs"
 $5 = HEAP8[$4>>0]|0; //@line 248 "/checkout/src/libcore/fmt/builders.rs"
 $6 = ($5<<24>>24)==(0); //@line 248 "/checkout/src/libcore/fmt/builders.rs"
 if (!($6)) {
  $$pre = ((($0)) + 5|0); //@line 267 "/checkout/src/libcore/fmt/builders.rs"
  $$pre$phiZ2D = $$pre;$_0$0$off0$i = 1;
  $34 = $_0$0$off0$i&1; //@line 248 "/checkout/src/libcore/fmt/builders.rs"
  HEAP8[$4>>0] = $34; //@line 248 "/checkout/src/libcore/fmt/builders.rs"
  HEAP8[$$pre$phiZ2D>>0] = 1; //@line 267 "/checkout/src/libcore/fmt/builders.rs"
  STACKTOP = sp;return; //@line 268 "/checkout/src/libcore/fmt/builders.rs"
 }
 $7 = HEAP32[$0>>2]|0; //@line 280 "/checkout/src/libcore/fmt/builders.rs"
 $8 = HEAP32[$7>>2]|0; //@line 1367 "/checkout/src/libcore/fmt/mod.rs"
 $9 = $8 & 4; //@line 1367 "/checkout/src/libcore/fmt/mod.rs"
 $10 = ($9|0)==(0); //@line 1367 "/checkout/src/libcore/fmt/mod.rs"
 $11 = ((($0)) + 5|0); //@line 251 "/checkout/src/libcore/fmt/builders.rs"
 $12 = HEAP8[$11>>0]|0; //@line 251 "/checkout/src/libcore/fmt/builders.rs"
 if ($10) {
  $24 = ($12<<24>>24)!=(0); //@line 258 "/checkout/src/libcore/fmt/builders.rs"
  $str$c$sink6$i$i = $24 ? 25949 : 39452; //@line 258 "/checkout/src/libcore/fmt/builders.rs"
  $$sink4$i$i = $24 ? 2 : 0; //@line 258 "/checkout/src/libcore/fmt/builders.rs"
  HEAP32[$prefix1$i$i>>2] = $str$c$sink6$i$i;
  $25 = ((($prefix1$i$i)) + 4|0);
  HEAP32[$25>>2] = $$sink4$i$i;
  HEAP32[$_46$i$i>>2] = $prefix1$i$i; //@line 263 "/checkout/src/libcore/fmt/builders.rs"
  $26 = ((($_46$i$i)) + 4|0); //@line 263 "/checkout/src/libcore/fmt/builders.rs"
  HEAP32[$26>>2] = 465; //@line 263 "/checkout/src/libcore/fmt/builders.rs"
  $27 = ((($_46$i$i)) + 8|0); //@line 263 "/checkout/src/libcore/fmt/builders.rs"
  HEAP32[$27>>2] = $entry; //@line 263 "/checkout/src/libcore/fmt/builders.rs"
  $28 = ((($_46$i$i)) + 12|0); //@line 263 "/checkout/src/libcore/fmt/builders.rs"
  HEAP32[$28>>2] = 466; //@line 263 "/checkout/src/libcore/fmt/builders.rs"
  $29 = ((($7)) + 24|0); //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  $30 = HEAP32[$29>>2]|0; //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  $31 = ((($7)) + 28|0); //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  $32 = HEAP32[$31>>2]|0; //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_5$i>>2] = 10676; //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  $_39$i$i$sroa$4$0$$sroa_idx = ((($_5$i)) + 4|0); //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_39$i$i$sroa$4$0$$sroa_idx>>2] = 2; //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  $_39$i$i$sroa$5$0$$sroa_idx = ((($_5$i)) + 8|0); //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_39$i$i$sroa$5$0$$sroa_idx>>2] = 12044; //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  $_39$i$i$sroa$6$0$$sroa_idx = ((($_5$i)) + 12|0); //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_39$i$i$sroa$6$0$$sroa_idx>>2] = 2; //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  $_39$i$i$sroa$7$0$$sroa_idx = ((($_5$i)) + 16|0); //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_39$i$i$sroa$7$0$$sroa_idx>>2] = $_46$i$i; //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  $_39$i$i$sroa$8$0$$sroa_idx = ((($_5$i)) + 20|0); //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_39$i$i$sroa$8$0$$sroa_idx>>2] = 2; //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  $33 = (__ZN4core3fmt5write17h6c8dbcbe50728a23E($30,$32,$_5$i)|0); //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
  $$pre$phiZ2D = $11;$_0$0$off0$i = $33;
  $34 = $_0$0$off0$i&1; //@line 248 "/checkout/src/libcore/fmt/builders.rs"
  HEAP8[$4>>0] = $34; //@line 248 "/checkout/src/libcore/fmt/builders.rs"
  HEAP8[$$pre$phiZ2D>>0] = 1; //@line 267 "/checkout/src/libcore/fmt/builders.rs"
  STACKTOP = sp;return; //@line 268 "/checkout/src/libcore/fmt/builders.rs"
 } else {
  $13 = $7; //@line 249 "/checkout/src/libcore/fmt/builders.rs"
  HEAP32[$writer$i$i>>2] = $13; //@line 250 "/checkout/src/libcore/fmt/builders.rs"
  $$fca$1$gep$i$i = ((($writer$i$i)) + 4|0); //@line 250 "/checkout/src/libcore/fmt/builders.rs"
  $$expand_i1_val = 0; //@line 250 "/checkout/src/libcore/fmt/builders.rs"
  HEAP8[$$fca$1$gep$i$i>>0] = $$expand_i1_val; //@line 250 "/checkout/src/libcore/fmt/builders.rs"
  $14 = ($12<<24>>24)!=(0); //@line 251 "/checkout/src/libcore/fmt/builders.rs"
  $str$c$sink$i$i = $14 ? 25937 : 39452; //@line 251 "/checkout/src/libcore/fmt/builders.rs"
  $15 = $12&255; //@line 251 "/checkout/src/libcore/fmt/builders.rs"
  HEAP32[$prefix$i$i>>2] = $str$c$sink$i$i;
  $16 = ((($prefix$i$i)) + 4|0);
  HEAP32[$16>>2] = $15;
  HEAP32[$_20$i$i>>2] = $prefix$i$i; //@line 256 "/checkout/src/libcore/fmt/builders.rs"
  $17 = ((($_20$i$i)) + 4|0); //@line 256 "/checkout/src/libcore/fmt/builders.rs"
  HEAP32[$17>>2] = 465; //@line 256 "/checkout/src/libcore/fmt/builders.rs"
  $18 = ((($_20$i$i)) + 8|0); //@line 256 "/checkout/src/libcore/fmt/builders.rs"
  HEAP32[$18>>2] = $entry; //@line 256 "/checkout/src/libcore/fmt/builders.rs"
  $19 = ((($_20$i$i)) + 12|0); //@line 256 "/checkout/src/libcore/fmt/builders.rs"
  HEAP32[$19>>2] = 466; //@line 256 "/checkout/src/libcore/fmt/builders.rs"
  HEAP32[$_13$i$i>>2] = 10564; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $20 = ((($_13$i$i)) + 4|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$20>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $_5$sroa$0$0$$sroa_idx$i11$i$i = ((($_13$i$i)) + 8|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_5$sroa$0$0$$sroa_idx$i11$i$i>>2] = 10580; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $_5$sroa$4$0$$sroa_idx2$i13$i$i = ((($_13$i$i)) + 12|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_5$sroa$4$0$$sroa_idx2$i13$i$i>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $21 = ((($_13$i$i)) + 16|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$21>>2] = $_20$i$i; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $22 = ((($_13$i$i)) + 20|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$22>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $23 = (__ZN4core3fmt5write17h6c8dbcbe50728a23E($writer$i$i,10516,$_13$i$i)|0); //@line 256 "/checkout/src/libcore/fmt/builders.rs"
  $$pre$phiZ2D = $11;$_0$0$off0$i = $23;
  $34 = $_0$0$off0$i&1; //@line 248 "/checkout/src/libcore/fmt/builders.rs"
  HEAP8[$4>>0] = $34; //@line 248 "/checkout/src/libcore/fmt/builders.rs"
  HEAP8[$$pre$phiZ2D>>0] = 1; //@line 267 "/checkout/src/libcore/fmt/builders.rs"
  STACKTOP = sp;return; //@line 268 "/checkout/src/libcore/fmt/builders.rs"
 }
}
function __ZN4core3fmt8builders9DebugList5entry17h1543c7a40da348bfE($self,$entry$0,$entry$1) {
 $self = $self|0;
 $entry$0 = $entry$0|0;
 $entry$1 = $entry$1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4core3fmt8builders10DebugInner5entry17h8cc0e21ae4fbd1fcE_llvm_74AC89CB($self,$entry$0,$entry$1); //@line 402 "/checkout/src/libcore/fmt/builders.rs"
 return ($self|0); //@line 404 "/checkout/src/libcore/fmt/builders.rs"
}
function __ZN4core3fmt8builders9DebugList6finish17h7208d0b6ae987befE($0) {
 $0 = $0|0;
 var $$sink$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$off0$i = 0, $_3$0$off0$i = 0, $phitmp$i = 0, $str$c$sink$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0; //@line 280 "/checkout/src/libcore/fmt/builders.rs"
 $2 = HEAP32[$1>>2]|0; //@line 1367 "/checkout/src/libcore/fmt/mod.rs"
 $3 = $2 & 4; //@line 1367 "/checkout/src/libcore/fmt/mod.rs"
 $4 = ($3|0)==(0); //@line 1367 "/checkout/src/libcore/fmt/mod.rs"
 if ($4) {
  label = 2;
 } else {
  $5 = ((($0)) + 5|0); //@line 271 "/checkout/src/libcore/fmt/builders.rs"
  $6 = HEAP8[$5>>0]|0; //@line 271 "/checkout/src/libcore/fmt/builders.rs"
  $7 = ($6<<24>>24)==(0); //@line 271 "/checkout/src/libcore/fmt/builders.rs"
  if ($7) {
   label = 2;
  } else {
   $_3$0$off0$i = 1;
  }
 }
 if ((label|0) == 2) {
  $_3$0$off0$i = 0;
 }
 $8 = ((($0)) + 4|0); //@line 276 "/checkout/src/libcore/fmt/builders.rs"
 $9 = HEAP8[$8>>0]|0; //@line 276 "/checkout/src/libcore/fmt/builders.rs"
 $10 = ($9<<24>>24)==(0); //@line 276 "/checkout/src/libcore/fmt/builders.rs"
 if (!($10)) {
  HEAP8[$8>>0] = 1; //@line 276 "/checkout/src/libcore/fmt/builders.rs"
  $_0$0$off0$i = 1;
  return ($_0$0$off0$i|0); //@line 423 "/checkout/src/libcore/fmt/builders.rs"
 }
 $str$c$sink$i = $_3$0$off0$i ? 25938 : 39452; //@line 271 "/checkout/src/libcore/fmt/builders.rs"
 $$sink$i = $_3$0$off0$i&1; //@line 271 "/checkout/src/libcore/fmt/builders.rs"
 $11 = ((($1)) + 24|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $12 = HEAP32[$11>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $13 = ((($1)) + 28|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $14 = HEAP32[$13>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $15 = ((($14)) + 12|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $16 = HEAP32[$15>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $17 = (FUNCTION_TABLE_iiii[$16 & 511]($12,$str$c$sink$i,$$sink$i)|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $phitmp$i = $17&1;
 HEAP8[$8>>0] = $phitmp$i; //@line 276 "/checkout/src/libcore/fmt/builders.rs"
 if ($17) {
  $_0$0$off0$i = 1;
  return ($_0$0$off0$i|0); //@line 423 "/checkout/src/libcore/fmt/builders.rs"
 }
 $18 = HEAP32[$0>>2]|0; //@line 422 "/checkout/src/libcore/fmt/builders.rs"
 $19 = ((($18)) + 24|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $20 = HEAP32[$19>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $21 = ((($18)) + 28|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $22 = HEAP32[$21>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $23 = ((($22)) + 12|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $24 = HEAP32[$23>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $25 = (FUNCTION_TABLE_iiii[$24 & 511]($20,8784,1)|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $_0$0$off0$i = $25;
 return ($_0$0$off0$i|0); //@line 423 "/checkout/src/libcore/fmt/builders.rs"
}
function __ZN4core12char_private5check17h50aab69963223afdE_llvm_7DB7D98F($x,$singletonuppers$0,$singletonuppers$1,$singletonlowers$0,$singletonlowers$1,$normal$0,$normal$1) {
 $x = $x|0;
 $singletonuppers$0 = $singletonuppers$0|0;
 $singletonuppers$1 = $singletonuppers$1|0;
 $singletonlowers$0 = $singletonlowers$0|0;
 $singletonlowers$1 = $singletonlowers$1|0;
 $normal$0 = $normal$0|0;
 $normal$1 = $normal$1|0;
 var $$old = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $_0$0$off0 = 0, $abi_cast$sroa$4$0$extract$trunc43 = 0, $abi_cast$sroa$4$0$extract$trunc43$in = 0, $current$0$off041 = 0, $iter1$sroa$0$0 = 0, $len$0 = 0, $lowerstart$04662 = 0, $normal$sroa$0$1 = 0, $normal$sroa$0$3 = 0, $or$cond = 0, $phitmp$i$i$i1 = 0, $x2$040 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($x&65535) >>> 8; //@line 16 "/checkout/src/libcore/char_private.rs"
 $1 = $0&255; //@line 16 "/checkout/src/libcore/char_private.rs"
 $2 = (($singletonuppers$0) + ($singletonuppers$1<<1)|0); //@line 289 "/checkout/src/libcore/slice/mod.rs"
 $3 = ($singletonuppers$1|0)==(0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
 L1: do {
  if (!($3)) {
   $4 = $x&255;
   $$pn = $singletonuppers$0;$lowerstart$04662 = 0;
   L3: while(1) {
    $5 = ((($$pn)) + 2|0); //@line 623 "/checkout/src/libcore/ptr.rs"
    $6 = HEAP8[$$pn>>0]|0; //@line 18 "/checkout/src/libcore/char_private.rs"
    $7 = ((($$pn)) + 1|0); //@line 18 "/checkout/src/libcore/char_private.rs"
    $8 = HEAP8[$7>>0]|0; //@line 18 "/checkout/src/libcore/char_private.rs"
    $9 = $8&255; //@line 19 "/checkout/src/libcore/char_private.rs"
    $10 = (($9) + ($lowerstart$04662))|0; //@line 19 "/checkout/src/libcore/char_private.rs"
    $11 = ($1<<24>>24)==($6<<24>>24); //@line 20 "/checkout/src/libcore/char_private.rs"
    if (!($11)) {
     $20 = ($1&255)<($6&255); //@line 26 "/checkout/src/libcore/char_private.rs"
     $21 = ($5|0)==($2|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
     $or$cond = $21 | $20; //@line 26 "/checkout/src/libcore/char_private.rs"
     if ($or$cond) {
      break L1;
     } else {
      $$pn = $5;$lowerstart$04662 = $10;
      continue;
     }
    }
    $16 = ($10>>>0)<($lowerstart$04662>>>0); //@line 873 "/checkout/src/libcore/slice/mod.rs"
    if ($16) {
     label = 7;
     break;
    }
    $17 = ($10>>>0)>($singletonlowers$1>>>0); //@line 875 "/checkout/src/libcore/slice/mod.rs"
    if ($17) {
     label = 9;
     break;
    }
    $18 = (($singletonlowers$0) + ($lowerstart$04662)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
    $19 = (($18) + ($9)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
    $iter1$sroa$0$0 = $18;
    while(1) {
     $22 = ($iter1$sroa$0$0|0)==($19|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
     if ($22) {
      break;
     }
     $23 = ((($iter1$sroa$0$0)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $24 = HEAP8[$iter1$sroa$0$0>>0]|0; //@line 21 "/checkout/src/libcore/char_private.rs"
     $25 = ($24<<24>>24)==($4<<24>>24); //@line 22 "/checkout/src/libcore/char_private.rs"
     if ($25) {
      $_0$0$off0 = 0;
      label = 15;
      break L3;
     } else {
      $iter1$sroa$0$0 = $23;
     }
    }
    $$old = ($5|0)==($2|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
    if ($$old) {
     break L1;
    } else {
     $$pn = $5;$lowerstart$04662 = $10;
    }
   }
   if ((label|0) == 7) {
    __ZN4core5slice22slice_index_order_fail17h620f0e130a93079bE($lowerstart$04662,$10); //@line 874 "/checkout/src/libcore/slice/mod.rs"
    // unreachable; //@line 874 "/checkout/src/libcore/slice/mod.rs"
   }
   else if ((label|0) == 9) {
    __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($10,$singletonlowers$1); //@line 876 "/checkout/src/libcore/slice/mod.rs"
    // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
   }
   else if ((label|0) == 15) {
    return ($_0$0$off0|0); //@line 48 "/checkout/src/libcore/char_private.rs"
   }
  }
 } while(0);
 $12 = (($normal$0) + ($normal$1)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
 $13 = ($normal$1|0)==(0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
 if ($13) {
  $_0$0$off0 = 1;
  return ($_0$0$off0|0); //@line 48 "/checkout/src/libcore/char_private.rs"
 }
 $14 = ((($normal$0)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
 $15 = $x&65535; //@line 32 "/checkout/src/libcore/char_private.rs"
 $abi_cast$sroa$4$0$extract$trunc43$in = $normal$0;$current$0$off041 = 1;$normal$sroa$0$1 = $14;$x2$040 = $15;
 while(1) {
  $abi_cast$sroa$4$0$extract$trunc43 = HEAP8[$abi_cast$sroa$4$0$extract$trunc43$in>>0]|0; //@line 103 "/checkout/src/libcore/clone.rs"
  $26 = ($abi_cast$sroa$4$0$extract$trunc43<<24>>24)<(0); //@line 36 "/checkout/src/libcore/char_private.rs"
  if ($26) {
   $27 = ($normal$sroa$0$1|0)==($12|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
   if ($27) {
    label = 18;
    break;
   }
   $28 = ((($normal$sroa$0$1)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
   $29 = HEAP8[$normal$sroa$0$1>>0]|0; //@line 103 "/checkout/src/libcore/clone.rs"
   $phitmp$i$i$i1 = $29&255; //@line 406 "/checkout/src/libcore/option.rs"
   $30 = $abi_cast$sroa$4$0$extract$trunc43 & 127; //@line 37 "/checkout/src/libcore/char_private.rs"
   $31 = $30&255; //@line 37 "/checkout/src/libcore/char_private.rs"
   $32 = $31 << 8; //@line 37 "/checkout/src/libcore/char_private.rs"
   $33 = $phitmp$i$i$i1 | $32; //@line 37 "/checkout/src/libcore/char_private.rs"
   $len$0 = $33;$normal$sroa$0$3 = $28;
  } else {
   $34 = $abi_cast$sroa$4$0$extract$trunc43&255; //@line 39 "/checkout/src/libcore/char_private.rs"
   $len$0 = $34;$normal$sroa$0$3 = $normal$sroa$0$1;
  }
  $35 = (($x2$040) - ($len$0))|0; //@line 41 "/checkout/src/libcore/char_private.rs"
  $36 = ($35|0)<(0); //@line 42 "/checkout/src/libcore/char_private.rs"
  if ($36) {
   $_0$0$off0 = $current$0$off041;
   label = 15;
   break;
  }
  $37 = $current$0$off041 ^ 1; //@line 45 "/checkout/src/libcore/char_private.rs"
  $38 = ($normal$sroa$0$3|0)==($12|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
  if ($38) {
   $_0$0$off0 = $37;
   label = 15;
   break;
  }
  $39 = ((($normal$sroa$0$3)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $abi_cast$sroa$4$0$extract$trunc43$in = $normal$sroa$0$3;$current$0$off041 = $37;$normal$sroa$0$1 = $39;$x2$040 = $35;
 }
 if ((label|0) == 15) {
  return ($_0$0$off0|0); //@line 48 "/checkout/src/libcore/char_private.rs"
 }
 else if ((label|0) == 18) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(10692); //@line 335 "/checkout/src/libcore/option.rs"
  // unreachable;
 }
 return (0)|0;
}
function __ZN4core12char_private12is_printable17h984811d8dbf8afa6E($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$shrunk = 0, $not$ = 0, $or$cond = 0, $or$cond22 = 0, $or$cond24 = 0, $or$cond26 = 0, $or$cond28 = 0, $x$off = 0;
 var $x$off10 = 0, $x$off11 = 0, $x$off12 = 0, $x$off7 = 0, $x$off9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $x&65535; //@line 52 "/checkout/src/libcore/char_private.rs"
 $1 = ($x>>>0)<(65536); //@line 53 "/checkout/src/libcore/char_private.rs"
 if ($1) {
  $2 = (__ZN4core12char_private5check17h50aab69963223afdE_llvm_7DB7D98F($0,25951,41,26033,304,26337,326)|0); //@line 54 "/checkout/src/libcore/char_private.rs"
  $_0$0$shrunk = $2;
  return ($_0$0$shrunk|0); //@line 81 "/checkout/src/libcore/char_private.rs"
 }
 $3 = ($x>>>0)<(131072); //@line 55 "/checkout/src/libcore/char_private.rs"
 if ($3) {
  $4 = (__ZN4core12char_private5check17h50aab69963223afdE_llvm_7DB7D98F($0,26663,33,26729,150,26879,360)|0); //@line 56 "/checkout/src/libcore/char_private.rs"
  $_0$0$shrunk = $4;
  return ($_0$0$shrunk|0); //@line 81 "/checkout/src/libcore/char_private.rs"
 }
 $x$off = (($x) + -173783)|0; //@line 58 "/checkout/src/libcore/char_private.rs"
 $5 = ($x$off>>>0)<(41); //@line 58 "/checkout/src/libcore/char_private.rs"
 $x$off7 = (($x) + -177973)|0; //@line 61 "/checkout/src/libcore/char_private.rs"
 $6 = ($x$off7>>>0)<(11); //@line 61 "/checkout/src/libcore/char_private.rs"
 $or$cond = $5 | $6; //@line 58 "/checkout/src/libcore/char_private.rs"
 $7 = $x & 2097150; //@line 64 "/checkout/src/libcore/char_private.rs"
 $8 = ($7|0)==(178206); //@line 64 "/checkout/src/libcore/char_private.rs"
 $or$cond22 = $8 | $or$cond; //@line 58 "/checkout/src/libcore/char_private.rs"
 $x$off9 = (($x) + -183970)|0; //@line 67 "/checkout/src/libcore/char_private.rs"
 $9 = ($x$off9>>>0)<(14); //@line 67 "/checkout/src/libcore/char_private.rs"
 $or$cond24 = $9 | $or$cond22; //@line 58 "/checkout/src/libcore/char_private.rs"
 $x$off10 = (($x) + -191457)|0; //@line 70 "/checkout/src/libcore/char_private.rs"
 $10 = ($x$off10>>>0)<(3103); //@line 70 "/checkout/src/libcore/char_private.rs"
 $or$cond26 = $10 | $or$cond24; //@line 58 "/checkout/src/libcore/char_private.rs"
 $x$off11 = (($x) + -195102)|0; //@line 73 "/checkout/src/libcore/char_private.rs"
 $11 = ($x$off11>>>0)<(722658); //@line 73 "/checkout/src/libcore/char_private.rs"
 $or$cond28 = $11 | $or$cond26; //@line 58 "/checkout/src/libcore/char_private.rs"
 if ($or$cond28) {
  $_0$0$shrunk = 0;
  return ($_0$0$shrunk|0); //@line 81 "/checkout/src/libcore/char_private.rs"
 } else {
  $x$off12 = (($x) + -918000)|0; //@line 76 "/checkout/src/libcore/char_private.rs"
  $not$ = ($x$off12>>>0)>(196111); //@line 76 "/checkout/src/libcore/char_private.rs"
  return ($not$|0); //@line 76 "/checkout/src/libcore/char_private.rs"
 }
 return (0)|0;
}
function __ZN4core3num7flt2dec8strategy6dragon9mul_pow1017heb0706981ccc7f53E($x,$n) {
 $x = $x|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $carry$015$i = 0, $carry$015$i5 = 0, $iter$sroa$0$014$i = 0, $iter$sroa$0$014$i6 = 0;
 var $ret$i = 0, $retsz$0$i = 0, $retsz$0$i18 = 0, $retsz$0$i25 = 0, $retsz$0$i32 = 0, $retsz$0$i39 = 0, $sz$0$i = 0, $sz$0$i10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $ret$i = sp;
 $0 = $n & 7; //@line 45 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $1 = ($0|0)==(0); //@line 45 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 if (!($1)) {
  $2 = (10716 + ($0<<2)|0); //@line 825 "/checkout/src/libcore/slice/mod.rs"
  $3 = HEAP32[$2>>2]|0; //@line 45 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
  $4 = HEAP32[$x>>2]|0; //@line 259 "/checkout/src/libcore/num/bignum.rs"
  $5 = ($4>>>0)>(40); //@line 887 "/checkout/src/libcore/slice/mod.rs"
  if ($5) {
   __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($4,40); //@line 888 "/checkout/src/libcore/slice/mod.rs"
   // unreachable; //@line 888 "/checkout/src/libcore/slice/mod.rs"
  }
  $6 = (((($x)) + 4|0) + ($4<<2)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $7 = ($4|0)==(0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
  do {
   if ($7) {
    $sz$0$i = 0;
   } else {
    $8 = ((($x)) + 4|0); //@line 617 "/checkout/src/libcore/slice/mod.rs"
    $carry$015$i = 0;$iter$sroa$0$014$i = $8;
    while(1) {
     $11 = ((($iter$sroa$0$014$i)) + 4|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
     $12 = HEAP32[$iter$sroa$0$014$i>>2]|0; //@line 262 "/checkout/src/libcore/num/bignum.rs"
     $13 = (___muldi3(($12|0),0,($3|0),0)|0); //@line 72 "/checkout/src/libcore/num/bignum.rs"
     $14 = tempRet0; //@line 72 "/checkout/src/libcore/num/bignum.rs"
     $15 = (_i64Add(($13|0),($14|0),($carry$015$i|0),0)|0); //@line 72 "/checkout/src/libcore/num/bignum.rs"
     $10 = tempRet0; //@line 72 "/checkout/src/libcore/num/bignum.rs"
     HEAP32[$iter$sroa$0$014$i>>2] = $15; //@line 263 "/checkout/src/libcore/num/bignum.rs"
     $16 = ($11|0)==($6|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
     if ($16) {
      break;
     } else {
      $carry$015$i = $10;$iter$sroa$0$014$i = $11;
     }
    }
    $9 = ($10|0)==(0); //@line 266 "/checkout/src/libcore/num/bignum.rs"
    if ($9) {
     $sz$0$i = $4;
    } else {
     $17 = ($4>>>0)<(40); //@line 267 "/checkout/src/libcore/num/bignum.rs"
     if ($17) {
      HEAP32[$6>>2] = $10; //@line 267 "/checkout/src/libcore/num/bignum.rs"
      $18 = (($4) + 1)|0; //@line 268 "/checkout/src/libcore/num/bignum.rs"
      $sz$0$i = $18;
      break;
     } else {
      __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(12204,$4,40); //@line 267 "/checkout/src/libcore/num/bignum.rs"
      // unreachable; //@line 267 "/checkout/src/libcore/num/bignum.rs"
     }
    }
   }
  } while(0);
  HEAP32[$x>>2] = $sz$0$i; //@line 270 "/checkout/src/libcore/num/bignum.rs"
 }
 $19 = $n & 8; //@line 46 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $20 = ($19|0)==(0); //@line 46 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 if (!($20)) {
  $21 = HEAP32[$x>>2]|0; //@line 259 "/checkout/src/libcore/num/bignum.rs"
  $22 = ($21>>>0)>(40); //@line 887 "/checkout/src/libcore/slice/mod.rs"
  if ($22) {
   __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($21,40); //@line 888 "/checkout/src/libcore/slice/mod.rs"
   // unreachable; //@line 888 "/checkout/src/libcore/slice/mod.rs"
  }
  $23 = (((($x)) + 4|0) + ($21<<2)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $24 = ($21|0)==(0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
  do {
   if ($24) {
    $sz$0$i10 = 0;
   } else {
    $25 = ((($x)) + 4|0); //@line 617 "/checkout/src/libcore/slice/mod.rs"
    $carry$015$i5 = 0;$iter$sroa$0$014$i6 = $25;
    while(1) {
     $28 = ((($iter$sroa$0$014$i6)) + 4|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
     $29 = HEAP32[$iter$sroa$0$014$i6>>2]|0; //@line 262 "/checkout/src/libcore/num/bignum.rs"
     $30 = (___muldi3(($29|0),0,100000000,0)|0); //@line 72 "/checkout/src/libcore/num/bignum.rs"
     $31 = tempRet0; //@line 72 "/checkout/src/libcore/num/bignum.rs"
     $32 = (_i64Add(($30|0),($31|0),($carry$015$i5|0),0)|0); //@line 72 "/checkout/src/libcore/num/bignum.rs"
     $27 = tempRet0; //@line 72 "/checkout/src/libcore/num/bignum.rs"
     HEAP32[$iter$sroa$0$014$i6>>2] = $32; //@line 263 "/checkout/src/libcore/num/bignum.rs"
     $33 = ($28|0)==($23|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
     if ($33) {
      break;
     } else {
      $carry$015$i5 = $27;$iter$sroa$0$014$i6 = $28;
     }
    }
    $26 = ($27|0)==(0); //@line 266 "/checkout/src/libcore/num/bignum.rs"
    if ($26) {
     $sz$0$i10 = $21;
    } else {
     $34 = ($21>>>0)<(40); //@line 267 "/checkout/src/libcore/num/bignum.rs"
     if ($34) {
      HEAP32[$23>>2] = $27; //@line 267 "/checkout/src/libcore/num/bignum.rs"
      $35 = (($21) + 1)|0; //@line 268 "/checkout/src/libcore/num/bignum.rs"
      $sz$0$i10 = $35;
      break;
     } else {
      __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(12204,$21,40); //@line 267 "/checkout/src/libcore/num/bignum.rs"
      // unreachable; //@line 267 "/checkout/src/libcore/num/bignum.rs"
     }
    }
   }
  } while(0);
  HEAP32[$x>>2] = $sz$0$i10; //@line 270 "/checkout/src/libcore/num/bignum.rs"
 }
 $36 = $n & 16; //@line 47 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $37 = ($36|0)==(0); //@line 47 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 if (!($37)) {
  _memset(($ret$i|0),0,160)|0; //@line 372 "/checkout/src/libcore/num/bignum.rs"
  $38 = HEAP32[$x>>2]|0; //@line 373 "/checkout/src/libcore/num/bignum.rs"
  $39 = ($38>>>0)>(40); //@line 875 "/checkout/src/libcore/slice/mod.rs"
  if ($39) {
   __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($38,40); //@line 876 "/checkout/src/libcore/slice/mod.rs"
   // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
  }
  $40 = ($38>>>0)<(2); //@line 373 "/checkout/src/libcore/num/bignum.rs"
  $41 = ((($x)) + 4|0); //@line 155 "/checkout/src/libcore/num/bignum.rs"
  if ($40) {
   $42 = (__ZN4core3num6bignum8Big32x4010mul_digits9mul_inner17h97a87e8abc2f1b95E_llvm_AE20E124($ret$i,$41,$38,10756,2)|0); //@line 374 "/checkout/src/libcore/num/bignum.rs"
   $retsz$0$i = $42;
  } else {
   $43 = (__ZN4core3num6bignum8Big32x4010mul_digits9mul_inner17h97a87e8abc2f1b95E_llvm_AE20E124($ret$i,10756,2,$41,$38)|0); //@line 376 "/checkout/src/libcore/num/bignum.rs"
   $retsz$0$i = $43;
  }
  _memcpy(($41|0),($ret$i|0),160)|0; //@line 378 "/checkout/src/libcore/num/bignum.rs"
  HEAP32[$x>>2] = $retsz$0$i; //@line 379 "/checkout/src/libcore/num/bignum.rs"
 }
 $44 = $n & 32; //@line 48 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $45 = ($44|0)==(0); //@line 48 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 if (!($45)) {
  _memset(($ret$i|0),0,160)|0; //@line 372 "/checkout/src/libcore/num/bignum.rs"
  $46 = HEAP32[$x>>2]|0; //@line 373 "/checkout/src/libcore/num/bignum.rs"
  $47 = ($46>>>0)>(40); //@line 875 "/checkout/src/libcore/slice/mod.rs"
  if ($47) {
   __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($46,40); //@line 876 "/checkout/src/libcore/slice/mod.rs"
   // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
  }
  $48 = ($46>>>0)<(4); //@line 373 "/checkout/src/libcore/num/bignum.rs"
  $49 = ((($x)) + 4|0); //@line 155 "/checkout/src/libcore/num/bignum.rs"
  if ($48) {
   $50 = (__ZN4core3num6bignum8Big32x4010mul_digits9mul_inner17h97a87e8abc2f1b95E_llvm_AE20E124($ret$i,$49,$46,10764,4)|0); //@line 374 "/checkout/src/libcore/num/bignum.rs"
   $retsz$0$i18 = $50;
  } else {
   $51 = (__ZN4core3num6bignum8Big32x4010mul_digits9mul_inner17h97a87e8abc2f1b95E_llvm_AE20E124($ret$i,10764,4,$49,$46)|0); //@line 376 "/checkout/src/libcore/num/bignum.rs"
   $retsz$0$i18 = $51;
  }
  _memcpy(($49|0),($ret$i|0),160)|0; //@line 378 "/checkout/src/libcore/num/bignum.rs"
  HEAP32[$x>>2] = $retsz$0$i18; //@line 379 "/checkout/src/libcore/num/bignum.rs"
 }
 $52 = $n & 64; //@line 49 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $53 = ($52|0)==(0); //@line 49 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 if (!($53)) {
  _memset(($ret$i|0),0,160)|0; //@line 372 "/checkout/src/libcore/num/bignum.rs"
  $54 = HEAP32[$x>>2]|0; //@line 373 "/checkout/src/libcore/num/bignum.rs"
  $55 = ($54>>>0)>(40); //@line 875 "/checkout/src/libcore/slice/mod.rs"
  if ($55) {
   __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($54,40); //@line 876 "/checkout/src/libcore/slice/mod.rs"
   // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
  }
  $56 = ($54>>>0)<(7); //@line 373 "/checkout/src/libcore/num/bignum.rs"
  $57 = ((($x)) + 4|0); //@line 155 "/checkout/src/libcore/num/bignum.rs"
  if ($56) {
   $58 = (__ZN4core3num6bignum8Big32x4010mul_digits9mul_inner17h97a87e8abc2f1b95E_llvm_AE20E124($ret$i,$57,$54,10780,7)|0); //@line 374 "/checkout/src/libcore/num/bignum.rs"
   $retsz$0$i25 = $58;
  } else {
   $59 = (__ZN4core3num6bignum8Big32x4010mul_digits9mul_inner17h97a87e8abc2f1b95E_llvm_AE20E124($ret$i,10780,7,$57,$54)|0); //@line 376 "/checkout/src/libcore/num/bignum.rs"
   $retsz$0$i25 = $59;
  }
  _memcpy(($57|0),($ret$i|0),160)|0; //@line 378 "/checkout/src/libcore/num/bignum.rs"
  HEAP32[$x>>2] = $retsz$0$i25; //@line 379 "/checkout/src/libcore/num/bignum.rs"
 }
 $60 = $n & 128; //@line 50 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $61 = ($60|0)==(0); //@line 50 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 if (!($61)) {
  _memset(($ret$i|0),0,160)|0; //@line 372 "/checkout/src/libcore/num/bignum.rs"
  $62 = HEAP32[$x>>2]|0; //@line 373 "/checkout/src/libcore/num/bignum.rs"
  $63 = ($62>>>0)>(40); //@line 875 "/checkout/src/libcore/slice/mod.rs"
  if ($63) {
   __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($62,40); //@line 876 "/checkout/src/libcore/slice/mod.rs"
   // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
  }
  $64 = ($62>>>0)<(14); //@line 373 "/checkout/src/libcore/num/bignum.rs"
  $65 = ((($x)) + 4|0); //@line 155 "/checkout/src/libcore/num/bignum.rs"
  if ($64) {
   $66 = (__ZN4core3num6bignum8Big32x4010mul_digits9mul_inner17h97a87e8abc2f1b95E_llvm_AE20E124($ret$i,$65,$62,10808,14)|0); //@line 374 "/checkout/src/libcore/num/bignum.rs"
   $retsz$0$i32 = $66;
  } else {
   $67 = (__ZN4core3num6bignum8Big32x4010mul_digits9mul_inner17h97a87e8abc2f1b95E_llvm_AE20E124($ret$i,10808,14,$65,$62)|0); //@line 376 "/checkout/src/libcore/num/bignum.rs"
   $retsz$0$i32 = $67;
  }
  _memcpy(($65|0),($ret$i|0),160)|0; //@line 378 "/checkout/src/libcore/num/bignum.rs"
  HEAP32[$x>>2] = $retsz$0$i32; //@line 379 "/checkout/src/libcore/num/bignum.rs"
 }
 $68 = $n & 256; //@line 51 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $69 = ($68|0)==(0); //@line 51 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 if ($69) {
  STACKTOP = sp;return ($x|0); //@line 53 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 }
 _memset(($ret$i|0),0,160)|0; //@line 372 "/checkout/src/libcore/num/bignum.rs"
 $70 = HEAP32[$x>>2]|0; //@line 373 "/checkout/src/libcore/num/bignum.rs"
 $71 = ($70>>>0)>(40); //@line 875 "/checkout/src/libcore/slice/mod.rs"
 if ($71) {
  __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($70,40); //@line 876 "/checkout/src/libcore/slice/mod.rs"
  // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
 }
 $72 = ($70>>>0)<(27); //@line 373 "/checkout/src/libcore/num/bignum.rs"
 $73 = ((($x)) + 4|0); //@line 155 "/checkout/src/libcore/num/bignum.rs"
 if ($72) {
  $74 = (__ZN4core3num6bignum8Big32x4010mul_digits9mul_inner17h97a87e8abc2f1b95E_llvm_AE20E124($ret$i,$73,$70,10864,27)|0); //@line 374 "/checkout/src/libcore/num/bignum.rs"
  $retsz$0$i39 = $74;
 } else {
  $75 = (__ZN4core3num6bignum8Big32x4010mul_digits9mul_inner17h97a87e8abc2f1b95E_llvm_AE20E124($ret$i,10864,27,$73,$70)|0); //@line 376 "/checkout/src/libcore/num/bignum.rs"
  $retsz$0$i39 = $75;
 }
 _memcpy(($73|0),($ret$i|0),160)|0; //@line 378 "/checkout/src/libcore/num/bignum.rs"
 HEAP32[$x>>2] = $retsz$0$i39; //@line 379 "/checkout/src/libcore/num/bignum.rs"
 STACKTOP = sp;return ($x|0); //@line 53 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
}
function __ZN4core3num7flt2dec8strategy6dragon15format_shortest17h5594ba3d83ab635dE($retVal,$d,$buf$0,$buf$1) {
 $retVal = $retVal|0;
 $d = $d|0;
 $buf$0 = $buf$0|0;
 $buf$1 = $buf$1|0;
 var $$$i$i = 0, $$$i$i101 = 0, $$$i$i128 = 0, $$$i$i155 = 0, $$$i$le$i$i170 = 0, $$$i$le$i$i185 = 0, $$$i$le$i$i25 = 0, $$15 = 0, $$7$i$i = 0, $$7$i$i102 = 0, $$7$i$i129 = 0, $$7$i$i156 = 0, $$arith = 0, $$arith11 = 0, $$arith15 = 0, $$arith19 = 0, $$arith23 = 0, $$arith27 = 0, $$arith3 = 0, $$arith7 = 0;
 var $$idx$i = 0, $$idx$i123 = 0, $$idx$i150 = 0, $$idx$i96 = 0, $$idx$off$i = 0, $$idx$off$i124 = 0, $$idx$off$i151 = 0, $$idx$off$i97 = 0, $$overflow = 0, $$overflow12 = 0, $$overflow16 = 0, $$overflow20 = 0, $$overflow24 = 0, $$overflow28 = 0, $$overflow4 = 0, $$overflow8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $63$phi = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $72$phi = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $81$phi = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $_0$0$i$i167 = 0, $_0$0$i$i182 = 0, $_0$0$i$i22 = 0, $_0$0$sroa$speculated$i$i = 0, $_0$0$sroa$speculated$i$i106 = 0, $_0$0$sroa$speculated$i$i133 = 0, $_0$0$sroa$speculated$i$i160 = 0, $_0$0$sroa$speculated$i$i17 = 0, $_0$0$sroa$speculated$i$i175 = 0, $_0$0$sroa$speculated$i$i60 = 0, $_0$0$sroa$speculated$i$i60$lcssa = 0, $_0$0$sroa$speculated$i$i60446 = 0, $_0$0$sroa$speculated$i$i60448 = 0, $_0$0$sroa$speculated$i$i75 = 0, $_0$0$sroa$speculated$i$i79 = 0, $_0$1$i$i173 = 0, $_0$1$i$i188 = 0, $_0$1$i$i28 = 0, $_114 = 0;
 var $_173 = 0, $_7$sroa$0$0$$sroa_idx$i = 0, $_7$sroa$4$0$$sroa_idx$i = 0, $abi_cast$sroa$4$0$extract$shift = 0, $abi_cast$sroa$4$0$extract$trunc = 0, $base$i = 0, $carry$015$i = 0, $carry$015$i194 = 0, $carry$015$i207 = 0, $carry$015$i220 = 0, $carry$015$i38 = 0, $carry$015$i51 = 0, $d$0$i = 0, $d$1$i = 0, $d$2$i = 0, $d$3$i = 0, $i$0447 = 0, $i$2 = 0, $iter$sroa$0$014$i = 0, $iter$sroa$0$014$i195 = 0;
 var $iter$sroa$0$014$i208 = 0, $iter$sroa$0$014$i221 = 0, $iter$sroa$0$014$i39 = 0, $iter$sroa$0$014$i52 = 0, $k$0 = 0, $k$2 = 0, $mant = 0, $minus = 0, $noborrow$0$off010$i = 0, $noborrow$0$off010$i100 = 0, $noborrow$0$off010$i127 = 0, $noborrow$0$off010$i154 = 0, $not$$i$i166 = 0, $not$$i$i181 = 0, $not$$i$i21 = 0, $other$sroa$5$0$i$i = 0, $other$sroa$5$0$i$i110 = 0, $other$sroa$5$0$i$i137 = 0, $other$sroa$5$0$i$i164 = 0, $other$sroa$5$0$i$i179 = 0;
 var $other$sroa$5$0$i$i19 = 0, $other$sroa$5$0$i$i64 = 0, $other$sroa$5$0$i$i83 = 0, $plus = 0, $retVal$index1 = 0, $scale = 0, $scale2 = 0, $scale4 = 0, $scale8 = 0, $self$sroa$2$0$i$i = 0, $self$sroa$2$0$i$i109 = 0, $self$sroa$2$0$i$i136 = 0, $self$sroa$2$0$i$i163 = 0, $self$sroa$2$0$i$i178 = 0, $self$sroa$2$0$i$i18 = 0, $self$sroa$2$0$i$i63 = 0, $self$sroa$2$0$i$i82 = 0, $switch$i$i252tmp = 0, $switch$i1$i251tmp = 0, $switch$i2$i250tmp = 0;
 var $switch$i248tmp = 0, $switch$i3$i249tmp = 0, $sz$0$i = 0, $sz$0$i212 = 0, $sz$0$i225 = 0, $sz$0$i43 = 0, $sz$0$i56 = 0, $sz$010$i = 0, $sz$010$i12 = 0, $sz$010$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1648|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1648|0);
 $base$i = sp + 1480|0;
 $_173 = sp + 1312|0;
 $scale8 = sp + 1148|0;
 $scale4 = sp + 984|0;
 $scale2 = sp + 820|0;
 $_114 = sp + 656|0;
 $scale = sp + 492|0;
 $plus = sp + 328|0;
 $minus = sp + 164|0;
 $mant = sp;
 $0 = $d; //@line 91 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $1 = $0; //@line 91 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $2 = HEAP32[$1>>2]|0; //@line 91 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $3 = (($0) + 4)|0; //@line 91 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $4 = $3; //@line 91 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $5 = HEAP32[$4>>2]|0; //@line 91 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $6 = ($2|0)==(0); //@line 91 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $7 = ($5|0)==(0); //@line 91 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $8 = $6 & $7; //@line 91 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 if ($8) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(10972); //@line 91 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
  // unreachable; //@line 91 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 }
 $9 = ((($d)) + 8|0); //@line 92 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $10 = $9; //@line 92 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $11 = $10; //@line 92 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $12 = HEAP32[$11>>2]|0; //@line 92 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $13 = (($10) + 4)|0; //@line 92 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $14 = $13; //@line 92 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $15 = HEAP32[$14>>2]|0; //@line 92 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $16 = ($12|0)==(0); //@line 92 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $17 = ($15|0)==(0); //@line 92 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $18 = $16 & $17; //@line 92 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 if ($18) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(10996); //@line 92 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
  // unreachable; //@line 92 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 }
 $19 = ((($d)) + 16|0); //@line 93 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $20 = $19; //@line 93 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $21 = $20; //@line 93 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $22 = HEAP32[$21>>2]|0; //@line 93 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $23 = (($20) + 4)|0; //@line 93 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $24 = $23; //@line 93 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $25 = HEAP32[$24>>2]|0; //@line 93 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $26 = ($22|0)==(0); //@line 93 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $27 = ($25|0)==(0); //@line 93 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $28 = $26 & $27; //@line 93 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 if ($28) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(11020); //@line 93 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
  // unreachable; //@line 93 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 }
 $29 = (_i64Add(($2|0),($5|0),($22|0),($25|0))|0); //@line 1982 "/checkout/src/libcore/num/mod.rs"
 $30 = tempRet0; //@line 1982 "/checkout/src/libcore/num/mod.rs"
 $31 = ($30>>>0)<($5>>>0); //@line 1982 "/checkout/src/libcore/num/mod.rs"
 $32 = ($29>>>0)<($2>>>0); //@line 1982 "/checkout/src/libcore/num/mod.rs"
 $33 = ($30|0)==($5|0); //@line 1982 "/checkout/src/libcore/num/mod.rs"
 $34 = $33 & $32; //@line 1982 "/checkout/src/libcore/num/mod.rs"
 $35 = $31 | $34; //@line 1982 "/checkout/src/libcore/num/mod.rs"
 if ($35) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(11044); //@line 94 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
  // unreachable; //@line 94 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 }
 $36 = ($5>>>0)<($15>>>0); //@line 2008 "/checkout/src/libcore/num/mod.rs"
 $37 = ($2>>>0)<($12>>>0); //@line 2008 "/checkout/src/libcore/num/mod.rs"
 $38 = ($5|0)==($15|0); //@line 2008 "/checkout/src/libcore/num/mod.rs"
 $39 = $38 & $37; //@line 2008 "/checkout/src/libcore/num/mod.rs"
 $40 = $36 | $39; //@line 2008 "/checkout/src/libcore/num/mod.rs"
 if ($40) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(11068); //@line 95 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
  // unreachable; //@line 95 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 }
 $41 = ($buf$1>>>0)<(17); //@line 96 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 if ($41) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(11092); //@line 96 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
  // unreachable; //@line 96 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 }
 $42 = ((($d)) + 26|0); //@line 99 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $43 = HEAP8[$42>>0]|0; //@line 99 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $44 = ((($d)) + 24|0); //@line 103 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $45 = HEAP16[$44>>1]|0; //@line 103 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $46 = (_i64Add(($2|0),($5|0),-1,-1)|0); //@line 103 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $47 = tempRet0; //@line 103 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $48 = (_i64Add(($46|0),($47|0),($22|0),($25|0))|0); //@line 20 "/checkout/src/libcore/num/flt2dec/estimator.rs"
 $49 = tempRet0; //@line 20 "/checkout/src/libcore/num/flt2dec/estimator.rs"
 $50 = (_llvm_ctlz_i64(($48|0),($49|0),0)|0); //@line 1381 "/checkout/src/libcore/num/mod.rs"
 $51 = tempRet0; //@line 1381 "/checkout/src/libcore/num/mod.rs"
 $52 = (_i64Subtract(64,0,($50|0),($51|0))|0); //@line 20 "/checkout/src/libcore/num/flt2dec/estimator.rs"
 $53 = tempRet0; //@line 20 "/checkout/src/libcore/num/flt2dec/estimator.rs"
 $54 = $45 << 16 >> 16; //@line 23 "/checkout/src/libcore/num/flt2dec/estimator.rs"
 $55 = ($54|0)<(0); //@line 23 "/checkout/src/libcore/num/flt2dec/estimator.rs"
 $56 = $55 << 31 >> 31; //@line 23 "/checkout/src/libcore/num/flt2dec/estimator.rs"
 $57 = (_i64Add(($52|0),($53|0),($54|0),($56|0))|0); //@line 23 "/checkout/src/libcore/num/flt2dec/estimator.rs"
 $58 = tempRet0; //@line 23 "/checkout/src/libcore/num/flt2dec/estimator.rs"
 (___muldi3(($57|0),($58|0),1292913986,0)|0); //@line 23 "/checkout/src/libcore/num/flt2dec/estimator.rs"
 $59 = tempRet0; //@line 23 "/checkout/src/libcore/num/flt2dec/estimator.rs"
 $60 = $59&65535; //@line 23 "/checkout/src/libcore/num/flt2dec/estimator.rs"
 _memset(($base$i|0),0,160)|0; //@line 141 "/checkout/src/libcore/num/bignum.rs"
 $63 = $2;$66 = $5;$sz$010$i = 0;
 while(1) {
  $61 = ($sz$010$i>>>0)<(40); //@line 144 "/checkout/src/libcore/num/bignum.rs"
  if (!($61)) {
   label = 16;
   break;
  }
  $62 = (($base$i) + ($sz$010$i<<2)|0); //@line 144 "/checkout/src/libcore/num/bignum.rs"
  HEAP32[$62>>2] = $63; //@line 144 "/checkout/src/libcore/num/bignum.rs"
  $64 = (($sz$010$i) + 1)|0; //@line 146 "/checkout/src/libcore/num/bignum.rs"
  $65 = ($66|0)==(0); //@line 143 "/checkout/src/libcore/num/bignum.rs"
  $67 = (0)==(0); //@line 143 "/checkout/src/libcore/num/bignum.rs"
  $68 = $65 & $67; //@line 143 "/checkout/src/libcore/num/bignum.rs"
  if ($68) {
   break;
  } else {
   $63$phi = $66;$66 = 0;$sz$010$i = $64;$63 = $63$phi;
  }
 }
 if ((label|0) == 16) {
  __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(12148,$sz$010$i,40); //@line 144 "/checkout/src/libcore/num/bignum.rs"
  // unreachable; //@line 144 "/checkout/src/libcore/num/bignum.rs"
 }
 HEAP32[$mant>>2] = $64; //@line 148 "/checkout/src/libcore/num/bignum.rs"
 $69 = ((($mant)) + 4|0); //@line 148 "/checkout/src/libcore/num/bignum.rs"
 _memcpy(($69|0),($base$i|0),160)|0; //@line 148 "/checkout/src/libcore/num/bignum.rs"
 _memset(($base$i|0),0,160)|0; //@line 141 "/checkout/src/libcore/num/bignum.rs"
 $72 = $12;$75 = $15;$sz$010$i4 = 0;
 while(1) {
  $70 = ($sz$010$i4>>>0)<(40); //@line 144 "/checkout/src/libcore/num/bignum.rs"
  if (!($70)) {
   label = 20;
   break;
  }
  $71 = (($base$i) + ($sz$010$i4<<2)|0); //@line 144 "/checkout/src/libcore/num/bignum.rs"
  HEAP32[$71>>2] = $72; //@line 144 "/checkout/src/libcore/num/bignum.rs"
  $73 = (($sz$010$i4) + 1)|0; //@line 146 "/checkout/src/libcore/num/bignum.rs"
  $74 = ($75|0)==(0); //@line 143 "/checkout/src/libcore/num/bignum.rs"
  $76 = (0)==(0); //@line 143 "/checkout/src/libcore/num/bignum.rs"
  $77 = $74 & $76; //@line 143 "/checkout/src/libcore/num/bignum.rs"
  if ($77) {
   break;
  } else {
   $72$phi = $75;$75 = 0;$sz$010$i4 = $73;$72 = $72$phi;
  }
 }
 if ((label|0) == 20) {
  __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(12148,$sz$010$i4,40); //@line 144 "/checkout/src/libcore/num/bignum.rs"
  // unreachable; //@line 144 "/checkout/src/libcore/num/bignum.rs"
 }
 HEAP32[$minus>>2] = $73; //@line 148 "/checkout/src/libcore/num/bignum.rs"
 $78 = ((($minus)) + 4|0); //@line 148 "/checkout/src/libcore/num/bignum.rs"
 _memcpy(($78|0),($base$i|0),160)|0; //@line 148 "/checkout/src/libcore/num/bignum.rs"
 _memset(($base$i|0),0,160)|0; //@line 141 "/checkout/src/libcore/num/bignum.rs"
 $81 = $22;$84 = $25;$sz$010$i12 = 0;
 while(1) {
  $79 = ($sz$010$i12>>>0)<(40); //@line 144 "/checkout/src/libcore/num/bignum.rs"
  if (!($79)) {
   label = 24;
   break;
  }
  $80 = (($base$i) + ($sz$010$i12<<2)|0); //@line 144 "/checkout/src/libcore/num/bignum.rs"
  HEAP32[$80>>2] = $81; //@line 144 "/checkout/src/libcore/num/bignum.rs"
  $82 = (($sz$010$i12) + 1)|0; //@line 146 "/checkout/src/libcore/num/bignum.rs"
  $83 = ($84|0)==(0); //@line 143 "/checkout/src/libcore/num/bignum.rs"
  $85 = (0)==(0); //@line 143 "/checkout/src/libcore/num/bignum.rs"
  $86 = $83 & $85; //@line 143 "/checkout/src/libcore/num/bignum.rs"
  if ($86) {
   break;
  } else {
   $81$phi = $84;$84 = 0;$sz$010$i12 = $82;$81 = $81$phi;
  }
 }
 if ((label|0) == 24) {
  __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(12148,$sz$010$i12,40); //@line 144 "/checkout/src/libcore/num/bignum.rs"
  // unreachable; //@line 144 "/checkout/src/libcore/num/bignum.rs"
 }
 HEAP32[$plus>>2] = $82; //@line 148 "/checkout/src/libcore/num/bignum.rs"
 $87 = ((($plus)) + 4|0); //@line 148 "/checkout/src/libcore/num/bignum.rs"
 _memcpy(($87|0),($base$i|0),160)|0; //@line 148 "/checkout/src/libcore/num/bignum.rs"
 HEAP32[$scale>>2] = 1; //@line 134 "/checkout/src/libcore/num/bignum.rs"
 $_7$sroa$0$0$$sroa_idx$i = ((($scale)) + 4|0); //@line 134 "/checkout/src/libcore/num/bignum.rs"
 HEAP32[$_7$sroa$0$0$$sroa_idx$i>>2] = 1; //@line 134 "/checkout/src/libcore/num/bignum.rs"
 $_7$sroa$4$0$$sroa_idx$i = ((($scale)) + 8|0); //@line 134 "/checkout/src/libcore/num/bignum.rs"
 _memset(($_7$sroa$4$0$$sroa_idx$i|0),0,156)|0; //@line 134 "/checkout/src/libcore/num/bignum.rs"
 $88 = ($45<<16>>16)<(0); //@line 113 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 if ($88) {
  $89 = (0 - ($45))<<16>>16; //@line 114 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
  $90 = $89 << 16 >> 16; //@line 114 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
  (__ZN4core3num6bignum8Big32x408mul_pow217h07f349800f91ebf3E($scale,$90)|0); //@line 114 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 } else {
  $91 = $45 << 16 >> 16; //@line 116 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
  (__ZN4core3num6bignum8Big32x408mul_pow217h07f349800f91ebf3E($mant,$91)|0); //@line 116 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
  (__ZN4core3num6bignum8Big32x408mul_pow217h07f349800f91ebf3E($minus,$91)|0); //@line 117 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
  (__ZN4core3num6bignum8Big32x408mul_pow217h07f349800f91ebf3E($plus,$91)|0); //@line 118 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 }
 $92 = ($60<<16>>16)>(-1); //@line 122 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 if ($92) {
  $93 = $60 << 16 >> 16; //@line 123 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
  (__ZN4core3num7flt2dec8strategy6dragon9mul_pow1017heb0706981ccc7f53E($scale,$93)|0); //@line 123 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 } else {
  $94 = (0 - ($60))<<16>>16; //@line 125 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
  $95 = $94 << 16 >> 16; //@line 125 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
  (__ZN4core3num7flt2dec8strategy6dragon9mul_pow1017heb0706981ccc7f53E($mant,$95)|0); //@line 125 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
  (__ZN4core3num7flt2dec8strategy6dragon9mul_pow1017heb0706981ccc7f53E($minus,$95)|0); //@line 126 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
  (__ZN4core3num7flt2dec8strategy6dragon9mul_pow1017heb0706981ccc7f53E($plus,$95)|0); //@line 127 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 }
 $96 = HEAP32[$mant>>2]|0; //@line 465 "/checkout/src/libcore/num/bignum.rs"
 HEAP32[$_114>>2] = $96; //@line 465 "/checkout/src/libcore/num/bignum.rs"
 $97 = ((($_114)) + 4|0); //@line 465 "/checkout/src/libcore/num/bignum.rs"
 _memcpy(($97|0),($69|0),160)|0; //@line 465 "/checkout/src/libcore/num/bignum.rs"
 $98 = (__ZN4core3num6bignum8Big32x403add17h4df8566de1991267E($_114,$plus)|0); //@line 136 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $99 = HEAP32[$scale>>2]|0; //@line 456 "/checkout/src/libcore/num/bignum.rs"
 $100 = HEAP32[$_114>>2]|0; //@line 456 "/checkout/src/libcore/num/bignum.rs"
 $101 = ($100>>>0)>=($99>>>0); //@line 850 "/checkout/src/libcore/cmp.rs"
 $_0$0$sroa$speculated$i$i17 = $101 ? $100 : $99; //@line 462 "/checkout/src/libcore/cmp.rs"
 $102 = ($_0$0$sroa$speculated$i$i17>>>0)>(40); //@line 875 "/checkout/src/libcore/slice/mod.rs"
 if ($102) {
  __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($_0$0$sroa$speculated$i$i17,40); //@line 876 "/checkout/src/libcore/slice/mod.rs"
  // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
 }
 $103 = (((($scale)) + 4|0) + ($_0$0$sroa$speculated$i$i17<<2)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
 $104 = ((($_114)) + 4|0); //@line 388 "/checkout/src/libcore/slice/mod.rs"
 $105 = (((($_114)) + 4|0) + ($_0$0$sroa$speculated$i$i17<<2)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
 $other$sroa$5$0$i$i19 = $105;$self$sroa$2$0$i$i18 = $103;
 while(1) {
  $106 = ($self$sroa$2$0$i$i18|0)==($_7$sroa$0$0$$sroa_idx$i|0); //@line 1212 "/checkout/src/libcore/slice/mod.rs"
  $107 = ((($self$sroa$2$0$i$i18)) + -4|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  if ($106) {
   label = 35;
   break;
  }
  $108 = HEAP32[$107>>2]|0; //@line 103 "/checkout/src/libcore/clone.rs"
  $109 = ($other$sroa$5$0$i$i19|0)==($104|0); //@line 1212 "/checkout/src/libcore/slice/mod.rs"
  $110 = ((($other$sroa$5$0$i$i19)) + -4|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  if ($109) {
   label = 37;
   break;
  }
  $112 = HEAP32[$110>>2]|0; //@line 103 "/checkout/src/libcore/clone.rs"
  $113 = ($108|0)==($112|0); //@line 859 "/checkout/src/libcore/cmp.rs"
  if ($113) {
   $other$sroa$5$0$i$i19 = $110;$self$sroa$2$0$i$i18 = $107;
  } else {
   label = 38;
   break;
  }
 }
 if ((label|0) == 35) {
  $not$$i$i21 = ($other$sroa$5$0$i$i19|0)!=($104|0); //@line 404 "/checkout/src/libcore/option.rs"
  $_0$0$i$i22 = $not$$i$i21 << 31 >> 31; //@line 2126 "/checkout/src/libcore/iter/iterator.rs"
  $_0$1$i$i28 = $_0$0$i$i22;
  label = 40;
 }
 else if ((label|0) == 37) {
  label = 42;
 }
 else if ((label|0) == 38) {
  $111 = ($108>>>0)<($112>>>0); //@line 860 "/checkout/src/libcore/cmp.rs"
  $$$i$le$i$i25 = $111 ? -1 : 1; //@line 860 "/checkout/src/libcore/cmp.rs"
  $_0$1$i$i28 = $$$i$le$i$i25;
  label = 40;
 }
 if ((label|0) == 40) {
  $114 = ($_0$1$i$i28<<24>>24)<($43<<24>>24); //@line 860 "/checkout/src/libcore/cmp.rs"
  if ($114) {
   $115 = (($60) + 1)<<16>>16; //@line 138 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
   $k$0 = $115;
  } else {
   label = 42;
  }
 }
 if ((label|0) == 42) {
  $116 = HEAP32[$mant>>2]|0; //@line 259 "/checkout/src/libcore/num/bignum.rs"
  $117 = ($116>>>0)>(40); //@line 887 "/checkout/src/libcore/slice/mod.rs"
  if ($117) {
   __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($116,40); //@line 888 "/checkout/src/libcore/slice/mod.rs"
   // unreachable; //@line 888 "/checkout/src/libcore/slice/mod.rs"
  }
  $118 = (((($mant)) + 4|0) + ($116<<2)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $119 = ($116|0)==(0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
  do {
   if ($119) {
    $sz$0$i = 0;
   } else {
    $120 = ((($mant)) + 4|0); //@line 617 "/checkout/src/libcore/slice/mod.rs"
    $carry$015$i = 0;$iter$sroa$0$014$i = $120;
    while(1) {
     $123 = ((($iter$sroa$0$014$i)) + 4|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
     $124 = HEAP32[$iter$sroa$0$014$i>>2]|0; //@line 262 "/checkout/src/libcore/num/bignum.rs"
     $125 = (___muldi3(($124|0),0,10,0)|0); //@line 72 "/checkout/src/libcore/num/bignum.rs"
     $126 = tempRet0; //@line 72 "/checkout/src/libcore/num/bignum.rs"
     $127 = (_i64Add(($125|0),($126|0),($carry$015$i|0),0)|0); //@line 72 "/checkout/src/libcore/num/bignum.rs"
     $122 = tempRet0; //@line 72 "/checkout/src/libcore/num/bignum.rs"
     HEAP32[$iter$sroa$0$014$i>>2] = $127; //@line 263 "/checkout/src/libcore/num/bignum.rs"
     $128 = ($123|0)==($118|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
     if ($128) {
      break;
     } else {
      $carry$015$i = $122;$iter$sroa$0$014$i = $123;
     }
    }
    $121 = ($122|0)==(0); //@line 266 "/checkout/src/libcore/num/bignum.rs"
    if ($121) {
     $sz$0$i = $116;
    } else {
     $129 = ($116>>>0)<(40); //@line 267 "/checkout/src/libcore/num/bignum.rs"
     if ($129) {
      HEAP32[$118>>2] = $122; //@line 267 "/checkout/src/libcore/num/bignum.rs"
      $130 = (($116) + 1)|0; //@line 268 "/checkout/src/libcore/num/bignum.rs"
      $sz$0$i = $130;
      break;
     } else {
      __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(12204,$116,40); //@line 267 "/checkout/src/libcore/num/bignum.rs"
      // unreachable; //@line 267 "/checkout/src/libcore/num/bignum.rs"
     }
    }
   }
  } while(0);
  HEAP32[$mant>>2] = $sz$0$i; //@line 270 "/checkout/src/libcore/num/bignum.rs"
  $131 = HEAP32[$minus>>2]|0; //@line 259 "/checkout/src/libcore/num/bignum.rs"
  $132 = ($131>>>0)>(40); //@line 887 "/checkout/src/libcore/slice/mod.rs"
  if ($132) {
   __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($131,40); //@line 888 "/checkout/src/libcore/slice/mod.rs"
   // unreachable; //@line 888 "/checkout/src/libcore/slice/mod.rs"
  }
  $133 = (((($minus)) + 4|0) + ($131<<2)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $134 = ($131|0)==(0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
  do {
   if ($134) {
    $sz$0$i43 = 0;
   } else {
    $135 = ((($minus)) + 4|0); //@line 617 "/checkout/src/libcore/slice/mod.rs"
    $carry$015$i38 = 0;$iter$sroa$0$014$i39 = $135;
    while(1) {
     $138 = ((($iter$sroa$0$014$i39)) + 4|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
     $139 = HEAP32[$iter$sroa$0$014$i39>>2]|0; //@line 262 "/checkout/src/libcore/num/bignum.rs"
     $140 = (___muldi3(($139|0),0,10,0)|0); //@line 72 "/checkout/src/libcore/num/bignum.rs"
     $141 = tempRet0; //@line 72 "/checkout/src/libcore/num/bignum.rs"
     $142 = (_i64Add(($140|0),($141|0),($carry$015$i38|0),0)|0); //@line 72 "/checkout/src/libcore/num/bignum.rs"
     $137 = tempRet0; //@line 72 "/checkout/src/libcore/num/bignum.rs"
     HEAP32[$iter$sroa$0$014$i39>>2] = $142; //@line 263 "/checkout/src/libcore/num/bignum.rs"
     $143 = ($138|0)==($133|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
     if ($143) {
      break;
     } else {
      $carry$015$i38 = $137;$iter$sroa$0$014$i39 = $138;
     }
    }
    $136 = ($137|0)==(0); //@line 266 "/checkout/src/libcore/num/bignum.rs"
    if ($136) {
     $sz$0$i43 = $131;
    } else {
     $144 = ($131>>>0)<(40); //@line 267 "/checkout/src/libcore/num/bignum.rs"
     if ($144) {
      HEAP32[$133>>2] = $137; //@line 267 "/checkout/src/libcore/num/bignum.rs"
      $145 = (($131) + 1)|0; //@line 268 "/checkout/src/libcore/num/bignum.rs"
      $sz$0$i43 = $145;
      break;
     } else {
      __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(12204,$131,40); //@line 267 "/checkout/src/libcore/num/bignum.rs"
      // unreachable; //@line 267 "/checkout/src/libcore/num/bignum.rs"
     }
    }
   }
  } while(0);
  HEAP32[$minus>>2] = $sz$0$i43; //@line 270 "/checkout/src/libcore/num/bignum.rs"
  $146 = HEAP32[$plus>>2]|0; //@line 259 "/checkout/src/libcore/num/bignum.rs"
  $147 = ($146>>>0)>(40); //@line 887 "/checkout/src/libcore/slice/mod.rs"
  if ($147) {
   __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($146,40); //@line 888 "/checkout/src/libcore/slice/mod.rs"
   // unreachable; //@line 888 "/checkout/src/libcore/slice/mod.rs"
  }
  $148 = (((($plus)) + 4|0) + ($146<<2)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $149 = ($146|0)==(0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
  do {
   if ($149) {
    $sz$0$i56 = 0;
   } else {
    $150 = ((($plus)) + 4|0); //@line 617 "/checkout/src/libcore/slice/mod.rs"
    $carry$015$i51 = 0;$iter$sroa$0$014$i52 = $150;
    while(1) {
     $153 = ((($iter$sroa$0$014$i52)) + 4|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
     $154 = HEAP32[$iter$sroa$0$014$i52>>2]|0; //@line 262 "/checkout/src/libcore/num/bignum.rs"
     $155 = (___muldi3(($154|0),0,10,0)|0); //@line 72 "/checkout/src/libcore/num/bignum.rs"
     $156 = tempRet0; //@line 72 "/checkout/src/libcore/num/bignum.rs"
     $157 = (_i64Add(($155|0),($156|0),($carry$015$i51|0),0)|0); //@line 72 "/checkout/src/libcore/num/bignum.rs"
     $152 = tempRet0; //@line 72 "/checkout/src/libcore/num/bignum.rs"
     HEAP32[$iter$sroa$0$014$i52>>2] = $157; //@line 263 "/checkout/src/libcore/num/bignum.rs"
     $158 = ($153|0)==($148|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
     if ($158) {
      break;
     } else {
      $carry$015$i51 = $152;$iter$sroa$0$014$i52 = $153;
     }
    }
    $151 = ($152|0)==(0); //@line 266 "/checkout/src/libcore/num/bignum.rs"
    if ($151) {
     $sz$0$i56 = $146;
    } else {
     $159 = ($146>>>0)<(40); //@line 267 "/checkout/src/libcore/num/bignum.rs"
     if ($159) {
      HEAP32[$148>>2] = $152; //@line 267 "/checkout/src/libcore/num/bignum.rs"
      $160 = (($146) + 1)|0; //@line 268 "/checkout/src/libcore/num/bignum.rs"
      $sz$0$i56 = $160;
      break;
     } else {
      __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(12204,$146,40); //@line 267 "/checkout/src/libcore/num/bignum.rs"
      // unreachable; //@line 267 "/checkout/src/libcore/num/bignum.rs"
     }
    }
   }
  } while(0);
  HEAP32[$plus>>2] = $sz$0$i56; //@line 270 "/checkout/src/libcore/num/bignum.rs"
  $k$0 = $60;
 }
 $161 = ((($scale)) + 4|0); //@line 465 "/checkout/src/libcore/num/bignum.rs"
 HEAP32[$scale2>>2] = $99; //@line 465 "/checkout/src/libcore/num/bignum.rs"
 $162 = ((($scale2)) + 4|0); //@line 465 "/checkout/src/libcore/num/bignum.rs"
 _memcpy(($162|0),($161|0),160)|0; //@line 465 "/checkout/src/libcore/num/bignum.rs"
 (__ZN4core3num6bignum8Big32x408mul_pow217h07f349800f91ebf3E($scale2,1)|0); //@line 146 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $163 = HEAP32[$scale>>2]|0; //@line 465 "/checkout/src/libcore/num/bignum.rs"
 HEAP32[$scale4>>2] = $163; //@line 465 "/checkout/src/libcore/num/bignum.rs"
 $164 = ((($scale4)) + 4|0); //@line 465 "/checkout/src/libcore/num/bignum.rs"
 _memcpy(($164|0),($161|0),160)|0; //@line 465 "/checkout/src/libcore/num/bignum.rs"
 (__ZN4core3num6bignum8Big32x408mul_pow217h07f349800f91ebf3E($scale4,2)|0); //@line 147 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $165 = HEAP32[$scale>>2]|0; //@line 465 "/checkout/src/libcore/num/bignum.rs"
 HEAP32[$scale8>>2] = $165; //@line 465 "/checkout/src/libcore/num/bignum.rs"
 $166 = ((($scale8)) + 4|0); //@line 465 "/checkout/src/libcore/num/bignum.rs"
 _memcpy(($166|0),($161|0),160)|0; //@line 465 "/checkout/src/libcore/num/bignum.rs"
 (__ZN4core3num6bignum8Big32x408mul_pow217h07f349800f91ebf3E($scale8,3)|0); //@line 148 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $167 = HEAP32[$mant>>2]|0; //@line 456 "/checkout/src/libcore/num/bignum.rs"
 $168 = HEAP32[$scale8>>2]|0; //@line 456 "/checkout/src/libcore/num/bignum.rs"
 $169 = ($168>>>0)>=($167>>>0); //@line 850 "/checkout/src/libcore/cmp.rs"
 $_0$0$sroa$speculated$i$i60446 = $169 ? $168 : $167; //@line 462 "/checkout/src/libcore/cmp.rs"
 $170 = ($_0$0$sroa$speculated$i$i60446>>>0)>(40); //@line 875 "/checkout/src/libcore/slice/mod.rs"
 if ($170) {
  $_0$0$sroa$speculated$i$i60$lcssa = $_0$0$sroa$speculated$i$i60446;
  __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($_0$0$sroa$speculated$i$i60$lcssa,40); //@line 876 "/checkout/src/libcore/slice/mod.rs"
  // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
 }
 $171 = ((($mant)) + 4|0);
 $172 = ((($scale8)) + 4|0);
 $173 = ((($scale4)) + 4|0);
 $174 = ((($scale2)) + 4|0);
 $175 = ((($minus)) + 4|0);
 $176 = ((($_173)) + 4|0);
 $177 = ((($plus)) + 4|0);
 $189 = $168;$190 = $167;$_0$0$sroa$speculated$i$i60448 = $_0$0$sroa$speculated$i$i60446;$i$0447 = 0;
 L104: while(1) {
  $178 = (((($mant)) + 4|0) + ($_0$0$sroa$speculated$i$i60448<<2)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $179 = (((($scale8)) + 4|0) + ($_0$0$sroa$speculated$i$i60448<<2)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $other$sroa$5$0$i$i64 = $179;$self$sroa$2$0$i$i63 = $178;
  while(1) {
   $180 = ($self$sroa$2$0$i$i63|0)==($171|0); //@line 1212 "/checkout/src/libcore/slice/mod.rs"
   $181 = ((($self$sroa$2$0$i$i63)) + -4|0); //@line 623 "/checkout/src/libcore/ptr.rs"
   if ($180) {
    label = 78;
    break;
   }
   $182 = HEAP32[$181>>2]|0; //@line 103 "/checkout/src/libcore/clone.rs"
   $183 = ($other$sroa$5$0$i$i64|0)==($172|0); //@line 1212 "/checkout/src/libcore/slice/mod.rs"
   $184 = ((($other$sroa$5$0$i$i64)) + -4|0); //@line 623 "/checkout/src/libcore/ptr.rs"
   if ($183) {
    label = 79;
    break;
   }
   $186 = HEAP32[$184>>2]|0; //@line 103 "/checkout/src/libcore/clone.rs"
   $187 = ($182|0)==($186|0); //@line 859 "/checkout/src/libcore/cmp.rs"
   if ($187) {
    $other$sroa$5$0$i$i64 = $184;$self$sroa$2$0$i$i63 = $181;
   } else {
    label = 76;
    break;
   }
  }
  if ((label|0) == 76) {
   label = 0;
   $185 = ($182>>>0)<($186>>>0); //@line 860 "/checkout/src/libcore/cmp.rs"
   if ($185) {
    $204 = $190;$d$0$i = 0;
   } else {
    label = 79;
   }
  }
  else if ((label|0) == 78) {
   label = 0;
   $switch$i$i252tmp = ($other$sroa$5$0$i$i64|0)==($172|0); //@line 711 "/checkout/src/libcore/cmp.rs"
   if ($switch$i$i252tmp) {
    label = 79;
   } else {
    $204 = $190;$d$0$i = 0;
   }
  }
  if ((label|0) == 79) {
   label = 0;
   $188 = ($189>>>0)>=($190>>>0); //@line 850 "/checkout/src/libcore/cmp.rs"
   $_0$0$sroa$speculated$i$i75 = $188 ? $189 : $190; //@line 462 "/checkout/src/libcore/cmp.rs"
   $191 = ($_0$0$sroa$speculated$i$i75>>>0)>(40); //@line 887 "/checkout/src/libcore/slice/mod.rs"
   if ($191) {
    label = 80;
    break;
   }
   $$idx$i = $_0$0$sroa$speculated$i$i75 << 2; //@line 664 "/checkout/src/libcore/num/mod.rs"
   $192 = (($$idx$i|0) / 4)&-1; //@line 700 "/checkout/src/libcore/ptr.rs"
   $$idx$off$i = $$idx$i | 3; //@line 1093 "/checkout/src/libcore/iter/mod.rs"
   $193 = ($$idx$off$i>>>0)<(7); //@line 1093 "/checkout/src/libcore/iter/mod.rs"
   if (!($193)) {
    $195 = 0;$noborrow$0$off010$i = 1;
    while(1) {
     $194 = (($195) + 1)|0; //@line 1095 "/checkout/src/libcore/iter/mod.rs"
     $196 = (((($mant)) + 4|0) + ($195<<2)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
     $197 = (((($scale8)) + 4|0) + ($195<<2)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $198 = HEAP32[$196>>2]|0; //@line 245 "/checkout/src/libcore/num/bignum.rs"
     $199 = HEAP32[$197>>2]|0; //@line 245 "/checkout/src/libcore/num/bignum.rs"
     $200 = $199 ^ -1; //@line 245 "/checkout/src/libcore/num/bignum.rs"
     $$arith27 = (($198) + ($200))|0; //@line 62 "/checkout/src/libcore/num/bignum.rs"
     $$overflow28 = ($$arith27>>>0)<($198>>>0); //@line 62 "/checkout/src/libcore/num/bignum.rs"
     $$$i$i = $noborrow$0$off010$i&1; //@line 64 "/checkout/src/libcore/num/bignum.rs"
     $$arith23 = (($$arith27) + ($$$i$i))|0; //@line 64 "/checkout/src/libcore/num/bignum.rs"
     $$overflow24 = ($$arith23>>>0)<($$arith27>>>0); //@line 64 "/checkout/src/libcore/num/bignum.rs"
     $$7$i$i = $$overflow28 | $$overflow24; //@line 66 "/checkout/src/libcore/num/bignum.rs"
     HEAP32[$196>>2] = $$arith23; //@line 246 "/checkout/src/libcore/num/bignum.rs"
     $201 = ($194>>>0)<($192>>>0); //@line 1093 "/checkout/src/libcore/iter/mod.rs"
     if ($201) {
      $195 = $194;$noborrow$0$off010$i = $$7$i$i;
     } else {
      break;
     }
    }
    if (!($$7$i$i)) {
     label = 84;
     break;
    }
   }
   HEAP32[$mant>>2] = $_0$0$sroa$speculated$i$i75; //@line 250 "/checkout/src/libcore/num/bignum.rs"
   $204 = $_0$0$sroa$speculated$i$i75;$d$0$i = 8;
  }
  $202 = HEAP32[$scale4>>2]|0; //@line 456 "/checkout/src/libcore/num/bignum.rs"
  $203 = ($202>>>0)>=($204>>>0); //@line 850 "/checkout/src/libcore/cmp.rs"
  $_0$0$sroa$speculated$i$i79 = $203 ? $202 : $204; //@line 462 "/checkout/src/libcore/cmp.rs"
  $205 = ($_0$0$sroa$speculated$i$i79>>>0)>(40); //@line 875 "/checkout/src/libcore/slice/mod.rs"
  if ($205) {
   label = 87;
   break;
  }
  $206 = (((($mant)) + 4|0) + ($_0$0$sroa$speculated$i$i79<<2)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $207 = (((($scale4)) + 4|0) + ($_0$0$sroa$speculated$i$i79<<2)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $other$sroa$5$0$i$i83 = $207;$self$sroa$2$0$i$i82 = $206;
  while(1) {
   $208 = ($self$sroa$2$0$i$i82|0)==($171|0); //@line 1212 "/checkout/src/libcore/slice/mod.rs"
   $209 = ((($self$sroa$2$0$i$i82)) + -4|0); //@line 623 "/checkout/src/libcore/ptr.rs"
   if ($208) {
    label = 93;
    break;
   }
   $210 = HEAP32[$209>>2]|0; //@line 103 "/checkout/src/libcore/clone.rs"
   $211 = ($other$sroa$5$0$i$i83|0)==($173|0); //@line 1212 "/checkout/src/libcore/slice/mod.rs"
   $212 = ((($other$sroa$5$0$i$i83)) + -4|0); //@line 623 "/checkout/src/libcore/ptr.rs"
   if ($211) {
    label = 94;
    break;
   }
   $214 = HEAP32[$212>>2]|0; //@line 103 "/checkout/src/libcore/clone.rs"
   $215 = ($210|0)==($214|0); //@line 859 "/checkout/src/libcore/cmp.rs"
   if ($215) {
    $other$sroa$5$0$i$i83 = $212;$self$sroa$2$0$i$i82 = $209;
   } else {
    label = 91;
    break;
   }
  }
  if ((label|0) == 91) {
   label = 0;
   $213 = ($210>>>0)<($214>>>0); //@line 860 "/checkout/src/libcore/cmp.rs"
   if ($213) {
    $229 = $204;$d$1$i = $d$0$i;
   } else {
    label = 94;
   }
  }
  else if ((label|0) == 93) {
   label = 0;
   $switch$i1$i251tmp = ($other$sroa$5$0$i$i83|0)==($173|0); //@line 711 "/checkout/src/libcore/cmp.rs"
   if ($switch$i1$i251tmp) {
    label = 94;
   } else {
    $229 = $204;$d$1$i = $d$0$i;
   }
  }
  if ((label|0) == 94) {
   label = 0;
   $216 = $d$0$i | 4; //@line 70 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
   $$idx$i96 = $_0$0$sroa$speculated$i$i79 << 2; //@line 664 "/checkout/src/libcore/num/mod.rs"
   $217 = (($$idx$i96|0) / 4)&-1; //@line 700 "/checkout/src/libcore/ptr.rs"
   $$idx$off$i97 = $$idx$i96 | 3; //@line 1093 "/checkout/src/libcore/iter/mod.rs"
   $218 = ($$idx$off$i97>>>0)<(7); //@line 1093 "/checkout/src/libcore/iter/mod.rs"
   if (!($218)) {
    $220 = 0;$noborrow$0$off010$i100 = 1;
    while(1) {
     $219 = (($220) + 1)|0; //@line 1095 "/checkout/src/libcore/iter/mod.rs"
     $221 = (((($mant)) + 4|0) + ($220<<2)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
     $222 = (((($scale4)) + 4|0) + ($220<<2)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $223 = HEAP32[$221>>2]|0; //@line 245 "/checkout/src/libcore/num/bignum.rs"
     $224 = HEAP32[$222>>2]|0; //@line 245 "/checkout/src/libcore/num/bignum.rs"
     $225 = $224 ^ -1; //@line 245 "/checkout/src/libcore/num/bignum.rs"
     $$arith19 = (($223) + ($225))|0; //@line 62 "/checkout/src/libcore/num/bignum.rs"
     $$overflow20 = ($$arith19>>>0)<($223>>>0); //@line 62 "/checkout/src/libcore/num/bignum.rs"
     $$$i$i101 = $noborrow$0$off010$i100&1; //@line 64 "/checkout/src/libcore/num/bignum.rs"
     $$arith15 = (($$arith19) + ($$$i$i101))|0; //@line 64 "/checkout/src/libcore/num/bignum.rs"
     $$overflow16 = ($$arith15>>>0)<($$arith19>>>0); //@line 64 "/checkout/src/libcore/num/bignum.rs"
     $$7$i$i102 = $$overflow20 | $$overflow16; //@line 66 "/checkout/src/libcore/num/bignum.rs"
     HEAP32[$221>>2] = $$arith15; //@line 246 "/checkout/src/libcore/num/bignum.rs"
     $226 = ($219>>>0)<($217>>>0); //@line 1093 "/checkout/src/libcore/iter/mod.rs"
     if ($226) {
      $220 = $219;$noborrow$0$off010$i100 = $$7$i$i102;
     } else {
      break;
     }
    }
    if (!($$7$i$i102)) {
     label = 97;
     break;
    }
   }
   HEAP32[$mant>>2] = $_0$0$sroa$speculated$i$i79; //@line 250 "/checkout/src/libcore/num/bignum.rs"
   $229 = $_0$0$sroa$speculated$i$i79;$d$1$i = $216;
  }
  $227 = HEAP32[$scale2>>2]|0; //@line 456 "/checkout/src/libcore/num/bignum.rs"
  $228 = ($227>>>0)>=($229>>>0); //@line 850 "/checkout/src/libcore/cmp.rs"
  $_0$0$sroa$speculated$i$i106 = $228 ? $227 : $229; //@line 462 "/checkout/src/libcore/cmp.rs"
  $230 = ($_0$0$sroa$speculated$i$i106>>>0)>(40); //@line 875 "/checkout/src/libcore/slice/mod.rs"
  if ($230) {
   label = 100;
   break;
  }
  $231 = (((($mant)) + 4|0) + ($_0$0$sroa$speculated$i$i106<<2)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $232 = (((($scale2)) + 4|0) + ($_0$0$sroa$speculated$i$i106<<2)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $other$sroa$5$0$i$i110 = $232;$self$sroa$2$0$i$i109 = $231;
  while(1) {
   $233 = ($self$sroa$2$0$i$i109|0)==($171|0); //@line 1212 "/checkout/src/libcore/slice/mod.rs"
   $234 = ((($self$sroa$2$0$i$i109)) + -4|0); //@line 623 "/checkout/src/libcore/ptr.rs"
   if ($233) {
    label = 106;
    break;
   }
   $235 = HEAP32[$234>>2]|0; //@line 103 "/checkout/src/libcore/clone.rs"
   $236 = ($other$sroa$5$0$i$i110|0)==($174|0); //@line 1212 "/checkout/src/libcore/slice/mod.rs"
   $237 = ((($other$sroa$5$0$i$i110)) + -4|0); //@line 623 "/checkout/src/libcore/ptr.rs"
   if ($236) {
    label = 107;
    break;
   }
   $239 = HEAP32[$237>>2]|0; //@line 103 "/checkout/src/libcore/clone.rs"
   $240 = ($235|0)==($239|0); //@line 859 "/checkout/src/libcore/cmp.rs"
   if ($240) {
    $other$sroa$5$0$i$i110 = $237;$self$sroa$2$0$i$i109 = $234;
   } else {
    label = 104;
    break;
   }
  }
  if ((label|0) == 104) {
   label = 0;
   $238 = ($235>>>0)<($239>>>0); //@line 860 "/checkout/src/libcore/cmp.rs"
   if ($238) {
    $254 = $229;$d$2$i = $d$1$i;
   } else {
    label = 107;
   }
  }
  else if ((label|0) == 106) {
   label = 0;
   $switch$i2$i250tmp = ($other$sroa$5$0$i$i110|0)==($174|0); //@line 711 "/checkout/src/libcore/cmp.rs"
   if ($switch$i2$i250tmp) {
    label = 107;
   } else {
    $254 = $229;$d$2$i = $d$1$i;
   }
  }
  if ((label|0) == 107) {
   label = 0;
   $241 = (($d$1$i) + 2)<<24>>24; //@line 71 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
   $$idx$i123 = $_0$0$sroa$speculated$i$i106 << 2; //@line 664 "/checkout/src/libcore/num/mod.rs"
   $242 = (($$idx$i123|0) / 4)&-1; //@line 700 "/checkout/src/libcore/ptr.rs"
   $$idx$off$i124 = $$idx$i123 | 3; //@line 1093 "/checkout/src/libcore/iter/mod.rs"
   $243 = ($$idx$off$i124>>>0)<(7); //@line 1093 "/checkout/src/libcore/iter/mod.rs"
   if (!($243)) {
    $245 = 0;$noborrow$0$off010$i127 = 1;
    while(1) {
     $244 = (($245) + 1)|0; //@line 1095 "/checkout/src/libcore/iter/mod.rs"
     $246 = (((($mant)) + 4|0) + ($245<<2)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
     $247 = (((($scale2)) + 4|0) + ($245<<2)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $248 = HEAP32[$246>>2]|0; //@line 245 "/checkout/src/libcore/num/bignum.rs"
     $249 = HEAP32[$247>>2]|0; //@line 245 "/checkout/src/libcore/num/bignum.rs"
     $250 = $249 ^ -1; //@line 245 "/checkout/src/libcore/num/bignum.rs"
     $$arith11 = (($248) + ($250))|0; //@line 62 "/checkout/src/libcore/num/bignum.rs"
     $$overflow12 = ($$arith11>>>0)<($248>>>0); //@line 62 "/checkout/src/libcore/num/bignum.rs"
     $$$i$i128 = $noborrow$0$off010$i127&1; //@line 64 "/checkout/src/libcore/num/bignum.rs"
     $$arith7 = (($$arith11) + ($$$i$i128))|0; //@line 64 "/checkout/src/libcore/num/bignum.rs"
     $$overflow8 = ($$arith7>>>0)<($$arith11>>>0); //@line 64 "/checkout/src/libcore/num/bignum.rs"
     $$7$i$i129 = $$overflow12 | $$overflow8; //@line 66 "/checkout/src/libcore/num/bignum.rs"
     HEAP32[$246>>2] = $$arith7; //@line 246 "/checkout/src/libcore/num/bignum.rs"
     $251 = ($244>>>0)<($242>>>0); //@line 1093 "/checkout/src/libcore/iter/mod.rs"
     if ($251) {
      $245 = $244;$noborrow$0$off010$i127 = $$7$i$i129;
     } else {
      break;
     }
    }
    if (!($$7$i$i129)) {
     label = 110;
     break;
    }
   }
   HEAP32[$mant>>2] = $_0$0$sroa$speculated$i$i106; //@line 250 "/checkout/src/libcore/num/bignum.rs"
   $254 = $_0$0$sroa$speculated$i$i106;$d$2$i = $241;
  }
  $252 = HEAP32[$scale>>2]|0; //@line 456 "/checkout/src/libcore/num/bignum.rs"
  $253 = ($252>>>0)>=($254>>>0); //@line 850 "/checkout/src/libcore/cmp.rs"
  $_0$0$sroa$speculated$i$i133 = $253 ? $252 : $254; //@line 462 "/checkout/src/libcore/cmp.rs"
  $255 = ($_0$0$sroa$speculated$i$i133>>>0)>(40); //@line 875 "/checkout/src/libcore/slice/mod.rs"
  if ($255) {
   label = 113;
   break;
  }
  $256 = (((($mant)) + 4|0) + ($_0$0$sroa$speculated$i$i133<<2)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $257 = (((($scale)) + 4|0) + ($_0$0$sroa$speculated$i$i133<<2)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $other$sroa$5$0$i$i137 = $257;$self$sroa$2$0$i$i136 = $256;
  while(1) {
   $258 = ($self$sroa$2$0$i$i136|0)==($171|0); //@line 1212 "/checkout/src/libcore/slice/mod.rs"
   $259 = ((($self$sroa$2$0$i$i136)) + -4|0); //@line 623 "/checkout/src/libcore/ptr.rs"
   if ($258) {
    label = 119;
    break;
   }
   $260 = HEAP32[$259>>2]|0; //@line 103 "/checkout/src/libcore/clone.rs"
   $261 = ($other$sroa$5$0$i$i137|0)==($_7$sroa$0$0$$sroa_idx$i|0); //@line 1212 "/checkout/src/libcore/slice/mod.rs"
   $262 = ((($other$sroa$5$0$i$i137)) + -4|0); //@line 623 "/checkout/src/libcore/ptr.rs"
   if ($261) {
    label = 120;
    break;
   }
   $264 = HEAP32[$262>>2]|0; //@line 103 "/checkout/src/libcore/clone.rs"
   $265 = ($260|0)==($264|0); //@line 859 "/checkout/src/libcore/cmp.rs"
   if ($265) {
    $other$sroa$5$0$i$i137 = $262;$self$sroa$2$0$i$i136 = $259;
   } else {
    label = 117;
    break;
   }
  }
  if ((label|0) == 117) {
   label = 0;
   $263 = ($260>>>0)<($264>>>0); //@line 860 "/checkout/src/libcore/cmp.rs"
   if ($263) {
    $283 = $254;$d$3$i = $d$2$i;
   } else {
    label = 120;
   }
  }
  else if ((label|0) == 119) {
   label = 0;
   $switch$i3$i249tmp = ($other$sroa$5$0$i$i137|0)==($_7$sroa$0$0$$sroa_idx$i|0); //@line 711 "/checkout/src/libcore/cmp.rs"
   if ($switch$i3$i249tmp) {
    label = 120;
   } else {
    $283 = $254;$d$3$i = $d$2$i;
   }
  }
  if ((label|0) == 120) {
   label = 0;
   $266 = (($d$2$i) + 1)<<24>>24; //@line 72 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
   $$idx$i150 = $_0$0$sroa$speculated$i$i133 << 2; //@line 664 "/checkout/src/libcore/num/mod.rs"
   $267 = (($$idx$i150|0) / 4)&-1; //@line 700 "/checkout/src/libcore/ptr.rs"
   $$idx$off$i151 = $$idx$i150 | 3; //@line 1093 "/checkout/src/libcore/iter/mod.rs"
   $268 = ($$idx$off$i151>>>0)<(7); //@line 1093 "/checkout/src/libcore/iter/mod.rs"
   if (!($268)) {
    $270 = 0;$noborrow$0$off010$i154 = 1;
    while(1) {
     $269 = (($270) + 1)|0; //@line 1095 "/checkout/src/libcore/iter/mod.rs"
     $271 = (((($mant)) + 4|0) + ($270<<2)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
     $272 = (((($scale)) + 4|0) + ($270<<2)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $273 = HEAP32[$271>>2]|0; //@line 245 "/checkout/src/libcore/num/bignum.rs"
     $274 = HEAP32[$272>>2]|0; //@line 245 "/checkout/src/libcore/num/bignum.rs"
     $275 = $274 ^ -1; //@line 245 "/checkout/src/libcore/num/bignum.rs"
     $$arith3 = (($273) + ($275))|0; //@line 62 "/checkout/src/libcore/num/bignum.rs"
     $$overflow4 = ($$arith3>>>0)<($273>>>0); //@line 62 "/checkout/src/libcore/num/bignum.rs"
     $$$i$i155 = $noborrow$0$off010$i154&1; //@line 64 "/checkout/src/libcore/num/bignum.rs"
     $$arith = (($$arith3) + ($$$i$i155))|0; //@line 64 "/checkout/src/libcore/num/bignum.rs"
     $$overflow = ($$arith>>>0)<($$arith3>>>0); //@line 64 "/checkout/src/libcore/num/bignum.rs"
     $$7$i$i156 = $$overflow4 | $$overflow; //@line 66 "/checkout/src/libcore/num/bignum.rs"
     HEAP32[$271>>2] = $$arith; //@line 246 "/checkout/src/libcore/num/bignum.rs"
     $276 = ($269>>>0)<($267>>>0); //@line 1093 "/checkout/src/libcore/iter/mod.rs"
     if ($276) {
      $270 = $269;$noborrow$0$off010$i154 = $$7$i$i156;
     } else {
      break;
     }
    }
    if (!($$7$i$i156)) {
     label = 123;
     break;
    }
   }
   HEAP32[$mant>>2] = $_0$0$sroa$speculated$i$i133; //@line 250 "/checkout/src/libcore/num/bignum.rs"
   $283 = $_0$0$sroa$speculated$i$i133;$d$3$i = $266;
  }
  $277 = ($i$0447>>>0)<($buf$1>>>0); //@line 164 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
  if (!($277)) {
   label = 182;
   break;
  }
  $278 = (($buf$0) + ($i$0447)|0); //@line 164 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
  $279 = (($d$3$i) + 48)<<24>>24; //@line 164 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
  HEAP8[$278>>0] = $279; //@line 164 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
  $280 = (($i$0447) + 1)|0; //@line 165 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
  $281 = HEAP32[$minus>>2]|0; //@line 456 "/checkout/src/libcore/num/bignum.rs"
  $282 = ($281>>>0)>=($283>>>0); //@line 850 "/checkout/src/libcore/cmp.rs"
  $_0$0$sroa$speculated$i$i160 = $282 ? $281 : $283; //@line 462 "/checkout/src/libcore/cmp.rs"
  $284 = ($_0$0$sroa$speculated$i$i160>>>0)>(40); //@line 875 "/checkout/src/libcore/slice/mod.rs"
  if ($284) {
   label = 127;
   break;
  }
  $285 = (((($mant)) + 4|0) + ($_0$0$sroa$speculated$i$i160<<2)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $286 = (((($minus)) + 4|0) + ($_0$0$sroa$speculated$i$i160<<2)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $other$sroa$5$0$i$i164 = $286;$self$sroa$2$0$i$i163 = $285;
  while(1) {
   $287 = ($self$sroa$2$0$i$i163|0)==($171|0); //@line 1212 "/checkout/src/libcore/slice/mod.rs"
   $288 = ((($self$sroa$2$0$i$i163)) + -4|0); //@line 623 "/checkout/src/libcore/ptr.rs"
   if ($287) {
    label = 130;
    break;
   }
   $289 = HEAP32[$288>>2]|0; //@line 103 "/checkout/src/libcore/clone.rs"
   $290 = ($other$sroa$5$0$i$i164|0)==($175|0); //@line 1212 "/checkout/src/libcore/slice/mod.rs"
   $291 = ((($other$sroa$5$0$i$i164)) + -4|0); //@line 623 "/checkout/src/libcore/ptr.rs"
   if ($290) {
    $_0$1$i$i173 = 1;
    break;
   }
   $293 = HEAP32[$291>>2]|0; //@line 103 "/checkout/src/libcore/clone.rs"
   $294 = ($289|0)==($293|0); //@line 859 "/checkout/src/libcore/cmp.rs"
   if ($294) {
    $other$sroa$5$0$i$i164 = $291;$self$sroa$2$0$i$i163 = $288;
   } else {
    label = 132;
    break;
   }
  }
  if ((label|0) == 130) {
   label = 0;
   $not$$i$i166 = ($other$sroa$5$0$i$i164|0)!=($175|0); //@line 404 "/checkout/src/libcore/option.rs"
   $_0$0$i$i167 = $not$$i$i166 << 31 >> 31; //@line 2126 "/checkout/src/libcore/iter/iterator.rs"
   $_0$1$i$i173 = $_0$0$i$i167;
  }
  else if ((label|0) == 132) {
   label = 0;
   $292 = ($289>>>0)<($293>>>0); //@line 860 "/checkout/src/libcore/cmp.rs"
   $$$i$le$i$i170 = $292 ? -1 : 1; //@line 860 "/checkout/src/libcore/cmp.rs"
   $_0$1$i$i173 = $$$i$le$i$i170;
  }
  $295 = ($_0$1$i$i173<<24>>24)<($43<<24>>24); //@line 860 "/checkout/src/libcore/cmp.rs"
  HEAP32[$_173>>2] = $283; //@line 465 "/checkout/src/libcore/num/bignum.rs"
  _memcpy(($176|0),($69|0),160)|0; //@line 465 "/checkout/src/libcore/num/bignum.rs"
  $296 = (__ZN4core3num6bignum8Big32x403add17h4df8566de1991267E($_173,$plus)|0); //@line 199 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
  $297 = HEAP32[$scale>>2]|0; //@line 456 "/checkout/src/libcore/num/bignum.rs"
  $298 = HEAP32[$_173>>2]|0; //@line 456 "/checkout/src/libcore/num/bignum.rs"
  $299 = ($298>>>0)>=($297>>>0); //@line 850 "/checkout/src/libcore/cmp.rs"
  $_0$0$sroa$speculated$i$i175 = $299 ? $298 : $297; //@line 462 "/checkout/src/libcore/cmp.rs"
  $300 = ($_0$0$sroa$speculated$i$i175>>>0)>(40); //@line 875 "/checkout/src/libcore/slice/mod.rs"
  if ($300) {
   label = 135;
   break;
  }
  $301 = (((($scale)) + 4|0) + ($_0$0$sroa$speculated$i$i175<<2)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $302 = ((($_173)) + 4|0); //@line 388 "/checkout/src/libcore/slice/mod.rs"
  $303 = (((($_173)) + 4|0) + ($_0$0$sroa$speculated$i$i175<<2)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $other$sroa$5$0$i$i179 = $303;$self$sroa$2$0$i$i178 = $301;
  while(1) {
   $304 = ($self$sroa$2$0$i$i178|0)==($_7$sroa$0$0$$sroa_idx$i|0); //@line 1212 "/checkout/src/libcore/slice/mod.rs"
   $305 = ((($self$sroa$2$0$i$i178)) + -4|0); //@line 623 "/checkout/src/libcore/ptr.rs"
   if ($304) {
    label = 138;
    break;
   }
   $306 = HEAP32[$305>>2]|0; //@line 103 "/checkout/src/libcore/clone.rs"
   $307 = ($other$sroa$5$0$i$i179|0)==($302|0); //@line 1212 "/checkout/src/libcore/slice/mod.rs"
   $308 = ((($other$sroa$5$0$i$i179)) + -4|0); //@line 623 "/checkout/src/libcore/ptr.rs"
   if ($307) {
    $_0$1$i$i188 = 1;
    break;
   }
   $310 = HEAP32[$308>>2]|0; //@line 103 "/checkout/src/libcore/clone.rs"
   $311 = ($306|0)==($310|0); //@line 859 "/checkout/src/libcore/cmp.rs"
   if ($311) {
    $other$sroa$5$0$i$i179 = $308;$self$sroa$2$0$i$i178 = $305;
   } else {
    label = 140;
    break;
   }
  }
  if ((label|0) == 138) {
   label = 0;
   $not$$i$i181 = ($other$sroa$5$0$i$i179|0)!=($302|0); //@line 404 "/checkout/src/libcore/option.rs"
   $_0$0$i$i182 = $not$$i$i181 << 31 >> 31; //@line 2126 "/checkout/src/libcore/iter/iterator.rs"
   $_0$1$i$i188 = $_0$0$i$i182;
  }
  else if ((label|0) == 140) {
   label = 0;
   $309 = ($306>>>0)<($310>>>0); //@line 860 "/checkout/src/libcore/cmp.rs"
   $$$i$le$i$i185 = $309 ? -1 : 1; //@line 860 "/checkout/src/libcore/cmp.rs"
   $_0$1$i$i188 = $$$i$le$i$i185;
  }
  $312 = ($_0$1$i$i188<<24>>24)<($43<<24>>24); //@line 860 "/checkout/src/libcore/cmp.rs"
  $$15 = $295 | $312; //@line 200 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
  if ($$15) {
   label = 143;
   break;
  }
  $313 = HEAP32[$mant>>2]|0; //@line 259 "/checkout/src/libcore/num/bignum.rs"
  $314 = ($313>>>0)>(40); //@line 887 "/checkout/src/libcore/slice/mod.rs"
  if ($314) {
   label = 145;
   break;
  }
  $315 = (((($mant)) + 4|0) + ($313<<2)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $316 = ($313|0)==(0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
  do {
   if ($316) {
    $327 = 0;
   } else {
    $carry$015$i194 = 0;$iter$sroa$0$014$i195 = $171;
    while(1) {
     $319 = ((($iter$sroa$0$014$i195)) + 4|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
     $320 = HEAP32[$iter$sroa$0$014$i195>>2]|0; //@line 262 "/checkout/src/libcore/num/bignum.rs"
     $321 = (___muldi3(($320|0),0,10,0)|0); //@line 72 "/checkout/src/libcore/num/bignum.rs"
     $322 = tempRet0; //@line 72 "/checkout/src/libcore/num/bignum.rs"
     $323 = (_i64Add(($321|0),($322|0),($carry$015$i194|0),0)|0); //@line 72 "/checkout/src/libcore/num/bignum.rs"
     $318 = tempRet0; //@line 72 "/checkout/src/libcore/num/bignum.rs"
     HEAP32[$iter$sroa$0$014$i195>>2] = $323; //@line 263 "/checkout/src/libcore/num/bignum.rs"
     $324 = ($319|0)==($315|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
     if ($324) {
      break;
     } else {
      $carry$015$i194 = $318;$iter$sroa$0$014$i195 = $319;
     }
    }
    $317 = ($318|0)==(0); //@line 266 "/checkout/src/libcore/num/bignum.rs"
    if ($317) {
     $327 = $313;
     break;
    }
    $325 = ($313>>>0)<(40); //@line 267 "/checkout/src/libcore/num/bignum.rs"
    if (!($325)) {
     label = 151;
     break L104;
    }
    HEAP32[$315>>2] = $318; //@line 267 "/checkout/src/libcore/num/bignum.rs"
    $326 = (($313) + 1)|0; //@line 268 "/checkout/src/libcore/num/bignum.rs"
    $327 = $326;
   }
  } while(0);
  HEAP32[$mant>>2] = $327; //@line 270 "/checkout/src/libcore/num/bignum.rs"
  $328 = HEAP32[$minus>>2]|0; //@line 259 "/checkout/src/libcore/num/bignum.rs"
  $329 = ($328>>>0)>(40); //@line 887 "/checkout/src/libcore/slice/mod.rs"
  if ($329) {
   label = 153;
   break;
  }
  $330 = (((($minus)) + 4|0) + ($328<<2)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $331 = ($328|0)==(0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
  do {
   if ($331) {
    $sz$0$i212 = 0;
   } else {
    $carry$015$i207 = 0;$iter$sroa$0$014$i208 = $175;
    while(1) {
     $334 = ((($iter$sroa$0$014$i208)) + 4|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
     $335 = HEAP32[$iter$sroa$0$014$i208>>2]|0; //@line 262 "/checkout/src/libcore/num/bignum.rs"
     $336 = (___muldi3(($335|0),0,10,0)|0); //@line 72 "/checkout/src/libcore/num/bignum.rs"
     $337 = tempRet0; //@line 72 "/checkout/src/libcore/num/bignum.rs"
     $338 = (_i64Add(($336|0),($337|0),($carry$015$i207|0),0)|0); //@line 72 "/checkout/src/libcore/num/bignum.rs"
     $333 = tempRet0; //@line 72 "/checkout/src/libcore/num/bignum.rs"
     HEAP32[$iter$sroa$0$014$i208>>2] = $338; //@line 263 "/checkout/src/libcore/num/bignum.rs"
     $339 = ($334|0)==($330|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
     if ($339) {
      break;
     } else {
      $carry$015$i207 = $333;$iter$sroa$0$014$i208 = $334;
     }
    }
    $332 = ($333|0)==(0); //@line 266 "/checkout/src/libcore/num/bignum.rs"
    if ($332) {
     $sz$0$i212 = $328;
     break;
    }
    $340 = ($328>>>0)<(40); //@line 267 "/checkout/src/libcore/num/bignum.rs"
    if (!($340)) {
     label = 159;
     break L104;
    }
    HEAP32[$330>>2] = $333; //@line 267 "/checkout/src/libcore/num/bignum.rs"
    $341 = (($328) + 1)|0; //@line 268 "/checkout/src/libcore/num/bignum.rs"
    $sz$0$i212 = $341;
   }
  } while(0);
  HEAP32[$minus>>2] = $sz$0$i212; //@line 270 "/checkout/src/libcore/num/bignum.rs"
  $342 = HEAP32[$plus>>2]|0; //@line 259 "/checkout/src/libcore/num/bignum.rs"
  $343 = ($342>>>0)>(40); //@line 887 "/checkout/src/libcore/slice/mod.rs"
  if ($343) {
   label = 161;
   break;
  }
  $344 = (((($plus)) + 4|0) + ($342<<2)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $345 = ($342|0)==(0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
  do {
   if ($345) {
    $sz$0$i225 = 0;
   } else {
    $carry$015$i220 = 0;$iter$sroa$0$014$i221 = $177;
    while(1) {
     $348 = ((($iter$sroa$0$014$i221)) + 4|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
     $349 = HEAP32[$iter$sroa$0$014$i221>>2]|0; //@line 262 "/checkout/src/libcore/num/bignum.rs"
     $350 = (___muldi3(($349|0),0,10,0)|0); //@line 72 "/checkout/src/libcore/num/bignum.rs"
     $351 = tempRet0; //@line 72 "/checkout/src/libcore/num/bignum.rs"
     $352 = (_i64Add(($350|0),($351|0),($carry$015$i220|0),0)|0); //@line 72 "/checkout/src/libcore/num/bignum.rs"
     $347 = tempRet0; //@line 72 "/checkout/src/libcore/num/bignum.rs"
     HEAP32[$iter$sroa$0$014$i221>>2] = $352; //@line 263 "/checkout/src/libcore/num/bignum.rs"
     $353 = ($348|0)==($344|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
     if ($353) {
      break;
     } else {
      $carry$015$i220 = $347;$iter$sroa$0$014$i221 = $348;
     }
    }
    $346 = ($347|0)==(0); //@line 266 "/checkout/src/libcore/num/bignum.rs"
    if ($346) {
     $sz$0$i225 = $342;
     break;
    }
    $354 = ($342>>>0)<(40); //@line 267 "/checkout/src/libcore/num/bignum.rs"
    if (!($354)) {
     label = 167;
     break L104;
    }
    HEAP32[$344>>2] = $347; //@line 267 "/checkout/src/libcore/num/bignum.rs"
    $355 = (($342) + 1)|0; //@line 268 "/checkout/src/libcore/num/bignum.rs"
    $sz$0$i225 = $355;
   }
  } while(0);
  HEAP32[$plus>>2] = $sz$0$i225; //@line 270 "/checkout/src/libcore/num/bignum.rs"
  $356 = HEAP32[$scale8>>2]|0; //@line 456 "/checkout/src/libcore/num/bignum.rs"
  $357 = ($356>>>0)>=($327>>>0); //@line 850 "/checkout/src/libcore/cmp.rs"
  $_0$0$sroa$speculated$i$i60 = $357 ? $356 : $327; //@line 462 "/checkout/src/libcore/cmp.rs"
  $358 = ($_0$0$sroa$speculated$i$i60>>>0)>(40); //@line 875 "/checkout/src/libcore/slice/mod.rs"
  if ($358) {
   $_0$0$sroa$speculated$i$i60$lcssa = $_0$0$sroa$speculated$i$i60;
   label = 72;
   break;
  } else {
   $189 = $356;$190 = $327;$_0$0$sroa$speculated$i$i60448 = $_0$0$sroa$speculated$i$i60;$i$0447 = $280;
  }
 }
 switch (label|0) {
  case 72: {
   __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($_0$0$sroa$speculated$i$i60$lcssa,40); //@line 876 "/checkout/src/libcore/slice/mod.rs"
   // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
   break;
  }
  case 80: {
   __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($_0$0$sroa$speculated$i$i75,40); //@line 888 "/checkout/src/libcore/slice/mod.rs"
   // unreachable; //@line 888 "/checkout/src/libcore/slice/mod.rs"
   break;
  }
  case 84: {
   __ZN4core9panicking5panic17h9fa3414033a56a4dE(12180); //@line 249 "/checkout/src/libcore/num/bignum.rs"
   // unreachable; //@line 249 "/checkout/src/libcore/num/bignum.rs"
   break;
  }
  case 87: {
   __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($_0$0$sroa$speculated$i$i79,40); //@line 876 "/checkout/src/libcore/slice/mod.rs"
   // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
   break;
  }
  case 97: {
   __ZN4core9panicking5panic17h9fa3414033a56a4dE(12180); //@line 249 "/checkout/src/libcore/num/bignum.rs"
   // unreachable; //@line 249 "/checkout/src/libcore/num/bignum.rs"
   break;
  }
  case 100: {
   __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($_0$0$sroa$speculated$i$i106,40); //@line 876 "/checkout/src/libcore/slice/mod.rs"
   // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
   break;
  }
  case 110: {
   __ZN4core9panicking5panic17h9fa3414033a56a4dE(12180); //@line 249 "/checkout/src/libcore/num/bignum.rs"
   // unreachable; //@line 249 "/checkout/src/libcore/num/bignum.rs"
   break;
  }
  case 113: {
   __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($_0$0$sroa$speculated$i$i133,40); //@line 876 "/checkout/src/libcore/slice/mod.rs"
   // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
   break;
  }
  case 123: {
   __ZN4core9panicking5panic17h9fa3414033a56a4dE(12180); //@line 249 "/checkout/src/libcore/num/bignum.rs"
   // unreachable; //@line 249 "/checkout/src/libcore/num/bignum.rs"
   break;
  }
  case 127: {
   __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($_0$0$sroa$speculated$i$i160,40); //@line 876 "/checkout/src/libcore/slice/mod.rs"
   // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
   break;
  }
  case 135: {
   __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($_0$0$sroa$speculated$i$i175,40); //@line 876 "/checkout/src/libcore/slice/mod.rs"
   // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
   break;
  }
  case 143: {
   if (!($312)) {
    $i$2 = $280;$k$2 = $k$0;
    HEAP32[$retVal>>2] = $i$2; //@line 225 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
    $retVal$index1 = ((($retVal)) + 4|0); //@line 225 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
    HEAP16[$retVal$index1>>1] = $k$2; //@line 225 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
    STACKTOP = sp;return; //@line 225 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
   }
   L226: do {
    if ($295) {
     $359 = (__ZN4core3num6bignum8Big32x408mul_pow217h07f349800f91ebf3E($mant,1)|0); //@line 213 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
     $360 = HEAP32[$mant>>2]|0; //@line 456 "/checkout/src/libcore/num/bignum.rs"
     $361 = HEAP32[$scale>>2]|0; //@line 456 "/checkout/src/libcore/num/bignum.rs"
     $362 = ($361>>>0)>=($360>>>0); //@line 850 "/checkout/src/libcore/cmp.rs"
     $_0$0$sroa$speculated$i$i = $362 ? $361 : $360; //@line 462 "/checkout/src/libcore/cmp.rs"
     $363 = ($_0$0$sroa$speculated$i$i>>>0)>(40); //@line 875 "/checkout/src/libcore/slice/mod.rs"
     if ($363) {
      __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($_0$0$sroa$speculated$i$i,40); //@line 876 "/checkout/src/libcore/slice/mod.rs"
      // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
     }
     $364 = ((($mant)) + 4|0); //@line 388 "/checkout/src/libcore/slice/mod.rs"
     $365 = (((($mant)) + 4|0) + ($_0$0$sroa$speculated$i$i<<2)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $366 = (((($scale)) + 4|0) + ($_0$0$sroa$speculated$i$i<<2)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $other$sroa$5$0$i$i = $366;$self$sroa$2$0$i$i = $365;
     while(1) {
      $367 = ($self$sroa$2$0$i$i|0)==($364|0); //@line 1212 "/checkout/src/libcore/slice/mod.rs"
      $368 = ((($self$sroa$2$0$i$i)) + -4|0); //@line 623 "/checkout/src/libcore/ptr.rs"
      if ($367) {
       label = 177;
       break;
      }
      $369 = HEAP32[$368>>2]|0; //@line 103 "/checkout/src/libcore/clone.rs"
      $370 = ($other$sroa$5$0$i$i|0)==($_7$sroa$0$0$$sroa_idx$i|0); //@line 1212 "/checkout/src/libcore/slice/mod.rs"
      $371 = ((($other$sroa$5$0$i$i)) + -4|0); //@line 623 "/checkout/src/libcore/ptr.rs"
      if ($370) {
       break L226;
      }
      $373 = HEAP32[$371>>2]|0; //@line 103 "/checkout/src/libcore/clone.rs"
      $374 = ($369|0)==($373|0); //@line 859 "/checkout/src/libcore/cmp.rs"
      if ($374) {
       $other$sroa$5$0$i$i = $371;$self$sroa$2$0$i$i = $368;
      } else {
       label = 175;
       break;
      }
     }
     if ((label|0) == 175) {
      $372 = ($369>>>0)<($373>>>0); //@line 860 "/checkout/src/libcore/cmp.rs"
      if ($372) {
       $i$2 = $280;$k$2 = $k$0;
      } else {
       break;
      }
      HEAP32[$retVal>>2] = $i$2; //@line 225 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
      $retVal$index1 = ((($retVal)) + 4|0); //@line 225 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
      HEAP16[$retVal$index1>>1] = $k$2; //@line 225 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
      STACKTOP = sp;return; //@line 225 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
     }
     else if ((label|0) == 177) {
      $switch$i248tmp = ($other$sroa$5$0$i$i|0)==($_7$sroa$0$0$$sroa_idx$i|0); //@line 711 "/checkout/src/libcore/cmp.rs"
      if ($switch$i248tmp) {
       break;
      } else {
       $i$2 = $280;$k$2 = $k$0;
      }
      HEAP32[$retVal>>2] = $i$2; //@line 225 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
      $retVal$index1 = ((($retVal)) + 4|0); //@line 225 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
      HEAP16[$retVal$index1>>1] = $k$2; //@line 225 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
      STACKTOP = sp;return; //@line 225 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
     }
    }
   } while(0);
   $375 = (__ZN4core3num7flt2dec8round_up17hd6184f9bc0abdbe1E($buf$0,$buf$1,$280)|0); //@line 217 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
   $abi_cast$sroa$4$0$extract$shift = ($375&65535) >>> 8; //@line 217 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
   $abi_cast$sroa$4$0$extract$trunc = $abi_cast$sroa$4$0$extract$shift&255; //@line 217 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
   $376 = $375 & 1; //@line 217 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
   $377 = ($376<<16>>16)==(0); //@line 217 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
   if ($377) {
    $i$2 = $280;$k$2 = $k$0;
    HEAP32[$retVal>>2] = $i$2; //@line 225 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
    $retVal$index1 = ((($retVal)) + 4|0); //@line 225 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
    HEAP16[$retVal$index1>>1] = $k$2; //@line 225 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
    STACKTOP = sp;return; //@line 225 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
   }
   $378 = ($280>>>0)<($buf$1>>>0); //@line 218 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
   if (!($378)) {
    __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(11132,$280,$buf$1); //@line 218 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
    // unreachable; //@line 218 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
   }
   $379 = (($buf$0) + ($280)|0); //@line 218 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
   HEAP8[$379>>0] = $abi_cast$sroa$4$0$extract$trunc; //@line 218 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
   $380 = (($i$0447) + 2)|0; //@line 219 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
   $381 = (($k$0) + 1)<<16>>16; //@line 220 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
   $i$2 = $380;$k$2 = $381;
   HEAP32[$retVal>>2] = $i$2; //@line 225 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
   $retVal$index1 = ((($retVal)) + 4|0); //@line 225 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
   HEAP16[$retVal$index1>>1] = $k$2; //@line 225 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
   STACKTOP = sp;return; //@line 225 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
   break;
  }
  case 145: {
   __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($313,40); //@line 888 "/checkout/src/libcore/slice/mod.rs"
   // unreachable; //@line 888 "/checkout/src/libcore/slice/mod.rs"
   break;
  }
  case 151: {
   __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(12204,$313,40); //@line 267 "/checkout/src/libcore/num/bignum.rs"
   // unreachable; //@line 267 "/checkout/src/libcore/num/bignum.rs"
   break;
  }
  case 153: {
   __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($328,40); //@line 888 "/checkout/src/libcore/slice/mod.rs"
   // unreachable; //@line 888 "/checkout/src/libcore/slice/mod.rs"
   break;
  }
  case 159: {
   __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(12204,$328,40); //@line 267 "/checkout/src/libcore/num/bignum.rs"
   // unreachable; //@line 267 "/checkout/src/libcore/num/bignum.rs"
   break;
  }
  case 161: {
   __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($342,40); //@line 888 "/checkout/src/libcore/slice/mod.rs"
   // unreachable; //@line 888 "/checkout/src/libcore/slice/mod.rs"
   break;
  }
  case 167: {
   __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(12204,$342,40); //@line 267 "/checkout/src/libcore/num/bignum.rs"
   // unreachable; //@line 267 "/checkout/src/libcore/num/bignum.rs"
   break;
  }
  case 182: {
   __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(11116,$i$0447,$buf$1); //@line 164 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
   // unreachable; //@line 164 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
   break;
  }
 }
}
function __ZN4core3num7flt2dec8strategy6dragon12format_exact17hb7c319f82c7714f7E($retVal,$d,$buf$0,$buf$1,$limit) {
 $retVal = $retVal|0;
 $d = $d|0;
 $buf$0 = $buf$0|0;
 $buf$1 = $buf$1|0;
 $limit = $limit|0;
 var $$$i$i = 0, $$$i$i120 = 0, $$$i$i147 = 0, $$$i$i93 = 0, $$$i$le$i$i = 0, $$7$i$i = 0, $$7$i$i121 = 0, $$7$i$i148 = 0, $$7$i$i94 = 0, $$arith = 0, $$arith11 = 0, $$arith15 = 0, $$arith19 = 0, $$arith23 = 0, $$arith27 = 0, $$arith3 = 0, $$arith7 = 0, $$buf$1 = 0, $$idx$i = 0, $$idx$i115 = 0;
 var $$idx$i142 = 0, $$idx$i88 = 0, $$idx$off$i = 0, $$idx$off$i116 = 0, $$idx$off$i143 = 0, $$idx$off$i89 = 0, $$lcssa629 = 0, $$overflow = 0, $$overflow12 = 0, $$overflow16 = 0, $$overflow20 = 0, $$overflow24 = 0, $$overflow28 = 0, $$overflow4 = 0, $$overflow8 = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $58$phi = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_0$0$i$i = 0, $_0$0$sroa$speculated$i$i = 0;
 var $_0$0$sroa$speculated$i$i11 = 0, $_0$0$sroa$speculated$i$i125 = 0, $_0$0$sroa$speculated$i$i52 = 0, $_0$0$sroa$speculated$i$i71 = 0, $_0$0$sroa$speculated$i$i98 = 0, $_0$1$i$i = 0, $_0$sroa$0$0 = 0, $_0$sroa$3$0 = 0, $_7$sroa$0$0$$sroa_idx$i = 0, $_7$sroa$4$0$$sroa_idx$i = 0, $_80 = 0, $abi_cast$sroa$4$0$extract$shift = 0, $abi_cast$sroa$4$0$extract$trunc = 0, $base$i = 0, $borrow$010$i = 0, $borrow$010$i6 = 0, $carry$015$i = 0, $carry$015$i31 = 0, $carry$015$i43 = 0, $d2$0 = 0;
 var $d2$1 = 0, $d2$2 = 0, $d2$3 = 0, $iter$sroa$0$014$i = 0, $iter$sroa$0$014$i32 = 0, $iter$sroa$0$014$i44 = 0, $iter$sroa$0$070 = 0, $iter$sroa$4$09$i = 0, $iter$sroa$4$09$i7 = 0, $k$0 = 0, $k$2 = 0, $len$065 = 0, $len$3 = 0, $mant = 0, $n$0$lcssa$i = 0, $n$04$i633 = 0, $noborrow$0$off010$i = 0, $noborrow$0$off010$i119 = 0, $noborrow$0$off010$i146 = 0, $noborrow$0$off010$i92 = 0;
 var $not$ = 0, $not$$i$i = 0, $not$$i$i$i$i = 0, $not$$i62$i$i$i = 0, $not$$i63$i$i$i = 0, $not$$i64$i$i$i = 0, $not$$i65$i$i$i = 0, $or$cond = 0, $other$sroa$5$0$i$i = 0, $other$sroa$5$0$i$i102 = 0, $other$sroa$5$0$i$i129 = 0, $other$sroa$5$0$i$i13 = 0, $other$sroa$5$0$i$i56 = 0, $other$sroa$5$0$i$i75 = 0, $retVal$index1 = 0, $scale = 0, $scale2 = 0, $scale4 = 0, $scale8 = 0, $self$sroa$2$0$i$i = 0;
 var $self$sroa$2$0$i$i101 = 0, $self$sroa$2$0$i$i12 = 0, $self$sroa$2$0$i$i128 = 0, $self$sroa$2$0$i$i55 = 0, $self$sroa$2$0$i$i74 = 0, $switch$i38171tmp = 0, $switch$i41172tmp = 0, $switch$i43173tmp = 0, $switch$i44174tmp = 0, $switch$i45175tmp = 0, $sz$0$i = 0, $sz$0$i36 = 0, $sz$0$i48 = 0, $sz$010$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1152|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1152|0);
 $base$i = sp + 984|0;
 $scale8 = sp + 820|0;
 $scale4 = sp + 656|0;
 $scale2 = sp + 492|0;
 $_80 = sp + 328|0;
 $scale = sp + 164|0;
 $mant = sp;
 $0 = $d; //@line 229 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $1 = $0; //@line 229 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $2 = HEAP32[$1>>2]|0; //@line 229 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $3 = (($0) + 4)|0; //@line 229 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $4 = $3; //@line 229 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $5 = HEAP32[$4>>2]|0; //@line 229 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $6 = ($2|0)==(0); //@line 229 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $7 = ($5|0)==(0); //@line 229 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $8 = $6 & $7; //@line 229 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 if ($8) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(11148); //@line 229 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
  // unreachable; //@line 229 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 }
 $9 = ((($d)) + 8|0); //@line 230 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $10 = $9; //@line 230 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $11 = $10; //@line 230 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $12 = HEAP32[$11>>2]|0; //@line 230 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $13 = (($10) + 4)|0; //@line 230 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $14 = $13; //@line 230 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $15 = HEAP32[$14>>2]|0; //@line 230 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $16 = ($12|0)==(0); //@line 230 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $17 = ($15|0)==(0); //@line 230 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $18 = $16 & $17; //@line 230 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 if ($18) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(11172); //@line 230 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
  // unreachable; //@line 230 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 }
 $19 = ((($d)) + 16|0); //@line 231 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $20 = $19; //@line 231 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $21 = $20; //@line 231 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $22 = HEAP32[$21>>2]|0; //@line 231 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $23 = (($20) + 4)|0; //@line 231 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $24 = $23; //@line 231 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $25 = HEAP32[$24>>2]|0; //@line 231 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $26 = ($22|0)==(0); //@line 231 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $27 = ($25|0)==(0); //@line 231 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $28 = $26 & $27; //@line 231 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 if ($28) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(11196); //@line 231 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
  // unreachable; //@line 231 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 }
 $29 = (_i64Add(($2|0),($5|0),($22|0),($25|0))|0); //@line 1982 "/checkout/src/libcore/num/mod.rs"
 $30 = tempRet0; //@line 1982 "/checkout/src/libcore/num/mod.rs"
 $31 = ($30>>>0)<($5>>>0); //@line 1982 "/checkout/src/libcore/num/mod.rs"
 $32 = ($29>>>0)<($2>>>0); //@line 1982 "/checkout/src/libcore/num/mod.rs"
 $33 = ($30|0)==($5|0); //@line 1982 "/checkout/src/libcore/num/mod.rs"
 $34 = $33 & $32; //@line 1982 "/checkout/src/libcore/num/mod.rs"
 $35 = $31 | $34; //@line 1982 "/checkout/src/libcore/num/mod.rs"
 if ($35) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(11220); //@line 232 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
  // unreachable; //@line 232 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 }
 $36 = ($5>>>0)<($15>>>0); //@line 2008 "/checkout/src/libcore/num/mod.rs"
 $37 = ($2>>>0)<($12>>>0); //@line 2008 "/checkout/src/libcore/num/mod.rs"
 $38 = ($5|0)==($15|0); //@line 2008 "/checkout/src/libcore/num/mod.rs"
 $39 = $38 & $37; //@line 2008 "/checkout/src/libcore/num/mod.rs"
 $40 = $36 | $39; //@line 2008 "/checkout/src/libcore/num/mod.rs"
 if ($40) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(11244); //@line 233 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
  // unreachable; //@line 233 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 }
 $41 = ((($d)) + 24|0); //@line 236 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $42 = HEAP16[$41>>1]|0; //@line 236 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $43 = (_i64Add(($2|0),($5|0),-1,-1)|0); //@line 20 "/checkout/src/libcore/num/flt2dec/estimator.rs"
 $44 = tempRet0; //@line 20 "/checkout/src/libcore/num/flt2dec/estimator.rs"
 $45 = (_llvm_ctlz_i64(($43|0),($44|0),0)|0); //@line 1381 "/checkout/src/libcore/num/mod.rs"
 $46 = tempRet0; //@line 1381 "/checkout/src/libcore/num/mod.rs"
 $47 = (_i64Subtract(64,0,($45|0),($46|0))|0); //@line 20 "/checkout/src/libcore/num/flt2dec/estimator.rs"
 $48 = tempRet0; //@line 20 "/checkout/src/libcore/num/flt2dec/estimator.rs"
 $49 = $42 << 16 >> 16; //@line 23 "/checkout/src/libcore/num/flt2dec/estimator.rs"
 $50 = ($49|0)<(0); //@line 23 "/checkout/src/libcore/num/flt2dec/estimator.rs"
 $51 = $50 << 31 >> 31; //@line 23 "/checkout/src/libcore/num/flt2dec/estimator.rs"
 $52 = (_i64Add(($47|0),($48|0),($49|0),($51|0))|0); //@line 23 "/checkout/src/libcore/num/flt2dec/estimator.rs"
 $53 = tempRet0; //@line 23 "/checkout/src/libcore/num/flt2dec/estimator.rs"
 (___muldi3(($52|0),($53|0),1292913986,0)|0); //@line 23 "/checkout/src/libcore/num/flt2dec/estimator.rs"
 $54 = tempRet0; //@line 23 "/checkout/src/libcore/num/flt2dec/estimator.rs"
 $55 = $54&65535; //@line 23 "/checkout/src/libcore/num/flt2dec/estimator.rs"
 _memset(($base$i|0),0,160)|0; //@line 141 "/checkout/src/libcore/num/bignum.rs"
 $58 = $2;$61 = $5;$sz$010$i = 0;
 while(1) {
  $56 = ($sz$010$i>>>0)<(40); //@line 144 "/checkout/src/libcore/num/bignum.rs"
  if (!($56)) {
   label = 14;
   break;
  }
  $57 = (($base$i) + ($sz$010$i<<2)|0); //@line 144 "/checkout/src/libcore/num/bignum.rs"
  HEAP32[$57>>2] = $58; //@line 144 "/checkout/src/libcore/num/bignum.rs"
  $59 = (($sz$010$i) + 1)|0; //@line 146 "/checkout/src/libcore/num/bignum.rs"
  $60 = ($61|0)==(0); //@line 143 "/checkout/src/libcore/num/bignum.rs"
  $62 = (0)==(0); //@line 143 "/checkout/src/libcore/num/bignum.rs"
  $63 = $60 & $62; //@line 143 "/checkout/src/libcore/num/bignum.rs"
  if ($63) {
   break;
  } else {
   $58$phi = $61;$61 = 0;$sz$010$i = $59;$58 = $58$phi;
  }
 }
 if ((label|0) == 14) {
  __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(12148,$sz$010$i,40); //@line 144 "/checkout/src/libcore/num/bignum.rs"
  // unreachable; //@line 144 "/checkout/src/libcore/num/bignum.rs"
 }
 HEAP32[$mant>>2] = $59; //@line 148 "/checkout/src/libcore/num/bignum.rs"
 $64 = ((($mant)) + 4|0); //@line 148 "/checkout/src/libcore/num/bignum.rs"
 _memcpy(($64|0),($base$i|0),160)|0; //@line 148 "/checkout/src/libcore/num/bignum.rs"
 HEAP32[$scale>>2] = 1; //@line 134 "/checkout/src/libcore/num/bignum.rs"
 $_7$sroa$0$0$$sroa_idx$i = ((($scale)) + 4|0); //@line 134 "/checkout/src/libcore/num/bignum.rs"
 HEAP32[$_7$sroa$0$0$$sroa_idx$i>>2] = 1; //@line 134 "/checkout/src/libcore/num/bignum.rs"
 $_7$sroa$4$0$$sroa_idx$i = ((($scale)) + 8|0); //@line 134 "/checkout/src/libcore/num/bignum.rs"
 _memset(($_7$sroa$4$0$$sroa_idx$i|0),0,156)|0; //@line 134 "/checkout/src/libcore/num/bignum.rs"
 $65 = ($42<<16>>16)<(0); //@line 241 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 if ($65) {
  $66 = (0 - ($42))<<16>>16; //@line 242 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
  $67 = $66 << 16 >> 16; //@line 242 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
  (__ZN4core3num6bignum8Big32x408mul_pow217h07f349800f91ebf3E($scale,$67)|0); //@line 242 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 } else {
  $68 = $42 << 16 >> 16; //@line 244 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
  (__ZN4core3num6bignum8Big32x408mul_pow217h07f349800f91ebf3E($mant,$68)|0); //@line 244 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 }
 $69 = ($55<<16>>16)>(-1); //@line 248 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 if ($69) {
  $70 = $55 << 16 >> 16; //@line 249 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
  (__ZN4core3num7flt2dec8strategy6dragon9mul_pow1017heb0706981ccc7f53E($scale,$70)|0); //@line 249 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 } else {
  $71 = (0 - ($55))<<16>>16; //@line 251 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
  $72 = $71 << 16 >> 16; //@line 251 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
  (__ZN4core3num7flt2dec8strategy6dragon9mul_pow1017heb0706981ccc7f53E($mant,$72)|0); //@line 251 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 }
 $73 = HEAP32[$scale>>2]|0; //@line 465 "/checkout/src/libcore/num/bignum.rs"
 $74 = ((($scale)) + 4|0); //@line 465 "/checkout/src/libcore/num/bignum.rs"
 HEAP32[$_80>>2] = $73; //@line 465 "/checkout/src/libcore/num/bignum.rs"
 $75 = ((($_80)) + 4|0); //@line 465 "/checkout/src/libcore/num/bignum.rs"
 _memcpy(($75|0),($74|0),160)|0; //@line 465 "/checkout/src/libcore/num/bignum.rs"
 $76 = ($buf$1>>>0)>(9); //@line 57 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 L30: do {
  if ($76) {
   $77 = ((($_80)) + 4|0);
   $78 = ($73>>>0)>(40); //@line 887 "/checkout/src/libcore/slice/mod.rs"
   if ($78) {
    $$lcssa629 = $73;
    __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($$lcssa629,40); //@line 888 "/checkout/src/libcore/slice/mod.rs"
    // unreachable; //@line 888 "/checkout/src/libcore/slice/mod.rs"
   } else {
    $80 = $73;$n$04$i633 = $buf$1;
   }
   while(1) {
    $79 = ($80|0)==(0); //@line 1212 "/checkout/src/libcore/slice/mod.rs"
    if (!($79)) {
     $81 = (((($_80)) + 4|0) + ($80<<2)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
     $borrow$010$i = 0;$iter$sroa$4$09$i = $81;
     while(1) {
      $82 = ((($iter$sroa$4$09$i)) + -4|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
      $83 = HEAP32[$82>>2]|0; //@line 393 "/checkout/src/libcore/num/bignum.rs"
      $84 = (___udivdi3(($83|0),($borrow$010$i|0),1000000000,0)|0); //@line 90 "/checkout/src/libcore/num/bignum.rs"
      $85 = tempRet0; //@line 90 "/checkout/src/libcore/num/bignum.rs"
      $86 = (___uremdi3(($83|0),($borrow$010$i|0),1000000000,0)|0); //@line 90 "/checkout/src/libcore/num/bignum.rs"
      $87 = tempRet0; //@line 90 "/checkout/src/libcore/num/bignum.rs"
      HEAP32[$82>>2] = $84; //@line 394 "/checkout/src/libcore/num/bignum.rs"
      $88 = ($82|0)==($77|0); //@line 1212 "/checkout/src/libcore/slice/mod.rs"
      if ($88) {
       break;
      } else {
       $borrow$010$i = $86;$iter$sroa$4$09$i = $82;
      }
     }
    }
    $89 = (($n$04$i633) + -9)|0; //@line 59 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
    $90 = ($89>>>0)>(9); //@line 57 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
    $$pre = HEAP32[$_80>>2]|0;
    if (!($90)) {
     $95 = $$pre;$n$0$lcssa$i = $89;
     break L30;
    }
    $91 = ($$pre>>>0)>(40); //@line 887 "/checkout/src/libcore/slice/mod.rs"
    if ($91) {
     $$lcssa629 = $$pre;
     break;
    } else {
     $80 = $$pre;$n$04$i633 = $89;
    }
   }
   __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($$lcssa629,40); //@line 888 "/checkout/src/libcore/slice/mod.rs"
   // unreachable; //@line 888 "/checkout/src/libcore/slice/mod.rs"
  } else {
   $95 = $73;$n$0$lcssa$i = $buf$1;
  }
 } while(0);
 $92 = (11268 + ($n$0$lcssa$i<<2)|0); //@line 61 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $93 = HEAP32[$92>>2]|0; //@line 61 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $94 = ($95>>>0)>(40); //@line 887 "/checkout/src/libcore/slice/mod.rs"
 if ($94) {
  __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($95,40); //@line 888 "/checkout/src/libcore/slice/mod.rs"
  // unreachable; //@line 888 "/checkout/src/libcore/slice/mod.rs"
 }
 $96 = ((($_80)) + 4|0); //@line 617 "/checkout/src/libcore/slice/mod.rs"
 $97 = ($95|0)==(0); //@line 1212 "/checkout/src/libcore/slice/mod.rs"
 if (!($97)) {
  $98 = (((($_80)) + 4|0) + ($95<<2)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $borrow$010$i6 = 0;$iter$sroa$4$09$i7 = $98;
  while(1) {
   $99 = ((($iter$sroa$4$09$i7)) + -4|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
   $100 = HEAP32[$99>>2]|0; //@line 393 "/checkout/src/libcore/num/bignum.rs"
   $101 = (___udivdi3(($100|0),($borrow$010$i6|0),($93|0),0)|0); //@line 90 "/checkout/src/libcore/num/bignum.rs"
   $102 = tempRet0; //@line 90 "/checkout/src/libcore/num/bignum.rs"
   $103 = (___uremdi3(($100|0),($borrow$010$i6|0),($93|0),0)|0); //@line 90 "/checkout/src/libcore/num/bignum.rs"
   $104 = tempRet0; //@line 90 "/checkout/src/libcore/num/bignum.rs"
   HEAP32[$99>>2] = $101; //@line 394 "/checkout/src/libcore/num/bignum.rs"
   $105 = ($99|0)==($96|0); //@line 1212 "/checkout/src/libcore/slice/mod.rs"
   if ($105) {
    break;
   } else {
    $borrow$010$i6 = $103;$iter$sroa$4$09$i7 = $99;
   }
  }
 }
 $106 = (__ZN4core3num6bignum8Big32x403add17h4df8566de1991267E($_80,$mant)|0); //@line 258 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $107 = HEAP32[$_80>>2]|0; //@line 456 "/checkout/src/libcore/num/bignum.rs"
 $108 = HEAP32[$scale>>2]|0; //@line 456 "/checkout/src/libcore/num/bignum.rs"
 $109 = ($108>>>0)>=($107>>>0); //@line 850 "/checkout/src/libcore/cmp.rs"
 $_0$0$sroa$speculated$i$i11 = $109 ? $108 : $107; //@line 462 "/checkout/src/libcore/cmp.rs"
 $110 = ($_0$0$sroa$speculated$i$i11>>>0)>(40); //@line 875 "/checkout/src/libcore/slice/mod.rs"
 if ($110) {
  __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($_0$0$sroa$speculated$i$i11,40); //@line 876 "/checkout/src/libcore/slice/mod.rs"
  // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
 }
 $111 = ((($_80)) + 4|0); //@line 388 "/checkout/src/libcore/slice/mod.rs"
 $112 = (((($_80)) + 4|0) + ($_0$0$sroa$speculated$i$i11<<2)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
 $113 = (((($scale)) + 4|0) + ($_0$0$sroa$speculated$i$i11<<2)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
 $other$sroa$5$0$i$i13 = $113;$self$sroa$2$0$i$i12 = $112;
 while(1) {
  $114 = ($self$sroa$2$0$i$i12|0)==($111|0); //@line 1212 "/checkout/src/libcore/slice/mod.rs"
  $115 = ((($self$sroa$2$0$i$i12)) + -4|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  if ($114) {
   label = 43;
   break;
  }
  $116 = HEAP32[$115>>2]|0; //@line 103 "/checkout/src/libcore/clone.rs"
  $117 = ($other$sroa$5$0$i$i13|0)==($_7$sroa$0$0$$sroa_idx$i|0); //@line 1212 "/checkout/src/libcore/slice/mod.rs"
  $118 = ((($other$sroa$5$0$i$i13)) + -4|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  if ($117) {
   label = 42;
   break;
  }
  $120 = HEAP32[$118>>2]|0; //@line 103 "/checkout/src/libcore/clone.rs"
  $121 = ($116|0)==($120|0); //@line 859 "/checkout/src/libcore/cmp.rs"
  if ($121) {
   $other$sroa$5$0$i$i13 = $118;$self$sroa$2$0$i$i12 = $115;
  } else {
   label = 39;
   break;
  }
 }
 if ((label|0) == 39) {
  $119 = ($116>>>0)<($120>>>0); //@line 860 "/checkout/src/libcore/cmp.rs"
  if ($119) {
   label = 45;
  } else {
   label = 42;
  }
 }
 else if ((label|0) == 43) {
  $switch$i45175tmp = ($other$sroa$5$0$i$i13|0)==($_7$sroa$0$0$$sroa_idx$i|0); //@line 711 "/checkout/src/libcore/cmp.rs"
  if ($switch$i45175tmp) {
   label = 44;
  } else {
   label = 45;
  }
 }
 if ((label|0) == 42) {
  label = 44;
 }
 else if ((label|0) == 45) {
  $123 = HEAP32[$mant>>2]|0; //@line 259 "/checkout/src/libcore/num/bignum.rs"
  $124 = ($123>>>0)>(40); //@line 887 "/checkout/src/libcore/slice/mod.rs"
  if ($124) {
   __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($123,40); //@line 888 "/checkout/src/libcore/slice/mod.rs"
   // unreachable; //@line 888 "/checkout/src/libcore/slice/mod.rs"
  }
  $125 = (((($mant)) + 4|0) + ($123<<2)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $126 = ($123|0)==(0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
  do {
   if ($126) {
    $sz$0$i = 0;
   } else {
    $127 = ((($mant)) + 4|0); //@line 617 "/checkout/src/libcore/slice/mod.rs"
    $carry$015$i = 0;$iter$sroa$0$014$i = $127;
    while(1) {
     $130 = ((($iter$sroa$0$014$i)) + 4|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
     $131 = HEAP32[$iter$sroa$0$014$i>>2]|0; //@line 262 "/checkout/src/libcore/num/bignum.rs"
     $132 = (___muldi3(($131|0),0,10,0)|0); //@line 72 "/checkout/src/libcore/num/bignum.rs"
     $133 = tempRet0; //@line 72 "/checkout/src/libcore/num/bignum.rs"
     $134 = (_i64Add(($132|0),($133|0),($carry$015$i|0),0)|0); //@line 72 "/checkout/src/libcore/num/bignum.rs"
     $129 = tempRet0; //@line 72 "/checkout/src/libcore/num/bignum.rs"
     HEAP32[$iter$sroa$0$014$i>>2] = $134; //@line 263 "/checkout/src/libcore/num/bignum.rs"
     $135 = ($130|0)==($125|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
     if ($135) {
      break;
     } else {
      $carry$015$i = $129;$iter$sroa$0$014$i = $130;
     }
    }
    $128 = ($129|0)==(0); //@line 266 "/checkout/src/libcore/num/bignum.rs"
    if ($128) {
     $sz$0$i = $123;
    } else {
     $136 = ($123>>>0)<(40); //@line 267 "/checkout/src/libcore/num/bignum.rs"
     if ($136) {
      HEAP32[$125>>2] = $129; //@line 267 "/checkout/src/libcore/num/bignum.rs"
      $137 = (($123) + 1)|0; //@line 268 "/checkout/src/libcore/num/bignum.rs"
      $sz$0$i = $137;
      break;
     } else {
      __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(12204,$123,40); //@line 267 "/checkout/src/libcore/num/bignum.rs"
      // unreachable; //@line 267 "/checkout/src/libcore/num/bignum.rs"
     }
    }
   }
  } while(0);
  HEAP32[$mant>>2] = $sz$0$i; //@line 270 "/checkout/src/libcore/num/bignum.rs"
  $k$0 = $55;
 }
 if ((label|0) == 44) {
  $122 = (($55) + 1)<<16>>16; //@line 260 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
  $k$0 = $122;
 }
 $138 = ($k$0<<16>>16)<($limit<<16>>16); //@line 268 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 L82: do {
  if ($138) {
   $299 = $108;$339 = 1;$len$065 = 0;
  } else {
   $139 = $k$0 << 16 >> 16; //@line 274 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
   $140 = $limit << 16 >> 16; //@line 274 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
   $141 = (($139) - ($140))|0; //@line 274 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
   $142 = ($141>>>0)<($buf$1>>>0); //@line 274 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
   $143 = (($k$0) - ($limit))<<16>>16; //@line 275 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
   $144 = $143 << 16 >> 16; //@line 275 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
   $$buf$1 = $142 ? $144 : $buf$1; //@line 274 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
   $145 = ($$buf$1|0)==(0); //@line 280 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
   if ($145) {
    $299 = $108;$339 = 1;$len$065 = 0;
   } else {
    HEAP32[$scale2>>2] = $108; //@line 465 "/checkout/src/libcore/num/bignum.rs"
    $146 = ((($scale2)) + 4|0); //@line 465 "/checkout/src/libcore/num/bignum.rs"
    _memcpy(($146|0),($74|0),160)|0; //@line 465 "/checkout/src/libcore/num/bignum.rs"
    (__ZN4core3num6bignum8Big32x408mul_pow217h07f349800f91ebf3E($scale2,1)|0); //@line 283 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
    $147 = HEAP32[$scale>>2]|0; //@line 465 "/checkout/src/libcore/num/bignum.rs"
    HEAP32[$scale4>>2] = $147; //@line 465 "/checkout/src/libcore/num/bignum.rs"
    $148 = ((($scale4)) + 4|0); //@line 465 "/checkout/src/libcore/num/bignum.rs"
    _memcpy(($148|0),($74|0),160)|0; //@line 465 "/checkout/src/libcore/num/bignum.rs"
    (__ZN4core3num6bignum8Big32x408mul_pow217h07f349800f91ebf3E($scale4,2)|0); //@line 284 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
    $149 = HEAP32[$scale>>2]|0; //@line 465 "/checkout/src/libcore/num/bignum.rs"
    HEAP32[$scale8>>2] = $149; //@line 465 "/checkout/src/libcore/num/bignum.rs"
    $150 = ((($scale8)) + 4|0); //@line 465 "/checkout/src/libcore/num/bignum.rs"
    _memcpy(($150|0),($74|0),160)|0; //@line 465 "/checkout/src/libcore/num/bignum.rs"
    (__ZN4core3num6bignum8Big32x408mul_pow217h07f349800f91ebf3E($scale8,3)|0); //@line 285 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
    $151 = ((($mant)) + 4|0);
    $152 = ((($scale8)) + 4|0);
    $153 = ((($scale4)) + 4|0);
    $154 = ((($scale2)) + 4|0);
    $$pr = HEAP32[$mant>>2]|0; //@line 155 "/checkout/src/libcore/num/bignum.rs"
    $157 = $$pr;$iter$sroa$0$070 = 0;
    L85: while(1) {
     $155 = (($iter$sroa$0$070) + 1)|0;
     $156 = ($157>>>0)>(40); //@line 875 "/checkout/src/libcore/slice/mod.rs"
     if ($156) {
      label = 60;
      break;
     }
     $158 = (((($mant)) + 4|0) + ($157<<2)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $159 = $158; //@line 171 "/checkout/src/libcore/num/bignum.rs"
     $161 = $151;
     while(1) {
      $160 = $161; //@line 699 "/checkout/src/libcore/ptr.rs"
      $162 = (($159) - ($160))|0; //@line 664 "/checkout/src/libcore/num/mod.rs"
      $163 = (($162|0) / 4)&-1; //@line 700 "/checkout/src/libcore/ptr.rs"
      $164 = ($163>>>0)>(3); //@line 1175 "/checkout/src/libcore/slice/mod.rs"
      if (!($164)) {
       $174 = $161;
       label = 67;
       break;
      }
      $165 = HEAP32[$161>>2]|0; //@line 171 "/checkout/src/libcore/num/bignum.rs"
      $not$$i65$i$i$i = ($165|0)==(0); //@line 1530 "/checkout/src/libcore/iter/iterator.rs"
      if (!($not$$i65$i$i$i)) {
       break;
      }
      $166 = ((($161)) + 4|0); //@line 623 "/checkout/src/libcore/ptr.rs"
      $167 = HEAP32[$166>>2]|0; //@line 171 "/checkout/src/libcore/num/bignum.rs"
      $not$$i64$i$i$i = ($167|0)==(0); //@line 1530 "/checkout/src/libcore/iter/iterator.rs"
      if (!($not$$i64$i$i$i)) {
       break;
      }
      $168 = ((($161)) + 8|0); //@line 623 "/checkout/src/libcore/ptr.rs"
      $169 = HEAP32[$168>>2]|0; //@line 171 "/checkout/src/libcore/num/bignum.rs"
      $not$$i63$i$i$i = ($169|0)==(0); //@line 1530 "/checkout/src/libcore/iter/iterator.rs"
      if (!($not$$i63$i$i$i)) {
       break;
      }
      $170 = ((($161)) + 12|0); //@line 623 "/checkout/src/libcore/ptr.rs"
      $171 = ((($161)) + 16|0); //@line 623 "/checkout/src/libcore/ptr.rs"
      $172 = HEAP32[$170>>2]|0; //@line 171 "/checkout/src/libcore/num/bignum.rs"
      $not$$i62$i$i$i = ($172|0)==(0); //@line 1530 "/checkout/src/libcore/iter/iterator.rs"
      if ($not$$i62$i$i$i) {
       $161 = $171;
      } else {
       break;
      }
     }
     if ((label|0) == 67) {
      while(1) {
       label = 0;
       $173 = ($174|0)==($158|0); //@line 1181 "/checkout/src/libcore/slice/mod.rs"
       if ($173) {
        label = 69;
        break L85;
       }
       $175 = ((($174)) + 4|0); //@line 623 "/checkout/src/libcore/ptr.rs"
       $176 = HEAP32[$174>>2]|0; //@line 171 "/checkout/src/libcore/num/bignum.rs"
       $not$$i$i$i$i = ($176|0)==(0); //@line 1530 "/checkout/src/libcore/iter/iterator.rs"
       if ($not$$i$i$i$i) {
        $174 = $175;
        label = 67;
       } else {
        break;
       }
      }
     }
     $182 = HEAP32[$scale8>>2]|0; //@line 456 "/checkout/src/libcore/num/bignum.rs"
     $183 = ($182>>>0)>=($157>>>0); //@line 850 "/checkout/src/libcore/cmp.rs"
     $_0$0$sroa$speculated$i$i52 = $183 ? $182 : $157; //@line 462 "/checkout/src/libcore/cmp.rs"
     $184 = ($_0$0$sroa$speculated$i$i52>>>0)>(40); //@line 875 "/checkout/src/libcore/slice/mod.rs"
     if ($184) {
      label = 76;
      break;
     }
     $185 = (((($mant)) + 4|0) + ($_0$0$sroa$speculated$i$i52<<2)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $186 = (((($scale8)) + 4|0) + ($_0$0$sroa$speculated$i$i52<<2)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $other$sroa$5$0$i$i56 = $186;$self$sroa$2$0$i$i55 = $185;
     while(1) {
      $187 = ($self$sroa$2$0$i$i55|0)==($151|0); //@line 1212 "/checkout/src/libcore/slice/mod.rs"
      $188 = ((($self$sroa$2$0$i$i55)) + -4|0); //@line 623 "/checkout/src/libcore/ptr.rs"
      if ($187) {
       label = 82;
       break;
      }
      $189 = HEAP32[$188>>2]|0; //@line 103 "/checkout/src/libcore/clone.rs"
      $190 = ($other$sroa$5$0$i$i56|0)==($152|0); //@line 1212 "/checkout/src/libcore/slice/mod.rs"
      $191 = ((($other$sroa$5$0$i$i56)) + -4|0); //@line 623 "/checkout/src/libcore/ptr.rs"
      if ($190) {
       label = 85;
       break;
      }
      $193 = HEAP32[$191>>2]|0; //@line 103 "/checkout/src/libcore/clone.rs"
      $194 = ($189|0)==($193|0); //@line 859 "/checkout/src/libcore/cmp.rs"
      if ($194) {
       $other$sroa$5$0$i$i56 = $191;$self$sroa$2$0$i$i55 = $188;
      } else {
       label = 80;
       break;
      }
     }
     if ((label|0) == 80) {
      label = 0;
      $192 = ($189>>>0)<($193>>>0); //@line 860 "/checkout/src/libcore/cmp.rs"
      if ($192) {
       $207 = $157;$d2$0 = 0;
      } else {
       label = 85;
      }
     }
     else if ((label|0) == 82) {
      label = 0;
      $switch$i44174tmp = ($other$sroa$5$0$i$i56|0)==($152|0); //@line 711 "/checkout/src/libcore/cmp.rs"
      if ($switch$i44174tmp) {
       label = 85;
      } else {
       $207 = $157;$d2$0 = 0;
      }
     }
     if ((label|0) == 85) {
      label = 0;
      $$idx$i = $_0$0$sroa$speculated$i$i52 << 2; //@line 664 "/checkout/src/libcore/num/mod.rs"
      $195 = (($$idx$i|0) / 4)&-1; //@line 700 "/checkout/src/libcore/ptr.rs"
      $$idx$off$i = $$idx$i | 3; //@line 1093 "/checkout/src/libcore/iter/mod.rs"
      $196 = ($$idx$off$i>>>0)<(7); //@line 1093 "/checkout/src/libcore/iter/mod.rs"
      if (!($196)) {
       $198 = 0;$noborrow$0$off010$i = 1;
       while(1) {
        $197 = (($198) + 1)|0; //@line 1095 "/checkout/src/libcore/iter/mod.rs"
        $199 = (((($mant)) + 4|0) + ($198<<2)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
        $200 = (((($scale8)) + 4|0) + ($198<<2)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
        $201 = HEAP32[$199>>2]|0; //@line 245 "/checkout/src/libcore/num/bignum.rs"
        $202 = HEAP32[$200>>2]|0; //@line 245 "/checkout/src/libcore/num/bignum.rs"
        $203 = $202 ^ -1; //@line 245 "/checkout/src/libcore/num/bignum.rs"
        $$arith27 = (($201) + ($203))|0; //@line 62 "/checkout/src/libcore/num/bignum.rs"
        $$overflow28 = ($$arith27>>>0)<($201>>>0); //@line 62 "/checkout/src/libcore/num/bignum.rs"
        $$$i$i = $noborrow$0$off010$i&1; //@line 64 "/checkout/src/libcore/num/bignum.rs"
        $$arith23 = (($$arith27) + ($$$i$i))|0; //@line 64 "/checkout/src/libcore/num/bignum.rs"
        $$overflow24 = ($$arith23>>>0)<($$arith27>>>0); //@line 64 "/checkout/src/libcore/num/bignum.rs"
        $$7$i$i = $$overflow28 | $$overflow24; //@line 66 "/checkout/src/libcore/num/bignum.rs"
        HEAP32[$199>>2] = $$arith23; //@line 246 "/checkout/src/libcore/num/bignum.rs"
        $204 = ($197>>>0)<($195>>>0); //@line 1093 "/checkout/src/libcore/iter/mod.rs"
        if ($204) {
         $198 = $197;$noborrow$0$off010$i = $$7$i$i;
        } else {
         break;
        }
       }
       if (!($$7$i$i)) {
        label = 88;
        break;
       }
      }
      HEAP32[$mant>>2] = $_0$0$sroa$speculated$i$i52; //@line 250 "/checkout/src/libcore/num/bignum.rs"
      $207 = $_0$0$sroa$speculated$i$i52;$d2$0 = 8;
     }
     $205 = HEAP32[$scale4>>2]|0; //@line 456 "/checkout/src/libcore/num/bignum.rs"
     $206 = ($205>>>0)>=($207>>>0); //@line 850 "/checkout/src/libcore/cmp.rs"
     $_0$0$sroa$speculated$i$i71 = $206 ? $205 : $207; //@line 462 "/checkout/src/libcore/cmp.rs"
     $208 = ($_0$0$sroa$speculated$i$i71>>>0)>(40); //@line 875 "/checkout/src/libcore/slice/mod.rs"
     if ($208) {
      label = 91;
      break;
     }
     $209 = (((($mant)) + 4|0) + ($_0$0$sroa$speculated$i$i71<<2)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $210 = (((($scale4)) + 4|0) + ($_0$0$sroa$speculated$i$i71<<2)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $other$sroa$5$0$i$i75 = $210;$self$sroa$2$0$i$i74 = $209;
     while(1) {
      $211 = ($self$sroa$2$0$i$i74|0)==($151|0); //@line 1212 "/checkout/src/libcore/slice/mod.rs"
      $212 = ((($self$sroa$2$0$i$i74)) + -4|0); //@line 623 "/checkout/src/libcore/ptr.rs"
      if ($211) {
       label = 97;
       break;
      }
      $213 = HEAP32[$212>>2]|0; //@line 103 "/checkout/src/libcore/clone.rs"
      $214 = ($other$sroa$5$0$i$i75|0)==($153|0); //@line 1212 "/checkout/src/libcore/slice/mod.rs"
      $215 = ((($other$sroa$5$0$i$i75)) + -4|0); //@line 623 "/checkout/src/libcore/ptr.rs"
      if ($214) {
       label = 98;
       break;
      }
      $217 = HEAP32[$215>>2]|0; //@line 103 "/checkout/src/libcore/clone.rs"
      $218 = ($213|0)==($217|0); //@line 859 "/checkout/src/libcore/cmp.rs"
      if ($218) {
       $other$sroa$5$0$i$i75 = $215;$self$sroa$2$0$i$i74 = $212;
      } else {
       label = 95;
       break;
      }
     }
     if ((label|0) == 95) {
      label = 0;
      $216 = ($213>>>0)<($217>>>0); //@line 860 "/checkout/src/libcore/cmp.rs"
      if ($216) {
       $232 = $207;$d2$1 = $d2$0;
      } else {
       label = 98;
      }
     }
     else if ((label|0) == 97) {
      label = 0;
      $switch$i43173tmp = ($other$sroa$5$0$i$i75|0)==($153|0); //@line 711 "/checkout/src/libcore/cmp.rs"
      if ($switch$i43173tmp) {
       label = 98;
      } else {
       $232 = $207;$d2$1 = $d2$0;
      }
     }
     if ((label|0) == 98) {
      label = 0;
      $219 = $d2$0 | 4; //@line 296 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
      $$idx$i88 = $_0$0$sroa$speculated$i$i71 << 2; //@line 664 "/checkout/src/libcore/num/mod.rs"
      $220 = (($$idx$i88|0) / 4)&-1; //@line 700 "/checkout/src/libcore/ptr.rs"
      $$idx$off$i89 = $$idx$i88 | 3; //@line 1093 "/checkout/src/libcore/iter/mod.rs"
      $221 = ($$idx$off$i89>>>0)<(7); //@line 1093 "/checkout/src/libcore/iter/mod.rs"
      if (!($221)) {
       $223 = 0;$noborrow$0$off010$i92 = 1;
       while(1) {
        $222 = (($223) + 1)|0; //@line 1095 "/checkout/src/libcore/iter/mod.rs"
        $224 = (((($mant)) + 4|0) + ($223<<2)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
        $225 = (((($scale4)) + 4|0) + ($223<<2)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
        $226 = HEAP32[$224>>2]|0; //@line 245 "/checkout/src/libcore/num/bignum.rs"
        $227 = HEAP32[$225>>2]|0; //@line 245 "/checkout/src/libcore/num/bignum.rs"
        $228 = $227 ^ -1; //@line 245 "/checkout/src/libcore/num/bignum.rs"
        $$arith19 = (($226) + ($228))|0; //@line 62 "/checkout/src/libcore/num/bignum.rs"
        $$overflow20 = ($$arith19>>>0)<($226>>>0); //@line 62 "/checkout/src/libcore/num/bignum.rs"
        $$$i$i93 = $noborrow$0$off010$i92&1; //@line 64 "/checkout/src/libcore/num/bignum.rs"
        $$arith15 = (($$arith19) + ($$$i$i93))|0; //@line 64 "/checkout/src/libcore/num/bignum.rs"
        $$overflow16 = ($$arith15>>>0)<($$arith19>>>0); //@line 64 "/checkout/src/libcore/num/bignum.rs"
        $$7$i$i94 = $$overflow20 | $$overflow16; //@line 66 "/checkout/src/libcore/num/bignum.rs"
        HEAP32[$224>>2] = $$arith15; //@line 246 "/checkout/src/libcore/num/bignum.rs"
        $229 = ($222>>>0)<($220>>>0); //@line 1093 "/checkout/src/libcore/iter/mod.rs"
        if ($229) {
         $223 = $222;$noborrow$0$off010$i92 = $$7$i$i94;
        } else {
         break;
        }
       }
       if (!($$7$i$i94)) {
        label = 101;
        break;
       }
      }
      HEAP32[$mant>>2] = $_0$0$sroa$speculated$i$i71; //@line 250 "/checkout/src/libcore/num/bignum.rs"
      $232 = $_0$0$sroa$speculated$i$i71;$d2$1 = $219;
     }
     $230 = HEAP32[$scale2>>2]|0; //@line 456 "/checkout/src/libcore/num/bignum.rs"
     $231 = ($230>>>0)>=($232>>>0); //@line 850 "/checkout/src/libcore/cmp.rs"
     $_0$0$sroa$speculated$i$i98 = $231 ? $230 : $232; //@line 462 "/checkout/src/libcore/cmp.rs"
     $233 = ($_0$0$sroa$speculated$i$i98>>>0)>(40); //@line 875 "/checkout/src/libcore/slice/mod.rs"
     if ($233) {
      label = 104;
      break;
     }
     $234 = (((($mant)) + 4|0) + ($_0$0$sroa$speculated$i$i98<<2)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $235 = (((($scale2)) + 4|0) + ($_0$0$sroa$speculated$i$i98<<2)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $other$sroa$5$0$i$i102 = $235;$self$sroa$2$0$i$i101 = $234;
     while(1) {
      $236 = ($self$sroa$2$0$i$i101|0)==($151|0); //@line 1212 "/checkout/src/libcore/slice/mod.rs"
      $237 = ((($self$sroa$2$0$i$i101)) + -4|0); //@line 623 "/checkout/src/libcore/ptr.rs"
      if ($236) {
       label = 110;
       break;
      }
      $238 = HEAP32[$237>>2]|0; //@line 103 "/checkout/src/libcore/clone.rs"
      $239 = ($other$sroa$5$0$i$i102|0)==($154|0); //@line 1212 "/checkout/src/libcore/slice/mod.rs"
      $240 = ((($other$sroa$5$0$i$i102)) + -4|0); //@line 623 "/checkout/src/libcore/ptr.rs"
      if ($239) {
       label = 111;
       break;
      }
      $242 = HEAP32[$240>>2]|0; //@line 103 "/checkout/src/libcore/clone.rs"
      $243 = ($238|0)==($242|0); //@line 859 "/checkout/src/libcore/cmp.rs"
      if ($243) {
       $other$sroa$5$0$i$i102 = $240;$self$sroa$2$0$i$i101 = $237;
      } else {
       label = 108;
       break;
      }
     }
     if ((label|0) == 108) {
      label = 0;
      $241 = ($238>>>0)<($242>>>0); //@line 860 "/checkout/src/libcore/cmp.rs"
      if ($241) {
       $257 = $232;$d2$2 = $d2$1;
      } else {
       label = 111;
      }
     }
     else if ((label|0) == 110) {
      label = 0;
      $switch$i41172tmp = ($other$sroa$5$0$i$i102|0)==($154|0); //@line 711 "/checkout/src/libcore/cmp.rs"
      if ($switch$i41172tmp) {
       label = 111;
      } else {
       $257 = $232;$d2$2 = $d2$1;
      }
     }
     if ((label|0) == 111) {
      label = 0;
      $244 = (($d2$1) + 2)<<24>>24; //@line 297 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
      $$idx$i115 = $_0$0$sroa$speculated$i$i98 << 2; //@line 664 "/checkout/src/libcore/num/mod.rs"
      $245 = (($$idx$i115|0) / 4)&-1; //@line 700 "/checkout/src/libcore/ptr.rs"
      $$idx$off$i116 = $$idx$i115 | 3; //@line 1093 "/checkout/src/libcore/iter/mod.rs"
      $246 = ($$idx$off$i116>>>0)<(7); //@line 1093 "/checkout/src/libcore/iter/mod.rs"
      if (!($246)) {
       $248 = 0;$noborrow$0$off010$i119 = 1;
       while(1) {
        $247 = (($248) + 1)|0; //@line 1095 "/checkout/src/libcore/iter/mod.rs"
        $249 = (((($mant)) + 4|0) + ($248<<2)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
        $250 = (((($scale2)) + 4|0) + ($248<<2)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
        $251 = HEAP32[$249>>2]|0; //@line 245 "/checkout/src/libcore/num/bignum.rs"
        $252 = HEAP32[$250>>2]|0; //@line 245 "/checkout/src/libcore/num/bignum.rs"
        $253 = $252 ^ -1; //@line 245 "/checkout/src/libcore/num/bignum.rs"
        $$arith11 = (($251) + ($253))|0; //@line 62 "/checkout/src/libcore/num/bignum.rs"
        $$overflow12 = ($$arith11>>>0)<($251>>>0); //@line 62 "/checkout/src/libcore/num/bignum.rs"
        $$$i$i120 = $noborrow$0$off010$i119&1; //@line 64 "/checkout/src/libcore/num/bignum.rs"
        $$arith7 = (($$arith11) + ($$$i$i120))|0; //@line 64 "/checkout/src/libcore/num/bignum.rs"
        $$overflow8 = ($$arith7>>>0)<($$arith11>>>0); //@line 64 "/checkout/src/libcore/num/bignum.rs"
        $$7$i$i121 = $$overflow12 | $$overflow8; //@line 66 "/checkout/src/libcore/num/bignum.rs"
        HEAP32[$249>>2] = $$arith7; //@line 246 "/checkout/src/libcore/num/bignum.rs"
        $254 = ($247>>>0)<($245>>>0); //@line 1093 "/checkout/src/libcore/iter/mod.rs"
        if ($254) {
         $248 = $247;$noborrow$0$off010$i119 = $$7$i$i121;
        } else {
         break;
        }
       }
       if (!($$7$i$i121)) {
        label = 114;
        break;
       }
      }
      HEAP32[$mant>>2] = $_0$0$sroa$speculated$i$i98; //@line 250 "/checkout/src/libcore/num/bignum.rs"
      $257 = $_0$0$sroa$speculated$i$i98;$d2$2 = $244;
     }
     $255 = HEAP32[$scale>>2]|0; //@line 456 "/checkout/src/libcore/num/bignum.rs"
     $256 = ($255>>>0)>=($257>>>0); //@line 850 "/checkout/src/libcore/cmp.rs"
     $_0$0$sroa$speculated$i$i125 = $256 ? $255 : $257; //@line 462 "/checkout/src/libcore/cmp.rs"
     $258 = ($_0$0$sroa$speculated$i$i125>>>0)>(40); //@line 875 "/checkout/src/libcore/slice/mod.rs"
     if ($258) {
      label = 117;
      break;
     }
     $259 = (((($mant)) + 4|0) + ($_0$0$sroa$speculated$i$i125<<2)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $260 = (((($scale)) + 4|0) + ($_0$0$sroa$speculated$i$i125<<2)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $other$sroa$5$0$i$i129 = $260;$self$sroa$2$0$i$i128 = $259;
     while(1) {
      $261 = ($self$sroa$2$0$i$i128|0)==($151|0); //@line 1212 "/checkout/src/libcore/slice/mod.rs"
      $262 = ((($self$sroa$2$0$i$i128)) + -4|0); //@line 623 "/checkout/src/libcore/ptr.rs"
      if ($261) {
       label = 123;
       break;
      }
      $263 = HEAP32[$262>>2]|0; //@line 103 "/checkout/src/libcore/clone.rs"
      $264 = ($other$sroa$5$0$i$i129|0)==($_7$sroa$0$0$$sroa_idx$i|0); //@line 1212 "/checkout/src/libcore/slice/mod.rs"
      $265 = ((($other$sroa$5$0$i$i129)) + -4|0); //@line 623 "/checkout/src/libcore/ptr.rs"
      if ($264) {
       label = 124;
       break;
      }
      $267 = HEAP32[$265>>2]|0; //@line 103 "/checkout/src/libcore/clone.rs"
      $268 = ($263|0)==($267|0); //@line 859 "/checkout/src/libcore/cmp.rs"
      if ($268) {
       $other$sroa$5$0$i$i129 = $265;$self$sroa$2$0$i$i128 = $262;
      } else {
       label = 121;
       break;
      }
     }
     if ((label|0) == 121) {
      label = 0;
      $266 = ($263>>>0)<($267>>>0); //@line 860 "/checkout/src/libcore/cmp.rs"
      if ($266) {
       $284 = $257;$d2$3 = $d2$2;
      } else {
       label = 124;
      }
     }
     else if ((label|0) == 123) {
      label = 0;
      $switch$i38171tmp = ($other$sroa$5$0$i$i129|0)==($_7$sroa$0$0$$sroa_idx$i|0); //@line 711 "/checkout/src/libcore/cmp.rs"
      if ($switch$i38171tmp) {
       label = 124;
      } else {
       $284 = $257;$d2$3 = $d2$2;
      }
     }
     if ((label|0) == 124) {
      label = 0;
      $269 = (($d2$2) + 1)<<24>>24; //@line 298 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
      $$idx$i142 = $_0$0$sroa$speculated$i$i125 << 2; //@line 664 "/checkout/src/libcore/num/mod.rs"
      $270 = (($$idx$i142|0) / 4)&-1; //@line 700 "/checkout/src/libcore/ptr.rs"
      $$idx$off$i143 = $$idx$i142 | 3; //@line 1093 "/checkout/src/libcore/iter/mod.rs"
      $271 = ($$idx$off$i143>>>0)<(7); //@line 1093 "/checkout/src/libcore/iter/mod.rs"
      if (!($271)) {
       $273 = 0;$noborrow$0$off010$i146 = 1;
       while(1) {
        $272 = (($273) + 1)|0; //@line 1095 "/checkout/src/libcore/iter/mod.rs"
        $274 = (((($mant)) + 4|0) + ($273<<2)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
        $275 = (((($scale)) + 4|0) + ($273<<2)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
        $276 = HEAP32[$274>>2]|0; //@line 245 "/checkout/src/libcore/num/bignum.rs"
        $277 = HEAP32[$275>>2]|0; //@line 245 "/checkout/src/libcore/num/bignum.rs"
        $278 = $277 ^ -1; //@line 245 "/checkout/src/libcore/num/bignum.rs"
        $$arith3 = (($276) + ($278))|0; //@line 62 "/checkout/src/libcore/num/bignum.rs"
        $$overflow4 = ($$arith3>>>0)<($276>>>0); //@line 62 "/checkout/src/libcore/num/bignum.rs"
        $$$i$i147 = $noborrow$0$off010$i146&1; //@line 64 "/checkout/src/libcore/num/bignum.rs"
        $$arith = (($$arith3) + ($$$i$i147))|0; //@line 64 "/checkout/src/libcore/num/bignum.rs"
        $$overflow = ($$arith>>>0)<($$arith3>>>0); //@line 64 "/checkout/src/libcore/num/bignum.rs"
        $$7$i$i148 = $$overflow4 | $$overflow; //@line 66 "/checkout/src/libcore/num/bignum.rs"
        HEAP32[$274>>2] = $$arith; //@line 246 "/checkout/src/libcore/num/bignum.rs"
        $279 = ($272>>>0)<($270>>>0); //@line 1093 "/checkout/src/libcore/iter/mod.rs"
        if ($279) {
         $273 = $272;$noborrow$0$off010$i146 = $$7$i$i148;
        } else {
         break;
        }
       }
       if (!($$7$i$i148)) {
        label = 127;
        break;
       }
      }
      HEAP32[$mant>>2] = $_0$0$sroa$speculated$i$i125; //@line 250 "/checkout/src/libcore/num/bignum.rs"
      $284 = $_0$0$sroa$speculated$i$i125;$d2$3 = $269;
     }
     $280 = ($iter$sroa$0$070>>>0)<($buf$1>>>0); //@line 301 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
     if (!($280)) {
      label = 164;
      break;
     }
     $281 = (($buf$0) + ($iter$sroa$0$070)|0); //@line 301 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
     $282 = (($d2$3) + 48)<<24>>24; //@line 301 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
     HEAP8[$281>>0] = $282; //@line 301 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
     $283 = ($284>>>0)>(40); //@line 887 "/checkout/src/libcore/slice/mod.rs"
     if ($283) {
      label = 131;
      break;
     }
     $285 = (((($mant)) + 4|0) + ($284<<2)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
     $286 = ($284|0)==(0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
     do {
      if ($286) {
       $sz$0$i48 = 0;
      } else {
       $carry$015$i43 = 0;$iter$sroa$0$014$i44 = $151;
       while(1) {
        $289 = ((($iter$sroa$0$014$i44)) + 4|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
        $290 = HEAP32[$iter$sroa$0$014$i44>>2]|0; //@line 262 "/checkout/src/libcore/num/bignum.rs"
        $291 = (___muldi3(($290|0),0,10,0)|0); //@line 72 "/checkout/src/libcore/num/bignum.rs"
        $292 = tempRet0; //@line 72 "/checkout/src/libcore/num/bignum.rs"
        $293 = (_i64Add(($291|0),($292|0),($carry$015$i43|0),0)|0); //@line 72 "/checkout/src/libcore/num/bignum.rs"
        $288 = tempRet0; //@line 72 "/checkout/src/libcore/num/bignum.rs"
        HEAP32[$iter$sroa$0$014$i44>>2] = $293; //@line 263 "/checkout/src/libcore/num/bignum.rs"
        $294 = ($289|0)==($285|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
        if ($294) {
         break;
        } else {
         $carry$015$i43 = $288;$iter$sroa$0$014$i44 = $289;
        }
       }
       $287 = ($288|0)==(0); //@line 266 "/checkout/src/libcore/num/bignum.rs"
       if ($287) {
        $sz$0$i48 = $284;
        break;
       }
       $295 = ($284>>>0)<(40); //@line 267 "/checkout/src/libcore/num/bignum.rs"
       if (!($295)) {
        label = 137;
        break L85;
       }
       HEAP32[$285>>2] = $288; //@line 267 "/checkout/src/libcore/num/bignum.rs"
       $296 = (($284) + 1)|0; //@line 268 "/checkout/src/libcore/num/bignum.rs"
       $sz$0$i48 = $296;
      }
     } while(0);
     HEAP32[$mant>>2] = $sz$0$i48; //@line 270 "/checkout/src/libcore/num/bignum.rs"
     $297 = ($155>>>0)<($$buf$1>>>0); //@line 846 "/checkout/src/libcore/cmp.rs"
     if ($297) {
      $157 = $sz$0$i48;$iter$sroa$0$070 = $155;
     } else {
      label = 58;
      break;
     }
    }
    switch (label|0) {
     case 58: {
      $299 = $255;$339 = 0;$len$065 = $$buf$1;
      break L82;
      break;
     }
     case 60: {
      __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($157,40); //@line 876 "/checkout/src/libcore/slice/mod.rs"
      // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
      break;
     }
     case 69: {
      $177 = ($$buf$1>>>0)<($iter$sroa$0$070>>>0); //@line 885 "/checkout/src/libcore/slice/mod.rs"
      if ($177) {
       __ZN4core5slice22slice_index_order_fail17h620f0e130a93079bE($iter$sroa$0$070,$$buf$1); //@line 886 "/checkout/src/libcore/slice/mod.rs"
       // unreachable; //@line 886 "/checkout/src/libcore/slice/mod.rs"
      }
      $178 = ($$buf$1>>>0)>($buf$1>>>0); //@line 887 "/checkout/src/libcore/slice/mod.rs"
      if ($178) {
       __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($$buf$1,$buf$1); //@line 888 "/checkout/src/libcore/slice/mod.rs"
       // unreachable; //@line 888 "/checkout/src/libcore/slice/mod.rs"
      }
      $179 = (($$buf$1) - ($iter$sroa$0$070))|0; //@line 868 "/checkout/src/libcore/slice/mod.rs"
      $180 = ($179|0)==(0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
      if (!($180)) {
       $181 = (($buf$0) + ($iter$sroa$0$070)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
       _memset(($181|0),48,($179|0))|0; //@line 290 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
      }
      $_0$sroa$0$0 = $$buf$1;$_0$sroa$3$0 = $k$0;
      HEAP32[$retVal>>2] = $_0$sroa$0$0; //@line 327 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
      $retVal$index1 = ((($retVal)) + 4|0); //@line 327 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
      HEAP16[$retVal$index1>>1] = $_0$sroa$3$0; //@line 327 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
      STACKTOP = sp;return; //@line 327 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
      break;
     }
     case 76: {
      __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($_0$0$sroa$speculated$i$i52,40); //@line 876 "/checkout/src/libcore/slice/mod.rs"
      // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
      break;
     }
     case 88: {
      __ZN4core9panicking5panic17h9fa3414033a56a4dE(12180); //@line 249 "/checkout/src/libcore/num/bignum.rs"
      // unreachable; //@line 249 "/checkout/src/libcore/num/bignum.rs"
      break;
     }
     case 91: {
      __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($_0$0$sroa$speculated$i$i71,40); //@line 876 "/checkout/src/libcore/slice/mod.rs"
      // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
      break;
     }
     case 101: {
      __ZN4core9panicking5panic17h9fa3414033a56a4dE(12180); //@line 249 "/checkout/src/libcore/num/bignum.rs"
      // unreachable; //@line 249 "/checkout/src/libcore/num/bignum.rs"
      break;
     }
     case 104: {
      __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($_0$0$sroa$speculated$i$i98,40); //@line 876 "/checkout/src/libcore/slice/mod.rs"
      // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
      break;
     }
     case 114: {
      __ZN4core9panicking5panic17h9fa3414033a56a4dE(12180); //@line 249 "/checkout/src/libcore/num/bignum.rs"
      // unreachable; //@line 249 "/checkout/src/libcore/num/bignum.rs"
      break;
     }
     case 117: {
      __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($_0$0$sroa$speculated$i$i125,40); //@line 876 "/checkout/src/libcore/slice/mod.rs"
      // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
      break;
     }
     case 127: {
      __ZN4core9panicking5panic17h9fa3414033a56a4dE(12180); //@line 249 "/checkout/src/libcore/num/bignum.rs"
      // unreachable; //@line 249 "/checkout/src/libcore/num/bignum.rs"
      break;
     }
     case 131: {
      __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($284,40); //@line 888 "/checkout/src/libcore/slice/mod.rs"
      // unreachable; //@line 888 "/checkout/src/libcore/slice/mod.rs"
      break;
     }
     case 137: {
      __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(12204,$284,40); //@line 267 "/checkout/src/libcore/num/bignum.rs"
      // unreachable; //@line 267 "/checkout/src/libcore/num/bignum.rs"
      break;
     }
     case 164: {
      __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(11324,$iter$sroa$0$070,$buf$1); //@line 301 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
      // unreachable; //@line 301 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
      break;
     }
    }
   }
  }
 } while(0);
 $298 = ($299>>>0)>(40); //@line 887 "/checkout/src/libcore/slice/mod.rs"
 if ($298) {
  __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($299,40); //@line 888 "/checkout/src/libcore/slice/mod.rs"
  // unreachable; //@line 888 "/checkout/src/libcore/slice/mod.rs"
 }
 $300 = (((($scale)) + 4|0) + ($299<<2)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
 $301 = ($299|0)==(0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
 do {
  if ($301) {
   $sz$0$i36 = 0;
  } else {
   $carry$015$i31 = 0;$iter$sroa$0$014$i32 = $_7$sroa$0$0$$sroa_idx$i;
   while(1) {
    $304 = ((($iter$sroa$0$014$i32)) + 4|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
    $305 = HEAP32[$iter$sroa$0$014$i32>>2]|0; //@line 262 "/checkout/src/libcore/num/bignum.rs"
    $306 = (___muldi3(($305|0),0,5,0)|0); //@line 72 "/checkout/src/libcore/num/bignum.rs"
    $307 = tempRet0; //@line 72 "/checkout/src/libcore/num/bignum.rs"
    $308 = (_i64Add(($306|0),($307|0),($carry$015$i31|0),0)|0); //@line 72 "/checkout/src/libcore/num/bignum.rs"
    $303 = tempRet0; //@line 72 "/checkout/src/libcore/num/bignum.rs"
    HEAP32[$iter$sroa$0$014$i32>>2] = $308; //@line 263 "/checkout/src/libcore/num/bignum.rs"
    $309 = ($304|0)==($300|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
    if ($309) {
     break;
    } else {
     $carry$015$i31 = $303;$iter$sroa$0$014$i32 = $304;
    }
   }
   $302 = ($303|0)==(0); //@line 266 "/checkout/src/libcore/num/bignum.rs"
   if ($302) {
    $sz$0$i36 = $299;
   } else {
    $310 = ($299>>>0)<(40); //@line 267 "/checkout/src/libcore/num/bignum.rs"
    if ($310) {
     HEAP32[$300>>2] = $303; //@line 267 "/checkout/src/libcore/num/bignum.rs"
     $311 = (($299) + 1)|0; //@line 268 "/checkout/src/libcore/num/bignum.rs"
     $sz$0$i36 = $311;
     break;
    } else {
     __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(12204,$299,40); //@line 267 "/checkout/src/libcore/num/bignum.rs"
     // unreachable; //@line 267 "/checkout/src/libcore/num/bignum.rs"
    }
   }
  }
 } while(0);
 HEAP32[$scale>>2] = $sz$0$i36; //@line 270 "/checkout/src/libcore/num/bignum.rs"
 $312 = HEAP32[$mant>>2]|0; //@line 456 "/checkout/src/libcore/num/bignum.rs"
 $313 = ($sz$0$i36>>>0)>=($312>>>0); //@line 850 "/checkout/src/libcore/cmp.rs"
 $_0$0$sroa$speculated$i$i = $313 ? $sz$0$i36 : $312; //@line 462 "/checkout/src/libcore/cmp.rs"
 $314 = ($_0$0$sroa$speculated$i$i>>>0)>(40); //@line 875 "/checkout/src/libcore/slice/mod.rs"
 if ($314) {
  __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($_0$0$sroa$speculated$i$i,40); //@line 876 "/checkout/src/libcore/slice/mod.rs"
  // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
 }
 $315 = ((($mant)) + 4|0); //@line 388 "/checkout/src/libcore/slice/mod.rs"
 $316 = (((($mant)) + 4|0) + ($_0$0$sroa$speculated$i$i<<2)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
 $317 = (((($scale)) + 4|0) + ($_0$0$sroa$speculated$i$i<<2)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
 $other$sroa$5$0$i$i = $317;$self$sroa$2$0$i$i = $316;
 while(1) {
  $318 = ($self$sroa$2$0$i$i|0)==($315|0); //@line 1212 "/checkout/src/libcore/slice/mod.rs"
  $319 = ((($self$sroa$2$0$i$i)) + -4|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  if ($318) {
   label = 151;
   break;
  }
  $320 = HEAP32[$319>>2]|0; //@line 103 "/checkout/src/libcore/clone.rs"
  $321 = ($other$sroa$5$0$i$i|0)==($_7$sroa$0$0$$sroa_idx$i|0); //@line 1212 "/checkout/src/libcore/slice/mod.rs"
  $322 = ((($other$sroa$5$0$i$i)) + -4|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  if ($321) {
   label = 160;
   break;
  }
  $324 = HEAP32[$322>>2]|0; //@line 103 "/checkout/src/libcore/clone.rs"
  $325 = ($320|0)==($324|0); //@line 859 "/checkout/src/libcore/cmp.rs"
  if ($325) {
   $other$sroa$5$0$i$i = $322;$self$sroa$2$0$i$i = $319;
  } else {
   label = 153;
   break;
  }
 }
 if ((label|0) == 151) {
  $not$$i$i = ($other$sroa$5$0$i$i|0)!=($_7$sroa$0$0$$sroa_idx$i|0); //@line 404 "/checkout/src/libcore/option.rs"
  $_0$0$i$i = $not$$i$i << 31 >> 31; //@line 2126 "/checkout/src/libcore/iter/iterator.rs"
  $_0$1$i$i = $_0$0$i$i;
  label = 155;
 }
 else if ((label|0) == 153) {
  $323 = ($320>>>0)<($324>>>0); //@line 860 "/checkout/src/libcore/cmp.rs"
  $$$i$le$i$i = $323 ? -1 : 1; //@line 860 "/checkout/src/libcore/cmp.rs"
  $_0$1$i$i = $$$i$le$i$i;
  label = 155;
 }
 L220: do {
  if ((label|0) == 155) {
   switch ($_0$1$i$i<<24>>24) {
   case 1:  {
    label = 160;
    break L220;
    break;
   }
   case 0:  {
    break;
   }
   default: {
    $k$2 = $k$0;$len$3 = $len$065;
    break L220;
   }
   }
   if ($339) {
    label = 160;
   } else {
    $326 = (($len$065) + -1)|0; //@line 311 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
    $327 = ($326>>>0)<($buf$1>>>0); //@line 825 "/checkout/src/libcore/slice/mod.rs"
    if ($327) {
     $328 = (($buf$0) + ($326)|0); //@line 825 "/checkout/src/libcore/slice/mod.rs"
     $329 = HEAP8[$328>>0]|0; //@line 311 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
     $330 = $329 & 1; //@line 311 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
     $not$ = ($330<<24>>24)==(0); //@line 311 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
     if ($not$) {
      $k$2 = $k$0;$len$3 = $len$065;
      break;
     } else {
      label = 160;
      break;
     }
    } else {
     __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(11308,$326,$buf$1); //@line 825 "/checkout/src/libcore/slice/mod.rs"
     // unreachable; //@line 825 "/checkout/src/libcore/slice/mod.rs"
    }
   }
  }
 } while(0);
 if ((label|0) == 160) {
  $331 = (__ZN4core3num7flt2dec8round_up17hd6184f9bc0abdbe1E($buf$0,$buf$1,$len$065)|0); //@line 314 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
  $abi_cast$sroa$4$0$extract$shift = ($331&65535) >>> 8; //@line 314 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
  $abi_cast$sroa$4$0$extract$trunc = $abi_cast$sroa$4$0$extract$shift&255; //@line 314 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
  $332 = $331 & 1; //@line 314 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
  $333 = ($332<<16>>16)==(0); //@line 314 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
  if ($333) {
   $k$2 = $k$0;$len$3 = $len$065;
  } else {
   $334 = (($k$0) + 1)<<16>>16; //@line 318 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
   $335 = ($334<<16>>16)>($limit<<16>>16); //@line 319 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
   $336 = ($len$065>>>0)<($buf$1>>>0); //@line 319 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
   $or$cond = $335 & $336; //@line 319 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
   if ($or$cond) {
    $337 = (($len$065) + 1)|0; //@line 321 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
    $338 = (($buf$0) + ($len$065)|0); //@line 320 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
    HEAP8[$338>>0] = $abi_cast$sroa$4$0$extract$trunc; //@line 320 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
    $k$2 = $334;$len$3 = $337;
   } else {
    $k$2 = $334;$len$3 = $len$065;
   }
  }
 }
 $_0$sroa$0$0 = $len$3;$_0$sroa$3$0 = $k$2;
 HEAP32[$retVal>>2] = $_0$sroa$0$0; //@line 327 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 $retVal$index1 = ((($retVal)) + 4|0); //@line 327 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 HEAP16[$retVal$index1>>1] = $_0$sroa$3$0; //@line 327 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
 STACKTOP = sp;return; //@line 327 "/checkout/src/libcore/num/flt2dec/strategy/dragon.rs"
}
function __ZN4core6option13expect_failed17hc7b0dae7b501c3c5E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_2 = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$4$0$$sroa_idx2$i = 0, $_9 = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_9 = sp + 32|0;
 $_2 = sp + 8|0;
 $msg = sp;
 HEAP32[$msg>>2] = $0;
 $2 = ((($msg)) + 4|0);
 HEAP32[$2>>2] = $1;
 HEAP32[$_9>>2] = $msg; //@line 891 "/checkout/src/libcore/option.rs"
 $3 = ((($_9)) + 4|0); //@line 891 "/checkout/src/libcore/option.rs"
 HEAP32[$3>>2] = 465; //@line 891 "/checkout/src/libcore/option.rs"
 HEAP32[$_2>>2] = 11340; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $4 = ((($_2)) + 4|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$4>>2] = 1; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $_5$sroa$0$0$$sroa_idx$i = ((($_2)) + 8|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 11348; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $_5$sroa$4$0$$sroa_idx2$i = ((($_2)) + 12|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5$sroa$4$0$$sroa_idx2$i>>2] = 1; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $5 = ((($_2)) + 16|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$5>>2] = $_9; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $6 = ((($_2)) + 20|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$6>>2] = 1; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 __ZN4core9panicking9panic_fmt17hff08f8fc41769480E($_2,11384); //@line 891 "/checkout/src/libcore/option.rs"
 // unreachable; //@line 891 "/checkout/src/libcore/option.rs"
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17hf18f346b517111bbE($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $$pre$i3 = 0, $$pre1$i7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$in$i = 0;
 var $_0$0$off0$i$i14 = 0, $_21$i = 0, $builder1$i = 0, $or$cond = 0, $phitmp$i12 = 0, $switch$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_21$i = sp + 12|0;
 $builder1$i = sp;
 $0 = HEAP32[$self>>2]|0; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $1 = HEAP8[$0>>0]|0; //@line 157 "/checkout/src/libcore/option.rs"
 $switch$i = ($1<<24>>24)==(1); //@line 157 "/checkout/src/libcore/option.rs"
 if (!($switch$i)) {
  $2 = ((($f)) + 24|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $3 = HEAP32[$2>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $4 = ((($f)) + 28|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $5 = HEAP32[$4>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $6 = ((($5)) + 12|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $7 = HEAP32[$6>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $8 = (FUNCTION_TABLE_iiii[$7 & 511]($3,27669,4)|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $_0$0$in$i = $8;
  STACKTOP = sp;return ($_0$0$in$i|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 }
 $9 = ((($0)) + 1|0); //@line 165 "/checkout/src/libcore/option.rs"
 $10 = ((($f)) + 24|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $11 = HEAP32[$10>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $12 = ((($f)) + 28|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $13 = HEAP32[$12>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $14 = ((($13)) + 12|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $15 = HEAP32[$14>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $16 = (FUNCTION_TABLE_iiii[$15 & 511]($11,27673,4)|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$builder1$i>>2] = $f; //@line 187 "/checkout/src/libcore/fmt/builders.rs"
 $17 = ((($builder1$i)) + 8|0); //@line 187 "/checkout/src/libcore/fmt/builders.rs"
 $18 = $16&1; //@line 187 "/checkout/src/libcore/fmt/builders.rs"
 HEAP8[$17>>0] = $18; //@line 187 "/checkout/src/libcore/fmt/builders.rs"
 $19 = ((($builder1$i)) + 4|0); //@line 187 "/checkout/src/libcore/fmt/builders.rs"
 HEAP32[$19>>2] = 0; //@line 187 "/checkout/src/libcore/fmt/builders.rs"
 $20 = ((($builder1$i)) + 9|0); //@line 187 "/checkout/src/libcore/fmt/builders.rs"
 HEAP8[$20>>0] = 0; //@line 187 "/checkout/src/libcore/fmt/builders.rs"
 HEAP32[$_21$i>>2] = $9; //@line 165 "/checkout/src/libcore/option.rs"
 (__ZN4core3fmt8builders10DebugTuple5field17hf986ac1f5cbaa58cE($builder1$i,$_21$i,11400)|0); //@line 157 "/checkout/src/libcore/option.rs"
 $21 = HEAP32[$19>>2]|0; //@line 221 "/checkout/src/libcore/fmt/builders.rs"
 $22 = ($21|0)==(0); //@line 221 "/checkout/src/libcore/fmt/builders.rs"
 $$pre$i3 = HEAP8[$17>>0]|0;
 if ($22) {
  $56 = $$pre$i3;
 } else {
  $23 = ($$pre$i3<<24>>24)==(0); //@line 222 "/checkout/src/libcore/fmt/builders.rs"
  do {
   if ($23) {
    $24 = HEAP32[$builder1$i>>2]|0; //@line 236 "/checkout/src/libcore/fmt/builders.rs"
    $25 = HEAP32[$24>>2]|0; //@line 1367 "/checkout/src/libcore/fmt/mod.rs"
    $26 = $25 & 4; //@line 1367 "/checkout/src/libcore/fmt/mod.rs"
    $27 = ($26|0)==(0); //@line 1367 "/checkout/src/libcore/fmt/mod.rs"
    if ($27) {
     $36 = $21;
    } else {
     $28 = ((($24)) + 24|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
     $29 = HEAP32[$28>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
     $30 = ((($24)) + 28|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
     $31 = HEAP32[$30>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
     $32 = ((($31)) + 12|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
     $33 = HEAP32[$32>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
     $34 = (FUNCTION_TABLE_iiii[$33 & 511]($29,25938,1)|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
     if ($34) {
      $_0$0$off0$i$i14 = 1;
      break;
     }
     $$pre1$i7 = HEAP32[$19>>2]|0;
     $36 = $$pre1$i7;
    }
    $35 = ($36|0)!=(1); //@line 226 "/checkout/src/libcore/fmt/builders.rs"
    $37 = HEAP8[$20>>0]|0; //@line 226 "/checkout/src/libcore/fmt/builders.rs"
    $38 = ($37<<24>>24)==(0); //@line 226 "/checkout/src/libcore/fmt/builders.rs"
    $or$cond = $35 | $38; //@line 226 "/checkout/src/libcore/fmt/builders.rs"
    if (!($or$cond)) {
     $39 = HEAP32[$builder1$i>>2]|0; //@line 227 "/checkout/src/libcore/fmt/builders.rs"
     $40 = ((($39)) + 24|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
     $41 = HEAP32[$40>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
     $42 = ((($39)) + 28|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
     $43 = HEAP32[$42>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
     $44 = ((($43)) + 12|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
     $45 = HEAP32[$44>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
     $46 = (FUNCTION_TABLE_iiii[$45 & 511]($41,25937,1)|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
     if ($46) {
      $_0$0$off0$i$i14 = 1;
      break;
     }
    }
    $47 = HEAP32[$builder1$i>>2]|0; //@line 229 "/checkout/src/libcore/fmt/builders.rs"
    $48 = ((($47)) + 24|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
    $49 = HEAP32[$48>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
    $50 = ((($47)) + 28|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
    $51 = HEAP32[$50>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
    $52 = ((($51)) + 12|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
    $53 = HEAP32[$52>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
    $54 = (FUNCTION_TABLE_iiii[$53 & 511]($49,25943,1)|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
    $phitmp$i12 = $54&1; //@line 230 "/checkout/src/libcore/fmt/builders.rs"
    $_0$0$off0$i$i14 = $phitmp$i12;
   } else {
    $_0$0$off0$i$i14 = 1;
   }
  } while(0);
  HEAP8[$17>>0] = $_0$0$off0$i$i14; //@line 222 "/checkout/src/libcore/fmt/builders.rs"
  $56 = $_0$0$off0$i$i14;
 }
 $55 = ($56<<24>>24)!=(0); //@line 232 "/checkout/src/libcore/fmt/builders.rs"
 $_0$0$in$i = $55;
 STACKTOP = sp;return ($_0$0$in$i|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
}
function __ZN4core3ptr13drop_in_place17h0a6bebd1f5591014E_2364($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE($file_line_col,$0,$1) {
 $file_line_col = $file_line_col|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $_11 = 0, $_4 = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$4$0$$sroa_idx2$i = 0, $index = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_11 = sp + 32|0;
 $_4 = sp + 8|0;
 $len = sp + 4|0;
 $index = sp;
 HEAP32[$index>>2] = $0;
 HEAP32[$len>>2] = $1;
 HEAP32[$_11>>2] = $len; //@line 58 "/checkout/src/libcore/panicking.rs"
 $2 = ((($_11)) + 4|0); //@line 58 "/checkout/src/libcore/panicking.rs"
 HEAP32[$2>>2] = 289; //@line 58 "/checkout/src/libcore/panicking.rs"
 $3 = ((($_11)) + 8|0); //@line 58 "/checkout/src/libcore/panicking.rs"
 HEAP32[$3>>2] = $index; //@line 58 "/checkout/src/libcore/panicking.rs"
 $4 = ((($_11)) + 12|0); //@line 58 "/checkout/src/libcore/panicking.rs"
 HEAP32[$4>>2] = 289; //@line 58 "/checkout/src/libcore/panicking.rs"
 HEAP32[$_4>>2] = 11416; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $5 = ((($_4)) + 4|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$5>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $_5$sroa$0$0$$sroa_idx$i = ((($_4)) + 8|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 12044; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $_5$sroa$4$0$$sroa_idx2$i = ((($_4)) + 12|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5$sroa$4$0$$sroa_idx2$i>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $6 = ((($_4)) + 16|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$6>>2] = $_11; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $7 = ((($_4)) + 20|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$7>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 __ZN4core9panicking9panic_fmt17hff08f8fc41769480E($_4,$file_line_col); //@line 58 "/checkout/src/libcore/panicking.rs"
 // unreachable; //@line 58 "/checkout/src/libcore/panicking.rs"
}
function __ZN4core9panicking9panic_fmt17hff08f8fc41769480E($fmt,$file_line_col) {
 $fmt = $fmt|0;
 $file_line_col = $file_line_col|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $_6 = 0, $_6$byval_copy = 0, $arg = 0, $arg$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $arg$byval_copy = sp + 56|0;
 $_6$byval_copy = sp + 32|0;
 $arg = sp + 24|0;
 $_6 = sp;
 $0 = HEAP32[$file_line_col>>2]|0; //@line 70 "/checkout/src/libcore/panicking.rs"
 $1 = ((($file_line_col)) + 4|0); //@line 70 "/checkout/src/libcore/panicking.rs"
 $2 = HEAP32[$1>>2]|0; //@line 70 "/checkout/src/libcore/panicking.rs"
 $3 = ((($file_line_col)) + 8|0); //@line 70 "/checkout/src/libcore/panicking.rs"
 $4 = HEAP32[$3>>2]|0; //@line 70 "/checkout/src/libcore/panicking.rs"
 $5 = ((($file_line_col)) + 12|0); //@line 70 "/checkout/src/libcore/panicking.rs"
 $6 = HEAP32[$5>>2]|0; //@line 70 "/checkout/src/libcore/panicking.rs"
 ;HEAP32[$_6>>2]=HEAP32[$fmt>>2]|0;HEAP32[$_6+4>>2]=HEAP32[$fmt+4>>2]|0;HEAP32[$_6+8>>2]=HEAP32[$fmt+8>>2]|0;HEAP32[$_6+12>>2]=HEAP32[$fmt+12>>2]|0;HEAP32[$_6+16>>2]=HEAP32[$fmt+16>>2]|0;HEAP32[$_6+20>>2]=HEAP32[$fmt+20>>2]|0; //@line 71 "/checkout/src/libcore/panicking.rs"
 HEAP32[$arg>>2] = $0; //@line 71 "/checkout/src/libcore/panicking.rs"
 $7 = ((($arg)) + 4|0); //@line 71 "/checkout/src/libcore/panicking.rs"
 HEAP32[$7>>2] = $2; //@line 71 "/checkout/src/libcore/panicking.rs"
 ;HEAP32[$_6$byval_copy>>2]=HEAP32[$_6>>2]|0;HEAP32[$_6$byval_copy+4>>2]=HEAP32[$_6+4>>2]|0;HEAP32[$_6$byval_copy+8>>2]=HEAP32[$_6+8>>2]|0;HEAP32[$_6$byval_copy+12>>2]=HEAP32[$_6+12>>2]|0;HEAP32[$_6$byval_copy+16>>2]=HEAP32[$_6+16>>2]|0;HEAP32[$_6$byval_copy+20>>2]=HEAP32[$_6+20>>2]|0; //@line 71 "/checkout/src/libcore/panicking.rs"
 ;HEAP32[$arg$byval_copy>>2]=HEAP32[$arg>>2]|0;HEAP32[$arg$byval_copy+4>>2]=HEAP32[$arg+4>>2]|0; //@line 71 "/checkout/src/libcore/panicking.rs"
 _rust_begin_unwind($_6$byval_copy,$arg$byval_copy,$4,$6); //@line 71 "/checkout/src/libcore/panicking.rs"
 // unreachable;
}
function __ZN4core9panicking5panic17h9fa3414033a56a4dE($expr_file_line_col) {
 $expr_file_line_col = $expr_file_line_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_17 = 0;
 var $_4$sroa$0$0$$sroa_idx$i = 0, $_6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_17 = sp + 32|0;
 $_10 = sp + 24|0;
 $_6 = sp;
 $0 = HEAP32[$expr_file_line_col>>2]|0; //@line 50 "/checkout/src/libcore/panicking.rs"
 $1 = ((($expr_file_line_col)) + 4|0); //@line 50 "/checkout/src/libcore/panicking.rs"
 $2 = HEAP32[$1>>2]|0; //@line 50 "/checkout/src/libcore/panicking.rs"
 $3 = ((($expr_file_line_col)) + 8|0); //@line 50 "/checkout/src/libcore/panicking.rs"
 $4 = HEAP32[$3>>2]|0; //@line 50 "/checkout/src/libcore/panicking.rs"
 $5 = ((($expr_file_line_col)) + 12|0); //@line 50 "/checkout/src/libcore/panicking.rs"
 $6 = HEAP32[$5>>2]|0; //@line 50 "/checkout/src/libcore/panicking.rs"
 $7 = ((($expr_file_line_col)) + 16|0); //@line 50 "/checkout/src/libcore/panicking.rs"
 $8 = HEAP32[$7>>2]|0; //@line 50 "/checkout/src/libcore/panicking.rs"
 $9 = ((($expr_file_line_col)) + 20|0); //@line 50 "/checkout/src/libcore/panicking.rs"
 $10 = HEAP32[$9>>2]|0; //@line 50 "/checkout/src/libcore/panicking.rs"
 HEAP32[$_10>>2] = $0; //@line 51 "/checkout/src/libcore/panicking.rs"
 $11 = ((($_10)) + 4|0); //@line 51 "/checkout/src/libcore/panicking.rs"
 HEAP32[$11>>2] = $2; //@line 51 "/checkout/src/libcore/panicking.rs"
 HEAP32[$_6>>2] = $_10; //@line 343 "/checkout/src/libcore/fmt/mod.rs"
 $12 = ((($_6)) + 4|0); //@line 343 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$12>>2] = 1; //@line 343 "/checkout/src/libcore/fmt/mod.rs"
 $_4$sroa$0$0$$sroa_idx$i = ((($_6)) + 8|0); //@line 343 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_4$sroa$0$0$$sroa_idx$i>>2] = 0; //@line 343 "/checkout/src/libcore/fmt/mod.rs"
 $13 = ((($_6)) + 16|0); //@line 343 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$13>>2] = 38620; //@line 343 "/checkout/src/libcore/fmt/mod.rs"
 $14 = ((($_6)) + 20|0); //@line 343 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$14>>2] = 0; //@line 343 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_17>>2] = $4; //@line 51 "/checkout/src/libcore/panicking.rs"
 $15 = ((($_17)) + 4|0); //@line 51 "/checkout/src/libcore/panicking.rs"
 HEAP32[$15>>2] = $6; //@line 51 "/checkout/src/libcore/panicking.rs"
 $16 = ((($_17)) + 8|0); //@line 51 "/checkout/src/libcore/panicking.rs"
 HEAP32[$16>>2] = $8; //@line 51 "/checkout/src/libcore/panicking.rs"
 $17 = ((($_17)) + 12|0); //@line 51 "/checkout/src/libcore/panicking.rs"
 HEAP32[$17>>2] = $10; //@line 51 "/checkout/src/libcore/panicking.rs"
 __ZN4core9panicking9panic_fmt17hff08f8fc41769480E($_6,$_17); //@line 51 "/checkout/src/libcore/panicking.rs"
 // unreachable; //@line 51 "/checkout/src/libcore/panicking.rs"
}
function __ZN71__LT_core__ops__range__Range_LT_Idx_GT__u20_as_u20_core__fmt__Debug_GT_3fmt17he6c28011334139a8E($self,$fmt) {
 $self = $self|0;
 $fmt = $fmt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_11 = 0, $_4$sroa$4$0$$sroa_idx = 0, $_4$sroa$5$0$$sroa_idx = 0, $_4$sroa$6$0$$sroa_idx = 0, $_4$sroa$7$0$$sroa_idx = 0, $_4$sroa$8$0$$sroa_idx = 0, $_5$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_5$i = sp + 16|0;
 $_11 = sp;
 $0 = ((($self)) + 4|0); //@line 91 "/checkout/src/libcore/ops/range.rs"
 HEAP32[$_11>>2] = $self; //@line 91 "/checkout/src/libcore/ops/range.rs"
 $1 = ((($_11)) + 4|0); //@line 91 "/checkout/src/libcore/ops/range.rs"
 HEAP32[$1>>2] = 168; //@line 91 "/checkout/src/libcore/ops/range.rs"
 $2 = ((($_11)) + 8|0); //@line 91 "/checkout/src/libcore/ops/range.rs"
 HEAP32[$2>>2] = $0; //@line 91 "/checkout/src/libcore/ops/range.rs"
 $3 = ((($_11)) + 12|0); //@line 91 "/checkout/src/libcore/ops/range.rs"
 HEAP32[$3>>2] = 168; //@line 91 "/checkout/src/libcore/ops/range.rs"
 $4 = ((($fmt)) + 24|0); //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
 $5 = HEAP32[$4>>2]|0; //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
 $6 = ((($fmt)) + 28|0); //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
 $7 = HEAP32[$6>>2]|0; //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5$i>>2] = 11432; //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
 $_4$sroa$4$0$$sroa_idx = ((($_5$i)) + 4|0); //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_4$sroa$4$0$$sroa_idx>>2] = 2; //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
 $_4$sroa$5$0$$sroa_idx = ((($_5$i)) + 8|0); //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_4$sroa$5$0$$sroa_idx>>2] = 12044; //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
 $_4$sroa$6$0$$sroa_idx = ((($_5$i)) + 12|0); //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_4$sroa$6$0$$sroa_idx>>2] = 2; //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
 $_4$sroa$7$0$$sroa_idx = ((($_5$i)) + 16|0); //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_4$sroa$7$0$$sroa_idx>>2] = $_11; //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
 $_4$sroa$8$0$$sroa_idx = ((($_5$i)) + 20|0); //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_4$sroa$8$0$$sroa_idx>>2] = 2; //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
 $8 = (__ZN4core3fmt5write17h6c8dbcbe50728a23E($5,$7,$_5$i)|0); //@line 1323 "/checkout/src/libcore/fmt/mod.rs"
 STACKTOP = sp;return ($8|0); //@line 92 "/checkout/src/libcore/ops/range.rs"
}
function __ZN4core3num54__LT_impl_u20_core__str__FromStr_u20_for_u20_usize_GT_8from_str17h284a887a45c89f3fE($0,$src$0,$src$1) {
 $0 = $0|0;
 $src$0 = $src$0|0;
 $src$1 = $src$1|0;
 var $$arith = 0, $$arith2 = 0, $$overflow = 0, $$overflow3 = 0, $$sink$i = 0, $$sink$i47$i = 0, $$sink5$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond$i = 0, $iter$sroa$0$0111$i = 0, $result$0112$i = 0, $self$off$i40$i = 0, $self$off5$i43$i = 0, $self$off6$i45$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($src$1|0)==(0); //@line 2508 "/checkout/src/libcore/str/mod.rs"
 if ($1) {
  HEAP8[$0>>0] = 1; //@line 3309 "/checkout/src/libcore/num/mod.rs"
  $2 = ((($0)) + 1|0); //@line 3309 "/checkout/src/libcore/num/mod.rs"
  HEAP8[$2>>0] = 0; //@line 3309 "/checkout/src/libcore/num/mod.rs"
  return; //@line 3038 "/checkout/src/libcore/num/mod.rs"
 }
 $3 = HEAP8[$src$0>>0]|0; //@line 3321 "/checkout/src/libcore/num/mod.rs"
 $cond$i = ($3<<24>>24)==(43); //@line 3321 "/checkout/src/libcore/num/mod.rs"
 $4 = ((($src$0)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
 $$sink5$i = $cond$i ? $4 : $src$0; //@line 3321 "/checkout/src/libcore/num/mod.rs"
 $5 = $cond$i << 31 >> 31; //@line 3321 "/checkout/src/libcore/num/mod.rs"
 $$sink$i = (($5) + ($src$1))|0; //@line 3321 "/checkout/src/libcore/num/mod.rs"
 $6 = ($$sink$i|0)==(0); //@line 140 "/checkout/src/libcore/slice/mod.rs"
 if ($6) {
  HEAP8[$0>>0] = 1; //@line 3327 "/checkout/src/libcore/num/mod.rs"
  $7 = ((($0)) + 1|0); //@line 3327 "/checkout/src/libcore/num/mod.rs"
  HEAP8[$7>>0] = 0; //@line 3327 "/checkout/src/libcore/num/mod.rs"
  return; //@line 3038 "/checkout/src/libcore/num/mod.rs"
 }
 $8 = (($$sink5$i) + ($$sink$i)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
 $iter$sroa$0$0111$i = $$sink5$i;$result$0112$i = 0;
 while(1) {
  $9 = ((($iter$sroa$0$0111$i)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $10 = HEAP8[$iter$sroa$0$0111$i>>0]|0; //@line 3333 "/checkout/src/libcore/num/mod.rs"
  $11 = $10&255; //@line 3334 "/checkout/src/libcore/num/mod.rs"
  $self$off$i40$i = (($11) + -48)|0; //@line 407 "/checkout/src/libcore/char.rs"
  $12 = ($self$off$i40$i>>>0)<(10); //@line 407 "/checkout/src/libcore/char.rs"
  if ($12) {
   $$sink$i47$i = -48;
  } else {
   $self$off5$i43$i = (($11) + -97)|0; //@line 408 "/checkout/src/libcore/char.rs"
   $13 = ($self$off5$i43$i>>>0)<(26); //@line 408 "/checkout/src/libcore/char.rs"
   if ($13) {
    $$sink$i47$i = -87;
   } else {
    $self$off6$i45$i = (($11) + -65)|0; //@line 409 "/checkout/src/libcore/char.rs"
    $14 = ($self$off6$i45$i>>>0)<(26); //@line 409 "/checkout/src/libcore/char.rs"
    if ($14) {
     $$sink$i47$i = -55;
    } else {
     label = 10;
     break;
    }
   }
  }
  $15 = (($$sink$i47$i) + ($11))|0;
  $16 = ($15>>>0)<(10); //@line 412 "/checkout/src/libcore/char.rs"
  if (!($16)) {
   label = 10;
   break;
  }
  $$arith2 = ($result$0112$i*10)|0; //@line 2032 "/checkout/src/libcore/num/mod.rs"
  $$overflow3 = ($result$0112$i>>>0)>(429496729); //@line 2032 "/checkout/src/libcore/num/mod.rs"
  if ($$overflow3) {
   label = 12;
   break;
  }
  $$arith = (($$arith2) + ($15))|0; //@line 1982 "/checkout/src/libcore/num/mod.rs"
  $$overflow = ($$arith>>>0)<($$arith2>>>0); //@line 1982 "/checkout/src/libcore/num/mod.rs"
  if ($$overflow) {
   label = 14;
   break;
  }
  $20 = ($9|0)==($8|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
  if ($20) {
   label = 16;
   break;
  } else {
   $iter$sroa$0$0111$i = $9;$result$0112$i = $$arith;
  }
 }
 if ((label|0) == 10) {
  HEAP8[$0>>0] = 1; //@line 3336 "/checkout/src/libcore/num/mod.rs"
  $17 = ((($0)) + 1|0); //@line 3336 "/checkout/src/libcore/num/mod.rs"
  HEAP8[$17>>0] = 1; //@line 3336 "/checkout/src/libcore/num/mod.rs"
  return; //@line 3038 "/checkout/src/libcore/num/mod.rs"
 }
 else if ((label|0) == 12) {
  HEAP8[$0>>0] = 1; //@line 3340 "/checkout/src/libcore/num/mod.rs"
  $18 = ((($0)) + 1|0); //@line 3340 "/checkout/src/libcore/num/mod.rs"
  HEAP8[$18>>0] = 2; //@line 3340 "/checkout/src/libcore/num/mod.rs"
  return; //@line 3038 "/checkout/src/libcore/num/mod.rs"
 }
 else if ((label|0) == 14) {
  HEAP8[$0>>0] = 1; //@line 3344 "/checkout/src/libcore/num/mod.rs"
  $19 = ((($0)) + 1|0); //@line 3344 "/checkout/src/libcore/num/mod.rs"
  HEAP8[$19>>0] = 2; //@line 3344 "/checkout/src/libcore/num/mod.rs"
  return; //@line 3038 "/checkout/src/libcore/num/mod.rs"
 }
 else if ((label|0) == 16) {
  HEAP8[$0>>0] = 0; //@line 3364 "/checkout/src/libcore/num/mod.rs"
  $21 = ((($0)) + 4|0); //@line 3364 "/checkout/src/libcore/num/mod.rs"
  HEAP32[$21>>2] = $$arith; //@line 3364 "/checkout/src/libcore/num/mod.rs"
  return; //@line 3038 "/checkout/src/libcore/num/mod.rs"
 }
}
function __ZN61__LT_core__num__ParseIntError_u20_as_u20_core__fmt__Debug_GT_3fmt17hdb5b50f9117623b7E($self,$__arg_0) {
 $self = $self|0;
 $__arg_0 = $__arg_0|0;
 var $$pre$i = 0, $$sink$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$off0$i$i = 0, $_15 = 0, $builder = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_15 = sp + 8|0;
 $builder = sp;
 $0 = ((($__arg_0)) + 24|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $1 = HEAP32[$0>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $2 = ((($__arg_0)) + 28|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $3 = HEAP32[$2>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $4 = ((($3)) + 12|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $5 = HEAP32[$4>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $6 = (FUNCTION_TABLE_iiii[$5 & 511]($1,27729,13)|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$builder>>2] = $__arg_0; //@line 96 "/checkout/src/libcore/fmt/builders.rs"
 $7 = ((($builder)) + 4|0); //@line 96 "/checkout/src/libcore/fmt/builders.rs"
 $8 = $6&1; //@line 96 "/checkout/src/libcore/fmt/builders.rs"
 HEAP8[$7>>0] = $8; //@line 96 "/checkout/src/libcore/fmt/builders.rs"
 $9 = ((($builder)) + 5|0); //@line 96 "/checkout/src/libcore/fmt/builders.rs"
 HEAP8[$9>>0] = 0; //@line 96 "/checkout/src/libcore/fmt/builders.rs"
 HEAP32[$_15>>2] = $self; //@line 3376 "/checkout/src/libcore/num/mod.rs"
 (__ZN4core3fmt8builders11DebugStruct5field17h5f57368d80e04997E($builder,27742,4,$_15,11448)|0); //@line 3373 "/checkout/src/libcore/num/mod.rs"
 $10 = HEAP8[$9>>0]|0; //@line 130 "/checkout/src/libcore/fmt/builders.rs"
 $11 = ($10<<24>>24)==(0); //@line 130 "/checkout/src/libcore/fmt/builders.rs"
 $$pre$i = HEAP8[$7>>0]|0;
 if ($11) {
  $25 = $$pre$i;
  $24 = ($25<<24>>24)!=(0); //@line 139 "/checkout/src/libcore/fmt/builders.rs"
  STACKTOP = sp;return ($24|0); //@line 3373 "/checkout/src/libcore/num/mod.rs"
 }
 $12 = ($$pre$i<<24>>24)==(0); //@line 131 "/checkout/src/libcore/fmt/builders.rs"
 if ($12) {
  $13 = HEAP32[$builder>>2]|0; //@line 143 "/checkout/src/libcore/fmt/builders.rs"
  $14 = HEAP32[$13>>2]|0; //@line 1367 "/checkout/src/libcore/fmt/mod.rs"
  $15 = $14 & 4; //@line 1367 "/checkout/src/libcore/fmt/mod.rs"
  $16 = ($15|0)!=(0); //@line 1367 "/checkout/src/libcore/fmt/mod.rs"
  $$sink$i$i$i = $16 ? 25939 : 25941; //@line 132 "/checkout/src/libcore/fmt/builders.rs"
  $17 = ((($13)) + 24|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $18 = HEAP32[$17>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $19 = ((($13)) + 28|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $20 = HEAP32[$19>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $21 = ((($20)) + 12|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $22 = HEAP32[$21>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $23 = (FUNCTION_TABLE_iiii[$22 & 511]($18,$$sink$i$i$i,2)|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $phitmp$i = $23&1;
  $_0$0$off0$i$i = $phitmp$i;
 } else {
  $_0$0$off0$i$i = 1;
 }
 HEAP8[$7>>0] = $_0$0$off0$i$i; //@line 131 "/checkout/src/libcore/fmt/builders.rs"
 $25 = $_0$0$off0$i$i;
 $24 = ($25<<24>>24)!=(0); //@line 139 "/checkout/src/libcore/fmt/builders.rs"
 STACKTOP = sp;return ($24|0); //@line 3373 "/checkout/src/libcore/num/mod.rs"
}
function __ZN4core3ptr13drop_in_place17h45628e00d608d7eaE($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h480720259b9d066dE($self,$f) {
 $self = $self|0;
 $f = $f|0;
 var $$sink66$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc$i = 0, $trunc$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self>>2]|0; //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
 $trunc$i = HEAP8[$0>>0]|0; //@line 3379 "/checkout/src/libcore/num/mod.rs"
 $trunc$i$clear = $trunc$i & 3; //@line 3379 "/checkout/src/libcore/num/mod.rs"
 switch ($trunc$i$clear<<24>>24) {
 case 0:  {
  $1 = ((($f)) + 24|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $2 = HEAP32[$1>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $3 = ((($f)) + 28|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $4 = HEAP32[$3>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $5 = ((($4)) + 12|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $6 = HEAP32[$5>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $7 = (FUNCTION_TABLE_iiii[$6 & 511]($2,27746,5)|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $$sink66$i = $7;
  return ($$sink66$i|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
  break;
 }
 case 1:  {
  $8 = ((($f)) + 24|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $9 = HEAP32[$8>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $10 = ((($f)) + 28|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $11 = HEAP32[$10>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $12 = ((($11)) + 12|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $13 = HEAP32[$12>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $14 = (FUNCTION_TABLE_iiii[$13 & 511]($9,27751,12)|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $$sink66$i = $14;
  return ($$sink66$i|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
  break;
 }
 case 2:  {
  $15 = ((($f)) + 24|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $16 = HEAP32[$15>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $17 = ((($f)) + 28|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $18 = HEAP32[$17>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $19 = ((($18)) + 12|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $20 = HEAP32[$19>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $21 = (FUNCTION_TABLE_iiii[$20 & 511]($16,27763,8)|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $$sink66$i = $21;
  return ($$sink66$i|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
  break;
 }
 case 3:  {
  $22 = ((($f)) + 24|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $23 = HEAP32[$22>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $24 = ((($f)) + 28|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $25 = HEAP32[$24>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $26 = ((($25)) + 12|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $27 = HEAP32[$26>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $28 = (FUNCTION_TABLE_iiii[$27 & 511]($23,27771,9)|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $$sink66$i = $28;
  return ($$sink66$i|0); //@line 1537 "/checkout/src/libcore/fmt/mod.rs"
  break;
 }
 default: {
  // unreachable; //@line 3379 "/checkout/src/libcore/num/mod.rs"
 }
 }
 return (0)|0;
}
function __ZN4core3num7flt2dec8round_up17hd6184f9bc0abdbe1E($d$0,$d$1,$n) {
 $d$0 = $d$0|0;
 $d$1 = $d$1|0;
 $n = $n|0;
 var $$arith = 0, $$overflow = 0, $$sink122$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$0 = 0, $_0$sroa$0$0$insert$insert = 0, $_0$sroa$4$0 = 0, $accum$0$i$i = 0, $accum$1$i$i = 0, $iter$sroa$0$053 = 0, $iter1$sroa$0$054 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($d$1>>>0)<($n>>>0); //@line 875 "/checkout/src/libcore/slice/mod.rs"
 if ($0) {
  __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($n,$d$1); //@line 876 "/checkout/src/libcore/slice/mod.rs"
  // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
 }
 $1 = (($d$0) + ($n)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
 $2 = $d$0; //@line 156 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $4 = $1;$accum$0$i$i = $n;
 while(1) {
  $3 = $4; //@line 699 "/checkout/src/libcore/ptr.rs"
  $5 = (($3) - ($2))|0; //@line 664 "/checkout/src/libcore/num/mod.rs"
  $6 = ($5>>>0)>(3); //@line 1227 "/checkout/src/libcore/slice/mod.rs"
  if (!($6)) {
   $24 = $4;$accum$1$i$i = $accum$0$i$i;
   label = 12;
   break;
  }
  $7 = ((($4)) + -1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $8 = HEAP8[$7>>0]|0; //@line 156 "/checkout/src/libcore/num/flt2dec/mod.rs"
  $9 = ($8<<24>>24)==(57); //@line 156 "/checkout/src/libcore/num/flt2dec/mod.rs"
  if (!($9)) {
   label = 6;
   break;
  }
  $11 = ((($4)) + -2|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $12 = HEAP8[$11>>0]|0; //@line 156 "/checkout/src/libcore/num/flt2dec/mod.rs"
  $13 = ($12<<24>>24)==(57); //@line 156 "/checkout/src/libcore/num/flt2dec/mod.rs"
  if (!($13)) {
   label = 8;
   break;
  }
  $15 = ((($4)) + -3|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $16 = HEAP8[$15>>0]|0; //@line 156 "/checkout/src/libcore/num/flt2dec/mod.rs"
  $17 = ($16<<24>>24)==(57); //@line 156 "/checkout/src/libcore/num/flt2dec/mod.rs"
  if (!($17)) {
   label = 10;
   break;
  }
  $19 = ((($4)) + -4|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $20 = (($accum$0$i$i) + -4)|0; //@line 1754 "/checkout/src/libcore/iter/iterator.rs"
  $21 = HEAP8[$19>>0]|0; //@line 156 "/checkout/src/libcore/num/flt2dec/mod.rs"
  $22 = ($21<<24>>24)==(57); //@line 156 "/checkout/src/libcore/num/flt2dec/mod.rs"
  if ($22) {
   $4 = $19;$accum$0$i$i = $20;
  } else {
   $$sink122$i$i = $20;
   label = 16;
   break;
  }
 }
 L10: do {
  if ((label|0) == 6) {
   $10 = (($accum$0$i$i) + -1)|0; //@line 1754 "/checkout/src/libcore/iter/iterator.rs"
   $$sink122$i$i = $10;
   label = 16;
  }
  else if ((label|0) == 8) {
   $14 = (($accum$0$i$i) + -2)|0; //@line 1754 "/checkout/src/libcore/iter/iterator.rs"
   $$sink122$i$i = $14;
   label = 16;
  }
  else if ((label|0) == 10) {
   $18 = (($accum$0$i$i) + -3)|0; //@line 1754 "/checkout/src/libcore/iter/iterator.rs"
   $$sink122$i$i = $18;
   label = 16;
  }
  else if ((label|0) == 12) {
   while(1) {
    label = 0;
    $23 = ($d$0|0)==($24|0); //@line 1233 "/checkout/src/libcore/slice/mod.rs"
    if ($23) {
     break;
    }
    $25 = ((($24)) + -1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
    $26 = (($accum$1$i$i) + -1)|0; //@line 1754 "/checkout/src/libcore/iter/iterator.rs"
    $27 = HEAP8[$25>>0]|0; //@line 156 "/checkout/src/libcore/num/flt2dec/mod.rs"
    $28 = ($27<<24>>24)==(57); //@line 156 "/checkout/src/libcore/num/flt2dec/mod.rs"
    if ($28) {
     $24 = $25;$accum$1$i$i = $26;
     label = 12;
    } else {
     $$sink122$i$i = $26;
     label = 16;
     break L10;
    }
   }
   $30 = ($n|0)==(0); //@line 162 "/checkout/src/libcore/num/flt2dec/mod.rs"
   if ($30) {
    $_0$sroa$0$0 = 1;$_0$sroa$4$0 = 12544;
   } else {
    $29 = ($d$1|0)==(0); //@line 163 "/checkout/src/libcore/num/flt2dec/mod.rs"
    if ($29) {
     __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(11496,0,0); //@line 163 "/checkout/src/libcore/num/flt2dec/mod.rs"
     // unreachable; //@line 163 "/checkout/src/libcore/num/flt2dec/mod.rs"
    }
    HEAP8[$d$0>>0] = 49; //@line 163 "/checkout/src/libcore/num/flt2dec/mod.rs"
    $40 = ($n>>>0)>(1); //@line 846 "/checkout/src/libcore/cmp.rs"
    if ($40) {
     $iter1$sroa$0$054 = 1;
     while(1) {
      $41 = (($iter1$sroa$0$054) + 1)|0;
      $42 = ($iter1$sroa$0$054>>>0)<($d$1>>>0); //@line 164 "/checkout/src/libcore/num/flt2dec/mod.rs"
      if (!($42)) {
       break;
      }
      $43 = (($d$0) + ($iter1$sroa$0$054)|0); //@line 164 "/checkout/src/libcore/num/flt2dec/mod.rs"
      HEAP8[$43>>0] = 48; //@line 164 "/checkout/src/libcore/num/flt2dec/mod.rs"
      $44 = ($41>>>0)<($n>>>0); //@line 846 "/checkout/src/libcore/cmp.rs"
      if ($44) {
       $iter1$sroa$0$054 = $41;
      } else {
       $_0$sroa$0$0 = 1;$_0$sroa$4$0 = 12288;
       break L10;
      }
     }
     __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(11512,$iter1$sroa$0$054,$d$1); //@line 164 "/checkout/src/libcore/num/flt2dec/mod.rs"
     // unreachable; //@line 164 "/checkout/src/libcore/num/flt2dec/mod.rs"
    } else {
     $_0$sroa$0$0 = 1;$_0$sroa$4$0 = 12288;
    }
   }
  }
 } while(0);
 L26: do {
  if ((label|0) == 16) {
   $31 = ($$sink122$i$i>>>0)<($d$1>>>0); //@line 158 "/checkout/src/libcore/num/flt2dec/mod.rs"
   if (!($31)) {
    __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(11464,$$sink122$i$i,$d$1); //@line 158 "/checkout/src/libcore/num/flt2dec/mod.rs"
    // unreachable; //@line 158 "/checkout/src/libcore/num/flt2dec/mod.rs"
   }
   $32 = (($d$0) + ($$sink122$i$i)|0); //@line 158 "/checkout/src/libcore/num/flt2dec/mod.rs"
   $33 = HEAP8[$32>>0]|0; //@line 158 "/checkout/src/libcore/num/flt2dec/mod.rs"
   $34 = (($33) + 1)<<24>>24; //@line 158 "/checkout/src/libcore/num/flt2dec/mod.rs"
   HEAP8[$32>>0] = $34; //@line 158 "/checkout/src/libcore/num/flt2dec/mod.rs"
   $35 = (($$sink122$i$i) + 1)|0; //@line 159 "/checkout/src/libcore/num/flt2dec/mod.rs"
   $36 = ($35>>>0)<($n>>>0); //@line 846 "/checkout/src/libcore/cmp.rs"
   if ($36) {
    $iter$sroa$0$053 = $35;
    while(1) {
     $$arith = (($iter$sroa$0$053) + 1)|0; //@line 1982 "/checkout/src/libcore/num/mod.rs"
     $$overflow = ($iter$sroa$0$053>>>0)>(4294967294); //@line 1982 "/checkout/src/libcore/num/mod.rs"
     if ($$overflow) {
      $_0$sroa$0$0 = 0;$_0$sroa$4$0 = 0;
      break L26;
     }
     $37 = ($iter$sroa$0$053>>>0)<($d$1>>>0); //@line 159 "/checkout/src/libcore/num/flt2dec/mod.rs"
     if (!($37)) {
      break;
     }
     $38 = (($d$0) + ($iter$sroa$0$053)|0); //@line 159 "/checkout/src/libcore/num/flt2dec/mod.rs"
     HEAP8[$38>>0] = 48; //@line 159 "/checkout/src/libcore/num/flt2dec/mod.rs"
     $39 = ($$arith>>>0)<($n>>>0); //@line 846 "/checkout/src/libcore/cmp.rs"
     if ($39) {
      $iter$sroa$0$053 = $$arith;
     } else {
      $_0$sroa$0$0 = 0;$_0$sroa$4$0 = 0;
      break L26;
     }
    }
    __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(11480,$iter$sroa$0$053,$d$1); //@line 159 "/checkout/src/libcore/num/flt2dec/mod.rs"
    // unreachable; //@line 159 "/checkout/src/libcore/num/flt2dec/mod.rs"
   } else {
    $_0$sroa$0$0 = 0;$_0$sroa$4$0 = 0;
   }
  }
 } while(0);
 $_0$sroa$0$0$insert$insert = $_0$sroa$0$0 | $_0$sroa$4$0; //@line 171 "/checkout/src/libcore/num/flt2dec/mod.rs"
 return ($_0$sroa$0$0$insert$insert|0); //@line 171 "/checkout/src/libcore/num/flt2dec/mod.rs"
}
function __ZN4core3fmt5float50__LT_impl_u20_core__fmt__Debug_u20_for_u20_f32_GT_3fmt17hf6b3c2dcdf8b3b67E($self,$fmt) {
 $self = $self|0;
 $fmt = $fmt|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$in$i = 0, $cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$fmt>>2]|0; //@line 1359 "/checkout/src/libcore/fmt/mod.rs"
 $1 = $0 & 1; //@line 1359 "/checkout/src/libcore/fmt/mod.rs"
 $2 = $1&255; //@line 55 "/checkout/src/libcore/fmt/float.rs"
 $3 = ($2 << 1)&255; //@line 55 "/checkout/src/libcore/fmt/float.rs"
 $4 = $3 | 1; //@line 55 "/checkout/src/libcore/fmt/float.rs"
 $5 = ((($fmt)) + 16|0); //@line 61 "/checkout/src/libcore/fmt/float.rs"
 $6 = HEAP32[$5>>2]|0; //@line 61 "/checkout/src/libcore/fmt/float.rs"
 $cond$i = ($6|0)==(1); //@line 61 "/checkout/src/libcore/fmt/float.rs"
 if ($cond$i) {
  $8 = ((($fmt)) + 20|0); //@line 61 "/checkout/src/libcore/fmt/float.rs"
  $9 = HEAP32[$8>>2]|0; //@line 61 "/checkout/src/libcore/fmt/float.rs"
  $10 = (__ZN4core3fmt5float29float_to_decimal_common_exact17h585a6d97b1e34691E($fmt,$self,$4,$9)|0); //@line 62 "/checkout/src/libcore/fmt/float.rs"
  $_0$0$in$i = $10;
  return ($_0$0$in$i|0); //@line 129 "/checkout/src/libcore/fmt/float.rs"
 } else {
  $7 = (__ZN4core3fmt5float32float_to_decimal_common_shortest17h1a0e05a3a41269d2E($fmt,$self,$4)|0); //@line 64 "/checkout/src/libcore/fmt/float.rs"
  $_0$0$in$i = $7;
  return ($_0$0$in$i|0); //@line 129 "/checkout/src/libcore/fmt/float.rs"
 }
 return (0)|0;
}
function __ZN4core3fmt5float32float_to_decimal_common_shortest17h1a0e05a3a41269d2E($fmt,$num,$sign) {
 $fmt = $fmt|0;
 $num = $num|0;
 $sign = $sign|0;
 var $$$i = 0, $$$i4 = 0, $$sink$i = 0, $$sink$i6 = 0, $$sink1$i$index = 0, $$sink1$i$index7 = 0, $$sink21 = 0, $$sink3$i$i = 0, $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $_0$sroa$0$0$i = 0, $_0$sroa$0$0$i$sink = 0, $_0$sroa$3$0$i = 0, $_24$i$sroa$10 = 0;
 var $_24$i$sroa$10$8$$sroa_idx = 0, $_24$i$sroa$6$8$$sroa_idx = 0, $_24$i$sroa$7$8$$sroa_idx = 0, $_24$i$sroa$8$8$$sroa_idx = 0, $_24$i$sroa$9$8$$sroa_idx = 0, $_3$i = 0, $_4$sroa$0$0$i$ph$i = 0, $_4$sroa$0$0$i3$i = 0, $_4$sroa$10$0$i$i = 0, $_4$sroa$10$0$i2$i = 0, $_4$sroa$10$0$i5$i = 0, $_4$sroa$10$0$shrunk$i$ph$i = 0, $buf = 0, $byte_str$G$$i = 0, $byte_str$G$sink$i$i = 0, $byte_str$G$sink6$i$i = 0, $decoded$sroa$0$sroa$8$0$i = 0, $decoded$sroa$6$0$i = 0, $decoded$sroa$6$1$i = 0, $decoded$sroa$9$i = 0;
 var $formatted = 0, $full_decoded$i = 0, $mantissa$0$i$i = 0, $not$switch$i$i = 0, $parts = 0, $switch$i = 0, $switch$i$i = 0, $switch$i3 = 0, $switch$i7 = 0, $switch$split2D = 0, $trunc$i$i = 0, $trunc$i$i$clear = 0, $trunc$i$i$clear13 = 0, $trunc$i$i1 = 0, $trunc$i$i1$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $0 = sp;
 $_3$i = sp + 104|0;
 $decoded$sroa$9$i = sp + 138|0;
 $_24$i$sroa$10 = sp + 133|0;
 $full_decoded$i = sp + 8|0;
 $formatted = sp + 88|0;
 $parts = sp + 40|0;
 $buf = sp + 116|0;
 $1 = HEAP32[$num>>2]|0; //@line 44 "/checkout/src/libcore/fmt/float.rs"
 $2 = $1 >>> 23; //@line 164 "/checkout/src/libcore/num/dec2flt/rawfp.rs"
 $3 = $2 & 255; //@line 164 "/checkout/src/libcore/num/dec2flt/rawfp.rs"
 $4 = $3&65535; //@line 164 "/checkout/src/libcore/num/dec2flt/rawfp.rs"
 $5 = ($4<<16>>16)==(0); //@line 165 "/checkout/src/libcore/num/dec2flt/rawfp.rs"
 $6 = $1 & 8388607;
 $7 = $6 << 1; //@line 166 "/checkout/src/libcore/num/dec2flt/rawfp.rs"
 $8 = $6 | 8388608; //@line 168 "/checkout/src/libcore/num/dec2flt/rawfp.rs"
 $mantissa$0$i$i = $5 ? $7 : $8; //@line 165 "/checkout/src/libcore/num/dec2flt/rawfp.rs"
 $9 = $mantissa$0$i$i & 1; //@line 71 "/checkout/src/libcore/num/flt2dec/decoder.rs"
 $10 = $1 & 2147483647; //@line 176 "/checkout/src/libcore/num/f32.rs"
 $11 = ($10|0)==(0); //@line 176 "/checkout/src/libcore/num/f32.rs"
 L1: do {
  if ($11) {
   $26 = 0;$29 = 0;$36 = 0;$39 = 0;$decoded$sroa$0$sroa$8$0$i = 0;$decoded$sroa$6$0$i = 4;
  } else {
   $trunc$i$i1 = $1 & 2139095040; //@line 175 "/checkout/src/libcore/num/f32.rs"
   $trunc$i$i1$clear = $trunc$i$i1 & 2147483647; //@line 177 "/checkout/src/libcore/num/f32.rs"
   $switch$split2D = ($trunc$i$i1$clear|0)<(2139095040);
   L3: do {
    if ($switch$split2D) {
     switch ($trunc$i$i1$clear|0) {
     case 0:  {
      break;
     }
     default: {
      break L3;
     }
     }
     $12 = (($4) + -150)<<16>>16; //@line 171 "/checkout/src/libcore/num/dec2flt/rawfp.rs"
     $13 = $9&255; //@line 80 "/checkout/src/libcore/num/flt2dec/decoder.rs"
     $14 = $13 ^ 1; //@line 80 "/checkout/src/libcore/num/flt2dec/decoder.rs"
     $26 = $mantissa$0$i$i;$29 = 0;$36 = 1;$39 = 0;$decoded$sroa$0$sroa$8$0$i = $12;$decoded$sroa$6$0$i = $14;
     break L1;
    } else {
     switch ($trunc$i$i1$clear|0) {
     case 2139095040:  {
      break;
     }
     default: {
      break L3;
     }
     }
     $switch$i3 = ($6|0)!=(0); //@line 73 "/checkout/src/libcore/num/flt2dec/decoder.rs"
     $$$i4 = $switch$i3 ? 2 : 3; //@line 73 "/checkout/src/libcore/num/flt2dec/decoder.rs"
     $26 = 0;$29 = 0;$36 = 0;$39 = 0;$decoded$sroa$0$sroa$8$0$i = 0;$decoded$sroa$6$0$i = $$$i4;
     break L1;
    }
   } while(0);
   $15 = ($mantissa$0$i$i|0)==(8388608); //@line 85 "/checkout/src/libcore/num/flt2dec/decoder.rs"
   $16 = $mantissa$0$i$i << 1; //@line 92 "/checkout/src/libcore/num/flt2dec/decoder.rs"
   $$sink$i = $15 ? -152 : -151; //@line 85 "/checkout/src/libcore/num/flt2dec/decoder.rs"
   $17 = $15 ? 33554432 : $16; //@line 85 "/checkout/src/libcore/num/flt2dec/decoder.rs"
   $18 = $15 ? 0 : 0; //@line 85 "/checkout/src/libcore/num/flt2dec/decoder.rs"
   $19 = $15 ? 2 : 1; //@line 85 "/checkout/src/libcore/num/flt2dec/decoder.rs"
   $20 = $15 ? 0 : 0; //@line 85 "/checkout/src/libcore/num/flt2dec/decoder.rs"
   $21 = (($$sink$i) + ($4))<<16>>16;
   $22 = $9&255;
   $decoded$sroa$6$1$i = $22 ^ 1;
   $26 = $17;$29 = $18;$36 = $19;$39 = $20;$decoded$sroa$0$sroa$8$0$i = $21;$decoded$sroa$6$0$i = $decoded$sroa$6$1$i;
  }
 } while(0);
 ;HEAP8[$_24$i$sroa$10>>0]=HEAP8[$decoded$sroa$9$i>>0]|0;HEAP8[$_24$i$sroa$10+1>>0]=HEAP8[$decoded$sroa$9$i+1>>0]|0;HEAP8[$_24$i$sroa$10+2>>0]=HEAP8[$decoded$sroa$9$i+2>>0]|0;HEAP8[$_24$i$sroa$10+3>>0]=HEAP8[$decoded$sroa$9$i+3>>0]|0;HEAP8[$_24$i$sroa$10+4>>0]=HEAP8[$decoded$sroa$9$i+4>>0]|0; //@line 97 "/checkout/src/libcore/num/flt2dec/decoder.rs"
 $23 = ($1|0)<(0); //@line 422 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $24 = $full_decoded$i; //@line 422 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $25 = $24; //@line 422 "/checkout/src/libcore/num/flt2dec/mod.rs"
 HEAP32[$25>>2] = $26; //@line 422 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $27 = (($24) + 4)|0; //@line 422 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $28 = $27; //@line 422 "/checkout/src/libcore/num/flt2dec/mod.rs"
 HEAP32[$28>>2] = $29; //@line 422 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $_24$i$sroa$6$8$$sroa_idx = ((($full_decoded$i)) + 8|0); //@line 422 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $30 = $_24$i$sroa$6$8$$sroa_idx; //@line 422 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $31 = $30; //@line 422 "/checkout/src/libcore/num/flt2dec/mod.rs"
 HEAP32[$31>>2] = 1; //@line 422 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $32 = (($30) + 4)|0; //@line 422 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $33 = $32; //@line 422 "/checkout/src/libcore/num/flt2dec/mod.rs"
 HEAP32[$33>>2] = 0; //@line 422 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $_24$i$sroa$7$8$$sroa_idx = ((($full_decoded$i)) + 16|0); //@line 422 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $34 = $_24$i$sroa$7$8$$sroa_idx; //@line 422 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $35 = $34; //@line 422 "/checkout/src/libcore/num/flt2dec/mod.rs"
 HEAP32[$35>>2] = $36; //@line 422 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $37 = (($34) + 4)|0; //@line 422 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $38 = $37; //@line 422 "/checkout/src/libcore/num/flt2dec/mod.rs"
 HEAP32[$38>>2] = $39; //@line 422 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $_24$i$sroa$8$8$$sroa_idx = ((($full_decoded$i)) + 24|0); //@line 422 "/checkout/src/libcore/num/flt2dec/mod.rs"
 HEAP16[$_24$i$sroa$8$8$$sroa_idx>>1] = $decoded$sroa$0$sroa$8$0$i; //@line 422 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $_24$i$sroa$9$8$$sroa_idx = ((($full_decoded$i)) + 26|0); //@line 422 "/checkout/src/libcore/num/flt2dec/mod.rs"
 HEAP8[$_24$i$sroa$9$8$$sroa_idx>>0] = $decoded$sroa$6$0$i; //@line 422 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $_24$i$sroa$10$8$$sroa_idx = ((($full_decoded$i)) + 27|0); //@line 422 "/checkout/src/libcore/num/flt2dec/mod.rs"
 ;HEAP8[$_24$i$sroa$10$8$$sroa_idx>>0]=HEAP8[$_24$i$sroa$10>>0]|0;HEAP8[$_24$i$sroa$10$8$$sroa_idx+1>>0]=HEAP8[$_24$i$sroa$10+1>>0]|0;HEAP8[$_24$i$sroa$10$8$$sroa_idx+2>>0]=HEAP8[$_24$i$sroa$10+2>>0]|0;HEAP8[$_24$i$sroa$10$8$$sroa_idx+3>>0]=HEAP8[$_24$i$sroa$10+3>>0]|0;HEAP8[$_24$i$sroa$10$8$$sroa_idx+4>>0]=HEAP8[$_24$i$sroa$10+4>>0]|0; //@line 422 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $40 = (($decoded$sroa$6$0$i) + -2)<<24>>24; //@line 387 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $41 = ($40&255)<(3); //@line 387 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $trunc$i$i = $41 ? $40 : 3; //@line 387 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $trunc$i$i$clear = $trunc$i$i & 3; //@line 387 "/checkout/src/libcore/num/flt2dec/mod.rs"
 switch ($trunc$i$i$clear<<24>>24) {
 case 0:  {
  HEAP16[$parts>>1] = 2; //@line 426 "/checkout/src/libcore/num/flt2dec/mod.rs"
  $77 = ((($parts)) + 4|0); //@line 426 "/checkout/src/libcore/num/flt2dec/mod.rs"
  HEAP32[$77>>2] = 11592; //@line 426 "/checkout/src/libcore/num/flt2dec/mod.rs"
  $78 = ((($parts)) + 8|0); //@line 426 "/checkout/src/libcore/num/flt2dec/mod.rs"
  HEAP32[$78>>2] = 3; //@line 426 "/checkout/src/libcore/num/flt2dec/mod.rs"
  $$sink1$i$index = $parts;$$sink1$i$index7 = 1;$_4$sroa$0$0$i3$i = 38620;$_4$sroa$10$0$i5$i = 0;
  HEAP32[$formatted>>2] = $_4$sroa$0$0$i3$i;
  $81 = ((($formatted)) + 4|0);
  HEAP32[$81>>2] = $_4$sroa$10$0$i5$i;
  $82 = ((($formatted)) + 8|0);
  HEAP32[$82>>2] = $$sink1$i$index;
  $83 = ((($formatted)) + 12|0);
  HEAP32[$83>>2] = $$sink1$i$index7;
  $84 = (__ZN4core3fmt9Formatter19pad_formatted_parts17h15239b62a734549fE($fmt,$formatted)|0); //@line 45 "/checkout/src/libcore/fmt/float.rs"
  STACKTOP = sp;return ($84|0); //@line 47 "/checkout/src/libcore/fmt/float.rs"
  break;
 }
 case 2:  {
  switch ($sign<<24>>24) {
  case 0:  {
   $_4$sroa$0$0$i$ph$i = 38620;$_4$sroa$10$0$shrunk$i$ph$i = 0;
   break;
  }
  case 1:  {
   $byte_str$G$sink$i$i = $23 ? 11584 : 38620; //@line 389 "/checkout/src/libcore/num/flt2dec/mod.rs"
   $_4$sroa$0$0$i$ph$i = $byte_str$G$sink$i$i;$_4$sroa$10$0$shrunk$i$ph$i = $23;
   break;
  }
  case 2:  {
   $_4$sroa$0$0$i$ph$i = 11588;$_4$sroa$10$0$shrunk$i$ph$i = 1;
   break;
  }
  case 3:  {
   $$sink3$i$i = $23 ? 11584 : 11588; //@line 391 "/checkout/src/libcore/num/flt2dec/mod.rs"
   $_4$sroa$0$0$i$ph$i = $$sink3$i$i;$_4$sroa$10$0$shrunk$i$ph$i = 1;
   break;
  }
  default: {
   // unreachable; //@line 395 "/checkout/src/libcore/num/flt2dec/mod.rs"
  }
  }
  $_4$sroa$10$0$i2$i = $_4$sroa$10$0$shrunk$i$ph$i&1;
  HEAP16[$parts>>1] = 2; //@line 439 "/checkout/src/libcore/num/flt2dec/mod.rs"
  $42 = ((($parts)) + 4|0); //@line 439 "/checkout/src/libcore/num/flt2dec/mod.rs"
  HEAP32[$42>>2] = 11600; //@line 439 "/checkout/src/libcore/num/flt2dec/mod.rs"
  $43 = ((($parts)) + 8|0); //@line 439 "/checkout/src/libcore/num/flt2dec/mod.rs"
  HEAP32[$43>>2] = 1; //@line 439 "/checkout/src/libcore/num/flt2dec/mod.rs"
  $$sink1$i$index = $parts;$$sink1$i$index7 = 1;$_4$sroa$0$0$i3$i = $_4$sroa$0$0$i$ph$i;$_4$sroa$10$0$i5$i = $_4$sroa$10$0$i2$i;
  HEAP32[$formatted>>2] = $_4$sroa$0$0$i3$i;
  $81 = ((($formatted)) + 4|0);
  HEAP32[$81>>2] = $_4$sroa$10$0$i5$i;
  $82 = ((($formatted)) + 8|0);
  HEAP32[$82>>2] = $$sink1$i$index;
  $83 = ((($formatted)) + 12|0);
  HEAP32[$83>>2] = $$sink1$i$index7;
  $84 = (__ZN4core3fmt9Formatter19pad_formatted_parts17h15239b62a734549fE($fmt,$formatted)|0); //@line 45 "/checkout/src/libcore/fmt/float.rs"
  STACKTOP = sp;return ($84|0); //@line 47 "/checkout/src/libcore/fmt/float.rs"
  break;
 }
 default: {
  $switch$i$i = ($sign&255)<(2); //@line 392 "/checkout/src/libcore/num/flt2dec/mod.rs"
  $byte_str$G$$i = $switch$i$i ? 38620 : 11588; //@line 392 "/checkout/src/libcore/num/flt2dec/mod.rs"
  $not$switch$i$i = $switch$i$i ^ 1; //@line 392 "/checkout/src/libcore/num/flt2dec/mod.rs"
  $$$i = $23 | $not$switch$i$i; //@line 392 "/checkout/src/libcore/num/flt2dec/mod.rs"
  $byte_str$G$sink6$i$i = $23 ? 11584 : $byte_str$G$$i;
  $_4$sroa$10$0$i$i = $$$i&1;
  $trunc$i$i$clear13 = $trunc$i$i & 3; //@line 387 "/checkout/src/libcore/num/flt2dec/mod.rs"
  $switch$i = ($trunc$i$i$clear13<<24>>24)==(3); //@line 425 "/checkout/src/libcore/num/flt2dec/mod.rs"
  if (!($switch$i)) {
   HEAP16[$parts>>1] = 2; //@line 430 "/checkout/src/libcore/num/flt2dec/mod.rs"
   $79 = ((($parts)) + 4|0); //@line 430 "/checkout/src/libcore/num/flt2dec/mod.rs"
   HEAP32[$79>>2] = 11596; //@line 430 "/checkout/src/libcore/num/flt2dec/mod.rs"
   $80 = ((($parts)) + 8|0); //@line 430 "/checkout/src/libcore/num/flt2dec/mod.rs"
   HEAP32[$80>>2] = 3; //@line 430 "/checkout/src/libcore/num/flt2dec/mod.rs"
   $$sink1$i$index = $parts;$$sink1$i$index7 = 1;$_4$sroa$0$0$i3$i = $byte_str$G$sink6$i$i;$_4$sroa$10$0$i5$i = $_4$sroa$10$0$i$i;
   HEAP32[$formatted>>2] = $_4$sroa$0$0$i3$i;
   $81 = ((($formatted)) + 4|0);
   HEAP32[$81>>2] = $_4$sroa$10$0$i5$i;
   $82 = ((($formatted)) + 8|0);
   HEAP32[$82>>2] = $$sink1$i$index;
   $83 = ((($formatted)) + 12|0);
   HEAP32[$83>>2] = $$sink1$i$index7;
   $84 = (__ZN4core3fmt9Formatter19pad_formatted_parts17h15239b62a734549fE($fmt,$formatted)|0); //@line 45 "/checkout/src/libcore/fmt/float.rs"
   STACKTOP = sp;return ($84|0); //@line 47 "/checkout/src/libcore/fmt/float.rs"
  }
  __ZN4core3num7flt2dec8strategy5grisu19format_shortest_opt17h6c52c840e5ea6c06E($_3$i,$full_decoded$i,$buf,17); //@line 433 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $44 = HEAP32[$_3$i>>2]|0; //@line 434 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $switch$i7 = ($44|0)==(1); //@line 434 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  if ($switch$i7) {
   $45 = ((($_3$i)) + 4|0); //@line 434 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $46 = HEAP32[$45>>2]|0; //@line 434 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $47 = ((($_3$i)) + 8|0); //@line 434 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $48 = HEAP16[$47>>1]|0; //@line 434 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $_0$sroa$0$0$i = $46;$_0$sroa$3$0$i = $48;
  } else {
   __ZN4core3num7flt2dec8strategy6dragon15format_shortest17h5594ba3d83ab635dE($0,$full_decoded$i,$buf,17); //@line 435 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $$sreg$field = HEAP32[$0>>2]|0; //@line 435 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $$sreg$index1 = ((($0)) + 4|0); //@line 435 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $$sreg$field2 = HEAP16[$$sreg$index1>>1]|0; //@line 435 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $_0$sroa$0$0$i = $$sreg$field;$_0$sroa$3$0$i = $$sreg$field2;
  }
  $49 = ($_0$sroa$0$0$i>>>0)>(17); //@line 875 "/checkout/src/libcore/slice/mod.rs"
  if ($49) {
   __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($_0$sroa$0$0$i,17); //@line 876 "/checkout/src/libcore/slice/mod.rs"
   // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
  }
  $50 = ($_0$sroa$0$0$i|0)==(0); //@line 140 "/checkout/src/libcore/slice/mod.rs"
  if ($50) {
   __ZN4core9panicking5panic17h9fa3414033a56a4dE(11528); //@line 271 "/checkout/src/libcore/num/flt2dec/mod.rs"
   // unreachable; //@line 271 "/checkout/src/libcore/num/flt2dec/mod.rs"
  }
  $51 = HEAP8[$buf>>0]|0; //@line 272 "/checkout/src/libcore/num/flt2dec/mod.rs"
  $52 = ($51&255)<(49); //@line 272 "/checkout/src/libcore/num/flt2dec/mod.rs"
  if ($52) {
   __ZN4core9panicking5panic17h9fa3414033a56a4dE(11552); //@line 272 "/checkout/src/libcore/num/flt2dec/mod.rs"
   // unreachable; //@line 272 "/checkout/src/libcore/num/flt2dec/mod.rs"
  }
  $53 = ($_0$sroa$3$0$i<<16>>16)<(1); //@line 288 "/checkout/src/libcore/num/flt2dec/mod.rs"
  $54 = $_0$sroa$3$0$i << 16 >> 16;
  do {
   if ($53) {
    $58 = (0 - ($54))|0; //@line 290 "/checkout/src/libcore/num/flt2dec/mod.rs"
    HEAP16[$parts>>1] = 2; //@line 291 "/checkout/src/libcore/num/flt2dec/mod.rs"
    $59 = ((($parts)) + 4|0); //@line 291 "/checkout/src/libcore/num/flt2dec/mod.rs"
    HEAP32[$59>>2] = 11576; //@line 291 "/checkout/src/libcore/num/flt2dec/mod.rs"
    $60 = ((($parts)) + 8|0); //@line 291 "/checkout/src/libcore/num/flt2dec/mod.rs"
    HEAP32[$60>>2] = 2; //@line 291 "/checkout/src/libcore/num/flt2dec/mod.rs"
    $61 = ((($parts)) + 12|0); //@line 292 "/checkout/src/libcore/num/flt2dec/mod.rs"
    HEAP16[$61>>1] = 0; //@line 292 "/checkout/src/libcore/num/flt2dec/mod.rs"
    $62 = ((($parts)) + 16|0); //@line 292 "/checkout/src/libcore/num/flt2dec/mod.rs"
    HEAP32[$62>>2] = $58; //@line 292 "/checkout/src/libcore/num/flt2dec/mod.rs"
    $63 = ((($parts)) + 24|0); //@line 293 "/checkout/src/libcore/num/flt2dec/mod.rs"
    HEAP16[$63>>1] = 2; //@line 293 "/checkout/src/libcore/num/flt2dec/mod.rs"
    $64 = ((($parts)) + 28|0); //@line 293 "/checkout/src/libcore/num/flt2dec/mod.rs"
    HEAP32[$64>>2] = $buf; //@line 293 "/checkout/src/libcore/num/flt2dec/mod.rs"
    $65 = ((($parts)) + 32|0); //@line 293 "/checkout/src/libcore/num/flt2dec/mod.rs"
    $$sink$i6 = 3;$$sink21 = $65;$_0$sroa$0$0$i$sink = $_0$sroa$0$0$i;
   } else {
    $55 = ($54>>>0)<($_0$sroa$0$0$i>>>0); //@line 302 "/checkout/src/libcore/num/flt2dec/mod.rs"
    HEAP16[$parts>>1] = 2;
    $56 = ((($parts)) + 4|0);
    HEAP32[$56>>2] = $buf;
    $57 = ((($parts)) + 8|0);
    if ($55) {
     HEAP32[$57>>2] = $54; //@line 304 "/checkout/src/libcore/num/flt2dec/mod.rs"
     $66 = ((($parts)) + 12|0); //@line 305 "/checkout/src/libcore/num/flt2dec/mod.rs"
     HEAP16[$66>>1] = 2; //@line 305 "/checkout/src/libcore/num/flt2dec/mod.rs"
     $67 = ((($parts)) + 16|0); //@line 305 "/checkout/src/libcore/num/flt2dec/mod.rs"
     HEAP32[$67>>2] = 11580; //@line 305 "/checkout/src/libcore/num/flt2dec/mod.rs"
     $68 = ((($parts)) + 20|0); //@line 305 "/checkout/src/libcore/num/flt2dec/mod.rs"
     HEAP32[$68>>2] = 1; //@line 305 "/checkout/src/libcore/num/flt2dec/mod.rs"
     $69 = (($buf) + ($54)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $70 = (($_0$sroa$0$0$i) - ($54))|0; //@line 863 "/checkout/src/libcore/slice/mod.rs"
     $71 = ((($parts)) + 24|0); //@line 306 "/checkout/src/libcore/num/flt2dec/mod.rs"
     HEAP16[$71>>1] = 2; //@line 306 "/checkout/src/libcore/num/flt2dec/mod.rs"
     $72 = ((($parts)) + 28|0); //@line 306 "/checkout/src/libcore/num/flt2dec/mod.rs"
     HEAP32[$72>>2] = $69; //@line 306 "/checkout/src/libcore/num/flt2dec/mod.rs"
     $73 = ((($parts)) + 32|0); //@line 306 "/checkout/src/libcore/num/flt2dec/mod.rs"
     $$sink$i6 = 3;$$sink21 = $73;$_0$sroa$0$0$i$sink = $70;
     break;
    } else {
     HEAP32[$57>>2] = $_0$sroa$0$0$i; //@line 315 "/checkout/src/libcore/num/flt2dec/mod.rs"
     $74 = (($54) - ($_0$sroa$0$0$i))|0; //@line 316 "/checkout/src/libcore/num/flt2dec/mod.rs"
     $75 = ((($parts)) + 12|0); //@line 316 "/checkout/src/libcore/num/flt2dec/mod.rs"
     HEAP16[$75>>1] = 0; //@line 316 "/checkout/src/libcore/num/flt2dec/mod.rs"
     $76 = ((($parts)) + 16|0); //@line 316 "/checkout/src/libcore/num/flt2dec/mod.rs"
     $$sink$i6 = 2;$$sink21 = $76;$_0$sroa$0$0$i$sink = $74;
     break;
    }
   }
  } while(0);
  HEAP32[$$sink21>>2] = $_0$sroa$0$0$i$sink;
  $$sink1$i$index = $parts;$$sink1$i$index7 = $$sink$i6;$_4$sroa$0$0$i3$i = $byte_str$G$sink6$i$i;$_4$sroa$10$0$i5$i = $_4$sroa$10$0$i$i;
  HEAP32[$formatted>>2] = $_4$sroa$0$0$i3$i;
  $81 = ((($formatted)) + 4|0);
  HEAP32[$81>>2] = $_4$sroa$10$0$i5$i;
  $82 = ((($formatted)) + 8|0);
  HEAP32[$82>>2] = $$sink1$i$index;
  $83 = ((($formatted)) + 12|0);
  HEAP32[$83>>2] = $$sink1$i$index7;
  $84 = (__ZN4core3fmt9Formatter19pad_formatted_parts17h15239b62a734549fE($fmt,$formatted)|0); //@line 45 "/checkout/src/libcore/fmt/float.rs"
  STACKTOP = sp;return ($84|0); //@line 47 "/checkout/src/libcore/fmt/float.rs"
 }
 }
 return (0)|0;
}
function __ZN4core3fmt5float29float_to_decimal_common_exact17h585a6d97b1e34691E($fmt,$num,$sign,$precision) {
 $fmt = $fmt|0;
 $num = $num|0;
 $sign = $sign|0;
 $precision = $precision|0;
 var $$$i = 0, $$$i$i = 0, $$$i4 = 0, $$sink$i = 0, $$sink$i5 = 0, $$sink$i9 = 0, $$sink11$i$index = 0, $$sink11$i$index9 = 0, $$sink3$i$i = 0, $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_0$sroa$0$0$i = 0, $_0$sroa$3$0$i = 0, $_17$i$sroa$10 = 0, $_17$i$sroa$10$8$$sroa_idx = 0, $_17$i$sroa$6$8$$sroa_idx = 0, $_17$i$sroa$7$8$$sroa_idx = 0;
 var $_17$i$sroa$8$8$$sroa_idx = 0, $_17$i$sroa$9$8$$sroa_idx = 0, $_4$i = 0, $_4$sroa$0$0$i$ph$i = 0, $_4$sroa$0$0$i15$i = 0, $_4$sroa$10$0$i$i = 0, $_4$sroa$10$0$i14$i = 0, $_4$sroa$10$0$i17$i = 0, $_4$sroa$10$0$shrunk$i$ph$i = 0, $buf = 0, $byte_str$G$$i = 0, $byte_str$G$sink$i$i = 0, $byte_str$G$sink6$i$i = 0, $decoded$sroa$6$0$i = 0, $decoded$sroa$6$1$i = 0, $decoded$sroa$9$i = 0, $formatted = 0, $full_decoded$i = 0, $limit$0$i = 0, $mantissa$0$i$i = 0;
 var $not$switch$i$i = 0, $parts = 0, $switch$i = 0, $switch$i$i = 0, $switch$i10 = 0, $switch$i3 = 0, $switch$split2D = 0, $trunc$i$i = 0, $trunc$i$i$clear = 0, $trunc$i$i$clear17 = 0, $trunc$i$i1 = 0, $trunc$i$i1$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1168|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1168|0);
 $0 = sp;
 $_4$i = sp + 104|0;
 $decoded$sroa$9$i = sp + 1149|0;
 $_17$i$sroa$10 = sp + 1144|0;
 $full_decoded$i = sp + 8|0;
 $formatted = sp + 88|0;
 $parts = sp + 40|0;
 $buf = sp + 120|0;
 $1 = HEAP32[$num>>2]|0; //@line 26 "/checkout/src/libcore/fmt/float.rs"
 $2 = $1 >>> 23; //@line 164 "/checkout/src/libcore/num/dec2flt/rawfp.rs"
 $3 = $2 & 255; //@line 164 "/checkout/src/libcore/num/dec2flt/rawfp.rs"
 $4 = $3&65535; //@line 164 "/checkout/src/libcore/num/dec2flt/rawfp.rs"
 $5 = ($4<<16>>16)==(0); //@line 165 "/checkout/src/libcore/num/dec2flt/rawfp.rs"
 $6 = $1 & 8388607;
 $7 = $6 << 1; //@line 166 "/checkout/src/libcore/num/dec2flt/rawfp.rs"
 $8 = $6 | 8388608; //@line 168 "/checkout/src/libcore/num/dec2flt/rawfp.rs"
 $mantissa$0$i$i = $5 ? $7 : $8; //@line 165 "/checkout/src/libcore/num/dec2flt/rawfp.rs"
 $9 = $mantissa$0$i$i & 1; //@line 71 "/checkout/src/libcore/num/flt2dec/decoder.rs"
 $10 = $1 & 2147483647; //@line 176 "/checkout/src/libcore/num/f32.rs"
 $11 = ($10|0)==(0); //@line 176 "/checkout/src/libcore/num/f32.rs"
 L1: do {
  if ($11) {
   $26 = 0;$29 = 0;$36 = 0;$39 = 0;$40 = 0;$decoded$sroa$6$0$i = 4;
  } else {
   $trunc$i$i1 = $1 & 2139095040; //@line 175 "/checkout/src/libcore/num/f32.rs"
   $trunc$i$i1$clear = $trunc$i$i1 & 2147483647; //@line 177 "/checkout/src/libcore/num/f32.rs"
   $switch$split2D = ($trunc$i$i1$clear|0)<(2139095040);
   L3: do {
    if ($switch$split2D) {
     switch ($trunc$i$i1$clear|0) {
     case 0:  {
      break;
     }
     default: {
      break L3;
     }
     }
     $12 = (($4) + -150)<<16>>16; //@line 171 "/checkout/src/libcore/num/dec2flt/rawfp.rs"
     $13 = $9&255; //@line 80 "/checkout/src/libcore/num/flt2dec/decoder.rs"
     $14 = $13 ^ 1; //@line 80 "/checkout/src/libcore/num/flt2dec/decoder.rs"
     $26 = $mantissa$0$i$i;$29 = 0;$36 = 1;$39 = 0;$40 = $12;$decoded$sroa$6$0$i = $14;
     break L1;
    } else {
     switch ($trunc$i$i1$clear|0) {
     case 2139095040:  {
      break;
     }
     default: {
      break L3;
     }
     }
     $switch$i3 = ($6|0)!=(0); //@line 73 "/checkout/src/libcore/num/flt2dec/decoder.rs"
     $$$i4 = $switch$i3 ? 2 : 3; //@line 73 "/checkout/src/libcore/num/flt2dec/decoder.rs"
     $26 = 0;$29 = 0;$36 = 0;$39 = 0;$40 = 0;$decoded$sroa$6$0$i = $$$i4;
     break L1;
    }
   } while(0);
   $15 = ($mantissa$0$i$i|0)==(8388608); //@line 85 "/checkout/src/libcore/num/flt2dec/decoder.rs"
   $16 = $mantissa$0$i$i << 1; //@line 92 "/checkout/src/libcore/num/flt2dec/decoder.rs"
   $$sink$i5 = $15 ? -152 : -151; //@line 85 "/checkout/src/libcore/num/flt2dec/decoder.rs"
   $17 = $15 ? 33554432 : $16; //@line 85 "/checkout/src/libcore/num/flt2dec/decoder.rs"
   $18 = $15 ? 0 : 0; //@line 85 "/checkout/src/libcore/num/flt2dec/decoder.rs"
   $19 = $15 ? 2 : 1; //@line 85 "/checkout/src/libcore/num/flt2dec/decoder.rs"
   $20 = $15 ? 0 : 0; //@line 85 "/checkout/src/libcore/num/flt2dec/decoder.rs"
   $21 = (($$sink$i5) + ($4))<<16>>16;
   $22 = $9&255;
   $decoded$sroa$6$1$i = $22 ^ 1;
   $26 = $17;$29 = $18;$36 = $19;$39 = $20;$40 = $21;$decoded$sroa$6$0$i = $decoded$sroa$6$1$i;
  }
 } while(0);
 ;HEAP8[$_17$i$sroa$10>>0]=HEAP8[$decoded$sroa$9$i>>0]|0;HEAP8[$_17$i$sroa$10+1>>0]=HEAP8[$decoded$sroa$9$i+1>>0]|0;HEAP8[$_17$i$sroa$10+2>>0]=HEAP8[$decoded$sroa$9$i+2>>0]|0;HEAP8[$_17$i$sroa$10+3>>0]=HEAP8[$decoded$sroa$9$i+3>>0]|0;HEAP8[$_17$i$sroa$10+4>>0]=HEAP8[$decoded$sroa$9$i+4>>0]|0; //@line 97 "/checkout/src/libcore/num/flt2dec/decoder.rs"
 $23 = ($1|0)<(0); //@line 611 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $24 = $full_decoded$i; //@line 611 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $25 = $24; //@line 611 "/checkout/src/libcore/num/flt2dec/mod.rs"
 HEAP32[$25>>2] = $26; //@line 611 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $27 = (($24) + 4)|0; //@line 611 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $28 = $27; //@line 611 "/checkout/src/libcore/num/flt2dec/mod.rs"
 HEAP32[$28>>2] = $29; //@line 611 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $_17$i$sroa$6$8$$sroa_idx = ((($full_decoded$i)) + 8|0); //@line 611 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $30 = $_17$i$sroa$6$8$$sroa_idx; //@line 611 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $31 = $30; //@line 611 "/checkout/src/libcore/num/flt2dec/mod.rs"
 HEAP32[$31>>2] = 1; //@line 611 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $32 = (($30) + 4)|0; //@line 611 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $33 = $32; //@line 611 "/checkout/src/libcore/num/flt2dec/mod.rs"
 HEAP32[$33>>2] = 0; //@line 611 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $_17$i$sroa$7$8$$sroa_idx = ((($full_decoded$i)) + 16|0); //@line 611 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $34 = $_17$i$sroa$7$8$$sroa_idx; //@line 611 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $35 = $34; //@line 611 "/checkout/src/libcore/num/flt2dec/mod.rs"
 HEAP32[$35>>2] = $36; //@line 611 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $37 = (($34) + 4)|0; //@line 611 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $38 = $37; //@line 611 "/checkout/src/libcore/num/flt2dec/mod.rs"
 HEAP32[$38>>2] = $39; //@line 611 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $_17$i$sroa$8$8$$sroa_idx = ((($full_decoded$i)) + 24|0); //@line 611 "/checkout/src/libcore/num/flt2dec/mod.rs"
 HEAP16[$_17$i$sroa$8$8$$sroa_idx>>1] = $40; //@line 611 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $_17$i$sroa$9$8$$sroa_idx = ((($full_decoded$i)) + 26|0); //@line 611 "/checkout/src/libcore/num/flt2dec/mod.rs"
 HEAP8[$_17$i$sroa$9$8$$sroa_idx>>0] = $decoded$sroa$6$0$i; //@line 611 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $_17$i$sroa$10$8$$sroa_idx = ((($full_decoded$i)) + 27|0); //@line 611 "/checkout/src/libcore/num/flt2dec/mod.rs"
 ;HEAP8[$_17$i$sroa$10$8$$sroa_idx>>0]=HEAP8[$_17$i$sroa$10>>0]|0;HEAP8[$_17$i$sroa$10$8$$sroa_idx+1>>0]=HEAP8[$_17$i$sroa$10+1>>0]|0;HEAP8[$_17$i$sroa$10$8$$sroa_idx+2>>0]=HEAP8[$_17$i$sroa$10+2>>0]|0;HEAP8[$_17$i$sroa$10$8$$sroa_idx+3>>0]=HEAP8[$_17$i$sroa$10+3>>0]|0;HEAP8[$_17$i$sroa$10$8$$sroa_idx+4>>0]=HEAP8[$_17$i$sroa$10+4>>0]|0; //@line 611 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $41 = (($decoded$sroa$6$0$i) + -2)<<24>>24; //@line 387 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $42 = ($41&255)<(3); //@line 387 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $trunc$i$i = $42 ? $41 : 3; //@line 387 "/checkout/src/libcore/num/flt2dec/mod.rs"
 $trunc$i$i$clear = $trunc$i$i & 3; //@line 387 "/checkout/src/libcore/num/flt2dec/mod.rs"
 switch ($trunc$i$i$clear<<24>>24) {
 case 0:  {
  HEAP16[$parts>>1] = 2; //@line 615 "/checkout/src/libcore/num/flt2dec/mod.rs"
  $51 = ((($parts)) + 4|0); //@line 615 "/checkout/src/libcore/num/flt2dec/mod.rs"
  HEAP32[$51>>2] = 11592; //@line 615 "/checkout/src/libcore/num/flt2dec/mod.rs"
  $52 = ((($parts)) + 8|0); //@line 615 "/checkout/src/libcore/num/flt2dec/mod.rs"
  HEAP32[$52>>2] = 3; //@line 615 "/checkout/src/libcore/num/flt2dec/mod.rs"
  $$sink11$i$index = $parts;$$sink11$i$index9 = 1;$_4$sroa$0$0$i15$i = 38620;$_4$sroa$10$0$i17$i = 0;
  HEAP32[$formatted>>2] = $_4$sroa$0$0$i15$i;
  $118 = ((($formatted)) + 4|0);
  HEAP32[$118>>2] = $_4$sroa$10$0$i17$i;
  $119 = ((($formatted)) + 8|0);
  HEAP32[$119>>2] = $$sink11$i$index;
  $120 = ((($formatted)) + 12|0);
  HEAP32[$120>>2] = $$sink11$i$index9;
  $121 = (__ZN4core3fmt9Formatter19pad_formatted_parts17h15239b62a734549fE($fmt,$formatted)|0); //@line 28 "/checkout/src/libcore/fmt/float.rs"
  STACKTOP = sp;return ($121|0); //@line 30 "/checkout/src/libcore/fmt/float.rs"
  break;
 }
 case 2:  {
  switch ($sign<<24>>24) {
  case 0:  {
   $_4$sroa$0$0$i$ph$i = 38620;$_4$sroa$10$0$shrunk$i$ph$i = 0;
   break;
  }
  case 1:  {
   $byte_str$G$sink$i$i = $23 ? 11584 : 38620; //@line 389 "/checkout/src/libcore/num/flt2dec/mod.rs"
   $_4$sroa$0$0$i$ph$i = $byte_str$G$sink$i$i;$_4$sroa$10$0$shrunk$i$ph$i = $23;
   break;
  }
  case 2:  {
   $_4$sroa$0$0$i$ph$i = 11588;$_4$sroa$10$0$shrunk$i$ph$i = 1;
   break;
  }
  case 3:  {
   $$sink3$i$i = $23 ? 11584 : 11588; //@line 391 "/checkout/src/libcore/num/flt2dec/mod.rs"
   $_4$sroa$0$0$i$ph$i = $$sink3$i$i;$_4$sroa$10$0$shrunk$i$ph$i = 1;
   break;
  }
  default: {
   // unreachable; //@line 395 "/checkout/src/libcore/num/flt2dec/mod.rs"
  }
  }
  $_4$sroa$10$0$i14$i = $_4$sroa$10$0$shrunk$i$ph$i&1;
  $43 = ($precision|0)==(0); //@line 623 "/checkout/src/libcore/num/flt2dec/mod.rs"
  HEAP16[$parts>>1] = 2;
  $44 = ((($parts)) + 4|0);
  if ($43) {
   HEAP32[$44>>2] = 11600; //@line 628 "/checkout/src/libcore/num/flt2dec/mod.rs"
   $$sink$i = 1;
  } else {
   HEAP32[$44>>2] = 11576; //@line 624 "/checkout/src/libcore/num/flt2dec/mod.rs"
   $55 = ((($parts)) + 12|0); //@line 625 "/checkout/src/libcore/num/flt2dec/mod.rs"
   HEAP16[$55>>1] = 0; //@line 625 "/checkout/src/libcore/num/flt2dec/mod.rs"
   $56 = ((($parts)) + 16|0); //@line 625 "/checkout/src/libcore/num/flt2dec/mod.rs"
   HEAP32[$56>>2] = $precision; //@line 625 "/checkout/src/libcore/num/flt2dec/mod.rs"
   $$sink$i = 2;
  }
  $57 = ((($parts)) + 8|0); //@line 628 "/checkout/src/libcore/num/flt2dec/mod.rs"
  HEAP32[$57>>2] = $$sink$i; //@line 628 "/checkout/src/libcore/num/flt2dec/mod.rs"
  $$sink11$i$index = $parts;$$sink11$i$index9 = $$sink$i;$_4$sroa$0$0$i15$i = $_4$sroa$0$0$i$ph$i;$_4$sroa$10$0$i17$i = $_4$sroa$10$0$i14$i;
  HEAP32[$formatted>>2] = $_4$sroa$0$0$i15$i;
  $118 = ((($formatted)) + 4|0);
  HEAP32[$118>>2] = $_4$sroa$10$0$i17$i;
  $119 = ((($formatted)) + 8|0);
  HEAP32[$119>>2] = $$sink11$i$index;
  $120 = ((($formatted)) + 12|0);
  HEAP32[$120>>2] = $$sink11$i$index9;
  $121 = (__ZN4core3fmt9Formatter19pad_formatted_parts17h15239b62a734549fE($fmt,$formatted)|0); //@line 28 "/checkout/src/libcore/fmt/float.rs"
  STACKTOP = sp;return ($121|0); //@line 30 "/checkout/src/libcore/fmt/float.rs"
  break;
 }
 default: {
  $switch$i$i = ($sign&255)<(2); //@line 392 "/checkout/src/libcore/num/flt2dec/mod.rs"
  $byte_str$G$$i = $switch$i$i ? 38620 : 11588; //@line 392 "/checkout/src/libcore/num/flt2dec/mod.rs"
  $not$switch$i$i = $switch$i$i ^ 1; //@line 392 "/checkout/src/libcore/num/flt2dec/mod.rs"
  $$$i = $23 | $not$switch$i$i; //@line 392 "/checkout/src/libcore/num/flt2dec/mod.rs"
  $byte_str$G$sink6$i$i = $23 ? 11584 : $byte_str$G$$i;
  $_4$sroa$10$0$i$i = $$$i&1;
  $trunc$i$i$clear17 = $trunc$i$i & 3; //@line 387 "/checkout/src/libcore/num/flt2dec/mod.rs"
  $switch$i = ($trunc$i$i$clear17<<24>>24)==(3); //@line 614 "/checkout/src/libcore/num/flt2dec/mod.rs"
  if (!($switch$i)) {
   HEAP16[$parts>>1] = 2; //@line 619 "/checkout/src/libcore/num/flt2dec/mod.rs"
   $53 = ((($parts)) + 4|0); //@line 619 "/checkout/src/libcore/num/flt2dec/mod.rs"
   HEAP32[$53>>2] = 11596; //@line 619 "/checkout/src/libcore/num/flt2dec/mod.rs"
   $54 = ((($parts)) + 8|0); //@line 619 "/checkout/src/libcore/num/flt2dec/mod.rs"
   HEAP32[$54>>2] = 3; //@line 619 "/checkout/src/libcore/num/flt2dec/mod.rs"
   $$sink11$i$index = $parts;$$sink11$i$index9 = 1;$_4$sroa$0$0$i15$i = $byte_str$G$sink6$i$i;$_4$sroa$10$0$i17$i = $_4$sroa$10$0$i$i;
   HEAP32[$formatted>>2] = $_4$sroa$0$0$i15$i;
   $118 = ((($formatted)) + 4|0);
   HEAP32[$118>>2] = $_4$sroa$10$0$i17$i;
   $119 = ((($formatted)) + 8|0);
   HEAP32[$119>>2] = $$sink11$i$index;
   $120 = ((($formatted)) + 12|0);
   HEAP32[$120>>2] = $$sink11$i$index9;
   $121 = (__ZN4core3fmt9Formatter19pad_formatted_parts17h15239b62a734549fE($fmt,$formatted)|0); //@line 28 "/checkout/src/libcore/fmt/float.rs"
   STACKTOP = sp;return ($121|0); //@line 30 "/checkout/src/libcore/fmt/float.rs"
  }
  $45 = ($40<<16>>16)<(0); //@line 531 "/checkout/src/libcore/num/flt2dec/mod.rs"
  $$$i$i = $45 ? -12 : 5; //@line 531 "/checkout/src/libcore/num/flt2dec/mod.rs"
  $46 = $40 << 16 >> 16; //@line 531 "/checkout/src/libcore/num/flt2dec/mod.rs"
  $47 = Math_imul($$$i$i, $46)|0; //@line 531 "/checkout/src/libcore/num/flt2dec/mod.rs"
  $48 = $47 >>> 4; //@line 531 "/checkout/src/libcore/num/flt2dec/mod.rs"
  $49 = (($48) + 21)|0; //@line 531 "/checkout/src/libcore/num/flt2dec/mod.rs"
  $50 = ($49>>>0)>(1024); //@line 634 "/checkout/src/libcore/num/flt2dec/mod.rs"
  if ($50) {
   __ZN4core9panicking5panic17h9fa3414033a56a4dE(11604); //@line 634 "/checkout/src/libcore/num/flt2dec/mod.rs"
   // unreachable;
  }
  $58 = ($precision>>>0)<(32768); //@line 639 "/checkout/src/libcore/num/flt2dec/mod.rs"
  $59 = $precision&65535; //@line 639 "/checkout/src/libcore/num/flt2dec/mod.rs"
  $60 = (0 - ($59))<<16>>16; //@line 639 "/checkout/src/libcore/num/flt2dec/mod.rs"
  $limit$0$i = $58 ? $60 : -32768; //@line 639 "/checkout/src/libcore/num/flt2dec/mod.rs"
  __ZN4core3num7flt2dec8strategy5grisu16format_exact_opt17hf9a719460bb570ffE($_4$i,$full_decoded$i,$buf,$49,$limit$0$i); //@line 690 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $61 = HEAP32[$_4$i>>2]|0; //@line 691 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $switch$i10 = ($61|0)==(1); //@line 691 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  if ($switch$i10) {
   $62 = ((($_4$i)) + 4|0); //@line 691 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $63 = HEAP32[$62>>2]|0; //@line 691 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $64 = ((($_4$i)) + 8|0); //@line 691 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $65 = HEAP16[$64>>1]|0; //@line 691 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $_0$sroa$0$0$i = $63;$_0$sroa$3$0$i = $65;
  } else {
   __ZN4core3num7flt2dec8strategy6dragon12format_exact17hb7c319f82c7714f7E($0,$full_decoded$i,$buf,$49,$limit$0$i); //@line 692 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $$sreg$field = HEAP32[$0>>2]|0; //@line 692 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $$sreg$index1 = ((($0)) + 4|0); //@line 692 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $$sreg$field2 = HEAP16[$$sreg$index1>>1]|0; //@line 692 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $_0$sroa$0$0$i = $$sreg$field;$_0$sroa$3$0$i = $$sreg$field2;
  }
  $66 = ($_0$sroa$3$0$i<<16>>16)>($limit$0$i<<16>>16); //@line 641 "/checkout/src/libcore/num/flt2dec/mod.rs"
  if (!($66)) {
   $112 = ($precision|0)==(0); //@line 646 "/checkout/src/libcore/num/flt2dec/mod.rs"
   HEAP16[$parts>>1] = 2;
   $113 = ((($parts)) + 4|0);
   if ($112) {
    HEAP32[$113>>2] = 11600; //@line 651 "/checkout/src/libcore/num/flt2dec/mod.rs"
    $117 = ((($parts)) + 8|0); //@line 651 "/checkout/src/libcore/num/flt2dec/mod.rs"
    HEAP32[$117>>2] = 1; //@line 651 "/checkout/src/libcore/num/flt2dec/mod.rs"
    $$sink11$i$index = $parts;$$sink11$i$index9 = 1;$_4$sroa$0$0$i15$i = $byte_str$G$sink6$i$i;$_4$sroa$10$0$i17$i = $_4$sroa$10$0$i$i;
    HEAP32[$formatted>>2] = $_4$sroa$0$0$i15$i;
    $118 = ((($formatted)) + 4|0);
    HEAP32[$118>>2] = $_4$sroa$10$0$i17$i;
    $119 = ((($formatted)) + 8|0);
    HEAP32[$119>>2] = $$sink11$i$index;
    $120 = ((($formatted)) + 12|0);
    HEAP32[$120>>2] = $$sink11$i$index9;
    $121 = (__ZN4core3fmt9Formatter19pad_formatted_parts17h15239b62a734549fE($fmt,$formatted)|0); //@line 28 "/checkout/src/libcore/fmt/float.rs"
    STACKTOP = sp;return ($121|0); //@line 30 "/checkout/src/libcore/fmt/float.rs"
   } else {
    HEAP32[$113>>2] = 11576; //@line 647 "/checkout/src/libcore/num/flt2dec/mod.rs"
    $114 = ((($parts)) + 8|0); //@line 647 "/checkout/src/libcore/num/flt2dec/mod.rs"
    HEAP32[$114>>2] = 2; //@line 647 "/checkout/src/libcore/num/flt2dec/mod.rs"
    $115 = ((($parts)) + 12|0); //@line 648 "/checkout/src/libcore/num/flt2dec/mod.rs"
    HEAP16[$115>>1] = 0; //@line 648 "/checkout/src/libcore/num/flt2dec/mod.rs"
    $116 = ((($parts)) + 16|0); //@line 648 "/checkout/src/libcore/num/flt2dec/mod.rs"
    HEAP32[$116>>2] = $precision; //@line 648 "/checkout/src/libcore/num/flt2dec/mod.rs"
    $$sink11$i$index = $parts;$$sink11$i$index9 = 2;$_4$sroa$0$0$i15$i = $byte_str$G$sink6$i$i;$_4$sroa$10$0$i17$i = $_4$sroa$10$0$i$i;
    HEAP32[$formatted>>2] = $_4$sroa$0$0$i15$i;
    $118 = ((($formatted)) + 4|0);
    HEAP32[$118>>2] = $_4$sroa$10$0$i17$i;
    $119 = ((($formatted)) + 8|0);
    HEAP32[$119>>2] = $$sink11$i$index;
    $120 = ((($formatted)) + 12|0);
    HEAP32[$120>>2] = $$sink11$i$index9;
    $121 = (__ZN4core3fmt9Formatter19pad_formatted_parts17h15239b62a734549fE($fmt,$formatted)|0); //@line 28 "/checkout/src/libcore/fmt/float.rs"
    STACKTOP = sp;return ($121|0); //@line 30 "/checkout/src/libcore/fmt/float.rs"
   }
  }
  $67 = ($_0$sroa$0$0$i>>>0)>(1024); //@line 875 "/checkout/src/libcore/slice/mod.rs"
  if ($67) {
   __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($_0$sroa$0$0$i,1024); //@line 876 "/checkout/src/libcore/slice/mod.rs"
   // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
  }
  $68 = ($_0$sroa$0$0$i|0)==(0); //@line 140 "/checkout/src/libcore/slice/mod.rs"
  if ($68) {
   __ZN4core9panicking5panic17h9fa3414033a56a4dE(11528); //@line 271 "/checkout/src/libcore/num/flt2dec/mod.rs"
   // unreachable; //@line 271 "/checkout/src/libcore/num/flt2dec/mod.rs"
  }
  $69 = HEAP8[$buf>>0]|0; //@line 272 "/checkout/src/libcore/num/flt2dec/mod.rs"
  $70 = ($69&255)<(49); //@line 272 "/checkout/src/libcore/num/flt2dec/mod.rs"
  if ($70) {
   __ZN4core9panicking5panic17h9fa3414033a56a4dE(11552); //@line 272 "/checkout/src/libcore/num/flt2dec/mod.rs"
   // unreachable; //@line 272 "/checkout/src/libcore/num/flt2dec/mod.rs"
  }
  $71 = ($_0$sroa$3$0$i<<16>>16)<(1); //@line 288 "/checkout/src/libcore/num/flt2dec/mod.rs"
  $72 = $_0$sroa$3$0$i << 16 >> 16;
  do {
   if ($71) {
    $76 = (0 - ($72))|0; //@line 290 "/checkout/src/libcore/num/flt2dec/mod.rs"
    HEAP16[$parts>>1] = 2; //@line 291 "/checkout/src/libcore/num/flt2dec/mod.rs"
    $77 = ((($parts)) + 4|0); //@line 291 "/checkout/src/libcore/num/flt2dec/mod.rs"
    HEAP32[$77>>2] = 11576; //@line 291 "/checkout/src/libcore/num/flt2dec/mod.rs"
    $78 = ((($parts)) + 8|0); //@line 291 "/checkout/src/libcore/num/flt2dec/mod.rs"
    HEAP32[$78>>2] = 2; //@line 291 "/checkout/src/libcore/num/flt2dec/mod.rs"
    $79 = ((($parts)) + 12|0); //@line 292 "/checkout/src/libcore/num/flt2dec/mod.rs"
    HEAP16[$79>>1] = 0; //@line 292 "/checkout/src/libcore/num/flt2dec/mod.rs"
    $80 = ((($parts)) + 16|0); //@line 292 "/checkout/src/libcore/num/flt2dec/mod.rs"
    HEAP32[$80>>2] = $76; //@line 292 "/checkout/src/libcore/num/flt2dec/mod.rs"
    $81 = ((($parts)) + 24|0); //@line 293 "/checkout/src/libcore/num/flt2dec/mod.rs"
    HEAP16[$81>>1] = 2; //@line 293 "/checkout/src/libcore/num/flt2dec/mod.rs"
    $82 = ((($parts)) + 28|0); //@line 293 "/checkout/src/libcore/num/flt2dec/mod.rs"
    HEAP32[$82>>2] = $buf; //@line 293 "/checkout/src/libcore/num/flt2dec/mod.rs"
    $83 = ((($parts)) + 32|0); //@line 293 "/checkout/src/libcore/num/flt2dec/mod.rs"
    HEAP32[$83>>2] = $_0$sroa$0$0$i; //@line 293 "/checkout/src/libcore/num/flt2dec/mod.rs"
    $84 = ($_0$sroa$0$0$i>>>0)<($precision>>>0); //@line 294 "/checkout/src/libcore/num/flt2dec/mod.rs"
    if ($84) {
     $85 = (($precision) - ($_0$sroa$0$0$i))|0; //@line 294 "/checkout/src/libcore/num/flt2dec/mod.rs"
     $86 = ($85>>>0)>($76>>>0); //@line 294 "/checkout/src/libcore/num/flt2dec/mod.rs"
     if ($86) {
      $87 = (($85) + ($72))|0; //@line 295 "/checkout/src/libcore/num/flt2dec/mod.rs"
      $88 = ((($parts)) + 36|0); //@line 295 "/checkout/src/libcore/num/flt2dec/mod.rs"
      $89 = ((($parts)) + 40|0); //@line 295 "/checkout/src/libcore/num/flt2dec/mod.rs"
      HEAP16[$88>>1] = 0; //@line 295 "/checkout/src/libcore/num/flt2dec/mod.rs"
      HEAP32[$89>>2] = $87; //@line 295 "/checkout/src/libcore/num/flt2dec/mod.rs"
      $$sink$i9 = 4;
     } else {
      $$sink$i9 = 3;
     }
    } else {
     $$sink$i9 = 3;
    }
   } else {
    $73 = ($72>>>0)<($_0$sroa$0$0$i>>>0); //@line 302 "/checkout/src/libcore/num/flt2dec/mod.rs"
    HEAP16[$parts>>1] = 2;
    $74 = ((($parts)) + 4|0);
    HEAP32[$74>>2] = $buf;
    $75 = ((($parts)) + 8|0);
    if ($73) {
     HEAP32[$75>>2] = $72; //@line 304 "/checkout/src/libcore/num/flt2dec/mod.rs"
     $90 = ((($parts)) + 12|0); //@line 305 "/checkout/src/libcore/num/flt2dec/mod.rs"
     HEAP16[$90>>1] = 2; //@line 305 "/checkout/src/libcore/num/flt2dec/mod.rs"
     $91 = ((($parts)) + 16|0); //@line 305 "/checkout/src/libcore/num/flt2dec/mod.rs"
     HEAP32[$91>>2] = 11580; //@line 305 "/checkout/src/libcore/num/flt2dec/mod.rs"
     $92 = ((($parts)) + 20|0); //@line 305 "/checkout/src/libcore/num/flt2dec/mod.rs"
     HEAP32[$92>>2] = 1; //@line 305 "/checkout/src/libcore/num/flt2dec/mod.rs"
     $93 = (($buf) + ($72)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $94 = (($_0$sroa$0$0$i) - ($72))|0; //@line 863 "/checkout/src/libcore/slice/mod.rs"
     $95 = ((($parts)) + 24|0); //@line 306 "/checkout/src/libcore/num/flt2dec/mod.rs"
     HEAP16[$95>>1] = 2; //@line 306 "/checkout/src/libcore/num/flt2dec/mod.rs"
     $96 = ((($parts)) + 28|0); //@line 306 "/checkout/src/libcore/num/flt2dec/mod.rs"
     HEAP32[$96>>2] = $93; //@line 306 "/checkout/src/libcore/num/flt2dec/mod.rs"
     $97 = ((($parts)) + 32|0); //@line 306 "/checkout/src/libcore/num/flt2dec/mod.rs"
     HEAP32[$97>>2] = $94; //@line 306 "/checkout/src/libcore/num/flt2dec/mod.rs"
     $98 = ($94>>>0)<($precision>>>0); //@line 307 "/checkout/src/libcore/num/flt2dec/mod.rs"
     if (!($98)) {
      $$sink$i9 = 3;
      break;
     }
     $99 = (($precision) - ($_0$sroa$0$0$i))|0; //@line 308 "/checkout/src/libcore/num/flt2dec/mod.rs"
     $100 = (($99) + ($72))|0; //@line 308 "/checkout/src/libcore/num/flt2dec/mod.rs"
     $101 = ((($parts)) + 36|0); //@line 308 "/checkout/src/libcore/num/flt2dec/mod.rs"
     $102 = ((($parts)) + 40|0); //@line 308 "/checkout/src/libcore/num/flt2dec/mod.rs"
     HEAP16[$101>>1] = 0; //@line 308 "/checkout/src/libcore/num/flt2dec/mod.rs"
     HEAP32[$102>>2] = $100; //@line 308 "/checkout/src/libcore/num/flt2dec/mod.rs"
     $$sink$i9 = 4;
     break;
    } else {
     HEAP32[$75>>2] = $_0$sroa$0$0$i; //@line 315 "/checkout/src/libcore/num/flt2dec/mod.rs"
     $103 = (($72) - ($_0$sroa$0$0$i))|0; //@line 316 "/checkout/src/libcore/num/flt2dec/mod.rs"
     $104 = ((($parts)) + 12|0); //@line 316 "/checkout/src/libcore/num/flt2dec/mod.rs"
     HEAP16[$104>>1] = 0; //@line 316 "/checkout/src/libcore/num/flt2dec/mod.rs"
     $105 = ((($parts)) + 16|0); //@line 316 "/checkout/src/libcore/num/flt2dec/mod.rs"
     HEAP32[$105>>2] = $103; //@line 316 "/checkout/src/libcore/num/flt2dec/mod.rs"
     $106 = ($precision|0)==(0); //@line 317 "/checkout/src/libcore/num/flt2dec/mod.rs"
     if ($106) {
      $$sink$i9 = 2;
      break;
     }
     $107 = ((($parts)) + 24|0); //@line 318 "/checkout/src/libcore/num/flt2dec/mod.rs"
     HEAP16[$107>>1] = 2; //@line 318 "/checkout/src/libcore/num/flt2dec/mod.rs"
     $108 = ((($parts)) + 28|0); //@line 318 "/checkout/src/libcore/num/flt2dec/mod.rs"
     HEAP32[$108>>2] = 11580; //@line 318 "/checkout/src/libcore/num/flt2dec/mod.rs"
     $109 = ((($parts)) + 32|0); //@line 318 "/checkout/src/libcore/num/flt2dec/mod.rs"
     HEAP32[$109>>2] = 1; //@line 318 "/checkout/src/libcore/num/flt2dec/mod.rs"
     $110 = ((($parts)) + 36|0); //@line 319 "/checkout/src/libcore/num/flt2dec/mod.rs"
     HEAP16[$110>>1] = 0; //@line 319 "/checkout/src/libcore/num/flt2dec/mod.rs"
     $111 = ((($parts)) + 40|0); //@line 319 "/checkout/src/libcore/num/flt2dec/mod.rs"
     HEAP32[$111>>2] = $precision; //@line 319 "/checkout/src/libcore/num/flt2dec/mod.rs"
     $$sink$i9 = 4;
     break;
    }
   }
  } while(0);
  $$sink11$i$index = $parts;$$sink11$i$index9 = $$sink$i9;$_4$sroa$0$0$i15$i = $byte_str$G$sink6$i$i;$_4$sroa$10$0$i17$i = $_4$sroa$10$0$i$i;
  HEAP32[$formatted>>2] = $_4$sroa$0$0$i15$i;
  $118 = ((($formatted)) + 4|0);
  HEAP32[$118>>2] = $_4$sroa$10$0$i17$i;
  $119 = ((($formatted)) + 8|0);
  HEAP32[$119>>2] = $$sink11$i$index;
  $120 = ((($formatted)) + 12|0);
  HEAP32[$120>>2] = $$sink11$i$index9;
  $121 = (__ZN4core3fmt9Formatter19pad_formatted_parts17h15239b62a734549fE($fmt,$formatted)|0); //@line 28 "/checkout/src/libcore/fmt/float.rs"
  STACKTOP = sp;return ($121|0); //@line 30 "/checkout/src/libcore/fmt/float.rs"
 }
 }
 return (0)|0;
}
function __ZN4core3num7flt2dec8strategy5grisu19format_shortest_opt17h6c52c840e5ea6c06E($0,$d,$buf$0,$buf$1) {
 $0 = $0|0;
 $d = $d|0;
 $buf$0 = $buf$0|0;
 $buf$1 = $buf$1|0;
 var $$lcssa$i = 0, $$lcssa$i22 = 0, $$not$i = 0, $$sink$i = 0, $$sink10$i = 0, $$sink12$i = 0, $$sink13$i = 0, $$sink13$sink$sink$sink$i = 0, $$sink15$i = 0, $$sink2$i = 0, $$sink3$i = 0, $$sink5$i = 0, $$sink7$i = 0, $$sink9$i = 0, $$sink9$sink$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_17$i = 0, $_17$i7 = 0, $_29$i = 0, $_29$i4 = 0, $_36$i = 0, $_5$sroa$0$0$$sroa_idx$i$i = 0, $_5$sroa$0$0$$sroa_idx$i$i10 = 0, $_5$sroa$4$0$$sroa_idx2$i$i = 0, $_5$sroa$4$0$$sroa_idx2$i$i12 = 0, $_64 = 0, $_72 = 0, $e$0$i = 0, $e$1$i = 0, $e$2$i = 0, $e$3$i = 0;
 var $e$4$i = 0, $e$5$i = 0, $i$080 = 0, $i$1 = 0, $left_val$i = 0, $left_val$i6 = 0, $not$$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i29 = 0, $or$cond20$i = 0, $or$cond20$i23 = 0, $or$cond23$i = 0, $or$cond23$i20 = 0, $remainder$078 = 0, $right_val$i = 0, $right_val$i5 = 0, $ten_kappa$079 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $_29$i4 = sp + 104|0;
 $right_val$i5 = sp + 100|0;
 $left_val$i6 = sp + 96|0;
 $_17$i7 = sp + 40|0;
 $_36$i = sp + 80|0;
 $_29$i = sp + 56|0;
 $right_val$i = sp + 52|0;
 $left_val$i = sp + 48|0;
 $_17$i = sp + 32|0;
 $_72 = sp + 16|0;
 $_64 = sp;
 $1 = $d; //@line 166 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $2 = $1; //@line 166 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $3 = HEAP32[$2>>2]|0; //@line 166 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $4 = (($1) + 4)|0; //@line 166 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $5 = $4; //@line 166 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $6 = HEAP32[$5>>2]|0; //@line 166 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $7 = ($3|0)==(0); //@line 166 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $8 = ($6|0)==(0); //@line 166 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $9 = $7 & $8; //@line 166 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 if ($9) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(11644); //@line 166 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  // unreachable; //@line 166 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 }
 $10 = ((($d)) + 8|0); //@line 167 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $11 = $10; //@line 167 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $12 = $11; //@line 167 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $13 = HEAP32[$12>>2]|0; //@line 167 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $14 = (($11) + 4)|0; //@line 167 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $15 = $14; //@line 167 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $16 = HEAP32[$15>>2]|0; //@line 167 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $17 = ($13|0)==(0); //@line 167 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $18 = ($16|0)==(0); //@line 167 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $19 = $17 & $18; //@line 167 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 if ($19) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(11668); //@line 167 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  // unreachable; //@line 167 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 }
 $20 = ((($d)) + 16|0); //@line 168 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $21 = $20; //@line 168 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $22 = $21; //@line 168 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $23 = HEAP32[$22>>2]|0; //@line 168 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $24 = (($21) + 4)|0; //@line 168 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $25 = $24; //@line 168 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $26 = HEAP32[$25>>2]|0; //@line 168 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $27 = ($23|0)==(0); //@line 168 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $28 = ($26|0)==(0); //@line 168 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $29 = $27 & $28; //@line 168 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 if ($29) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(11692); //@line 168 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  // unreachable; //@line 168 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 }
 $30 = (_i64Add(($3|0),($6|0),($23|0),($26|0))|0); //@line 1982 "/checkout/src/libcore/num/mod.rs"
 $31 = tempRet0; //@line 1982 "/checkout/src/libcore/num/mod.rs"
 $32 = ($31>>>0)<($6>>>0); //@line 1982 "/checkout/src/libcore/num/mod.rs"
 $33 = ($30>>>0)<($3>>>0); //@line 1982 "/checkout/src/libcore/num/mod.rs"
 $34 = ($31|0)==($6|0); //@line 1982 "/checkout/src/libcore/num/mod.rs"
 $35 = $34 & $33; //@line 1982 "/checkout/src/libcore/num/mod.rs"
 $36 = $32 | $35; //@line 1982 "/checkout/src/libcore/num/mod.rs"
 if ($36) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(11716); //@line 169 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  // unreachable; //@line 169 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 }
 $37 = ($6>>>0)<($16>>>0); //@line 2008 "/checkout/src/libcore/num/mod.rs"
 $38 = ($3>>>0)<($13>>>0); //@line 2008 "/checkout/src/libcore/num/mod.rs"
 $39 = ($6|0)==($16|0); //@line 2008 "/checkout/src/libcore/num/mod.rs"
 $40 = $39 & $38; //@line 2008 "/checkout/src/libcore/num/mod.rs"
 $41 = $37 | $40; //@line 2008 "/checkout/src/libcore/num/mod.rs"
 if ($41) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(11740); //@line 170 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  // unreachable; //@line 170 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 }
 $42 = ($buf$1>>>0)<(17); //@line 171 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 if ($42) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(11764); //@line 171 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  // unreachable; //@line 171 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 }
 $43 = (_i64Add(($23|0),($26|0),($3|0),($6|0))|0); //@line 172 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $44 = tempRet0; //@line 172 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $45 = ($44>>>0)>(536870911); //@line 172 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $46 = ($43>>>0)>(4294967295); //@line 172 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $47 = ($44|0)==(536870911); //@line 172 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $48 = $47 & $46; //@line 172 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $49 = $45 | $48; //@line 172 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 if ($49) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(11788); //@line 172 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  // unreachable; //@line 172 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 }
 $50 = ((($d)) + 24|0); //@line 175 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $51 = HEAP16[$50>>1]|0; //@line 175 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $52 = ($44>>>0)<(1); //@line 52 "/checkout/src/libcore/num/diy_float.rs"
 $53 = ($43>>>0)<(0); //@line 52 "/checkout/src/libcore/num/diy_float.rs"
 $54 = ($44|0)==(1); //@line 52 "/checkout/src/libcore/num/diy_float.rs"
 $55 = $54 & $53; //@line 52 "/checkout/src/libcore/num/diy_float.rs"
 $56 = $52 | $55; //@line 52 "/checkout/src/libcore/num/diy_float.rs"
 $57 = (($51) + -32)<<16>>16; //@line 54 "/checkout/src/libcore/num/diy_float.rs"
 $58 = $56 ? 0 : $43; //@line 52 "/checkout/src/libcore/num/diy_float.rs"
 $59 = $56 ? $43 : $44; //@line 52 "/checkout/src/libcore/num/diy_float.rs"
 $e$0$i = $56 ? $57 : $51; //@line 52 "/checkout/src/libcore/num/diy_float.rs"
 $60 = ($59>>>0)<(65536); //@line 56 "/checkout/src/libcore/num/diy_float.rs"
 $61 = ($58>>>0)<(0); //@line 56 "/checkout/src/libcore/num/diy_float.rs"
 $62 = ($59|0)==(65536); //@line 56 "/checkout/src/libcore/num/diy_float.rs"
 $63 = $62 & $61; //@line 56 "/checkout/src/libcore/num/diy_float.rs"
 $64 = $60 | $63; //@line 56 "/checkout/src/libcore/num/diy_float.rs"
 $65 = (_bitshift64Shl(($58|0),($59|0),16)|0); //@line 57 "/checkout/src/libcore/num/diy_float.rs"
 $66 = tempRet0; //@line 57 "/checkout/src/libcore/num/diy_float.rs"
 $67 = (($e$0$i) + -16)<<16>>16; //@line 58 "/checkout/src/libcore/num/diy_float.rs"
 $68 = $64 ? $65 : $58; //@line 56 "/checkout/src/libcore/num/diy_float.rs"
 $69 = $64 ? $66 : $59; //@line 56 "/checkout/src/libcore/num/diy_float.rs"
 $e$1$i = $64 ? $67 : $e$0$i; //@line 56 "/checkout/src/libcore/num/diy_float.rs"
 $70 = ($69>>>0)<(16777216); //@line 60 "/checkout/src/libcore/num/diy_float.rs"
 $71 = ($68>>>0)<(0); //@line 60 "/checkout/src/libcore/num/diy_float.rs"
 $72 = ($69|0)==(16777216); //@line 60 "/checkout/src/libcore/num/diy_float.rs"
 $73 = $72 & $71; //@line 60 "/checkout/src/libcore/num/diy_float.rs"
 $74 = $70 | $73; //@line 60 "/checkout/src/libcore/num/diy_float.rs"
 $75 = (_bitshift64Shl(($68|0),($69|0),8)|0); //@line 61 "/checkout/src/libcore/num/diy_float.rs"
 $76 = tempRet0; //@line 61 "/checkout/src/libcore/num/diy_float.rs"
 $77 = (($e$1$i) + -8)<<16>>16; //@line 62 "/checkout/src/libcore/num/diy_float.rs"
 $78 = $74 ? $75 : $68; //@line 60 "/checkout/src/libcore/num/diy_float.rs"
 $79 = $74 ? $76 : $69; //@line 60 "/checkout/src/libcore/num/diy_float.rs"
 $e$2$i = $74 ? $77 : $e$1$i; //@line 60 "/checkout/src/libcore/num/diy_float.rs"
 $80 = ($79>>>0)<(268435456); //@line 64 "/checkout/src/libcore/num/diy_float.rs"
 $81 = ($78>>>0)<(0); //@line 64 "/checkout/src/libcore/num/diy_float.rs"
 $82 = ($79|0)==(268435456); //@line 64 "/checkout/src/libcore/num/diy_float.rs"
 $83 = $82 & $81; //@line 64 "/checkout/src/libcore/num/diy_float.rs"
 $84 = $80 | $83; //@line 64 "/checkout/src/libcore/num/diy_float.rs"
 $85 = (_bitshift64Shl(($78|0),($79|0),4)|0); //@line 65 "/checkout/src/libcore/num/diy_float.rs"
 $86 = tempRet0; //@line 65 "/checkout/src/libcore/num/diy_float.rs"
 $87 = (($e$2$i) + -4)<<16>>16; //@line 66 "/checkout/src/libcore/num/diy_float.rs"
 $88 = $84 ? $85 : $78; //@line 64 "/checkout/src/libcore/num/diy_float.rs"
 $89 = $84 ? $86 : $79; //@line 64 "/checkout/src/libcore/num/diy_float.rs"
 $e$3$i = $84 ? $87 : $e$2$i; //@line 64 "/checkout/src/libcore/num/diy_float.rs"
 $90 = ($89>>>0)<(1073741824); //@line 68 "/checkout/src/libcore/num/diy_float.rs"
 $91 = ($88>>>0)<(0); //@line 68 "/checkout/src/libcore/num/diy_float.rs"
 $92 = ($89|0)==(1073741824); //@line 68 "/checkout/src/libcore/num/diy_float.rs"
 $93 = $92 & $91; //@line 68 "/checkout/src/libcore/num/diy_float.rs"
 $94 = $90 | $93; //@line 68 "/checkout/src/libcore/num/diy_float.rs"
 $95 = (_bitshift64Shl(($88|0),($89|0),2)|0); //@line 69 "/checkout/src/libcore/num/diy_float.rs"
 $96 = tempRet0; //@line 69 "/checkout/src/libcore/num/diy_float.rs"
 $97 = (($e$3$i) + -2)<<16>>16; //@line 70 "/checkout/src/libcore/num/diy_float.rs"
 $98 = $94 ? $95 : $88; //@line 68 "/checkout/src/libcore/num/diy_float.rs"
 $99 = $94 ? $96 : $89; //@line 68 "/checkout/src/libcore/num/diy_float.rs"
 $e$4$i = $94 ? $97 : $e$3$i; //@line 68 "/checkout/src/libcore/num/diy_float.rs"
 $100 = (_bitshift64Lshr(($98|0),($99|0),63)|0); //@line 72 "/checkout/src/libcore/num/diy_float.rs"
 $101 = tempRet0; //@line 72 "/checkout/src/libcore/num/diy_float.rs"
 $102 = $100 ^ 1; //@line 72 "/checkout/src/libcore/num/diy_float.rs"
 $103 = (_bitshift64Shl(($98|0),($99|0),($102|0))|0); //@line 72 "/checkout/src/libcore/num/diy_float.rs"
 $104 = tempRet0; //@line 72 "/checkout/src/libcore/num/diy_float.rs"
 $105 = (_bitshift64Ashr(($98|0),($99|0),63)|0); //@line 72 "/checkout/src/libcore/num/diy_float.rs"
 $106 = tempRet0; //@line 72 "/checkout/src/libcore/num/diy_float.rs"
 $107 = $105&65535; //@line 72 "/checkout/src/libcore/num/diy_float.rs"
 $$not$i = $107 ^ -1; //@line 72 "/checkout/src/libcore/num/diy_float.rs"
 $e$5$i = (($e$4$i) + ($$not$i))<<16>>16; //@line 72 "/checkout/src/libcore/num/diy_float.rs"
 $108 = (_i64Subtract(($3|0),($6|0),($13|0),($16|0))|0); //@line 176 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $109 = tempRet0; //@line 176 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $110 = $_64; //@line 176 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $111 = $110; //@line 176 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 HEAP32[$111>>2] = $108; //@line 176 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $112 = (($110) + 4)|0; //@line 176 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $113 = $112; //@line 176 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 HEAP32[$113>>2] = $109; //@line 176 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $114 = ((($_64)) + 8|0); //@line 176 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 HEAP16[$114>>1] = $51; //@line 176 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $115 = (($51) - ($e$5$i))<<16>>16; //@line 83 "/checkout/src/libcore/num/diy_float.rs"
 $116 = ($115<<16>>16)<(0); //@line 84 "/checkout/src/libcore/num/diy_float.rs"
 if ($116) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(11996); //@line 84 "/checkout/src/libcore/num/diy_float.rs"
  // unreachable; //@line 84 "/checkout/src/libcore/num/diy_float.rs"
 }
 $117 = $115 & 63; //@line 86 "/checkout/src/libcore/num/diy_float.rs"
 $118 = $117&65535; //@line 86 "/checkout/src/libcore/num/diy_float.rs"
 $119 = (_bitshift64Shl(($108|0),($109|0),($118|0))|0); //@line 86 "/checkout/src/libcore/num/diy_float.rs"
 $120 = tempRet0; //@line 86 "/checkout/src/libcore/num/diy_float.rs"
 $121 = (_bitshift64Lshr(($119|0),($120|0),($118|0))|0); //@line 86 "/checkout/src/libcore/num/diy_float.rs"
 $122 = tempRet0; //@line 86 "/checkout/src/libcore/num/diy_float.rs"
 $123 = $_17$i; //@line 86 "/checkout/src/libcore/num/diy_float.rs"
 $124 = $123; //@line 86 "/checkout/src/libcore/num/diy_float.rs"
 HEAP32[$124>>2] = $121; //@line 86 "/checkout/src/libcore/num/diy_float.rs"
 $125 = (($123) + 4)|0; //@line 86 "/checkout/src/libcore/num/diy_float.rs"
 $126 = $125; //@line 86 "/checkout/src/libcore/num/diy_float.rs"
 HEAP32[$126>>2] = $122; //@line 86 "/checkout/src/libcore/num/diy_float.rs"
 HEAP32[$left_val$i>>2] = $_17$i; //@line 86 "/checkout/src/libcore/num/diy_float.rs"
 HEAP32[$right_val$i>>2] = $_64; //@line 86 "/checkout/src/libcore/num/diy_float.rs"
 $127 = ($121|0)==($108|0); //@line 86 "/checkout/src/libcore/num/diy_float.rs"
 $128 = ($122|0)==($109|0); //@line 86 "/checkout/src/libcore/num/diy_float.rs"
 $129 = $127 & $128; //@line 86 "/checkout/src/libcore/num/diy_float.rs"
 if (!($129)) {
  HEAP32[$_36$i>>2] = $left_val$i; //@line 86 "/checkout/src/libcore/num/diy_float.rs"
  $130 = ((($_36$i)) + 4|0); //@line 86 "/checkout/src/libcore/num/diy_float.rs"
  HEAP32[$130>>2] = 467; //@line 86 "/checkout/src/libcore/num/diy_float.rs"
  $131 = ((($_36$i)) + 8|0); //@line 86 "/checkout/src/libcore/num/diy_float.rs"
  HEAP32[$131>>2] = $right_val$i; //@line 86 "/checkout/src/libcore/num/diy_float.rs"
  $132 = ((($_36$i)) + 12|0); //@line 86 "/checkout/src/libcore/num/diy_float.rs"
  HEAP32[$132>>2] = 467; //@line 86 "/checkout/src/libcore/num/diy_float.rs"
  HEAP32[$_29$i>>2] = 12020; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $133 = ((($_29$i)) + 4|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$133>>2] = 3; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $_5$sroa$0$0$$sroa_idx$i$i = ((($_29$i)) + 8|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_5$sroa$0$0$$sroa_idx$i$i>>2] = 12044; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $_5$sroa$4$0$$sroa_idx2$i$i = ((($_29$i)) + 12|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_5$sroa$4$0$$sroa_idx2$i$i>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $134 = ((($_29$i)) + 16|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$134>>2] = $_36$i; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $135 = ((($_29$i)) + 20|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$135>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  __ZN4core9panicking9panic_fmt17hff08f8fc41769480E($_29$i,12116); //@line 86 "/checkout/src/libcore/num/diy_float.rs"
  // unreachable; //@line 86 "/checkout/src/libcore/num/diy_float.rs"
 }
 $136 = $_72; //@line 177 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $137 = $136; //@line 177 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 HEAP32[$137>>2] = $3; //@line 177 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $138 = (($136) + 4)|0; //@line 177 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $139 = $138; //@line 177 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 HEAP32[$139>>2] = $6; //@line 177 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $140 = ((($_72)) + 8|0); //@line 177 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 HEAP16[$140>>1] = $51; //@line 177 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $141 = (_bitshift64Shl(($3|0),($6|0),($118|0))|0); //@line 86 "/checkout/src/libcore/num/diy_float.rs"
 $142 = tempRet0; //@line 86 "/checkout/src/libcore/num/diy_float.rs"
 $143 = (_bitshift64Lshr(($141|0),($142|0),($118|0))|0); //@line 86 "/checkout/src/libcore/num/diy_float.rs"
 $144 = tempRet0; //@line 86 "/checkout/src/libcore/num/diy_float.rs"
 $145 = $_17$i7; //@line 86 "/checkout/src/libcore/num/diy_float.rs"
 $146 = $145; //@line 86 "/checkout/src/libcore/num/diy_float.rs"
 HEAP32[$146>>2] = $143; //@line 86 "/checkout/src/libcore/num/diy_float.rs"
 $147 = (($145) + 4)|0; //@line 86 "/checkout/src/libcore/num/diy_float.rs"
 $148 = $147; //@line 86 "/checkout/src/libcore/num/diy_float.rs"
 HEAP32[$148>>2] = $144; //@line 86 "/checkout/src/libcore/num/diy_float.rs"
 HEAP32[$left_val$i6>>2] = $_17$i7; //@line 86 "/checkout/src/libcore/num/diy_float.rs"
 HEAP32[$right_val$i5>>2] = $_72; //@line 86 "/checkout/src/libcore/num/diy_float.rs"
 $149 = ($143|0)==($3|0); //@line 86 "/checkout/src/libcore/num/diy_float.rs"
 $150 = ($144|0)==($6|0); //@line 86 "/checkout/src/libcore/num/diy_float.rs"
 $151 = $149 & $150; //@line 86 "/checkout/src/libcore/num/diy_float.rs"
 if (!($151)) {
  HEAP32[$_36$i>>2] = $left_val$i6; //@line 86 "/checkout/src/libcore/num/diy_float.rs"
  $152 = ((($_36$i)) + 4|0); //@line 86 "/checkout/src/libcore/num/diy_float.rs"
  HEAP32[$152>>2] = 467; //@line 86 "/checkout/src/libcore/num/diy_float.rs"
  $153 = ((($_36$i)) + 8|0); //@line 86 "/checkout/src/libcore/num/diy_float.rs"
  HEAP32[$153>>2] = $right_val$i5; //@line 86 "/checkout/src/libcore/num/diy_float.rs"
  $154 = ((($_36$i)) + 12|0); //@line 86 "/checkout/src/libcore/num/diy_float.rs"
  HEAP32[$154>>2] = 467; //@line 86 "/checkout/src/libcore/num/diy_float.rs"
  HEAP32[$_29$i4>>2] = 12020; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $155 = ((($_29$i4)) + 4|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$155>>2] = 3; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $_5$sroa$0$0$$sroa_idx$i$i10 = ((($_29$i4)) + 8|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_5$sroa$0$0$$sroa_idx$i$i10>>2] = 12044; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $_5$sroa$4$0$$sroa_idx2$i$i12 = ((($_29$i4)) + 12|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_5$sroa$4$0$$sroa_idx2$i$i12>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $156 = ((($_29$i4)) + 16|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$156>>2] = $_36$i; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $157 = ((($_29$i4)) + 20|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$157>>2] = 2; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  __ZN4core9panicking9panic_fmt17hff08f8fc41769480E($_29$i4,12116); //@line 86 "/checkout/src/libcore/num/diy_float.rs"
  // unreachable; //@line 86 "/checkout/src/libcore/num/diy_float.rs"
 }
 $158 = (-96 - ($e$5$i))<<16>>16; //@line 193 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $159 = $158 << 16 >> 16; //@line 130 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $160 = ($159*80)|0; //@line 130 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $161 = (($160) + 86960)|0; //@line 130 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $162 = (($161|0) / 2126)&-1; //@line 130 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $163 = ($162>>>0)<(81); //@line 131 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 if (!($163)) {
  __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(11628,$162,81); //@line 131 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  // unreachable; //@line 131 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 }
 $164 = (1744 + ($162<<4)|0); //@line 131 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $165 = $164; //@line 131 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $166 = $165; //@line 131 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $167 = HEAP32[$166>>2]|0; //@line 131 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $168 = (($165) + 4)|0; //@line 131 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $169 = $168; //@line 131 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $170 = HEAP32[$169>>2]|0; //@line 131 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $171 = (((1744 + ($162<<4)|0)) + 8|0); //@line 131 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $172 = HEAP16[$171>>1]|0; //@line 131 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $173 = (((1744 + ($162<<4)|0)) + 10|0); //@line 131 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $174 = HEAP16[$173>>1]|0; //@line 131 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $175 = (___muldi3(($170|0),0,($104|0),0)|0); //@line 38 "/checkout/src/libcore/num/diy_float.rs"
 $176 = tempRet0; //@line 38 "/checkout/src/libcore/num/diy_float.rs"
 $177 = (___muldi3(($170|0),0,($103|0),0)|0); //@line 39 "/checkout/src/libcore/num/diy_float.rs"
 $178 = tempRet0; //@line 39 "/checkout/src/libcore/num/diy_float.rs"
 $179 = (___muldi3(($167|0),0,($104|0),0)|0); //@line 40 "/checkout/src/libcore/num/diy_float.rs"
 $180 = tempRet0; //@line 40 "/checkout/src/libcore/num/diy_float.rs"
 (___muldi3(($167|0),0,($103|0),0)|0); //@line 41 "/checkout/src/libcore/num/diy_float.rs"
 $181 = tempRet0; //@line 41 "/checkout/src/libcore/num/diy_float.rs"
 $182 = (_i64Add(($179|0),0,-2147483648,0)|0); //@line 42 "/checkout/src/libcore/num/diy_float.rs"
 $183 = tempRet0; //@line 42 "/checkout/src/libcore/num/diy_float.rs"
 $184 = (_i64Add(($182|0),($183|0),($181|0),0)|0); //@line 42 "/checkout/src/libcore/num/diy_float.rs"
 $185 = tempRet0; //@line 42 "/checkout/src/libcore/num/diy_float.rs"
 (_i64Add(($184|0),($185|0),($177|0),0)|0); //@line 42 "/checkout/src/libcore/num/diy_float.rs"
 $186 = tempRet0; //@line 42 "/checkout/src/libcore/num/diy_float.rs"
 $187 = (($e$5$i) + ($172))<<16>>16; //@line 44 "/checkout/src/libcore/num/diy_float.rs"
 $188 = (___muldi3(($170|0),0,($120|0),0)|0); //@line 38 "/checkout/src/libcore/num/diy_float.rs"
 $189 = tempRet0; //@line 38 "/checkout/src/libcore/num/diy_float.rs"
 $190 = (___muldi3(($170|0),0,($119|0),0)|0); //@line 39 "/checkout/src/libcore/num/diy_float.rs"
 $191 = tempRet0; //@line 39 "/checkout/src/libcore/num/diy_float.rs"
 $192 = (___muldi3(($167|0),0,($120|0),0)|0); //@line 40 "/checkout/src/libcore/num/diy_float.rs"
 $193 = tempRet0; //@line 40 "/checkout/src/libcore/num/diy_float.rs"
 (___muldi3(($167|0),0,($119|0),0)|0); //@line 41 "/checkout/src/libcore/num/diy_float.rs"
 $194 = tempRet0; //@line 41 "/checkout/src/libcore/num/diy_float.rs"
 $195 = (_i64Add(($192|0),0,-2147483648,0)|0); //@line 42 "/checkout/src/libcore/num/diy_float.rs"
 $196 = tempRet0; //@line 42 "/checkout/src/libcore/num/diy_float.rs"
 $197 = (_i64Add(($195|0),($196|0),($194|0),0)|0); //@line 42 "/checkout/src/libcore/num/diy_float.rs"
 $198 = tempRet0; //@line 42 "/checkout/src/libcore/num/diy_float.rs"
 (_i64Add(($197|0),($198|0),($190|0),0)|0); //@line 42 "/checkout/src/libcore/num/diy_float.rs"
 $199 = tempRet0; //@line 42 "/checkout/src/libcore/num/diy_float.rs"
 $200 = (___muldi3(($170|0),0,($142|0),0)|0); //@line 38 "/checkout/src/libcore/num/diy_float.rs"
 $201 = tempRet0; //@line 38 "/checkout/src/libcore/num/diy_float.rs"
 $202 = (___muldi3(($170|0),0,($141|0),0)|0); //@line 39 "/checkout/src/libcore/num/diy_float.rs"
 $203 = tempRet0; //@line 39 "/checkout/src/libcore/num/diy_float.rs"
 $204 = (___muldi3(($167|0),0,($142|0),0)|0); //@line 40 "/checkout/src/libcore/num/diy_float.rs"
 $205 = tempRet0; //@line 40 "/checkout/src/libcore/num/diy_float.rs"
 (___muldi3(($167|0),0,($141|0),0)|0); //@line 41 "/checkout/src/libcore/num/diy_float.rs"
 $206 = tempRet0; //@line 41 "/checkout/src/libcore/num/diy_float.rs"
 $207 = (_i64Add(($204|0),0,-2147483648,0)|0); //@line 42 "/checkout/src/libcore/num/diy_float.rs"
 $208 = tempRet0; //@line 42 "/checkout/src/libcore/num/diy_float.rs"
 $209 = (_i64Add(($207|0),($208|0),($206|0),0)|0); //@line 42 "/checkout/src/libcore/num/diy_float.rs"
 $210 = tempRet0; //@line 42 "/checkout/src/libcore/num/diy_float.rs"
 (_i64Add(($209|0),($210|0),($202|0),0)|0); //@line 42 "/checkout/src/libcore/num/diy_float.rs"
 $211 = tempRet0; //@line 42 "/checkout/src/libcore/num/diy_float.rs"
 $212 = (_i64Add(($205|0),0,($200|0),($201|0))|0); //@line 43 "/checkout/src/libcore/num/diy_float.rs"
 $213 = tempRet0; //@line 43 "/checkout/src/libcore/num/diy_float.rs"
 $214 = (_i64Add(($212|0),($213|0),($203|0),0)|0); //@line 43 "/checkout/src/libcore/num/diy_float.rs"
 $215 = tempRet0; //@line 43 "/checkout/src/libcore/num/diy_float.rs"
 $216 = (_i64Add(($214|0),($215|0),($211|0),0)|0); //@line 43 "/checkout/src/libcore/num/diy_float.rs"
 $217 = tempRet0; //@line 43 "/checkout/src/libcore/num/diy_float.rs"
 $218 = (_i64Add(($175|0),($176|0),1,0)|0); //@line 43 "/checkout/src/libcore/num/diy_float.rs"
 $219 = tempRet0; //@line 43 "/checkout/src/libcore/num/diy_float.rs"
 $220 = (_i64Add(($218|0),($219|0),($180|0),0)|0); //@line 43 "/checkout/src/libcore/num/diy_float.rs"
 $221 = tempRet0; //@line 43 "/checkout/src/libcore/num/diy_float.rs"
 $222 = (_i64Add(($220|0),($221|0),($178|0),0)|0); //@line 43 "/checkout/src/libcore/num/diy_float.rs"
 $223 = tempRet0; //@line 43 "/checkout/src/libcore/num/diy_float.rs"
 $224 = (_i64Add(($222|0),($223|0),($186|0),0)|0); //@line 221 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $225 = tempRet0; //@line 221 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $226 = (0 - ($187))<<16>>16; //@line 225 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $227 = $226 & 63; //@line 230 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $228 = $227&65535; //@line 230 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $229 = (_bitshift64Lshr(($224|0),($225|0),($228|0))|0); //@line 230 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $230 = tempRet0; //@line 230 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $231 = (_bitshift64Shl(1,0,($228|0))|0); //@line 231 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $232 = tempRet0; //@line 231 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $233 = (_i64Add(($231|0),($232|0),-1,-1)|0); //@line 231 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $234 = tempRet0; //@line 231 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $235 = $224 & $233; //@line 231 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $236 = $225 & $234; //@line 231 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $237 = ($229>>>0)<(10000); //@line 151 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 do {
  if ($237) {
   $238 = ($229>>>0)<(100); //@line 152 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   if ($238) {
    $240 = ($229>>>0)<(10); //@line 152 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $not$$i = $240 ^ 1; //@line 152 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $$sink2$i = $not$$i&1; //@line 152 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $$sink$i = $240 ? 1 : 10; //@line 152 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $$sink13$sink$sink$sink$i = $$sink$i;$$sink9$sink$i = $$sink2$i;
    break;
   } else {
    $241 = ($229>>>0)<(1000); //@line 153 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $$sink5$i = $241 ? 2 : 3; //@line 153 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $$sink3$i = $241 ? 100 : 1000; //@line 153 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $$sink13$sink$sink$sink$i = $$sink3$i;$$sink9$sink$i = $$sink5$i;
    break;
   }
  } else {
   $239 = ($229>>>0)<(1000000); //@line 155 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   if ($239) {
    $242 = ($229>>>0)<(100000); //@line 155 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $$sink9$i = $242 ? 4 : 5; //@line 155 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $$sink7$i = $242 ? 10000 : 100000; //@line 155 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $$sink13$sink$sink$sink$i = $$sink7$i;$$sink9$sink$i = $$sink9$i;
    break;
   }
   $243 = ($229>>>0)<(100000000); //@line 156 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   if ($243) {
    $244 = ($229>>>0)<(10000000); //@line 156 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $$sink12$i = $244 ? 6 : 7; //@line 156 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $$sink10$i = $244 ? 1000000 : 10000000; //@line 156 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $$sink13$sink$sink$sink$i = $$sink10$i;$$sink9$sink$i = $$sink12$i;
    break;
   } else {
    $245 = ($229>>>0)<(1000000000); //@line 157 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $$sink15$i = $245 ? 8 : 9; //@line 157 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $$sink13$i = $245 ? 100000000 : 1000000000; //@line 157 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $$sink13$sink$sink$sink$i = $$sink13$i;$$sink9$sink$i = $$sink15$i;
    break;
   }
  }
 } while(0);
 $246 = $$sink9$sink$i&255; //@line 238 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $247 = (($246) - ($174))<<16>>16; //@line 238 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $248 = (($247) + 1)<<16>>16; //@line 238 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $249 = (_i64Subtract(1,0,($188|0),($189|0))|0); //@line 43 "/checkout/src/libcore/num/diy_float.rs"
 $250 = tempRet0; //@line 43 "/checkout/src/libcore/num/diy_float.rs"
 $251 = (_i64Subtract(($249|0),($250|0),($193|0),0)|0); //@line 43 "/checkout/src/libcore/num/diy_float.rs"
 $252 = tempRet0; //@line 43 "/checkout/src/libcore/num/diy_float.rs"
 $253 = (_i64Subtract(($251|0),($252|0),($191|0),0)|0); //@line 43 "/checkout/src/libcore/num/diy_float.rs"
 $254 = tempRet0; //@line 43 "/checkout/src/libcore/num/diy_float.rs"
 $255 = (_i64Subtract(($253|0),($254|0),($199|0),0)|0); //@line 224 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $256 = tempRet0; //@line 224 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $257 = (_i64Add(($255|0),($256|0),($224|0),($225|0))|0); //@line 248 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $258 = tempRet0; //@line 248 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $259 = $257 & $233; //@line 250 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $260 = $258 & $234; //@line 250 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $261 = $$sink9$sink$i&255;
 $i$080 = 0;$remainder$078 = $229;$ten_kappa$079 = $$sink13$sink$sink$sink$i;
 while(1) {
  $262 = (($remainder$078>>>0) % ($ten_kappa$079>>>0))&-1; //@line 264 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $263 = ($i$080>>>0)<($buf$1>>>0); //@line 266 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  if (!($263)) {
   label = 68;
   break;
  }
  $264 = (($remainder$078>>>0) / ($ten_kappa$079>>>0))&-1; //@line 263 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $265 = $264&255; //@line 266 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $266 = (($buf$0) + ($i$080)|0); //@line 266 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $267 = (($265) + 48)<<24>>24; //@line 266 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  HEAP8[$266>>0] = $267; //@line 266 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $268 = (($i$080) + 1)|0; //@line 267 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $269 = (_bitshift64Shl(($262|0),0,($228|0))|0); //@line 269 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $270 = tempRet0; //@line 269 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $271 = (_i64Add(($269|0),($270|0),($235|0),($236|0))|0); //@line 269 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $272 = tempRet0; //@line 269 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $273 = ($258>>>0)>($272>>>0); //@line 270 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $274 = ($257>>>0)>($271>>>0); //@line 270 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $275 = ($258|0)==($272|0); //@line 270 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $276 = $275 & $274; //@line 270 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $277 = $273 | $276; //@line 270 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  if ($277) {
   label = 35;
   break;
  }
  $368 = ($268>>>0)>($261>>>0); //@line 278 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  if ($368) {
   $371 = $235;$372 = $236;$375 = $259;$376 = $260;$379 = 1;$380 = 0;$i$1 = $268;
   label = 51;
   break;
  }
  $369 = (($ten_kappa$079>>>0) / 10)&-1; //@line 286 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $370 = ($ten_kappa$079>>>0)<(10); //@line 263 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  if ($370) {
   label = 67;
   break;
  } else {
   $i$080 = $268;$remainder$078 = $262;$ten_kappa$079 = $369;
  }
 }
 if ((label|0) == 35) {
  $278 = ($268>>>0)>($buf$1>>>0); //@line 887 "/checkout/src/libcore/slice/mod.rs"
  if ($278) {
   __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($268,$buf$1); //@line 888 "/checkout/src/libcore/slice/mod.rs"
   // unreachable; //@line 888 "/checkout/src/libcore/slice/mod.rs"
  }
  $279 = (_bitshift64Shl(($ten_kappa$079|0),0,($228|0))|0); //@line 272 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $280 = tempRet0; //@line 272 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $281 = (_i64Subtract(($224|0),($225|0),($216|0),($217|0))|0); //@line 273 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $282 = tempRet0; //@line 273 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $283 = (_i64Add(($281|0),($282|0),1,0)|0); //@line 348 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $284 = tempRet0; //@line 348 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $285 = (_i64Add(($281|0),($282|0),-1,-1)|0); //@line 349 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $286 = tempRet0; //@line 349 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $287 = ($286>>>0)<($272>>>0); //@line 395 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $288 = ($285>>>0)<=($271>>>0); //@line 395 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $289 = ($286|0)==($272|0); //@line 395 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $290 = $289 & $288; //@line 395 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $291 = $287 | $290; //@line 395 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $292 = (_i64Subtract(($257|0),($258|0),($271|0),($272|0))|0); //@line 396 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $293 = tempRet0; //@line 396 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $294 = ($293>>>0)<($280>>>0); //@line 396 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $295 = ($292>>>0)<($279>>>0); //@line 396 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $296 = ($293|0)==($280|0); //@line 396 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $297 = $296 & $295; //@line 396 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $298 = $294 | $297; //@line 396 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $or$cond23$i = $291 | $298; //@line 395 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  L88: do {
   if ($or$cond23$i) {
    $$lcssa$i = $298;$300 = $272;$302 = $271;
   } else {
    $306 = $271;$307 = $272;$325 = $267;
    while(1) {
     $308 = (_i64Add(($306|0),($307|0),($279|0),($280|0))|0); //@line 397 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $309 = tempRet0; //@line 397 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $310 = ($309>>>0)<($286>>>0); //@line 397 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $311 = ($308>>>0)<($285>>>0); //@line 397 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $312 = ($309|0)==($286|0); //@line 397 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $313 = $312 & $311; //@line 397 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $314 = $310 | $313; //@line 397 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     if (!($314)) {
      $315 = (_i64Subtract(($285|0),($286|0),($306|0),($307|0))|0); //@line 398 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
      $316 = tempRet0; //@line 398 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
      $317 = (_i64Subtract(($308|0),($309|0),($285|0),($286|0))|0); //@line 398 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
      $318 = tempRet0; //@line 398 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
      $319 = ($316>>>0)<($318>>>0); //@line 397 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
      $320 = ($315>>>0)<($317>>>0); //@line 397 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
      $321 = ($316|0)==($318|0); //@line 397 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
      $322 = $321 & $320; //@line 397 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
      $323 = $319 | $322; //@line 397 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
      if ($323) {
       $$lcssa$i = 0;$300 = $307;$302 = $306;
       break L88;
      }
     }
     $324 = (($325) + -1)<<24>>24; //@line 399 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     HEAP8[$266>>0] = $324; //@line 399 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $326 = ($309>>>0)>($286>>>0); //@line 395 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $327 = ($308>>>0)>=($285>>>0); //@line 395 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $328 = ($309|0)==($286|0); //@line 395 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $329 = $328 & $327; //@line 395 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $330 = $326 | $329; //@line 395 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $331 = (_i64Subtract(($257|0),($258|0),($308|0),($309|0))|0); //@line 396 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $332 = tempRet0; //@line 396 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $333 = ($332>>>0)<($280>>>0); //@line 396 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $334 = ($331>>>0)<($279>>>0); //@line 396 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $335 = ($332|0)==($280|0); //@line 396 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $336 = $335 & $334; //@line 396 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $337 = $333 | $336; //@line 396 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $or$cond$i = $330 | $337; //@line 395 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     if ($or$cond$i) {
      $$lcssa$i = $337;$300 = $309;$302 = $308;
      break;
     } else {
      $306 = $308;$307 = $309;$325 = $324;
     }
    }
   }
  } while(0);
  $299 = ($284>>>0)<($300>>>0); //@line 409 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $301 = ($283>>>0)<=($302>>>0); //@line 409 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $303 = ($284|0)==($300|0); //@line 409 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $304 = $303 & $301; //@line 409 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $305 = $299 | $304; //@line 409 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $or$cond20$i = $305 | $$lcssa$i; //@line 409 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  do {
   if (!($or$cond20$i)) {
    $350 = (_i64Add(($302|0),($300|0),($279|0),($280|0))|0); //@line 411 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $351 = tempRet0; //@line 411 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $352 = ($351>>>0)<($284>>>0); //@line 411 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $353 = ($350>>>0)<($283>>>0); //@line 411 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $354 = ($351|0)==($284|0); //@line 411 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $355 = $354 & $353; //@line 411 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $356 = $352 | $355; //@line 411 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    if (!($356)) {
     $357 = (_i64Subtract(($283|0),($284|0),($302|0),($300|0))|0); //@line 412 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $358 = tempRet0; //@line 412 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $359 = (_i64Subtract(($350|0),($351|0),($283|0),($284|0))|0); //@line 412 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $360 = tempRet0; //@line 412 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $361 = ($358>>>0)<($360>>>0); //@line 411 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $362 = ($357>>>0)<($359>>>0); //@line 411 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $363 = ($358|0)==($360|0); //@line 411 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $364 = $363 & $362; //@line 411 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $365 = $361 | $364; //@line 411 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     if ($365) {
      break;
     }
    }
    HEAP32[$0>>2] = 0; //@line 413 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    STACKTOP = sp;return; //@line 426 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   }
  } while(0);
  $338 = ($300>>>0)<(0); //@line 420 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $339 = ($302>>>0)<(2); //@line 420 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $340 = ($300|0)==(0); //@line 420 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $341 = $340 & $339; //@line 420 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $342 = $338 | $341; //@line 420 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $343 = (_i64Add(($257|0),($258|0),-4,-1)|0); //@line 420 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $344 = tempRet0; //@line 420 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $345 = ($300>>>0)>($344>>>0); //@line 420 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $346 = ($302>>>0)>($343>>>0); //@line 420 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $347 = ($300|0)==($344|0); //@line 420 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $348 = $347 & $346; //@line 420 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $349 = $345 | $348; //@line 420 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $or$cond = $342 | $349; //@line 420 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  if ($or$cond) {
   HEAP32[$0>>2] = 0; //@line 423 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   STACKTOP = sp;return; //@line 426 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  } else {
   HEAP32[$0>>2] = 1; //@line 421 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $366 = ((($0)) + 4|0); //@line 421 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   HEAP32[$366>>2] = $268; //@line 421 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $367 = ((($0)) + 8|0); //@line 421 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   HEAP16[$367>>1] = $248; //@line 421 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   STACKTOP = sp;return; //@line 426 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  }
 }
 else if ((label|0) == 51) {
  while(1) {
   label = 0;
   $373 = (___muldi3(($371|0),($372|0),10,0)|0); //@line 300 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $374 = tempRet0; //@line 300 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $377 = (___muldi3(($375|0),($376|0),10,0)|0); //@line 301 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $378 = tempRet0; //@line 301 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $381 = (___muldi3(($379|0),($380|0),10,0)|0); //@line 302 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $382 = tempRet0; //@line 302 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $383 = $373 & $233; //@line 307 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $384 = $374 & $234; //@line 307 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $385 = ($i$1>>>0)<($buf$1>>>0); //@line 309 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   if (!($385)) {
    label = 69;
    break;
   }
   $386 = (_bitshift64Lshr(($373|0),($374|0),($228|0))|0); //@line 306 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $387 = tempRet0; //@line 306 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $388 = $386&255; //@line 309 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $389 = (($buf$0) + ($i$1)|0); //@line 309 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $390 = (($388) + 48)<<24>>24; //@line 309 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   HEAP8[$389>>0] = $390; //@line 309 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $391 = (($i$1) + 1)|0; //@line 310 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $392 = ($378>>>0)>($384>>>0); //@line 312 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $393 = ($377>>>0)>($383>>>0); //@line 312 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $394 = ($378|0)==($384|0); //@line 312 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $395 = $394 & $393; //@line 312 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $396 = $392 | $395; //@line 312 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   if ($396) {
    break;
   } else {
    $371 = $383;$372 = $384;$375 = $377;$376 = $378;$379 = $381;$380 = $382;$i$1 = $391;
    label = 51;
   }
  }
  if ((label|0) == 69) {
   __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(11852,$i$1,$buf$1); //@line 309 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   // unreachable; //@line 309 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  }
  $397 = ($391>>>0)>($buf$1>>>0); //@line 887 "/checkout/src/libcore/slice/mod.rs"
  if ($397) {
   __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($391,$buf$1); //@line 888 "/checkout/src/libcore/slice/mod.rs"
   // unreachable; //@line 888 "/checkout/src/libcore/slice/mod.rs"
  }
  $398 = (_i64Subtract(($224|0),($225|0),($216|0),($217|0))|0); //@line 315 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $399 = tempRet0; //@line 315 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $400 = (___muldi3(($381|0),($382|0),($398|0),($399|0))|0); //@line 315 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $401 = tempRet0; //@line 315 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $402 = (_i64Add(($400|0),($401|0),($381|0),($382|0))|0); //@line 348 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $403 = tempRet0; //@line 348 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $404 = (_i64Subtract(($400|0),($401|0),($381|0),($382|0))|0); //@line 349 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $405 = tempRet0; //@line 349 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $406 = ($405>>>0)<($384>>>0); //@line 395 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $407 = ($404>>>0)<=($383>>>0); //@line 395 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $408 = ($405|0)==($384|0); //@line 395 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $409 = $408 & $407; //@line 395 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $410 = $406 | $409; //@line 395 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $411 = (_i64Subtract(($377|0),($378|0),($383|0),($384|0))|0); //@line 396 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $412 = tempRet0; //@line 396 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $413 = ($412>>>0)<($232>>>0); //@line 396 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $414 = ($411>>>0)<($231>>>0); //@line 396 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $415 = ($412|0)==($232|0); //@line 396 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $416 = $415 & $414; //@line 396 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $417 = $413 | $416; //@line 396 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $or$cond23$i20 = $417 | $410; //@line 395 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  L64: do {
   if ($or$cond23$i20) {
    $$lcssa$i22 = $417;$419 = $384;$421 = $383;
   } else {
    $425 = $383;$426 = $384;$444 = $390;
    while(1) {
     $427 = (_i64Add(($425|0),($426|0),($231|0),($232|0))|0); //@line 397 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $428 = tempRet0; //@line 397 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $429 = ($428>>>0)<($405>>>0); //@line 397 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $430 = ($427>>>0)<($404>>>0); //@line 397 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $431 = ($428|0)==($405|0); //@line 397 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $432 = $431 & $430; //@line 397 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $433 = $429 | $432; //@line 397 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     if (!($433)) {
      $434 = (_i64Subtract(($404|0),($405|0),($425|0),($426|0))|0); //@line 398 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
      $435 = tempRet0; //@line 398 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
      $436 = (_i64Subtract(($427|0),($428|0),($404|0),($405|0))|0); //@line 398 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
      $437 = tempRet0; //@line 398 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
      $438 = ($435>>>0)<($437>>>0); //@line 397 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
      $439 = ($434>>>0)<($436>>>0); //@line 397 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
      $440 = ($435|0)==($437|0); //@line 397 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
      $441 = $440 & $439; //@line 397 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
      $442 = $438 | $441; //@line 397 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
      if ($442) {
       $$lcssa$i22 = 0;$419 = $426;$421 = $425;
       break L64;
      }
     }
     $443 = (($444) + -1)<<24>>24; //@line 399 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     HEAP8[$389>>0] = $443; //@line 399 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $445 = ($428>>>0)>($405>>>0); //@line 395 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $446 = ($427>>>0)>=($404>>>0); //@line 395 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $447 = ($428|0)==($405|0); //@line 395 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $448 = $447 & $446; //@line 395 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $449 = $445 | $448; //@line 395 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $450 = (_i64Subtract(($377|0),($378|0),($427|0),($428|0))|0); //@line 396 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $451 = tempRet0; //@line 396 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $452 = ($451>>>0)<($232>>>0); //@line 396 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $453 = ($450>>>0)<($231>>>0); //@line 396 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $454 = ($451|0)==($232|0); //@line 396 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $455 = $454 & $453; //@line 396 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $456 = $452 | $455; //@line 396 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $or$cond$i29 = $449 | $456; //@line 395 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     if ($or$cond$i29) {
      $$lcssa$i22 = $456;$419 = $428;$421 = $427;
      break;
     } else {
      $425 = $427;$426 = $428;$444 = $443;
     }
    }
   }
  } while(0);
  $418 = ($403>>>0)<($419>>>0); //@line 409 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $420 = ($402>>>0)<=($421>>>0); //@line 409 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $422 = ($403|0)==($419|0); //@line 409 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $423 = $422 & $420; //@line 409 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $424 = $418 | $423; //@line 409 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $or$cond20$i23 = $424 | $$lcssa$i22; //@line 409 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  do {
   if (!($or$cond20$i23)) {
    $464 = (_i64Add(($421|0),($419|0),($231|0),($232|0))|0); //@line 411 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $465 = tempRet0; //@line 411 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $466 = ($465>>>0)<($403>>>0); //@line 411 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $467 = ($464>>>0)<($402>>>0); //@line 411 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $468 = ($465|0)==($403|0); //@line 411 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $469 = $468 & $467; //@line 411 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $470 = $466 | $469; //@line 411 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    if (!($470)) {
     $471 = (_i64Subtract(($402|0),($403|0),($421|0),($419|0))|0); //@line 412 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $472 = tempRet0; //@line 412 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $473 = (_i64Subtract(($464|0),($465|0),($402|0),($403|0))|0); //@line 412 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $474 = tempRet0; //@line 412 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $475 = ($472>>>0)<($474>>>0); //@line 411 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $476 = ($471>>>0)<($473>>>0); //@line 411 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $477 = ($472|0)==($474|0); //@line 411 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $478 = $477 & $476; //@line 411 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $479 = $475 | $478; //@line 411 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     if ($479) {
      break;
     }
    }
    HEAP32[$0>>2] = 0; //@line 413 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    STACKTOP = sp;return; //@line 426 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   }
  } while(0);
  $457 = (___muldi3(($379|0),($380|0),20,0)|0); //@line 420 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $458 = tempRet0; //@line 420 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $459 = ($458>>>0)>($419>>>0); //@line 420 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $460 = ($457>>>0)>($421>>>0); //@line 420 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $461 = ($458|0)==($419|0); //@line 420 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $462 = $461 & $460; //@line 420 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $463 = $459 | $462; //@line 420 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  if (!($463)) {
   $480 = (___muldi3(($379|0),($380|0),-40,-1)|0); //@line 420 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $481 = tempRet0; //@line 420 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $482 = (_i64Add(($480|0),($481|0),($377|0),($378|0))|0); //@line 420 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $483 = tempRet0; //@line 420 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $484 = ($419>>>0)>($483>>>0); //@line 420 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $485 = ($421>>>0)>($482>>>0); //@line 420 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $486 = ($419|0)==($483|0); //@line 420 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $487 = $486 & $485; //@line 420 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $488 = $484 | $487; //@line 420 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   if (!($488)) {
    HEAP32[$0>>2] = 1; //@line 421 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $489 = ((($0)) + 4|0); //@line 421 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    HEAP32[$489>>2] = $391; //@line 421 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $490 = ((($0)) + 8|0); //@line 421 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    HEAP16[$490>>1] = $248; //@line 421 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    STACKTOP = sp;return; //@line 426 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   }
  }
  HEAP32[$0>>2] = 0; //@line 423 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  STACKTOP = sp;return; //@line 426 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 }
 else if ((label|0) == 67) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(11812); //@line 263 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  // unreachable; //@line 263 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 }
 else if ((label|0) == 68) {
  __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(11836,$i$080,$buf$1); //@line 266 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  // unreachable; //@line 266 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 }
}
function __ZN4core3num7flt2dec8strategy5grisu16format_exact_opt17hf9a719460bb570ffE($0,$d,$buf$0,$buf$1,$limit) {
 $0 = $0|0;
 $d = $d|0;
 $buf$0 = $buf$0|0;
 $buf$1 = $buf$1|0;
 $limit = $limit|0;
 var $$buf$1 = 0, $$not$i = 0, $$sink$i = 0, $$sink10$i = 0, $$sink12$i = 0, $$sink13$i = 0, $$sink13$sink$sink$sink$i = 0, $$sink15$i = 0, $$sink2$i = 0, $$sink3$i = 0, $$sink5$i = 0, $$sink7$i = 0, $$sink9$i = 0, $$sink9$sink$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $abi_cast$sroa$4$0$extract$shift$i = 0, $abi_cast$sroa$4$0$extract$shift$i46 = 0, $abi_cast$sroa$4$0$extract$shift$i66 = 0, $abi_cast$sroa$4$0$extract$trunc$i = 0, $abi_cast$sroa$4$0$extract$trunc$i47 = 0, $abi_cast$sroa$4$0$extract$trunc$i67 = 0, $e$0$i = 0, $e$1$i = 0, $e$2$i = 0, $e$3$i = 0, $e$4$i = 0, $e$5$i = 0;
 var $exp$0$i = 0, $exp$0$i51 = 0, $exp$0$i71 = 0, $i$0101 = 0, $i$1 = 0, $len$0$i = 0, $len$0$i52 = 0, $len$0$i72 = 0, $not$$i = 0, $or$cond$i = 0, $or$cond$i49 = 0, $remainder$099 = 0, $ten_kappa$0100 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $d; //@line 444 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $2 = $1; //@line 444 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $3 = HEAP32[$2>>2]|0; //@line 444 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $4 = (($1) + 4)|0; //@line 444 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $5 = $4; //@line 444 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $6 = HEAP32[$5>>2]|0; //@line 444 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $7 = ($3|0)==(0); //@line 444 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $8 = ($6|0)==(0); //@line 444 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $9 = $7 & $8; //@line 444 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 if ($9) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(11868); //@line 444 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  // unreachable; //@line 444 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 }
 $10 = ($6>>>0)>(536870911); //@line 445 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $11 = ($3>>>0)>(4294967295); //@line 445 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $12 = ($6|0)==(536870911); //@line 445 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $13 = $12 & $11; //@line 445 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $14 = $10 | $13; //@line 445 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 if ($14) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(11892); //@line 445 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  // unreachable; //@line 445 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 }
 $15 = ($buf$1|0)==(0); //@line 140 "/checkout/src/libcore/slice/mod.rs"
 if ($15) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(11916); //@line 446 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  // unreachable; //@line 446 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 }
 $16 = ((($d)) + 24|0); //@line 449 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $17 = HEAP16[$16>>1]|0; //@line 449 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $18 = ($6>>>0)<(1); //@line 52 "/checkout/src/libcore/num/diy_float.rs"
 $19 = ($3>>>0)<(0); //@line 52 "/checkout/src/libcore/num/diy_float.rs"
 $20 = ($6|0)==(1); //@line 52 "/checkout/src/libcore/num/diy_float.rs"
 $21 = $20 & $19; //@line 52 "/checkout/src/libcore/num/diy_float.rs"
 $22 = $18 | $21; //@line 52 "/checkout/src/libcore/num/diy_float.rs"
 $23 = (($17) + -32)<<16>>16; //@line 54 "/checkout/src/libcore/num/diy_float.rs"
 $24 = $22 ? 0 : $3; //@line 52 "/checkout/src/libcore/num/diy_float.rs"
 $25 = $22 ? $3 : $6; //@line 52 "/checkout/src/libcore/num/diy_float.rs"
 $e$0$i = $22 ? $23 : $17; //@line 52 "/checkout/src/libcore/num/diy_float.rs"
 $26 = ($25>>>0)<(65536); //@line 56 "/checkout/src/libcore/num/diy_float.rs"
 $27 = ($24>>>0)<(0); //@line 56 "/checkout/src/libcore/num/diy_float.rs"
 $28 = ($25|0)==(65536); //@line 56 "/checkout/src/libcore/num/diy_float.rs"
 $29 = $28 & $27; //@line 56 "/checkout/src/libcore/num/diy_float.rs"
 $30 = $26 | $29; //@line 56 "/checkout/src/libcore/num/diy_float.rs"
 $31 = (_bitshift64Shl(($24|0),($25|0),16)|0); //@line 57 "/checkout/src/libcore/num/diy_float.rs"
 $32 = tempRet0; //@line 57 "/checkout/src/libcore/num/diy_float.rs"
 $33 = (($e$0$i) + -16)<<16>>16; //@line 58 "/checkout/src/libcore/num/diy_float.rs"
 $34 = $30 ? $31 : $24; //@line 56 "/checkout/src/libcore/num/diy_float.rs"
 $35 = $30 ? $32 : $25; //@line 56 "/checkout/src/libcore/num/diy_float.rs"
 $e$1$i = $30 ? $33 : $e$0$i; //@line 56 "/checkout/src/libcore/num/diy_float.rs"
 $36 = ($35>>>0)<(16777216); //@line 60 "/checkout/src/libcore/num/diy_float.rs"
 $37 = ($34>>>0)<(0); //@line 60 "/checkout/src/libcore/num/diy_float.rs"
 $38 = ($35|0)==(16777216); //@line 60 "/checkout/src/libcore/num/diy_float.rs"
 $39 = $38 & $37; //@line 60 "/checkout/src/libcore/num/diy_float.rs"
 $40 = $36 | $39; //@line 60 "/checkout/src/libcore/num/diy_float.rs"
 $41 = (_bitshift64Shl(($34|0),($35|0),8)|0); //@line 61 "/checkout/src/libcore/num/diy_float.rs"
 $42 = tempRet0; //@line 61 "/checkout/src/libcore/num/diy_float.rs"
 $43 = (($e$1$i) + -8)<<16>>16; //@line 62 "/checkout/src/libcore/num/diy_float.rs"
 $44 = $40 ? $41 : $34; //@line 60 "/checkout/src/libcore/num/diy_float.rs"
 $45 = $40 ? $42 : $35; //@line 60 "/checkout/src/libcore/num/diy_float.rs"
 $e$2$i = $40 ? $43 : $e$1$i; //@line 60 "/checkout/src/libcore/num/diy_float.rs"
 $46 = ($45>>>0)<(268435456); //@line 64 "/checkout/src/libcore/num/diy_float.rs"
 $47 = ($44>>>0)<(0); //@line 64 "/checkout/src/libcore/num/diy_float.rs"
 $48 = ($45|0)==(268435456); //@line 64 "/checkout/src/libcore/num/diy_float.rs"
 $49 = $48 & $47; //@line 64 "/checkout/src/libcore/num/diy_float.rs"
 $50 = $46 | $49; //@line 64 "/checkout/src/libcore/num/diy_float.rs"
 $51 = (_bitshift64Shl(($44|0),($45|0),4)|0); //@line 65 "/checkout/src/libcore/num/diy_float.rs"
 $52 = tempRet0; //@line 65 "/checkout/src/libcore/num/diy_float.rs"
 $53 = (($e$2$i) + -4)<<16>>16; //@line 66 "/checkout/src/libcore/num/diy_float.rs"
 $54 = $50 ? $51 : $44; //@line 64 "/checkout/src/libcore/num/diy_float.rs"
 $55 = $50 ? $52 : $45; //@line 64 "/checkout/src/libcore/num/diy_float.rs"
 $e$3$i = $50 ? $53 : $e$2$i; //@line 64 "/checkout/src/libcore/num/diy_float.rs"
 $56 = ($55>>>0)<(1073741824); //@line 68 "/checkout/src/libcore/num/diy_float.rs"
 $57 = ($54>>>0)<(0); //@line 68 "/checkout/src/libcore/num/diy_float.rs"
 $58 = ($55|0)==(1073741824); //@line 68 "/checkout/src/libcore/num/diy_float.rs"
 $59 = $58 & $57; //@line 68 "/checkout/src/libcore/num/diy_float.rs"
 $60 = $56 | $59; //@line 68 "/checkout/src/libcore/num/diy_float.rs"
 $61 = (_bitshift64Shl(($54|0),($55|0),2)|0); //@line 69 "/checkout/src/libcore/num/diy_float.rs"
 $62 = tempRet0; //@line 69 "/checkout/src/libcore/num/diy_float.rs"
 $63 = (($e$3$i) + -2)<<16>>16; //@line 70 "/checkout/src/libcore/num/diy_float.rs"
 $64 = $60 ? $61 : $54; //@line 68 "/checkout/src/libcore/num/diy_float.rs"
 $65 = $60 ? $62 : $55; //@line 68 "/checkout/src/libcore/num/diy_float.rs"
 $e$4$i = $60 ? $63 : $e$3$i; //@line 68 "/checkout/src/libcore/num/diy_float.rs"
 $66 = (_bitshift64Lshr(($64|0),($65|0),63)|0); //@line 72 "/checkout/src/libcore/num/diy_float.rs"
 $67 = tempRet0; //@line 72 "/checkout/src/libcore/num/diy_float.rs"
 $68 = $66 ^ 1; //@line 72 "/checkout/src/libcore/num/diy_float.rs"
 $69 = (_bitshift64Shl(($64|0),($65|0),($68|0))|0); //@line 72 "/checkout/src/libcore/num/diy_float.rs"
 $70 = tempRet0; //@line 72 "/checkout/src/libcore/num/diy_float.rs"
 $71 = (_bitshift64Ashr(($64|0),($65|0),63)|0); //@line 72 "/checkout/src/libcore/num/diy_float.rs"
 $72 = tempRet0; //@line 72 "/checkout/src/libcore/num/diy_float.rs"
 $73 = $71&65535; //@line 72 "/checkout/src/libcore/num/diy_float.rs"
 $$not$i = $73 ^ -1; //@line 72 "/checkout/src/libcore/num/diy_float.rs"
 $e$5$i = (($e$4$i) + ($$not$i))<<16>>16; //@line 72 "/checkout/src/libcore/num/diy_float.rs"
 $74 = (-96 - ($e$5$i))<<16>>16; //@line 450 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $75 = $74 << 16 >> 16; //@line 130 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $76 = ($75*80)|0; //@line 130 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $77 = (($76) + 86960)|0; //@line 130 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $78 = (($77|0) / 2126)&-1; //@line 130 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $79 = ($78>>>0)<(81); //@line 131 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 if (!($79)) {
  __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(11628,$78,81); //@line 131 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  // unreachable; //@line 131 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 }
 $80 = (1744 + ($78<<4)|0); //@line 131 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $81 = $80; //@line 131 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $82 = $81; //@line 131 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $83 = HEAP32[$82>>2]|0; //@line 131 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $84 = (($81) + 4)|0; //@line 131 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $85 = $84; //@line 131 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $86 = HEAP32[$85>>2]|0; //@line 131 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $87 = (((1744 + ($78<<4)|0)) + 8|0); //@line 131 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $88 = HEAP16[$87>>1]|0; //@line 131 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $89 = (((1744 + ($78<<4)|0)) + 10|0); //@line 131 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $90 = HEAP16[$89>>1]|0; //@line 131 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $91 = (___muldi3(($86|0),0,($70|0),0)|0); //@line 38 "/checkout/src/libcore/num/diy_float.rs"
 $92 = tempRet0; //@line 38 "/checkout/src/libcore/num/diy_float.rs"
 $93 = (___muldi3(($86|0),0,($69|0),0)|0); //@line 39 "/checkout/src/libcore/num/diy_float.rs"
 $94 = tempRet0; //@line 39 "/checkout/src/libcore/num/diy_float.rs"
 $95 = (___muldi3(($83|0),0,($70|0),0)|0); //@line 40 "/checkout/src/libcore/num/diy_float.rs"
 $96 = tempRet0; //@line 40 "/checkout/src/libcore/num/diy_float.rs"
 (___muldi3(($83|0),0,($69|0),0)|0); //@line 41 "/checkout/src/libcore/num/diy_float.rs"
 $97 = tempRet0; //@line 41 "/checkout/src/libcore/num/diy_float.rs"
 $98 = (_i64Add(($95|0),0,-2147483648,0)|0); //@line 42 "/checkout/src/libcore/num/diy_float.rs"
 $99 = tempRet0; //@line 42 "/checkout/src/libcore/num/diy_float.rs"
 $100 = (_i64Add(($98|0),($99|0),($97|0),0)|0); //@line 42 "/checkout/src/libcore/num/diy_float.rs"
 $101 = tempRet0; //@line 42 "/checkout/src/libcore/num/diy_float.rs"
 (_i64Add(($100|0),($101|0),($93|0),0)|0); //@line 42 "/checkout/src/libcore/num/diy_float.rs"
 $102 = tempRet0; //@line 42 "/checkout/src/libcore/num/diy_float.rs"
 $103 = (_i64Add(($96|0),0,($91|0),($92|0))|0); //@line 43 "/checkout/src/libcore/num/diy_float.rs"
 $104 = tempRet0; //@line 43 "/checkout/src/libcore/num/diy_float.rs"
 $105 = (_i64Add(($103|0),($104|0),($94|0),0)|0); //@line 43 "/checkout/src/libcore/num/diy_float.rs"
 $106 = tempRet0; //@line 43 "/checkout/src/libcore/num/diy_float.rs"
 $107 = (_i64Add(($105|0),($106|0),($102|0),0)|0); //@line 43 "/checkout/src/libcore/num/diy_float.rs"
 $108 = tempRet0; //@line 43 "/checkout/src/libcore/num/diy_float.rs"
 $109 = (($e$5$i) + 64)<<16>>16; //@line 44 "/checkout/src/libcore/num/diy_float.rs"
 $110 = (($109) + ($88))<<16>>16; //@line 44 "/checkout/src/libcore/num/diy_float.rs"
 $111 = (0 - ($110))<<16>>16; //@line 454 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $112 = $111 << 16 >> 16; //@line 454 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $113 = $112 & 63; //@line 455 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $114 = (_bitshift64Lshr(($107|0),($108|0),($113|0))|0); //@line 455 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $115 = tempRet0; //@line 455 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $116 = (_bitshift64Shl(1,0,($113|0))|0); //@line 456 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $117 = tempRet0; //@line 456 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $118 = (_i64Add(($116|0),($117|0),-1,-1)|0); //@line 456 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $119 = tempRet0; //@line 456 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $120 = $107 & $118; //@line 456 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $121 = $108 & $119; //@line 456 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $122 = ($114>>>0)<(10000); //@line 151 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 do {
  if ($122) {
   $123 = ($114>>>0)<(100); //@line 152 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   if ($123) {
    $125 = ($114>>>0)<(10); //@line 152 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $not$$i = $125 ^ 1; //@line 152 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $$sink2$i = $not$$i&1; //@line 152 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $$sink$i = $125 ? 1 : 10; //@line 152 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $$sink13$sink$sink$sink$i = $$sink$i;$$sink9$sink$i = $$sink2$i;
    break;
   } else {
    $126 = ($114>>>0)<(1000); //@line 153 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $$sink5$i = $126 ? 2 : 3; //@line 153 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $$sink3$i = $126 ? 100 : 1000; //@line 153 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $$sink13$sink$sink$sink$i = $$sink3$i;$$sink9$sink$i = $$sink5$i;
    break;
   }
  } else {
   $124 = ($114>>>0)<(1000000); //@line 155 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   if ($124) {
    $127 = ($114>>>0)<(100000); //@line 155 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $$sink9$i = $127 ? 4 : 5; //@line 155 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $$sink7$i = $127 ? 10000 : 100000; //@line 155 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $$sink13$sink$sink$sink$i = $$sink7$i;$$sink9$sink$i = $$sink9$i;
    break;
   }
   $128 = ($114>>>0)<(100000000); //@line 156 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   if ($128) {
    $129 = ($114>>>0)<(10000000); //@line 156 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $$sink12$i = $129 ? 6 : 7; //@line 156 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $$sink10$i = $129 ? 1000000 : 10000000; //@line 156 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $$sink13$sink$sink$sink$i = $$sink10$i;$$sink9$sink$i = $$sink12$i;
    break;
   } else {
    $130 = ($114>>>0)<(1000000000); //@line 157 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $$sink15$i = $130 ? 8 : 9; //@line 157 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $$sink13$i = $130 ? 100000000 : 1000000000; //@line 157 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $$sink13$sink$sink$sink$i = $$sink13$i;$$sink9$sink$i = $$sink15$i;
    break;
   }
  }
 } while(0);
 $131 = $$sink9$sink$i&255; //@line 476 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $132 = (($131) - ($90))<<16>>16; //@line 476 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $133 = (($132) + 1)<<16>>16; //@line 476 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $134 = ($133<<16>>16)>($limit<<16>>16); //@line 481 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 if (!($134)) {
  $142 = (___udivdi3(($107|0),($108|0),10,0)|0); //@line 490 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $143 = tempRet0; //@line 490 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $144 = (_bitshift64Shl(($$sink13$sink$sink$sink$i|0),0,($113|0))|0); //@line 490 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $145 = tempRet0; //@line 490 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $146 = ($145>>>0)>($117>>>0); //@line 607 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $147 = ($144>>>0)>($116>>>0); //@line 607 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $148 = ($145|0)==($117|0); //@line 607 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $149 = $148 & $147; //@line 607 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $150 = $146 | $149; //@line 607 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  if (!($150)) {
   HEAP32[$0>>2] = 0; //@line 607 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   return; //@line 683 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  }
  $151 = (_i64Subtract(($144|0),($145|0),($116|0),($117|0))|0); //@line 621 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $152 = tempRet0; //@line 621 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $153 = ($152>>>0)>($117>>>0); //@line 621 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $154 = ($151>>>0)>($116>>>0); //@line 621 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $155 = ($152|0)==($117|0); //@line 621 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $156 = $155 & $154; //@line 621 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $157 = $153 | $156; //@line 621 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  if (!($157)) {
   HEAP32[$0>>2] = 0; //@line 621 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   return; //@line 683 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  }
  $158 = (_i64Subtract(($144|0),($145|0),($142|0),($143|0))|0); //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $159 = tempRet0; //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $160 = ($159>>>0)>($143>>>0); //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $161 = ($158>>>0)>($142>>>0); //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $162 = ($159|0)==($143|0); //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $163 = $162 & $161; //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $164 = $160 | $163; //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  if ($164) {
   $170 = (_bitshift64Shl(($142|0),($143|0),1)|0); //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $171 = tempRet0; //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $172 = (_i64Subtract(($144|0),($145|0),($170|0),($171|0))|0); //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $173 = tempRet0; //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $174 = (_bitshift64Shl(($116|0),($117|0),1)|0); //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $175 = tempRet0; //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $176 = ($173>>>0)<($175>>>0); //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $177 = ($172>>>0)<($174>>>0); //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $178 = ($173|0)==($175|0); //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $179 = $178 & $177; //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $180 = $176 | $179; //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   if (!($180)) {
    HEAP32[$0>>2] = 1; //@line 645 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $181 = ((($0)) + 4|0); //@line 645 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    HEAP32[$181>>2] = 0; //@line 645 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $182 = ((($0)) + 8|0); //@line 645 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    HEAP16[$182>>1] = $133; //@line 645 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    return; //@line 683 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   }
  }
  $165 = ($143>>>0)>($117>>>0); //@line 665 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $166 = ($142>>>0)>($116>>>0); //@line 665 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $167 = ($143|0)==($117|0); //@line 665 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $168 = $167 & $166; //@line 665 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $169 = $165 | $168; //@line 665 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  if ($169) {
   $183 = (_i64Subtract(($142|0),($143|0),($116|0),($117|0))|0); //@line 665 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $184 = tempRet0; //@line 665 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $185 = (_i64Subtract(($144|0),($145|0),($183|0),($184|0))|0); //@line 665 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $186 = tempRet0; //@line 665 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $187 = ($186>>>0)>($184>>>0); //@line 665 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $188 = ($185>>>0)>($183>>>0); //@line 665 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $189 = ($186|0)==($184|0); //@line 665 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $190 = $189 & $188; //@line 665 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $191 = $187 | $190; //@line 665 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   if (!($191)) {
    $192 = (__ZN4core3num7flt2dec8round_up17hd6184f9bc0abdbe1E($buf$0,$buf$1,0)|0); //@line 666 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $abi_cast$sroa$4$0$extract$shift$i66 = ($192&65535) >>> 8; //@line 666 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $abi_cast$sroa$4$0$extract$trunc$i67 = $abi_cast$sroa$4$0$extract$shift$i66&255; //@line 666 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $193 = $192 & 1; //@line 666 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $194 = ($193<<16>>16)==(0); //@line 666 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    if ($194) {
     $exp$0$i71 = $133;$len$0$i72 = 0;
    } else {
     $195 = (($132) + 2)<<16>>16; //@line 670 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $196 = ($195<<16>>16)>($limit<<16>>16); //@line 671 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     if ($196) {
      HEAP8[$buf$0>>0] = $abi_cast$sroa$4$0$extract$trunc$i67; //@line 672 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
      $exp$0$i71 = $195;$len$0$i72 = 1;
     } else {
      $exp$0$i71 = $195;$len$0$i72 = 0;
     }
    }
    HEAP32[$0>>2] = 1; //@line 676 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $197 = ((($0)) + 4|0); //@line 676 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    HEAP32[$197>>2] = $len$0$i72; //@line 676 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $198 = ((($0)) + 8|0); //@line 676 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    HEAP16[$198>>1] = $exp$0$i71; //@line 676 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    return; //@line 683 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   }
  }
  HEAP32[$0>>2] = 0; //@line 681 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  return; //@line 683 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 }
 $135 = $133 << 16 >> 16; //@line 491 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $136 = $limit << 16 >> 16; //@line 491 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $137 = (($135) - ($136))|0; //@line 491 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $138 = ($137>>>0)<($buf$1>>>0); //@line 491 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $139 = (($133) - ($limit))<<16>>16; //@line 492 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $140 = $139 << 16 >> 16; //@line 492 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $$buf$1 = $138 ? $140 : $buf$1; //@line 491 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 $141 = $$sink9$sink$i&255;
 $i$0101 = 0;$remainder$099 = $114;$ten_kappa$0100 = $$sink13$sink$sink$sink$i;
 while(1) {
  $199 = (($remainder$099>>>0) % ($ten_kappa$0100>>>0))&-1; //@line 511 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $200 = ($i$0101>>>0)<($buf$1>>>0); //@line 513 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  if (!($200)) {
   label = 73;
   break;
  }
  $201 = (($remainder$099>>>0) / ($ten_kappa$0100>>>0))&-1; //@line 510 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $202 = $201&255; //@line 513 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $203 = (($buf$0) + ($i$0101)|0); //@line 513 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $204 = (($202) + 48)<<24>>24; //@line 513 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  HEAP8[$203>>0] = $204; //@line 513 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $205 = (($i$0101) + 1)|0; //@line 514 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $206 = ($205|0)==($$buf$1|0); //@line 517 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  if ($206) {
   label = 37;
   break;
  }
  $269 = ($205>>>0)>($141>>>0); //@line 524 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  if ($269) {
   label = 53;
   break;
  }
  $270 = (($ten_kappa$0100>>>0) / 10)&-1; //@line 532 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $271 = ($ten_kappa$0100>>>0)<(10); //@line 510 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  if ($271) {
   label = 72;
   break;
  } else {
   $i$0101 = $205;$remainder$099 = $199;$ten_kappa$0100 = $270;
  }
 }
 if ((label|0) == 37) {
  $207 = (_bitshift64Shl(($199|0),0,($113|0))|0); //@line 518 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $208 = tempRet0; //@line 518 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $209 = (_i64Add(($207|0),($208|0),($120|0),($121|0))|0); //@line 518 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $210 = tempRet0; //@line 518 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $211 = (_bitshift64Shl(($ten_kappa$0100|0),0,($113|0))|0); //@line 519 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $212 = tempRet0; //@line 519 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $213 = ($212>>>0)>($117>>>0); //@line 607 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $214 = ($211>>>0)>($116>>>0); //@line 607 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $215 = ($212|0)==($117|0); //@line 607 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $216 = $215 & $214; //@line 607 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $217 = $213 | $216; //@line 607 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  if (!($217)) {
   HEAP32[$0>>2] = 0; //@line 607 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   return; //@line 683 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  }
  $218 = (_i64Subtract(($211|0),($212|0),($116|0),($117|0))|0); //@line 621 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $219 = tempRet0; //@line 621 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $220 = ($219>>>0)>($117>>>0); //@line 621 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $221 = ($218>>>0)>($116>>>0); //@line 621 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $222 = ($219|0)==($117|0); //@line 621 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $223 = $222 & $221; //@line 621 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $224 = $220 | $223; //@line 621 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  if (!($224)) {
   HEAP32[$0>>2] = 0; //@line 621 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   return; //@line 683 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  }
  $225 = (_i64Subtract(($211|0),($212|0),($209|0),($210|0))|0); //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $226 = tempRet0; //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $227 = ($226>>>0)>($210>>>0); //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $228 = ($225>>>0)>($209>>>0); //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $229 = ($226|0)==($210|0); //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $230 = $229 & $228; //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $231 = $227 | $230; //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  if ($231) {
   $237 = (_bitshift64Shl(($209|0),($210|0),1)|0); //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $238 = tempRet0; //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $239 = (_i64Subtract(($211|0),($212|0),($237|0),($238|0))|0); //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $240 = tempRet0; //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $241 = (_bitshift64Shl(($116|0),($117|0),1)|0); //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $242 = tempRet0; //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $243 = ($240>>>0)<($242>>>0); //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $244 = ($239>>>0)<($241>>>0); //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $245 = ($240|0)==($242|0); //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $246 = $245 & $244; //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $247 = $243 | $246; //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   if (!($247)) {
    HEAP32[$0>>2] = 1; //@line 645 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $248 = ((($0)) + 4|0); //@line 645 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    HEAP32[$248>>2] = $$buf$1; //@line 645 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $249 = ((($0)) + 8|0); //@line 645 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    HEAP16[$249>>1] = $133; //@line 645 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    return; //@line 683 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   }
  }
  $232 = ($210>>>0)>($117>>>0); //@line 665 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $233 = ($209>>>0)>($116>>>0); //@line 665 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $234 = ($210|0)==($117|0); //@line 665 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $235 = $234 & $233; //@line 665 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $236 = $232 | $235; //@line 665 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  if ($236) {
   $250 = (_i64Subtract(($209|0),($210|0),($116|0),($117|0))|0); //@line 665 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $251 = tempRet0; //@line 665 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $252 = (_i64Subtract(($211|0),($212|0),($250|0),($251|0))|0); //@line 665 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $253 = tempRet0; //@line 665 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $254 = ($253>>>0)>($251>>>0); //@line 665 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $255 = ($252>>>0)>($250>>>0); //@line 665 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $256 = ($253|0)==($251|0); //@line 665 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $257 = $256 & $255; //@line 665 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $258 = $254 | $257; //@line 665 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   if (!($258)) {
    $259 = (__ZN4core3num7flt2dec8round_up17hd6184f9bc0abdbe1E($buf$0,$buf$1,$$buf$1)|0); //@line 666 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $abi_cast$sroa$4$0$extract$shift$i46 = ($259&65535) >>> 8; //@line 666 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $abi_cast$sroa$4$0$extract$trunc$i47 = $abi_cast$sroa$4$0$extract$shift$i46&255; //@line 666 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $260 = $259 & 1; //@line 666 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $261 = ($260<<16>>16)==(0); //@line 666 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    if ($261) {
     $exp$0$i51 = $133;$len$0$i52 = $$buf$1;
    } else {
     $262 = (($132) + 2)<<16>>16; //@line 670 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $263 = ($262<<16>>16)>($limit<<16>>16); //@line 671 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $264 = ($$buf$1>>>0)<($buf$1>>>0); //@line 671 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $or$cond$i49 = $263 & $264; //@line 671 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     if ($or$cond$i49) {
      $267 = (($buf$0) + ($$buf$1)|0); //@line 672 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
      $268 = (($$buf$1) + 1)|0; //@line 673 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
      HEAP8[$267>>0] = $abi_cast$sroa$4$0$extract$trunc$i47; //@line 672 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
      $exp$0$i51 = $262;$len$0$i52 = $268;
     } else {
      $exp$0$i51 = $262;$len$0$i52 = $$buf$1;
     }
    }
    HEAP32[$0>>2] = 1; //@line 676 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $265 = ((($0)) + 4|0); //@line 676 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    HEAP32[$265>>2] = $len$0$i52; //@line 676 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $266 = ((($0)) + 8|0); //@line 676 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    HEAP16[$266>>1] = $exp$0$i51; //@line 676 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    return; //@line 683 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   }
  }
  HEAP32[$0>>2] = 0; //@line 681 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  return; //@line 683 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 }
 else if ((label|0) == 53) {
  $272 = (($112) + 63)|0; //@line 549 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $273 = $272 & 63; //@line 549 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $274 = (_bitshift64Shl(1,0,($273|0))|0); //@line 549 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $275 = tempRet0; //@line 549 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  $277 = 0;$279 = 1;$283 = $120;$284 = $121;$i$1 = $205;
  while(1) {
   $276 = ($277>>>0)<($275>>>0); //@line 550 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $278 = ($279>>>0)<($274>>>0); //@line 550 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $280 = ($277|0)==($275|0); //@line 550 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $281 = $280 & $278; //@line 550 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $282 = $276 | $281; //@line 550 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   if (!($282)) {
    label = 55;
    break;
   }
   $285 = (___muldi3(($283|0),($284|0),10,0)|0); //@line 556 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $286 = tempRet0; //@line 556 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $287 = (___muldi3(($279|0),($277|0),10,0)|0); //@line 557 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $288 = tempRet0; //@line 557 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $289 = $285 & $118; //@line 562 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $290 = $286 & $119; //@line 562 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $291 = ($i$1>>>0)<($buf$1>>>0); //@line 564 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   if (!($291)) {
    label = 74;
    break;
   }
   $292 = (_bitshift64Lshr(($285|0),($286|0),($113|0))|0); //@line 561 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $293 = tempRet0; //@line 561 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $294 = $292&255; //@line 564 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $295 = (($buf$0) + ($i$1)|0); //@line 564 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $296 = (($294) + 48)<<24>>24; //@line 564 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   HEAP8[$295>>0] = $296; //@line 564 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $297 = (($i$1) + 1)|0; //@line 565 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $298 = ($297|0)==($$buf$1|0); //@line 568 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   if ($298) {
    label = 58;
    break;
   } else {
    $277 = $288;$279 = $287;$283 = $289;$284 = $290;$i$1 = $297;
   }
  }
  if ((label|0) == 55) {
   HEAP32[$0>>2] = 0; //@line 577 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   return; //@line 683 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  }
  else if ((label|0) == 58) {
   $299 = ($117>>>0)>($288>>>0); //@line 607 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $300 = ($116>>>0)>($287>>>0); //@line 607 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $301 = ($117|0)==($288|0); //@line 607 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $302 = $301 & $300; //@line 607 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $303 = $299 | $302; //@line 607 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   if (!($303)) {
    HEAP32[$0>>2] = 0; //@line 607 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    return; //@line 683 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   }
   $304 = (_i64Subtract(($116|0),($117|0),($287|0),($288|0))|0); //@line 621 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $305 = tempRet0; //@line 621 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $306 = ($305>>>0)>($288>>>0); //@line 621 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $307 = ($304>>>0)>($287>>>0); //@line 621 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $308 = ($305|0)==($288|0); //@line 621 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $309 = $308 & $307; //@line 621 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $310 = $306 | $309; //@line 621 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   if (!($310)) {
    HEAP32[$0>>2] = 0; //@line 621 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    return; //@line 683 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   }
   $311 = (_i64Subtract(($116|0),($117|0),($289|0),($290|0))|0); //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $312 = tempRet0; //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $313 = ($312>>>0)>($290>>>0); //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $314 = ($311>>>0)>($289>>>0); //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $315 = ($312|0)==($290|0); //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $316 = $315 & $314; //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $317 = $313 | $316; //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   if ($317) {
    $323 = (_bitshift64Shl(($289|0),($290|0),1)|0); //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $324 = tempRet0; //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $325 = (_i64Subtract(($116|0),($117|0),($323|0),($324|0))|0); //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $326 = tempRet0; //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $327 = (___muldi3(($279|0),($277|0),20,0)|0); //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $328 = tempRet0; //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $329 = ($326>>>0)<($328>>>0); //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $330 = ($325>>>0)<($327>>>0); //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $331 = ($326|0)==($328|0); //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $332 = $331 & $330; //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $333 = $329 | $332; //@line 644 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    if (!($333)) {
     HEAP32[$0>>2] = 1; //@line 645 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $334 = ((($0)) + 4|0); //@line 645 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     HEAP32[$334>>2] = $$buf$1; //@line 645 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $335 = ((($0)) + 8|0); //@line 645 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     HEAP16[$335>>1] = $133; //@line 645 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     return; //@line 683 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    }
   }
   $318 = ($290>>>0)>($288>>>0); //@line 665 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $319 = ($289>>>0)>($287>>>0); //@line 665 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $320 = ($290|0)==($288|0); //@line 665 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $321 = $320 & $319; //@line 665 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   $322 = $318 | $321; //@line 665 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   if ($322) {
    $336 = (_i64Subtract(($289|0),($290|0),($287|0),($288|0))|0); //@line 665 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $337 = tempRet0; //@line 665 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $338 = (_i64Subtract(($116|0),($117|0),($336|0),($337|0))|0); //@line 665 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $339 = tempRet0; //@line 665 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $340 = ($339>>>0)>($337>>>0); //@line 665 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $341 = ($338>>>0)>($336>>>0); //@line 665 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $342 = ($339|0)==($337|0); //@line 665 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $343 = $342 & $341; //@line 665 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    $344 = $340 | $343; //@line 665 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    if (!($344)) {
     $345 = (__ZN4core3num7flt2dec8round_up17hd6184f9bc0abdbe1E($buf$0,$buf$1,$$buf$1)|0); //@line 666 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $abi_cast$sroa$4$0$extract$shift$i = ($345&65535) >>> 8; //@line 666 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $abi_cast$sroa$4$0$extract$trunc$i = $abi_cast$sroa$4$0$extract$shift$i&255; //@line 666 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $346 = $345 & 1; //@line 666 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $347 = ($346<<16>>16)==(0); //@line 666 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     if ($347) {
      $exp$0$i = $133;$len$0$i = $$buf$1;
     } else {
      $348 = (($132) + 2)<<16>>16; //@line 670 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
      $349 = ($348<<16>>16)>($limit<<16>>16); //@line 671 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
      $350 = ($$buf$1>>>0)<($buf$1>>>0); //@line 671 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
      $or$cond$i = $349 & $350; //@line 671 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
      if ($or$cond$i) {
       $353 = (($buf$0) + ($$buf$1)|0); //@line 672 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
       $354 = (($$buf$1) + 1)|0; //@line 673 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
       HEAP8[$353>>0] = $abi_cast$sroa$4$0$extract$trunc$i; //@line 672 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
       $exp$0$i = $348;$len$0$i = $354;
      } else {
       $exp$0$i = $348;$len$0$i = $$buf$1;
      }
     }
     HEAP32[$0>>2] = 1; //@line 676 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $351 = ((($0)) + 4|0); //@line 676 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     HEAP32[$351>>2] = $len$0$i; //@line 676 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     $352 = ((($0)) + 8|0); //@line 676 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     HEAP16[$352>>1] = $exp$0$i; //@line 676 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
     return; //@line 683 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
    }
   }
   HEAP32[$0>>2] = 0; //@line 681 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   return; //@line 683 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  }
  else if ((label|0) == 74) {
   __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(11980,$i$1,$buf$1); //@line 564 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
   // unreachable; //@line 564 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  }
 }
 else if ((label|0) == 72) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(11940); //@line 510 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  // unreachable; //@line 510 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 }
 else if ((label|0) == 73) {
  __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(11964,$i$0101,$buf$1); //@line 513 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
  // unreachable; //@line 513 "/checkout/src/libcore/num/flt2dec/strategy/grisu.rs"
 }
}
function __ZN4core3str7pattern11StrSearcher3new17had32f170a3a66344E($0,$haystack$0,$haystack$1,$needle$0,$needle$1) {
 $0 = $0|0;
 $haystack$0 = $haystack$0|0;
 $haystack$1 = $haystack$1|0;
 $needle$0 = $needle$0|0;
 $needle$1 = $needle$1|0;
 var $$20$$i$i = 0, $$20$$i64$i = 0, $$20$i$i = 0, $$20$i62$i = 0, $$21$i$i = 0, $$21$i37$i = 0, $$neg$i$i = 0, $$neg$i53$i = 0, $$neg24$i$i = 0, $$neg24$i54$i = 0, $$neg25$i$i = 0, $$neg26$i$i = 0, $$neg26$i57$i = 0, $$not$not$i33$i = 0, $$not$not$i60$i = 0, $$right$0$$i$i = 0, $$right$0$$i66$i = 0, $$right$0$$v$i$i = 0, $$right$0$$v$i65$i = 0, $$right$0$i$i = 0;
 var $$right$0$i38$i = 0, $$sink$i = 0, $$sink12$i = 0, $$sink14$i = 0, $$sink2$i = 0, $$sink4$i = 0, $$sink6$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $_0$0$sroa$speculated$i = 0, $_0$0$sroa$speculated$i2 = 0, $_13$sroa$4$sroa$10$0$$sroa_idx = 0, $_13$sroa$4$sroa$3$0$$sroa_idx = 0, $_13$sroa$4$sroa$4$0$$sroa_idx = 0, $_13$sroa$4$sroa$5$0$$sroa_idx = 0, $_13$sroa$4$sroa$6$0$$sroa_idx = 0, $_13$sroa$4$sroa$7$0$$sroa_idx = 0, $_13$sroa$4$sroa$8$0$$sroa_idx = 0, $_13$sroa$4$sroa$9$0$$sroa_idx = 0, $_7$sroa$4$sroa$0$0$_7$sroa$4$0$$sroa_idx$sroa_idx16 = 0, $_7$sroa$4$sroa$4$0$_7$sroa$4$0$$sroa_idx$sroa_idx18 = 0, $left$0$i$i = 0, $left$0$i50$i = 0, $left$0$ph$ph$lcssa35$i$i = 0, $left$0$ph$ph$lcssa35$i27$i = 0, $left$0$ph$ph$lcssa35$i88$i = 0, $left$0$ph$ph48$i$i = 0;
 var $left$0$ph$ph48$i23$i = 0, $left$0$right$0$i$i = 0, $left$0$right$0$i67$i = 0, $left$1$i$i = 0, $left$1$i52$i = 0, $left$2$i$i = 0, $left$2$i73$i = 0, $offset$0$i$i = 0, $offset$0$i48$i = 0, $offset$036$i$i = 0, $offset$036$i30$i = 0, $offset$1$i$i = 0, $offset$1$i71$i = 0, $period$0$$i$i = 0, $period$0$$i63$i = 0, $period$0$i$i = 0, $period$0$i47$i = 0, $period$0$ph$lcssa34$i$i = 0, $period$0$ph$lcssa34$i28$i = 0, $period$0$ph$lcssa34$i89$i = 0;
 var $period$0$ph41$i$i = 0, $period$0$ph41$i25$i = 0, $period$1$i$i = 0, $period$1$i70$i = 0, $right$0$i$i = 0, $right$0$i49$i = 0, $right$037$i$i = 0, $right$037$i29$i = 0, $right$1$i$i = 0, $right$1$i72$i = 0, $self$sroa$0$02$i$i$i = 0, $self$sroa$0$02$i$i80$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($needle$1|0) {
 case 0:  {
  $1 = ((($0)) + 48|0); //@line 598 "/checkout/src/libcore/str/pattern.rs"
  HEAP32[$1>>2] = $haystack$0; //@line 598 "/checkout/src/libcore/str/pattern.rs"
  $2 = ((($0)) + 52|0); //@line 598 "/checkout/src/libcore/str/pattern.rs"
  HEAP32[$2>>2] = $haystack$1; //@line 598 "/checkout/src/libcore/str/pattern.rs"
  $3 = ((($0)) + 56|0); //@line 598 "/checkout/src/libcore/str/pattern.rs"
  HEAP32[$3>>2] = $needle$0; //@line 598 "/checkout/src/libcore/str/pattern.rs"
  $4 = ((($0)) + 60|0); //@line 598 "/checkout/src/libcore/str/pattern.rs"
  HEAP32[$4>>2] = 0; //@line 598 "/checkout/src/libcore/str/pattern.rs"
  HEAP32[$0>>2] = 0; //@line 598 "/checkout/src/libcore/str/pattern.rs"
  $_7$sroa$4$sroa$0$0$_7$sroa$4$0$$sroa_idx$sroa_idx16 = ((($0)) + 4|0); //@line 598 "/checkout/src/libcore/str/pattern.rs"
  HEAP32[$_7$sroa$4$sroa$0$0$_7$sroa$4$0$$sroa_idx$sroa_idx16>>2] = 0; //@line 598 "/checkout/src/libcore/str/pattern.rs"
  $_7$sroa$4$sroa$4$0$_7$sroa$4$0$$sroa_idx$sroa_idx18 = ((($0)) + 8|0); //@line 598 "/checkout/src/libcore/str/pattern.rs"
  HEAP32[$_7$sroa$4$sroa$4$0$_7$sroa$4$0$$sroa_idx$sroa_idx18>>2] = $haystack$1; //@line 598 "/checkout/src/libcore/str/pattern.rs"
  $5 = ((($0)) + 12|0); //@line 598 "/checkout/src/libcore/str/pattern.rs"
  HEAP8[$5>>0] = 1; //@line 598 "/checkout/src/libcore/str/pattern.rs"
  $6 = ((($0)) + 13|0); //@line 598 "/checkout/src/libcore/str/pattern.rs"
  HEAP8[$6>>0] = 1; //@line 598 "/checkout/src/libcore/str/pattern.rs"
  return; //@line 617 "/checkout/src/libcore/str/pattern.rs"
  break;
 }
 case 1:  {
  $left$0$ph$ph$lcssa35$i27$i = 0;$left$0$ph$ph$lcssa35$i88$i = 0;$period$0$ph$lcssa34$i28$i = 1;$period$0$ph$lcssa34$i89$i = 1;
  break;
 }
 default: {
  $132 = 1;$left$0$ph$ph48$i$i = 0;
  label = 3;
 }
 }
 L4: do {
  if ((label|0) == 3) {
   L5: while(1) {
    label = 0;
    $133 = $132;$period$0$ph41$i$i = 1;
    L7: while(1) {
     $8 = $133;$offset$036$i$i = 0;$right$037$i$i = $133;
     while(1) {
      $7 = (($needle$0) + ($8)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
      $9 = HEAP8[$7>>0]|0; //@line 1124 "/checkout/src/libcore/str/pattern.rs"
      $10 = (($offset$036$i$i) + ($left$0$ph$ph48$i$i))|0; //@line 1126 "/checkout/src/libcore/str/pattern.rs"
      $11 = ($10>>>0)<($needle$1>>>0); //@line 825 "/checkout/src/libcore/slice/mod.rs"
      if (!($11)) {
       label = 6;
       break L5;
      }
      $12 = (($needle$0) + ($10)|0); //@line 825 "/checkout/src/libcore/slice/mod.rs"
      $13 = HEAP8[$12>>0]|0; //@line 1126 "/checkout/src/libcore/str/pattern.rs"
      $14 = ($9&255)<($13&255); //@line 1127 "/checkout/src/libcore/str/pattern.rs"
      if ($14) {
       break;
      }
      $15 = ($9<<24>>24)==($13<<24>>24); //@line 1132 "/checkout/src/libcore/str/pattern.rs"
      if (!($15)) {
       break L7;
      }
      $20 = (($offset$036$i$i) + 1)|0; //@line 1134 "/checkout/src/libcore/str/pattern.rs"
      $21 = ($20|0)==($period$0$ph41$i$i|0); //@line 1134 "/checkout/src/libcore/str/pattern.rs"
      $$21$i$i = $21 ? 0 : $20; //@line 1134 "/checkout/src/libcore/str/pattern.rs"
      $22 = $21 ? $20 : 0; //@line 1134 "/checkout/src/libcore/str/pattern.rs"
      $$right$0$i$i = (($22) + ($right$037$i$i))|0; //@line 1134 "/checkout/src/libcore/str/pattern.rs"
      $23 = (($$right$0$i$i) + ($$21$i$i))|0; //@line 1124 "/checkout/src/libcore/str/pattern.rs"
      $24 = ($23>>>0)<($needle$1>>>0); //@line 792 "/checkout/src/libcore/slice/mod.rs"
      if ($24) {
       $8 = $23;$offset$036$i$i = $$21$i$i;$right$037$i$i = $$right$0$i$i;
      } else {
       $left$0$ph$ph$lcssa35$i$i = $left$0$ph$ph48$i$i;$period$0$ph$lcssa34$i$i = $period$0$ph41$i$i;
       break L5;
      }
     }
     $16 = (($right$037$i$i) + 1)|0; //@line 1129 "/checkout/src/libcore/str/pattern.rs"
     $17 = (($16) + ($offset$036$i$i))|0; //@line 1129 "/checkout/src/libcore/str/pattern.rs"
     $18 = (($17) - ($left$0$ph$ph48$i$i))|0; //@line 1131 "/checkout/src/libcore/str/pattern.rs"
     $19 = ($17>>>0)<($needle$1>>>0); //@line 792 "/checkout/src/libcore/slice/mod.rs"
     if ($19) {
      $133 = $17;$period$0$ph41$i$i = $18;
     } else {
      $left$0$ph$ph$lcssa35$i$i = $left$0$ph$ph48$i$i;$period$0$ph$lcssa34$i$i = $18;
      break L5;
     }
    }
    $25 = (($right$037$i$i) + 1)|0; //@line 1143 "/checkout/src/libcore/str/pattern.rs"
    $26 = ($25>>>0)<($needle$1>>>0); //@line 792 "/checkout/src/libcore/slice/mod.rs"
    if ($26) {
     $132 = $25;$left$0$ph$ph48$i$i = $right$037$i$i;
     label = 3;
    } else {
     $left$0$ph$ph$lcssa35$i$i = $right$037$i$i;$period$0$ph$lcssa34$i$i = 1;
     break;
    }
   }
   if ((label|0) == 6) {
    __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(12132,$10,$needle$1); //@line 825 "/checkout/src/libcore/slice/mod.rs"
    // unreachable; //@line 825 "/checkout/src/libcore/slice/mod.rs"
   }
   $134 = 1;$left$0$ph$ph48$i23$i = 0;
   L19: while(1) {
    $135 = $134;$period$0$ph41$i25$i = 1;
    L21: while(1) {
     $28 = $135;$offset$036$i30$i = 0;$right$037$i29$i = $135;
     while(1) {
      $27 = (($needle$0) + ($28)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
      $29 = HEAP8[$27>>0]|0; //@line 1124 "/checkout/src/libcore/str/pattern.rs"
      $30 = (($offset$036$i30$i) + ($left$0$ph$ph48$i23$i))|0; //@line 1126 "/checkout/src/libcore/str/pattern.rs"
      $31 = ($30>>>0)<($needle$1>>>0); //@line 825 "/checkout/src/libcore/slice/mod.rs"
      if (!($31)) {
       break L19;
      }
      $32 = (($needle$0) + ($30)|0); //@line 825 "/checkout/src/libcore/slice/mod.rs"
      $33 = HEAP8[$32>>0]|0; //@line 1126 "/checkout/src/libcore/str/pattern.rs"
      $$not$not$i33$i = ($29&255)>($33&255); //@line 1127 "/checkout/src/libcore/str/pattern.rs"
      if ($$not$not$i33$i) {
       break;
      }
      $34 = ($29<<24>>24)==($33<<24>>24); //@line 1132 "/checkout/src/libcore/str/pattern.rs"
      if (!($34)) {
       break L21;
      }
      $39 = (($offset$036$i30$i) + 1)|0; //@line 1134 "/checkout/src/libcore/str/pattern.rs"
      $40 = ($39|0)==($period$0$ph41$i25$i|0); //@line 1134 "/checkout/src/libcore/str/pattern.rs"
      $$21$i37$i = $40 ? 0 : $39; //@line 1134 "/checkout/src/libcore/str/pattern.rs"
      $41 = $40 ? $39 : 0; //@line 1134 "/checkout/src/libcore/str/pattern.rs"
      $$right$0$i38$i = (($41) + ($right$037$i29$i))|0; //@line 1134 "/checkout/src/libcore/str/pattern.rs"
      $42 = (($$right$0$i38$i) + ($$21$i37$i))|0; //@line 1124 "/checkout/src/libcore/str/pattern.rs"
      $43 = ($42>>>0)<($needle$1>>>0); //@line 792 "/checkout/src/libcore/slice/mod.rs"
      if ($43) {
       $28 = $42;$offset$036$i30$i = $$21$i37$i;$right$037$i29$i = $$right$0$i38$i;
      } else {
       $left$0$ph$ph$lcssa35$i27$i = $left$0$ph$ph48$i23$i;$left$0$ph$ph$lcssa35$i88$i = $left$0$ph$ph$lcssa35$i$i;$period$0$ph$lcssa34$i28$i = $period$0$ph41$i25$i;$period$0$ph$lcssa34$i89$i = $period$0$ph$lcssa34$i$i;
       break L4;
      }
     }
     $35 = (($right$037$i29$i) + 1)|0; //@line 1129 "/checkout/src/libcore/str/pattern.rs"
     $36 = (($35) + ($offset$036$i30$i))|0; //@line 1129 "/checkout/src/libcore/str/pattern.rs"
     $37 = (($36) - ($left$0$ph$ph48$i23$i))|0; //@line 1131 "/checkout/src/libcore/str/pattern.rs"
     $38 = ($36>>>0)<($needle$1>>>0); //@line 792 "/checkout/src/libcore/slice/mod.rs"
     if ($38) {
      $135 = $36;$period$0$ph41$i25$i = $37;
     } else {
      $left$0$ph$ph$lcssa35$i27$i = $left$0$ph$ph48$i23$i;$left$0$ph$ph$lcssa35$i88$i = $left$0$ph$ph$lcssa35$i$i;$period$0$ph$lcssa34$i28$i = $37;$period$0$ph$lcssa34$i89$i = $period$0$ph$lcssa34$i$i;
      break L4;
     }
    }
    $44 = (($right$037$i29$i) + 1)|0; //@line 1143 "/checkout/src/libcore/str/pattern.rs"
    $45 = ($44>>>0)<($needle$1>>>0); //@line 792 "/checkout/src/libcore/slice/mod.rs"
    if ($45) {
     $134 = $44;$left$0$ph$ph48$i23$i = $right$037$i29$i;
    } else {
     $left$0$ph$ph$lcssa35$i27$i = $right$037$i29$i;$left$0$ph$ph$lcssa35$i88$i = $left$0$ph$ph$lcssa35$i$i;$period$0$ph$lcssa34$i28$i = 1;$period$0$ph$lcssa34$i89$i = $period$0$ph$lcssa34$i$i;
     break L4;
    }
   }
   __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(12132,$30,$needle$1); //@line 825 "/checkout/src/libcore/slice/mod.rs"
   // unreachable; //@line 825 "/checkout/src/libcore/slice/mod.rs"
  }
 } while(0);
 $46 = ($left$0$ph$ph$lcssa35$i88$i>>>0)>($left$0$ph$ph$lcssa35$i27$i>>>0); //@line 872 "/checkout/src/libcore/str/pattern.rs"
 $$sink2$i = $46 ? $left$0$ph$ph$lcssa35$i88$i : $left$0$ph$ph$lcssa35$i27$i; //@line 872 "/checkout/src/libcore/str/pattern.rs"
 $$sink$i = $46 ? $period$0$ph$lcssa34$i89$i : $period$0$ph$lcssa34$i28$i; //@line 872 "/checkout/src/libcore/str/pattern.rs"
 $47 = ($$sink2$i>>>0)>($needle$1>>>0); //@line 875 "/checkout/src/libcore/slice/mod.rs"
 if ($47) {
  __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($$sink2$i,$needle$1); //@line 876 "/checkout/src/libcore/slice/mod.rs"
  // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
 }
 $48 = (($$sink$i) + ($$sink2$i))|0; //@line 887 "/checkout/src/libcore/str/pattern.rs"
 $49 = ($48>>>0)<($$sink$i>>>0); //@line 873 "/checkout/src/libcore/slice/mod.rs"
 if ($49) {
  __ZN4core5slice22slice_index_order_fail17h620f0e130a93079bE($$sink$i,$48); //@line 874 "/checkout/src/libcore/slice/mod.rs"
  // unreachable; //@line 874 "/checkout/src/libcore/slice/mod.rs"
 }
 $50 = ($48>>>0)>($needle$1>>>0); //@line 875 "/checkout/src/libcore/slice/mod.rs"
 if ($50) {
  __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($48,$needle$1); //@line 876 "/checkout/src/libcore/slice/mod.rs"
  // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
 }
 $51 = (($needle$0) + ($$sink$i)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
 $52 = ($51|0)==($needle$0|0); //@line 2492 "/checkout/src/libcore/slice/mod.rs"
 if ($52) {
  label = 30;
 } else {
  $53 = (_memcmp($needle$0,$51,$$sink2$i)|0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
  $54 = ($53|0)==(0); //@line 2497 "/checkout/src/libcore/slice/mod.rs"
  if ($54) {
   label = 30;
  } else {
   $107 = (($needle$1) - ($$sink2$i))|0; //@line 923 "/checkout/src/libcore/str/pattern.rs"
   $108 = ($107>>>0)>=($$sink2$i>>>0); //@line 850 "/checkout/src/libcore/cmp.rs"
   $109 = (($needle$0) + ($needle$1)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
   $117 = 0;$119 = 0;$self$sroa$0$02$i$i80$i = $needle$0;
   while(1) {
    $110 = ((($self$sroa$0$02$i$i80$i)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
    $111 = HEAP8[$self$sroa$0$02$i$i80$i>>0]|0; //@line 936 "/checkout/src/libcore/str/pattern.rs"
    $112 = $111 & 63; //@line 936 "/checkout/src/libcore/str/pattern.rs"
    $113 = $112&255; //@line 936 "/checkout/src/libcore/str/pattern.rs"
    $114 = (_bitshift64Shl(1,0,($113|0))|0); //@line 936 "/checkout/src/libcore/str/pattern.rs"
    $115 = tempRet0; //@line 936 "/checkout/src/libcore/str/pattern.rs"
    $116 = $114 | $117; //@line 936 "/checkout/src/libcore/str/pattern.rs"
    $118 = $115 | $119; //@line 936 "/checkout/src/libcore/str/pattern.rs"
    $120 = ($110|0)==($109|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
    if ($120) {
     break;
    } else {
     $117 = $116;$119 = $118;$self$sroa$0$02$i$i80$i = $110;
    }
   }
   $_0$0$sroa$speculated$i2 = $108 ? $107 : $$sink2$i; //@line 462 "/checkout/src/libcore/cmp.rs"
   $121 = (($_0$0$sroa$speculated$i2) + 1)|0; //@line 923 "/checkout/src/libcore/str/pattern.rs"
   $$sink12$i = $121;$$sink14$i = $$sink2$i;$$sink4$i = -1;$$sink6$i = -1;$128 = $116;$131 = $118;
  }
 }
 do {
  if ((label|0) == 30) {
   $$neg25$i$i = (($needle$1) + -1)|0;
   $left$0$i$i = 0;$offset$0$i$i = 0;$period$0$i$i = 1;$right$0$i$i = 1;
   while(1) {
    $55 = (($right$0$i$i) + ($offset$0$i$i))|0; //@line 1173 "/checkout/src/libcore/str/pattern.rs"
    $56 = ($55>>>0)<($needle$1>>>0); //@line 1173 "/checkout/src/libcore/str/pattern.rs"
    if (!($56)) {
     $left$1$i$i = $left$0$i$i;
     label = 40;
     break;
    }
    $$neg$i$i = $right$0$i$i ^ -1;
    $$neg24$i$i = (($needle$1) - ($offset$0$i$i))|0; //@line 1174 "/checkout/src/libcore/str/pattern.rs"
    $57 = (($$neg24$i$i) + ($$neg$i$i))|0; //@line 1174 "/checkout/src/libcore/str/pattern.rs"
    $58 = ($57>>>0)<($needle$1>>>0); //@line 825 "/checkout/src/libcore/slice/mod.rs"
    if (!($58)) {
     label = 33;
     break;
    }
    $59 = (($needle$0) + ($57)|0); //@line 825 "/checkout/src/libcore/slice/mod.rs"
    $60 = HEAP8[$59>>0]|0; //@line 1174 "/checkout/src/libcore/str/pattern.rs"
    $$neg26$i$i = (($$neg25$i$i) - ($offset$0$i$i))|0; //@line 1175 "/checkout/src/libcore/str/pattern.rs"
    $61 = (($$neg26$i$i) - ($left$0$i$i))|0; //@line 1175 "/checkout/src/libcore/str/pattern.rs"
    $62 = ($61>>>0)<($needle$1>>>0); //@line 825 "/checkout/src/libcore/slice/mod.rs"
    if (!($62)) {
     label = 35;
     break;
    }
    $63 = (($needle$0) + ($61)|0); //@line 825 "/checkout/src/libcore/slice/mod.rs"
    $64 = HEAP8[$63>>0]|0; //@line 1175 "/checkout/src/libcore/str/pattern.rs"
    $65 = ($60&255)<($64&255); //@line 1176 "/checkout/src/libcore/str/pattern.rs"
    if ($65) {
     $70 = (($offset$0$i$i) + 1)|0; //@line 1178 "/checkout/src/libcore/str/pattern.rs"
     $71 = (($70) + ($right$0$i$i))|0; //@line 1178 "/checkout/src/libcore/str/pattern.rs"
     $72 = (($71) - ($left$0$i$i))|0; //@line 1180 "/checkout/src/libcore/str/pattern.rs"
     $left$2$i$i = $left$0$i$i;$offset$1$i$i = 0;$period$1$i$i = $72;$right$1$i$i = $71;
    } else {
     $66 = ($60<<24>>24)==($64<<24>>24); //@line 1181 "/checkout/src/libcore/str/pattern.rs"
     $67 = (($offset$0$i$i) + 1)|0; //@line 1183 "/checkout/src/libcore/str/pattern.rs"
     $68 = ($67|0)==($period$0$i$i|0); //@line 1183 "/checkout/src/libcore/str/pattern.rs"
     $$20$i$i = $68 ? 0 : $67; //@line 1183 "/checkout/src/libcore/str/pattern.rs"
     $69 = $68 ? $67 : 0; //@line 1183 "/checkout/src/libcore/str/pattern.rs"
     $period$0$$i$i = $66 ? $period$0$i$i : 1; //@line 1181 "/checkout/src/libcore/str/pattern.rs"
     $$20$$i$i = $66 ? $$20$i$i : 0; //@line 1181 "/checkout/src/libcore/str/pattern.rs"
     $$right$0$$v$i$i = $66 ? $69 : 1; //@line 1181 "/checkout/src/libcore/str/pattern.rs"
     $$right$0$$i$i = (($$right$0$$v$i$i) + ($right$0$i$i))|0; //@line 1181 "/checkout/src/libcore/str/pattern.rs"
     $left$0$right$0$i$i = $66 ? $left$0$i$i : $right$0$i$i; //@line 1181 "/checkout/src/libcore/str/pattern.rs"
     $left$2$i$i = $left$0$right$0$i$i;$offset$1$i$i = $$20$$i$i;$period$1$i$i = $period$0$$i$i;$right$1$i$i = $$right$0$$i$i;
    }
    $73 = ($period$1$i$i|0)==($$sink$i|0); //@line 1196 "/checkout/src/libcore/str/pattern.rs"
    if ($73) {
     $left$1$i$i = $left$2$i$i;
     label = 40;
     break;
    } else {
     $left$0$i$i = $left$2$i$i;$offset$0$i$i = $offset$1$i$i;$period$0$i$i = $period$1$i$i;$right$0$i$i = $right$1$i$i;
    }
   }
   if ((label|0) == 33) {
    __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(12132,$57,$needle$1); //@line 825 "/checkout/src/libcore/slice/mod.rs"
    // unreachable; //@line 825 "/checkout/src/libcore/slice/mod.rs"
   }
   else if ((label|0) == 35) {
    __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(12132,$61,$needle$1); //@line 825 "/checkout/src/libcore/slice/mod.rs"
    // unreachable; //@line 825 "/checkout/src/libcore/slice/mod.rs"
   }
   else if ((label|0) == 40) {
    $left$0$i50$i = 0;$offset$0$i48$i = 0;$period$0$i47$i = 1;$right$0$i49$i = 1;
    while(1) {
     $74 = (($right$0$i49$i) + ($offset$0$i48$i))|0; //@line 1173 "/checkout/src/libcore/str/pattern.rs"
     $75 = ($74>>>0)<($needle$1>>>0); //@line 1173 "/checkout/src/libcore/str/pattern.rs"
     if (!($75)) {
      $left$1$i52$i = $left$0$i50$i;
      label = 50;
      break;
     }
     $$neg$i53$i = $right$0$i49$i ^ -1;
     $$neg24$i54$i = (($needle$1) - ($offset$0$i48$i))|0; //@line 1174 "/checkout/src/libcore/str/pattern.rs"
     $76 = (($$neg24$i54$i) + ($$neg$i53$i))|0; //@line 1174 "/checkout/src/libcore/str/pattern.rs"
     $77 = ($76>>>0)<($needle$1>>>0); //@line 825 "/checkout/src/libcore/slice/mod.rs"
     if (!($77)) {
      label = 43;
      break;
     }
     $78 = (($needle$0) + ($76)|0); //@line 825 "/checkout/src/libcore/slice/mod.rs"
     $79 = HEAP8[$78>>0]|0; //@line 1174 "/checkout/src/libcore/str/pattern.rs"
     $$neg26$i57$i = (($$neg25$i$i) - ($offset$0$i48$i))|0; //@line 1175 "/checkout/src/libcore/str/pattern.rs"
     $80 = (($$neg26$i57$i) - ($left$0$i50$i))|0; //@line 1175 "/checkout/src/libcore/str/pattern.rs"
     $81 = ($80>>>0)<($needle$1>>>0); //@line 825 "/checkout/src/libcore/slice/mod.rs"
     if (!($81)) {
      label = 45;
      break;
     }
     $82 = (($needle$0) + ($80)|0); //@line 825 "/checkout/src/libcore/slice/mod.rs"
     $83 = HEAP8[$82>>0]|0; //@line 1175 "/checkout/src/libcore/str/pattern.rs"
     $$not$not$i60$i = ($79&255)>($83&255); //@line 1176 "/checkout/src/libcore/str/pattern.rs"
     if ($$not$not$i60$i) {
      $88 = (($offset$0$i48$i) + 1)|0; //@line 1178 "/checkout/src/libcore/str/pattern.rs"
      $89 = (($88) + ($right$0$i49$i))|0; //@line 1178 "/checkout/src/libcore/str/pattern.rs"
      $90 = (($89) - ($left$0$i50$i))|0; //@line 1180 "/checkout/src/libcore/str/pattern.rs"
      $left$2$i73$i = $left$0$i50$i;$offset$1$i71$i = 0;$period$1$i70$i = $90;$right$1$i72$i = $89;
     } else {
      $84 = ($79<<24>>24)==($83<<24>>24); //@line 1181 "/checkout/src/libcore/str/pattern.rs"
      $85 = (($offset$0$i48$i) + 1)|0; //@line 1183 "/checkout/src/libcore/str/pattern.rs"
      $86 = ($85|0)==($period$0$i47$i|0); //@line 1183 "/checkout/src/libcore/str/pattern.rs"
      $$20$i62$i = $86 ? 0 : $85; //@line 1183 "/checkout/src/libcore/str/pattern.rs"
      $87 = $86 ? $85 : 0; //@line 1183 "/checkout/src/libcore/str/pattern.rs"
      $period$0$$i63$i = $84 ? $period$0$i47$i : 1; //@line 1181 "/checkout/src/libcore/str/pattern.rs"
      $$20$$i64$i = $84 ? $$20$i62$i : 0; //@line 1181 "/checkout/src/libcore/str/pattern.rs"
      $$right$0$$v$i65$i = $84 ? $87 : 1; //@line 1181 "/checkout/src/libcore/str/pattern.rs"
      $$right$0$$i66$i = (($$right$0$$v$i65$i) + ($right$0$i49$i))|0; //@line 1181 "/checkout/src/libcore/str/pattern.rs"
      $left$0$right$0$i67$i = $84 ? $left$0$i50$i : $right$0$i49$i; //@line 1181 "/checkout/src/libcore/str/pattern.rs"
      $left$2$i73$i = $left$0$right$0$i67$i;$offset$1$i71$i = $$20$$i64$i;$period$1$i70$i = $period$0$$i63$i;$right$1$i72$i = $$right$0$$i66$i;
     }
     $91 = ($period$1$i70$i|0)==($$sink$i|0); //@line 1196 "/checkout/src/libcore/str/pattern.rs"
     if ($91) {
      $left$1$i52$i = $left$2$i73$i;
      label = 50;
      break;
     } else {
      $left$0$i50$i = $left$2$i73$i;$offset$0$i48$i = $offset$1$i71$i;$period$0$i47$i = $period$1$i70$i;$right$0$i49$i = $right$1$i72$i;
     }
    }
    if ((label|0) == 43) {
     __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(12132,$76,$needle$1); //@line 825 "/checkout/src/libcore/slice/mod.rs"
     // unreachable; //@line 825 "/checkout/src/libcore/slice/mod.rs"
    }
    else if ((label|0) == 45) {
     __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(12132,$80,$needle$1); //@line 825 "/checkout/src/libcore/slice/mod.rs"
     // unreachable; //@line 825 "/checkout/src/libcore/slice/mod.rs"
    }
    else if ((label|0) == 50) {
     $92 = ($left$1$i52$i>>>0)>=($left$1$i$i>>>0); //@line 850 "/checkout/src/libcore/cmp.rs"
     $_0$0$sroa$speculated$i = $92 ? $left$1$i52$i : $left$1$i$i; //@line 462 "/checkout/src/libcore/cmp.rs"
     $93 = (($needle$1) - ($_0$0$sroa$speculated$i))|0; //@line 897 "/checkout/src/libcore/str/pattern.rs"
     $94 = ($$sink$i>>>0)>($needle$1>>>0); //@line 875 "/checkout/src/libcore/slice/mod.rs"
     if ($94) {
      __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($$sink$i,$needle$1); //@line 876 "/checkout/src/libcore/slice/mod.rs"
      // unreachable; //@line 876 "/checkout/src/libcore/slice/mod.rs"
     }
     $95 = ($$sink$i|0)==(0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
     if ($95) {
      $$sink12$i = 0;$$sink14$i = $93;$$sink4$i = $needle$1;$$sink6$i = 0;$128 = 0;$131 = 0;
      break;
     }
     $103 = 0;$105 = 0;$self$sroa$0$02$i$i$i = $needle$0;
     while(1) {
      $96 = ((($self$sroa$0$02$i$i$i)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
      $97 = HEAP8[$self$sroa$0$02$i$i$i>>0]|0; //@line 936 "/checkout/src/libcore/str/pattern.rs"
      $98 = $97 & 63; //@line 936 "/checkout/src/libcore/str/pattern.rs"
      $99 = $98&255; //@line 936 "/checkout/src/libcore/str/pattern.rs"
      $100 = (_bitshift64Shl(1,0,($99|0))|0); //@line 936 "/checkout/src/libcore/str/pattern.rs"
      $101 = tempRet0; //@line 936 "/checkout/src/libcore/str/pattern.rs"
      $102 = $100 | $103; //@line 936 "/checkout/src/libcore/str/pattern.rs"
      $104 = $101 | $105; //@line 936 "/checkout/src/libcore/str/pattern.rs"
      $106 = ($96|0)==($51|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
      if ($106) {
       $$sink12$i = $$sink$i;$$sink14$i = $93;$$sink4$i = $needle$1;$$sink6$i = 0;$128 = $102;$131 = $104;
       break;
      } else {
       $103 = $102;$105 = $104;$self$sroa$0$02$i$i$i = $96;
      }
     }
    }
   }
  }
 } while(0);
 $122 = ((($0)) + 48|0); //@line 609 "/checkout/src/libcore/str/pattern.rs"
 HEAP32[$122>>2] = $haystack$0; //@line 609 "/checkout/src/libcore/str/pattern.rs"
 $123 = ((($0)) + 52|0); //@line 609 "/checkout/src/libcore/str/pattern.rs"
 HEAP32[$123>>2] = $haystack$1; //@line 609 "/checkout/src/libcore/str/pattern.rs"
 $124 = ((($0)) + 56|0); //@line 609 "/checkout/src/libcore/str/pattern.rs"
 HEAP32[$124>>2] = $needle$0; //@line 609 "/checkout/src/libcore/str/pattern.rs"
 $125 = ((($0)) + 60|0); //@line 609 "/checkout/src/libcore/str/pattern.rs"
 HEAP32[$125>>2] = $needle$1; //@line 609 "/checkout/src/libcore/str/pattern.rs"
 HEAP32[$0>>2] = 1; //@line 609 "/checkout/src/libcore/str/pattern.rs"
 $_13$sroa$4$sroa$3$0$$sroa_idx = ((($0)) + 8|0); //@line 609 "/checkout/src/libcore/str/pattern.rs"
 $126 = $_13$sroa$4$sroa$3$0$$sroa_idx; //@line 609 "/checkout/src/libcore/str/pattern.rs"
 $127 = $126; //@line 609 "/checkout/src/libcore/str/pattern.rs"
 HEAP32[$127>>2] = $128; //@line 609 "/checkout/src/libcore/str/pattern.rs"
 $129 = (($126) + 4)|0; //@line 609 "/checkout/src/libcore/str/pattern.rs"
 $130 = $129; //@line 609 "/checkout/src/libcore/str/pattern.rs"
 HEAP32[$130>>2] = $131; //@line 609 "/checkout/src/libcore/str/pattern.rs"
 $_13$sroa$4$sroa$4$0$$sroa_idx = ((($0)) + 16|0); //@line 609 "/checkout/src/libcore/str/pattern.rs"
 HEAP32[$_13$sroa$4$sroa$4$0$$sroa_idx>>2] = $$sink2$i; //@line 609 "/checkout/src/libcore/str/pattern.rs"
 $_13$sroa$4$sroa$5$0$$sroa_idx = ((($0)) + 20|0); //@line 609 "/checkout/src/libcore/str/pattern.rs"
 HEAP32[$_13$sroa$4$sroa$5$0$$sroa_idx>>2] = $$sink14$i; //@line 609 "/checkout/src/libcore/str/pattern.rs"
 $_13$sroa$4$sroa$6$0$$sroa_idx = ((($0)) + 24|0); //@line 609 "/checkout/src/libcore/str/pattern.rs"
 HEAP32[$_13$sroa$4$sroa$6$0$$sroa_idx>>2] = $$sink12$i; //@line 609 "/checkout/src/libcore/str/pattern.rs"
 $_13$sroa$4$sroa$7$0$$sroa_idx = ((($0)) + 28|0); //@line 609 "/checkout/src/libcore/str/pattern.rs"
 HEAP32[$_13$sroa$4$sroa$7$0$$sroa_idx>>2] = 0; //@line 609 "/checkout/src/libcore/str/pattern.rs"
 $_13$sroa$4$sroa$8$0$$sroa_idx = ((($0)) + 32|0); //@line 609 "/checkout/src/libcore/str/pattern.rs"
 HEAP32[$_13$sroa$4$sroa$8$0$$sroa_idx>>2] = $haystack$1; //@line 609 "/checkout/src/libcore/str/pattern.rs"
 $_13$sroa$4$sroa$9$0$$sroa_idx = ((($0)) + 36|0); //@line 609 "/checkout/src/libcore/str/pattern.rs"
 HEAP32[$_13$sroa$4$sroa$9$0$$sroa_idx>>2] = $$sink6$i; //@line 609 "/checkout/src/libcore/str/pattern.rs"
 $_13$sroa$4$sroa$10$0$$sroa_idx = ((($0)) + 40|0); //@line 609 "/checkout/src/libcore/str/pattern.rs"
 HEAP32[$_13$sroa$4$sroa$10$0$$sroa_idx>>2] = $$sink4$i; //@line 609 "/checkout/src/libcore/str/pattern.rs"
 return; //@line 617 "/checkout/src/libcore/str/pattern.rs"
}
function __ZN4core3num6bignum8Big32x403add17h4df8566de1991267E($self,$other) {
 $self = $self|0;
 $other = $other|0;
 var $$$i = 0, $$7$i = 0, $$arith = 0, $$arith2 = 0, $$idx = 0, $$overflow = 0, $$overflow3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$sroa$speculated$i = 0, $_0$0$sroa$speculated$i$i = 0, $carry$0$off015 = 0, $sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self>>2]|0; //@line 204 "/checkout/src/libcore/num/bignum.rs"
 $1 = HEAP32[$other>>2]|0; //@line 204 "/checkout/src/libcore/num/bignum.rs"
 $2 = ($1>>>0)>=($0>>>0); //@line 850 "/checkout/src/libcore/cmp.rs"
 $_0$0$sroa$speculated$i = $2 ? $1 : $0; //@line 462 "/checkout/src/libcore/cmp.rs"
 $3 = ($_0$0$sroa$speculated$i>>>0)>(40); //@line 887 "/checkout/src/libcore/slice/mod.rs"
 if ($3) {
  __ZN4core5slice20slice_index_len_fail17h440967be6f416601E($_0$0$sroa$speculated$i,40); //@line 888 "/checkout/src/libcore/slice/mod.rs"
  // unreachable; //@line 888 "/checkout/src/libcore/slice/mod.rs"
 }
 $4 = ((($self)) + 4|0); //@line 617 "/checkout/src/libcore/slice/mod.rs"
 $5 = (((($self)) + 4|0) + ($_0$0$sroa$speculated$i<<2)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
 $6 = $4;
 $7 = $5;
 $8 = (($7) - ($6))|0; //@line 664 "/checkout/src/libcore/num/mod.rs"
 $9 = (($8|0) / 4)&-1; //@line 700 "/checkout/src/libcore/ptr.rs"
 $$idx = $_0$0$sroa$speculated$i << 2; //@line 664 "/checkout/src/libcore/num/mod.rs"
 $10 = (($$idx|0) / 4)&-1; //@line 700 "/checkout/src/libcore/ptr.rs"
 $11 = ($9>>>0)<=($10>>>0); //@line 848 "/checkout/src/libcore/cmp.rs"
 $_0$0$sroa$speculated$i$i = $11 ? $9 : $10; //@line 478 "/checkout/src/libcore/cmp.rs"
 $12 = ($_0$0$sroa$speculated$i$i|0)==(0); //@line 1093 "/checkout/src/libcore/iter/mod.rs"
 if ($12) {
  $sz$0 = $_0$0$sroa$speculated$i;
  HEAP32[$self>>2] = $sz$0; //@line 215 "/checkout/src/libcore/num/bignum.rs"
  return ($self|0); //@line 217 "/checkout/src/libcore/num/bignum.rs"
 } else {
  $14 = 0;$carry$0$off015 = 0;
 }
 while(1) {
  $13 = (($14) + 1)|0; //@line 1095 "/checkout/src/libcore/iter/mod.rs"
  $15 = (((($self)) + 4|0) + ($14<<2)|0); //@line 1261 "/checkout/src/libcore/ptr.rs"
  $16 = (((($other)) + 4|0) + ($14<<2)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $17 = HEAP32[$15>>2]|0; //@line 207 "/checkout/src/libcore/num/bignum.rs"
  $18 = HEAP32[$16>>2]|0; //@line 207 "/checkout/src/libcore/num/bignum.rs"
  $$arith2 = (($17) + ($18))|0; //@line 62 "/checkout/src/libcore/num/bignum.rs"
  $$overflow3 = ($$arith2>>>0)<($17>>>0); //@line 62 "/checkout/src/libcore/num/bignum.rs"
  $$$i = $carry$0$off015&1; //@line 64 "/checkout/src/libcore/num/bignum.rs"
  $$arith = (($$arith2) + ($$$i))|0; //@line 64 "/checkout/src/libcore/num/bignum.rs"
  $$overflow = ($$arith>>>0)<($$arith2>>>0); //@line 64 "/checkout/src/libcore/num/bignum.rs"
  $$7$i = $$overflow3 | $$overflow; //@line 66 "/checkout/src/libcore/num/bignum.rs"
  HEAP32[$15>>2] = $$arith; //@line 208 "/checkout/src/libcore/num/bignum.rs"
  $19 = ($13>>>0)<($_0$0$sroa$speculated$i$i>>>0); //@line 1093 "/checkout/src/libcore/iter/mod.rs"
  if ($19) {
   $14 = $13;$carry$0$off015 = $$7$i;
  } else {
   break;
  }
 }
 if (!($$7$i)) {
  $sz$0 = $_0$0$sroa$speculated$i;
  HEAP32[$self>>2] = $sz$0; //@line 215 "/checkout/src/libcore/num/bignum.rs"
  return ($self|0); //@line 217 "/checkout/src/libcore/num/bignum.rs"
 }
 $20 = ($_0$0$sroa$speculated$i>>>0)<(40); //@line 212 "/checkout/src/libcore/num/bignum.rs"
 if (!($20)) {
  __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(12164,$_0$0$sroa$speculated$i,40); //@line 212 "/checkout/src/libcore/num/bignum.rs"
  // unreachable; //@line 212 "/checkout/src/libcore/num/bignum.rs"
 }
 HEAP32[$5>>2] = 1; //@line 212 "/checkout/src/libcore/num/bignum.rs"
 $21 = (($_0$0$sroa$speculated$i) + 1)|0; //@line 213 "/checkout/src/libcore/num/bignum.rs"
 $sz$0 = $21;
 HEAP32[$self>>2] = $sz$0; //@line 215 "/checkout/src/libcore/num/bignum.rs"
 return ($self|0); //@line 217 "/checkout/src/libcore/num/bignum.rs"
}
function __ZN4core3num6bignum8Big32x408mul_pow217h07f349800f91ebf3E($self,$bits) {
 $self = $self|0;
 $bits = $bits|0;
 var $$in = 0, $$in65 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iter1$sroa$0$064 = 0, $sz$0 = 0, $sz$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $bits >>> 5; //@line 279 "/checkout/src/libcore/num/bignum.rs"
 $1 = $bits & 31; //@line 280 "/checkout/src/libcore/num/bignum.rs"
 $2 = ($bits>>>0)<(1280); //@line 282 "/checkout/src/libcore/num/bignum.rs"
 if (!($2)) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(12220); //@line 282 "/checkout/src/libcore/num/bignum.rs"
  // unreachable; //@line 282 "/checkout/src/libcore/num/bignum.rs"
 }
 $3 = HEAP32[$self>>2]|0; //@line 287 "/checkout/src/libcore/num/bignum.rs"
 $4 = ($3|0)==(0); //@line 846 "/checkout/src/libcore/cmp.rs"
 L4: do {
  if (!($4)) {
   $$in65 = $3;
   while(1) {
    $6 = (($$in65) + -1)|0; //@line 192 "/checkout/src/libcore/ops/arith.rs"
    $7 = ($6>>>0)<(40); //@line 288 "/checkout/src/libcore/num/bignum.rs"
    if (!($7)) {
     label = 24;
     break;
    }
    $8 = (($6) + ($0))|0; //@line 288 "/checkout/src/libcore/num/bignum.rs"
    $9 = ($8>>>0)<(40); //@line 831 "/checkout/src/libcore/slice/mod.rs"
    if (!($9)) {
     label = 7;
     break;
    }
    $10 = (((($self)) + 4|0) + ($6<<2)|0); //@line 288 "/checkout/src/libcore/num/bignum.rs"
    $11 = HEAP32[$10>>2]|0; //@line 288 "/checkout/src/libcore/num/bignum.rs"
    $12 = (((($self)) + 4|0) + ($8<<2)|0); //@line 831 "/checkout/src/libcore/slice/mod.rs"
    HEAP32[$12>>2] = $11; //@line 288 "/checkout/src/libcore/num/bignum.rs"
    $13 = ($6|0)==(0); //@line 846 "/checkout/src/libcore/cmp.rs"
    if ($13) {
     break L4;
    } else {
     $$in65 = $6;
    }
   }
   if ((label|0) == 7) {
    __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(12244,$8,40); //@line 831 "/checkout/src/libcore/slice/mod.rs"
    // unreachable; //@line 831 "/checkout/src/libcore/slice/mod.rs"
   }
   else if ((label|0) == 24) {
    __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(12276,$6,40); //@line 288 "/checkout/src/libcore/num/bignum.rs"
    // unreachable; //@line 288 "/checkout/src/libcore/num/bignum.rs"
   }
  }
 } while(0);
 $5 = ($0|0)==(0); //@line 846 "/checkout/src/libcore/cmp.rs"
 L13: do {
  if (!($5)) {
   $iter1$sroa$0$064 = 0;
   while(1) {
    $17 = (($iter1$sroa$0$064) + 1)|0;
    $18 = ($iter1$sroa$0$064>>>0)<(40); //@line 291 "/checkout/src/libcore/num/bignum.rs"
    if (!($18)) {
     break;
    }
    $19 = (((($self)) + 4|0) + ($iter1$sroa$0$064<<2)|0); //@line 291 "/checkout/src/libcore/num/bignum.rs"
    HEAP32[$19>>2] = 0; //@line 291 "/checkout/src/libcore/num/bignum.rs"
    $20 = ($17>>>0)<($0>>>0); //@line 846 "/checkout/src/libcore/cmp.rs"
    if ($20) {
     $iter1$sroa$0$064 = $17;
    } else {
     break L13;
    }
   }
   __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(12292,$iter1$sroa$0$064,40); //@line 291 "/checkout/src/libcore/num/bignum.rs"
   // unreachable; //@line 291 "/checkout/src/libcore/num/bignum.rs"
  }
 } while(0);
 $14 = HEAP32[$self>>2]|0; //@line 295 "/checkout/src/libcore/num/bignum.rs"
 $15 = (($14) + ($0))|0; //@line 295 "/checkout/src/libcore/num/bignum.rs"
 $16 = ($1|0)==(0); //@line 296 "/checkout/src/libcore/num/bignum.rs"
 if ($16) {
  $sz$1 = $15;
  HEAP32[$self>>2] = $sz$1; //@line 311 "/checkout/src/libcore/num/bignum.rs"
  return ($self|0); //@line 313 "/checkout/src/libcore/num/bignum.rs"
 }
 $21 = (($15) + -1)|0; //@line 298 "/checkout/src/libcore/num/bignum.rs"
 $22 = ($21>>>0)<(40); //@line 825 "/checkout/src/libcore/slice/mod.rs"
 if (!($22)) {
  __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(12260,$21,40); //@line 825 "/checkout/src/libcore/slice/mod.rs"
  // unreachable; //@line 825 "/checkout/src/libcore/slice/mod.rs"
 }
 $23 = (((($self)) + 4|0) + ($21<<2)|0); //@line 825 "/checkout/src/libcore/slice/mod.rs"
 $24 = HEAP32[$23>>2]|0; //@line 298 "/checkout/src/libcore/num/bignum.rs"
 $25 = (0 - ($bits))|0; //@line 298 "/checkout/src/libcore/num/bignum.rs"
 $26 = $25 & 31; //@line 298 "/checkout/src/libcore/num/bignum.rs"
 $27 = $24 >>> $26; //@line 298 "/checkout/src/libcore/num/bignum.rs"
 $28 = ($27|0)==(0); //@line 299 "/checkout/src/libcore/num/bignum.rs"
 do {
  if ($28) {
   $sz$0 = $15;
  } else {
   $29 = ($15>>>0)<(40); //@line 300 "/checkout/src/libcore/num/bignum.rs"
   if ($29) {
    $30 = (((($self)) + 4|0) + ($15<<2)|0); //@line 300 "/checkout/src/libcore/num/bignum.rs"
    HEAP32[$30>>2] = $27; //@line 300 "/checkout/src/libcore/num/bignum.rs"
    $31 = (($15) + 1)|0; //@line 301 "/checkout/src/libcore/num/bignum.rs"
    $sz$0 = $31;
    break;
   } else {
    __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(12308,$15,40); //@line 300 "/checkout/src/libcore/num/bignum.rs"
    // unreachable; //@line 300 "/checkout/src/libcore/num/bignum.rs"
   }
  }
 } while(0);
 $32 = (($0) + 1)|0; //@line 303 "/checkout/src/libcore/num/bignum.rs"
 $33 = ($32>>>0)<($15>>>0); //@line 846 "/checkout/src/libcore/cmp.rs"
 L31: do {
  if ($33) {
   $$in = $15;$43 = $24;
   while(1) {
    $34 = (($$in) + -1)|0; //@line 192 "/checkout/src/libcore/ops/arith.rs"
    $35 = ($34>>>0)<(40); //@line 304 "/checkout/src/libcore/num/bignum.rs"
    if (!($35)) {
     label = 27;
     break;
    }
    $36 = (($$in) + -2)|0; //@line 305 "/checkout/src/libcore/num/bignum.rs"
    $37 = ($36>>>0)<(40); //@line 825 "/checkout/src/libcore/slice/mod.rs"
    if (!($37)) {
     label = 20;
     break;
    }
    $38 = (((($self)) + 4|0) + ($34<<2)|0); //@line 304 "/checkout/src/libcore/num/bignum.rs"
    $39 = (((($self)) + 4|0) + ($36<<2)|0); //@line 825 "/checkout/src/libcore/slice/mod.rs"
    $40 = HEAP32[$39>>2]|0; //@line 305 "/checkout/src/libcore/num/bignum.rs"
    $41 = $40 >>> $26; //@line 305 "/checkout/src/libcore/num/bignum.rs"
    $42 = $43 << $1; //@line 304 "/checkout/src/libcore/num/bignum.rs"
    $44 = $41 | $42; //@line 304 "/checkout/src/libcore/num/bignum.rs"
    HEAP32[$38>>2] = $44; //@line 304 "/checkout/src/libcore/num/bignum.rs"
    $45 = ($32>>>0)<($34>>>0); //@line 846 "/checkout/src/libcore/cmp.rs"
    if ($45) {
     $$in = $34;$43 = $40;
    } else {
     break L31;
    }
   }
   if ((label|0) == 20) {
    __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(12260,$36,40); //@line 825 "/checkout/src/libcore/slice/mod.rs"
    // unreachable; //@line 825 "/checkout/src/libcore/slice/mod.rs"
   }
   else if ((label|0) == 27) {
    __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(12324,$34,40); //@line 304 "/checkout/src/libcore/num/bignum.rs"
    // unreachable; //@line 304 "/checkout/src/libcore/num/bignum.rs"
   }
  }
 } while(0);
 $46 = (((($self)) + 4|0) + ($0<<2)|0); //@line 307 "/checkout/src/libcore/num/bignum.rs"
 $47 = HEAP32[$46>>2]|0; //@line 307 "/checkout/src/libcore/num/bignum.rs"
 $48 = $47 << $1; //@line 307 "/checkout/src/libcore/num/bignum.rs"
 HEAP32[$46>>2] = $48; //@line 307 "/checkout/src/libcore/num/bignum.rs"
 $sz$1 = $sz$0;
 HEAP32[$self>>2] = $sz$1; //@line 311 "/checkout/src/libcore/num/bignum.rs"
 return ($self|0); //@line 313 "/checkout/src/libcore/num/bignum.rs"
}
function __ZN4core3num6bignum8Big32x4010mul_digits9mul_inner17h97a87e8abc2f1b95E_llvm_AE20E124($ret,$aa$0,$aa$1,$bb$0,$bb$1) {
 $ret = $ret|0;
 $aa$0 = $aa$0|0;
 $aa$1 = $aa$1|0;
 $bb$0 = $bb$0|0;
 $bb$1 = $bb$1|0;
 var $$in = 0, $$retsz$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $carry$046 = 0, $iter$sroa$0$0 = 0, $iter$sroa$0$0$ph = 0, $iter$sroa$6$0 = 0, $iter$sroa$6$0$ph = 0, $iter1$sroa$0$0$copyload$pn = 0, $retsz$0$ph = 0, $sz$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($aa$0) + ($aa$1<<2)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
 $1 = (($bb$0) + ($bb$1<<2)|0);
 $2 = (($bb$1) + 1)|0;
 $3 = ($bb$1|0)==(0);
 $iter$sroa$0$0$ph = $aa$0;$iter$sroa$6$0$ph = 0;$retsz$0$ph = 0;
 L1: while(1) {
  $iter$sroa$0$0 = $iter$sroa$0$0$ph;$iter$sroa$6$0 = $iter$sroa$6$0$ph;
  while(1) {
   $4 = ($iter$sroa$0$0|0)==($0|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
   $5 = ((($iter$sroa$0$0)) + 4|0); //@line 623 "/checkout/src/libcore/ptr.rs"
   $6 = (($iter$sroa$6$0) + 1)|0; //@line 1608 "/checkout/src/libcore/iter/mod.rs"
   if ($4) {
    label = 4;
    break L1;
   }
   $7 = HEAP32[$iter$sroa$0$0>>2]|0; //@line 352 "/checkout/src/libcore/num/bignum.rs"
   $8 = ($7|0)==(0); //@line 353 "/checkout/src/libcore/num/bignum.rs"
   if ($8) {
    $iter$sroa$0$0 = $5;$iter$sroa$6$0 = $6;
   } else {
    break;
   }
  }
  if ($3) {
   $sz$0 = 0;
  } else {
   $$in = 0;$carry$046 = 0;$iter1$sroa$0$0$copyload$pn = $bb$0;
   while(1) {
    $11 = ((($iter1$sroa$0$0$copyload$pn)) + 4|0); //@line 623 "/checkout/src/libcore/ptr.rs"
    $12 = (($$in) + ($iter$sroa$6$0))|0; //@line 357 "/checkout/src/libcore/num/bignum.rs"
    $13 = ($12>>>0)<(40); //@line 825 "/checkout/src/libcore/slice/mod.rs"
    if (!($13)) {
     label = 10;
     break L1;
    }
    $14 = (($$in) + 1)|0; //@line 1608 "/checkout/src/libcore/iter/mod.rs"
    $15 = HEAP32[$iter1$sroa$0$0$copyload$pn>>2]|0; //@line 356 "/checkout/src/libcore/num/bignum.rs"
    $16 = (($ret) + ($12<<2)|0); //@line 825 "/checkout/src/libcore/slice/mod.rs"
    $17 = HEAP32[$16>>2]|0; //@line 357 "/checkout/src/libcore/num/bignum.rs"
    $18 = (___muldi3(($15|0),0,($7|0),0)|0); //@line 79 "/checkout/src/libcore/num/bignum.rs"
    $19 = tempRet0; //@line 79 "/checkout/src/libcore/num/bignum.rs"
    $20 = (_i64Add(($17|0),0,($carry$046|0),0)|0); //@line 79 "/checkout/src/libcore/num/bignum.rs"
    $21 = tempRet0; //@line 79 "/checkout/src/libcore/num/bignum.rs"
    $22 = (_i64Add(($20|0),($21|0),($18|0),($19|0))|0); //@line 79 "/checkout/src/libcore/num/bignum.rs"
    $10 = tempRet0; //@line 79 "/checkout/src/libcore/num/bignum.rs"
    HEAP32[$16>>2] = $22; //@line 358 "/checkout/src/libcore/num/bignum.rs"
    $23 = ($11|0)==($1|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
    if ($23) {
     break;
    } else {
     $$in = $14;$carry$046 = $10;$iter1$sroa$0$0$copyload$pn = $11;
    }
   }
   $9 = ($10|0)==(0); //@line 361 "/checkout/src/libcore/num/bignum.rs"
   if ($9) {
    $sz$0 = $bb$1;
   } else {
    $24 = (($iter$sroa$6$0) + ($bb$1))|0; //@line 362 "/checkout/src/libcore/num/bignum.rs"
    $25 = ($24>>>0)<(40); //@line 831 "/checkout/src/libcore/slice/mod.rs"
    if (!($25)) {
     label = 13;
     break;
    }
    $26 = (($ret) + ($24<<2)|0); //@line 831 "/checkout/src/libcore/slice/mod.rs"
    HEAP32[$26>>2] = $10; //@line 362 "/checkout/src/libcore/num/bignum.rs"
    $sz$0 = $2;
   }
  }
  $27 = (($sz$0) + ($iter$sroa$6$0))|0; //@line 365 "/checkout/src/libcore/num/bignum.rs"
  $28 = ($retsz$0$ph>>>0)<($27>>>0); //@line 365 "/checkout/src/libcore/num/bignum.rs"
  $$retsz$0 = $28 ? $27 : $retsz$0$ph; //@line 365 "/checkout/src/libcore/num/bignum.rs"
  $iter$sroa$0$0$ph = $5;$iter$sroa$6$0$ph = $6;$retsz$0$ph = $$retsz$0;
 }
 if ((label|0) == 4) {
  return ($retsz$0$ph|0); //@line 370 "/checkout/src/libcore/num/bignum.rs"
 }
 else if ((label|0) == 10) {
  __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(12260,$12,40); //@line 825 "/checkout/src/libcore/slice/mod.rs"
  // unreachable; //@line 825 "/checkout/src/libcore/slice/mod.rs"
 }
 else if ((label|0) == 13) {
  __ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE(12244,$24,40); //@line 831 "/checkout/src/libcore/slice/mod.rs"
  // unreachable; //@line 831 "/checkout/src/libcore/slice/mod.rs"
 }
 return (0)|0;
}
function __ZN74__LT_core__char__EscapeDebug_u20_as_u20_core__iter__iterator__Iterator_GT_4next17h7b8a7edf9fa3076bE($self) {
 $self = $self|0;
 var $$sink1$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$i = 0, $trunc$i = 0;
 var $trunc$i$clear = 0, $trunc$i$i = 0, $trunc$i$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self>>2]|0; //@line 686 "/checkout/src/libcore/char.rs"
 $trunc$i = $0&255; //@line 686 "/checkout/src/libcore/char.rs"
 $trunc$i$clear = $trunc$i & 3; //@line 686 "/checkout/src/libcore/char.rs"
 L1: do {
  switch ($trunc$i$clear<<24>>24) {
  case 0:  {
   $_0$0$i = 1114112;
   break;
  }
  case 1:  {
   $1 = ((($self)) + 4|0); //@line 690 "/checkout/src/libcore/char.rs"
   $2 = HEAP32[$1>>2]|0; //@line 690 "/checkout/src/libcore/char.rs"
   HEAP32[$self>>2] = 0; //@line 691 "/checkout/src/libcore/char.rs"
   $_0$0$i = $2;
   break;
  }
  case 2:  {
   HEAP32[$self>>2] = 1; //@line 687 "/checkout/src/libcore/char.rs"
   $_0$0$i = 92;
   break;
  }
  case 3:  {
   $3 = ((($self)) + 12|0); //@line 576 "/checkout/src/libcore/char.rs"
   $trunc$i$i = HEAP8[$3>>0]|0; //@line 576 "/checkout/src/libcore/char.rs"
   $trunc$i$i$clear = $trunc$i$i & 7; //@line 576 "/checkout/src/libcore/char.rs"
   switch ($trunc$i$i$clear<<24>>24) {
   case 0:  {
    $_0$0$i = 1114112;
    break L1;
    break;
   }
   case 1:  {
    HEAP8[$3>>0] = 0; //@line 599 "/checkout/src/libcore/char.rs"
    $_0$0$i = 125;
    break L1;
    break;
   }
   case 2:  {
    $4 = ((($self)) + 4|0); //@line 695 "/checkout/src/libcore/char.rs"
    $5 = HEAP32[$4>>2]|0; //@line 589 "/checkout/src/libcore/char.rs"
    $6 = ((($self)) + 8|0); //@line 589 "/checkout/src/libcore/char.rs"
    $7 = HEAP32[$6>>2]|0; //@line 589 "/checkout/src/libcore/char.rs"
    $8 = $7 << 2; //@line 589 "/checkout/src/libcore/char.rs"
    $9 = $8 & 28; //@line 589 "/checkout/src/libcore/char.rs"
    $10 = $5 >>> $9; //@line 589 "/checkout/src/libcore/char.rs"
    $11 = $10 & 15; //@line 589 "/checkout/src/libcore/char.rs"
    $12 = $11&255; //@line 355 "/checkout/src/libcore/char.rs"
    $13 = ($12&255)<(10); //@line 356 "/checkout/src/libcore/char.rs"
    $$sink1$i$i = $13 ? 48 : 87; //@line 356 "/checkout/src/libcore/char.rs"
    $14 = (($$sink1$i$i) + ($11))|0;
    $15 = ($7|0)==(0); //@line 591 "/checkout/src/libcore/char.rs"
    if ($15) {
     HEAP8[$3>>0] = 1; //@line 592 "/checkout/src/libcore/char.rs"
     $_0$0$i = $14;
     break L1;
    } else {
     $16 = (($7) + -1)|0; //@line 594 "/checkout/src/libcore/char.rs"
     HEAP32[$6>>2] = $16; //@line 594 "/checkout/src/libcore/char.rs"
     $_0$0$i = $14;
     break L1;
    }
    break;
   }
   case 3:  {
    HEAP8[$3>>0] = 2; //@line 585 "/checkout/src/libcore/char.rs"
    $_0$0$i = 123;
    break L1;
    break;
   }
   case 4:  {
    HEAP8[$3>>0] = 3; //@line 581 "/checkout/src/libcore/char.rs"
    $_0$0$i = 117;
    break L1;
    break;
   }
   case 5:  {
    HEAP8[$3>>0] = 4; //@line 577 "/checkout/src/libcore/char.rs"
    $_0$0$i = 92;
    break L1;
    break;
   }
   default: {
    // unreachable; //@line 604 "/checkout/src/libcore/char.rs"
   }
   }
   break;
  }
  default: {
   // unreachable; //@line 697 "/checkout/src/libcore/char.rs"
  }
  }
 } while(0);
 return ($_0$0$i|0); //@line 786 "/checkout/src/libcore/char.rs"
}
function __ZN74__LT_core__char__EscapeDebug_u20_as_u20_core__iter__iterator__Iterator_GT_9size_hint17h36a47ff5f05b1413E($0,$self) {
 $0 = $0|0;
 $self = $self|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $_0$0$i$i = 0, $_3$0$i$i$i = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$4$0$$sroa_idx2$i = 0, $trunc$i$i = 0, $trunc$i$i$clear = 0, $trunc$i$i$i = 0, $trunc$i$i$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$self>>2]|0; //@line 751 "/checkout/src/libcore/char.rs"
 $trunc$i$i = $1&255; //@line 751 "/checkout/src/libcore/char.rs"
 $trunc$i$i$clear = $trunc$i$i & 3; //@line 751 "/checkout/src/libcore/char.rs"
 switch ($trunc$i$i$clear<<24>>24) {
 case 0:  {
  $_0$0$i$i = 0;
  break;
 }
 case 1:  {
  $_0$0$i$i = 1;
  break;
 }
 case 2:  {
  $_0$0$i$i = 2;
  break;
 }
 case 3:  {
  $2 = ((($self)) + 8|0); //@line 635 "/checkout/src/libcore/char.rs"
  $3 = HEAP32[$2>>2]|0; //@line 635 "/checkout/src/libcore/char.rs"
  $4 = ((($self)) + 12|0); //@line 636 "/checkout/src/libcore/char.rs"
  $trunc$i$i$i = HEAP8[$4>>0]|0; //@line 636 "/checkout/src/libcore/char.rs"
  $trunc$i$i$i$clear = $trunc$i$i$i & 7; //@line 636 "/checkout/src/libcore/char.rs"
  switch ($trunc$i$i$i$clear<<24>>24) {
  case 0:  {
   $_3$0$i$i$i = 0;
   break;
  }
  case 1:  {
   $_3$0$i$i$i = 1;
   break;
  }
  case 2:  {
   $_3$0$i$i$i = 2;
   break;
  }
  case 3:  {
   $_3$0$i$i$i = 3;
   break;
  }
  case 4:  {
   $_3$0$i$i$i = 4;
   break;
  }
  case 5:  {
   $_3$0$i$i$i = 5;
   break;
  }
  default: {
   // unreachable; //@line 643 "/checkout/src/libcore/char.rs"
  }
  }
  $5 = (($_3$0$i$i$i) + ($3))|0; //@line 635 "/checkout/src/libcore/char.rs"
  $_0$0$i$i = $5;
  break;
 }
 default: {
  // unreachable; //@line 756 "/checkout/src/libcore/char.rs"
 }
 }
 HEAP32[$0>>2] = $_0$0$i$i; //@line 702 "/checkout/src/libcore/char.rs"
 $_5$sroa$0$0$$sroa_idx$i = ((($0)) + 4|0); //@line 702 "/checkout/src/libcore/char.rs"
 HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 1; //@line 702 "/checkout/src/libcore/char.rs"
 $_5$sroa$4$0$$sroa_idx2$i = ((($0)) + 8|0); //@line 702 "/checkout/src/libcore/char.rs"
 HEAP32[$_5$sroa$4$0$$sroa_idx2$i>>2] = $_0$0$i$i; //@line 702 "/checkout/src/libcore/char.rs"
 return; //@line 787 "/checkout/src/libcore/char.rs"
}
function __ZN4core3str9from_utf817hbf2fe8d2f1e56658E($0,$v$0,$v$1) {
 $0 = $0|0;
 $v$0 = $v$0|0;
 $v$1 = $v$1|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_4 = sp;
 __ZN4core3str19run_utf8_validation17hfef4d83a96fd2a8fE($_4,$v$0,$v$1); //@line 302 "/checkout/src/libcore/str/mod.rs"
 $1 = $_4; //@line 1172 "/checkout/src/libcore/result.rs"
 $2 = $1; //@line 1172 "/checkout/src/libcore/result.rs"
 $3 = HEAP32[$2>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
 $4 = (($1) + 4)|0; //@line 1172 "/checkout/src/libcore/result.rs"
 $5 = $4; //@line 1172 "/checkout/src/libcore/result.rs"
 $6 = HEAP32[$5>>2]|0; //@line 1172 "/checkout/src/libcore/result.rs"
 $7 = $6 & 255; //@line 302 "/checkout/src/libcore/str/mod.rs"
 $8 = (0)==(0); //@line 302 "/checkout/src/libcore/str/mod.rs"
 $9 = ($7|0)==(2); //@line 302 "/checkout/src/libcore/str/mod.rs"
 $10 = $8 & $9; //@line 302 "/checkout/src/libcore/str/mod.rs"
 if ($10) {
  HEAP32[$0>>2] = 0; //@line 303 "/checkout/src/libcore/str/mod.rs"
  $11 = ((($0)) + 4|0); //@line 303 "/checkout/src/libcore/str/mod.rs"
  HEAP32[$11>>2] = $v$0; //@line 303 "/checkout/src/libcore/str/mod.rs"
  $12 = ((($0)) + 8|0); //@line 303 "/checkout/src/libcore/str/mod.rs"
  HEAP32[$12>>2] = $v$1; //@line 303 "/checkout/src/libcore/str/mod.rs"
  STACKTOP = sp;return; //@line 304 "/checkout/src/libcore/str/mod.rs"
 } else {
  HEAP32[$0>>2] = 1; //@line 1180 "/checkout/src/libcore/result.rs"
  $13 = ((($0)) + 4|0); //@line 1180 "/checkout/src/libcore/result.rs"
  $14 = $13; //@line 1180 "/checkout/src/libcore/result.rs"
  $15 = $14; //@line 1180 "/checkout/src/libcore/result.rs"
  HEAP32[$15>>2] = $3; //@line 1180 "/checkout/src/libcore/result.rs"
  $16 = (($14) + 4)|0; //@line 1180 "/checkout/src/libcore/result.rs"
  $17 = $16; //@line 1180 "/checkout/src/libcore/result.rs"
  HEAP32[$17>>2] = $6; //@line 1180 "/checkout/src/libcore/result.rs"
  STACKTOP = sp;return; //@line 304 "/checkout/src/libcore/str/mod.rs"
 }
}
function __ZN4core3str19run_utf8_validation17hfef4d83a96fd2a8fE($0,$v$0,$v$1) {
 $0 = $0|0;
 $v$0 = $v$0|0;
 $v$1 = $v$1|0;
 var $$ = 0, $$off = 0, $$off211 = 0, $$off213 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond10 = 0, $cond11 = 0, $cond9 = 0, $index$0$be = 0, $index$0233 = 0, $index$1 = 0, $index$2$lcssa = 0, $index$2228 = 0, $index$3230 = 0, $or$cond184 = 0, $or$cond185 = 0, $or$cond186 = 0, $or$cond187 = 0, $or$cond189 = 0, $or$cond190 = 0, $or$cond194 = 0;
 var $or$cond195 = 0, $or$cond196 = 0, $or$cond197 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($v$1>>>0)>(7); //@line 1434 "/checkout/src/libcore/str/mod.rs"
 $2 = (($v$1) + -7)|0; //@line 1434 "/checkout/src/libcore/str/mod.rs"
 $$ = $1 ? $2 : 0; //@line 1434 "/checkout/src/libcore/str/mod.rs"
 $3 = ($v$1|0)==(0); //@line 1436 "/checkout/src/libcore/str/mod.rs"
 L1: do {
  if (!($3)) {
   $index$0233 = 0;
   L2: while(1) {
    $5 = (($v$0) + ($index$0233)|0); //@line 1456 "/checkout/src/libcore/str/mod.rs"
    $6 = HEAP8[$5>>0]|0; //@line 1456 "/checkout/src/libcore/str/mod.rs"
    $7 = ($6<<24>>24)<(0); //@line 1457 "/checkout/src/libcore/str/mod.rs"
    L4: do {
     if ($7) {
      $12 = $6&255; //@line 1458 "/checkout/src/libcore/str/mod.rs"
      $13 = (28633 + ($12)|0); //@line 1458 "/checkout/src/libcore/str/mod.rs"
      $14 = HEAP8[$13>>0]|0; //@line 1458 "/checkout/src/libcore/str/mod.rs"
      switch ($14<<24>>24) {
      case 2:  {
       $15 = (($index$0233) + 1)|0; //@line 1478 "/checkout/src/libcore/str/mod.rs"
       $16 = ($15>>>0)<($v$1>>>0); //@line 1478 "/checkout/src/libcore/str/mod.rs"
       if (!($16)) {
        label = 12;
        break L2;
       }
       $25 = (($v$0) + ($15)|0); //@line 1478 "/checkout/src/libcore/str/mod.rs"
       $26 = HEAP8[$25>>0]|0; //@line 1478 "/checkout/src/libcore/str/mod.rs"
       $27 = $26 & -64; //@line 1478 "/checkout/src/libcore/str/mod.rs"
       $28 = ($27<<24>>24)==(-128); //@line 1478 "/checkout/src/libcore/str/mod.rs"
       if ($28) {
        $index$1 = $15;
       } else {
        label = 15;
        break L2;
       }
       break;
      }
      case 3:  {
       $17 = (($index$0233) + 1)|0; //@line 1482 "/checkout/src/libcore/str/mod.rs"
       $18 = ($17>>>0)<($v$1>>>0); //@line 1482 "/checkout/src/libcore/str/mod.rs"
       if (!($18)) {
        label = 16;
        break L2;
       }
       $32 = (($v$0) + ($17)|0); //@line 1482 "/checkout/src/libcore/str/mod.rs"
       $33 = HEAP8[$32>>0]|0; //@line 1482 "/checkout/src/libcore/str/mod.rs"
       $cond10 = ($6<<24>>24)==(-32); //@line 1483 "/checkout/src/libcore/str/mod.rs"
       $34 = ($33&255)<(192); //@line 1483 "/checkout/src/libcore/str/mod.rs"
       $35 = $33 & -32; //@line 1483 "/checkout/src/libcore/str/mod.rs"
       $36 = ($35<<24>>24)==(-96); //@line 1483 "/checkout/src/libcore/str/mod.rs"
       $37 = $cond10 & $36; //@line 1483 "/checkout/src/libcore/str/mod.rs"
       if (!($37)) {
        $$off213 = (($6) + 31)<<24>>24; //@line 1484 "/checkout/src/libcore/str/mod.rs"
        $42 = ($$off213&255)<(12); //@line 1484 "/checkout/src/libcore/str/mod.rs"
        $43 = ($33<<24>>24)<(0); //@line 1484 "/checkout/src/libcore/str/mod.rs"
        $or$cond184 = $42 & $43; //@line 1484 "/checkout/src/libcore/str/mod.rs"
        $or$cond185 = $34 & $or$cond184; //@line 1484 "/checkout/src/libcore/str/mod.rs"
        if (!($or$cond185)) {
         $cond11 = ($6<<24>>24)==(-19); //@line 1485 "/checkout/src/libcore/str/mod.rs"
         $or$cond186 = $cond11 & $43; //@line 1485 "/checkout/src/libcore/str/mod.rs"
         $44 = ($33&255)<(160); //@line 1485 "/checkout/src/libcore/str/mod.rs"
         $or$cond187 = $44 & $or$cond186; //@line 1485 "/checkout/src/libcore/str/mod.rs"
         if (!($or$cond187)) {
          $45 = $6 & -2; //@line 1486 "/checkout/src/libcore/str/mod.rs"
          $46 = ($45<<24>>24)==(-18); //@line 1486 "/checkout/src/libcore/str/mod.rs"
          $or$cond189 = $46 & $43; //@line 1486 "/checkout/src/libcore/str/mod.rs"
          $or$cond190 = $34 & $or$cond189; //@line 1486 "/checkout/src/libcore/str/mod.rs"
          if (!($or$cond190)) {
           label = 19;
           break L2;
          }
         }
        }
       }
       $38 = (($index$0233) + 2)|0; //@line 1489 "/checkout/src/libcore/str/mod.rs"
       $39 = ($38>>>0)<($v$1>>>0); //@line 1489 "/checkout/src/libcore/str/mod.rs"
       if (!($39)) {
        label = 23;
        break L2;
       }
       $48 = (($v$0) + ($38)|0); //@line 1489 "/checkout/src/libcore/str/mod.rs"
       $49 = HEAP8[$48>>0]|0; //@line 1489 "/checkout/src/libcore/str/mod.rs"
       $50 = $49 & -64; //@line 1489 "/checkout/src/libcore/str/mod.rs"
       $51 = ($50<<24>>24)==(-128); //@line 1489 "/checkout/src/libcore/str/mod.rs"
       if ($51) {
        $index$1 = $38;
       } else {
        label = 25;
        break L2;
       }
       break;
      }
      case 4:  {
       $19 = (($index$0233) + 1)|0; //@line 1494 "/checkout/src/libcore/str/mod.rs"
       $20 = ($19>>>0)<($v$1>>>0); //@line 1494 "/checkout/src/libcore/str/mod.rs"
       if (!($20)) {
        label = 26;
        break L2;
       }
       $55 = (($v$0) + ($19)|0); //@line 1494 "/checkout/src/libcore/str/mod.rs"
       $56 = HEAP8[$55>>0]|0; //@line 1494 "/checkout/src/libcore/str/mod.rs"
       $cond = ($6<<24>>24)==(-16); //@line 1495 "/checkout/src/libcore/str/mod.rs"
       $$off = (($56) + 112)<<24>>24; //@line 1495 "/checkout/src/libcore/str/mod.rs"
       $57 = ($$off&255)<(48); //@line 1495 "/checkout/src/libcore/str/mod.rs"
       $58 = $cond & $57; //@line 1495 "/checkout/src/libcore/str/mod.rs"
       if (!($58)) {
        $63 = ($56&255)<(192); //@line 1495 "/checkout/src/libcore/str/mod.rs"
        $$off211 = (($6) + 15)<<24>>24; //@line 1496 "/checkout/src/libcore/str/mod.rs"
        $64 = ($$off211&255)<(3); //@line 1496 "/checkout/src/libcore/str/mod.rs"
        $65 = ($56<<24>>24)<(0); //@line 1496 "/checkout/src/libcore/str/mod.rs"
        $or$cond194 = $64 & $65; //@line 1496 "/checkout/src/libcore/str/mod.rs"
        $or$cond195 = $63 & $or$cond194; //@line 1496 "/checkout/src/libcore/str/mod.rs"
        if (!($or$cond195)) {
         $cond9 = ($6<<24>>24)==(-12); //@line 1497 "/checkout/src/libcore/str/mod.rs"
         $or$cond196 = $cond9 & $65; //@line 1497 "/checkout/src/libcore/str/mod.rs"
         $66 = ($56&255)<(144); //@line 1497 "/checkout/src/libcore/str/mod.rs"
         $or$cond197 = $66 & $or$cond196; //@line 1497 "/checkout/src/libcore/str/mod.rs"
         if (!($or$cond197)) {
          label = 29;
          break L2;
         }
        }
       }
       $59 = (($index$0233) + 2)|0; //@line 1500 "/checkout/src/libcore/str/mod.rs"
       $60 = ($59>>>0)<($v$1>>>0); //@line 1500 "/checkout/src/libcore/str/mod.rs"
       if (!($60)) {
        label = 32;
        break L2;
       }
       $68 = (($v$0) + ($59)|0); //@line 1500 "/checkout/src/libcore/str/mod.rs"
       $69 = HEAP8[$68>>0]|0; //@line 1500 "/checkout/src/libcore/str/mod.rs"
       $70 = $69 & -64; //@line 1500 "/checkout/src/libcore/str/mod.rs"
       $71 = ($70<<24>>24)==(-128); //@line 1500 "/checkout/src/libcore/str/mod.rs"
       if (!($71)) {
        label = 34;
        break L2;
       }
       $74 = (($index$0233) + 3)|0; //@line 1503 "/checkout/src/libcore/str/mod.rs"
       $75 = ($74>>>0)<($v$1>>>0); //@line 1503 "/checkout/src/libcore/str/mod.rs"
       if (!($75)) {
        label = 36;
        break L2;
       }
       $77 = (($v$0) + ($74)|0); //@line 1503 "/checkout/src/libcore/str/mod.rs"
       $78 = HEAP8[$77>>0]|0; //@line 1503 "/checkout/src/libcore/str/mod.rs"
       $79 = $78 & -64; //@line 1503 "/checkout/src/libcore/str/mod.rs"
       $80 = ($79<<24>>24)==(-128); //@line 1503 "/checkout/src/libcore/str/mod.rs"
       if ($80) {
        $index$1 = $74;
       } else {
        label = 38;
        break L2;
       }
       break;
      }
      default: {
       label = 10;
       break L2;
      }
      }
      $23 = (($index$1) + 1)|0; //@line 1509 "/checkout/src/libcore/str/mod.rs"
      $index$0$be = $23;
     } else {
      $8 = $5; //@line 1142 "/checkout/src/libcore/ptr.rs"
      $9 = $8 & 3; //@line 1142 "/checkout/src/libcore/ptr.rs"
      $10 = ($9|0)==(0); //@line 1142 "/checkout/src/libcore/ptr.rs"
      if (!($10)) {
       $83 = (($index$0233) + 1)|0; //@line 1537 "/checkout/src/libcore/str/mod.rs"
       $index$0$be = $83;
       break;
      }
      $11 = ($index$0233>>>0)<($$>>>0); //@line 1520 "/checkout/src/libcore/str/mod.rs"
      L31: do {
       if ($11) {
        $index$2228 = $index$0233;
        while(1) {
         $85 = (($v$0) + ($index$2228)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
         $86 = HEAP32[$85>>2]|0; //@line 1524 "/checkout/src/libcore/str/mod.rs"
         $87 = ((($85)) + 4|0); //@line 623 "/checkout/src/libcore/ptr.rs"
         $88 = HEAP32[$87>>2]|0; //@line 1525 "/checkout/src/libcore/str/mod.rs"
         $89 = $88 | $86; //@line 1526 "/checkout/src/libcore/str/mod.rs"
         $90 = $89 & -2139062144; //@line 1526 "/checkout/src/libcore/str/mod.rs"
         $91 = ($90|0)==(0); //@line 1526 "/checkout/src/libcore/str/mod.rs"
         if (!($91)) {
          $index$2$lcssa = $index$2228;
          break L31;
         }
         $93 = (($index$2228) + 8)|0; //@line 1530 "/checkout/src/libcore/str/mod.rs"
         $94 = ($93>>>0)<($$>>>0); //@line 1520 "/checkout/src/libcore/str/mod.rs"
         if ($94) {
          $index$2228 = $93;
         } else {
          $index$2$lcssa = $93;
          break;
         }
        }
       } else {
        $index$2$lcssa = $index$0233;
       }
      } while(0);
      $92 = ($index$2$lcssa>>>0)<($v$1>>>0); //@line 1533 "/checkout/src/libcore/str/mod.rs"
      if ($92) {
       $index$3230 = $index$2$lcssa;
       while(1) {
        $95 = (($v$0) + ($index$3230)|0); //@line 1533 "/checkout/src/libcore/str/mod.rs"
        $96 = HEAP8[$95>>0]|0; //@line 1533 "/checkout/src/libcore/str/mod.rs"
        $97 = ($96<<24>>24)>(-1); //@line 1533 "/checkout/src/libcore/str/mod.rs"
        if (!($97)) {
         $index$0$be = $index$3230;
         break L4;
        }
        $98 = (($index$3230) + 1)|0; //@line 1534 "/checkout/src/libcore/str/mod.rs"
        $99 = ($98>>>0)<($v$1>>>0); //@line 1533 "/checkout/src/libcore/str/mod.rs"
        if ($99) {
         $index$3230 = $98;
        } else {
         $index$0$be = $98;
         break;
        }
       }
      } else {
       $index$0$be = $index$2$lcssa;
      }
     }
    } while(0);
    $84 = ($index$0$be>>>0)<($v$1>>>0); //@line 1436 "/checkout/src/libcore/str/mod.rs"
    if ($84) {
     $index$0233 = $index$0$be;
    } else {
     break L1;
    }
   }
   switch (label|0) {
    case 10: {
     HEAP32[$0>>2] = $index$0233; //@line 1507 "/checkout/src/libcore/str/mod.rs"
     $21 = ((($0)) + 4|0); //@line 1507 "/checkout/src/libcore/str/mod.rs"
     HEAP8[$21>>0] = 1; //@line 1507 "/checkout/src/libcore/str/mod.rs"
     $22 = ((($0)) + 5|0); //@line 1507 "/checkout/src/libcore/str/mod.rs"
     HEAP8[$22>>0] = 1; //@line 1507 "/checkout/src/libcore/str/mod.rs"
     return; //@line 1543 "/checkout/src/libcore/str/mod.rs"
     break;
    }
    case 12: {
     HEAP32[$0>>2] = $index$0233; //@line 1478 "/checkout/src/libcore/str/mod.rs"
     $24 = ((($0)) + 4|0); //@line 1478 "/checkout/src/libcore/str/mod.rs"
     HEAP8[$24>>0] = 0; //@line 1478 "/checkout/src/libcore/str/mod.rs"
     return; //@line 1543 "/checkout/src/libcore/str/mod.rs"
     break;
    }
    case 15: {
     HEAP32[$0>>2] = $index$0233; //@line 1479 "/checkout/src/libcore/str/mod.rs"
     $29 = ((($0)) + 4|0); //@line 1479 "/checkout/src/libcore/str/mod.rs"
     HEAP8[$29>>0] = 1; //@line 1479 "/checkout/src/libcore/str/mod.rs"
     $30 = ((($0)) + 5|0); //@line 1479 "/checkout/src/libcore/str/mod.rs"
     HEAP8[$30>>0] = 1; //@line 1479 "/checkout/src/libcore/str/mod.rs"
     return; //@line 1543 "/checkout/src/libcore/str/mod.rs"
     break;
    }
    case 16: {
     HEAP32[$0>>2] = $index$0233; //@line 1482 "/checkout/src/libcore/str/mod.rs"
     $31 = ((($0)) + 4|0); //@line 1482 "/checkout/src/libcore/str/mod.rs"
     HEAP8[$31>>0] = 0; //@line 1482 "/checkout/src/libcore/str/mod.rs"
     return; //@line 1543 "/checkout/src/libcore/str/mod.rs"
     break;
    }
    case 19: {
     HEAP32[$0>>2] = $index$0233; //@line 1487 "/checkout/src/libcore/str/mod.rs"
     $40 = ((($0)) + 4|0); //@line 1487 "/checkout/src/libcore/str/mod.rs"
     HEAP8[$40>>0] = 1; //@line 1487 "/checkout/src/libcore/str/mod.rs"
     $41 = ((($0)) + 5|0); //@line 1487 "/checkout/src/libcore/str/mod.rs"
     HEAP8[$41>>0] = 1; //@line 1487 "/checkout/src/libcore/str/mod.rs"
     return; //@line 1543 "/checkout/src/libcore/str/mod.rs"
     break;
    }
    case 23: {
     HEAP32[$0>>2] = $index$0233; //@line 1489 "/checkout/src/libcore/str/mod.rs"
     $47 = ((($0)) + 4|0); //@line 1489 "/checkout/src/libcore/str/mod.rs"
     HEAP8[$47>>0] = 0; //@line 1489 "/checkout/src/libcore/str/mod.rs"
     return; //@line 1543 "/checkout/src/libcore/str/mod.rs"
     break;
    }
    case 25: {
     HEAP32[$0>>2] = $index$0233; //@line 1490 "/checkout/src/libcore/str/mod.rs"
     $52 = ((($0)) + 4|0); //@line 1490 "/checkout/src/libcore/str/mod.rs"
     HEAP8[$52>>0] = 1; //@line 1490 "/checkout/src/libcore/str/mod.rs"
     $53 = ((($0)) + 5|0); //@line 1490 "/checkout/src/libcore/str/mod.rs"
     HEAP8[$53>>0] = 2; //@line 1490 "/checkout/src/libcore/str/mod.rs"
     return; //@line 1543 "/checkout/src/libcore/str/mod.rs"
     break;
    }
    case 26: {
     HEAP32[$0>>2] = $index$0233; //@line 1494 "/checkout/src/libcore/str/mod.rs"
     $54 = ((($0)) + 4|0); //@line 1494 "/checkout/src/libcore/str/mod.rs"
     HEAP8[$54>>0] = 0; //@line 1494 "/checkout/src/libcore/str/mod.rs"
     return; //@line 1543 "/checkout/src/libcore/str/mod.rs"
     break;
    }
    case 29: {
     HEAP32[$0>>2] = $index$0233; //@line 1498 "/checkout/src/libcore/str/mod.rs"
     $61 = ((($0)) + 4|0); //@line 1498 "/checkout/src/libcore/str/mod.rs"
     HEAP8[$61>>0] = 1; //@line 1498 "/checkout/src/libcore/str/mod.rs"
     $62 = ((($0)) + 5|0); //@line 1498 "/checkout/src/libcore/str/mod.rs"
     HEAP8[$62>>0] = 1; //@line 1498 "/checkout/src/libcore/str/mod.rs"
     return; //@line 1543 "/checkout/src/libcore/str/mod.rs"
     break;
    }
    case 32: {
     HEAP32[$0>>2] = $index$0233; //@line 1500 "/checkout/src/libcore/str/mod.rs"
     $67 = ((($0)) + 4|0); //@line 1500 "/checkout/src/libcore/str/mod.rs"
     HEAP8[$67>>0] = 0; //@line 1500 "/checkout/src/libcore/str/mod.rs"
     return; //@line 1543 "/checkout/src/libcore/str/mod.rs"
     break;
    }
    case 34: {
     HEAP32[$0>>2] = $index$0233; //@line 1501 "/checkout/src/libcore/str/mod.rs"
     $72 = ((($0)) + 4|0); //@line 1501 "/checkout/src/libcore/str/mod.rs"
     HEAP8[$72>>0] = 1; //@line 1501 "/checkout/src/libcore/str/mod.rs"
     $73 = ((($0)) + 5|0); //@line 1501 "/checkout/src/libcore/str/mod.rs"
     HEAP8[$73>>0] = 2; //@line 1501 "/checkout/src/libcore/str/mod.rs"
     return; //@line 1543 "/checkout/src/libcore/str/mod.rs"
     break;
    }
    case 36: {
     HEAP32[$0>>2] = $index$0233; //@line 1503 "/checkout/src/libcore/str/mod.rs"
     $76 = ((($0)) + 4|0); //@line 1503 "/checkout/src/libcore/str/mod.rs"
     HEAP8[$76>>0] = 0; //@line 1503 "/checkout/src/libcore/str/mod.rs"
     return; //@line 1543 "/checkout/src/libcore/str/mod.rs"
     break;
    }
    case 38: {
     HEAP32[$0>>2] = $index$0233; //@line 1504 "/checkout/src/libcore/str/mod.rs"
     $81 = ((($0)) + 4|0); //@line 1504 "/checkout/src/libcore/str/mod.rs"
     HEAP8[$81>>0] = 1; //@line 1504 "/checkout/src/libcore/str/mod.rs"
     $82 = ((($0)) + 5|0); //@line 1504 "/checkout/src/libcore/str/mod.rs"
     HEAP8[$82>>0] = 3; //@line 1504 "/checkout/src/libcore/str/mod.rs"
     return; //@line 1543 "/checkout/src/libcore/str/mod.rs"
     break;
    }
   }
  }
 } while(0);
 $4 = ((($0)) + 4|0); //@line 1542 "/checkout/src/libcore/str/mod.rs"
 HEAP8[$4>>0] = 2; //@line 1542 "/checkout/src/libcore/str/mod.rs"
 return; //@line 1543 "/checkout/src/libcore/str/mod.rs"
}
function __ZN81__LT_core__str__Chars_LT__u27_a_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17hc1ee35ddbdcf551bE_llvm_3BE8BC2C($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$i10$i = 0, $_0$0$i16$i = 0;
 var $_0$0$i5$i = 0, $phitmp$i = 0, $phitmp21$i = 0, $phitmp22$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self>>2]|0; //@line 1135 "/checkout/src/libcore/slice/mod.rs"
 $1 = ((($self)) + 4|0); //@line 1136 "/checkout/src/libcore/slice/mod.rs"
 $2 = HEAP32[$1>>2]|0; //@line 1136 "/checkout/src/libcore/slice/mod.rs"
 $3 = ($0|0)==($2|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
 if ($3) {
  $37 = 1114112;
  return ($37|0); //@line 570 "/checkout/src/libcore/str/mod.rs"
 }
 $4 = ((($0)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
 HEAP32[$self>>2] = $4; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
 $5 = HEAP8[$0>>0]|0; //@line 497 "/checkout/src/libcore/str/mod.rs"
 $6 = ($5<<24>>24)>(-1); //@line 498 "/checkout/src/libcore/str/mod.rs"
 if ($6) {
  $7 = $5&255; //@line 499 "/checkout/src/libcore/str/mod.rs"
  $37 = $7;
  return ($37|0); //@line 570 "/checkout/src/libcore/str/mod.rs"
 }
 $8 = $5 & 31; //@line 472 "/checkout/src/libcore/str/mod.rs"
 $9 = $8&255; //@line 472 "/checkout/src/libcore/str/mod.rs"
 $10 = ($4|0)==($2|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
 if ($10) {
  $18 = $2;$_0$0$i16$i = 0;
 } else {
  $11 = ((($0)) + 2|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  HEAP32[$self>>2] = $11; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
  $12 = HEAP8[$4>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
  $phitmp$i = $12 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
  $18 = $11;$_0$0$i16$i = $phitmp$i;
 }
 $13 = $9 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
 $14 = $_0$0$i16$i&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
 $15 = $14 | $13; //@line 476 "/checkout/src/libcore/str/mod.rs"
 $16 = ($5&255)>(223); //@line 508 "/checkout/src/libcore/str/mod.rs"
 if (!($16)) {
  $37 = $15;
  return ($37|0); //@line 570 "/checkout/src/libcore/str/mod.rs"
 }
 $17 = ($18|0)==($2|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
 if ($17) {
  $28 = $2;$_0$0$i10$i = 0;
 } else {
  $19 = ((($18)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  HEAP32[$self>>2] = $19; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
  $20 = HEAP8[$18>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
  $phitmp21$i = $20 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
  $28 = $19;$_0$0$i10$i = $phitmp21$i;
 }
 $21 = $14 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
 $22 = $_0$0$i10$i&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
 $23 = $22 | $21; //@line 476 "/checkout/src/libcore/str/mod.rs"
 $24 = $9 << 12; //@line 513 "/checkout/src/libcore/str/mod.rs"
 $25 = $23 | $24; //@line 513 "/checkout/src/libcore/str/mod.rs"
 $26 = ($5&255)>(239); //@line 514 "/checkout/src/libcore/str/mod.rs"
 if (!($26)) {
  $37 = $25;
  return ($37|0); //@line 570 "/checkout/src/libcore/str/mod.rs"
 }
 $27 = ($28|0)==($2|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
 if ($27) {
  $_0$0$i5$i = 0;
 } else {
  $29 = ((($28)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  HEAP32[$self>>2] = $29; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
  $30 = HEAP8[$28>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
  $phitmp22$i = $30 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
  $_0$0$i5$i = $phitmp22$i;
 }
 $31 = $9 << 18; //@line 518 "/checkout/src/libcore/str/mod.rs"
 $32 = $31 & 1835008; //@line 518 "/checkout/src/libcore/str/mod.rs"
 $33 = $23 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
 $34 = $_0$0$i5$i&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
 $35 = $33 | $32; //@line 476 "/checkout/src/libcore/str/mod.rs"
 $36 = $35 | $34; //@line 518 "/checkout/src/libcore/str/mod.rs"
 $37 = $36;
 return ($37|0); //@line 570 "/checkout/src/libcore/str/mod.rs"
}
function __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($s$0,$s$1,$0,$1) {
 $s$0 = $s$0|0;
 $s$1 = $s$1|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$$$$i = 0, $$$$i = 0, $$$i = 0, $$59 = 0, $$lcssa = 0, $$pre$i$i = 0, $$pre$phi8Z2D = 0, $$sink = 0, $$sink$i = 0, $$sink6$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_0$0$i10$i$i = 0;
 var $_0$0$i16$i$i = 0, $_0$0$i5$i$i = 0, $_126 = 0, $_133 = 0, $_28 = 0, $_35 = 0, $_5$sroa$0$0$$sroa_idx$i = 0, $_5$sroa$0$0$$sroa_idx$i15 = 0, $_5$sroa$0$0$$sroa_idx$i19 = 0, $_5$sroa$4$0$$sroa_idx2$i = 0, $_5$sroa$4$0$$sroa_idx2$i17 = 0, $_5$sroa$4$0$$sroa_idx2$i21 = 0, $_62 = 0, $_69 = 0, $begin = 0, $ch = 0, $char_range = 0, $char_start$063 = 0, $ellipsis = 0, $end = 0;
 var $index = 0, $max$0$i67 = 0, $oob_index = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i$i$i = 0, $or$cond$i10 = 0, $or$cond$i62 = 0, $phitmp$i$i = 0, $phitmp21$i$i = 0, $phitmp22$i$i = 0, $s_trunc = 0, $storemerge = 0, $storemerge8 = 0, $str$D$sink = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $_133 = sp + 176|0;
 $_126 = sp + 152|0;
 $char_range = sp + 144|0;
 $ch = sp + 140|0;
 $index = sp + 136|0;
 $_69 = sp + 104|0;
 $_62 = sp + 80|0;
 $_35 = sp + 56|0;
 $_28 = sp + 32|0;
 $oob_index = sp + 24|0;
 $ellipsis = sp + 16|0;
 $s_trunc = sp + 8|0;
 $end = sp + 4|0;
 $begin = sp;
 HEAP32[$begin>>2] = $0;
 HEAP32[$end>>2] = $1;
 $2 = ($s$1>>>0)<(257); //@line 2197 "/checkout/src/libcore/str/mod.rs"
 L1: do {
  if ($2) {
   $$sink$i = $s$1;$$sink6$i = 0;
  } else {
   $max$0$i67 = 256;
   while(1) {
    $3 = ($max$0$i67>>>0)<($s$1>>>0); //@line 792 "/checkout/src/libcore/slice/mod.rs"
    if ($3) {
     $4 = (($s$0) + ($max$0$i67)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $5 = HEAP8[$4>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
     $6 = ($5<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
     if ($6) {
      $$sink$i = $max$0$i67;$$sink6$i = 1;
      break L1;
     }
    }
    $7 = (($max$0$i67) + -1)|0; //@line 2201 "/checkout/src/libcore/str/mod.rs"
    $8 = ($7|0)==(0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
    $9 = ($7|0)==($s$1|0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
    $or$cond$i$i = $8 | $9; //@line 2438 "/checkout/src/libcore/str/mod.rs"
    if ($or$cond$i$i) {
     $$sink$i = $7;$$sink6$i = 1;
     break;
    } else {
     $max$0$i67 = $7;
    }
   }
  }
 } while(0);
 $10 = $s$0;
 HEAP32[$s_trunc>>2] = $10; //@line 2211 "/checkout/src/libcore/str/mod.rs"
 $11 = ((($s_trunc)) + 4|0); //@line 2211 "/checkout/src/libcore/str/mod.rs"
 HEAP32[$11>>2] = $$sink$i; //@line 2211 "/checkout/src/libcore/str/mod.rs"
 $str$D$sink = $$sink6$i ? 28889 : 39452; //@line 2212 "/checkout/src/libcore/str/mod.rs"
 $$sink = $$sink6$i ? 5 : 0; //@line 2212 "/checkout/src/libcore/str/mod.rs"
 HEAP32[$ellipsis>>2] = $str$D$sink; //@line 2212 "/checkout/src/libcore/str/mod.rs"
 $12 = ((($ellipsis)) + 4|0); //@line 2212 "/checkout/src/libcore/str/mod.rs"
 HEAP32[$12>>2] = $$sink; //@line 2212 "/checkout/src/libcore/str/mod.rs"
 $13 = ($0>>>0)>($s$1>>>0); //@line 2215 "/checkout/src/libcore/str/mod.rs"
 $14 = ($1>>>0)>($s$1>>>0); //@line 2215 "/checkout/src/libcore/str/mod.rs"
 $or$cond = $13 | $14; //@line 2215 "/checkout/src/libcore/str/mod.rs"
 if ($or$cond) {
  $storemerge8 = $13 ? $0 : $1; //@line 2216 "/checkout/src/libcore/str/mod.rs"
  HEAP32[$oob_index>>2] = $storemerge8; //@line 2216 "/checkout/src/libcore/str/mod.rs"
  HEAP32[$_35>>2] = $oob_index; //@line 2217 "/checkout/src/libcore/str/mod.rs"
  $15 = ((($_35)) + 4|0); //@line 2217 "/checkout/src/libcore/str/mod.rs"
  HEAP32[$15>>2] = 289; //@line 2217 "/checkout/src/libcore/str/mod.rs"
  $16 = ((($_35)) + 8|0); //@line 2217 "/checkout/src/libcore/str/mod.rs"
  HEAP32[$16>>2] = $s_trunc; //@line 2217 "/checkout/src/libcore/str/mod.rs"
  $17 = ((($_35)) + 12|0); //@line 2217 "/checkout/src/libcore/str/mod.rs"
  HEAP32[$17>>2] = 465; //@line 2217 "/checkout/src/libcore/str/mod.rs"
  $18 = ((($_35)) + 16|0); //@line 2217 "/checkout/src/libcore/str/mod.rs"
  HEAP32[$18>>2] = $ellipsis; //@line 2217 "/checkout/src/libcore/str/mod.rs"
  $19 = ((($_35)) + 20|0); //@line 2217 "/checkout/src/libcore/str/mod.rs"
  HEAP32[$19>>2] = 465; //@line 2217 "/checkout/src/libcore/str/mod.rs"
  HEAP32[$_28>>2] = 12340; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $20 = ((($_28)) + 4|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$20>>2] = 3; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $_5$sroa$0$0$$sroa_idx$i19 = ((($_28)) + 8|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_5$sroa$0$0$$sroa_idx$i19>>2] = 12364; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $_5$sroa$4$0$$sroa_idx2$i21 = ((($_28)) + 12|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_5$sroa$4$0$$sroa_idx2$i21>>2] = 3; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $21 = ((($_28)) + 16|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$21>>2] = $_35; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $22 = ((($_28)) + 20|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$22>>2] = 3; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  __ZN4core9panicking9panic_fmt17hff08f8fc41769480E($_28,12472); //@line 2217 "/checkout/src/libcore/str/mod.rs"
  // unreachable; //@line 2217 "/checkout/src/libcore/str/mod.rs"
 }
 $23 = ($0>>>0)>($1>>>0); //@line 2221 "/checkout/src/libcore/str/mod.rs"
 if ($23) {
  HEAP32[$_69>>2] = $begin; //@line 2221 "/checkout/src/libcore/str/mod.rs"
  $24 = ((($_69)) + 4|0); //@line 2221 "/checkout/src/libcore/str/mod.rs"
  HEAP32[$24>>2] = 289; //@line 2221 "/checkout/src/libcore/str/mod.rs"
  $25 = ((($_69)) + 8|0); //@line 2221 "/checkout/src/libcore/str/mod.rs"
  HEAP32[$25>>2] = $end; //@line 2221 "/checkout/src/libcore/str/mod.rs"
  $26 = ((($_69)) + 12|0); //@line 2221 "/checkout/src/libcore/str/mod.rs"
  HEAP32[$26>>2] = 289; //@line 2221 "/checkout/src/libcore/str/mod.rs"
  $27 = ((($_69)) + 16|0); //@line 2221 "/checkout/src/libcore/str/mod.rs"
  HEAP32[$27>>2] = $s_trunc; //@line 2221 "/checkout/src/libcore/str/mod.rs"
  $28 = ((($_69)) + 20|0); //@line 2221 "/checkout/src/libcore/str/mod.rs"
  HEAP32[$28>>2] = 465; //@line 2221 "/checkout/src/libcore/str/mod.rs"
  $29 = ((($_69)) + 24|0); //@line 2221 "/checkout/src/libcore/str/mod.rs"
  HEAP32[$29>>2] = $ellipsis; //@line 2221 "/checkout/src/libcore/str/mod.rs"
  $30 = ((($_69)) + 28|0); //@line 2221 "/checkout/src/libcore/str/mod.rs"
  HEAP32[$30>>2] = 465; //@line 2221 "/checkout/src/libcore/str/mod.rs"
  HEAP32[$_62>>2] = 12488; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $31 = ((($_62)) + 4|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$31>>2] = 4; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $_5$sroa$0$0$$sroa_idx$i15 = ((($_62)) + 8|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_5$sroa$0$0$$sroa_idx$i15>>2] = 12520; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $_5$sroa$4$0$$sroa_idx2$i17 = ((($_62)) + 12|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$_5$sroa$4$0$$sroa_idx2$i17>>2] = 4; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $32 = ((($_62)) + 16|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$32>>2] = $_69; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  $33 = ((($_62)) + 20|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  HEAP32[$33>>2] = 4; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
  __ZN4core9panicking9panic_fmt17hff08f8fc41769480E($_62,12664); //@line 2221 "/checkout/src/libcore/str/mod.rs"
  // unreachable; //@line 2221 "/checkout/src/libcore/str/mod.rs"
 }
 $34 = ($0|0)==(0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
 $35 = ($0|0)==($s$1|0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
 $or$cond$i10 = $34 | $35; //@line 2438 "/checkout/src/libcore/str/mod.rs"
 if ($or$cond$i10) {
  label = 12;
 } else {
  $36 = ($0>>>0)<($s$1>>>0); //@line 792 "/checkout/src/libcore/slice/mod.rs"
  if ($36) {
   $37 = (($s$0) + ($0)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
   $38 = HEAP8[$37>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
   $39 = ($38<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
   if ($39) {
    label = 12;
   } else {
    $storemerge = $0;
   }
  } else {
   $storemerge = $0;
  }
 }
 if ((label|0) == 12) {
  $storemerge = $1;
 }
 HEAP32[$index>>2] = $storemerge; //@line 2225 "/checkout/src/libcore/str/mod.rs"
 $40 = ($storemerge|0)==(0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
 $41 = ($storemerge|0)==($s$1|0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
 $or$cond$i62 = $40 | $41; //@line 2438 "/checkout/src/libcore/str/mod.rs"
 L20: do {
  if ($or$cond$i62) {
   $$lcssa = $40;$47 = $storemerge;
  } else {
   $char_start$063 = $storemerge;
   while(1) {
    $42 = ($char_start$063>>>0)<($s$1>>>0); //@line 792 "/checkout/src/libcore/slice/mod.rs"
    if ($42) {
     $43 = (($s$0) + ($char_start$063)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $44 = HEAP8[$43>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
     $45 = ($44<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
     if ($45) {
      $$lcssa = 0;$47 = $char_start$063;
      break L20;
     }
    }
    $108 = (($char_start$063) + -1)|0; //@line 2229 "/checkout/src/libcore/str/mod.rs"
    $109 = ($108|0)==(0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
    $110 = ($108|0)==($s$1|0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
    $or$cond$i = $109 | $110; //@line 2438 "/checkout/src/libcore/str/mod.rs"
    if ($or$cond$i) {
     $$lcssa = $109;$47 = $108;
     break;
    } else {
     $char_start$063 = $108;
    }
   }
  }
 } while(0);
 $46 = ($47|0)==($s$1|0); //@line 2438 "/checkout/src/libcore/str/mod.rs"
 $or$cond$i$i$i = $$lcssa | $46; //@line 2438 "/checkout/src/libcore/str/mod.rs"
 if ($or$cond$i$i$i) {
  $$pre$i$i = (($s$0) + ($47)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $$pre$phi8Z2D = $$pre$i$i;
 } else {
  $48 = ($47>>>0)<($s$1>>>0); //@line 792 "/checkout/src/libcore/slice/mod.rs"
  if (!($48)) {
   __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($s$0,$s$1,$47,$s$1); //@line 1987 "/checkout/src/libcore/str/mod.rs"
   // unreachable; //@line 1987 "/checkout/src/libcore/str/mod.rs"
  }
  $49 = (($s$0) + ($47)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $50 = HEAP8[$49>>0]|0; //@line 2442 "/checkout/src/libcore/str/mod.rs"
  $51 = ($50<<24>>24)>(-65); //@line 2442 "/checkout/src/libcore/str/mod.rs"
  if ($51) {
   $$pre$phi8Z2D = $49;
  } else {
   __ZN4core3str16slice_error_fail17h7f7f49e32c8da988E($s$0,$s$1,$47,$s$1); //@line 1987 "/checkout/src/libcore/str/mod.rs"
   // unreachable; //@line 1987 "/checkout/src/libcore/str/mod.rs"
  }
 }
 $52 = (($s$0) + ($47)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
 $53 = (($s$0) + ($47)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
 $54 = (($s$1) - ($47))|0; //@line 1975 "/checkout/src/libcore/str/mod.rs"
 $55 = (($53) + ($54)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
 $56 = ($$pre$phi8Z2D|0)==($55|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
 $57 = ((($52)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
 $$59 = $56 ? $$pre$phi8Z2D : $57; //@line 1138 "/checkout/src/libcore/slice/mod.rs"
 if ($56) {
  __ZN4core9panicking5panic17h9fa3414033a56a4dE(12680); //@line 335 "/checkout/src/libcore/option.rs"
  // unreachable;
 }
 $58 = HEAP8[$$pre$phi8Z2D>>0]|0; //@line 497 "/checkout/src/libcore/str/mod.rs"
 $59 = ($58<<24>>24)>(-1); //@line 498 "/checkout/src/libcore/str/mod.rs"
 if ($59) {
  $60 = $58&255; //@line 499 "/checkout/src/libcore/str/mod.rs"
  $90 = $60;
 } else {
  $61 = $58 & 31; //@line 472 "/checkout/src/libcore/str/mod.rs"
  $62 = $61&255; //@line 472 "/checkout/src/libcore/str/mod.rs"
  $63 = ($$59|0)==($55|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
  if ($63) {
   $71 = $55;$_0$0$i16$i$i = 0;
  } else {
   $64 = ((($$59)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
   $65 = HEAP8[$$59>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
   $phitmp$i$i = $65 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
   $71 = $64;$_0$0$i16$i$i = $phitmp$i$i;
  }
  $66 = $62 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
  $67 = $_0$0$i16$i$i&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
  $68 = $67 | $66; //@line 476 "/checkout/src/libcore/str/mod.rs"
  $69 = ($58&255)>(223); //@line 508 "/checkout/src/libcore/str/mod.rs"
  if ($69) {
   $70 = ($71|0)==($55|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
   if ($70) {
    $81 = $55;$_0$0$i10$i$i = 0;
   } else {
    $72 = ((($71)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
    $73 = HEAP8[$71>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
    $phitmp21$i$i = $73 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
    $81 = $72;$_0$0$i10$i$i = $phitmp21$i$i;
   }
   $74 = $67 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
   $75 = $_0$0$i10$i$i&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
   $76 = $75 | $74; //@line 476 "/checkout/src/libcore/str/mod.rs"
   $77 = $62 << 12; //@line 513 "/checkout/src/libcore/str/mod.rs"
   $78 = $76 | $77; //@line 513 "/checkout/src/libcore/str/mod.rs"
   $79 = ($58&255)>(239); //@line 514 "/checkout/src/libcore/str/mod.rs"
   if ($79) {
    $80 = ($81|0)==($55|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
    if ($80) {
     $_0$0$i5$i$i = 0;
    } else {
     $82 = HEAP8[$81>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
     $phitmp22$i$i = $82 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
     $_0$0$i5$i$i = $phitmp22$i$i;
    }
    $83 = $62 << 18; //@line 518 "/checkout/src/libcore/str/mod.rs"
    $84 = $83 & 1835008; //@line 518 "/checkout/src/libcore/str/mod.rs"
    $85 = $76 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
    $86 = $_0$0$i5$i$i&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
    $87 = $85 | $84; //@line 476 "/checkout/src/libcore/str/mod.rs"
    $88 = $87 | $86; //@line 518 "/checkout/src/libcore/str/mod.rs"
    $89 = ($88|0)==(1114112); //@line 334 "/checkout/src/libcore/option.rs"
    if ($89) {
     __ZN4core9panicking5panic17h9fa3414033a56a4dE(12680); //@line 335 "/checkout/src/libcore/option.rs"
     // unreachable;
    } else {
     $90 = $88;
    }
   } else {
    $90 = $78;
   }
  } else {
   $90 = $68;
  }
 }
 HEAP32[$ch>>2] = $90; //@line 2232 "/checkout/src/libcore/str/mod.rs"
 $91 = ($90>>>0)<(128); //@line 463 "/checkout/src/libcore/char.rs"
 $92 = ($90>>>0)<(2048); //@line 465 "/checkout/src/libcore/char.rs"
 $93 = ($90>>>0)<(65536); //@line 467 "/checkout/src/libcore/char.rs"
 $$$i = $93 ? 3 : 4; //@line 467 "/checkout/src/libcore/char.rs"
 $$$$i = $92 ? 2 : $$$i; //@line 465 "/checkout/src/libcore/char.rs"
 $$$$$i = $91 ? 1 : $$$$i; //@line 463 "/checkout/src/libcore/char.rs"
 $94 = (($$$$$i) + ($47))|0; //@line 2233 "/checkout/src/libcore/str/mod.rs"
 HEAP32[$char_range>>2] = $47; //@line 2233 "/checkout/src/libcore/str/mod.rs"
 $95 = ((($char_range)) + 4|0); //@line 2233 "/checkout/src/libcore/str/mod.rs"
 HEAP32[$95>>2] = $94; //@line 2233 "/checkout/src/libcore/str/mod.rs"
 HEAP32[$_133>>2] = $index; //@line 2234 "/checkout/src/libcore/str/mod.rs"
 $96 = ((($_133)) + 4|0); //@line 2234 "/checkout/src/libcore/str/mod.rs"
 HEAP32[$96>>2] = 289; //@line 2234 "/checkout/src/libcore/str/mod.rs"
 $97 = ((($_133)) + 8|0); //@line 2234 "/checkout/src/libcore/str/mod.rs"
 HEAP32[$97>>2] = $ch; //@line 2234 "/checkout/src/libcore/str/mod.rs"
 $98 = ((($_133)) + 12|0); //@line 2234 "/checkout/src/libcore/str/mod.rs"
 HEAP32[$98>>2] = 468; //@line 2234 "/checkout/src/libcore/str/mod.rs"
 $99 = ((($_133)) + 16|0); //@line 2234 "/checkout/src/libcore/str/mod.rs"
 HEAP32[$99>>2] = $char_range; //@line 2234 "/checkout/src/libcore/str/mod.rs"
 $100 = ((($_133)) + 20|0); //@line 2234 "/checkout/src/libcore/str/mod.rs"
 HEAP32[$100>>2] = 469; //@line 2234 "/checkout/src/libcore/str/mod.rs"
 $101 = ((($_133)) + 24|0); //@line 2234 "/checkout/src/libcore/str/mod.rs"
 HEAP32[$101>>2] = $s_trunc; //@line 2234 "/checkout/src/libcore/str/mod.rs"
 $102 = ((($_133)) + 28|0); //@line 2234 "/checkout/src/libcore/str/mod.rs"
 HEAP32[$102>>2] = 465; //@line 2234 "/checkout/src/libcore/str/mod.rs"
 $103 = ((($_133)) + 32|0); //@line 2234 "/checkout/src/libcore/str/mod.rs"
 HEAP32[$103>>2] = $ellipsis; //@line 2234 "/checkout/src/libcore/str/mod.rs"
 $104 = ((($_133)) + 36|0); //@line 2234 "/checkout/src/libcore/str/mod.rs"
 HEAP32[$104>>2] = 465; //@line 2234 "/checkout/src/libcore/str/mod.rs"
 HEAP32[$_126>>2] = 12704; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $105 = ((($_126)) + 4|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$105>>2] = 5; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $_5$sroa$0$0$$sroa_idx$i = ((($_126)) + 8|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5$sroa$0$0$$sroa_idx$i>>2] = 12744; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $_5$sroa$4$0$$sroa_idx2$i = ((($_126)) + 12|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$_5$sroa$4$0$$sroa_idx2$i>>2] = 5; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $106 = ((($_126)) + 16|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$106>>2] = $_133; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 $107 = ((($_126)) + 20|0); //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$107>>2] = 5; //@line 362 "/checkout/src/libcore/fmt/mod.rs"
 __ZN4core9panicking9panic_fmt17hff08f8fc41769480E($_126,12924); //@line 2234 "/checkout/src/libcore/str/mod.rs"
 // unreachable; //@line 2234 "/checkout/src/libcore/str/mod.rs"
}
function __ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_4find17hc80c29e7710dcacdE($0,$self$0,$self$1,$pat) {
 $0 = $0|0;
 $self$0 = $self$0|0;
 $self$1 = $self$1|0;
 $pat = $pat|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$i10$i$i = 0, $_0$0$i16$i$i = 0, $_0$0$i5$i$i = 0, $_2$i$sroa$6$1 = 0, $_2$sroa$6$0$i$i = 0, $_2$sroa$6$0$i$i$_5$sroa$6$0 = 0, $_5$sroa$6$0 = 0, $_5$sroa$6$0$ = 0, $_5$sroa$9$0 = 0, $_5$sroa$9$1 = 0, $_5$sroa$9$2 = 0;
 var $_5$sroa$9$3 = 0, $_5$sroa$9$4 = 0, $_5$sroa$9$6 = 0, $not$$i$i$i = 0, $phitmp$i$i = 0, $phitmp21$i$i = 0, $phitmp22$i$i = 0, $trunc$i$i = 0, $trunc$i$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($self$0) + ($self$1)|0); //@line 623 "/checkout/src/libcore/ptr.rs"
 $2 = $self$0; //@line 436 "/checkout/src/libcore/str/pattern.rs"
 $_2$sroa$6$0$i$i = 0;$_5$sroa$6$0 = 0;$_5$sroa$9$0 = $2;
 L1: while(1) {
  $3 = $_5$sroa$9$0; //@line 1135 "/checkout/src/libcore/slice/mod.rs"
  $4 = ($3|0)==($1|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
  $5 = ((($3)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
  $6 = $5; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
  $_5$sroa$9$1 = $4 ? $_5$sroa$9$0 : $6; //@line 1138 "/checkout/src/libcore/slice/mod.rs"
  $7 = ($_5$sroa$9$0|0)==(0); //@line 497 "/checkout/src/libcore/str/mod.rs"
  $8 = $7 | $4; //@line 497 "/checkout/src/libcore/str/mod.rs"
  if ($8) {
   label = 15;
   break;
  }
  $9 = HEAP8[$3>>0]|0; //@line 497 "/checkout/src/libcore/str/mod.rs"
  $10 = ($9<<24>>24)>(-1); //@line 498 "/checkout/src/libcore/str/mod.rs"
  if ($10) {
   $11 = $9&255; //@line 499 "/checkout/src/libcore/str/mod.rs"
   $_2$i$sroa$6$1 = $11;$_5$sroa$9$6 = $_5$sroa$9$1;
  } else {
   $12 = $9 & 31; //@line 472 "/checkout/src/libcore/str/mod.rs"
   $13 = $12&255; //@line 472 "/checkout/src/libcore/str/mod.rs"
   $14 = $_5$sroa$9$1; //@line 1135 "/checkout/src/libcore/slice/mod.rs"
   $15 = ($14|0)==($1|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
   if ($15) {
    $24 = $1;$_0$0$i16$i$i = 0;$_5$sroa$9$2 = $_5$sroa$9$1;
   } else {
    $16 = ((($14)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
    $17 = $16; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
    $18 = HEAP8[$14>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
    $phitmp$i$i = $18 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
    $24 = $16;$_0$0$i16$i$i = $phitmp$i$i;$_5$sroa$9$2 = $17;
   }
   $19 = $13 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
   $20 = $_0$0$i16$i$i&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
   $21 = $20 | $19; //@line 476 "/checkout/src/libcore/str/mod.rs"
   $22 = ($9&255)>(223); //@line 508 "/checkout/src/libcore/str/mod.rs"
   if ($22) {
    $23 = ($24|0)==($1|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
    if ($23) {
     $35 = $1;$_0$0$i10$i$i = 0;$_5$sroa$9$3 = $_5$sroa$9$2;
    } else {
     $25 = ((($24)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
     $26 = $25; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
     $27 = HEAP8[$24>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
     $phitmp21$i$i = $27 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
     $35 = $25;$_0$0$i10$i$i = $phitmp21$i$i;$_5$sroa$9$3 = $26;
    }
    $28 = $20 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
    $29 = $_0$0$i10$i$i&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
    $30 = $29 | $28; //@line 476 "/checkout/src/libcore/str/mod.rs"
    $31 = $13 << 12; //@line 513 "/checkout/src/libcore/str/mod.rs"
    $32 = $30 | $31; //@line 513 "/checkout/src/libcore/str/mod.rs"
    $33 = ($9&255)>(239); //@line 514 "/checkout/src/libcore/str/mod.rs"
    if ($33) {
     $34 = ($35|0)==($1|0); //@line 1138 "/checkout/src/libcore/slice/mod.rs"
     if ($34) {
      $_0$0$i5$i$i = 0;$_5$sroa$9$4 = $_5$sroa$9$3;
     } else {
      $36 = ((($35)) + 1|0); //@line 623 "/checkout/src/libcore/ptr.rs"
      $37 = $36; //@line 1532 "/checkout/src/libcore/slice/mod.rs"
      $38 = HEAP8[$35>>0]|0; //@line 486 "/checkout/src/libcore/str/mod.rs"
      $phitmp22$i$i = $38 & 63; //@line 485 "/checkout/src/libcore/str/mod.rs"
      $_0$0$i5$i$i = $phitmp22$i$i;$_5$sroa$9$4 = $37;
     }
     $39 = $13 << 18; //@line 518 "/checkout/src/libcore/str/mod.rs"
     $40 = $39 & 1835008; //@line 518 "/checkout/src/libcore/str/mod.rs"
     $41 = $30 << 6; //@line 476 "/checkout/src/libcore/str/mod.rs"
     $42 = $_0$0$i5$i$i&255; //@line 476 "/checkout/src/libcore/str/mod.rs"
     $43 = $41 | $40; //@line 476 "/checkout/src/libcore/str/mod.rs"
     $44 = $43 | $42; //@line 518 "/checkout/src/libcore/str/mod.rs"
     $_2$i$sroa$6$1 = $44;$_5$sroa$9$6 = $_5$sroa$9$4;
    } else {
     $_2$i$sroa$6$1 = $32;$_5$sroa$9$6 = $_5$sroa$9$3;
    }
   } else {
    $_2$i$sroa$6$1 = $21;$_5$sroa$9$6 = $_5$sroa$9$2;
   }
  }
  $45 = ($_2$i$sroa$6$1|0)==(1114112); //@line 664 "/checkout/src/libcore/str/mod.rs"
  $46 = (($_5$sroa$6$0) - ($_5$sroa$9$0))|0; //@line 668 "/checkout/src/libcore/str/mod.rs"
  $47 = (($46) + ($_5$sroa$9$6))|0; //@line 668 "/checkout/src/libcore/str/mod.rs"
  $not$$i$i$i = ($_2$i$sroa$6$1|0)!=($pat|0); //@line 315 "/checkout/src/libcore/str/pattern.rs"
  $_5$sroa$6$0$ = $45 ? $_5$sroa$6$0 : $47; //@line 664 "/checkout/src/libcore/str/mod.rs"
  $_2$sroa$6$0$i$i$_5$sroa$6$0 = $45 ? $_2$sroa$6$0$i$i : $_5$sroa$6$0; //@line 664 "/checkout/src/libcore/str/mod.rs"
  $48 = $not$$i$i$i&1; //@line 134 "/checkout/src/libcore/str/pattern.rs"
  $trunc$i$i = $45 ? 2 : $48; //@line 134 "/checkout/src/libcore/str/pattern.rs"
  $trunc$i$i$clear = $trunc$i$i & 3; //@line 134 "/checkout/src/libcore/str/pattern.rs"
  switch ($trunc$i$i$clear<<24>>24) {
  case 2:  {
   label = 15;
   break L1;
   break;
  }
  case 0:  {
   label = 16;
   break L1;
   break;
  }
  default: {
   $_2$sroa$6$0$i$i = $_2$sroa$6$0$i$i$_5$sroa$6$0;$_5$sroa$6$0 = $_5$sroa$6$0$;$_5$sroa$9$0 = $_5$sroa$9$6;
  }
  }
 }
 if ((label|0) == 15) {
  HEAP32[$0>>2] = 0; //@line 405 "/checkout/src/libcore/option.rs"
  return; //@line 2458 "/checkout/src/libcore/str/mod.rs"
 }
 else if ((label|0) == 16) {
  HEAP32[$0>>2] = 1; //@line 404 "/checkout/src/libcore/option.rs"
  $49 = ((($0)) + 4|0); //@line 404 "/checkout/src/libcore/option.rs"
  HEAP32[$49>>2] = $_2$sroa$6$0$i$i$_5$sroa$6$0; //@line 404 "/checkout/src/libcore/option.rs"
  return; //@line 2458 "/checkout/src/libcore/str/mod.rs"
 }
}
function __ZN57__LT_core__str__Utf8Error_u20_as_u20_core__fmt__Debug_GT_3fmt17hf6ef5786446e3e0cE($self,$__arg_0) {
 $self = $self|0;
 $__arg_0 = $__arg_0|0;
 var $$pre$i = 0, $$sink$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$off0$i$i = 0, $_16 = 0, $_24 = 0, $builder = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_24 = sp + 12|0;
 $_16 = sp + 8|0;
 $builder = sp;
 $0 = ((($self)) + 4|0); //@line 172 "/checkout/src/libcore/str/mod.rs"
 $1 = ((($__arg_0)) + 24|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $2 = HEAP32[$1>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $3 = ((($__arg_0)) + 28|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $4 = HEAP32[$3>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $5 = ((($4)) + 12|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $6 = HEAP32[$5>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 $7 = (FUNCTION_TABLE_iiii[$6 & 511]($2,29120,9)|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
 HEAP32[$builder>>2] = $__arg_0; //@line 96 "/checkout/src/libcore/fmt/builders.rs"
 $8 = ((($builder)) + 4|0); //@line 96 "/checkout/src/libcore/fmt/builders.rs"
 $9 = $7&1; //@line 96 "/checkout/src/libcore/fmt/builders.rs"
 HEAP8[$8>>0] = $9; //@line 96 "/checkout/src/libcore/fmt/builders.rs"
 $10 = ((($builder)) + 5|0); //@line 96 "/checkout/src/libcore/fmt/builders.rs"
 HEAP8[$10>>0] = 0; //@line 96 "/checkout/src/libcore/fmt/builders.rs"
 HEAP32[$_16>>2] = $self; //@line 171 "/checkout/src/libcore/str/mod.rs"
 (__ZN4core3fmt8builders11DebugStruct5field17h5f57368d80e04997E($builder,29129,11,$_16,12940)|0); //@line 168 "/checkout/src/libcore/str/mod.rs"
 HEAP32[$_24>>2] = $0; //@line 172 "/checkout/src/libcore/str/mod.rs"
 (__ZN4core3fmt8builders11DebugStruct5field17h5f57368d80e04997E($builder,29140,9,$_24,12956)|0); //@line 168 "/checkout/src/libcore/str/mod.rs"
 $11 = HEAP8[$10>>0]|0; //@line 130 "/checkout/src/libcore/fmt/builders.rs"
 $12 = ($11<<24>>24)==(0); //@line 130 "/checkout/src/libcore/fmt/builders.rs"
 $$pre$i = HEAP8[$8>>0]|0;
 if ($12) {
  $26 = $$pre$i;
  $25 = ($26<<24>>24)!=(0); //@line 139 "/checkout/src/libcore/fmt/builders.rs"
  STACKTOP = sp;return ($25|0); //@line 168 "/checkout/src/libcore/str/mod.rs"
 }
 $13 = ($$pre$i<<24>>24)==(0); //@line 131 "/checkout/src/libcore/fmt/builders.rs"
 if ($13) {
  $14 = HEAP32[$builder>>2]|0; //@line 143 "/checkout/src/libcore/fmt/builders.rs"
  $15 = HEAP32[$14>>2]|0; //@line 1367 "/checkout/src/libcore/fmt/mod.rs"
  $16 = $15 & 4; //@line 1367 "/checkout/src/libcore/fmt/mod.rs"
  $17 = ($16|0)!=(0); //@line 1367 "/checkout/src/libcore/fmt/mod.rs"
  $$sink$i$i$i = $17 ? 25939 : 25941; //@line 132 "/checkout/src/libcore/fmt/builders.rs"
  $18 = ((($14)) + 24|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $19 = HEAP32[$18>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $20 = ((($14)) + 28|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $21 = HEAP32[$20>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $22 = ((($21)) + 12|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $23 = HEAP32[$22>>2]|0; //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $24 = (FUNCTION_TABLE_iiii[$23 & 511]($19,$$sink$i$i$i,2)|0); //@line 1317 "/checkout/src/libcore/fmt/mod.rs"
  $phitmp$i = $24&1;
  $_0$0$off0$i$i = $phitmp$i;
 } else {
  $_0$0$off0$i$i = 1;
 }
 HEAP8[$8>>0] = $_0$0$off0$i$i; //@line 131 "/checkout/src/libcore/fmt/builders.rs"
 $26 = $_0$0$off0$i$i;
 $25 = ($26<<24>>24)!=(0); //@line 139 "/checkout/src/libcore/fmt/builders.rs"
 STACKTOP = sp;return ($25|0); //@line 168 "/checkout/src/libcore/str/mod.rs"
}
function __ZN4core3ptr13drop_in_place17h912bcfafe45fc5baE($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function __ZN4core3ptr13drop_in_place17h2c097ae07b5f434dE_2754($arg0) {
 $arg0 = $arg0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return; //@line 59 "/checkout/src/libcore/ptr.rs"
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0192$i = 0, $$$0193$i = 0, $$$4236$i = 0, $$$4351$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i18$i = 0, $$01$i$i = 0, $$0189$i = 0, $$0192$lcssa$i = 0, $$01928$i = 0, $$0193$lcssa$i = 0, $$01937$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0;
 var $$0212$i$i = 0, $$024371$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0289$i$i = 0, $$0295$i$i = 0, $$0296$i$i = 0, $$0342$i = 0, $$0344$i = 0, $$0345$i = 0, $$0347$i = 0, $$0353$i = 0, $$0358$i = 0, $$0359$$i = 0, $$0359$i = 0, $$0361$i = 0, $$0362$i = 0, $$0368$i = 0, $$1196$i = 0, $$1198$i = 0;
 var $$124470$i = 0, $$1291$i$i = 0, $$1293$i$i = 0, $$1343$i = 0, $$1348$i = 0, $$1363$i = 0, $$1370$i = 0, $$1374$i = 0, $$2234253237$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2355$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i201 = 0, $$3350$i = 0, $$3372$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$415$i = 0;
 var $$4236$i = 0, $$4351$lcssa$i = 0, $$435114$i = 0, $$4357$$4$i = 0, $$4357$ph$i = 0, $$435713$i = 0, $$723948$i = 0, $$749$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i19$i = 0, $$pre$i210 = 0, $$pre$i212 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i20$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi11$i$iZ2D = 0, $$pre$phiZ2D = 0;
 var $$pre10$i$i = 0, $$sink1$i = 0, $$sink1$i$i = 0, $$sink16$i = 0, $$sink2$i = 0, $$sink2$i204 = 0, $$sink3$i = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0;
 var $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0;
 var $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0;
 var $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0;
 var $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0;
 var $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0;
 var $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0;
 var $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0;
 var $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0;
 var $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0;
 var $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0;
 var $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0;
 var $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0;
 var $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0;
 var $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i208 = 0, $exitcond$i$i = 0, $not$$i = 0, $not$$i$i = 0, $not$$i17$i = 0, $not$$i209 = 0, $not$$i216 = 0, $not$1$i = 0, $not$1$i203 = 0, $not$5$i = 0, $not$7$i$i = 0, $not$8$i = 0, $not$9$i = 0;
 var $or$cond$i = 0, $or$cond$i214 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond11$not$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond2$i215 = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond51$i = 0, $or$cond7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[9655]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (38660 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($16|0)==($20|0);
    do {
     if ($21) {
      $22 = 1 << $14;
      $23 = $22 ^ -1;
      $24 = $8 & $23;
      HEAP32[9655] = $24;
     } else {
      $25 = HEAP32[(38636)>>2]|0;
      $26 = ($20>>>0)<($25>>>0);
      if ($26) {
       _abort();
       // unreachable;
      }
      $27 = ((($20)) + 12|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ($28|0)==($18|0);
      if ($29) {
       HEAP32[$27>>2] = $16;
       HEAP32[$17>>2] = $20;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $30 = $14 << 3;
    $31 = $30 | 3;
    $32 = ((($18)) + 4|0);
    HEAP32[$32>>2] = $31;
    $33 = (($18) + ($30)|0);
    $34 = ((($33)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $35 | 1;
    HEAP32[$34>>2] = $36;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $37 = HEAP32[(38628)>>2]|0;
   $38 = ($6>>>0)>($37>>>0);
   if ($38) {
    $39 = ($9|0)==(0);
    if (!($39)) {
     $40 = $9 << $7;
     $41 = 2 << $7;
     $42 = (0 - ($41))|0;
     $43 = $41 | $42;
     $44 = $40 & $43;
     $45 = (0 - ($44))|0;
     $46 = $44 & $45;
     $47 = (($46) + -1)|0;
     $48 = $47 >>> 12;
     $49 = $48 & 16;
     $50 = $47 >>> $49;
     $51 = $50 >>> 5;
     $52 = $51 & 8;
     $53 = $52 | $49;
     $54 = $50 >>> $52;
     $55 = $54 >>> 2;
     $56 = $55 & 4;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 2;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = $62 >>> 1;
     $64 = $63 & 1;
     $65 = $61 | $64;
     $66 = $62 >>> $64;
     $67 = (($65) + ($66))|0;
     $68 = $67 << 1;
     $69 = (38660 + ($68<<2)|0);
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($71)) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($69|0)==($73|0);
     do {
      if ($74) {
       $75 = 1 << $67;
       $76 = $75 ^ -1;
       $77 = $8 & $76;
       HEAP32[9655] = $77;
       $98 = $77;
      } else {
       $78 = HEAP32[(38636)>>2]|0;
       $79 = ($73>>>0)<($78>>>0);
       if ($79) {
        _abort();
        // unreachable;
       }
       $80 = ((($73)) + 12|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($81|0)==($71|0);
       if ($82) {
        HEAP32[$80>>2] = $69;
        HEAP32[$70>>2] = $73;
        $98 = $8;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $83 = $67 << 3;
     $84 = (($83) - ($6))|0;
     $85 = $6 | 3;
     $86 = ((($71)) + 4|0);
     HEAP32[$86>>2] = $85;
     $87 = (($71) + ($6)|0);
     $88 = $84 | 1;
     $89 = ((($87)) + 4|0);
     HEAP32[$89>>2] = $88;
     $90 = (($87) + ($84)|0);
     HEAP32[$90>>2] = $84;
     $91 = ($37|0)==(0);
     if (!($91)) {
      $92 = HEAP32[(38640)>>2]|0;
      $93 = $37 >>> 3;
      $94 = $93 << 1;
      $95 = (38660 + ($94<<2)|0);
      $96 = 1 << $93;
      $97 = $98 & $96;
      $99 = ($97|0)==(0);
      if ($99) {
       $100 = $98 | $96;
       HEAP32[9655] = $100;
       $$pre = ((($95)) + 8|0);
       $$0199 = $95;$$pre$phiZ2D = $$pre;
      } else {
       $101 = ((($95)) + 8|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = HEAP32[(38636)>>2]|0;
       $104 = ($102>>>0)<($103>>>0);
       if ($104) {
        _abort();
        // unreachable;
       } else {
        $$0199 = $102;$$pre$phiZ2D = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $92;
      $105 = ((($$0199)) + 12|0);
      HEAP32[$105>>2] = $92;
      $106 = ((($92)) + 8|0);
      HEAP32[$106>>2] = $$0199;
      $107 = ((($92)) + 12|0);
      HEAP32[$107>>2] = $95;
     }
     HEAP32[(38628)>>2] = $84;
     HEAP32[(38640)>>2] = $87;
     $$0 = $72;
     STACKTOP = sp;return ($$0|0);
    }
    $108 = HEAP32[(38624)>>2]|0;
    $109 = ($108|0)==(0);
    if ($109) {
     $$0197 = $6;
    } else {
     $110 = (0 - ($108))|0;
     $111 = $108 & $110;
     $112 = (($111) + -1)|0;
     $113 = $112 >>> 12;
     $114 = $113 & 16;
     $115 = $112 >>> $114;
     $116 = $115 >>> 5;
     $117 = $116 & 8;
     $118 = $117 | $114;
     $119 = $115 >>> $117;
     $120 = $119 >>> 2;
     $121 = $120 & 4;
     $122 = $118 | $121;
     $123 = $119 >>> $121;
     $124 = $123 >>> 1;
     $125 = $124 & 2;
     $126 = $122 | $125;
     $127 = $123 >>> $125;
     $128 = $127 >>> 1;
     $129 = $128 & 1;
     $130 = $126 | $129;
     $131 = $127 >>> $129;
     $132 = (($130) + ($131))|0;
     $133 = (38924 + ($132<<2)|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ((($134)) + 4|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $136 & -8;
     $138 = (($137) - ($6))|0;
     $139 = ((($134)) + 16|0);
     $140 = HEAP32[$139>>2]|0;
     $not$5$i = ($140|0)==(0|0);
     $$sink16$i = $not$5$i&1;
     $141 = (((($134)) + 16|0) + ($$sink16$i<<2)|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($142|0)==(0|0);
     if ($143) {
      $$0192$lcssa$i = $134;$$0193$lcssa$i = $138;
     } else {
      $$01928$i = $134;$$01937$i = $138;$145 = $142;
      while(1) {
       $144 = ((($145)) + 4|0);
       $146 = HEAP32[$144>>2]|0;
       $147 = $146 & -8;
       $148 = (($147) - ($6))|0;
       $149 = ($148>>>0)<($$01937$i>>>0);
       $$$0193$i = $149 ? $148 : $$01937$i;
       $$$0192$i = $149 ? $145 : $$01928$i;
       $150 = ((($145)) + 16|0);
       $151 = HEAP32[$150>>2]|0;
       $not$$i = ($151|0)==(0|0);
       $$sink1$i = $not$$i&1;
       $152 = (((($145)) + 16|0) + ($$sink1$i<<2)|0);
       $153 = HEAP32[$152>>2]|0;
       $154 = ($153|0)==(0|0);
       if ($154) {
        $$0192$lcssa$i = $$$0192$i;$$0193$lcssa$i = $$$0193$i;
        break;
       } else {
        $$01928$i = $$$0192$i;$$01937$i = $$$0193$i;$145 = $153;
       }
      }
     }
     $155 = HEAP32[(38636)>>2]|0;
     $156 = ($$0192$lcssa$i>>>0)<($155>>>0);
     if ($156) {
      _abort();
      // unreachable;
     }
     $157 = (($$0192$lcssa$i) + ($6)|0);
     $158 = ($$0192$lcssa$i>>>0)<($157>>>0);
     if (!($158)) {
      _abort();
      // unreachable;
     }
     $159 = ((($$0192$lcssa$i)) + 24|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ((($$0192$lcssa$i)) + 12|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = ($162|0)==($$0192$lcssa$i|0);
     do {
      if ($163) {
       $173 = ((($$0192$lcssa$i)) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if ($175) {
        $176 = ((($$0192$lcssa$i)) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $$3$i = 0;
         break;
        } else {
         $$1196$i = $177;$$1198$i = $176;
        }
       } else {
        $$1196$i = $174;$$1198$i = $173;
       }
       while(1) {
        $179 = ((($$1196$i)) + 20|0);
        $180 = HEAP32[$179>>2]|0;
        $181 = ($180|0)==(0|0);
        if (!($181)) {
         $$1196$i = $180;$$1198$i = $179;
         continue;
        }
        $182 = ((($$1196$i)) + 16|0);
        $183 = HEAP32[$182>>2]|0;
        $184 = ($183|0)==(0|0);
        if ($184) {
         break;
        } else {
         $$1196$i = $183;$$1198$i = $182;
        }
       }
       $185 = ($$1198$i>>>0)<($155>>>0);
       if ($185) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$1198$i>>2] = 0;
        $$3$i = $$1196$i;
        break;
       }
      } else {
       $164 = ((($$0192$lcssa$i)) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165>>>0)<($155>>>0);
       if ($166) {
        _abort();
        // unreachable;
       }
       $167 = ((($165)) + 12|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==($$0192$lcssa$i|0);
       if (!($169)) {
        _abort();
        // unreachable;
       }
       $170 = ((($162)) + 8|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==($$0192$lcssa$i|0);
       if ($172) {
        HEAP32[$167>>2] = $162;
        HEAP32[$170>>2] = $165;
        $$3$i = $162;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $186 = ($160|0)==(0|0);
     L73: do {
      if (!($186)) {
       $187 = ((($$0192$lcssa$i)) + 28|0);
       $188 = HEAP32[$187>>2]|0;
       $189 = (38924 + ($188<<2)|0);
       $190 = HEAP32[$189>>2]|0;
       $191 = ($$0192$lcssa$i|0)==($190|0);
       do {
        if ($191) {
         HEAP32[$189>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $192 = 1 << $188;
          $193 = $192 ^ -1;
          $194 = $108 & $193;
          HEAP32[(38624)>>2] = $194;
          break L73;
         }
        } else {
         $195 = HEAP32[(38636)>>2]|0;
         $196 = ($160>>>0)<($195>>>0);
         if ($196) {
          _abort();
          // unreachable;
         } else {
          $197 = ((($160)) + 16|0);
          $198 = HEAP32[$197>>2]|0;
          $not$1$i = ($198|0)!=($$0192$lcssa$i|0);
          $$sink2$i = $not$1$i&1;
          $199 = (((($160)) + 16|0) + ($$sink2$i<<2)|0);
          HEAP32[$199>>2] = $$3$i;
          $200 = ($$3$i|0)==(0|0);
          if ($200) {
           break L73;
          } else {
           break;
          }
         }
        }
       } while(0);
       $201 = HEAP32[(38636)>>2]|0;
       $202 = ($$3$i>>>0)<($201>>>0);
       if ($202) {
        _abort();
        // unreachable;
       }
       $203 = ((($$3$i)) + 24|0);
       HEAP32[$203>>2] = $160;
       $204 = ((($$0192$lcssa$i)) + 16|0);
       $205 = HEAP32[$204>>2]|0;
       $206 = ($205|0)==(0|0);
       do {
        if (!($206)) {
         $207 = ($205>>>0)<($201>>>0);
         if ($207) {
          _abort();
          // unreachable;
         } else {
          $208 = ((($$3$i)) + 16|0);
          HEAP32[$208>>2] = $205;
          $209 = ((($205)) + 24|0);
          HEAP32[$209>>2] = $$3$i;
          break;
         }
        }
       } while(0);
       $210 = ((($$0192$lcssa$i)) + 20|0);
       $211 = HEAP32[$210>>2]|0;
       $212 = ($211|0)==(0|0);
       if (!($212)) {
        $213 = HEAP32[(38636)>>2]|0;
        $214 = ($211>>>0)<($213>>>0);
        if ($214) {
         _abort();
         // unreachable;
        } else {
         $215 = ((($$3$i)) + 20|0);
         HEAP32[$215>>2] = $211;
         $216 = ((($211)) + 24|0);
         HEAP32[$216>>2] = $$3$i;
         break;
        }
       }
      }
     } while(0);
     $217 = ($$0193$lcssa$i>>>0)<(16);
     if ($217) {
      $218 = (($$0193$lcssa$i) + ($6))|0;
      $219 = $218 | 3;
      $220 = ((($$0192$lcssa$i)) + 4|0);
      HEAP32[$220>>2] = $219;
      $221 = (($$0192$lcssa$i) + ($218)|0);
      $222 = ((($221)) + 4|0);
      $223 = HEAP32[$222>>2]|0;
      $224 = $223 | 1;
      HEAP32[$222>>2] = $224;
     } else {
      $225 = $6 | 3;
      $226 = ((($$0192$lcssa$i)) + 4|0);
      HEAP32[$226>>2] = $225;
      $227 = $$0193$lcssa$i | 1;
      $228 = ((($157)) + 4|0);
      HEAP32[$228>>2] = $227;
      $229 = (($157) + ($$0193$lcssa$i)|0);
      HEAP32[$229>>2] = $$0193$lcssa$i;
      $230 = ($37|0)==(0);
      if (!($230)) {
       $231 = HEAP32[(38640)>>2]|0;
       $232 = $37 >>> 3;
       $233 = $232 << 1;
       $234 = (38660 + ($233<<2)|0);
       $235 = 1 << $232;
       $236 = $8 & $235;
       $237 = ($236|0)==(0);
       if ($237) {
        $238 = $8 | $235;
        HEAP32[9655] = $238;
        $$pre$i = ((($234)) + 8|0);
        $$0189$i = $234;$$pre$phi$iZ2D = $$pre$i;
       } else {
        $239 = ((($234)) + 8|0);
        $240 = HEAP32[$239>>2]|0;
        $241 = HEAP32[(38636)>>2]|0;
        $242 = ($240>>>0)<($241>>>0);
        if ($242) {
         _abort();
         // unreachable;
        } else {
         $$0189$i = $240;$$pre$phi$iZ2D = $239;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $231;
       $243 = ((($$0189$i)) + 12|0);
       HEAP32[$243>>2] = $231;
       $244 = ((($231)) + 8|0);
       HEAP32[$244>>2] = $$0189$i;
       $245 = ((($231)) + 12|0);
       HEAP32[$245>>2] = $234;
      }
      HEAP32[(38628)>>2] = $$0193$lcssa$i;
      HEAP32[(38640)>>2] = $157;
     }
     $246 = ((($$0192$lcssa$i)) + 8|0);
     $$0 = $246;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $$0197 = $6;
   }
  } else {
   $247 = ($0>>>0)>(4294967231);
   if ($247) {
    $$0197 = -1;
   } else {
    $248 = (($0) + 11)|0;
    $249 = $248 & -8;
    $250 = HEAP32[(38624)>>2]|0;
    $251 = ($250|0)==(0);
    if ($251) {
     $$0197 = $249;
    } else {
     $252 = (0 - ($249))|0;
     $253 = $248 >>> 8;
     $254 = ($253|0)==(0);
     if ($254) {
      $$0358$i = 0;
     } else {
      $255 = ($249>>>0)>(16777215);
      if ($255) {
       $$0358$i = 31;
      } else {
       $256 = (($253) + 1048320)|0;
       $257 = $256 >>> 16;
       $258 = $257 & 8;
       $259 = $253 << $258;
       $260 = (($259) + 520192)|0;
       $261 = $260 >>> 16;
       $262 = $261 & 4;
       $263 = $262 | $258;
       $264 = $259 << $262;
       $265 = (($264) + 245760)|0;
       $266 = $265 >>> 16;
       $267 = $266 & 2;
       $268 = $263 | $267;
       $269 = (14 - ($268))|0;
       $270 = $264 << $267;
       $271 = $270 >>> 15;
       $272 = (($269) + ($271))|0;
       $273 = $272 << 1;
       $274 = (($272) + 7)|0;
       $275 = $249 >>> $274;
       $276 = $275 & 1;
       $277 = $276 | $273;
       $$0358$i = $277;
      }
     }
     $278 = (38924 + ($$0358$i<<2)|0);
     $279 = HEAP32[$278>>2]|0;
     $280 = ($279|0)==(0|0);
     L117: do {
      if ($280) {
       $$2355$i = 0;$$3$i201 = 0;$$3350$i = $252;
       label = 81;
      } else {
       $281 = ($$0358$i|0)==(31);
       $282 = $$0358$i >>> 1;
       $283 = (25 - ($282))|0;
       $284 = $281 ? 0 : $283;
       $285 = $249 << $284;
       $$0342$i = 0;$$0347$i = $252;$$0353$i = $279;$$0359$i = $285;$$0362$i = 0;
       while(1) {
        $286 = ((($$0353$i)) + 4|0);
        $287 = HEAP32[$286>>2]|0;
        $288 = $287 & -8;
        $289 = (($288) - ($249))|0;
        $290 = ($289>>>0)<($$0347$i>>>0);
        if ($290) {
         $291 = ($289|0)==(0);
         if ($291) {
          $$415$i = $$0353$i;$$435114$i = 0;$$435713$i = $$0353$i;
          label = 85;
          break L117;
         } else {
          $$1343$i = $$0353$i;$$1348$i = $289;
         }
        } else {
         $$1343$i = $$0342$i;$$1348$i = $$0347$i;
        }
        $292 = ((($$0353$i)) + 20|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = $$0359$i >>> 31;
        $295 = (((($$0353$i)) + 16|0) + ($294<<2)|0);
        $296 = HEAP32[$295>>2]|0;
        $297 = ($293|0)==(0|0);
        $298 = ($293|0)==($296|0);
        $or$cond2$i = $297 | $298;
        $$1363$i = $or$cond2$i ? $$0362$i : $293;
        $299 = ($296|0)==(0|0);
        $not$8$i = $299 ^ 1;
        $300 = $not$8$i&1;
        $$0359$$i = $$0359$i << $300;
        if ($299) {
         $$2355$i = $$1363$i;$$3$i201 = $$1343$i;$$3350$i = $$1348$i;
         label = 81;
         break;
        } else {
         $$0342$i = $$1343$i;$$0347$i = $$1348$i;$$0353$i = $296;$$0359$i = $$0359$$i;$$0362$i = $$1363$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 81) {
      $301 = ($$2355$i|0)==(0|0);
      $302 = ($$3$i201|0)==(0|0);
      $or$cond$i = $301 & $302;
      if ($or$cond$i) {
       $303 = 2 << $$0358$i;
       $304 = (0 - ($303))|0;
       $305 = $303 | $304;
       $306 = $250 & $305;
       $307 = ($306|0)==(0);
       if ($307) {
        $$0197 = $249;
        break;
       }
       $308 = (0 - ($306))|0;
       $309 = $306 & $308;
       $310 = (($309) + -1)|0;
       $311 = $310 >>> 12;
       $312 = $311 & 16;
       $313 = $310 >>> $312;
       $314 = $313 >>> 5;
       $315 = $314 & 8;
       $316 = $315 | $312;
       $317 = $313 >>> $315;
       $318 = $317 >>> 2;
       $319 = $318 & 4;
       $320 = $316 | $319;
       $321 = $317 >>> $319;
       $322 = $321 >>> 1;
       $323 = $322 & 2;
       $324 = $320 | $323;
       $325 = $321 >>> $323;
       $326 = $325 >>> 1;
       $327 = $326 & 1;
       $328 = $324 | $327;
       $329 = $325 >>> $327;
       $330 = (($328) + ($329))|0;
       $331 = (38924 + ($330<<2)|0);
       $332 = HEAP32[$331>>2]|0;
       $$4$ph$i = 0;$$4357$ph$i = $332;
      } else {
       $$4$ph$i = $$3$i201;$$4357$ph$i = $$2355$i;
      }
      $333 = ($$4357$ph$i|0)==(0|0);
      if ($333) {
       $$4$lcssa$i = $$4$ph$i;$$4351$lcssa$i = $$3350$i;
      } else {
       $$415$i = $$4$ph$i;$$435114$i = $$3350$i;$$435713$i = $$4357$ph$i;
       label = 85;
      }
     }
     if ((label|0) == 85) {
      while(1) {
       label = 0;
       $334 = ((($$435713$i)) + 4|0);
       $335 = HEAP32[$334>>2]|0;
       $336 = $335 & -8;
       $337 = (($336) - ($249))|0;
       $338 = ($337>>>0)<($$435114$i>>>0);
       $$$4351$i = $338 ? $337 : $$435114$i;
       $$4357$$4$i = $338 ? $$435713$i : $$415$i;
       $339 = ((($$435713$i)) + 16|0);
       $340 = HEAP32[$339>>2]|0;
       $not$1$i203 = ($340|0)==(0|0);
       $$sink2$i204 = $not$1$i203&1;
       $341 = (((($$435713$i)) + 16|0) + ($$sink2$i204<<2)|0);
       $342 = HEAP32[$341>>2]|0;
       $343 = ($342|0)==(0|0);
       if ($343) {
        $$4$lcssa$i = $$4357$$4$i;$$4351$lcssa$i = $$$4351$i;
        break;
       } else {
        $$415$i = $$4357$$4$i;$$435114$i = $$$4351$i;$$435713$i = $342;
        label = 85;
       }
      }
     }
     $344 = ($$4$lcssa$i|0)==(0|0);
     if ($344) {
      $$0197 = $249;
     } else {
      $345 = HEAP32[(38628)>>2]|0;
      $346 = (($345) - ($249))|0;
      $347 = ($$4351$lcssa$i>>>0)<($346>>>0);
      if ($347) {
       $348 = HEAP32[(38636)>>2]|0;
       $349 = ($$4$lcssa$i>>>0)<($348>>>0);
       if ($349) {
        _abort();
        // unreachable;
       }
       $350 = (($$4$lcssa$i) + ($249)|0);
       $351 = ($$4$lcssa$i>>>0)<($350>>>0);
       if (!($351)) {
        _abort();
        // unreachable;
       }
       $352 = ((($$4$lcssa$i)) + 24|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ((($$4$lcssa$i)) + 12|0);
       $355 = HEAP32[$354>>2]|0;
       $356 = ($355|0)==($$4$lcssa$i|0);
       do {
        if ($356) {
         $366 = ((($$4$lcssa$i)) + 20|0);
         $367 = HEAP32[$366>>2]|0;
         $368 = ($367|0)==(0|0);
         if ($368) {
          $369 = ((($$4$lcssa$i)) + 16|0);
          $370 = HEAP32[$369>>2]|0;
          $371 = ($370|0)==(0|0);
          if ($371) {
           $$3372$i = 0;
           break;
          } else {
           $$1370$i = $370;$$1374$i = $369;
          }
         } else {
          $$1370$i = $367;$$1374$i = $366;
         }
         while(1) {
          $372 = ((($$1370$i)) + 20|0);
          $373 = HEAP32[$372>>2]|0;
          $374 = ($373|0)==(0|0);
          if (!($374)) {
           $$1370$i = $373;$$1374$i = $372;
           continue;
          }
          $375 = ((($$1370$i)) + 16|0);
          $376 = HEAP32[$375>>2]|0;
          $377 = ($376|0)==(0|0);
          if ($377) {
           break;
          } else {
           $$1370$i = $376;$$1374$i = $375;
          }
         }
         $378 = ($$1374$i>>>0)<($348>>>0);
         if ($378) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$1374$i>>2] = 0;
          $$3372$i = $$1370$i;
          break;
         }
        } else {
         $357 = ((($$4$lcssa$i)) + 8|0);
         $358 = HEAP32[$357>>2]|0;
         $359 = ($358>>>0)<($348>>>0);
         if ($359) {
          _abort();
          // unreachable;
         }
         $360 = ((($358)) + 12|0);
         $361 = HEAP32[$360>>2]|0;
         $362 = ($361|0)==($$4$lcssa$i|0);
         if (!($362)) {
          _abort();
          // unreachable;
         }
         $363 = ((($355)) + 8|0);
         $364 = HEAP32[$363>>2]|0;
         $365 = ($364|0)==($$4$lcssa$i|0);
         if ($365) {
          HEAP32[$360>>2] = $355;
          HEAP32[$363>>2] = $358;
          $$3372$i = $355;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $379 = ($353|0)==(0|0);
       L164: do {
        if ($379) {
         $470 = $250;
        } else {
         $380 = ((($$4$lcssa$i)) + 28|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = (38924 + ($381<<2)|0);
         $383 = HEAP32[$382>>2]|0;
         $384 = ($$4$lcssa$i|0)==($383|0);
         do {
          if ($384) {
           HEAP32[$382>>2] = $$3372$i;
           $cond$i208 = ($$3372$i|0)==(0|0);
           if ($cond$i208) {
            $385 = 1 << $381;
            $386 = $385 ^ -1;
            $387 = $250 & $386;
            HEAP32[(38624)>>2] = $387;
            $470 = $387;
            break L164;
           }
          } else {
           $388 = HEAP32[(38636)>>2]|0;
           $389 = ($353>>>0)<($388>>>0);
           if ($389) {
            _abort();
            // unreachable;
           } else {
            $390 = ((($353)) + 16|0);
            $391 = HEAP32[$390>>2]|0;
            $not$$i209 = ($391|0)!=($$4$lcssa$i|0);
            $$sink3$i = $not$$i209&1;
            $392 = (((($353)) + 16|0) + ($$sink3$i<<2)|0);
            HEAP32[$392>>2] = $$3372$i;
            $393 = ($$3372$i|0)==(0|0);
            if ($393) {
             $470 = $250;
             break L164;
            } else {
             break;
            }
           }
          }
         } while(0);
         $394 = HEAP32[(38636)>>2]|0;
         $395 = ($$3372$i>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($$3372$i)) + 24|0);
         HEAP32[$396>>2] = $353;
         $397 = ((($$4$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($$3372$i)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $$3372$i;
            break;
           }
          }
         } while(0);
         $403 = ((($$4$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if ($405) {
          $470 = $250;
         } else {
          $406 = HEAP32[(38636)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($$3372$i)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $$3372$i;
           $470 = $250;
           break;
          }
         }
        }
       } while(0);
       $410 = ($$4351$lcssa$i>>>0)<(16);
       do {
        if ($410) {
         $411 = (($$4351$lcssa$i) + ($249))|0;
         $412 = $411 | 3;
         $413 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $414 = (($$4$lcssa$i) + ($411)|0);
         $415 = ((($414)) + 4|0);
         $416 = HEAP32[$415>>2]|0;
         $417 = $416 | 1;
         HEAP32[$415>>2] = $417;
        } else {
         $418 = $249 | 3;
         $419 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$419>>2] = $418;
         $420 = $$4351$lcssa$i | 1;
         $421 = ((($350)) + 4|0);
         HEAP32[$421>>2] = $420;
         $422 = (($350) + ($$4351$lcssa$i)|0);
         HEAP32[$422>>2] = $$4351$lcssa$i;
         $423 = $$4351$lcssa$i >>> 3;
         $424 = ($$4351$lcssa$i>>>0)<(256);
         if ($424) {
          $425 = $423 << 1;
          $426 = (38660 + ($425<<2)|0);
          $427 = HEAP32[9655]|0;
          $428 = 1 << $423;
          $429 = $427 & $428;
          $430 = ($429|0)==(0);
          if ($430) {
           $431 = $427 | $428;
           HEAP32[9655] = $431;
           $$pre$i210 = ((($426)) + 8|0);
           $$0368$i = $426;$$pre$phi$i211Z2D = $$pre$i210;
          } else {
           $432 = ((($426)) + 8|0);
           $433 = HEAP32[$432>>2]|0;
           $434 = HEAP32[(38636)>>2]|0;
           $435 = ($433>>>0)<($434>>>0);
           if ($435) {
            _abort();
            // unreachable;
           } else {
            $$0368$i = $433;$$pre$phi$i211Z2D = $432;
           }
          }
          HEAP32[$$pre$phi$i211Z2D>>2] = $350;
          $436 = ((($$0368$i)) + 12|0);
          HEAP32[$436>>2] = $350;
          $437 = ((($350)) + 8|0);
          HEAP32[$437>>2] = $$0368$i;
          $438 = ((($350)) + 12|0);
          HEAP32[$438>>2] = $426;
          break;
         }
         $439 = $$4351$lcssa$i >>> 8;
         $440 = ($439|0)==(0);
         if ($440) {
          $$0361$i = 0;
         } else {
          $441 = ($$4351$lcssa$i>>>0)>(16777215);
          if ($441) {
           $$0361$i = 31;
          } else {
           $442 = (($439) + 1048320)|0;
           $443 = $442 >>> 16;
           $444 = $443 & 8;
           $445 = $439 << $444;
           $446 = (($445) + 520192)|0;
           $447 = $446 >>> 16;
           $448 = $447 & 4;
           $449 = $448 | $444;
           $450 = $445 << $448;
           $451 = (($450) + 245760)|0;
           $452 = $451 >>> 16;
           $453 = $452 & 2;
           $454 = $449 | $453;
           $455 = (14 - ($454))|0;
           $456 = $450 << $453;
           $457 = $456 >>> 15;
           $458 = (($455) + ($457))|0;
           $459 = $458 << 1;
           $460 = (($458) + 7)|0;
           $461 = $$4351$lcssa$i >>> $460;
           $462 = $461 & 1;
           $463 = $462 | $459;
           $$0361$i = $463;
          }
         }
         $464 = (38924 + ($$0361$i<<2)|0);
         $465 = ((($350)) + 28|0);
         HEAP32[$465>>2] = $$0361$i;
         $466 = ((($350)) + 16|0);
         $467 = ((($466)) + 4|0);
         HEAP32[$467>>2] = 0;
         HEAP32[$466>>2] = 0;
         $468 = 1 << $$0361$i;
         $469 = $470 & $468;
         $471 = ($469|0)==(0);
         if ($471) {
          $472 = $470 | $468;
          HEAP32[(38624)>>2] = $472;
          HEAP32[$464>>2] = $350;
          $473 = ((($350)) + 24|0);
          HEAP32[$473>>2] = $464;
          $474 = ((($350)) + 12|0);
          HEAP32[$474>>2] = $350;
          $475 = ((($350)) + 8|0);
          HEAP32[$475>>2] = $350;
          break;
         }
         $476 = HEAP32[$464>>2]|0;
         $477 = ($$0361$i|0)==(31);
         $478 = $$0361$i >>> 1;
         $479 = (25 - ($478))|0;
         $480 = $477 ? 0 : $479;
         $481 = $$4351$lcssa$i << $480;
         $$0344$i = $481;$$0345$i = $476;
         while(1) {
          $482 = ((($$0345$i)) + 4|0);
          $483 = HEAP32[$482>>2]|0;
          $484 = $483 & -8;
          $485 = ($484|0)==($$4351$lcssa$i|0);
          if ($485) {
           label = 139;
           break;
          }
          $486 = $$0344$i >>> 31;
          $487 = (((($$0345$i)) + 16|0) + ($486<<2)|0);
          $488 = $$0344$i << 1;
          $489 = HEAP32[$487>>2]|0;
          $490 = ($489|0)==(0|0);
          if ($490) {
           label = 136;
           break;
          } else {
           $$0344$i = $488;$$0345$i = $489;
          }
         }
         if ((label|0) == 136) {
          $491 = HEAP32[(38636)>>2]|0;
          $492 = ($487>>>0)<($491>>>0);
          if ($492) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$487>>2] = $350;
           $493 = ((($350)) + 24|0);
           HEAP32[$493>>2] = $$0345$i;
           $494 = ((($350)) + 12|0);
           HEAP32[$494>>2] = $350;
           $495 = ((($350)) + 8|0);
           HEAP32[$495>>2] = $350;
           break;
          }
         }
         else if ((label|0) == 139) {
          $496 = ((($$0345$i)) + 8|0);
          $497 = HEAP32[$496>>2]|0;
          $498 = HEAP32[(38636)>>2]|0;
          $499 = ($497>>>0)>=($498>>>0);
          $not$9$i = ($$0345$i>>>0)>=($498>>>0);
          $500 = $499 & $not$9$i;
          if ($500) {
           $501 = ((($497)) + 12|0);
           HEAP32[$501>>2] = $350;
           HEAP32[$496>>2] = $350;
           $502 = ((($350)) + 8|0);
           HEAP32[$502>>2] = $497;
           $503 = ((($350)) + 12|0);
           HEAP32[$503>>2] = $$0345$i;
           $504 = ((($350)) + 24|0);
           HEAP32[$504>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        }
       } while(0);
       $505 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $505;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0197 = $249;
      }
     }
    }
   }
  }
 } while(0);
 $506 = HEAP32[(38628)>>2]|0;
 $507 = ($506>>>0)<($$0197>>>0);
 if (!($507)) {
  $508 = (($506) - ($$0197))|0;
  $509 = HEAP32[(38640)>>2]|0;
  $510 = ($508>>>0)>(15);
  if ($510) {
   $511 = (($509) + ($$0197)|0);
   HEAP32[(38640)>>2] = $511;
   HEAP32[(38628)>>2] = $508;
   $512 = $508 | 1;
   $513 = ((($511)) + 4|0);
   HEAP32[$513>>2] = $512;
   $514 = (($511) + ($508)|0);
   HEAP32[$514>>2] = $508;
   $515 = $$0197 | 3;
   $516 = ((($509)) + 4|0);
   HEAP32[$516>>2] = $515;
  } else {
   HEAP32[(38628)>>2] = 0;
   HEAP32[(38640)>>2] = 0;
   $517 = $506 | 3;
   $518 = ((($509)) + 4|0);
   HEAP32[$518>>2] = $517;
   $519 = (($509) + ($506)|0);
   $520 = ((($519)) + 4|0);
   $521 = HEAP32[$520>>2]|0;
   $522 = $521 | 1;
   HEAP32[$520>>2] = $522;
  }
  $523 = ((($509)) + 8|0);
  $$0 = $523;
  STACKTOP = sp;return ($$0|0);
 }
 $524 = HEAP32[(38632)>>2]|0;
 $525 = ($524>>>0)>($$0197>>>0);
 if ($525) {
  $526 = (($524) - ($$0197))|0;
  HEAP32[(38632)>>2] = $526;
  $527 = HEAP32[(38644)>>2]|0;
  $528 = (($527) + ($$0197)|0);
  HEAP32[(38644)>>2] = $528;
  $529 = $526 | 1;
  $530 = ((($528)) + 4|0);
  HEAP32[$530>>2] = $529;
  $531 = $$0197 | 3;
  $532 = ((($527)) + 4|0);
  HEAP32[$532>>2] = $531;
  $533 = ((($527)) + 8|0);
  $$0 = $533;
  STACKTOP = sp;return ($$0|0);
 }
 $534 = HEAP32[9773]|0;
 $535 = ($534|0)==(0);
 if ($535) {
  HEAP32[(39100)>>2] = 4096;
  HEAP32[(39096)>>2] = 4096;
  HEAP32[(39104)>>2] = -1;
  HEAP32[(39108)>>2] = -1;
  HEAP32[(39112)>>2] = 0;
  HEAP32[(39064)>>2] = 0;
  $536 = $1;
  $537 = $536 & -16;
  $538 = $537 ^ 1431655768;
  HEAP32[$1>>2] = $538;
  HEAP32[9773] = $538;
  $542 = 4096;
 } else {
  $$pre$i212 = HEAP32[(39100)>>2]|0;
  $542 = $$pre$i212;
 }
 $539 = (($$0197) + 48)|0;
 $540 = (($$0197) + 47)|0;
 $541 = (($542) + ($540))|0;
 $543 = (0 - ($542))|0;
 $544 = $541 & $543;
 $545 = ($544>>>0)>($$0197>>>0);
 if (!($545)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $546 = HEAP32[(39060)>>2]|0;
 $547 = ($546|0)==(0);
 if (!($547)) {
  $548 = HEAP32[(39052)>>2]|0;
  $549 = (($548) + ($544))|0;
  $550 = ($549>>>0)<=($548>>>0);
  $551 = ($549>>>0)>($546>>>0);
  $or$cond1$i = $550 | $551;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $552 = HEAP32[(39064)>>2]|0;
 $553 = $552 & 4;
 $554 = ($553|0)==(0);
 L244: do {
  if ($554) {
   $555 = HEAP32[(38644)>>2]|0;
   $556 = ($555|0)==(0|0);
   L246: do {
    if ($556) {
     label = 163;
    } else {
     $$0$i$i = (39068);
     while(1) {
      $557 = HEAP32[$$0$i$i>>2]|0;
      $558 = ($557>>>0)>($555>>>0);
      if (!($558)) {
       $559 = ((($$0$i$i)) + 4|0);
       $560 = HEAP32[$559>>2]|0;
       $561 = (($557) + ($560)|0);
       $562 = ($561>>>0)>($555>>>0);
       if ($562) {
        break;
       }
      }
      $563 = ((($$0$i$i)) + 8|0);
      $564 = HEAP32[$563>>2]|0;
      $565 = ($564|0)==(0|0);
      if ($565) {
       label = 163;
       break L246;
      } else {
       $$0$i$i = $564;
      }
     }
     $588 = (($541) - ($524))|0;
     $589 = $588 & $543;
     $590 = ($589>>>0)<(2147483647);
     if ($590) {
      $591 = (_sbrk(($589|0))|0);
      $592 = HEAP32[$$0$i$i>>2]|0;
      $593 = HEAP32[$559>>2]|0;
      $594 = (($592) + ($593)|0);
      $595 = ($591|0)==($594|0);
      if ($595) {
       $596 = ($591|0)==((-1)|0);
       if ($596) {
        $$2234253237$i = $589;
       } else {
        $$723948$i = $589;$$749$i = $591;
        label = 180;
        break L244;
       }
      } else {
       $$2247$ph$i = $591;$$2253$ph$i = $589;
       label = 171;
      }
     } else {
      $$2234253237$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 163) {
     $566 = (_sbrk(0)|0);
     $567 = ($566|0)==((-1)|0);
     if ($567) {
      $$2234253237$i = 0;
     } else {
      $568 = $566;
      $569 = HEAP32[(39096)>>2]|0;
      $570 = (($569) + -1)|0;
      $571 = $570 & $568;
      $572 = ($571|0)==(0);
      $573 = (($570) + ($568))|0;
      $574 = (0 - ($569))|0;
      $575 = $573 & $574;
      $576 = (($575) - ($568))|0;
      $577 = $572 ? 0 : $576;
      $$$i = (($577) + ($544))|0;
      $578 = HEAP32[(39052)>>2]|0;
      $579 = (($$$i) + ($578))|0;
      $580 = ($$$i>>>0)>($$0197>>>0);
      $581 = ($$$i>>>0)<(2147483647);
      $or$cond$i214 = $580 & $581;
      if ($or$cond$i214) {
       $582 = HEAP32[(39060)>>2]|0;
       $583 = ($582|0)==(0);
       if (!($583)) {
        $584 = ($579>>>0)<=($578>>>0);
        $585 = ($579>>>0)>($582>>>0);
        $or$cond2$i215 = $584 | $585;
        if ($or$cond2$i215) {
         $$2234253237$i = 0;
         break;
        }
       }
       $586 = (_sbrk(($$$i|0))|0);
       $587 = ($586|0)==($566|0);
       if ($587) {
        $$723948$i = $$$i;$$749$i = $566;
        label = 180;
        break L244;
       } else {
        $$2247$ph$i = $586;$$2253$ph$i = $$$i;
        label = 171;
       }
      } else {
       $$2234253237$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 171) {
     $597 = (0 - ($$2253$ph$i))|0;
     $598 = ($$2247$ph$i|0)!=((-1)|0);
     $599 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $599 & $598;
     $600 = ($539>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $600 & $or$cond7$i;
     if (!($or$cond10$i)) {
      $610 = ($$2247$ph$i|0)==((-1)|0);
      if ($610) {
       $$2234253237$i = 0;
       break;
      } else {
       $$723948$i = $$2253$ph$i;$$749$i = $$2247$ph$i;
       label = 180;
       break L244;
      }
     }
     $601 = HEAP32[(39100)>>2]|0;
     $602 = (($540) - ($$2253$ph$i))|0;
     $603 = (($602) + ($601))|0;
     $604 = (0 - ($601))|0;
     $605 = $603 & $604;
     $606 = ($605>>>0)<(2147483647);
     if (!($606)) {
      $$723948$i = $$2253$ph$i;$$749$i = $$2247$ph$i;
      label = 180;
      break L244;
     }
     $607 = (_sbrk(($605|0))|0);
     $608 = ($607|0)==((-1)|0);
     if ($608) {
      (_sbrk(($597|0))|0);
      $$2234253237$i = 0;
      break;
     } else {
      $609 = (($605) + ($$2253$ph$i))|0;
      $$723948$i = $609;$$749$i = $$2247$ph$i;
      label = 180;
      break L244;
     }
    }
   } while(0);
   $611 = HEAP32[(39064)>>2]|0;
   $612 = $611 | 4;
   HEAP32[(39064)>>2] = $612;
   $$4236$i = $$2234253237$i;
   label = 178;
  } else {
   $$4236$i = 0;
   label = 178;
  }
 } while(0);
 if ((label|0) == 178) {
  $613 = ($544>>>0)<(2147483647);
  if ($613) {
   $614 = (_sbrk(($544|0))|0);
   $615 = (_sbrk(0)|0);
   $616 = ($614|0)!=((-1)|0);
   $617 = ($615|0)!=((-1)|0);
   $or$cond5$i = $616 & $617;
   $618 = ($614>>>0)<($615>>>0);
   $or$cond11$i = $618 & $or$cond5$i;
   $619 = $615;
   $620 = $614;
   $621 = (($619) - ($620))|0;
   $622 = (($$0197) + 40)|0;
   $623 = ($621>>>0)>($622>>>0);
   $$$4236$i = $623 ? $621 : $$4236$i;
   $or$cond11$not$i = $or$cond11$i ^ 1;
   $624 = ($614|0)==((-1)|0);
   $not$$i216 = $623 ^ 1;
   $625 = $624 | $not$$i216;
   $or$cond50$i = $625 | $or$cond11$not$i;
   if (!($or$cond50$i)) {
    $$723948$i = $$$4236$i;$$749$i = $614;
    label = 180;
   }
  }
 }
 if ((label|0) == 180) {
  $626 = HEAP32[(39052)>>2]|0;
  $627 = (($626) + ($$723948$i))|0;
  HEAP32[(39052)>>2] = $627;
  $628 = HEAP32[(39056)>>2]|0;
  $629 = ($627>>>0)>($628>>>0);
  if ($629) {
   HEAP32[(39056)>>2] = $627;
  }
  $630 = HEAP32[(38644)>>2]|0;
  $631 = ($630|0)==(0|0);
  do {
   if ($631) {
    $632 = HEAP32[(38636)>>2]|0;
    $633 = ($632|0)==(0|0);
    $634 = ($$749$i>>>0)<($632>>>0);
    $or$cond12$i = $633 | $634;
    if ($or$cond12$i) {
     HEAP32[(38636)>>2] = $$749$i;
    }
    HEAP32[(39068)>>2] = $$749$i;
    HEAP32[(39072)>>2] = $$723948$i;
    HEAP32[(39080)>>2] = 0;
    $635 = HEAP32[9773]|0;
    HEAP32[(38656)>>2] = $635;
    HEAP32[(38652)>>2] = -1;
    $$01$i$i = 0;
    while(1) {
     $636 = $$01$i$i << 1;
     $637 = (38660 + ($636<<2)|0);
     $638 = ((($637)) + 12|0);
     HEAP32[$638>>2] = $637;
     $639 = ((($637)) + 8|0);
     HEAP32[$639>>2] = $637;
     $640 = (($$01$i$i) + 1)|0;
     $exitcond$i$i = ($640|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $$01$i$i = $640;
     }
    }
    $641 = (($$723948$i) + -40)|0;
    $642 = ((($$749$i)) + 8|0);
    $643 = $642;
    $644 = $643 & 7;
    $645 = ($644|0)==(0);
    $646 = (0 - ($643))|0;
    $647 = $646 & 7;
    $648 = $645 ? 0 : $647;
    $649 = (($$749$i) + ($648)|0);
    $650 = (($641) - ($648))|0;
    HEAP32[(38644)>>2] = $649;
    HEAP32[(38632)>>2] = $650;
    $651 = $650 | 1;
    $652 = ((($649)) + 4|0);
    HEAP32[$652>>2] = $651;
    $653 = (($649) + ($650)|0);
    $654 = ((($653)) + 4|0);
    HEAP32[$654>>2] = 40;
    $655 = HEAP32[(39108)>>2]|0;
    HEAP32[(38648)>>2] = $655;
   } else {
    $$024371$i = (39068);
    while(1) {
     $656 = HEAP32[$$024371$i>>2]|0;
     $657 = ((($$024371$i)) + 4|0);
     $658 = HEAP32[$657>>2]|0;
     $659 = (($656) + ($658)|0);
     $660 = ($$749$i|0)==($659|0);
     if ($660) {
      label = 190;
      break;
     }
     $661 = ((($$024371$i)) + 8|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = ($662|0)==(0|0);
     if ($663) {
      break;
     } else {
      $$024371$i = $662;
     }
    }
    if ((label|0) == 190) {
     $664 = ((($$024371$i)) + 12|0);
     $665 = HEAP32[$664>>2]|0;
     $666 = $665 & 8;
     $667 = ($666|0)==(0);
     if ($667) {
      $668 = ($630>>>0)>=($656>>>0);
      $669 = ($630>>>0)<($$749$i>>>0);
      $or$cond51$i = $669 & $668;
      if ($or$cond51$i) {
       $670 = (($658) + ($$723948$i))|0;
       HEAP32[$657>>2] = $670;
       $671 = HEAP32[(38632)>>2]|0;
       $672 = ((($630)) + 8|0);
       $673 = $672;
       $674 = $673 & 7;
       $675 = ($674|0)==(0);
       $676 = (0 - ($673))|0;
       $677 = $676 & 7;
       $678 = $675 ? 0 : $677;
       $679 = (($630) + ($678)|0);
       $680 = (($$723948$i) - ($678))|0;
       $681 = (($671) + ($680))|0;
       HEAP32[(38644)>>2] = $679;
       HEAP32[(38632)>>2] = $681;
       $682 = $681 | 1;
       $683 = ((($679)) + 4|0);
       HEAP32[$683>>2] = $682;
       $684 = (($679) + ($681)|0);
       $685 = ((($684)) + 4|0);
       HEAP32[$685>>2] = 40;
       $686 = HEAP32[(39108)>>2]|0;
       HEAP32[(38648)>>2] = $686;
       break;
      }
     }
    }
    $687 = HEAP32[(38636)>>2]|0;
    $688 = ($$749$i>>>0)<($687>>>0);
    if ($688) {
     HEAP32[(38636)>>2] = $$749$i;
     $752 = $$749$i;
    } else {
     $752 = $687;
    }
    $689 = (($$749$i) + ($$723948$i)|0);
    $$124470$i = (39068);
    while(1) {
     $690 = HEAP32[$$124470$i>>2]|0;
     $691 = ($690|0)==($689|0);
     if ($691) {
      label = 198;
      break;
     }
     $692 = ((($$124470$i)) + 8|0);
     $693 = HEAP32[$692>>2]|0;
     $694 = ($693|0)==(0|0);
     if ($694) {
      break;
     } else {
      $$124470$i = $693;
     }
    }
    if ((label|0) == 198) {
     $695 = ((($$124470$i)) + 12|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = $696 & 8;
     $698 = ($697|0)==(0);
     if ($698) {
      HEAP32[$$124470$i>>2] = $$749$i;
      $699 = ((($$124470$i)) + 4|0);
      $700 = HEAP32[$699>>2]|0;
      $701 = (($700) + ($$723948$i))|0;
      HEAP32[$699>>2] = $701;
      $702 = ((($$749$i)) + 8|0);
      $703 = $702;
      $704 = $703 & 7;
      $705 = ($704|0)==(0);
      $706 = (0 - ($703))|0;
      $707 = $706 & 7;
      $708 = $705 ? 0 : $707;
      $709 = (($$749$i) + ($708)|0);
      $710 = ((($689)) + 8|0);
      $711 = $710;
      $712 = $711 & 7;
      $713 = ($712|0)==(0);
      $714 = (0 - ($711))|0;
      $715 = $714 & 7;
      $716 = $713 ? 0 : $715;
      $717 = (($689) + ($716)|0);
      $718 = $717;
      $719 = $709;
      $720 = (($718) - ($719))|0;
      $721 = (($709) + ($$0197)|0);
      $722 = (($720) - ($$0197))|0;
      $723 = $$0197 | 3;
      $724 = ((($709)) + 4|0);
      HEAP32[$724>>2] = $723;
      $725 = ($717|0)==($630|0);
      do {
       if ($725) {
        $726 = HEAP32[(38632)>>2]|0;
        $727 = (($726) + ($722))|0;
        HEAP32[(38632)>>2] = $727;
        HEAP32[(38644)>>2] = $721;
        $728 = $727 | 1;
        $729 = ((($721)) + 4|0);
        HEAP32[$729>>2] = $728;
       } else {
        $730 = HEAP32[(38640)>>2]|0;
        $731 = ($717|0)==($730|0);
        if ($731) {
         $732 = HEAP32[(38628)>>2]|0;
         $733 = (($732) + ($722))|0;
         HEAP32[(38628)>>2] = $733;
         HEAP32[(38640)>>2] = $721;
         $734 = $733 | 1;
         $735 = ((($721)) + 4|0);
         HEAP32[$735>>2] = $734;
         $736 = (($721) + ($733)|0);
         HEAP32[$736>>2] = $733;
         break;
        }
        $737 = ((($717)) + 4|0);
        $738 = HEAP32[$737>>2]|0;
        $739 = $738 & 3;
        $740 = ($739|0)==(1);
        if ($740) {
         $741 = $738 & -8;
         $742 = $738 >>> 3;
         $743 = ($738>>>0)<(256);
         L314: do {
          if ($743) {
           $744 = ((($717)) + 8|0);
           $745 = HEAP32[$744>>2]|0;
           $746 = ((($717)) + 12|0);
           $747 = HEAP32[$746>>2]|0;
           $748 = $742 << 1;
           $749 = (38660 + ($748<<2)|0);
           $750 = ($745|0)==($749|0);
           do {
            if (!($750)) {
             $751 = ($745>>>0)<($752>>>0);
             if ($751) {
              _abort();
              // unreachable;
             }
             $753 = ((($745)) + 12|0);
             $754 = HEAP32[$753>>2]|0;
             $755 = ($754|0)==($717|0);
             if ($755) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $756 = ($747|0)==($745|0);
           if ($756) {
            $757 = 1 << $742;
            $758 = $757 ^ -1;
            $759 = HEAP32[9655]|0;
            $760 = $759 & $758;
            HEAP32[9655] = $760;
            break;
           }
           $761 = ($747|0)==($749|0);
           do {
            if ($761) {
             $$pre10$i$i = ((($747)) + 8|0);
             $$pre$phi11$i$iZ2D = $$pre10$i$i;
            } else {
             $762 = ($747>>>0)<($752>>>0);
             if ($762) {
              _abort();
              // unreachable;
             }
             $763 = ((($747)) + 8|0);
             $764 = HEAP32[$763>>2]|0;
             $765 = ($764|0)==($717|0);
             if ($765) {
              $$pre$phi11$i$iZ2D = $763;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $766 = ((($745)) + 12|0);
           HEAP32[$766>>2] = $747;
           HEAP32[$$pre$phi11$i$iZ2D>>2] = $745;
          } else {
           $767 = ((($717)) + 24|0);
           $768 = HEAP32[$767>>2]|0;
           $769 = ((($717)) + 12|0);
           $770 = HEAP32[$769>>2]|0;
           $771 = ($770|0)==($717|0);
           do {
            if ($771) {
             $781 = ((($717)) + 16|0);
             $782 = ((($781)) + 4|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==(0|0);
             if ($784) {
              $785 = HEAP32[$781>>2]|0;
              $786 = ($785|0)==(0|0);
              if ($786) {
               $$3$i$i = 0;
               break;
              } else {
               $$1291$i$i = $785;$$1293$i$i = $781;
              }
             } else {
              $$1291$i$i = $783;$$1293$i$i = $782;
             }
             while(1) {
              $787 = ((($$1291$i$i)) + 20|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if (!($789)) {
               $$1291$i$i = $788;$$1293$i$i = $787;
               continue;
              }
              $790 = ((($$1291$i$i)) + 16|0);
              $791 = HEAP32[$790>>2]|0;
              $792 = ($791|0)==(0|0);
              if ($792) {
               break;
              } else {
               $$1291$i$i = $791;$$1293$i$i = $790;
              }
             }
             $793 = ($$1293$i$i>>>0)<($752>>>0);
             if ($793) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$$1293$i$i>>2] = 0;
              $$3$i$i = $$1291$i$i;
              break;
             }
            } else {
             $772 = ((($717)) + 8|0);
             $773 = HEAP32[$772>>2]|0;
             $774 = ($773>>>0)<($752>>>0);
             if ($774) {
              _abort();
              // unreachable;
             }
             $775 = ((($773)) + 12|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776|0)==($717|0);
             if (!($777)) {
              _abort();
              // unreachable;
             }
             $778 = ((($770)) + 8|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = ($779|0)==($717|0);
             if ($780) {
              HEAP32[$775>>2] = $770;
              HEAP32[$778>>2] = $773;
              $$3$i$i = $770;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $794 = ($768|0)==(0|0);
           if ($794) {
            break;
           }
           $795 = ((($717)) + 28|0);
           $796 = HEAP32[$795>>2]|0;
           $797 = (38924 + ($796<<2)|0);
           $798 = HEAP32[$797>>2]|0;
           $799 = ($717|0)==($798|0);
           do {
            if ($799) {
             HEAP32[$797>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $800 = 1 << $796;
             $801 = $800 ^ -1;
             $802 = HEAP32[(38624)>>2]|0;
             $803 = $802 & $801;
             HEAP32[(38624)>>2] = $803;
             break L314;
            } else {
             $804 = HEAP32[(38636)>>2]|0;
             $805 = ($768>>>0)<($804>>>0);
             if ($805) {
              _abort();
              // unreachable;
             } else {
              $806 = ((($768)) + 16|0);
              $807 = HEAP32[$806>>2]|0;
              $not$$i17$i = ($807|0)!=($717|0);
              $$sink1$i$i = $not$$i17$i&1;
              $808 = (((($768)) + 16|0) + ($$sink1$i$i<<2)|0);
              HEAP32[$808>>2] = $$3$i$i;
              $809 = ($$3$i$i|0)==(0|0);
              if ($809) {
               break L314;
              } else {
               break;
              }
             }
            }
           } while(0);
           $810 = HEAP32[(38636)>>2]|0;
           $811 = ($$3$i$i>>>0)<($810>>>0);
           if ($811) {
            _abort();
            // unreachable;
           }
           $812 = ((($$3$i$i)) + 24|0);
           HEAP32[$812>>2] = $768;
           $813 = ((($717)) + 16|0);
           $814 = HEAP32[$813>>2]|0;
           $815 = ($814|0)==(0|0);
           do {
            if (!($815)) {
             $816 = ($814>>>0)<($810>>>0);
             if ($816) {
              _abort();
              // unreachable;
             } else {
              $817 = ((($$3$i$i)) + 16|0);
              HEAP32[$817>>2] = $814;
              $818 = ((($814)) + 24|0);
              HEAP32[$818>>2] = $$3$i$i;
              break;
             }
            }
           } while(0);
           $819 = ((($813)) + 4|0);
           $820 = HEAP32[$819>>2]|0;
           $821 = ($820|0)==(0|0);
           if ($821) {
            break;
           }
           $822 = HEAP32[(38636)>>2]|0;
           $823 = ($820>>>0)<($822>>>0);
           if ($823) {
            _abort();
            // unreachable;
           } else {
            $824 = ((($$3$i$i)) + 20|0);
            HEAP32[$824>>2] = $820;
            $825 = ((($820)) + 24|0);
            HEAP32[$825>>2] = $$3$i$i;
            break;
           }
          }
         } while(0);
         $826 = (($717) + ($741)|0);
         $827 = (($741) + ($722))|0;
         $$0$i18$i = $826;$$0287$i$i = $827;
        } else {
         $$0$i18$i = $717;$$0287$i$i = $722;
        }
        $828 = ((($$0$i18$i)) + 4|0);
        $829 = HEAP32[$828>>2]|0;
        $830 = $829 & -2;
        HEAP32[$828>>2] = $830;
        $831 = $$0287$i$i | 1;
        $832 = ((($721)) + 4|0);
        HEAP32[$832>>2] = $831;
        $833 = (($721) + ($$0287$i$i)|0);
        HEAP32[$833>>2] = $$0287$i$i;
        $834 = $$0287$i$i >>> 3;
        $835 = ($$0287$i$i>>>0)<(256);
        if ($835) {
         $836 = $834 << 1;
         $837 = (38660 + ($836<<2)|0);
         $838 = HEAP32[9655]|0;
         $839 = 1 << $834;
         $840 = $838 & $839;
         $841 = ($840|0)==(0);
         do {
          if ($841) {
           $842 = $838 | $839;
           HEAP32[9655] = $842;
           $$pre$i19$i = ((($837)) + 8|0);
           $$0295$i$i = $837;$$pre$phi$i20$iZ2D = $$pre$i19$i;
          } else {
           $843 = ((($837)) + 8|0);
           $844 = HEAP32[$843>>2]|0;
           $845 = HEAP32[(38636)>>2]|0;
           $846 = ($844>>>0)<($845>>>0);
           if (!($846)) {
            $$0295$i$i = $844;$$pre$phi$i20$iZ2D = $843;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i20$iZ2D>>2] = $721;
         $847 = ((($$0295$i$i)) + 12|0);
         HEAP32[$847>>2] = $721;
         $848 = ((($721)) + 8|0);
         HEAP32[$848>>2] = $$0295$i$i;
         $849 = ((($721)) + 12|0);
         HEAP32[$849>>2] = $837;
         break;
        }
        $850 = $$0287$i$i >>> 8;
        $851 = ($850|0)==(0);
        do {
         if ($851) {
          $$0296$i$i = 0;
         } else {
          $852 = ($$0287$i$i>>>0)>(16777215);
          if ($852) {
           $$0296$i$i = 31;
           break;
          }
          $853 = (($850) + 1048320)|0;
          $854 = $853 >>> 16;
          $855 = $854 & 8;
          $856 = $850 << $855;
          $857 = (($856) + 520192)|0;
          $858 = $857 >>> 16;
          $859 = $858 & 4;
          $860 = $859 | $855;
          $861 = $856 << $859;
          $862 = (($861) + 245760)|0;
          $863 = $862 >>> 16;
          $864 = $863 & 2;
          $865 = $860 | $864;
          $866 = (14 - ($865))|0;
          $867 = $861 << $864;
          $868 = $867 >>> 15;
          $869 = (($866) + ($868))|0;
          $870 = $869 << 1;
          $871 = (($869) + 7)|0;
          $872 = $$0287$i$i >>> $871;
          $873 = $872 & 1;
          $874 = $873 | $870;
          $$0296$i$i = $874;
         }
        } while(0);
        $875 = (38924 + ($$0296$i$i<<2)|0);
        $876 = ((($721)) + 28|0);
        HEAP32[$876>>2] = $$0296$i$i;
        $877 = ((($721)) + 16|0);
        $878 = ((($877)) + 4|0);
        HEAP32[$878>>2] = 0;
        HEAP32[$877>>2] = 0;
        $879 = HEAP32[(38624)>>2]|0;
        $880 = 1 << $$0296$i$i;
        $881 = $879 & $880;
        $882 = ($881|0)==(0);
        if ($882) {
         $883 = $879 | $880;
         HEAP32[(38624)>>2] = $883;
         HEAP32[$875>>2] = $721;
         $884 = ((($721)) + 24|0);
         HEAP32[$884>>2] = $875;
         $885 = ((($721)) + 12|0);
         HEAP32[$885>>2] = $721;
         $886 = ((($721)) + 8|0);
         HEAP32[$886>>2] = $721;
         break;
        }
        $887 = HEAP32[$875>>2]|0;
        $888 = ($$0296$i$i|0)==(31);
        $889 = $$0296$i$i >>> 1;
        $890 = (25 - ($889))|0;
        $891 = $888 ? 0 : $890;
        $892 = $$0287$i$i << $891;
        $$0288$i$i = $892;$$0289$i$i = $887;
        while(1) {
         $893 = ((($$0289$i$i)) + 4|0);
         $894 = HEAP32[$893>>2]|0;
         $895 = $894 & -8;
         $896 = ($895|0)==($$0287$i$i|0);
         if ($896) {
          label = 265;
          break;
         }
         $897 = $$0288$i$i >>> 31;
         $898 = (((($$0289$i$i)) + 16|0) + ($897<<2)|0);
         $899 = $$0288$i$i << 1;
         $900 = HEAP32[$898>>2]|0;
         $901 = ($900|0)==(0|0);
         if ($901) {
          label = 262;
          break;
         } else {
          $$0288$i$i = $899;$$0289$i$i = $900;
         }
        }
        if ((label|0) == 262) {
         $902 = HEAP32[(38636)>>2]|0;
         $903 = ($898>>>0)<($902>>>0);
         if ($903) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$898>>2] = $721;
          $904 = ((($721)) + 24|0);
          HEAP32[$904>>2] = $$0289$i$i;
          $905 = ((($721)) + 12|0);
          HEAP32[$905>>2] = $721;
          $906 = ((($721)) + 8|0);
          HEAP32[$906>>2] = $721;
          break;
         }
        }
        else if ((label|0) == 265) {
         $907 = ((($$0289$i$i)) + 8|0);
         $908 = HEAP32[$907>>2]|0;
         $909 = HEAP32[(38636)>>2]|0;
         $910 = ($908>>>0)>=($909>>>0);
         $not$7$i$i = ($$0289$i$i>>>0)>=($909>>>0);
         $911 = $910 & $not$7$i$i;
         if ($911) {
          $912 = ((($908)) + 12|0);
          HEAP32[$912>>2] = $721;
          HEAP32[$907>>2] = $721;
          $913 = ((($721)) + 8|0);
          HEAP32[$913>>2] = $908;
          $914 = ((($721)) + 12|0);
          HEAP32[$914>>2] = $$0289$i$i;
          $915 = ((($721)) + 24|0);
          HEAP32[$915>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $1047 = ((($709)) + 8|0);
      $$0 = $1047;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $$0$i$i$i = (39068);
    while(1) {
     $916 = HEAP32[$$0$i$i$i>>2]|0;
     $917 = ($916>>>0)>($630>>>0);
     if (!($917)) {
      $918 = ((($$0$i$i$i)) + 4|0);
      $919 = HEAP32[$918>>2]|0;
      $920 = (($916) + ($919)|0);
      $921 = ($920>>>0)>($630>>>0);
      if ($921) {
       break;
      }
     }
     $922 = ((($$0$i$i$i)) + 8|0);
     $923 = HEAP32[$922>>2]|0;
     $$0$i$i$i = $923;
    }
    $924 = ((($920)) + -47|0);
    $925 = ((($924)) + 8|0);
    $926 = $925;
    $927 = $926 & 7;
    $928 = ($927|0)==(0);
    $929 = (0 - ($926))|0;
    $930 = $929 & 7;
    $931 = $928 ? 0 : $930;
    $932 = (($924) + ($931)|0);
    $933 = ((($630)) + 16|0);
    $934 = ($932>>>0)<($933>>>0);
    $935 = $934 ? $630 : $932;
    $936 = ((($935)) + 8|0);
    $937 = ((($935)) + 24|0);
    $938 = (($$723948$i) + -40)|0;
    $939 = ((($$749$i)) + 8|0);
    $940 = $939;
    $941 = $940 & 7;
    $942 = ($941|0)==(0);
    $943 = (0 - ($940))|0;
    $944 = $943 & 7;
    $945 = $942 ? 0 : $944;
    $946 = (($$749$i) + ($945)|0);
    $947 = (($938) - ($945))|0;
    HEAP32[(38644)>>2] = $946;
    HEAP32[(38632)>>2] = $947;
    $948 = $947 | 1;
    $949 = ((($946)) + 4|0);
    HEAP32[$949>>2] = $948;
    $950 = (($946) + ($947)|0);
    $951 = ((($950)) + 4|0);
    HEAP32[$951>>2] = 40;
    $952 = HEAP32[(39108)>>2]|0;
    HEAP32[(38648)>>2] = $952;
    $953 = ((($935)) + 4|0);
    HEAP32[$953>>2] = 27;
    ;HEAP32[$936>>2]=HEAP32[(39068)>>2]|0;HEAP32[$936+4>>2]=HEAP32[(39068)+4>>2]|0;HEAP32[$936+8>>2]=HEAP32[(39068)+8>>2]|0;HEAP32[$936+12>>2]=HEAP32[(39068)+12>>2]|0;
    HEAP32[(39068)>>2] = $$749$i;
    HEAP32[(39072)>>2] = $$723948$i;
    HEAP32[(39080)>>2] = 0;
    HEAP32[(39076)>>2] = $936;
    $955 = $937;
    while(1) {
     $954 = ((($955)) + 4|0);
     HEAP32[$954>>2] = 7;
     $956 = ((($955)) + 8|0);
     $957 = ($956>>>0)<($920>>>0);
     if ($957) {
      $955 = $954;
     } else {
      break;
     }
    }
    $958 = ($935|0)==($630|0);
    if (!($958)) {
     $959 = $935;
     $960 = $630;
     $961 = (($959) - ($960))|0;
     $962 = HEAP32[$953>>2]|0;
     $963 = $962 & -2;
     HEAP32[$953>>2] = $963;
     $964 = $961 | 1;
     $965 = ((($630)) + 4|0);
     HEAP32[$965>>2] = $964;
     HEAP32[$935>>2] = $961;
     $966 = $961 >>> 3;
     $967 = ($961>>>0)<(256);
     if ($967) {
      $968 = $966 << 1;
      $969 = (38660 + ($968<<2)|0);
      $970 = HEAP32[9655]|0;
      $971 = 1 << $966;
      $972 = $970 & $971;
      $973 = ($972|0)==(0);
      if ($973) {
       $974 = $970 | $971;
       HEAP32[9655] = $974;
       $$pre$i$i = ((($969)) + 8|0);
       $$0211$i$i = $969;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $975 = ((($969)) + 8|0);
       $976 = HEAP32[$975>>2]|0;
       $977 = HEAP32[(38636)>>2]|0;
       $978 = ($976>>>0)<($977>>>0);
       if ($978) {
        _abort();
        // unreachable;
       } else {
        $$0211$i$i = $976;$$pre$phi$i$iZ2D = $975;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $630;
      $979 = ((($$0211$i$i)) + 12|0);
      HEAP32[$979>>2] = $630;
      $980 = ((($630)) + 8|0);
      HEAP32[$980>>2] = $$0211$i$i;
      $981 = ((($630)) + 12|0);
      HEAP32[$981>>2] = $969;
      break;
     }
     $982 = $961 >>> 8;
     $983 = ($982|0)==(0);
     if ($983) {
      $$0212$i$i = 0;
     } else {
      $984 = ($961>>>0)>(16777215);
      if ($984) {
       $$0212$i$i = 31;
      } else {
       $985 = (($982) + 1048320)|0;
       $986 = $985 >>> 16;
       $987 = $986 & 8;
       $988 = $982 << $987;
       $989 = (($988) + 520192)|0;
       $990 = $989 >>> 16;
       $991 = $990 & 4;
       $992 = $991 | $987;
       $993 = $988 << $991;
       $994 = (($993) + 245760)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 2;
       $997 = $992 | $996;
       $998 = (14 - ($997))|0;
       $999 = $993 << $996;
       $1000 = $999 >>> 15;
       $1001 = (($998) + ($1000))|0;
       $1002 = $1001 << 1;
       $1003 = (($1001) + 7)|0;
       $1004 = $961 >>> $1003;
       $1005 = $1004 & 1;
       $1006 = $1005 | $1002;
       $$0212$i$i = $1006;
      }
     }
     $1007 = (38924 + ($$0212$i$i<<2)|0);
     $1008 = ((($630)) + 28|0);
     HEAP32[$1008>>2] = $$0212$i$i;
     $1009 = ((($630)) + 20|0);
     HEAP32[$1009>>2] = 0;
     HEAP32[$933>>2] = 0;
     $1010 = HEAP32[(38624)>>2]|0;
     $1011 = 1 << $$0212$i$i;
     $1012 = $1010 & $1011;
     $1013 = ($1012|0)==(0);
     if ($1013) {
      $1014 = $1010 | $1011;
      HEAP32[(38624)>>2] = $1014;
      HEAP32[$1007>>2] = $630;
      $1015 = ((($630)) + 24|0);
      HEAP32[$1015>>2] = $1007;
      $1016 = ((($630)) + 12|0);
      HEAP32[$1016>>2] = $630;
      $1017 = ((($630)) + 8|0);
      HEAP32[$1017>>2] = $630;
      break;
     }
     $1018 = HEAP32[$1007>>2]|0;
     $1019 = ($$0212$i$i|0)==(31);
     $1020 = $$0212$i$i >>> 1;
     $1021 = (25 - ($1020))|0;
     $1022 = $1019 ? 0 : $1021;
     $1023 = $961 << $1022;
     $$0206$i$i = $1023;$$0207$i$i = $1018;
     while(1) {
      $1024 = ((($$0207$i$i)) + 4|0);
      $1025 = HEAP32[$1024>>2]|0;
      $1026 = $1025 & -8;
      $1027 = ($1026|0)==($961|0);
      if ($1027) {
       label = 292;
       break;
      }
      $1028 = $$0206$i$i >>> 31;
      $1029 = (((($$0207$i$i)) + 16|0) + ($1028<<2)|0);
      $1030 = $$0206$i$i << 1;
      $1031 = HEAP32[$1029>>2]|0;
      $1032 = ($1031|0)==(0|0);
      if ($1032) {
       label = 289;
       break;
      } else {
       $$0206$i$i = $1030;$$0207$i$i = $1031;
      }
     }
     if ((label|0) == 289) {
      $1033 = HEAP32[(38636)>>2]|0;
      $1034 = ($1029>>>0)<($1033>>>0);
      if ($1034) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$1029>>2] = $630;
       $1035 = ((($630)) + 24|0);
       HEAP32[$1035>>2] = $$0207$i$i;
       $1036 = ((($630)) + 12|0);
       HEAP32[$1036>>2] = $630;
       $1037 = ((($630)) + 8|0);
       HEAP32[$1037>>2] = $630;
       break;
      }
     }
     else if ((label|0) == 292) {
      $1038 = ((($$0207$i$i)) + 8|0);
      $1039 = HEAP32[$1038>>2]|0;
      $1040 = HEAP32[(38636)>>2]|0;
      $1041 = ($1039>>>0)>=($1040>>>0);
      $not$$i$i = ($$0207$i$i>>>0)>=($1040>>>0);
      $1042 = $1041 & $not$$i$i;
      if ($1042) {
       $1043 = ((($1039)) + 12|0);
       HEAP32[$1043>>2] = $630;
       HEAP32[$1038>>2] = $630;
       $1044 = ((($630)) + 8|0);
       HEAP32[$1044>>2] = $1039;
       $1045 = ((($630)) + 12|0);
       HEAP32[$1045>>2] = $$0207$i$i;
       $1046 = ((($630)) + 24|0);
       HEAP32[$1046>>2] = 0;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    }
   }
  } while(0);
  $1048 = HEAP32[(38632)>>2]|0;
  $1049 = ($1048>>>0)>($$0197>>>0);
  if ($1049) {
   $1050 = (($1048) - ($$0197))|0;
   HEAP32[(38632)>>2] = $1050;
   $1051 = HEAP32[(38644)>>2]|0;
   $1052 = (($1051) + ($$0197)|0);
   HEAP32[(38644)>>2] = $1052;
   $1053 = $1050 | 1;
   $1054 = ((($1052)) + 4|0);
   HEAP32[$1054>>2] = $1053;
   $1055 = $$0197 | 3;
   $1056 = ((($1051)) + 4|0);
   HEAP32[$1056>>2] = $1055;
   $1057 = ((($1051)) + 8|0);
   $$0 = $1057;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1058 = (___errno_location()|0);
 HEAP32[$1058>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0212$i = 0, $$0212$in$i = 0, $$0383 = 0, $$0384 = 0, $$0396 = 0, $$0403 = 0, $$1 = 0, $$1382 = 0, $$1387 = 0, $$1390 = 0, $$1398 = 0, $$1402 = 0, $$2 = 0, $$3 = 0, $$3400 = 0, $$pre = 0, $$pre$phi443Z2D = 0, $$pre$phi445Z2D = 0, $$pre$phiZ2D = 0, $$pre442 = 0;
 var $$pre444 = 0, $$sink3 = 0, $$sink5 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cond421 = 0, $cond422 = 0, $not$ = 0, $not$405 = 0, $not$437 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(38636)>>2]|0;
 $4 = ($2>>>0)<($3>>>0);
 if ($4) {
  _abort();
  // unreachable;
 }
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 3;
 $8 = ($7|0)==(1);
 if ($8) {
  _abort();
  // unreachable;
 }
 $9 = $6 & -8;
 $10 = (($2) + ($9)|0);
 $11 = $6 & 1;
 $12 = ($11|0)==(0);
 L10: do {
  if ($12) {
   $13 = HEAP32[$2>>2]|0;
   $14 = ($7|0)==(0);
   if ($14) {
    return;
   }
   $15 = (0 - ($13))|0;
   $16 = (($2) + ($15)|0);
   $17 = (($13) + ($9))|0;
   $18 = ($16>>>0)<($3>>>0);
   if ($18) {
    _abort();
    // unreachable;
   }
   $19 = HEAP32[(38640)>>2]|0;
   $20 = ($16|0)==($19|0);
   if ($20) {
    $104 = ((($10)) + 4|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $$1 = $16;$$1382 = $17;$113 = $16;
     break;
    }
    $108 = (($16) + ($17)|0);
    $109 = ((($16)) + 4|0);
    $110 = $17 | 1;
    $111 = $105 & -2;
    HEAP32[(38628)>>2] = $17;
    HEAP32[$104>>2] = $111;
    HEAP32[$109>>2] = $110;
    HEAP32[$108>>2] = $17;
    return;
   }
   $21 = $13 >>> 3;
   $22 = ($13>>>0)<(256);
   if ($22) {
    $23 = ((($16)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($16)) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $21 << 1;
    $28 = (38660 + ($27<<2)|0);
    $29 = ($24|0)==($28|0);
    if (!($29)) {
     $30 = ($24>>>0)<($3>>>0);
     if ($30) {
      _abort();
      // unreachable;
     }
     $31 = ((($24)) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==($16|0);
     if (!($33)) {
      _abort();
      // unreachable;
     }
    }
    $34 = ($26|0)==($24|0);
    if ($34) {
     $35 = 1 << $21;
     $36 = $35 ^ -1;
     $37 = HEAP32[9655]|0;
     $38 = $37 & $36;
     HEAP32[9655] = $38;
     $$1 = $16;$$1382 = $17;$113 = $16;
     break;
    }
    $39 = ($26|0)==($28|0);
    if ($39) {
     $$pre444 = ((($26)) + 8|0);
     $$pre$phi445Z2D = $$pre444;
    } else {
     $40 = ($26>>>0)<($3>>>0);
     if ($40) {
      _abort();
      // unreachable;
     }
     $41 = ((($26)) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==($16|0);
     if ($43) {
      $$pre$phi445Z2D = $41;
     } else {
      _abort();
      // unreachable;
     }
    }
    $44 = ((($24)) + 12|0);
    HEAP32[$44>>2] = $26;
    HEAP32[$$pre$phi445Z2D>>2] = $24;
    $$1 = $16;$$1382 = $17;$113 = $16;
    break;
   }
   $45 = ((($16)) + 24|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($16)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==($16|0);
   do {
    if ($49) {
     $59 = ((($16)) + 16|0);
     $60 = ((($59)) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)==(0|0);
     if ($62) {
      $63 = HEAP32[$59>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $$3 = 0;
       break;
      } else {
       $$1387 = $63;$$1390 = $59;
      }
     } else {
      $$1387 = $61;$$1390 = $60;
     }
     while(1) {
      $65 = ((($$1387)) + 20|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ($66|0)==(0|0);
      if (!($67)) {
       $$1387 = $66;$$1390 = $65;
       continue;
      }
      $68 = ((($$1387)) + 16|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($69|0)==(0|0);
      if ($70) {
       break;
      } else {
       $$1387 = $69;$$1390 = $68;
      }
     }
     $71 = ($$1390>>>0)<($3>>>0);
     if ($71) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1390>>2] = 0;
      $$3 = $$1387;
      break;
     }
    } else {
     $50 = ((($16)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51>>>0)<($3>>>0);
     if ($52) {
      _abort();
      // unreachable;
     }
     $53 = ((($51)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==($16|0);
     if (!($55)) {
      _abort();
      // unreachable;
     }
     $56 = ((($48)) + 8|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==($16|0);
     if ($58) {
      HEAP32[$53>>2] = $48;
      HEAP32[$56>>2] = $51;
      $$3 = $48;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $72 = ($46|0)==(0|0);
   if ($72) {
    $$1 = $16;$$1382 = $17;$113 = $16;
   } else {
    $73 = ((($16)) + 28|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (38924 + ($74<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($16|0)==($76|0);
    do {
     if ($77) {
      HEAP32[$75>>2] = $$3;
      $cond421 = ($$3|0)==(0|0);
      if ($cond421) {
       $78 = 1 << $74;
       $79 = $78 ^ -1;
       $80 = HEAP32[(38624)>>2]|0;
       $81 = $80 & $79;
       HEAP32[(38624)>>2] = $81;
       $$1 = $16;$$1382 = $17;$113 = $16;
       break L10;
      }
     } else {
      $82 = HEAP32[(38636)>>2]|0;
      $83 = ($46>>>0)<($82>>>0);
      if ($83) {
       _abort();
       // unreachable;
      } else {
       $84 = ((($46)) + 16|0);
       $85 = HEAP32[$84>>2]|0;
       $not$405 = ($85|0)!=($16|0);
       $$sink3 = $not$405&1;
       $86 = (((($46)) + 16|0) + ($$sink3<<2)|0);
       HEAP32[$86>>2] = $$3;
       $87 = ($$3|0)==(0|0);
       if ($87) {
        $$1 = $16;$$1382 = $17;$113 = $16;
        break L10;
       } else {
        break;
       }
      }
     }
    } while(0);
    $88 = HEAP32[(38636)>>2]|0;
    $89 = ($$3>>>0)<($88>>>0);
    if ($89) {
     _abort();
     // unreachable;
    }
    $90 = ((($$3)) + 24|0);
    HEAP32[$90>>2] = $46;
    $91 = ((($16)) + 16|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==(0|0);
    do {
     if (!($93)) {
      $94 = ($92>>>0)<($88>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = ((($$3)) + 16|0);
       HEAP32[$95>>2] = $92;
       $96 = ((($92)) + 24|0);
       HEAP32[$96>>2] = $$3;
       break;
      }
     }
    } while(0);
    $97 = ((($91)) + 4|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $$1 = $16;$$1382 = $17;$113 = $16;
    } else {
     $100 = HEAP32[(38636)>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = ((($$3)) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = ((($98)) + 24|0);
      HEAP32[$103>>2] = $$3;
      $$1 = $16;$$1382 = $17;$113 = $16;
      break;
     }
    }
   }
  } else {
   $$1 = $2;$$1382 = $9;$113 = $2;
  }
 } while(0);
 $112 = ($113>>>0)<($10>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $114 = ((($10)) + 4|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = $115 & 1;
 $117 = ($116|0)==(0);
 if ($117) {
  _abort();
  // unreachable;
 }
 $118 = $115 & 2;
 $119 = ($118|0)==(0);
 if ($119) {
  $120 = HEAP32[(38644)>>2]|0;
  $121 = ($10|0)==($120|0);
  $122 = HEAP32[(38640)>>2]|0;
  if ($121) {
   $123 = HEAP32[(38632)>>2]|0;
   $124 = (($123) + ($$1382))|0;
   HEAP32[(38632)>>2] = $124;
   HEAP32[(38644)>>2] = $$1;
   $125 = $124 | 1;
   $126 = ((($$1)) + 4|0);
   HEAP32[$126>>2] = $125;
   $127 = ($$1|0)==($122|0);
   if (!($127)) {
    return;
   }
   HEAP32[(38640)>>2] = 0;
   HEAP32[(38628)>>2] = 0;
   return;
  }
  $128 = ($10|0)==($122|0);
  if ($128) {
   $129 = HEAP32[(38628)>>2]|0;
   $130 = (($129) + ($$1382))|0;
   HEAP32[(38628)>>2] = $130;
   HEAP32[(38640)>>2] = $113;
   $131 = $130 | 1;
   $132 = ((($$1)) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($113) + ($130)|0);
   HEAP32[$133>>2] = $130;
   return;
  }
  $134 = $115 & -8;
  $135 = (($134) + ($$1382))|0;
  $136 = $115 >>> 3;
  $137 = ($115>>>0)<(256);
  L108: do {
   if ($137) {
    $138 = ((($10)) + 8|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = ((($10)) + 12|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = (38660 + ($142<<2)|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[(38636)>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = ((($139)) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($10|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[9655]|0;
     $154 = $153 & $152;
     HEAP32[9655] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre442 = ((($141)) + 8|0);
     $$pre$phi443Z2D = $$pre442;
    } else {
     $156 = HEAP32[(38636)>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = ((($141)) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($10|0);
     if ($160) {
      $$pre$phi443Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = ((($139)) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi443Z2D>>2] = $139;
   } else {
    $162 = ((($10)) + 24|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ((($10)) + 12|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($10|0);
    do {
     if ($166) {
      $177 = ((($10)) + 16|0);
      $178 = ((($177)) + 4|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = ($179|0)==(0|0);
      if ($180) {
       $181 = HEAP32[$177>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $$3400 = 0;
        break;
       } else {
        $$1398 = $181;$$1402 = $177;
       }
      } else {
       $$1398 = $179;$$1402 = $178;
      }
      while(1) {
       $183 = ((($$1398)) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $$1398 = $184;$$1402 = $183;
        continue;
       }
       $186 = ((($$1398)) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        break;
       } else {
        $$1398 = $187;$$1402 = $186;
       }
      }
      $189 = HEAP32[(38636)>>2]|0;
      $190 = ($$1402>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1402>>2] = 0;
       $$3400 = $$1398;
       break;
      }
     } else {
      $167 = ((($10)) + 8|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[(38636)>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = ((($168)) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($10|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = ((($165)) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($10|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $$3400 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $192 = ((($10)) + 28|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = (38924 + ($193<<2)|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($10|0)==($195|0);
     do {
      if ($196) {
       HEAP32[$194>>2] = $$3400;
       $cond422 = ($$3400|0)==(0|0);
       if ($cond422) {
        $197 = 1 << $193;
        $198 = $197 ^ -1;
        $199 = HEAP32[(38624)>>2]|0;
        $200 = $199 & $198;
        HEAP32[(38624)>>2] = $200;
        break L108;
       }
      } else {
       $201 = HEAP32[(38636)>>2]|0;
       $202 = ($163>>>0)<($201>>>0);
       if ($202) {
        _abort();
        // unreachable;
       } else {
        $203 = ((($163)) + 16|0);
        $204 = HEAP32[$203>>2]|0;
        $not$ = ($204|0)!=($10|0);
        $$sink5 = $not$&1;
        $205 = (((($163)) + 16|0) + ($$sink5<<2)|0);
        HEAP32[$205>>2] = $$3400;
        $206 = ($$3400|0)==(0|0);
        if ($206) {
         break L108;
        } else {
         break;
        }
       }
      }
     } while(0);
     $207 = HEAP32[(38636)>>2]|0;
     $208 = ($$3400>>>0)<($207>>>0);
     if ($208) {
      _abort();
      // unreachable;
     }
     $209 = ((($$3400)) + 24|0);
     HEAP32[$209>>2] = $163;
     $210 = ((($10)) + 16|0);
     $211 = HEAP32[$210>>2]|0;
     $212 = ($211|0)==(0|0);
     do {
      if (!($212)) {
       $213 = ($211>>>0)<($207>>>0);
       if ($213) {
        _abort();
        // unreachable;
       } else {
        $214 = ((($$3400)) + 16|0);
        HEAP32[$214>>2] = $211;
        $215 = ((($211)) + 24|0);
        HEAP32[$215>>2] = $$3400;
        break;
       }
      }
     } while(0);
     $216 = ((($210)) + 4|0);
     $217 = HEAP32[$216>>2]|0;
     $218 = ($217|0)==(0|0);
     if (!($218)) {
      $219 = HEAP32[(38636)>>2]|0;
      $220 = ($217>>>0)<($219>>>0);
      if ($220) {
       _abort();
       // unreachable;
      } else {
       $221 = ((($$3400)) + 20|0);
       HEAP32[$221>>2] = $217;
       $222 = ((($217)) + 24|0);
       HEAP32[$222>>2] = $$3400;
       break;
      }
     }
    }
   }
  } while(0);
  $223 = $135 | 1;
  $224 = ((($$1)) + 4|0);
  HEAP32[$224>>2] = $223;
  $225 = (($113) + ($135)|0);
  HEAP32[$225>>2] = $135;
  $226 = HEAP32[(38640)>>2]|0;
  $227 = ($$1|0)==($226|0);
  if ($227) {
   HEAP32[(38628)>>2] = $135;
   return;
  } else {
   $$2 = $135;
  }
 } else {
  $228 = $115 & -2;
  HEAP32[$114>>2] = $228;
  $229 = $$1382 | 1;
  $230 = ((($$1)) + 4|0);
  HEAP32[$230>>2] = $229;
  $231 = (($113) + ($$1382)|0);
  HEAP32[$231>>2] = $$1382;
  $$2 = $$1382;
 }
 $232 = $$2 >>> 3;
 $233 = ($$2>>>0)<(256);
 if ($233) {
  $234 = $232 << 1;
  $235 = (38660 + ($234<<2)|0);
  $236 = HEAP32[9655]|0;
  $237 = 1 << $232;
  $238 = $236 & $237;
  $239 = ($238|0)==(0);
  if ($239) {
   $240 = $236 | $237;
   HEAP32[9655] = $240;
   $$pre = ((($235)) + 8|0);
   $$0403 = $235;$$pre$phiZ2D = $$pre;
  } else {
   $241 = ((($235)) + 8|0);
   $242 = HEAP32[$241>>2]|0;
   $243 = HEAP32[(38636)>>2]|0;
   $244 = ($242>>>0)<($243>>>0);
   if ($244) {
    _abort();
    // unreachable;
   } else {
    $$0403 = $242;$$pre$phiZ2D = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $245 = ((($$0403)) + 12|0);
  HEAP32[$245>>2] = $$1;
  $246 = ((($$1)) + 8|0);
  HEAP32[$246>>2] = $$0403;
  $247 = ((($$1)) + 12|0);
  HEAP32[$247>>2] = $235;
  return;
 }
 $248 = $$2 >>> 8;
 $249 = ($248|0)==(0);
 if ($249) {
  $$0396 = 0;
 } else {
  $250 = ($$2>>>0)>(16777215);
  if ($250) {
   $$0396 = 31;
  } else {
   $251 = (($248) + 1048320)|0;
   $252 = $251 >>> 16;
   $253 = $252 & 8;
   $254 = $248 << $253;
   $255 = (($254) + 520192)|0;
   $256 = $255 >>> 16;
   $257 = $256 & 4;
   $258 = $257 | $253;
   $259 = $254 << $257;
   $260 = (($259) + 245760)|0;
   $261 = $260 >>> 16;
   $262 = $261 & 2;
   $263 = $258 | $262;
   $264 = (14 - ($263))|0;
   $265 = $259 << $262;
   $266 = $265 >>> 15;
   $267 = (($264) + ($266))|0;
   $268 = $267 << 1;
   $269 = (($267) + 7)|0;
   $270 = $$2 >>> $269;
   $271 = $270 & 1;
   $272 = $271 | $268;
   $$0396 = $272;
  }
 }
 $273 = (38924 + ($$0396<<2)|0);
 $274 = ((($$1)) + 28|0);
 HEAP32[$274>>2] = $$0396;
 $275 = ((($$1)) + 16|0);
 $276 = ((($$1)) + 20|0);
 HEAP32[$276>>2] = 0;
 HEAP32[$275>>2] = 0;
 $277 = HEAP32[(38624)>>2]|0;
 $278 = 1 << $$0396;
 $279 = $277 & $278;
 $280 = ($279|0)==(0);
 do {
  if ($280) {
   $281 = $277 | $278;
   HEAP32[(38624)>>2] = $281;
   HEAP32[$273>>2] = $$1;
   $282 = ((($$1)) + 24|0);
   HEAP32[$282>>2] = $273;
   $283 = ((($$1)) + 12|0);
   HEAP32[$283>>2] = $$1;
   $284 = ((($$1)) + 8|0);
   HEAP32[$284>>2] = $$1;
  } else {
   $285 = HEAP32[$273>>2]|0;
   $286 = ($$0396|0)==(31);
   $287 = $$0396 >>> 1;
   $288 = (25 - ($287))|0;
   $289 = $286 ? 0 : $288;
   $290 = $$2 << $289;
   $$0383 = $290;$$0384 = $285;
   while(1) {
    $291 = ((($$0384)) + 4|0);
    $292 = HEAP32[$291>>2]|0;
    $293 = $292 & -8;
    $294 = ($293|0)==($$2|0);
    if ($294) {
     label = 124;
     break;
    }
    $295 = $$0383 >>> 31;
    $296 = (((($$0384)) + 16|0) + ($295<<2)|0);
    $297 = $$0383 << 1;
    $298 = HEAP32[$296>>2]|0;
    $299 = ($298|0)==(0|0);
    if ($299) {
     label = 121;
     break;
    } else {
     $$0383 = $297;$$0384 = $298;
    }
   }
   if ((label|0) == 121) {
    $300 = HEAP32[(38636)>>2]|0;
    $301 = ($296>>>0)<($300>>>0);
    if ($301) {
     _abort();
     // unreachable;
    } else {
     HEAP32[$296>>2] = $$1;
     $302 = ((($$1)) + 24|0);
     HEAP32[$302>>2] = $$0384;
     $303 = ((($$1)) + 12|0);
     HEAP32[$303>>2] = $$1;
     $304 = ((($$1)) + 8|0);
     HEAP32[$304>>2] = $$1;
     break;
    }
   }
   else if ((label|0) == 124) {
    $305 = ((($$0384)) + 8|0);
    $306 = HEAP32[$305>>2]|0;
    $307 = HEAP32[(38636)>>2]|0;
    $308 = ($306>>>0)>=($307>>>0);
    $not$437 = ($$0384>>>0)>=($307>>>0);
    $309 = $308 & $not$437;
    if ($309) {
     $310 = ((($306)) + 12|0);
     HEAP32[$310>>2] = $$1;
     HEAP32[$305>>2] = $$1;
     $311 = ((($$1)) + 8|0);
     HEAP32[$311>>2] = $306;
     $312 = ((($$1)) + 12|0);
     HEAP32[$312>>2] = $$0384;
     $313 = ((($$1)) + 24|0);
     HEAP32[$313>>2] = 0;
     break;
    } else {
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $314 = HEAP32[(38652)>>2]|0;
 $315 = (($314) + -1)|0;
 HEAP32[(38652)>>2] = $315;
 $316 = ($315|0)==(0);
 if ($316) {
  $$0212$in$i = (39076);
 } else {
  return;
 }
 while(1) {
  $$0212$i = HEAP32[$$0212$in$i>>2]|0;
  $317 = ($$0212$i|0)==(0|0);
  $318 = ((($$0212$i)) + 8|0);
  if ($317) {
   break;
  } else {
   $$0212$in$i = $318;
  }
 }
 HEAP32[(38652)>>2] = -1;
 return;
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 _memcpy(($14|0),($0|0),($24|0))|0;
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1272 = 0, $$1275 = 0, $$2 = 0, $$3 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $cond = 0, $not$ = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond3 = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = HEAP32[(38636)>>2]|0;
 $7 = $3 & 3;
 $notlhs = ($0>>>0)>=($6>>>0);
 $notrhs = ($7|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $8 = ($0>>>0)<($5>>>0);
 $or$cond3 = $or$cond$not & $8;
 if (!($or$cond3)) {
  _abort();
  // unreachable;
 }
 $9 = ((($5)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  _abort();
  // unreachable;
 }
 $13 = ($7|0)==(0);
 if ($13) {
  $14 = ($1>>>0)<(256);
  if ($14) {
   $$2 = 0;
   return ($$2|0);
  }
  $15 = (($1) + 4)|0;
  $16 = ($4>>>0)<($15>>>0);
  if (!($16)) {
   $17 = (($4) - ($1))|0;
   $18 = HEAP32[(39100)>>2]|0;
   $19 = $18 << 1;
   $20 = ($17>>>0)>($19>>>0);
   if (!($20)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $21 = ($4>>>0)<($1>>>0);
 if (!($21)) {
  $22 = (($4) - ($1))|0;
  $23 = ($22>>>0)>(15);
  if (!($23)) {
   $$2 = $0;
   return ($$2|0);
  }
  $24 = (($0) + ($1)|0);
  $25 = $3 & 1;
  $26 = $25 | $1;
  $27 = $26 | 2;
  HEAP32[$2>>2] = $27;
  $28 = ((($24)) + 4|0);
  $29 = $22 | 3;
  HEAP32[$28>>2] = $29;
  $30 = (($24) + ($22)|0);
  $31 = ((($30)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $32 | 1;
  HEAP32[$31>>2] = $33;
  _dispose_chunk($24,$22);
  $$2 = $0;
  return ($$2|0);
 }
 $34 = HEAP32[(38644)>>2]|0;
 $35 = ($5|0)==($34|0);
 if ($35) {
  $36 = HEAP32[(38632)>>2]|0;
  $37 = (($36) + ($4))|0;
  $38 = ($37>>>0)>($1>>>0);
  $39 = (($37) - ($1))|0;
  $40 = (($0) + ($1)|0);
  if (!($38)) {
   $$2 = 0;
   return ($$2|0);
  }
  $41 = $39 | 1;
  $42 = ((($40)) + 4|0);
  $43 = $3 & 1;
  $44 = $43 | $1;
  $45 = $44 | 2;
  HEAP32[$2>>2] = $45;
  HEAP32[$42>>2] = $41;
  HEAP32[(38644)>>2] = $40;
  HEAP32[(38632)>>2] = $39;
  $$2 = $0;
  return ($$2|0);
 }
 $46 = HEAP32[(38640)>>2]|0;
 $47 = ($5|0)==($46|0);
 if ($47) {
  $48 = HEAP32[(38628)>>2]|0;
  $49 = (($48) + ($4))|0;
  $50 = ($49>>>0)<($1>>>0);
  if ($50) {
   $$2 = 0;
   return ($$2|0);
  }
  $51 = (($49) - ($1))|0;
  $52 = ($51>>>0)>(15);
  $53 = $3 & 1;
  if ($52) {
   $54 = (($0) + ($1)|0);
   $55 = (($54) + ($51)|0);
   $56 = $53 | $1;
   $57 = $56 | 2;
   HEAP32[$2>>2] = $57;
   $58 = ((($54)) + 4|0);
   $59 = $51 | 1;
   HEAP32[$58>>2] = $59;
   HEAP32[$55>>2] = $51;
   $60 = ((($55)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 & -2;
   HEAP32[$60>>2] = $62;
   $storemerge = $54;$storemerge1 = $51;
  } else {
   $63 = $53 | $49;
   $64 = $63 | 2;
   HEAP32[$2>>2] = $64;
   $65 = (($0) + ($49)|0);
   $66 = ((($65)) + 4|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = $67 | 1;
   HEAP32[$66>>2] = $68;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(38628)>>2] = $storemerge1;
  HEAP32[(38640)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $69 = $10 & 2;
 $70 = ($69|0)==(0);
 if (!($70)) {
  $$2 = 0;
  return ($$2|0);
 }
 $71 = $10 & -8;
 $72 = (($71) + ($4))|0;
 $73 = ($72>>>0)<($1>>>0);
 if ($73) {
  $$2 = 0;
  return ($$2|0);
 }
 $74 = (($72) - ($1))|0;
 $75 = $10 >>> 3;
 $76 = ($10>>>0)<(256);
 L49: do {
  if ($76) {
   $77 = ((($5)) + 8|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = ((($5)) + 12|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $75 << 1;
   $82 = (38660 + ($81<<2)|0);
   $83 = ($78|0)==($82|0);
   if (!($83)) {
    $84 = ($78>>>0)<($6>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = ((($78)) + 12|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ($86|0)==($5|0);
    if (!($87)) {
     _abort();
     // unreachable;
    }
   }
   $88 = ($80|0)==($78|0);
   if ($88) {
    $89 = 1 << $75;
    $90 = $89 ^ -1;
    $91 = HEAP32[9655]|0;
    $92 = $91 & $90;
    HEAP32[9655] = $92;
    break;
   }
   $93 = ($80|0)==($82|0);
   if ($93) {
    $$pre = ((($80)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $94 = ($80>>>0)<($6>>>0);
    if ($94) {
     _abort();
     // unreachable;
    }
    $95 = ((($80)) + 8|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = ($96|0)==($5|0);
    if ($97) {
     $$pre$phiZ2D = $95;
    } else {
     _abort();
     // unreachable;
    }
   }
   $98 = ((($78)) + 12|0);
   HEAP32[$98>>2] = $80;
   HEAP32[$$pre$phiZ2D>>2] = $78;
  } else {
   $99 = ((($5)) + 24|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ((($5)) + 12|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = ($102|0)==($5|0);
   do {
    if ($103) {
     $113 = ((($5)) + 16|0);
     $114 = ((($113)) + 4|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = ($115|0)==(0|0);
     if ($116) {
      $117 = HEAP32[$113>>2]|0;
      $118 = ($117|0)==(0|0);
      if ($118) {
       $$3 = 0;
       break;
      } else {
       $$1272 = $117;$$1275 = $113;
      }
     } else {
      $$1272 = $115;$$1275 = $114;
     }
     while(1) {
      $119 = ((($$1272)) + 20|0);
      $120 = HEAP32[$119>>2]|0;
      $121 = ($120|0)==(0|0);
      if (!($121)) {
       $$1272 = $120;$$1275 = $119;
       continue;
      }
      $122 = ((($$1272)) + 16|0);
      $123 = HEAP32[$122>>2]|0;
      $124 = ($123|0)==(0|0);
      if ($124) {
       break;
      } else {
       $$1272 = $123;$$1275 = $122;
      }
     }
     $125 = ($$1275>>>0)<($6>>>0);
     if ($125) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1275>>2] = 0;
      $$3 = $$1272;
      break;
     }
    } else {
     $104 = ((($5)) + 8|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = ($105>>>0)<($6>>>0);
     if ($106) {
      _abort();
      // unreachable;
     }
     $107 = ((($105)) + 12|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = ($108|0)==($5|0);
     if (!($109)) {
      _abort();
      // unreachable;
     }
     $110 = ((($102)) + 8|0);
     $111 = HEAP32[$110>>2]|0;
     $112 = ($111|0)==($5|0);
     if ($112) {
      HEAP32[$107>>2] = $102;
      HEAP32[$110>>2] = $105;
      $$3 = $102;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $126 = ($100|0)==(0|0);
   if (!($126)) {
    $127 = ((($5)) + 28|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = (38924 + ($128<<2)|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = ($5|0)==($130|0);
    do {
     if ($131) {
      HEAP32[$129>>2] = $$3;
      $cond = ($$3|0)==(0|0);
      if ($cond) {
       $132 = 1 << $128;
       $133 = $132 ^ -1;
       $134 = HEAP32[(38624)>>2]|0;
       $135 = $134 & $133;
       HEAP32[(38624)>>2] = $135;
       break L49;
      }
     } else {
      $136 = HEAP32[(38636)>>2]|0;
      $137 = ($100>>>0)<($136>>>0);
      if ($137) {
       _abort();
       // unreachable;
      } else {
       $138 = ((($100)) + 16|0);
       $139 = HEAP32[$138>>2]|0;
       $not$ = ($139|0)!=($5|0);
       $$sink1 = $not$&1;
       $140 = (((($100)) + 16|0) + ($$sink1<<2)|0);
       HEAP32[$140>>2] = $$3;
       $141 = ($$3|0)==(0|0);
       if ($141) {
        break L49;
       } else {
        break;
       }
      }
     }
    } while(0);
    $142 = HEAP32[(38636)>>2]|0;
    $143 = ($$3>>>0)<($142>>>0);
    if ($143) {
     _abort();
     // unreachable;
    }
    $144 = ((($$3)) + 24|0);
    HEAP32[$144>>2] = $100;
    $145 = ((($5)) + 16|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = ($146|0)==(0|0);
    do {
     if (!($147)) {
      $148 = ($146>>>0)<($142>>>0);
      if ($148) {
       _abort();
       // unreachable;
      } else {
       $149 = ((($$3)) + 16|0);
       HEAP32[$149>>2] = $146;
       $150 = ((($146)) + 24|0);
       HEAP32[$150>>2] = $$3;
       break;
      }
     }
    } while(0);
    $151 = ((($145)) + 4|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ($152|0)==(0|0);
    if (!($153)) {
     $154 = HEAP32[(38636)>>2]|0;
     $155 = ($152>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     } else {
      $156 = ((($$3)) + 20|0);
      HEAP32[$156>>2] = $152;
      $157 = ((($152)) + 24|0);
      HEAP32[$157>>2] = $$3;
      break;
     }
    }
   }
  }
 } while(0);
 $158 = ($74>>>0)<(16);
 $159 = $3 & 1;
 if ($158) {
  $160 = $72 | $159;
  $161 = $160 | 2;
  HEAP32[$2>>2] = $161;
  $162 = (($0) + ($72)|0);
  $163 = ((($162)) + 4|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $164 | 1;
  HEAP32[$163>>2] = $165;
  $$2 = $0;
  return ($$2|0);
 } else {
  $166 = (($0) + ($1)|0);
  $167 = $159 | $1;
  $168 = $167 | 2;
  HEAP32[$2>>2] = $168;
  $169 = ((($166)) + 4|0);
  $170 = $74 | 3;
  HEAP32[$169>>2] = $170;
  $171 = (($166) + ($74)|0);
  $172 = ((($171)) + 4|0);
  $173 = HEAP32[$172>>2]|0;
  $174 = $173 | 1;
  HEAP32[$172>>2] = $174;
  _dispose_chunk($166,$74);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0419 = 0, $$0420 = 0, $$0431 = 0, $$0438 = 0, $$1 = 0, $$1418 = 0, $$1426 = 0, $$1429 = 0, $$1433 = 0, $$1437 = 0, $$2 = 0, $$3 = 0, $$3435 = 0, $$pre = 0, $$pre$phi24Z2D = 0, $$pre$phi26Z2D = 0, $$pre$phiZ2D = 0, $$pre23 = 0, $$pre25 = 0, $$sink2 = 0;
 var $$sink4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond17 = 0, $not$ = 0, $not$1 = 0, $not$19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(38636)>>2]|0;
   $14 = ($11>>>0)<($13>>>0);
   if ($14) {
    _abort();
    // unreachable;
   }
   $15 = HEAP32[(38640)>>2]|0;
   $16 = ($11|0)==($15|0);
   if ($16) {
    $100 = ((($2)) + 4|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $101 & 3;
    $103 = ($102|0)==(3);
    if (!($103)) {
     $$1 = $11;$$1418 = $12;
     break;
    }
    $104 = (($11) + ($12)|0);
    $105 = ((($11)) + 4|0);
    $106 = $12 | 1;
    $107 = $101 & -2;
    HEAP32[(38628)>>2] = $12;
    HEAP32[$100>>2] = $107;
    HEAP32[$105>>2] = $106;
    HEAP32[$104>>2] = $12;
    return;
   }
   $17 = $7 >>> 3;
   $18 = ($7>>>0)<(256);
   if ($18) {
    $19 = ((($11)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ((($11)) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $17 << 1;
    $24 = (38660 + ($23<<2)|0);
    $25 = ($20|0)==($24|0);
    if (!($25)) {
     $26 = ($20>>>0)<($13>>>0);
     if ($26) {
      _abort();
      // unreachable;
     }
     $27 = ((($20)) + 12|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)==($11|0);
     if (!($29)) {
      _abort();
      // unreachable;
     }
    }
    $30 = ($22|0)==($20|0);
    if ($30) {
     $31 = 1 << $17;
     $32 = $31 ^ -1;
     $33 = HEAP32[9655]|0;
     $34 = $33 & $32;
     HEAP32[9655] = $34;
     $$1 = $11;$$1418 = $12;
     break;
    }
    $35 = ($22|0)==($24|0);
    if ($35) {
     $$pre25 = ((($22)) + 8|0);
     $$pre$phi26Z2D = $$pre25;
    } else {
     $36 = ($22>>>0)<($13>>>0);
     if ($36) {
      _abort();
      // unreachable;
     }
     $37 = ((($22)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($38|0)==($11|0);
     if ($39) {
      $$pre$phi26Z2D = $37;
     } else {
      _abort();
      // unreachable;
     }
    }
    $40 = ((($20)) + 12|0);
    HEAP32[$40>>2] = $22;
    HEAP32[$$pre$phi26Z2D>>2] = $20;
    $$1 = $11;$$1418 = $12;
    break;
   }
   $41 = ((($11)) + 24|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($11)) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==($11|0);
   do {
    if ($45) {
     $55 = ((($11)) + 16|0);
     $56 = ((($55)) + 4|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==(0|0);
     if ($58) {
      $59 = HEAP32[$55>>2]|0;
      $60 = ($59|0)==(0|0);
      if ($60) {
       $$3 = 0;
       break;
      } else {
       $$1426 = $59;$$1429 = $55;
      }
     } else {
      $$1426 = $57;$$1429 = $56;
     }
     while(1) {
      $61 = ((($$1426)) + 20|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = ($62|0)==(0|0);
      if (!($63)) {
       $$1426 = $62;$$1429 = $61;
       continue;
      }
      $64 = ((($$1426)) + 16|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($65|0)==(0|0);
      if ($66) {
       break;
      } else {
       $$1426 = $65;$$1429 = $64;
      }
     }
     $67 = ($$1429>>>0)<($13>>>0);
     if ($67) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1429>>2] = 0;
      $$3 = $$1426;
      break;
     }
    } else {
     $46 = ((($11)) + 8|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($47>>>0)<($13>>>0);
     if ($48) {
      _abort();
      // unreachable;
     }
     $49 = ((($47)) + 12|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50|0)==($11|0);
     if (!($51)) {
      _abort();
      // unreachable;
     }
     $52 = ((($44)) + 8|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==($11|0);
     if ($54) {
      HEAP32[$49>>2] = $44;
      HEAP32[$52>>2] = $47;
      $$3 = $44;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $68 = ($42|0)==(0|0);
   if ($68) {
    $$1 = $11;$$1418 = $12;
   } else {
    $69 = ((($11)) + 28|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (38924 + ($70<<2)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($11|0)==($72|0);
    do {
     if ($73) {
      HEAP32[$71>>2] = $$3;
      $cond = ($$3|0)==(0|0);
      if ($cond) {
       $74 = 1 << $70;
       $75 = $74 ^ -1;
       $76 = HEAP32[(38624)>>2]|0;
       $77 = $76 & $75;
       HEAP32[(38624)>>2] = $77;
       $$1 = $11;$$1418 = $12;
       break L1;
      }
     } else {
      $78 = HEAP32[(38636)>>2]|0;
      $79 = ($42>>>0)<($78>>>0);
      if ($79) {
       _abort();
       // unreachable;
      } else {
       $80 = ((($42)) + 16|0);
       $81 = HEAP32[$80>>2]|0;
       $not$1 = ($81|0)!=($11|0);
       $$sink2 = $not$1&1;
       $82 = (((($42)) + 16|0) + ($$sink2<<2)|0);
       HEAP32[$82>>2] = $$3;
       $83 = ($$3|0)==(0|0);
       if ($83) {
        $$1 = $11;$$1418 = $12;
        break L1;
       } else {
        break;
       }
      }
     }
    } while(0);
    $84 = HEAP32[(38636)>>2]|0;
    $85 = ($$3>>>0)<($84>>>0);
    if ($85) {
     _abort();
     // unreachable;
    }
    $86 = ((($$3)) + 24|0);
    HEAP32[$86>>2] = $42;
    $87 = ((($11)) + 16|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = ($88|0)==(0|0);
    do {
     if (!($89)) {
      $90 = ($88>>>0)<($84>>>0);
      if ($90) {
       _abort();
       // unreachable;
      } else {
       $91 = ((($$3)) + 16|0);
       HEAP32[$91>>2] = $88;
       $92 = ((($88)) + 24|0);
       HEAP32[$92>>2] = $$3;
       break;
      }
     }
    } while(0);
    $93 = ((($87)) + 4|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==(0|0);
    if ($95) {
     $$1 = $11;$$1418 = $12;
    } else {
     $96 = HEAP32[(38636)>>2]|0;
     $97 = ($94>>>0)<($96>>>0);
     if ($97) {
      _abort();
      // unreachable;
     } else {
      $98 = ((($$3)) + 20|0);
      HEAP32[$98>>2] = $94;
      $99 = ((($94)) + 24|0);
      HEAP32[$99>>2] = $$3;
      $$1 = $11;$$1418 = $12;
      break;
     }
    }
   }
  } else {
   $$1 = $0;$$1418 = $1;
  }
 } while(0);
 $108 = HEAP32[(38636)>>2]|0;
 $109 = ($2>>>0)<($108>>>0);
 if ($109) {
  _abort();
  // unreachable;
 }
 $110 = ((($2)) + 4|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $111 & 2;
 $113 = ($112|0)==(0);
 if ($113) {
  $114 = HEAP32[(38644)>>2]|0;
  $115 = ($2|0)==($114|0);
  $116 = HEAP32[(38640)>>2]|0;
  if ($115) {
   $117 = HEAP32[(38632)>>2]|0;
   $118 = (($117) + ($$1418))|0;
   HEAP32[(38632)>>2] = $118;
   HEAP32[(38644)>>2] = $$1;
   $119 = $118 | 1;
   $120 = ((($$1)) + 4|0);
   HEAP32[$120>>2] = $119;
   $121 = ($$1|0)==($116|0);
   if (!($121)) {
    return;
   }
   HEAP32[(38640)>>2] = 0;
   HEAP32[(38628)>>2] = 0;
   return;
  }
  $122 = ($2|0)==($116|0);
  if ($122) {
   $123 = HEAP32[(38628)>>2]|0;
   $124 = (($123) + ($$1418))|0;
   HEAP32[(38628)>>2] = $124;
   HEAP32[(38640)>>2] = $$1;
   $125 = $124 | 1;
   $126 = ((($$1)) + 4|0);
   HEAP32[$126>>2] = $125;
   $127 = (($$1) + ($124)|0);
   HEAP32[$127>>2] = $124;
   return;
  }
  $128 = $111 & -8;
  $129 = (($128) + ($$1418))|0;
  $130 = $111 >>> 3;
  $131 = ($111>>>0)<(256);
  L96: do {
   if ($131) {
    $132 = ((($2)) + 8|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = ((($2)) + 12|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = $130 << 1;
    $137 = (38660 + ($136<<2)|0);
    $138 = ($133|0)==($137|0);
    if (!($138)) {
     $139 = ($133>>>0)<($108>>>0);
     if ($139) {
      _abort();
      // unreachable;
     }
     $140 = ((($133)) + 12|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($141|0)==($2|0);
     if (!($142)) {
      _abort();
      // unreachable;
     }
    }
    $143 = ($135|0)==($133|0);
    if ($143) {
     $144 = 1 << $130;
     $145 = $144 ^ -1;
     $146 = HEAP32[9655]|0;
     $147 = $146 & $145;
     HEAP32[9655] = $147;
     break;
    }
    $148 = ($135|0)==($137|0);
    if ($148) {
     $$pre23 = ((($135)) + 8|0);
     $$pre$phi24Z2D = $$pre23;
    } else {
     $149 = ($135>>>0)<($108>>>0);
     if ($149) {
      _abort();
      // unreachable;
     }
     $150 = ((($135)) + 8|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = ($151|0)==($2|0);
     if ($152) {
      $$pre$phi24Z2D = $150;
     } else {
      _abort();
      // unreachable;
     }
    }
    $153 = ((($133)) + 12|0);
    HEAP32[$153>>2] = $135;
    HEAP32[$$pre$phi24Z2D>>2] = $133;
   } else {
    $154 = ((($2)) + 24|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = ((($2)) + 12|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ($157|0)==($2|0);
    do {
     if ($158) {
      $168 = ((($2)) + 16|0);
      $169 = ((($168)) + 4|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(0|0);
      if ($171) {
       $172 = HEAP32[$168>>2]|0;
       $173 = ($172|0)==(0|0);
       if ($173) {
        $$3435 = 0;
        break;
       } else {
        $$1433 = $172;$$1437 = $168;
       }
      } else {
       $$1433 = $170;$$1437 = $169;
      }
      while(1) {
       $174 = ((($$1433)) + 20|0);
       $175 = HEAP32[$174>>2]|0;
       $176 = ($175|0)==(0|0);
       if (!($176)) {
        $$1433 = $175;$$1437 = $174;
        continue;
       }
       $177 = ((($$1433)) + 16|0);
       $178 = HEAP32[$177>>2]|0;
       $179 = ($178|0)==(0|0);
       if ($179) {
        break;
       } else {
        $$1433 = $178;$$1437 = $177;
       }
      }
      $180 = ($$1437>>>0)<($108>>>0);
      if ($180) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1437>>2] = 0;
       $$3435 = $$1433;
       break;
      }
     } else {
      $159 = ((($2)) + 8|0);
      $160 = HEAP32[$159>>2]|0;
      $161 = ($160>>>0)<($108>>>0);
      if ($161) {
       _abort();
       // unreachable;
      }
      $162 = ((($160)) + 12|0);
      $163 = HEAP32[$162>>2]|0;
      $164 = ($163|0)==($2|0);
      if (!($164)) {
       _abort();
       // unreachable;
      }
      $165 = ((($157)) + 8|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = ($166|0)==($2|0);
      if ($167) {
       HEAP32[$162>>2] = $157;
       HEAP32[$165>>2] = $160;
       $$3435 = $157;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $181 = ($155|0)==(0|0);
    if (!($181)) {
     $182 = ((($2)) + 28|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = (38924 + ($183<<2)|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = ($2|0)==($185|0);
     do {
      if ($186) {
       HEAP32[$184>>2] = $$3435;
       $cond17 = ($$3435|0)==(0|0);
       if ($cond17) {
        $187 = 1 << $183;
        $188 = $187 ^ -1;
        $189 = HEAP32[(38624)>>2]|0;
        $190 = $189 & $188;
        HEAP32[(38624)>>2] = $190;
        break L96;
       }
      } else {
       $191 = HEAP32[(38636)>>2]|0;
       $192 = ($155>>>0)<($191>>>0);
       if ($192) {
        _abort();
        // unreachable;
       } else {
        $193 = ((($155)) + 16|0);
        $194 = HEAP32[$193>>2]|0;
        $not$ = ($194|0)!=($2|0);
        $$sink4 = $not$&1;
        $195 = (((($155)) + 16|0) + ($$sink4<<2)|0);
        HEAP32[$195>>2] = $$3435;
        $196 = ($$3435|0)==(0|0);
        if ($196) {
         break L96;
        } else {
         break;
        }
       }
      }
     } while(0);
     $197 = HEAP32[(38636)>>2]|0;
     $198 = ($$3435>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = ((($$3435)) + 24|0);
     HEAP32[$199>>2] = $155;
     $200 = ((($2)) + 16|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = ((($$3435)) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = ((($201)) + 24|0);
        HEAP32[$205>>2] = $$3435;
        break;
       }
      }
     } while(0);
     $206 = ((($200)) + 4|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[(38636)>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = ((($$3435)) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = ((($207)) + 24|0);
       HEAP32[$212>>2] = $$3435;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $129 | 1;
  $214 = ((($$1)) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$1) + ($129)|0);
  HEAP32[$215>>2] = $129;
  $216 = HEAP32[(38640)>>2]|0;
  $217 = ($$1|0)==($216|0);
  if ($217) {
   HEAP32[(38628)>>2] = $129;
   return;
  } else {
   $$2 = $129;
  }
 } else {
  $218 = $111 & -2;
  HEAP32[$110>>2] = $218;
  $219 = $$1418 | 1;
  $220 = ((($$1)) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$1) + ($$1418)|0);
  HEAP32[$221>>2] = $$1418;
  $$2 = $$1418;
 }
 $222 = $$2 >>> 3;
 $223 = ($$2>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = (38660 + ($224<<2)|0);
  $226 = HEAP32[9655]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[9655] = $230;
   $$pre = ((($225)) + 8|0);
   $$0438 = $225;$$pre$phiZ2D = $$pre;
  } else {
   $231 = ((($225)) + 8|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[(38636)>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$0438 = $232;$$pre$phiZ2D = $231;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $235 = ((($$0438)) + 12|0);
  HEAP32[$235>>2] = $$1;
  $236 = ((($$1)) + 8|0);
  HEAP32[$236>>2] = $$0438;
  $237 = ((($$1)) + 12|0);
  HEAP32[$237>>2] = $225;
  return;
 }
 $238 = $$2 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $$0431 = 0;
 } else {
  $240 = ($$2>>>0)>(16777215);
  if ($240) {
   $$0431 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$2 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $$0431 = $262;
  }
 }
 $263 = (38924 + ($$0431<<2)|0);
 $264 = ((($$1)) + 28|0);
 HEAP32[$264>>2] = $$0431;
 $265 = ((($$1)) + 16|0);
 $266 = ((($$1)) + 20|0);
 HEAP32[$266>>2] = 0;
 HEAP32[$265>>2] = 0;
 $267 = HEAP32[(38624)>>2]|0;
 $268 = 1 << $$0431;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[(38624)>>2] = $271;
  HEAP32[$263>>2] = $$1;
  $272 = ((($$1)) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = ((($$1)) + 12|0);
  HEAP32[$273>>2] = $$1;
  $274 = ((($$1)) + 8|0);
  HEAP32[$274>>2] = $$1;
  return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ($$0431|0)==(31);
 $277 = $$0431 >>> 1;
 $278 = (25 - ($277))|0;
 $279 = $276 ? 0 : $278;
 $280 = $$2 << $279;
 $$0419 = $280;$$0420 = $275;
 while(1) {
  $281 = ((($$0420)) + 4|0);
  $282 = HEAP32[$281>>2]|0;
  $283 = $282 & -8;
  $284 = ($283|0)==($$2|0);
  if ($284) {
   label = 121;
   break;
  }
  $285 = $$0419 >>> 31;
  $286 = (((($$0420)) + 16|0) + ($285<<2)|0);
  $287 = $$0419 << 1;
  $288 = HEAP32[$286>>2]|0;
  $289 = ($288|0)==(0|0);
  if ($289) {
   label = 118;
   break;
  } else {
   $$0419 = $287;$$0420 = $288;
  }
 }
 if ((label|0) == 118) {
  $290 = HEAP32[(38636)>>2]|0;
  $291 = ($286>>>0)<($290>>>0);
  if ($291) {
   _abort();
   // unreachable;
  }
  HEAP32[$286>>2] = $$1;
  $292 = ((($$1)) + 24|0);
  HEAP32[$292>>2] = $$0420;
  $293 = ((($$1)) + 12|0);
  HEAP32[$293>>2] = $$1;
  $294 = ((($$1)) + 8|0);
  HEAP32[$294>>2] = $$1;
  return;
 }
 else if ((label|0) == 121) {
  $295 = ((($$0420)) + 8|0);
  $296 = HEAP32[$295>>2]|0;
  $297 = HEAP32[(38636)>>2]|0;
  $298 = ($296>>>0)>=($297>>>0);
  $not$19 = ($$0420>>>0)>=($297>>>0);
  $299 = $298 & $not$19;
  if (!($299)) {
   _abort();
   // unreachable;
  }
  $300 = ((($296)) + 12|0);
  HEAP32[$300>>2] = $$1;
  HEAP32[$295>>2] = $$1;
  $301 = ((($$1)) + 8|0);
  HEAP32[$301>>2] = $296;
  $302 = ((($$1)) + 12|0);
  HEAP32[$302>>2] = $$0420;
  $303 = ((($$1)) + 24|0);
  HEAP32[$303>>2] = 0;
  return;
 }
}
function _internal_memalign($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0100 = 0, $$099 = 0, $$1 = 0, $$198 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0>>>0)>(16);
 $$ = $2 ? $0 : 16;
 $3 = (($$) + -1)|0;
 $4 = $3 & $$;
 $5 = ($4|0)==(0);
 if ($5) {
  $$1 = $$;
 } else {
  $$099 = 16;
  while(1) {
   $6 = ($$099>>>0)<($$>>>0);
   $7 = $$099 << 1;
   if ($6) {
    $$099 = $7;
   } else {
    $$1 = $$099;
    break;
   }
  }
 }
 $8 = (-64 - ($$1))|0;
 $9 = ($8>>>0)>($1>>>0);
 if (!($9)) {
  $10 = (___errno_location()|0);
  HEAP32[$10>>2] = 12;
  $$198 = 0;
  return ($$198|0);
 }
 $11 = ($1>>>0)<(11);
 $12 = (($1) + 11)|0;
 $13 = $12 & -8;
 $14 = $11 ? 16 : $13;
 $15 = (($14) + 12)|0;
 $16 = (($15) + ($$1))|0;
 $17 = (_malloc($16)|0);
 $18 = ($17|0)==(0|0);
 if ($18) {
  $$198 = 0;
  return ($$198|0);
 }
 $19 = ((($17)) + -8|0);
 $20 = $17;
 $21 = (($$1) + -1)|0;
 $22 = $20 & $21;
 $23 = ($22|0)==(0);
 do {
  if ($23) {
   $$0100 = $19;$72 = $19;
  } else {
   $24 = (($17) + ($$1)|0);
   $25 = ((($24)) + -1|0);
   $26 = $25;
   $27 = (0 - ($$1))|0;
   $28 = $26 & $27;
   $29 = $28;
   $30 = ((($29)) + -8|0);
   $31 = $30;
   $32 = $19;
   $33 = (($31) - ($32))|0;
   $34 = ($33>>>0)>(15);
   $35 = (($30) + ($$1)|0);
   $36 = $34 ? $30 : $35;
   $37 = $36;
   $38 = (($37) - ($32))|0;
   $39 = ((($17)) + -4|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $40 & -8;
   $42 = (($41) - ($38))|0;
   $43 = $40 & 3;
   $44 = ($43|0)==(0);
   if ($44) {
    $45 = HEAP32[$19>>2]|0;
    $46 = (($45) + ($38))|0;
    HEAP32[$36>>2] = $46;
    $47 = ((($36)) + 4|0);
    HEAP32[$47>>2] = $42;
    $$0100 = $36;$72 = $36;
    break;
   } else {
    $48 = ((($36)) + 4|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = $49 & 1;
    $51 = $42 | $50;
    $52 = $51 | 2;
    HEAP32[$48>>2] = $52;
    $53 = (($36) + ($42)|0);
    $54 = ((($53)) + 4|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = $55 | 1;
    HEAP32[$54>>2] = $56;
    $57 = HEAP32[$39>>2]|0;
    $58 = $57 & 1;
    $59 = $38 | $58;
    $60 = $59 | 2;
    HEAP32[$39>>2] = $60;
    $61 = HEAP32[$48>>2]|0;
    $62 = $61 | 1;
    HEAP32[$48>>2] = $62;
    _dispose_chunk($19,$38);
    $$0100 = $36;$72 = $36;
    break;
   }
  }
 } while(0);
 $63 = ((($$0100)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64 & 3;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $67 = $64 & -8;
  $68 = (($14) + 16)|0;
  $69 = ($67>>>0)>($68>>>0);
  if ($69) {
   $70 = (($67) - ($14))|0;
   $71 = (($72) + ($14)|0);
   $73 = $64 & 1;
   $74 = $14 | $73;
   $75 = $74 | 2;
   HEAP32[$63>>2] = $75;
   $76 = ((($71)) + 4|0);
   $77 = $70 | 3;
   HEAP32[$76>>2] = $77;
   $78 = (($71) + ($70)|0);
   $79 = ((($78)) + 4|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $80 | 1;
   HEAP32[$79>>2] = $81;
   _dispose_chunk($71,$70);
  }
 }
 $82 = ((($72)) + 8|0);
 $$198 = $82;
 return ($$198|0);
}
function _posix_memalign($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$1 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(8);
 do {
  if ($3) {
   $4 = (_malloc($2)|0);
   $$2 = $4;
  } else {
   $5 = $1 >>> 2;
   $6 = $1 & 3;
   $7 = ($6|0)!=(0);
   $8 = ($5|0)==(0);
   $or$cond = $7 | $8;
   if ($or$cond) {
    $$1 = 22;
    return ($$1|0);
   }
   $9 = (($5) + 1073741823)|0;
   $10 = $9 & $5;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $$1 = 22;
    return ($$1|0);
   }
   $12 = (-64 - ($1))|0;
   $13 = ($12>>>0)<($2>>>0);
   if ($13) {
    $$1 = 12;
    return ($$1|0);
   } else {
    $14 = ($1>>>0)>(16);
    $$ = $14 ? $1 : 16;
    $15 = (_internal_memalign($$,$2)|0);
    $$2 = $15;
    break;
   }
  }
 } while(0);
 $16 = ($$2|0)==(0|0);
 if ($16) {
  $$1 = 12;
  return ($$1|0);
 }
 HEAP32[$0>>2] = $$2;
 $$1 = 0;
 return ($$1|0);
}
function _emscripten_get_global_libc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (39116|0);
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0;
 var $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$26 = $17;
   while(1) {
    $25 = ($26|0)<(0);
    if ($25) {
     break;
    }
    $34 = (($$04855) - ($26))|0;
    $35 = ((($$04954)) + 4|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($26>>>0)>($36>>>0);
    $38 = ((($$04954)) + 8|0);
    $$150 = $37 ? $38 : $$04954;
    $39 = $37 << 31 >> 31;
    $$1 = (($39) + ($$04756))|0;
    $40 = $37 ? $36 : 0;
    $$0 = (($26) - ($40))|0;
    $41 = HEAP32[$$150>>2]|0;
    $42 = (($41) + ($$0)|0);
    HEAP32[$$150>>2] = $42;
    $43 = ((($$150)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (($44) - ($$0))|0;
    HEAP32[$43>>2] = $45;
    $46 = HEAP32[$13>>2]|0;
    $47 = $$150;
    HEAP32[$vararg_buffer3>>2] = $46;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $47;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $48 = (___syscall146(146,($vararg_buffer3|0))|0);
    $49 = (___syscall_ret($48)|0);
    $50 = ($34|0)==($49|0);
    if ($50) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $34;$$04954 = $$150;$26 = $49;
    }
   }
   $27 = ((($0)) + 16|0);
   HEAP32[$27>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $28 = HEAP32[$0>>2]|0;
   $29 = $28 | 32;
   HEAP32[$0>>2] = $29;
   $30 = ($$04756|0)==(2);
   if ($30) {
    $$051 = 0;
   } else {
    $31 = ((($$04954)) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($2) - ($32))|0;
    $$051 = $33;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  HEAP32[$4>>2] = $20;
  HEAP32[$7>>2] = $20;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $7 = (___syscall140(140,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  HEAP32[$3>>2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $10 = $$pre;
 }
 STACKTOP = sp;return ($10|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___pthread_self_85()|0);
 $1 = ((($0)) + 64|0);
 return ($1|0);
}
function ___pthread_self_85() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (12972|0);
}
function _dummy($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 470;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01519 = $0;$23 = $1;
   while(1) {
    $4 = HEAP8[$$01519>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$sink = $23;
     break L1;
    }
    $6 = ((($$01519)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01519 = $6;$23 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn = $$0;
   while(1) {
    $19 = ((($$pn)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$sink = $21;
 }
 $22 = (($$sink) - ($1))|0;
 return ($22|0);
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___lctrans_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (___mo_lookup($3,$5,$0)|0);
  $$0 = $6;
 }
 $7 = ($$0|0)!=(0|0);
 $8 = $7 ? $$0 : $0;
 return ($8|0);
}
function ___mo_lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 1794895138)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_swapc($6,$4)|0);
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_swapc($9,$4)|0);
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_swapc($12,$4)|0);
 $14 = $1 >>> 2;
 $15 = ($7>>>0)<($14>>>0);
 L1: do {
  if ($15) {
   $16 = $7 << 2;
   $17 = (($1) - ($16))|0;
   $18 = ($10>>>0)<($17>>>0);
   $19 = ($13>>>0)<($17>>>0);
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = $13 | $10;
    $21 = $20 & 3;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = $10 >>> 2;
     $24 = $13 >>> 2;
     $$090 = 0;$$094 = $7;
     while(1) {
      $25 = $$094 >>> 1;
      $26 = (($$090) + ($25))|0;
      $27 = $26 << 1;
      $28 = (($27) + ($23))|0;
      $29 = (($0) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_swapc($30,$4)|0);
      $32 = (($28) + 1)|0;
      $33 = (($0) + ($32<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (_swapc($34,$4)|0);
      $36 = ($35>>>0)<($1>>>0);
      $37 = (($1) - ($35))|0;
      $38 = ($31>>>0)<($37>>>0);
      $or$cond102 = $36 & $38;
      if (!($or$cond102)) {
       $$4 = 0;
       break L1;
      }
      $39 = (($35) + ($31))|0;
      $40 = (($0) + ($39)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(0);
      if (!($42)) {
       $$4 = 0;
       break L1;
      }
      $43 = (($0) + ($35)|0);
      $44 = (_strcmp($2,$43)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       break;
      }
      $62 = ($$094|0)==(1);
      $63 = ($44|0)<(0);
      $64 = (($$094) - ($25))|0;
      $$195 = $63 ? $25 : $64;
      $$191 = $63 ? $$090 : $26;
      if ($62) {
       $$4 = 0;
       break L1;
      } else {
       $$090 = $$191;$$094 = $$195;
      }
     }
     $46 = (($27) + ($24))|0;
     $47 = (($0) + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (_swapc($48,$4)|0);
     $50 = (($46) + 1)|0;
     $51 = (($0) + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (_swapc($52,$4)|0);
     $54 = ($53>>>0)<($1>>>0);
     $55 = (($1) - ($53))|0;
     $56 = ($49>>>0)<($55>>>0);
     $or$cond104 = $54 & $56;
     if ($or$cond104) {
      $57 = (($0) + ($53)|0);
      $58 = (($53) + ($49))|0;
      $59 = (($0) + ($58)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = ($60<<24>>24)==(0);
      $$ = $61 ? $57 : 0;
      $$4 = $$;
     } else {
      $$4 = 0;
     }
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  } else {
   $$4 = 0;
  }
 } while(0);
 return ($$4|0);
}
function _swapc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 $3 = (_llvm_bswap_i32(($0|0))|0);
 $$ = $2 ? $0 : $3;
 return ($$|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;$$3 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009)|0;
    $21 = ($$036$lcssa64>>>0)>(3);
    L11: do {
     if ($21) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $22 = HEAP32[$$046>>2]|0;
       $23 = $22 ^ $20;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break;
       }
       $29 = ((($$046)) + 4|0);
       $30 = (($$13745) + -4)|0;
       $31 = ($30>>>0)>(3);
       if ($31) {
        $$046 = $29;$$13745 = $30;
       } else {
        $$0$lcssa = $29;$$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;$$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $32 = ($$137$lcssa|0)==(0);
     if ($32) {
      $$2 = $$0$lcssa;$$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
     }
    }
    while(1) {
     $33 = HEAP8[$$140>>0]|0;
     $34 = ($33<<24>>24)==($18<<24>>24);
     if ($34) {
      $$2 = $$140;$$3 = $$23839;
      break L8;
     }
     $35 = ((($$140)) + 1|0);
     $36 = (($$23839) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $35;$$3 = 0;
      break;
     } else {
      $$140 = $35;$$23839 = $36;
     }
    }
   }
  }
 } while(0);
 $38 = ($$3|0)!=(0);
 $39 = $38 ? $$2 : 0;
 return ($39|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((39180|0));
 return (39188|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((39180|0));
 return;
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[3335]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[3335]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $26 = $17;
     } else {
      $26 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $25 = ($26|0)==(0);
     if (!($25)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 511]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = (($15) - ($16))|0;
   $18 = ((($0)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   (FUNCTION_TABLE_iiii[$19 & 511]($0,$17,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_86()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (___strerror_l($0,$3)|0);
 return ($4|0);
}
function ___pthread_self_86() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___strerror_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $$016 = 0;
 while(1) {
  $3 = (29149 + ($$016)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = ($5|0)==($0|0);
  if ($6) {
   label = 2;
   break;
  }
  $7 = (($$016) + 1)|0;
  $8 = ($7|0)==(87);
  if ($8) {
   $$01214 = 29237;$$115 = 87;
   label = 5;
   break;
  } else {
   $$016 = $7;
  }
 }
 if ((label|0) == 2) {
  $2 = ($$016|0)==(0);
  if ($2) {
   $$012$lcssa = 29237;
  } else {
   $$01214 = 29237;$$115 = $$016;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $$113 = $$01214;
   while(1) {
    $9 = HEAP8[$$113>>0]|0;
    $10 = ($9<<24>>24)==(0);
    $11 = ((($$113)) + 1|0);
    if ($10) {
     break;
    } else {
     $$113 = $11;
    }
   }
   $12 = (($$115) + -1)|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $$012$lcssa = $11;
    break;
   } else {
    $$01214 = $11;$$115 = $12;
    label = 5;
   }
  }
 }
 $14 = ((($1)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (___lctrans($$012$lcssa,$15)|0);
 return ($16|0);
}
function ___lctrans($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___lctrans_impl($0,$1)|0);
 return ($2|0);
}
function _memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $14 = 0;
  } else {
   $$01318 = $0;$$01417 = $2;$$019 = $1;
   while(1) {
    $4 = HEAP8[$$01318>>0]|0;
    $5 = HEAP8[$$019>>0]|0;
    $6 = ($4<<24>>24)==($5<<24>>24);
    if (!($6)) {
     break;
    }
    $7 = (($$01417) + -1)|0;
    $8 = ((($$01318)) + 1|0);
    $9 = ((($$019)) + 1|0);
    $10 = ($7|0)==(0);
    if ($10) {
     $14 = 0;
     break L1;
    } else {
     $$01318 = $8;$$01417 = $7;$$019 = $9;
    }
   }
   $11 = $4&255;
   $12 = $5&255;
   $13 = (($11) - ($12))|0;
   $14 = $13;
  }
 } while(0);
 return ($14|0);
}
function _write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $4 = (___syscall4(4,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function _htonl($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___bswap_32($0)|0);
 return ($1|0);
}
function ___bswap_32($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_llvm_bswap_i32(($0|0))|0);
 return ($1|0);
}
function _htons($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___bswap_16($0)|0);
 return ($1|0);
}
function ___bswap_16($0) {
 $0 = $0|0;
 var $rev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $rev = (_llvm_bswap_i16(($0|0))|0);
 return ($rev|0);
}
function _ntohs($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___bswap_16_339($0)|0);
 return ($1|0);
}
function ___bswap_16_339($0) {
 $0 = $0|0;
 var $rev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $rev = (_llvm_bswap_i16(($0|0))|0);
 return ($rev|0);
}
function _strerror_r($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strerror($0)|0);
 $4 = (_strlen($3)|0);
 $5 = ($4>>>0)<($2>>>0);
 if ($5) {
  $9 = (($4) + 1)|0;
  _memcpy(($1|0),($3|0),($9|0))|0;
  $$0 = 0;
 } else {
  $6 = ($2|0)==(0);
  $7 = (($2) + -1)|0;
  if ($6) {
   $$0 = 34;
  } else {
   $8 = (($1) + ($7)|0);
   _memcpy(($1|0),($3|0),($7|0))|0;
   HEAP8[$8>>0] = 0;
   $$0 = 34;
  }
 }
 return ($$0|0);
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _pthread_mutex_lock(x) {
    x = x | 0;
    return 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _pthread_mutex_unlock(x) {
    x = x | 0;
    return 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    increment = ((increment + 15) & -16)|0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        ___setErrNo(12);
        return -1;
      }
    }
    return oldDynamicTop|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _llvm_ctlz_i64(l, h, isZeroUndef) {
    l = l | 0;
    h = h | 0;
    isZeroUndef = isZeroUndef | 0;
    var ret = 0;
    ret = Math_clz32(h) | 0;
    if ((ret | 0) == 32) ret = ret + (Math_clz32(l) | 0) | 0;
    tempRet0 = 0;
    return ret | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _llvm_bswap_i16(x) {
    x = x|0;
    return (((x&0xff)<<8) | ((x>>8)&0xff))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = tempRet0;
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}

  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&511](a1|0,a2|0,a3|0)|0;
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_d(index) {
  index = index|0;
  
  return +FUNCTION_TABLE_d[index&511]();
}


function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  FUNCTION_TABLE_viiiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}


function dynCall_di(index,a1) {
  index = index|0;
  a1=a1|0;
  return +FUNCTION_TABLE_di[index&511](a1|0);
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&511]()|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&511](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&511](a1|0,a2|0);
}


function dynCall_vidddd(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=+a4; a5=+a5;
  FUNCTION_TABLE_vidddd[index&511](a1|0,+a2,+a3,+a4,+a5);
}


function dynCall_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
  FUNCTION_TABLE_viiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&511](a1|0)|0;
}


function dynCall_viiid(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4;
  FUNCTION_TABLE_viiid[index&31](a1|0,a2|0,a3|0,+a4);
}


function dynCall_vdddd(index,a1,a2,a3,a4) {
  index = index|0;
  a1=+a1; a2=+a2; a3=+a3; a4=+a4;
  FUNCTION_TABLE_vdddd[index&255](+a1,+a2,+a3,+a4);
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&511](a1|0,a2|0,a3|0);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&511]();
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&63](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&511](a1|0,a2|0)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&511](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0;
}
function b1(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1);
}
function b2() {
 ; nullFunc_d(2);return +0;
}
function b3(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(3);
}
function b4(p0) {
 p0 = p0|0; nullFunc_di(4);return +0;
}
function b5() {
 ; nullFunc_i(5);return 0;
}
function _glGetError__wrapper() {
 ; return _glGetError()|0;
}
function _glCreateProgram__wrapper() {
 ; return _glCreateProgram()|0;
}
function b6(p0) {
 p0 = p0|0; nullFunc_vi(6);
}
function _emscripten_run_script__wrapper(p0) {
 p0 = p0|0; _emscripten_run_script(p0|0);
}
function _glutInitDisplayMode__wrapper(p0) {
 p0 = p0|0; _glutInitDisplayMode(p0|0);
}
function _glutDisplayFunc__wrapper(p0) {
 p0 = p0|0; _glutDisplayFunc(p0|0);
}
function _glutKeyboardFunc__wrapper(p0) {
 p0 = p0|0; _glutKeyboardFunc(p0|0);
}
function _glutKeyboardUpFunc__wrapper(p0) {
 p0 = p0|0; _glutKeyboardUpFunc(p0|0);
}
function _glutMouseFunc__wrapper(p0) {
 p0 = p0|0; _glutMouseFunc(p0|0);
}
function _glutReshapeFunc__wrapper(p0) {
 p0 = p0|0; _glutReshapeFunc(p0|0);
}
function _glutMotionFunc__wrapper(p0) {
 p0 = p0|0; _glutMotionFunc(p0|0);
}
function _glutPassiveMotionFunc__wrapper(p0) {
 p0 = p0|0; _glutPassiveMotionFunc(p0|0);
}
function _glutIdleFunc__wrapper(p0) {
 p0 = p0|0; _glutIdleFunc(p0|0);
}
function _glutSpecialFunc__wrapper(p0) {
 p0 = p0|0; _glutSpecialFunc(p0|0);
}
function _glutSpecialUpFunc__wrapper(p0) {
 p0 = p0|0; _glutSpecialUpFunc(p0|0);
}
function _glEnable__wrapper(p0) {
 p0 = p0|0; _glEnable(p0|0);
}
function _glClear__wrapper(p0) {
 p0 = p0|0; _glClear(p0|0);
}
function _glDisable__wrapper(p0) {
 p0 = p0|0; _glDisable(p0|0);
}
function _glCompileShader__wrapper(p0) {
 p0 = p0|0; _glCompileShader(p0|0);
}
function _glLinkProgram__wrapper(p0) {
 p0 = p0|0; _glLinkProgram(p0|0);
}
function _glUseProgram__wrapper(p0) {
 p0 = p0|0; _glUseProgram(p0|0);
}
function b7(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(7);
}
function _glutInit__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _glutInit(p0|0,p1|0);
}
function _glutReshapeWindow__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _glutReshapeWindow(p0|0,p1|0);
}
function _glBindBuffer__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _glBindBuffer(p0|0,p1|0);
}
function _glAttachShader__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _glAttachShader(p0|0,p1|0);
}
function _glBindTexture__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _glBindTexture(p0|0,p1|0);
}
function b8(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4; nullFunc_vidddd(8);
}
function b9(p0,p1,p2,p3,p4,p5,p6,p7,p8) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; nullFunc_viiiiiiiii(9);
}
function _glTexImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7,p8) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; _glTexImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0,p8|0);
}
function b10(p0) {
 p0 = p0|0; nullFunc_ii(10);return 0;
}
function _glutCreateWindow__wrapper(p0) {
 p0 = p0|0; return _glutCreateWindow(p0|0)|0;
}
function _glutGet__wrapper(p0) {
 p0 = p0|0; return _glutGet(p0|0)|0;
}
function _glCreateShader__wrapper(p0) {
 p0 = p0|0; return _glCreateShader(p0|0)|0;
}
function b11(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = +p3; nullFunc_viiid(11);
}
function b12(p0,p1,p2,p3) {
 p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3; nullFunc_vdddd(12);
}
function _glClearColor__wrapper(p0,p1,p2,p3) {
 p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3; _glClearColor(+p0,+p1,+p2,+p3);
}
function b13(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(13);
}
function _emscripten_set_main_loop__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_set_main_loop(p0|0,p1|0,p2|0);
}
function b14() {
 ; nullFunc_v(14);
}
function _SDL_GL_SwapBuffers__wrapper() {
 ; _SDL_GL_SwapBuffers();
}
function b15(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(15);return 0;
}
function b16(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(16);
}
function b17(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(17);return 0;
}
function _glGetAttribLocation__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; return _glGetAttribLocation(p0|0,p1|0)|0;
}
function b18(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(18);
}
function _glViewport__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _glViewport(p0|0,p1|0,p2|0,p3|0);
}
function _glBufferData__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _glBufferData(p0|0,p1|0,p2|0,p3|0);
}
function _glShaderSource__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _glShaderSource(p0|0,p1|0,p2|0,p3|0);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN94__LT_std__io__Write__write_fmt__Adaptor_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17hc580dfdea9cbcaefE,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17ha35fdc72574ef215E,b0,b0,b0,b0,__ZN94__LT_std__io__Write__write_fmt__Adaptor_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17hdafd0d40251d9b64E,b0,b0,b0,b0,b0,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17hde67e0a1b4102f16E,b0,b0,b0,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h5f28a8b590256c56E,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h33935be6da5ad51eE,b0,b0,b0,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h74586ea09786e1c8E,b0,b0,b0,b0,b0,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17he14e4b5b01783aadE,b0,b0,b0,__ZN96__LT_core__fmt__builders__PadAdapter_LT__u27_a_C__u20__u27_b_GT__u20_as_u20_core__fmt__Write_GT_9write_str17he552cbab6976e207E,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,___stdout_write,___stdio_seek,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN4core3fmt8builders9DebugList5entry17h1543c7a40da348bfE,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,__ZN4core3fmt5write17h6c8dbcbe50728a23E,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,___stdio_write,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0];
var FUNCTION_TABLE_viiiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,__ZN5rustv6window6Window12on_ldragging17hbc5a86b84d6a0356E,__ZN5rustv6window6Window12on_mdragging17hc729ed35455a29e5E,__ZN5rustv6window6Window12on_rdragging17h1d7e07ee0908bcb5E,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN5rustv6window6Window8on_click17h105657d36752464bE,b1,__ZN5rustv6window6Window9on_key_up17h7a10f89db52bbf32E,__ZN5rustv6window6Window6on_key17hd076ab7108f7f0c1E,b1,b1,__ZN5rustv6window6Window14event_dispatch17hf838975b92ed8ba4E,__ZN5rustv6window6Window5event17hb822614ab60a783bE,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN4core3fmt9Arguments6new_v117h1cedc7e123bae470E,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,__ZN5rustv3r3d6matrix7Matrix417h01ef493098028131E,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN5rustv7shaders21create_shader_program17h9849a4ef5499797fE,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1];
var FUNCTION_TABLE_d = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN5rustv3r3d4zero17hccc9cde42a9b40adE,__ZN5rustv3r3d3one17had807af2f7293135E,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2];
var FUNCTION_TABLE_viiiiiii = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN4core3fmt9Arguments16new_v1_formatted17hd7921c86529aa3b1E,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_di = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,__ZN48__LT_V_u20_as_u20_rustv__r3d__vector__VecOps_GT_10vsum_elems17hfea8d82c634e23c5E,b4,b4,b4,b4,b4,b4,__ZN4core5clone5Clone5clone17h74371fa23fb4a621E,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4];
var FUNCTION_TABLE_i = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,__ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit17hc193c398e9627c24E,__ZN3std9panicking18update_panic_count11PANIC_COUNT6__init17h71c66fed1e8ea9feE,b5,b5,b5,b5,b5,b5,__ZN3std9panicking12LOCAL_STDERR7__getit17hc864a5f35cd7ceb2E,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,__ZN3std10sys_common11thread_info11THREAD_INFO7__getit17h73db1c7b8997081aE,b5,b5,b5,b5,b5,b5,b5,b5,__ZN3std2io5stdio6stdout11stdout_init17h94bd7fe6d3b58cd4E,b5,b5,b5,b5,__ZN3std2io5stdio12LOCAL_STDOUT7__getit17h83ddda054464905cE,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,__ZN4core3mem7size_of17h34f2235168088e08E,__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_5empty17ha06199c2c16c491aE,__ZN4core3mem7size_of17hde987414d3fda057E,__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_5empty17h7ea790039c9e1aaeE,__ZN4core3mem7size_of17hd7a6698aeb9187d3E,__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_5empty17hf42f9cf1df3d97cbE,__ZN4core3mem7size_of17h809a29d4399807a6E,__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_5empty17hff45d0c488db48a8E,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN5rustv6window4wins17he08646de1c9bf0c1E,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_glGetError__wrapper,b5,b5,_glCreateProgram__wrapper,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN4core3mem7size_of17h1975c8c10bebb793E,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,__ZN4core3mem7size_of17h066421ba255ff1ccE,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN3std2io5stdio6stdout17he08cc1d9dbe12a05E,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5];
var FUNCTION_TABLE_vi = [b6,__ZN4core3ptr13drop_in_place17ha7ccb58bcd493979E,b6,__ZN4core3ptr13drop_in_place17h41928bb2cd95a692E,b6,__ZN4core3ptr13drop_in_place17hfde6b988799b2301E,b6,__ZN4core3ptr13drop_in_place17hc7ed0b862d58d0c9E,b6,__ZN4core3ptr13drop_in_place17h993914d213c45a4eE,b6,__ZN4core3ptr13drop_in_place17h0131253b1c417f0dE,b6,__ZN4core3ptr13drop_in_place17h0028a71fb8c1a22bE,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN4core3ptr13drop_in_place17h4dcb0deb2b88097cE,b6,__ZN4core3ptr13drop_in_place17h6ec3dbe65a5e3525E
,b6,__ZN4core3ptr13drop_in_place17hd892534b9a8ccfedE,b6,__ZN4core3ptr13drop_in_place17hd161e49046040211E,b6,__ZN4core3ptr13drop_in_place17h0daa30b095c44695E,b6,b6,b6,__ZN3std6thread5local2os13destroy_value17hb0ad3110e20c83d9E,__ZN4core3ptr13drop_in_place17haa19684e53305099E,b6,__ZN4core3ptr13drop_in_place17hda15ddb7c8ed5c05E_llvm_2B778CB6,b6,__ZN3std6thread5local2os13destroy_value17h1d008f0a84824767E,b6,__ZN3std9panicking12LOCAL_STDERR6__init17h9d92863ba16b6716E,__ZN4core3ptr13drop_in_place17hcafc976be6edb559E,b6,b6,b6,b6,__ZN4core3ptr13drop_in_place17h4a3f90cf332318dcE_llvm_CBBB2DFF,b6,b6,b6,__ZN4core3ptr13drop_in_place17h4f9b86168d436f6eE,b6,__ZN4core3ptr13drop_in_place17h0ca949c84f96d924E,b6
,b6,__ZN3std10sys_common11thread_info11THREAD_INFO6__init17h7a835eb5b3234f0dE,__ZN3std6thread5local2os13destroy_value17h532cd07673e97328E,__ZN4core3ptr13drop_in_place17he2f106b0e5c5ac18E,__ZN50__LT_F_u20_as_u20_alloc__boxed__FnBox_LT_A_GT__GT_8call_box17h361f0e062a718c91E,__ZN4core3ptr13drop_in_place17hfdb0210616787f77E,b6,b6,b6,b6,__ZN4core3ptr13drop_in_place17hcc842658002ef6e1E,b6,b6,b6,b6,__ZN3std2io5stdio12LOCAL_STDOUT6__init17h99c73f74cd36edf1E,__ZN4core3ptr13drop_in_place17h4db32639b770ce6bE,b6,b6,b6,__ZN4core3ptr13drop_in_place17hca5fbe08253c01adE,b6,b6,b6,__ZN4core3ptr13drop_in_place17h52cca3c08630257aE,b6,b6,b6,b6,b6
,__ZN4core3ptr13drop_in_place17he028ebbf82a79ee5E,b6,b6,b6,b6,b6,__ZN4core3ptr13drop_in_place17he31d89decadc9446E_1555,b6,__ZN4core3ptr13drop_in_place17h5d8910a8677d354cE,b6,b6,__ZN4core3ptr13drop_in_place17heb60fb1ea7d874d7E,b6,b6,b6,__ZN4core3ptr13drop_in_place17hf92fb41beb304176E,b6,b6,b6,__ZN4core3ptr13drop_in_place17hba9770ae2f637f1dE,b6,__ZN4core3ptr13drop_in_place17hb84be76021358c0dE,b6,b6,b6,__ZN4core3ptr13drop_in_place17h7daa23394e1cac32E,b6,b6,b6,__ZN4core3ptr13drop_in_place17h0a6bebd1f5591014E_2364
,b6,__ZN4core3ptr13drop_in_place17h45628e00d608d7eaE,b6,__ZN4core3ptr13drop_in_place17h2c097ae07b5f434dE_2754,b6,__ZN4core3ptr13drop_in_place17h912bcfafe45fc5baE,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN3std2io5stdio6_print17h5e38a8ff46cfb3e1E,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,_emscripten_run_script__wrapper,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN4core3ptr13drop_in_place17h9be59e88b77b6d1fE,__ZN4core3ptr13drop_in_place17h410e6eec18304b4cE,b6,__ZN4core3mem6forget17h49541cbfa280a011E,__ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_3new17h9e337016d5bfd3eeE,b6,_glutInitDisplayMode__wrapper,b6,b6,b6,b6
,b6,_glutDisplayFunc__wrapper,b6,_glutKeyboardFunc__wrapper,b6,_glutKeyboardUpFunc__wrapper,b6,_glutMouseFunc__wrapper,b6,_glutReshapeFunc__wrapper,b6,_glutMotionFunc__wrapper,b6,_glutPassiveMotionFunc__wrapper,b6,_glutIdleFunc__wrapper,b6,b6,_glutSpecialFunc__wrapper,b6,_glutSpecialUpFunc__wrapper,b6,_glEnable__wrapper,b6,_glClear__wrapper,_glDisable__wrapper,b6,__ZN4core3ptr13drop_in_place17heae217dde415a979E,b6,__ZN66__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__drop__Drop_GT_4drop17hbbb6c189dd8764efE
,__ZN4core3ptr13drop_in_place17hfa3f6176c8a73023E,__ZN82__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__u20_as_u20_core__ops__drop__Drop_GT_4drop17h0c05810c11a1c7a2E,__ZN4core3ptr13drop_in_place17h7da8ace2a16d31d8E,__ZN66__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__drop__Drop_GT_4drop17h9cef0c2cc886955dE,__ZN4core3ptr13drop_in_place17h48bfff9d518a29c3E,__ZN82__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__u20_as_u20_core__ops__drop__Drop_GT_4drop17h4071bf09d3d3d3b5E,__ZN4core3ptr13drop_in_place17hcdb5cdbc316a5a16E,__ZN4core3ptr13drop_in_place17h4ca7e74bbb163d7dE,__ZN4core3ptr13drop_in_place17h312da34936eb6b8bE,__ZN66__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__drop__Drop_GT_4drop17h9ae0c119032b715aE,__ZN4core3ptr13drop_in_place17h065a1df124132e0bE,__ZN82__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__u20_as_u20_core__ops__drop__Drop_GT_4drop17ha80ede2c7a82b1dcE,__ZN66__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__drop__Drop_GT_4drop17h8aeb81cfdebb331bE,__ZN4core3ptr13drop_in_place17h524420189630e30dE,__ZN82__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__u20_as_u20_core__ops__drop__Drop_GT_4drop17h981ea48916c4a475E,__ZN71__LT_alloc__vec__IntoIter_LT_T_GT__u20_as_u20_core__ops__drop__Drop_GT_4drop17h642ec26ba88f22feE,__ZN66__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__drop__Drop_GT_4drop17h997fefd5cfd33cbaE,__ZN4core3ptr13drop_in_place17h13f94b80aaa580bcE,__ZN82__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__u20_as_u20_core__ops__drop__Drop_GT_4drop17hfba2afe8d2e964dfE,__ZN4core3ptr13drop_in_place17h1f12095180eca2a0E,b6,__ZN4core3ptr13drop_in_place17hcf7a48d5df5f24c4E,b6,__ZN66__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__drop__Drop_GT_4drop17h5b300b958b3453dfE,__ZN4core3ptr13drop_in_place17he3c15c5a2bddefe7E,__ZN82__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__u20_as_u20_core__ops__drop__Drop_GT_4drop17h455a94d057fc7c8bE,__ZN66__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__drop__Drop_GT_4drop17h720ffcd52c9f8b9cE,__ZN4core3ptr13drop_in_place17hd32eaee5678338c6E,__ZN82__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__u20_as_u20_core__ops__drop__Drop_GT_4drop17h600cf6cb14ec9a74E,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN4core3ptr13drop_in_place17h033be6a4eca0dd18E,__ZN4core9panicking5panic17h9fa3414033a56a4dE,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,_glCompileShader__wrapper,__ZN5alloc6string6String3new17h12c66b125e7bb509E,b6,b6,_glLinkProgram__wrapper,_glUseProgram__wrapper,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN5rustv19android_logw_string17h84ea7b0122af4e4fE,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_6double17h7c80b4d26ce5f7f2E,b6,b6,b6,b6,b6,__ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_6double17hbc540d80a1e64f03E,b6,b6,b6,__ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_6double17h23f32bd4676f5808E,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,__ZN4core3mem6forget17hffa1216d18bc5048E,b6,b6,__ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h6b99c066bc6eaea1E,b6,__ZN46__LT_std__thread__local__LocalKey_LT_T_GT__GT_4with17hd9ff511b4ca0c194E,__ZN3std9panicking3try7do_call17haca0c419784eb1fbE_llvm_2B778CB6,b6,b6,b6,b6,b6,b6,__ZN4core3ptr13drop_in_place17h2c0fd746b18e28b4E,b6,b6,b6,b6,b6,__ZN4core3ptr13drop_in_place17hc7d659014c0d680dE_llvm_2B27B54C,b6,b6,b6,__ZN3std10sys_common4util10dumb_print17hae6bc6d2823858fdE,__ZN3std9panicking12default_hook17h2e9087424e5d7257E,b6,b6
,b6,b6,b6,b6,b6,b6,b6,__ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_6double17h6d0cd599b42ba57cE,b6,b6,b6,b6,__ZN4core3ptr13drop_in_place17hab16597baac572fdE_llvm_DBC6AE32,__ZN41__LT_std__sync__mutex__Mutex_LT_T_GT__GT_3new17hdf31bf4bc0e25870E,__ZN3std4sync7condvar7Condvar3new17h6e14e1012796ca03E,b6,b6,b6,b6,b6,b6,__ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_6double17h65ca4c270df6d71fE,b6,b6,b6,__ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17hcb148d3fb287149bE,b6,b6,b6,b6
,b6,b6,b6,b6,__ZN79__LT_std__io__buffered__BufWriter_LT_W_GT__u20_as_u20_core__ops__drop__Drop_GT_4drop17h116b7d9a9829a2cfE,__ZN4core3ptr13drop_in_place17hb434eb5d905d2ad2E_llvm_DBC6AE32,b6,__ZN3std6thread6Thread6unpark17h5798eff7a07424d7E,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6];
var FUNCTION_TABLE_vii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN5rustv6window6Window8ask_size17hd1135c3c453e75ddE,__ZN5rustv6window6Window4name17hc7e826f3ff10a3c2E,__ZN5rustv6window6Window11on_activate17h04b27160e23d2fc2E,__ZN5rustv6window6Window13on_deactivate17h52533d1c65774af0E,b7,__ZN5rustv6window6Window4info17h06efb8e97438bc18E,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_5flush17h50d536f2312d1f08E,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN90__LT_std__sys__unix__backtrace__tracing__imp__UnwindError_u20_as_u20_std__error__Error_GT_11description17hc2a6fbad875fd395E,__ZN3std5error5Error5cause17ha4634e74943c474cE,b7,b7,b7
,b7,__ZN281__LT_std__error___LT_impl_u20_core__convert__From_LT_alloc__string__String_GT__u20_for_u20_alloc__boxed__Box_LT_std__error__Error_u20__u2b__u20_core__marker__Send_u20__u2b__u20_core__marker__Sync_u20__u2b__u20__u27_static_GT__GT___from__StringError_u20_as_u20_std__error__Error_GT_11description17h786925ca32da1049E,__ZN3std5error5Error5cause17h2e93e9fdd9d452eaE,b7,b7,b7,b7,b7,b7,__ZN3std4sync4once4Once9call_once28__u7b__u7b_closure_u7d__u7d_17hd8edbcb9bf7675e1E,__ZN4core3ops8function6FnOnce9call_once17h740dd06527719856E,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_7reserve17hd11e617522a2f310E,b7,b7,b7,b7,b7,__ZN4core4iter5range93__LT_impl_u20_core__iter__iterator__Iterator_u20_for_u20_core__ops__range__Range_LT_A_GT__GT_4next17h055eab57e277f6b6E,b7,__ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_4push17hf3ffddf41093fec7E,__ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_7reserve17h19c990e43778820dE,b7,__ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_4push17h3aa9278a26666c97E,b7
,b7,b7,__ZN5alloc6string6String6as_str17h57aeac851cf3b6c0E,b7,b7,__ZN81__LT_rustv__r3d__vector__Vec2_LT_X_C__u20_Y_GT__u20_as_u20_core__clone__Clone_GT_5clone17h0f20656a3ab1ae05E,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN77__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17hcb609d28a80eb458E,__ZN80__LT_alloc__vec__IntoIter_LT_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17hce44e2318ace2591E,b7,b7,b7,b7,b7,_glutInit__wrapper,b7,b7,b7,b7,_glutReshapeWindow__wrapper,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN5rustv6window9callbacks12reshape_func17ha573a220215dcc65E,b7,__ZN5rustv6window9callbacks11motion_func17h57bd20c59f3716e5E,b7,__ZN5rustv6window9callbacks19passive_motion_func17h329377897b7a09a1E,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN4core3ptr13drop_in_place17hd55485ccc898009aE,b7,__ZN4core3ptr13drop_in_place17h633a458e8eb65ab0E,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,__ZN4core3mem6forget17h22d33bf15f8e5b5dE,b7,b7,b7,__ZN4core3mem6forget17h37695a73995dfc41E,b7,b7,b7,__ZN4core3mem6forget17hf65d2811865d3e89E,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN99__LT_rustv__r3d__vector__Vec4_LT_X_C__u20_Y_C__u20_Z_C__u20_W_GT__u20_as_u20_core__clone__Clone_GT_5clone17h704c555dac9a7208E,b7,b7,__ZN83__LT_rustv__r3d__vector__Vec4_LT_T_GT__u20_as_u20_rustv__r3d__vector__VecConsts_GT_5vaxis17habfdd3f147079d65E,b7,b7,b7,b7,b7,__ZN5alloc3fmt6format17h9b28a0d324b081e9E,b7,b7,b7,_glBindBuffer__wrapper,b7,b7,b7,b7,b7
,b7,b7,b7,_glAttachShader__wrapper,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN65__LT_alloc__string__String_u20_as_u20_core__ops__deref__Deref_GT_5deref17he1f2ef5c183904e0E,b7,__ZN5rustv7shaders17map_shader_params17h9a0a7598ab747bb8E,b7,b7,b7,b7,b7,b7,b7,b7,__ZN54__LT_I_u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17hf39266a51009a40bE,__ZN81__LT_core__iter__Enumerate_LT_I_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17h05fe401cb92845d3E,b7,b7,__ZN5rustv10emscripten5alert17hc82315ff20fd9b50E
,__ZN5alloc9allocator6Layout5array28__u7b__u7b_closure_u7d__u7d_17h936695aa73d42714E,__ZN5alloc9allocator6Layout5array28__u7b__u7b_closure_u7d__u7d_17hdcfdd71e3ad1d305E,__ZN5alloc9allocator6Layout5array28__u7b__u7b_closure_u7d__u7d_17hdf993ccd0ec553f0E,__ZN5alloc9allocator6Layout5array28__u7b__u7b_closure_u7d__u7d_17h1121c15b537d05caE,b7,__ZN4core6option13expect_failed17hc7b0dae7b501c3c5E,__ZN4core3mem4swap17ha99459f1e07731abE,__ZN4core3mem4swap17h8c74b5a0bd376223E,b7,b7,_glBindTexture__wrapper,b7,b7,__ZN71__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__deref__DerefMut_GT_9deref_mut17hfdaab856b5121256E,b7,b7,__ZN4core3ptr5write17h615b845359d1df8eE,b7,b7,__ZN71__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__deref__DerefMut_GT_9deref_mut17hb8e8a39207833cebE,b7,__ZN4core3ptr5write17h40092ed46b051c77E,b7,__ZN71__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__deref__DerefMut_GT_9deref_mut17h6a88986140ccca3fE,b7,b7,__ZN4core3ptr5write17he7e85e6848b3de02E,__ZN75__LT__RF__u27_a_u20_mut_u20_I_u20_as_u20_core__iter__iterator__Iterator_GT_4next17h4d84f7bb83caa7b1E,__ZN71__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__deref__DerefMut_GT_9deref_mut17h3f25f0ae33eaeb2eE,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN4core6result13unwrap_failed17h5d6248dc8d3b1c92E,b7,__ZN4core6result13unwrap_failed17h237618fa9b803e20E,b7,__ZN3std3ffi5c_str104__LT_impl_u20_core__convert__From_LT_std__ffi__c_str__NulError_GT__u20_for_u20_std__io__error__Error_GT_4from17hd874ef7fec3ca18bE,__ZN4core5slice20slice_index_len_fail17h440967be6f416601E,b7,b7,b7,__ZN4core6result13unwrap_failed17h6c499c654b178840E,b7,b7,b7,b7,b7
,b7,__ZN46__LT_std__thread__local__LocalKey_LT_T_GT__GT_4with17hf71f0fb8f6fc0d6cE,b7,__ZN4core5slice22slice_index_order_fail17h620f0e130a93079bE,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN3std9panicking15begin_panic_fmt17h4cb2c5614efe15b0E,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN4core9panicking9panic_fmt17hff08f8fc41769480E
,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN4core6result13unwrap_failed17h6d6f2059aaef4274E,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7];
var FUNCTION_TABLE_vidddd = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZN5rustv3r3d6vector4Vec417h52c31fcc1e26f7b7E,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8];
var FUNCTION_TABLE_viiiiiiiii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,_glTexImage2D__wrapper,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9];
var FUNCTION_TABLE_ii = [b10,b10,__ZN36__LT_T_u20_as_u20_core__any__Any_GT_11get_type_id17h0e756433c3c770d2E,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZN36__LT_T_u20_as_u20_core__any__Any_GT_11get_type_id17hab971be20d4694ceE,b10,__ZN36__LT_T_u20_as_u20_core__any__Any_GT_11get_type_id17h159ee43a8eb771e8E,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZN3std5error5Error7type_id17hf89047fc8489cde6E,b10,b10
,b10,b10,b10,__ZN3std5error5Error7type_id17hb7daff084262935aE,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,___stdio_close,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,_glutCreateWindow__wrapper,_glutGet__wrapper,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZN5alloc4heap15exchange_malloc28__u7b__u7b_closure_u7d__u7d_17h28c821926009efd3E
,__ZN5alloc9allocator5Alloc11alloc_array28__u7b__u7b_closure_u7d__u7d_17h0d2864211c15ad6fE,__ZN5alloc9allocator5Alloc11alloc_array28__u7b__u7b_closure_u7d__u7d_17h1f902bf46361f460E,__ZN5alloc9allocator5Alloc11alloc_array28__u7b__u7b_closure_u7d__u7d_17h64c9501ad7df77aaE,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZN91__LT_core__slice__Iter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17hebb15704c3f43268E,b10,__ZN91__LT_core__slice__Iter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17h5340d2be0d3d36f5E,b10,b10,b10,b10,b10,b10,__ZN4core3mem11size_of_val17hd28abde553f913caE,__ZN5rustv20create_vertex_buffer17h043aadcdf4a4b65bE,__ZN5rustv19create_index_buffer17he6189d4854b6bf52E,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,_glCreateShader__wrapper,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h7de432dec274b9e4E
,b10,__ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_3len17he9c0dae95c016fb0E,b10,b10,__ZN35__LT_core__ptr__Shared_LT_T_GT__GT_13new_unchecked17h9438c2f16e3cbf5dE,__ZN3std10sys_common12thread_local9StaticKey9lazy_init17h73ae988f9d1fd857E,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZN3std6thread6Thread3new17h7fe66d39127424c4E,b10,b10,b10,b10,__ZN45__LT_std__thread__local__os__Key_LT_T_GT__GT_3get17hcae762557156e778E,b10,b10,b10,b10,__ZN45__LT_std__thread__local__os__Key_LT_T_GT__GT_3get17h2a1a454ef25fc2a0E,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10];
var FUNCTION_TABLE_viiid = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZN68__LT_rustv__ShaderTest_u20_as_u20_rustv__window__Window_LT_A_GT__GT_6update17hb293f824ced58e41E,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11];
var FUNCTION_TABLE_vdddd = [b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,_glClearColor__wrapper,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12];
var FUNCTION_TABLE_viii = [b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZN68__LT_rustv__ShaderTest_u20_as_u20_rustv__window__Window_LT_A_GT__GT_6render17ha24d527fca165840E,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_9write_fmt17h3ae5995d2dbde838E,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZN4core3fmt10ArgumentV13new17hba5d1e436503efc2E,b13,b13,b13,__ZN54__LT_I_u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17h464a6e75c2087821E,b13,__ZN5rustv4Mesh9new_torus28__u7b__u7b_closure_u7d__u7d_17hc2fadd27fc5829f3E,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZN5alloc5slice29__LT_impl_u20__u5b_T_u5d__GT_8into_vec17h3318c47ea947c838E,b13,b13,b13,b13,b13,__ZN5rustv6window4push17h0e15bb959934d5a0E,b13,b13,b13,b13,b13,b13,__ZN4core3fmt10ArgumentV13new17h18c233152faad36eE,b13
,b13,b13,b13,b13,__ZN5rustv6window9callbacks13keyboard_func17h8afb74b465c8bcbeE,b13,__ZN5rustv6window9callbacks16keyboard_up_func17h81cfb555cc5d93caE,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZN5rustv6window9callbacks12special_func17h2cd004b2d3a139e2E,b13,__ZN5rustv6window9callbacks15special_up_func17h51cac959bd6caa3eE,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZN5rustv3r3d11vec_from_fn17h48db4c2e78f328c4E,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,__ZN45__LT_rustv__r3d__matrix__Matrix4_LT_V_GT__GT_8mul_vec417h72dc91b60d9736acE,b13,b13,b13,b13,b13,b13,__ZN83__LT_rustv__r3d__vector__Vec4_LT_T_GT__u20_as_u20_rustv__r3d__vector__VecNumOps_GT_4vadd17heead0a1b309e9b1bE,b13,b13,b13,b13,__ZN4core3fmt10ArgumentV13new17heecba43e0c9da516E,__ZN4core3fmt10ArgumentV13new17h0963b74890d3a7c4E,b13,__ZN5alloc6string6String8push_str17h266b3b801824a55cE,__ZN4core3fmt10ArgumentV13new17hab1dce820bb2a465E,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,__ZN4core3fmt10ArgumentV13new17hce4e39221511378dE,b13,b13,_emscripten_set_main_loop__wrapper,b13,__ZN5rustv7shaders13concat_shader17h5a1ffa7d0dd4f242E,b13,b13,b13,__ZN4core3fmt10ArgumentV13new17h0faa44f18fc9a722E,b13,__ZN4core3fmt10ArgumentV13new17h3f6d5d21b2b0a960E,b13,__ZN4core3fmt10ArgumentV13new17heff68ddf9489a9aaE,__ZN4core9panicking18panic_bounds_check17h4f2aed86024f45eaE,__ZN5alloc5slice29__LT_impl_u20__u5b_T_u5d__GT_4iter17h5e55a3e9fd3f69e6E,__ZN4core4iter8iterator8Iterator9enumerate17h84e68f3ee0005e74E,b13,b13,b13,b13,b13
,b13,b13,b13,b13,__ZN81__LT_core__iter__Enumerate_LT_I_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next28__u7b__u7b_closure_u7d__u7d_17hd4c5b8a92a03a9d1E,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZN57__LT_std__io__stdio__Stdout_u20_as_u20_std__io__Write_GT_9write_fmt17h1dd739be20d5df93E,b13,b13,b13,b13,b13,b13,__ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_7reserve17hbf70593baa5057a1E,b13,b13,b13,__ZN3std9panicking11begin_panic17hc122bd4e5599889dE,b13,b13,b13,b13
,__ZN3std9panicking12default_hook28__u7b__u7b_closure_u7d__u7d_17h708b6147ebf57a19E,b13,b13,b13,b13,b13,__ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_13reserve_exact17h296c93500f51454bE,b13,__ZN87__LT_alloc__string__String_u20_as_u20_core__convert__From_LT__RF__u27_a_u20_str_GT__GT_4from17h54dddae36c47961eE,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_7reserve17h23ae4e06b7738369E,__ZN4core3ops8function5impls91__LT_impl_u20_core__ops__function__FnOnce_LT_A_GT__u20_for_u20__RF__u27_a_u20_mut_u20_F_GT_9call_once17h7eded945303bc572E,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_7reserve17h793d16a411821ec0E,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13];
var FUNCTION_TABLE_v = [b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,__ZN5rustv6window9callbacks11render_null17hcbe53d744bc68365E,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZN5rustv6window9callbacks9idle_func17h0cb1903543c78295E,__ZN5rustv6window15extra_callbacks17hac8a0f23997fd68fE,b14,b14,b14,b14,b14,b14,b14,b14,__ZN5rustv14minimal_shader5mainr17hea6d9f5373a3b49bE,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZN5rustv4main17h8f4d8484a42e1fa2E
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,_SDL_GL_SwapBuffers__wrapper,b14,b14,__ZN5rustv14minimal_shader8mainloop17hc41baa1b8bfd45a0E,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,__ZN3std6thread4park17ha6b720b9f5f91b99E,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14];
var FUNCTION_TABLE_iiiii = [b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZN5rustv6window6Window8try_drag17h2bccd75bd8d64446E,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15];
var FUNCTION_TABLE_viiiiii = [b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZN5rustv6window6Window16on_mouse_dragged17h67f25591ab4cdf64E,__ZN5rustv6window6Window17on_mouse_dragging17hb400c807619ed27cE,b16,b16,b16,b16,b16,b16,__ZN5rustv6window6Window15on_mouse_button17h8648eb4123f6d127E,b16,b16,__ZN5rustv6window6Window11on_key_down17hb6f59d4443e7e866E,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16];
var FUNCTION_TABLE_iii = [b17,b17,b17,b17,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17hb6b961c3b6c5552bE,b17,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h35de561d9a47f6f6E,b17,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17hc3466ec5c4a643f8E,b17,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h6d4b64702f7faf25E,b17,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h841ff1d24841d75dE,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h80367485aaaa7b3fE,b17
,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17he6f4e1771f7c66c3E,b17,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17hfb7325ce693b0755E,b17,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h377cdb40ce13c710E,b17,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17hcd39cb2d1b68af27E,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZN4core3fmt5Write10write_char17h8a01fa0e9f290dbeE,__ZN4core3fmt5Write9write_fmt17hdef3dceabe5d17adE,b17,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h0ffbbe1350e3d249E,b17,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h1cd4ce965c284f94E
,b17,b17,b17,b17,b17,b17,b17,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17he7a9ed95c31cf6afE,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17h2eff75272aab797aE,b17,b17,b17,__ZN4core3fmt5Write10write_char17he7f5bfbab3a3636bE,__ZN4core3fmt5Write9write_fmt17h4203fb7fb914f24aE,b17,b17,b17,b17,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h6feba2c9496a2e63E,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17h93c000a4fcb94546E,b17,b17,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17hfcb276db77d5bb4aE,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17h8870975ff34002a5E,b17,b17,b17,b17,__ZN91__LT_std__sys__unix__backtrace__tracing__imp__UnwindError_u20_as_u20_core__fmt__Display_GT_3fmt17h1af2ee93352d7c1fE,__ZN89__LT_std__sys__unix__backtrace__tracing__imp__UnwindError_u20_as_u20_core__fmt__Debug_GT_3fmt17h54dfb7c07fa720d4E
,b17,b17,b17,b17,__ZN282__LT_std__error___LT_impl_u20_core__convert__From_LT_alloc__string__String_GT__u20_for_u20_alloc__boxed__Box_LT_std__error__Error_u20__u2b__u20_core__marker__Send_u20__u2b__u20_core__marker__Sync_u20__u2b__u20__u27_static_GT__GT___from__StringError_u20_as_u20_core__fmt__Display_GT_3fmt17h37c04ca12f17f2b2E,__ZN280__LT_std__error___LT_impl_u20_core__convert__From_LT_alloc__string__String_GT__u20_for_u20_alloc__boxed__Box_LT_std__error__Error_u20__u2b__u20_core__marker__Send_u20__u2b__u20_core__marker__Sync_u20__u2b__u20__u27_static_GT__GT___from__StringError_u20_as_u20_core__fmt__Debug_GT_3fmt17h263789a3eb6f5e6cE,b17,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17hb538d4f6c3ed6b26E,b17,b17,b17,b17,b17,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h3c9a1d78d4c7dab0E,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17hfac2ac9a40073f70E,b17,b17,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17hd2cbec55527f97a4E,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17he36c70978b1b5980E,b17,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17hb6592d31a2b66213E,b17,b17,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h5faf6f1192f832d9E,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17hfd93ed91c526585aE,b17,b17,__ZN4core3fmt5Write10write_char17h98205dc15e3040d9E,__ZN4core3fmt5Write9write_fmt17h8f4e2e40b5d0a201E,b17
,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h008a30c8d23343c5E,b17,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h480720259b9d066dE,b17,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h63a452c57d86e38cE,b17,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17hf18f346b517111bbE,b17,b17,b17,__ZN4core3cmp5impls57__LT_impl_u20_core__cmp__PartialOrd_u20_for_u20_isize_GT_2ge17hdc3de56da84035e7E,__ZN4core3cmp5impls57__LT_impl_u20_core__cmp__PartialOrd_u20_for_u20_usize_GT_2ge17ha1f3e207a473d6fbE,__ZN4core3cmp5impls57__LT_impl_u20_core__cmp__PartialOrd_u20_for_u20_isize_GT_2le17hc67215c37e8496a1E,__ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17hcde6e7b16c6b0ce2E,__ZN4core3fmt3num54__LT_impl_u20_core__fmt__Display_u20_for_u20_isize_GT_3fmt17h8af2a8dc431746efE,__ZN4core3fmt3num51__LT_impl_u20_core__fmt__Display_u20_for_u20_i8_GT_3fmt17h9e8d3c2adbf23969E,__ZN4core3fmt3num49__LT_impl_u20_core__fmt__Debug_u20_for_u20_i8_GT_3fmt17hd378e4308ae63536E,b17,b17,__ZN4core3fmt3num52__LT_impl_u20_core__fmt__Debug_u20_for_u20_usize_GT_3fmt17heec4ebcff62c8923E,b17,b17,b17,b17,b17,b17,b17,__ZN5rustv7texture15create_textures28__u7b__u7b_closure_u7d__u7d_17h40d24466e83a789eE,b17,__ZN5rustv4Mesh9new_torus28__u7b__u7b_closure_u7d__u7d_17hc09139ec76300eb3E
,__ZN4core3fmt3num50__LT_impl_u20_core__fmt__Debug_u20_for_u20_i32_GT_3fmt17h6be49b2b2c2ab878E,__ZN4core3fmt3num50__LT_impl_u20_core__fmt__Debug_u20_for_u20_u32_GT_3fmt17h132f420c75d3aee9E,b17,__ZN5rustv3r3d5c_str17h24b9d36d97df309cE,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZN5alloc4heap15exchange_malloc17h2b3df7e8451de4ebE,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,__ZN5alloc5slice29__LT_impl_u20__u5b_T_u5d__GT_10as_mut_ptr17hf38e4218fd2f99c8E,__ZN5alloc5slice29__LT_impl_u20__u5b_T_u5d__GT_3len17he093d11bcd98ee31E,b17,b17,__ZN5alloc5slice29__LT_impl_u20__u5b_T_u5d__GT_10as_mut_ptr17h254a168a70e8498aE,__ZN5alloc5slice29__LT_impl_u20__u5b_T_u5d__GT_3len17hbc05eed2d9497129E,b17,b17,__ZN5alloc5slice29__LT_impl_u20__u5b_T_u5d__GT_10as_mut_ptr17h6c03f87f3ba1fee6E,__ZN5alloc5slice29__LT_impl_u20__u5b_T_u5d__GT_3len17h1323cc666845b080E,b17,b17,b17,b17,b17,__ZN75__LT_core__result__Result_LT_T_C__u20_E_GT__u20_as_u20_core__fmt__Debug_GT_3fmt17h5352bca6f63ac9ecE,__ZN4core3fmt3num52__LT_impl_u20_core__fmt__Display_u20_for_u20_i32_GT_3fmt17h945b40ba8a32e7e6E,__ZN4core3fmt3num54__LT_impl_u20_core__fmt__Display_u20_for_u20_usize_GT_3fmt17h36438de9cd0d1868E,__ZN4core3fmt3num52__LT_impl_u20_core__fmt__Display_u20_for_u20_u32_GT_3fmt17h846ef3ae61db4016E,b17,__ZN81__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__index__Index_LT_usize_GT__GT_5index17h51b30c46da0176a3E,b17,b17,b17,b17,b17,b17
,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h19e9178258e47697E,__ZN66__LT_core__option__Option_LT_T_GT__u20_as_u20_core__fmt__Debug_GT_3fmt17h42e5765ca13fc896E,__ZN79__LT_rustv__r3d__vector__Vec2_LT_X_C__u20_Y_GT__u20_as_u20_core__fmt__Debug_GT_3fmt17hda8c9cb0f735ffd0E,__ZN60__LT_rustv__window__DragMode_u20_as_u20_core__fmt__Debug_GT_3fmt17h1b18e30d9705fc33E,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h892ed255c2d873ddE,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZN58__LT_alloc__string__String_u20_as_u20_core__fmt__Debug_GT_3fmt17hcf59a2c5b4e720cbE,b17,__ZN81__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__index__Index_LT_usize_GT__GT_5index17h7878de3758456ce9E,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,_glGetAttribLocation__wrapper,b17,b17,__ZN4core5array97__LT_impl_u20_core__fmt__Debug_u20_for_u20__u5b_T_u3b__u20__LT_unevaluated_u5b__u5d__GT__u5d__GT_3fmt17he614c7c0d1dc53c6E,b17,b17,__ZN63__LT_rustv__shaders__RenderMode_u20_as_u20_core__fmt__Debug_GT_3fmt17hf4241f7b6e56674eE,b17,b17,b17,b17,b17,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17ha7b5c8ab3e643687E,b17,__ZN65__LT_rustv__shaders__UniformTable_u20_as_u20_core__fmt__Debug_GT_3fmt17h9e920268054d6667E,b17,b17,b17,b17,b17,b17,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17hf743212a3ee09b0aE,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,__ZN81__LT_alloc__vec__Vec_LT_T_GT__u20_as_u20_core__ops__index__Index_LT_usize_GT__GT_5index17hc708425b720dd5c8E,b17,b17,__ZN5rustv7texture12load_texture17h8fd7cb2c0e9f43ceE,b17,b17,__ZN5alloc5slice29__LT_impl_u20__u5b_T_u5d__GT_10as_mut_ptr17hf374ec1d0d0e56fbE,__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_6offset17hd4a80f2f7dd3ac22E,b17,b17,b17,b17,__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_6offset17h3a9a85f2588f379eE,b17,b17,b17,__ZN5alloc5slice29__LT_impl_u20__u5b_T_u5d__GT_10as_mut_ptr17h527160738d4bc457E,__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_6offset17h8805074ce8868ed7E,b17,b17,b17,b17
,b17,b17,__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_6offset17h9ce9af0878e6ae80E,b17,b17,b17,b17,__ZN73__LT_core__fmt__Arguments_LT__u27_a_GT__u20_as_u20_core__fmt__Display_GT_3fmt17hf4480b626ca55887E,b17,b17,b17,__ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17he961a94e1c0dddd3E,__ZN75__LT_unwind__libunwind___Unwind_Reason_Code_u20_as_u20_core__fmt__Debug_GT_3fmt17h2629a786098247d4E,__ZN3std3sys4unix9backtrace7tracing3imp8trace_fn17h521d9d5bbd6493f2E_llvm_76A46BF1,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZN46__LT_std__thread__local__LocalKey_LT_T_GT__GT_4init17h5de2150e454e7c98E_llvm_2B27B54C
,b17,b17,__ZN4core3fmt5Write9write_fmt17ha9719642c9dfd6b6E,b17,b17,b17,b17,b17,b17,__ZN60__LT_alloc__string__String_u20_as_u20_core__fmt__Display_GT_3fmt17hc4e2d11fe3b65dddE_930,__ZN4core3fmt9Formatter9write_fmt17h650e8f365614dc75E,b17,b17,b17,b17,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h9e10bd20eeda4dd5E,__ZN60__LT_std__io__error__Error_u20_as_u20_core__fmt__Display_GT_3fmt17h8826c86e87109e90E,b17,__ZN52__LT__BP_const_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h1ae7c5142ae442afE,b17,b17,b17,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h4ccb3ed4250078f0E,b17,b17,b17,__ZN68__LT_std__thread__local__AccessError_u20_as_u20_core__fmt__Debug_GT_3fmt17hc412ba76f953a149E,__ZN60__LT_core__cell__BorrowError_u20_as_u20_core__fmt__Debug_GT_3fmt17h34a0450e2db10484E,__ZN62__LT_std__ffi__c_str__NulError_u20_as_u20_core__fmt__Debug_GT_3fmt17h002c553555a4dcddE,b17
,__ZN63__LT_core__cell__BorrowMutError_u20_as_u20_core__fmt__Debug_GT_3fmt17hce0f034cf9657997E,__ZN82__LT_std__sys_common__poison__PoisonError_LT_T_GT__u20_as_u20_core__fmt__Debug_GT_3fmt17hf629c6fde9c9c67cE,__ZN57__LT_core__str__Utf8Error_u20_as_u20_core__fmt__Debug_GT_3fmt17hf6ef5786446e3e0cE,__ZN61__LT_core__num__ParseIntError_u20_as_u20_core__fmt__Debug_GT_3fmt17hdb5b50f9117623b7E,b17,b17,b17,b17,__ZN65__LT_alloc__allocator__AllocErr_u20_as_u20_core__fmt__Display_GT_3fmt17h51086bd8dbdc56a7E,b17,b17,__ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17h423824ef576159ecE,__ZN53__LT_core__fmt__Error_u20_as_u20_core__fmt__Debug_GT_3fmt17h03b2748a480128faE,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17hbc154887b124d996E,__ZN4core3fmt3num52__LT_impl_u20_core__fmt__LowerHex_u20_for_u20_u8_GT_3fmt17h84496651f977fedcE,__ZN4core3fmt10ArgumentV110show_usize17hed36fe242b98ff16E_llvm_CE121B61,__ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17h54d337e1209f0957E,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h85b91ea6449cbdc2E,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h3bdaf55f9a9e78b7E,__ZN41__LT_char_u20_as_u20_core__fmt__Debug_GT_3fmt17h18e7ecc08f627b6cE,__ZN71__LT_core__ops__range__Range_LT_Idx_GT__u20_as_u20_core__fmt__Debug_GT_3fmt17he6c28011334139a8E,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17];
var FUNCTION_TABLE_viiii = [b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZN5rustv6window6Window12key_mappings17h3448e75f7a618426E,__ZN5rustv6window6Window13on_mouse_move17h44f03937d14a22e5E,__ZN5rustv6window6Window15on_passive_move17ha50fc340093a4d82E,__ZN5rustv6window6Window14on_ldrag_begin17hcc0d78a362757b13E,__ZN5rustv6window6Window14on_mdrag_begin17h1bea2666975b203dE,__ZN5rustv6window6Window14on_rdrag_begin17h2ba1dc489dacd5e9E,__ZN5rustv6window6Window12on_ldrag_end17hbb5f295f63099cb3E,__ZN5rustv6window6Window12on_mdrag_end17h67c337bd137314d0E
,__ZN5rustv6window6Window12on_rdrag_end17h289852f83fdd38a4E,b18,b18,b18,__ZN5rustv6window6Window11on_wheel_up17ha9d4853f64489f04E,__ZN5rustv6window6Window13on_wheel_down17h51b8ab97eb3f665eE,__ZN5rustv6window6Window9on_lclick17h5ae1a86096c852b7E,__ZN5rustv6window6Window9on_rclick17h89d65ee936bd4aa9E,__ZN5rustv6window6Window9on_mclick17h217bdd201b8723a8E,b18,b18,__ZN5rustv6window6Window15on_lbutton_down17hdde66eb2e56b9befE,__ZN5rustv6window6Window15on_rbutton_down17hebc1ae63bddb0aaeE,__ZN5rustv6window6Window13on_lbutton_up17hc9b15287eadb07f2E,__ZN5rustv6window6Window13on_rbutton_up17h00955861f0f02f0dE,__ZN5rustv6window6Window15on_mbutton_down17hfe0ae7df57cf87bfE,__ZN5rustv6window6Window13on_mbutton_up17h382c7d11e55c6d64E,b18,b18,b18,b18,b18,b18,__ZN5rustv6window6Window7on_drop17h5c548d570c69c29fE,__ZN5rustv6window6Window7command17h87f6e8c8d3fb79f1E,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_5write17hdd48e021e48a86b6E,b18,__ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_9write_all17h9ed703d30b73142aE,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,_glViewport__wrapper,b18,b18,b18,b18,b18,b18,b18,__ZN5rustv6window9callbacks10mouse_func17h953632dd851c215aE,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,__ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_14from_raw_parts17h4667cea7a6ae9977E,b18,b18,b18,__ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_14from_raw_parts17he240d1178c248e26E,b18,b18,b18,__ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_14from_raw_parts17hd63f42b385420b95E,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,__ZN57__LT_V_u20_as_u20_rustv__r3d__vector__VecBroadcastOps_GT_6vmad_y17he43c7a85a42d13d3E,__ZN57__LT_V_u20_as_u20_rustv__r3d__vector__VecBroadcastOps_GT_6vmad_z17hb32a8cd5fb918ac4E,__ZN57__LT_V_u20_as_u20_rustv__r3d__vector__VecBroadcastOps_GT_6vmad_w17h311cd3cf44864ef7E,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,_glBufferData__wrapper,b18,_glShaderSource__wrapper,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZN3std4sync4once4Once10call_inner17hf9e906ed11e12d21E,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,__ZN3std2io5error5Error3new17haaf2cf6c65656bd6E,b18,b18,b18,b18,b18,b18,__ZN4core6result13unwrap_failed17haaf56fe186515641E,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZN73__LT_std__io__buffered__LineWriter_LT_W_GT__u20_as_u20_std__io__Write_GT_5write17h3c860f13644f7f7fE,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18];

  return { _llvm_bswap_i32: _llvm_bswap_i32, _main: _main, dynCall_i: dynCall_i, stackSave: stackSave, _i64Subtract: _i64Subtract, _rust_eh_personality: _rust_eh_personality, ___udivdi3: ___udivdi3, dynCall_vidddd: dynCall_vidddd, setThrew: setThrew, dynCall_viii: dynCall_viii, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _fflush: _fflush, _htonl: _htonl, _llvm_ctlz_i64: _llvm_ctlz_i64, _bitshift64Ashr: _bitshift64Ashr, _memset: _memset, dynCall_ii: dynCall_ii, _sbrk: _sbrk, _memcpy: _memcpy, stackAlloc: stackAlloc, ___muldi3: ___muldi3, dynCall_vii: dynCall_vii, ___uremdi3: ___uremdi3, dynCall_vi: dynCall_vi, dynCall_viiiiiii: dynCall_viiiiiii, getTempRet0: getTempRet0, dynCall_di: dynCall_di, _ntohs: _ntohs, setTempRet0: setTempRet0, _i64Add: _i64Add, dynCall_iiii: dynCall_iiii, _pthread_mutex_unlock: _pthread_mutex_unlock, _llvm_bswap_i16: _llvm_bswap_i16, _emscripten_get_global_libc: _emscripten_get_global_libc, dynCall_iiiii: dynCall_iiiii, dynCall_viiid: dynCall_viiid, _htons: _htons, dynCall_viiii: dynCall_viiii, ___errno_location: ___errno_location, dynCall_viiiii: dynCall_viiiii, _free: _free, runPostSets: runPostSets, dynCall_viiiiii: dynCall_viiiiii, establishStackSpace: establishStackSpace, _memmove: _memmove, stackRestore: stackRestore, _malloc: _malloc, dynCall_iii: dynCall_iii, _pthread_mutex_lock: _pthread_mutex_lock, dynCall_viiiiiiiii: dynCall_viiiiiiiii, dynCall_d: dynCall_d, dynCall_v: dynCall_v, dynCall_vdddd: dynCall_vdddd };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real__rust_eh_personality = asm["_rust_eh_personality"]; asm["_rust_eh_personality"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__rust_eh_personality.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real__llvm_ctlz_i64 = asm["_llvm_ctlz_i64"]; asm["_llvm_ctlz_i64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_ctlz_i64.apply(null, arguments);
};

var real__bitshift64Ashr = asm["_bitshift64Ashr"]; asm["_bitshift64Ashr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Ashr.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__ntohs = asm["_ntohs"]; asm["_ntohs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__ntohs.apply(null, arguments);
};

var real__htonl = asm["_htonl"]; asm["_htonl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__htonl.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__pthread_mutex_unlock = asm["_pthread_mutex_unlock"]; asm["_pthread_mutex_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_unlock.apply(null, arguments);
};

var real__llvm_bswap_i16 = asm["_llvm_bswap_i16"]; asm["_llvm_bswap_i16"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i16.apply(null, arguments);
};

var real__emscripten_get_global_libc = asm["_emscripten_get_global_libc"]; asm["_emscripten_get_global_libc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_get_global_libc.apply(null, arguments);
};

var real__htons = asm["_htons"]; asm["_htons"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__htons.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__pthread_mutex_lock = asm["_pthread_mutex_lock"]; asm["_pthread_mutex_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_lock.apply(null, arguments);
};
var _main = Module["_main"] = asm["_main"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var _rust_eh_personality = Module["_rust_eh_personality"] = asm["_rust_eh_personality"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var _llvm_ctlz_i64 = Module["_llvm_ctlz_i64"] = asm["_llvm_ctlz_i64"];
var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
var _memset = Module["_memset"] = asm["_memset"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _ntohs = Module["_ntohs"] = asm["_ntohs"];
var _htonl = Module["_htonl"] = asm["_htonl"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"];
var _llvm_bswap_i16 = Module["_llvm_bswap_i16"] = asm["_llvm_bswap_i16"];
var _emscripten_get_global_libc = Module["_emscripten_get_global_libc"] = asm["_emscripten_get_global_libc"];
var _htons = Module["_htons"] = asm["_htons"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_d = Module["dynCall_d"] = asm["dynCall_d"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_di = Module["dynCall_di"] = asm["dynCall_di"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_vidddd = Module["dynCall_vidddd"] = asm["dynCall_vidddd"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viiid = Module["dynCall_viiid"] = asm["dynCall_viiid"];
var dynCall_vdddd = Module["dynCall_vdddd"] = asm["dynCall_vdddd"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;
Runtime.stackAlloc = Module['stackAlloc'];
Runtime.stackSave = Module['stackSave'];
Runtime.stackRestore = Module['stackRestore'];
Runtime.establishStackSpace = Module['establishStackSpace'];
Runtime.setTempRet0 = Module['setTempRet0'];
Runtime.getTempRet0 = Module['getTempRet0'];


// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;







/**
 * @constructor
 * @extends {Error}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



//# sourceMappingURL=rustv-536cfdfc92abe37a.js.map